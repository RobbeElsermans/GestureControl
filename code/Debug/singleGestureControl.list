
singleGestureControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015a48  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08015be8  08015be8  00025be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015e48  08015e48  000300ec  2**0
                  CONTENTS
  4 .ARM          00000008  08015e48  08015e48  00025e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015e50  08015e50  000300ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015e50  08015e50  00025e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015e54  08015e54  00025e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08015e58  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007310  200000f0  08015f44  000300f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20007400  08015f44  00037400  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00066b3b  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d3a  00000000  00000000  00096c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a48  00000000  00000000  0009c998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001858  00000000  00000000  0009e3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020944  00000000  00000000  0009fc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026116  00000000  00000000  000c057c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7ca4  00000000  00000000  000e6692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019e336  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077c8  00000000  00000000  0019e38c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f0 	.word	0x200000f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08015bd0 	.word	0x08015bd0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f4 	.word	0x200000f4
 80001dc:	08015bd0 	.word	0x08015bd0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_ldivmod>:
 8000a6c:	b97b      	cbnz	r3, 8000a8e <__aeabi_ldivmod+0x22>
 8000a6e:	b972      	cbnz	r2, 8000a8e <__aeabi_ldivmod+0x22>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bfbe      	ittt	lt
 8000a74:	2000      	movlt	r0, #0
 8000a76:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000a7a:	e006      	blt.n	8000a8a <__aeabi_ldivmod+0x1e>
 8000a7c:	bf08      	it	eq
 8000a7e:	2800      	cmpeq	r0, #0
 8000a80:	bf1c      	itt	ne
 8000a82:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000a86:	f04f 30ff 	movne.w	r0, #4294967295
 8000a8a:	f000 b9b9 	b.w	8000e00 <__aeabi_idiv0>
 8000a8e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a92:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a96:	2900      	cmp	r1, #0
 8000a98:	db09      	blt.n	8000aae <__aeabi_ldivmod+0x42>
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	db1a      	blt.n	8000ad4 <__aeabi_ldivmod+0x68>
 8000a9e:	f000 f84d 	bl	8000b3c <__udivmoddi4>
 8000aa2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aaa:	b004      	add	sp, #16
 8000aac:	4770      	bx	lr
 8000aae:	4240      	negs	r0, r0
 8000ab0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	db1b      	blt.n	8000af0 <__aeabi_ldivmod+0x84>
 8000ab8:	f000 f840 	bl	8000b3c <__udivmoddi4>
 8000abc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac4:	b004      	add	sp, #16
 8000ac6:	4240      	negs	r0, r0
 8000ac8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000acc:	4252      	negs	r2, r2
 8000ace:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ad2:	4770      	bx	lr
 8000ad4:	4252      	negs	r2, r2
 8000ad6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ada:	f000 f82f 	bl	8000b3c <__udivmoddi4>
 8000ade:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae6:	b004      	add	sp, #16
 8000ae8:	4240      	negs	r0, r0
 8000aea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000aee:	4770      	bx	lr
 8000af0:	4252      	negs	r2, r2
 8000af2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000af6:	f000 f821 	bl	8000b3c <__udivmoddi4>
 8000afa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000afe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b02:	b004      	add	sp, #16
 8000b04:	4252      	negs	r2, r2
 8000b06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b96e 	b.w	8000e00 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	468c      	mov	ip, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f040 8083 	bne.w	8000c52 <__udivmoddi4+0x116>
 8000b4c:	428a      	cmp	r2, r1
 8000b4e:	4617      	mov	r7, r2
 8000b50:	d947      	bls.n	8000be2 <__udivmoddi4+0xa6>
 8000b52:	fab2 f282 	clz	r2, r2
 8000b56:	b142      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b58:	f1c2 0020 	rsb	r0, r2, #32
 8000b5c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b60:	4091      	lsls	r1, r2
 8000b62:	4097      	lsls	r7, r2
 8000b64:	ea40 0c01 	orr.w	ip, r0, r1
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbbc f6f8 	udiv	r6, ip, r8
 8000b74:	fa1f fe87 	uxth.w	lr, r7
 8000b78:	fb08 c116 	mls	r1, r8, r6, ip
 8000b7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b80:	fb06 f10e 	mul.w	r1, r6, lr
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18fb      	adds	r3, r7, r3
 8000b8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b8e:	f080 8119 	bcs.w	8000dc4 <__udivmoddi4+0x288>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8116 	bls.w	8000dc4 <__udivmoddi4+0x288>
 8000b98:	3e02      	subs	r6, #2
 8000b9a:	443b      	add	r3, r7
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb0:	45a6      	cmp	lr, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	193c      	adds	r4, r7, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bba:	f080 8105 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000bbe:	45a6      	cmp	lr, r4
 8000bc0:	f240 8102 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	443c      	add	r4, r7
 8000bc8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bcc:	eba4 040e 	sub.w	r4, r4, lr
 8000bd0:	2600      	movs	r6, #0
 8000bd2:	b11d      	cbz	r5, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bdc:	4631      	mov	r1, r6
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	b902      	cbnz	r2, 8000be6 <__udivmoddi4+0xaa>
 8000be4:	deff      	udf	#255	; 0xff
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	2a00      	cmp	r2, #0
 8000bec:	d150      	bne.n	8000c90 <__udivmoddi4+0x154>
 8000bee:	1bcb      	subs	r3, r1, r7
 8000bf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf4:	fa1f f887 	uxth.w	r8, r7
 8000bf8:	2601      	movs	r6, #1
 8000bfa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bfe:	0c21      	lsrs	r1, r4, #16
 8000c00:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c08:	fb08 f30c 	mul.w	r3, r8, ip
 8000c0c:	428b      	cmp	r3, r1
 8000c0e:	d907      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000c10:	1879      	adds	r1, r7, r1
 8000c12:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0xe2>
 8000c18:	428b      	cmp	r3, r1
 8000c1a:	f200 80e9 	bhi.w	8000df0 <__udivmoddi4+0x2b4>
 8000c1e:	4684      	mov	ip, r0
 8000c20:	1ac9      	subs	r1, r1, r3
 8000c22:	b2a3      	uxth	r3, r4
 8000c24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c28:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c2c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c30:	fb08 f800 	mul.w	r8, r8, r0
 8000c34:	45a0      	cmp	r8, r4
 8000c36:	d907      	bls.n	8000c48 <__udivmoddi4+0x10c>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x10a>
 8000c40:	45a0      	cmp	r8, r4
 8000c42:	f200 80d9 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c46:	4618      	mov	r0, r3
 8000c48:	eba4 0408 	sub.w	r4, r4, r8
 8000c4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c50:	e7bf      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0x12e>
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	f000 80b1 	beq.w	8000dbe <__udivmoddi4+0x282>
 8000c5c:	2600      	movs	r6, #0
 8000c5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c62:	4630      	mov	r0, r6
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	fab3 f683 	clz	r6, r3
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d14a      	bne.n	8000d08 <__udivmoddi4+0x1cc>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d302      	bcc.n	8000c7c <__udivmoddi4+0x140>
 8000c76:	4282      	cmp	r2, r0
 8000c78:	f200 80b8 	bhi.w	8000dec <__udivmoddi4+0x2b0>
 8000c7c:	1a84      	subs	r4, r0, r2
 8000c7e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c82:	2001      	movs	r0, #1
 8000c84:	468c      	mov	ip, r1
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	d0a8      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c8a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c8e:	e7a5      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f603 	lsr.w	r6, r0, r3
 8000c98:	4097      	lsls	r7, r2
 8000c9a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c9e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca2:	40d9      	lsrs	r1, r3
 8000ca4:	4330      	orrs	r0, r6
 8000ca6:	0c03      	lsrs	r3, r0, #16
 8000ca8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cac:	fa1f f887 	uxth.w	r8, r7
 8000cb0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb8:	fb06 f108 	mul.w	r1, r6, r8
 8000cbc:	4299      	cmp	r1, r3
 8000cbe:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x19c>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cca:	f080 808d 	bcs.w	8000de8 <__udivmoddi4+0x2ac>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 808a 	bls.w	8000de8 <__udivmoddi4+0x2ac>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b281      	uxth	r1, r0
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce8:	fb00 f308 	mul.w	r3, r0, r8
 8000cec:	428b      	cmp	r3, r1
 8000cee:	d907      	bls.n	8000d00 <__udivmoddi4+0x1c4>
 8000cf0:	1879      	adds	r1, r7, r1
 8000cf2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cf6:	d273      	bcs.n	8000de0 <__udivmoddi4+0x2a4>
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d971      	bls.n	8000de0 <__udivmoddi4+0x2a4>
 8000cfc:	3802      	subs	r0, #2
 8000cfe:	4439      	add	r1, r7
 8000d00:	1acb      	subs	r3, r1, r3
 8000d02:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d06:	e778      	b.n	8000bfa <__udivmoddi4+0xbe>
 8000d08:	f1c6 0c20 	rsb	ip, r6, #32
 8000d0c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d10:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d14:	431c      	orrs	r4, r3
 8000d16:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d1e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d22:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d26:	431f      	orrs	r7, r3
 8000d28:	0c3b      	lsrs	r3, r7, #16
 8000d2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2e:	fa1f f884 	uxth.w	r8, r4
 8000d32:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d36:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d3a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d3e:	458a      	cmp	sl, r1
 8000d40:	fa02 f206 	lsl.w	r2, r2, r6
 8000d44:	fa00 f306 	lsl.w	r3, r0, r6
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x220>
 8000d4a:	1861      	adds	r1, r4, r1
 8000d4c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d50:	d248      	bcs.n	8000de4 <__udivmoddi4+0x2a8>
 8000d52:	458a      	cmp	sl, r1
 8000d54:	d946      	bls.n	8000de4 <__udivmoddi4+0x2a8>
 8000d56:	f1a9 0902 	sub.w	r9, r9, #2
 8000d5a:	4421      	add	r1, r4
 8000d5c:	eba1 010a 	sub.w	r1, r1, sl
 8000d60:	b2bf      	uxth	r7, r7
 8000d62:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d66:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d6a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d6e:	fb00 f808 	mul.w	r8, r0, r8
 8000d72:	45b8      	cmp	r8, r7
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x24a>
 8000d76:	19e7      	adds	r7, r4, r7
 8000d78:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d7c:	d22e      	bcs.n	8000ddc <__udivmoddi4+0x2a0>
 8000d7e:	45b8      	cmp	r8, r7
 8000d80:	d92c      	bls.n	8000ddc <__udivmoddi4+0x2a0>
 8000d82:	3802      	subs	r0, #2
 8000d84:	4427      	add	r7, r4
 8000d86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d8a:	eba7 0708 	sub.w	r7, r7, r8
 8000d8e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d92:	454f      	cmp	r7, r9
 8000d94:	46c6      	mov	lr, r8
 8000d96:	4649      	mov	r1, r9
 8000d98:	d31a      	bcc.n	8000dd0 <__udivmoddi4+0x294>
 8000d9a:	d017      	beq.n	8000dcc <__udivmoddi4+0x290>
 8000d9c:	b15d      	cbz	r5, 8000db6 <__udivmoddi4+0x27a>
 8000d9e:	ebb3 020e 	subs.w	r2, r3, lr
 8000da2:	eb67 0701 	sbc.w	r7, r7, r1
 8000da6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000daa:	40f2      	lsrs	r2, r6
 8000dac:	ea4c 0202 	orr.w	r2, ip, r2
 8000db0:	40f7      	lsrs	r7, r6
 8000db2:	e9c5 2700 	strd	r2, r7, [r5]
 8000db6:	2600      	movs	r6, #0
 8000db8:	4631      	mov	r1, r6
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	462e      	mov	r6, r5
 8000dc0:	4628      	mov	r0, r5
 8000dc2:	e70b      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc4:	4606      	mov	r6, r0
 8000dc6:	e6e9      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dc8:	4618      	mov	r0, r3
 8000dca:	e6fd      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dcc:	4543      	cmp	r3, r8
 8000dce:	d2e5      	bcs.n	8000d9c <__udivmoddi4+0x260>
 8000dd0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dd4:	eb69 0104 	sbc.w	r1, r9, r4
 8000dd8:	3801      	subs	r0, #1
 8000dda:	e7df      	b.n	8000d9c <__udivmoddi4+0x260>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	e7d2      	b.n	8000d86 <__udivmoddi4+0x24a>
 8000de0:	4660      	mov	r0, ip
 8000de2:	e78d      	b.n	8000d00 <__udivmoddi4+0x1c4>
 8000de4:	4681      	mov	r9, r0
 8000de6:	e7b9      	b.n	8000d5c <__udivmoddi4+0x220>
 8000de8:	4666      	mov	r6, ip
 8000dea:	e775      	b.n	8000cd8 <__udivmoddi4+0x19c>
 8000dec:	4630      	mov	r0, r6
 8000dee:	e74a      	b.n	8000c86 <__udivmoddi4+0x14a>
 8000df0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df4:	4439      	add	r1, r7
 8000df6:	e713      	b.n	8000c20 <__udivmoddi4+0xe4>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	443c      	add	r4, r7
 8000dfc:	e724      	b.n	8000c48 <__udivmoddi4+0x10c>
 8000dfe:	bf00      	nop

08000e00 <__aeabi_idiv0>:
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop

08000e04 <MX_TOF_Init>:
static void getResult(uint8_t sensor, RANGING_SENSOR_Result_t * result);
static long getDistance(uint8_t sensor, RANGING_SENSOR_Result_t * result);
static void objectPresent();

void MX_TOF_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_53L3A2_MultiSensorRanging_Init();
 8000e08:	f000 f9e0 	bl	80011cc <MX_53L3A2_MultiSensorRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <MX_TOF_Process>:

/*
 * LM background task
 */
void MX_TOF_Process(void)
{
 8000e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e12:	b08d      	sub	sp, #52	; 0x34
 8000e14:	af06      	add	r7, sp, #24
	  //Enkel de 1ste sensor (Center) opstarten
	  /*	Hier zeggen we welk profiel we willen gebruiken
	   * 	bv.
	   *
	   */
	start_sensor(VL53L3A2_DEV_CENTER);
 8000e16:	2001      	movs	r0, #1
 8000e18:	f000 fa3c 	bl	8001294 <start_sensor>

  //MX_53L3A2_MultiSensorRanging_Process();

  /* USER CODE BEGIN TOF_Process_PostTreatment */
	while(1){
		HAL_Delay(5);
 8000e1c:	2005      	movs	r0, #5
 8000e1e:	f011 fb95 	bl	801254c <HAL_Delay>
		getResult(VL53L3A2_DEV_CENTER, Result);
 8000e22:	4960      	ldr	r1, [pc, #384]	; (8000fa4 <MX_TOF_Process+0x194>)
 8000e24:	2001      	movs	r0, #1
 8000e26:	f000 fa9d 	bl	8001364 <getResult>


		long int temp1 = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
		int divider = 6;
 8000e2e:	2306      	movs	r3, #6
 8000e30:	60fb      	str	r3, [r7, #12]
		for(int x = 0; x < divider; x++){
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	e011      	b.n	8000e5c <MX_TOF_Process+0x4c>
			getResult(VL53L3A2_DEV_CENTER, Result);
 8000e38:	495a      	ldr	r1, [pc, #360]	; (8000fa4 <MX_TOF_Process+0x194>)
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	f000 fa92 	bl	8001364 <getResult>
			temp1 += getDistance(VL53L3A2_DEV_CENTER, Result);
 8000e40:	4958      	ldr	r1, [pc, #352]	; (8000fa4 <MX_TOF_Process+0x194>)
 8000e42:	2001      	movs	r0, #1
 8000e44:	f000 faa4 	bl	8001390 <getDistance>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	617b      	str	r3, [r7, #20]
			HAL_Delay(4);
 8000e50:	2004      	movs	r0, #4
 8000e52:	f011 fb7b 	bl	801254c <HAL_Delay>
		for(int x = 0; x < divider; x++){
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	dbe9      	blt.n	8000e38 <MX_TOF_Process+0x28>
		}
		dis1 = (int)(temp1/(double)divider);
 8000e64:	6978      	ldr	r0, [r7, #20]
 8000e66:	f7ff fb5d 	bl	8000524 <__aeabi_i2d>
 8000e6a:	4604      	mov	r4, r0
 8000e6c:	460d      	mov	r5, r1
 8000e6e:	68f8      	ldr	r0, [r7, #12]
 8000e70:	f7ff fb58 	bl	8000524 <__aeabi_i2d>
 8000e74:	4602      	mov	r2, r0
 8000e76:	460b      	mov	r3, r1
 8000e78:	4620      	mov	r0, r4
 8000e7a:	4629      	mov	r1, r5
 8000e7c:	f7ff fce6 	bl	800084c <__aeabi_ddiv>
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	4610      	mov	r0, r2
 8000e86:	4619      	mov	r1, r3
 8000e88:	f7ff fdc8 	bl	8000a1c <__aeabi_d2iz>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	4a46      	ldr	r2, [pc, #280]	; (8000fa8 <MX_TOF_Process+0x198>)
 8000e90:	6013      	str	r3, [r2, #0]


		if(ObjectPresent)
 8000e92:	4b46      	ldr	r3, [pc, #280]	; (8000fac <MX_TOF_Process+0x19c>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d015      	beq.n	8000ec6 <MX_TOF_Process+0xb6>
		{
			getResult(VL53L3A2_DEV_LEFT, Result);
 8000e9a:	4942      	ldr	r1, [pc, #264]	; (8000fa4 <MX_TOF_Process+0x194>)
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f000 fa61 	bl	8001364 <getResult>
			dis0 = getDistance(VL53L3A2_DEV_LEFT, Result);
 8000ea2:	4940      	ldr	r1, [pc, #256]	; (8000fa4 <MX_TOF_Process+0x194>)
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	f000 fa73 	bl	8001390 <getDistance>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	4a40      	ldr	r2, [pc, #256]	; (8000fb0 <MX_TOF_Process+0x1a0>)
 8000eae:	6013      	str	r3, [r2, #0]

			getResult(VL53L3A2_DEV_RIGHT, Result);
 8000eb0:	493c      	ldr	r1, [pc, #240]	; (8000fa4 <MX_TOF_Process+0x194>)
 8000eb2:	2002      	movs	r0, #2
 8000eb4:	f000 fa56 	bl	8001364 <getResult>
			dis2 = getDistance(VL53L3A2_DEV_RIGHT, Result);
 8000eb8:	493a      	ldr	r1, [pc, #232]	; (8000fa4 <MX_TOF_Process+0x194>)
 8000eba:	2002      	movs	r0, #2
 8000ebc:	f000 fa68 	bl	8001390 <getDistance>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	4a3c      	ldr	r2, [pc, #240]	; (8000fb4 <MX_TOF_Process+0x1a4>)
 8000ec4:	6013      	str	r3, [r2, #0]
		}
		//Bug van 1ste meeting dat deze fout is (Een te hoge waarden)
		if(dis1 >= 17760520)
 8000ec6:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <MX_TOF_Process+0x198>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a3b      	ldr	r2, [pc, #236]	; (8000fb8 <MX_TOF_Process+0x1a8>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	dd0b      	ble.n	8000ee8 <MX_TOF_Process+0xd8>
		{
			HAL_Delay(4);
 8000ed0:	2004      	movs	r0, #4
 8000ed2:	f011 fb3b 	bl	801254c <HAL_Delay>
			getResult(VL53L3A2_DEV_CENTER, Result);
 8000ed6:	4933      	ldr	r1, [pc, #204]	; (8000fa4 <MX_TOF_Process+0x194>)
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f000 fa43 	bl	8001364 <getResult>
			dis1 = (long)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].Distance[0];
 8000ede:	4b31      	ldr	r3, [pc, #196]	; (8000fa4 <MX_TOF_Process+0x194>)
 8000ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	4b30      	ldr	r3, [pc, #192]	; (8000fa8 <MX_TOF_Process+0x198>)
 8000ee6:	601a      	str	r2, [r3, #0]
		}

		//ObjectPresent();
		objectPresent();
 8000ee8:	f000 f870 	bl	8000fcc <objectPresent>

		  //Ticks
		  // long x = HAL_GetTick();
		  //printf("Ticks: %ld ", x);

		if(!ObjectPresent){
 8000eec:	4b2f      	ldr	r3, [pc, #188]	; (8000fac <MX_TOF_Process+0x19c>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	f083 0301 	eor.w	r3, r3, #1
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d009      	beq.n	8000f0e <MX_TOF_Process+0xfe>
			printf(" %d ",dis1);
 8000efa:	4b2b      	ldr	r3, [pc, #172]	; (8000fa8 <MX_TOF_Process+0x198>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4619      	mov	r1, r3
 8000f00:	482e      	ldr	r0, [pc, #184]	; (8000fbc <MX_TOF_Process+0x1ac>)
 8000f02:	f013 fe85 	bl	8014c10 <iprintf>
			printf("\r\n");
 8000f06:	482e      	ldr	r0, [pc, #184]	; (8000fc0 <MX_TOF_Process+0x1b0>)
 8000f08:	f013 ff08 	bl	8014d1c <puts>
 8000f0c:	e03b      	b.n	8000f86 <MX_TOF_Process+0x176>
		}
		else{
			uint8_t obj0 = (uint8_t)Result[VL53L3A2_DEV_LEFT].ZoneResult[0].NumberOfTargets;
 8000f0e:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <MX_TOF_Process+0x194>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	72fb      	strb	r3, [r7, #11]
			uint8_t obj1 = (uint8_t)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].NumberOfTargets;
 8000f14:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <MX_TOF_Process+0x194>)
 8000f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f18:	72bb      	strb	r3, [r7, #10]
			uint8_t obj2 = (uint8_t)Result[VL53L3A2_DEV_RIGHT].ZoneResult[0].NumberOfTargets;
 8000f1a:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <MX_TOF_Process+0x194>)
 8000f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f20:	727b      	strb	r3, [r7, #9]

			uint8_t sta0 = (uint8_t)Result[VL53L3A2_DEV_LEFT].ZoneResult[0].Status[0];
 8000f22:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <MX_TOF_Process+0x194>)
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	723b      	strb	r3, [r7, #8]
			uint8_t sta1 = (uint8_t)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].Status[0];
 8000f28:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <MX_TOF_Process+0x194>)
 8000f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f2c:	71fb      	strb	r3, [r7, #7]
			uint8_t sta2 = (uint8_t)Result[VL53L3A2_DEV_RIGHT].ZoneResult[0].Status[0];
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <MX_TOF_Process+0x194>)
 8000f30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000f34:	71bb      	strb	r3, [r7, #6]
			if(sta0 == sta1 == sta2 == 0){
 8000f36:	7a3a      	ldrb	r2, [r7, #8]
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	bf0c      	ite	eq
 8000f3e:	2301      	moveq	r3, #1
 8000f40:	2300      	movne	r3, #0
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	461a      	mov	r2, r3
 8000f46:	79bb      	ldrb	r3, [r7, #6]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d01c      	beq.n	8000f86 <MX_TOF_Process+0x176>
			printf("left: %5d obj: %1d sta: %2d \t center: %5d obj: %1d sta: %2d \t right: %5d obj: %d sta: %2d",dis0,obj0,sta0,dis1,obj1,sta1,dis2,obj2,sta2);
 8000f4c:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <MX_TOF_Process+0x1a0>)
 8000f4e:	681e      	ldr	r6, [r3, #0]
 8000f50:	f897 c00b 	ldrb.w	ip, [r7, #11]
 8000f54:	f897 e008 	ldrb.w	lr, [r7, #8]
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <MX_TOF_Process+0x198>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	7aba      	ldrb	r2, [r7, #10]
 8000f5e:	79f9      	ldrb	r1, [r7, #7]
 8000f60:	4814      	ldr	r0, [pc, #80]	; (8000fb4 <MX_TOF_Process+0x1a4>)
 8000f62:	6800      	ldr	r0, [r0, #0]
 8000f64:	7a7c      	ldrb	r4, [r7, #9]
 8000f66:	79bd      	ldrb	r5, [r7, #6]
 8000f68:	9505      	str	r5, [sp, #20]
 8000f6a:	9404      	str	r4, [sp, #16]
 8000f6c:	9003      	str	r0, [sp, #12]
 8000f6e:	9102      	str	r1, [sp, #8]
 8000f70:	9201      	str	r2, [sp, #4]
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	4673      	mov	r3, lr
 8000f76:	4662      	mov	r2, ip
 8000f78:	4631      	mov	r1, r6
 8000f7a:	4812      	ldr	r0, [pc, #72]	; (8000fc4 <MX_TOF_Process+0x1b4>)
 8000f7c:	f013 fe48 	bl	8014c10 <iprintf>
			printf("\r\n");
 8000f80:	480f      	ldr	r0, [pc, #60]	; (8000fc0 <MX_TOF_Process+0x1b0>)
 8000f82:	f013 fecb 	bl	8014d1c <puts>
			}
		}

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, ObjectPresent);
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <MX_TOF_Process+0x19c>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	2120      	movs	r1, #32
 8000f8e:	480e      	ldr	r0, [pc, #56]	; (8000fc8 <MX_TOF_Process+0x1b8>)
 8000f90:	f011 fe66 	bl	8012c60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L_O_GPIO_Port, L_O_Pin, ObjectPresent);
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <MX_TOF_Process+0x19c>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	2180      	movs	r1, #128	; 0x80
 8000f9c:	480a      	ldr	r0, [pc, #40]	; (8000fc8 <MX_TOF_Process+0x1b8>)
 8000f9e:	f011 fe5f 	bl	8012c60 <HAL_GPIO_WritePin>
	while(1){
 8000fa2:	e73b      	b.n	8000e1c <MX_TOF_Process+0xc>
 8000fa4:	20007038 	.word	0x20007038
 8000fa8:	20000118 	.word	0x20000118
 8000fac:	20000125 	.word	0x20000125
 8000fb0:	20000114 	.word	0x20000114
 8000fb4:	2000011c 	.word	0x2000011c
 8000fb8:	010f0107 	.word	0x010f0107
 8000fbc:	08015c00 	.word	0x08015c00
 8000fc0:	08015c08 	.word	0x08015c08
 8000fc4:	08015c0c 	.word	0x08015c0c
 8000fc8:	40020000 	.word	0x40020000

08000fcc <objectPresent>:

	  }
  /* USER CODE END TOF_Process_PostTreatment */
}

void objectPresent(){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	  /*	als dist1 onder de 1000 mm komt voor 3 seconden, dan is er een object.
			   * 	+ er mag geen foutcode 12 zijn
			   */
			if((dis1 <= maxDistanceObject) && (uint8_t)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].Status[0] == 0	 && !ObjectPresent){
 8000fd0:	4b71      	ldr	r3, [pc, #452]	; (8001198 <objectPresent+0x1cc>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b71      	ldr	r3, [pc, #452]	; (800119c <objectPresent+0x1d0>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dc56      	bgt.n	800108a <objectPresent+0xbe>
 8000fdc:	4b70      	ldr	r3, [pc, #448]	; (80011a0 <objectPresent+0x1d4>)
 8000fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d151      	bne.n	800108a <objectPresent+0xbe>
 8000fe6:	4b6f      	ldr	r3, [pc, #444]	; (80011a4 <objectPresent+0x1d8>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	f083 0301 	eor.w	r3, r3, #1
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d04a      	beq.n	800108a <objectPresent+0xbe>
				if(!timerMeasurementSet){
 8000ff4:	4b6c      	ldr	r3, [pc, #432]	; (80011a8 <objectPresent+0x1dc>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	f083 0301 	eor.w	r3, r3, #1
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d017      	beq.n	8001032 <objectPresent+0x66>
					timerMeasurementSet = true;
 8001002:	4b69      	ldr	r3, [pc, #420]	; (80011a8 <objectPresent+0x1dc>)
 8001004:	2201      	movs	r2, #1
 8001006:	701a      	strb	r2, [r3, #0]
					timerMeasurment = HAL_GetTick();
 8001008:	f011 fa94 	bl	8012534 <HAL_GetTick>
 800100c:	ee07 0a90 	vmov	s15, r0
 8001010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001014:	4b65      	ldr	r3, [pc, #404]	; (80011ac <objectPresent+0x1e0>)
 8001016:	edc3 7a00 	vstr	s15, [r3]
					printf("Timer object %d ", timerMeasurementSet);
 800101a:	4b63      	ldr	r3, [pc, #396]	; (80011a8 <objectPresent+0x1dc>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	4619      	mov	r1, r3
 8001020:	4863      	ldr	r0, [pc, #396]	; (80011b0 <objectPresent+0x1e4>)
 8001022:	f013 fdf5 	bl	8014c10 <iprintf>
					printf("Timer object is set");
 8001026:	4863      	ldr	r0, [pc, #396]	; (80011b4 <objectPresent+0x1e8>)
 8001028:	f013 fdf2 	bl	8014c10 <iprintf>
					printf("\r\n");
 800102c:	4862      	ldr	r0, [pc, #392]	; (80011b8 <objectPresent+0x1ec>)
 800102e:	f013 fe75 	bl	8014d1c <puts>
				}
				if((HAL_GetTick() - timerMeasurment) >= timerMeasurmentTimeout)
 8001032:	f011 fa7f 	bl	8012534 <HAL_GetTick>
 8001036:	ee07 0a90 	vmov	s15, r0
 800103a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800103e:	4b5b      	ldr	r3, [pc, #364]	; (80011ac <objectPresent+0x1e0>)
 8001040:	edd3 7a00 	vldr	s15, [r3]
 8001044:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001048:	4b5c      	ldr	r3, [pc, #368]	; (80011bc <objectPresent+0x1f0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	ee07 3a90 	vmov	s15, r3
 8001050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001054:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105c:	db2c      	blt.n	80010b8 <objectPresent+0xec>
				{
					timerMeasurementSet = false;
 800105e:	4b52      	ldr	r3, [pc, #328]	; (80011a8 <objectPresent+0x1dc>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]

					//Persoon naderd en staat dicht genoeg
					//Start andere sensoren ook op
					ObjectPresent = true;
 8001064:	4b4f      	ldr	r3, [pc, #316]	; (80011a4 <objectPresent+0x1d8>)
 8001066:	2201      	movs	r2, #1
 8001068:	701a      	strb	r2, [r3, #0]
					start_sensor(VL53L3A2_DEV_LEFT);
 800106a:	2000      	movs	r0, #0
 800106c:	f000 f912 	bl	8001294 <start_sensor>
					start_sensor(VL53L3A2_DEV_RIGHT);
 8001070:	2002      	movs	r0, #2
 8001072:	f000 f90f 	bl	8001294 <start_sensor>

					printf("Object %d", ObjectPresent);
 8001076:	4b4b      	ldr	r3, [pc, #300]	; (80011a4 <objectPresent+0x1d8>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	4619      	mov	r1, r3
 800107c:	4850      	ldr	r0, [pc, #320]	; (80011c0 <objectPresent+0x1f4>)
 800107e:	f013 fdc7 	bl	8014c10 <iprintf>
					printf("\r\n");
 8001082:	484d      	ldr	r0, [pc, #308]	; (80011b8 <objectPresent+0x1ec>)
 8001084:	f013 fe4a 	bl	8014d1c <puts>
				if((HAL_GetTick() - timerMeasurment) >= timerMeasurmentTimeout)
 8001088:	e016      	b.n	80010b8 <objectPresent+0xec>
				}
			}
			else
			{
				if(timerMeasurementSet && !ObjectPresent){
 800108a:	4b47      	ldr	r3, [pc, #284]	; (80011a8 <objectPresent+0x1dc>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d012      	beq.n	80010b8 <objectPresent+0xec>
 8001092:	4b44      	ldr	r3, [pc, #272]	; (80011a4 <objectPresent+0x1d8>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	f083 0301 	eor.w	r3, r3, #1
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00b      	beq.n	80010b8 <objectPresent+0xec>
					timerMeasurementSet = false;
 80010a0:	4b41      	ldr	r3, [pc, #260]	; (80011a8 <objectPresent+0x1dc>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
					printf("Timer object %d ", timerMeasurementSet);
 80010a6:	4b40      	ldr	r3, [pc, #256]	; (80011a8 <objectPresent+0x1dc>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	4619      	mov	r1, r3
 80010ac:	4840      	ldr	r0, [pc, #256]	; (80011b0 <objectPresent+0x1e4>)
 80010ae:	f013 fdaf 	bl	8014c10 <iprintf>
					printf("\r\n");
 80010b2:	4841      	ldr	r0, [pc, #260]	; (80011b8 <objectPresent+0x1ec>)
 80010b4:	f013 fe32 	bl	8014d1c <puts>
				}
			}


			if( (dis1 >= maxDistanceObject) && ObjectPresent){
 80010b8:	4b37      	ldr	r3, [pc, #220]	; (8001198 <objectPresent+0x1cc>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b37      	ldr	r3, [pc, #220]	; (800119c <objectPresent+0x1d0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	db51      	blt.n	8001168 <objectPresent+0x19c>
 80010c4:	4b37      	ldr	r3, [pc, #220]	; (80011a4 <objectPresent+0x1d8>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d04d      	beq.n	8001168 <objectPresent+0x19c>

				if(timerMeasurementSet == false){
 80010cc:	4b36      	ldr	r3, [pc, #216]	; (80011a8 <objectPresent+0x1dc>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	f083 0301 	eor.w	r3, r3, #1
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d017      	beq.n	800110a <objectPresent+0x13e>
					timerMeasurementSet = true;
 80010da:	4b33      	ldr	r3, [pc, #204]	; (80011a8 <objectPresent+0x1dc>)
 80010dc:	2201      	movs	r2, #1
 80010de:	701a      	strb	r2, [r3, #0]
					timerMeasurment = HAL_GetTick();
 80010e0:	f011 fa28 	bl	8012534 <HAL_GetTick>
 80010e4:	ee07 0a90 	vmov	s15, r0
 80010e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ec:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <objectPresent+0x1e0>)
 80010ee:	edc3 7a00 	vstr	s15, [r3]
					printf("Timer no object %d ", timerMeasurementSet);
 80010f2:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <objectPresent+0x1dc>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	4619      	mov	r1, r3
 80010f8:	4832      	ldr	r0, [pc, #200]	; (80011c4 <objectPresent+0x1f8>)
 80010fa:	f013 fd89 	bl	8014c10 <iprintf>
					printf("Timer no object is set");
 80010fe:	4832      	ldr	r0, [pc, #200]	; (80011c8 <objectPresent+0x1fc>)
 8001100:	f013 fd86 	bl	8014c10 <iprintf>
					printf("\r\n");
 8001104:	482c      	ldr	r0, [pc, #176]	; (80011b8 <objectPresent+0x1ec>)
 8001106:	f013 fe09 	bl	8014d1c <puts>
				}

				if((HAL_GetTick() - timerMeasurment) >= timerMeasurmentTimeout)
 800110a:	f011 fa13 	bl	8012534 <HAL_GetTick>
 800110e:	ee07 0a90 	vmov	s15, r0
 8001112:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001116:	4b25      	ldr	r3, [pc, #148]	; (80011ac <objectPresent+0x1e0>)
 8001118:	edd3 7a00 	vldr	s15, [r3]
 800111c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001120:	4b26      	ldr	r3, [pc, #152]	; (80011bc <objectPresent+0x1f0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	ee07 3a90 	vmov	s15, r3
 8001128:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800112c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001134:	db2d      	blt.n	8001192 <objectPresent+0x1c6>
				{
					timerMeasurementSet = false;
 8001136:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <objectPresent+0x1dc>)
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]

					ObjectPresent = false;
 800113c:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <objectPresent+0x1d8>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
					stop_sensor(VL53L3A2_DEV_LEFT);
 8001142:	2000      	movs	r0, #0
 8001144:	f000 f8e6 	bl	8001314 <stop_sensor>
					stop_sensor(VL53L3A2_DEV_RIGHT);
 8001148:	2002      	movs	r0, #2
 800114a:	f000 f8e3 	bl	8001314 <stop_sensor>
					HAL_Delay(10);
 800114e:	200a      	movs	r0, #10
 8001150:	f011 f9fc 	bl	801254c <HAL_Delay>
					printf("Object %d", ObjectPresent);
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <objectPresent+0x1d8>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	4819      	ldr	r0, [pc, #100]	; (80011c0 <objectPresent+0x1f4>)
 800115c:	f013 fd58 	bl	8014c10 <iprintf>
					printf("\r\n");
 8001160:	4815      	ldr	r0, [pc, #84]	; (80011b8 <objectPresent+0x1ec>)
 8001162:	f013 fddb 	bl	8014d1c <puts>
				if((HAL_GetTick() - timerMeasurment) >= timerMeasurmentTimeout)
 8001166:	e014      	b.n	8001192 <objectPresent+0x1c6>
				}
			}
			else
			{
				if(timerMeasurementSet && ObjectPresent){
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <objectPresent+0x1dc>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d010      	beq.n	8001192 <objectPresent+0x1c6>
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <objectPresent+0x1d8>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00c      	beq.n	8001192 <objectPresent+0x1c6>
					timerMeasurementSet = false;
 8001178:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <objectPresent+0x1dc>)
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
					printf("Timer no object %d ", timerMeasurementSet);
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <objectPresent+0x1dc>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	4619      	mov	r1, r3
 8001184:	480f      	ldr	r0, [pc, #60]	; (80011c4 <objectPresent+0x1f8>)
 8001186:	f013 fd43 	bl	8014c10 <iprintf>
					printf("\r\n");
 800118a:	480b      	ldr	r0, [pc, #44]	; (80011b8 <objectPresent+0x1ec>)
 800118c:	f013 fdc6 	bl	8014d1c <puts>
				}
			}
}
 8001190:	e7ff      	b.n	8001192 <objectPresent+0x1c6>
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000118 	.word	0x20000118
 800119c:	20000000 	.word	0x20000000
 80011a0:	20007038 	.word	0x20007038
 80011a4:	20000125 	.word	0x20000125
 80011a8:	20000124 	.word	0x20000124
 80011ac:	20000120 	.word	0x20000120
 80011b0:	08015c68 	.word	0x08015c68
 80011b4:	08015c7c 	.word	0x08015c7c
 80011b8:	08015c08 	.word	0x08015c08
 80011bc:	20000004 	.word	0x20000004
 80011c0:	08015c90 	.word	0x08015c90
 80011c4:	08015c9c 	.word	0x08015c9c
 80011c8:	08015cb0 	.word	0x08015cb0

080011cc <MX_53L3A2_MultiSensorRanging_Init>:

static void MX_53L3A2_MultiSensorRanging_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
  uint8_t device;
  uint16_t i2c_addr;
  uint32_t id;

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 80011d2:	2000      	movs	r0, #0
 80011d4:	f000 faba 	bl	800174c <BSP_COM_Init>

  printf("53L3A2 Gesture Control\r\n");
 80011d8:	482a      	ldr	r0, [pc, #168]	; (8001284 <MX_53L3A2_MultiSensorRanging_Init+0xb8>)
 80011da:	f013 fd9f 	bl	8014d1c <puts>

  /* put all the devices in shutdown mode */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 80011de:	2300      	movs	r3, #0
 80011e0:	71fb      	strb	r3, [r7, #7]
 80011e2:	e007      	b.n	80011f4 <MX_53L3A2_MultiSensorRanging_Init+0x28>
  {
    VL53L3A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_OFF);
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	2101      	movs	r1, #1
 80011e8:	4618      	mov	r0, r3
 80011ea:	f001 f8a1 	bl	8002330 <VL53L3A2_RANGING_SENSOR_SetPowerMode>
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	3301      	adds	r3, #1
 80011f2:	71fb      	strb	r3, [r7, #7]
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d9f4      	bls.n	80011e4 <MX_53L3A2_MultiSensorRanging_Init+0x18>

  /* power on the devices one at a time, initialize them and change their address.
   * once the address is updated, the communication with the devices is checked
   * reading its ID.
   */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	71fb      	strb	r3, [r7, #7]
 80011fe:	e039      	b.n	8001274 <MX_53L3A2_MultiSensorRanging_Init+0xa8>
  {
    VL53L3A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_ON);
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f001 f893 	bl	8002330 <VL53L3A2_RANGING_SENSOR_SetPowerMode>
    status = VL53L3A2_RANGING_SENSOR_Init(device);
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	4618      	mov	r0, r3
 800120e:	f000 ff7b 	bl	8002108 <VL53L3A2_RANGING_SENSOR_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	4a1c      	ldr	r2, [pc, #112]	; (8001288 <MX_53L3A2_MultiSensorRanging_Init+0xbc>)
 8001216:	6013      	str	r3, [r2, #0]

    /* 0: not detected, 1: detected */
    ToF_Present[device] = (status != BSP_ERROR_NONE) ? 0 : 1;
 8001218:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <MX_53L3A2_MultiSensorRanging_Init+0xbc>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	bf0c      	ite	eq
 8001220:	2301      	moveq	r3, #1
 8001222:	2300      	movne	r3, #0
 8001224:	b2da      	uxtb	r2, r3
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	4611      	mov	r1, r2
 800122a:	4a18      	ldr	r2, [pc, #96]	; (800128c <MX_53L3A2_MultiSensorRanging_Init+0xc0>)
 800122c:	54d1      	strb	r1, [r2, r3]

    /* skip this device if init not successful */
    if (ToF_Present[device] == 0) continue;
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	4a16      	ldr	r2, [pc, #88]	; (800128c <MX_53L3A2_MultiSensorRanging_Init+0xc0>)
 8001232:	5cd3      	ldrb	r3, [r2, r3]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d019      	beq.n	800126c <MX_53L3A2_MultiSensorRanging_Init+0xa0>

    /* left: 0x54, center: 0x56, right: 0x58 */
    i2c_addr = (RANGING_SENSOR_VL53L3CX_ADDRESS + (device + 1) * 2);
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	3301      	adds	r3, #1
 800123c:	b29b      	uxth	r3, r3
 800123e:	3329      	adds	r3, #41	; 0x29
 8001240:	b29b      	uxth	r3, r3
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	80bb      	strh	r3, [r7, #4]
    VL53L3A2_RANGING_SENSOR_SetAddress(device, i2c_addr);
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	88ba      	ldrh	r2, [r7, #4]
 800124a:	4611      	mov	r1, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f001 f847 	bl	80022e0 <VL53L3A2_RANGING_SENSOR_SetAddress>

    /* check the communication with the device reading the ID */
    VL53L3A2_RANGING_SENSOR_ReadID(device, &id);
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	463a      	mov	r2, r7
 8001256:	4611      	mov	r1, r2
 8001258:	4618      	mov	r0, r3
 800125a:	f000 ff7b 	bl	8002154 <VL53L3A2_RANGING_SENSOR_ReadID>
    printf("ToF sensor %d - ID: %04lX\r\n", device, (unsigned long)id);
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	4619      	mov	r1, r3
 8001264:	480a      	ldr	r0, [pc, #40]	; (8001290 <MX_53L3A2_MultiSensorRanging_Init+0xc4>)
 8001266:	f013 fcd3 	bl	8014c10 <iprintf>
 800126a:	e000      	b.n	800126e <MX_53L3A2_MultiSensorRanging_Init+0xa2>
    if (ToF_Present[device] == 0) continue;
 800126c:	bf00      	nop
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	3301      	adds	r3, #1
 8001272:	71fb      	strb	r3, [r7, #7]
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d9c2      	bls.n	8001200 <MX_53L3A2_MultiSensorRanging_Init+0x34>
  }
}
 800127a:	bf00      	nop
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	08015cc8 	.word	0x08015cc8
 8001288:	2000010c 	.word	0x2000010c
 800128c:	20000110 	.word	0x20000110
 8001290:	08015ce0 	.word	0x08015ce0

08001294 <start_sensor>:
  }
  printf ("\r\n");
}
*/

static void start_sensor(uint8_t sensor){
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
	RANGING_SENSOR_ProfileConfig_t Profile;

	Profile.RangingProfile = RS_MULTI_TARGET_MEDIUM_RANGE;
 800129e:	2302      	movs	r3, #2
 80012a0:	60fb      	str	r3, [r7, #12]
	Profile.TimingBudget = 30; /* 16 ms < TimingBudget < 500 ms */
 80012a2:	231e      	movs	r3, #30
 80012a4:	613b      	str	r3, [r7, #16]
	Profile.Frequency = 0; /* not necessary in simple ranging */
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
	Profile.EnableAmbient = 1; /* Enable: 1, Disable: 0 */
 80012aa:	2301      	movs	r3, #1
 80012ac:	61bb      	str	r3, [r7, #24]
	Profile.EnableSignal = 1; /* Enable: 1, Disable: 0 */
 80012ae:	2301      	movs	r3, #1
 80012b0:	61fb      	str	r3, [r7, #28]

	VL53L3A2_RANGING_SENSOR_ConfigProfile(sensor, &Profile);
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	f107 020c 	add.w	r2, r7, #12
 80012b8:	4611      	mov	r1, r2
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 ff72 	bl	80021a4 <VL53L3A2_RANGING_SENSOR_ConfigProfile>
	status = VL53L3A2_RANGING_SENSOR_Start(sensor, RS_MODE_BLOCKING_CONTINUOUS);
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	2101      	movs	r1, #1
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 ffbd 	bl	8002244 <VL53L3A2_RANGING_SENSOR_Start>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <start_sensor+0x70>)
 80012ce:	6013      	str	r3, [r2, #0]
    if (status != BSP_ERROR_NONE)
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <start_sensor+0x70>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d008      	beq.n	80012ea <start_sensor+0x56>
    {
    	printf("VL53L3A2_RANGING_SENSOR_Start failed for sensor %s \r\n", TofDevStr[sensor]);
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	4a0b      	ldr	r2, [pc, #44]	; (8001308 <start_sensor+0x74>)
 80012dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e0:	4619      	mov	r1, r3
 80012e2:	480a      	ldr	r0, [pc, #40]	; (800130c <start_sensor+0x78>)
 80012e4:	f013 fc94 	bl	8014c10 <iprintf>
		while(1);
 80012e8:	e7fe      	b.n	80012e8 <start_sensor+0x54>
    }
    else
	{
    	printf("sensor %s\t opgestart \r\n", TofDevStr[sensor]);
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	4a06      	ldr	r2, [pc, #24]	; (8001308 <start_sensor+0x74>)
 80012ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f2:	4619      	mov	r1, r3
 80012f4:	4806      	ldr	r0, [pc, #24]	; (8001310 <start_sensor+0x7c>)
 80012f6:	f013 fc8b 	bl	8014c10 <iprintf>
	}
}
 80012fa:	bf00      	nop
 80012fc:	3720      	adds	r7, #32
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	2000010c 	.word	0x2000010c
 8001308:	20000008 	.word	0x20000008
 800130c:	08015cfc 	.word	0x08015cfc
 8001310:	08015d34 	.word	0x08015d34

08001314 <stop_sensor>:

static void stop_sensor(uint8_t sensor){
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
	status = VL53L3A2_RANGING_SENSOR_Stop(sensor);
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	4618      	mov	r0, r3
 8001322:	f000 ffb7 	bl	8002294 <VL53L3A2_RANGING_SENSOR_Stop>
 8001326:	4603      	mov	r3, r0
 8001328:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <stop_sensor+0x40>)
 800132a:	6013      	str	r3, [r2, #0]
    if (status != BSP_ERROR_NONE)
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <stop_sensor+0x40>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <stop_sensor+0x28>
    {
    	printf("VL53L3A2_RANGING_SENSOR_Stop failed\r\n");
 8001334:	4808      	ldr	r0, [pc, #32]	; (8001358 <stop_sensor+0x44>)
 8001336:	f013 fcf1 	bl	8014d1c <puts>
		while(1);
 800133a:	e7fe      	b.n	800133a <stop_sensor+0x26>
    }
    else
	{
    	printf("sensor %s\t afgezet \r\n", TofDevStr[sensor]);
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	4a07      	ldr	r2, [pc, #28]	; (800135c <stop_sensor+0x48>)
 8001340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001344:	4619      	mov	r1, r3
 8001346:	4806      	ldr	r0, [pc, #24]	; (8001360 <stop_sensor+0x4c>)
 8001348:	f013 fc62 	bl	8014c10 <iprintf>
	}
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	2000010c 	.word	0x2000010c
 8001358:	08015d4c 	.word	0x08015d4c
 800135c:	20000008 	.word	0x20000008
 8001360:	08015d74 	.word	0x08015d74

08001364 <getResult>:

static void getResult(uint8_t sensor, RANGING_SENSOR_Result_t *result){
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	6039      	str	r1, [r7, #0]
 800136e:	71fb      	strb	r3, [r7, #7]
	VL53L3A2_RANGING_SENSOR_GetDistance(sensor, &result[sensor]);
 8001370:	79f8      	ldrb	r0, [r7, #7]
 8001372:	79fa      	ldrb	r2, [r7, #7]
 8001374:	4613      	mov	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	4413      	add	r3, r2
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	461a      	mov	r2, r3
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	4413      	add	r3, r2
 8001382:	4619      	mov	r1, r3
 8001384:	f000 ff36 	bl	80021f4 <VL53L3A2_RANGING_SENSOR_GetDistance>
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <getDistance>:

static long getDistance(uint8_t sensor, RANGING_SENSOR_Result_t * result){
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
	long distance = (long)result[sensor].ZoneResult[0].Distance[0];
 800139c:	79fa      	ldrb	r2, [r7, #7]
 800139e:	4613      	mov	r3, r2
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	4413      	add	r3, r2
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	461a      	mov	r2, r3
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	60fb      	str	r3, [r7, #12]
	return distance;
 80013b0:	68fb      	ldr	r3, [r7, #12]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c2:	f011 f851 	bl	8012468 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c6:	f000 f809 	bl	80013dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ca:	f000 f89d 	bl	8001508 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013ce:	f000 f871 	bl	80014b4 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */

  MX_TOF_Init();
 80013d2:	f7ff fd17 	bl	8000e04 <MX_TOF_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_TOF_Process();
 80013d6:	f7ff fd1b 	bl	8000e10 <MX_TOF_Process>
 80013da:	e7fc      	b.n	80013d6 <main+0x18>

080013dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b094      	sub	sp, #80	; 0x50
 80013e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013e2:	f107 0320 	add.w	r3, r7, #32
 80013e6:	2230      	movs	r2, #48	; 0x30
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f013 fc08 	bl	8014c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	4b29      	ldr	r3, [pc, #164]	; (80014ac <SystemClock_Config+0xd0>)
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	4a28      	ldr	r2, [pc, #160]	; (80014ac <SystemClock_Config+0xd0>)
 800140a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140e:	6413      	str	r3, [r2, #64]	; 0x40
 8001410:	4b26      	ldr	r3, [pc, #152]	; (80014ac <SystemClock_Config+0xd0>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800141c:	2300      	movs	r3, #0
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	4b23      	ldr	r3, [pc, #140]	; (80014b0 <SystemClock_Config+0xd4>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001428:	4a21      	ldr	r2, [pc, #132]	; (80014b0 <SystemClock_Config+0xd4>)
 800142a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <SystemClock_Config+0xd4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800143c:	2302      	movs	r3, #2
 800143e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001440:	2301      	movs	r3, #1
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001444:	2310      	movs	r3, #16
 8001446:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001448:	2302      	movs	r3, #2
 800144a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800144c:	2300      	movs	r3, #0
 800144e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001450:	2310      	movs	r3, #16
 8001452:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001454:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001458:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800145a:	2304      	movs	r3, #4
 800145c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800145e:	2307      	movs	r3, #7
 8001460:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001462:	f107 0320 	add.w	r3, r7, #32
 8001466:	4618      	mov	r0, r3
 8001468:	f012 fc08 	bl	8013c7c <HAL_RCC_OscConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001472:	f000 f8cb 	bl	800160c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001476:	230f      	movs	r3, #15
 8001478:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147a:	2302      	movs	r3, #2
 800147c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001486:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	2102      	movs	r1, #2
 8001492:	4618      	mov	r0, r3
 8001494:	f012 fe6a 	bl	801416c <HAL_RCC_ClockConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800149e:	f000 f8b5 	bl	800160c <Error_Handler>
  }
}
 80014a2:	bf00      	nop
 80014a4:	3750      	adds	r7, #80	; 0x50
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40007000 	.word	0x40007000

080014b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014ba:	4a12      	ldr	r2, [pc, #72]	; (8001504 <MX_USART2_UART_Init+0x50>)
 80014bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014da:	220c      	movs	r2, #12
 80014dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014ec:	f013 f83a 	bl	8014564 <HAL_UART_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014f6:	f000 f889 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200071a8 	.word	0x200071a8
 8001504:	40004400 	.word	0x40004400

08001508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	; 0x28
 800150c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	4b37      	ldr	r3, [pc, #220]	; (8001600 <MX_GPIO_Init+0xf8>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a36      	ldr	r2, [pc, #216]	; (8001600 <MX_GPIO_Init+0xf8>)
 8001528:	f043 0304 	orr.w	r3, r3, #4
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b34      	ldr	r3, [pc, #208]	; (8001600 <MX_GPIO_Init+0xf8>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0304 	and.w	r3, r3, #4
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	4b30      	ldr	r3, [pc, #192]	; (8001600 <MX_GPIO_Init+0xf8>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a2f      	ldr	r2, [pc, #188]	; (8001600 <MX_GPIO_Init+0xf8>)
 8001544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b2d      	ldr	r3, [pc, #180]	; (8001600 <MX_GPIO_Init+0xf8>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	4b29      	ldr	r3, [pc, #164]	; (8001600 <MX_GPIO_Init+0xf8>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a28      	ldr	r2, [pc, #160]	; (8001600 <MX_GPIO_Init+0xf8>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b26      	ldr	r3, [pc, #152]	; (8001600 <MX_GPIO_Init+0xf8>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	4b22      	ldr	r3, [pc, #136]	; (8001600 <MX_GPIO_Init+0xf8>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a21      	ldr	r2, [pc, #132]	; (8001600 <MX_GPIO_Init+0xf8>)
 800157c:	f043 0302 	orr.w	r3, r3, #2
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <MX_GPIO_Init+0xf8>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	2120      	movs	r1, #32
 8001592:	481c      	ldr	r0, [pc, #112]	; (8001604 <MX_GPIO_Init+0xfc>)
 8001594:	f011 fb64 	bl	8012c60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(L_O_GPIO_Port, L_O_Pin, GPIO_PIN_RESET);
 8001598:	2200      	movs	r2, #0
 800159a:	2180      	movs	r1, #128	; 0x80
 800159c:	4819      	ldr	r0, [pc, #100]	; (8001604 <MX_GPIO_Init+0xfc>)
 800159e:	f011 fb5f 	bl	8012c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015a8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	4813      	ldr	r0, [pc, #76]	; (8001608 <MX_GPIO_Init+0x100>)
 80015ba:	f011 f8d1 	bl	8012760 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015be:	2320      	movs	r3, #32
 80015c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c2:	2301      	movs	r3, #1
 80015c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	480b      	ldr	r0, [pc, #44]	; (8001604 <MX_GPIO_Init+0xfc>)
 80015d6:	f011 f8c3 	bl	8012760 <HAL_GPIO_Init>

  /*Configure GPIO pin : L_O_Pin */
   GPIO_InitStruct.Pin = L_O_Pin;
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015de:	2301      	movs	r3, #1
 80015e0:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e6:	2300      	movs	r3, #0
 80015e8:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(L_O_GPIO_Port, &GPIO_InitStruct);
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	4619      	mov	r1, r3
 80015f0:	4804      	ldr	r0, [pc, #16]	; (8001604 <MX_GPIO_Init+0xfc>)
 80015f2:	f011 f8b5 	bl	8012760 <HAL_GPIO_Init>

}
 80015f6:	bf00      	nop
 80015f8:	3728      	adds	r7, #40	; 0x28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800
 8001604:	40020000 	.word	0x40020000
 8001608:	40020800 	.word	0x40020800

0800160c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001610:	b672      	cpsid	i
}
 8001612:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001614:	e7fe      	b.n	8001614 <Error_Handler+0x8>
	...

08001618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <HAL_MspInit+0x4c>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	4a0f      	ldr	r2, [pc, #60]	; (8001664 <HAL_MspInit+0x4c>)
 8001628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800162c:	6453      	str	r3, [r2, #68]	; 0x44
 800162e:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <HAL_MspInit+0x4c>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	603b      	str	r3, [r7, #0]
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HAL_MspInit+0x4c>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	4a08      	ldr	r2, [pc, #32]	; (8001664 <HAL_MspInit+0x4c>)
 8001644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001648:	6413      	str	r3, [r2, #64]	; 0x40
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_MspInit+0x4c>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001656:	2007      	movs	r0, #7
 8001658:	f011 f84e 	bl	80126f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40023800 	.word	0x40023800

08001668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a19      	ldr	r2, [pc, #100]	; (80016ec <HAL_UART_MspInit+0x84>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d12b      	bne.n	80016e2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <HAL_UART_MspInit+0x88>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	4a17      	ldr	r2, [pc, #92]	; (80016f0 <HAL_UART_MspInit+0x88>)
 8001694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001698:	6413      	str	r3, [r2, #64]	; 0x40
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <HAL_UART_MspInit+0x88>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <HAL_UART_MspInit+0x88>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a10      	ldr	r2, [pc, #64]	; (80016f0 <HAL_UART_MspInit+0x88>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <HAL_UART_MspInit+0x88>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016c2:	230c      	movs	r3, #12
 80016c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	2302      	movs	r3, #2
 80016c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016d2:	2307      	movs	r3, #7
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	4805      	ldr	r0, [pc, #20]	; (80016f4 <HAL_UART_MspInit+0x8c>)
 80016de:	f011 f83f 	bl	8012760 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016e2:	bf00      	nop
 80016e4:	3728      	adds	r7, #40	; 0x28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40004400 	.word	0x40004400
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40020000 	.word	0x40020000

080016f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <NMI_Handler+0x4>

080016fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001702:	e7fe      	b.n	8001702 <HardFault_Handler+0x4>

08001704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <MemManage_Handler+0x4>

0800170a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800170e:	e7fe      	b.n	800170e <BusFault_Handler+0x4>

08001710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <UsageFault_Handler+0x4>

08001716 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001744:	f010 fee2 	bl	801250c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}

0800174c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d903      	bls.n	8001768 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001760:	f06f 0301 	mvn.w	r3, #1
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	e025      	b.n	80017b4 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	79fa      	ldrb	r2, [r7, #7]
 800176c:	4914      	ldr	r1, [pc, #80]	; (80017c0 <BSP_COM_Init+0x74>)
 800176e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001772:	4814      	ldr	r0, [pc, #80]	; (80017c4 <BSP_COM_Init+0x78>)
 8001774:	4613      	mov	r3, r2
 8001776:	011b      	lsls	r3, r3, #4
 8001778:	4413      	add	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4403      	add	r3, r0
 800177e:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8001780:	79fa      	ldrb	r2, [r7, #7]
 8001782:	4613      	mov	r3, r2
 8001784:	011b      	lsls	r3, r3, #4
 8001786:	4413      	add	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4a0e      	ldr	r2, [pc, #56]	; (80017c4 <BSP_COM_Init+0x78>)
 800178c:	4413      	add	r3, r2
 800178e:	4618      	mov	r0, r3
 8001790:	f000 f864 	bl	800185c <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8001794:	79fa      	ldrb	r2, [r7, #7]
 8001796:	4613      	mov	r3, r2
 8001798:	011b      	lsls	r3, r3, #4
 800179a:	4413      	add	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4a09      	ldr	r2, [pc, #36]	; (80017c4 <BSP_COM_Init+0x78>)
 80017a0:	4413      	add	r3, r2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 f810 	bl	80017c8 <MX_USART2_UART_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d002      	beq.n	80017b4 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80017ae:	f06f 0303 	mvn.w	r3, #3
 80017b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80017b4:	68fb      	ldr	r3, [r7, #12]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000014 	.word	0x20000014
 80017c4:	200071a8 	.word	0x200071a8

080017c8 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80017d0:	2300      	movs	r3, #0
 80017d2:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a12      	ldr	r2, [pc, #72]	; (8001820 <MX_USART2_UART_Init+0x58>)
 80017d8:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017e0:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	220c      	movs	r2, #12
 80017f8:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f012 feac 	bl	8014564 <HAL_UART_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001816:	7bfb      	ldrb	r3, [r7, #15]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40004400 	.word	0x40004400

08001824 <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) || (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)) /* For IAR and ARM Compiler 5 and 6*/
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* For IAR and ARM Compiler 5 and 6 */
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 800182c:	4b09      	ldr	r3, [pc, #36]	; (8001854 <__io_putchar+0x30>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	4613      	mov	r3, r2
 8001834:	011b      	lsls	r3, r3, #4
 8001836:	4413      	add	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4a07      	ldr	r2, [pc, #28]	; (8001858 <__io_putchar+0x34>)
 800183c:	1898      	adds	r0, r3, r2
 800183e:	1d39      	adds	r1, r7, #4
 8001840:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001844:	2201      	movs	r2, #1
 8001846:	f012 feda 	bl	80145fe <HAL_UART_Transmit>
  return ch;
 800184a:	687b      	ldr	r3, [r7, #4]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000126 	.word	0x20000126
 8001858:	200071a8 	.word	0x200071a8

0800185c <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	; 0x28
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001864:	2300      	movs	r3, #0
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	4b1e      	ldr	r3, [pc, #120]	; (80018e4 <USART2_MspInit+0x88>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	4a1d      	ldr	r2, [pc, #116]	; (80018e4 <USART2_MspInit+0x88>)
 800186e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001872:	6413      	str	r3, [r2, #64]	; 0x40
 8001874:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <USART2_MspInit+0x88>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <USART2_MspInit+0x88>)
 8001886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001888:	4a16      	ldr	r2, [pc, #88]	; (80018e4 <USART2_MspInit+0x88>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	6313      	str	r3, [r2, #48]	; 0x30
 8001890:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <USART2_MspInit+0x88>)
 8001892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 800189c:	2304      	movs	r3, #4
 800189e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	2302      	movs	r3, #2
 80018a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	2300      	movs	r3, #0
 80018aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 80018ac:	2307      	movs	r3, #7
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	480c      	ldr	r0, [pc, #48]	; (80018e8 <USART2_MspInit+0x8c>)
 80018b8:	f010 ff52 	bl	8012760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 80018bc:	2308      	movs	r3, #8
 80018be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 80018cc:	2307      	movs	r3, #7
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	4619      	mov	r1, r3
 80018d6:	4804      	ldr	r0, [pc, #16]	; (80018e8 <USART2_MspInit+0x8c>)
 80018d8:	f010 ff42 	bl	8012760 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 80018dc:	bf00      	nop
 80018de:	3728      	adds	r7, #40	; 0x28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40020000 	.word	0x40020000

080018ec <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80018f6:	4b13      	ldr	r3, [pc, #76]	; (8001944 <BSP_I2C1_Init+0x58>)
 80018f8:	4a13      	ldr	r2, [pc, #76]	; (8001948 <BSP_I2C1_Init+0x5c>)
 80018fa:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80018fc:	4b13      	ldr	r3, [pc, #76]	; (800194c <BSP_I2C1_Init+0x60>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	1c5a      	adds	r2, r3, #1
 8001902:	4912      	ldr	r1, [pc, #72]	; (800194c <BSP_I2C1_Init+0x60>)
 8001904:	600a      	str	r2, [r1, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d117      	bne.n	800193a <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800190a:	480e      	ldr	r0, [pc, #56]	; (8001944 <BSP_I2C1_Init+0x58>)
 800190c:	f011 fe6e 	bl	80135ec <HAL_I2C_GetState>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d111      	bne.n	800193a <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001916:	480b      	ldr	r0, [pc, #44]	; (8001944 <BSP_I2C1_Init+0x58>)
 8001918:	f000 f8d2 	bl	8001ac0 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10b      	bne.n	800193a <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001922:	4808      	ldr	r0, [pc, #32]	; (8001944 <BSP_I2C1_Init+0x58>)
 8001924:	f000 f898 	bl	8001a58 <MX_I2C1_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800192e:	f06f 0307 	mvn.w	r3, #7
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	e001      	b.n	800193a <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001936:	2300      	movs	r3, #0
 8001938:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 800193a:	687b      	ldr	r3, [r7, #4]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20007154 	.word	0x20007154
 8001948:	40005400 	.word	0x40005400
 800194c:	20000128 	.word	0x20000128

08001950 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <BSP_I2C1_DeInit+0x48>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d014      	beq.n	800198c <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <BSP_I2C1_DeInit+0x48>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	3b01      	subs	r3, #1
 8001968:	4a0b      	ldr	r2, [pc, #44]	; (8001998 <BSP_I2C1_DeInit+0x48>)
 800196a:	6013      	str	r3, [r2, #0]
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <BSP_I2C1_DeInit+0x48>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d10b      	bne.n	800198c <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001974:	4809      	ldr	r0, [pc, #36]	; (800199c <BSP_I2C1_DeInit+0x4c>)
 8001976:	f000 f8ed 	bl	8001b54 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800197a:	4808      	ldr	r0, [pc, #32]	; (800199c <BSP_I2C1_DeInit+0x4c>)
 800197c:	f011 face 	bl	8012f1c <HAL_I2C_DeInit>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d002      	beq.n	800198c <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001986:	f06f 0307 	mvn.w	r3, #7
 800198a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 800198c:	687b      	ldr	r3, [r7, #4]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000128 	.word	0x20000128
 800199c:	20007154 	.word	0x20007154

080019a0 <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af02      	add	r7, sp, #8
 80019a6:	4603      	mov	r3, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	80fb      	strh	r3, [r7, #6]
 80019ac:	4613      	mov	r3, r2
 80019ae:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80019b4:	88bb      	ldrh	r3, [r7, #4]
 80019b6:	88f9      	ldrh	r1, [r7, #6]
 80019b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019bc:	9200      	str	r2, [sp, #0]
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	480b      	ldr	r0, [pc, #44]	; (80019f0 <BSP_I2C1_Send+0x50>)
 80019c2:	f011 faef 	bl	8012fa4 <HAL_I2C_Master_Transmit>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00c      	beq.n	80019e6 <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80019cc:	4808      	ldr	r0, [pc, #32]	; (80019f0 <BSP_I2C1_Send+0x50>)
 80019ce:	f011 fe1b 	bl	8013608 <HAL_I2C_GetError>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	d003      	beq.n	80019e0 <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80019d8:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	e002      	b.n	80019e6 <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80019e0:	f06f 0303 	mvn.w	r3, #3
 80019e4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80019e6:	68fb      	ldr	r3, [r7, #12]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20007154 	.word	0x20007154

080019f4 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af02      	add	r7, sp, #8
 80019fa:	4603      	mov	r3, r0
 80019fc:	6039      	str	r1, [r7, #0]
 80019fe:	80fb      	strh	r3, [r7, #6]
 8001a00:	4613      	mov	r3, r2
 8001a02:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001a08:	88bb      	ldrh	r3, [r7, #4]
 8001a0a:	88f9      	ldrh	r1, [r7, #6]
 8001a0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a10:	9200      	str	r2, [sp, #0]
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	480b      	ldr	r0, [pc, #44]	; (8001a44 <BSP_I2C1_Recv+0x50>)
 8001a16:	f011 fbc3 	bl	80131a0 <HAL_I2C_Master_Receive>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00c      	beq.n	8001a3a <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8001a20:	4808      	ldr	r0, [pc, #32]	; (8001a44 <BSP_I2C1_Recv+0x50>)
 8001a22:	f011 fdf1 	bl	8013608 <HAL_I2C_GetError>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d003      	beq.n	8001a34 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001a2c:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	e002      	b.n	8001a3a <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001a34:	f06f 0303 	mvn.w	r3, #3
 8001a38:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20007154 	.word	0x20007154

08001a48 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001a4c:	f010 fd72 	bl	8012534 <HAL_GetTick>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a14      	ldr	r2, [pc, #80]	; (8001ab8 <MX_I2C1_Init+0x60>)
 8001a68:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a13      	ldr	r2, [pc, #76]	; (8001abc <MX_I2C1_Init+0x64>)
 8001a6e:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a82:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f011 f8f9 	bl	8012c94 <HAL_I2C_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40005400 	.word	0x40005400
 8001abc:	000186a0 	.word	0x000186a0

08001ac0 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	; 0x28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	4b1f      	ldr	r3, [pc, #124]	; (8001b4c <I2C1_MspInit+0x8c>)
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	4a1e      	ldr	r2, [pc, #120]	; (8001b4c <I2C1_MspInit+0x8c>)
 8001ad2:	f043 0302 	orr.w	r3, r3, #2
 8001ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad8:	4b1c      	ldr	r3, [pc, #112]	; (8001b4c <I2C1_MspInit+0x8c>)
 8001ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001ae4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aea:	2312      	movs	r3, #18
 8001aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af2:	2303      	movs	r3, #3
 8001af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001af6:	2304      	movs	r3, #4
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	4619      	mov	r1, r3
 8001b00:	4813      	ldr	r0, [pc, #76]	; (8001b50 <I2C1_MspInit+0x90>)
 8001b02:	f010 fe2d 	bl	8012760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001b06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b0c:	2312      	movs	r3, #18
 8001b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b14:	2303      	movs	r3, #3
 8001b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001b18:	2304      	movs	r3, #4
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	4619      	mov	r1, r3
 8001b22:	480b      	ldr	r0, [pc, #44]	; (8001b50 <I2C1_MspInit+0x90>)
 8001b24:	f010 fe1c 	bl	8012760 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <I2C1_MspInit+0x8c>)
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	4a06      	ldr	r2, [pc, #24]	; (8001b4c <I2C1_MspInit+0x8c>)
 8001b32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b36:	6413      	str	r3, [r2, #64]	; 0x40
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <I2C1_MspInit+0x8c>)
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001b44:	bf00      	nop
 8001b46:	3728      	adds	r7, #40	; 0x28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40020400 	.word	0x40020400

08001b54 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001b5c:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <I2C1_MspDeInit+0x30>)
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	4a08      	ldr	r2, [pc, #32]	; (8001b84 <I2C1_MspDeInit+0x30>)
 8001b62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b66:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001b68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b6c:	4806      	ldr	r0, [pc, #24]	; (8001b88 <I2C1_MspDeInit+0x34>)
 8001b6e:	f010 ff7b 	bl	8012a68 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001b72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b76:	4804      	ldr	r0, [pc, #16]	; (8001b88 <I2C1_MspDeInit+0x34>)
 8001b78:	f010 ff76 	bl	8012a68 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40020400 	.word	0x40020400

08001b8c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	e00a      	b.n	8001bb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b9e:	f3af 8000 	nop.w
 8001ba2:	4601      	mov	r1, r0
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	60ba      	str	r2, [r7, #8]
 8001baa:	b2ca      	uxtb	r2, r1
 8001bac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	dbf0      	blt.n	8001b9e <_read+0x12>
	}

return len;
 8001bbc:	687b      	ldr	r3, [r7, #4]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	e009      	b.n	8001bec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	60ba      	str	r2, [r7, #8]
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fe1f 	bl	8001824 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	3301      	adds	r3, #1
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	dbf1      	blt.n	8001bd8 <_write+0x12>
	}
	return len;
 8001bf4:	687b      	ldr	r3, [r7, #4]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <_close>:

int _close(int file)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
	return -1;
 8001c06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c26:	605a      	str	r2, [r3, #4]
	return 0;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <_isatty>:

int _isatty(int file)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c3e:	2301      	movs	r3, #1
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
	return 0;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c70:	4a14      	ldr	r2, [pc, #80]	; (8001cc4 <_sbrk+0x5c>)
 8001c72:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <_sbrk+0x60>)
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c7c:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <_sbrk+0x64>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <_sbrk+0x64>)
 8001c86:	4a12      	ldr	r2, [pc, #72]	; (8001cd0 <_sbrk+0x68>)
 8001c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <_sbrk+0x64>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d207      	bcs.n	8001ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c98:	f012 ff7a 	bl	8014b90 <__errno>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca6:	e009      	b.n	8001cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca8:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <_sbrk+0x64>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <_sbrk+0x64>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4a05      	ldr	r2, [pc, #20]	; (8001ccc <_sbrk+0x64>)
 8001cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cba:	68fb      	ldr	r3, [r7, #12]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20018000 	.word	0x20018000
 8001cc8:	00000400 	.word	0x00000400
 8001ccc:	2000012c 	.word	0x2000012c
 8001cd0:	20007400 	.word	0x20007400

08001cd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cd8:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <SystemInit+0x20>)
 8001cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cde:	4a05      	ldr	r2, [pc, #20]	; (8001cf4 <SystemInit+0x20>)
 8001ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ce4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cfc:	480d      	ldr	r0, [pc, #52]	; (8001d34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cfe:	490e      	ldr	r1, [pc, #56]	; (8001d38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d00:	4a0e      	ldr	r2, [pc, #56]	; (8001d3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d04:	e002      	b.n	8001d0c <LoopCopyDataInit>

08001d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d0a:	3304      	adds	r3, #4

08001d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d10:	d3f9      	bcc.n	8001d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d12:	4a0b      	ldr	r2, [pc, #44]	; (8001d40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d14:	4c0b      	ldr	r4, [pc, #44]	; (8001d44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d18:	e001      	b.n	8001d1e <LoopFillZerobss>

08001d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d1c:	3204      	adds	r2, #4

08001d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d20:	d3fb      	bcc.n	8001d1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d22:	f7ff ffd7 	bl	8001cd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d26:	f012 ff39 	bl	8014b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d2a:	f7ff fb48 	bl	80013be <main>
  bx  lr    
 8001d2e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d30:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d38:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8001d3c:	08015e58 	.word	0x08015e58
  ldr r2, =_sbss
 8001d40:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8001d44:	20007400 	.word	0x20007400

08001d48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d48:	e7fe      	b.n	8001d48 <ADC_IRQHandler>
	...

08001d4c <VL53L3A2_Init>:
  * @brief Initialize X-NUCLEO-53L3A2 STM32 expansion board
  * @note All devices XSDN are asserted and display is turned off
  * @return 0 on success
  */
int32_t VL53L3A2_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
  int32_t status = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	607b      	str	r3, [r7, #4]
  uint8_t ExpanderData[2];

  if (InitCounter++ == 0U)
 8001d56:	4b36      	ldr	r3, [pc, #216]	; (8001e30 <VL53L3A2_Init+0xe4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	4934      	ldr	r1, [pc, #208]	; (8001e30 <VL53L3A2_Init+0xe4>)
 8001d5e:	600a      	str	r2, [r1, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d154      	bne.n	8001e0e <VL53L3A2_Init+0xc2>
  {
    status |= _I2cFailRecover();
 8001d64:	f000 f8d4 	bl	8001f10 <_I2cFailRecover>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	607b      	str	r3, [r7, #4]
    status |= VL53L3A2_I2C_Init();
 8001d70:	f7ff fdbc 	bl	80018ec <BSP_I2C1_Init>
 8001d74:	4602      	mov	r2, r0
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	607b      	str	r3, [r7, #4]

    if (status != BSP_ERROR_NONE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d147      	bne.n	8001e12 <VL53L3A2_Init+0xc6>
    {
      goto done_err;
    }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR0, 0, ExpanderData, 2);
 8001d82:	463a      	mov	r2, r7
 8001d84:	2302      	movs	r3, #2
 8001d86:	2100      	movs	r1, #0
 8001d88:	2086      	movs	r0, #134	; 0x86
 8001d8a:	f000 f963 	bl	8002054 <_ExpanderRd>
 8001d8e:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d13f      	bne.n	8001e16 <VL53L3A2_Init+0xca>
 8001d96:	783b      	ldrb	r3, [r7, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d13c      	bne.n	8001e16 <VL53L3A2_Init+0xca>
 8001d9c:	787b      	ldrb	r3, [r7, #1]
 8001d9e:	2b16      	cmp	r3, #22
 8001da0:	d139      	bne.n	8001e16 <VL53L3A2_Init+0xca>
	  {
      VL53L3A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR0);
      goto done_err;
	  }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR1, 0, ExpanderData, 2);
 8001da2:	463a      	mov	r2, r7
 8001da4:	2302      	movs	r3, #2
 8001da6:	2100      	movs	r1, #0
 8001da8:	2084      	movs	r0, #132	; 0x84
 8001daa:	f000 f953 	bl	8002054 <_ExpanderRd>
 8001dae:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d131      	bne.n	8001e1a <VL53L3A2_Init+0xce>
 8001db6:	783b      	ldrb	r3, [r7, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d12e      	bne.n	8001e1a <VL53L3A2_Init+0xce>
 8001dbc:	787b      	ldrb	r3, [r7, #1]
 8001dbe:	2b16      	cmp	r3, #22
 8001dc0:	d12b      	bne.n	8001e1a <VL53L3A2_Init+0xce>
	  {
		  VL53L3A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR1);
		  goto done_err;
	  }

	  CurIOVal.u32 = 0x0U;
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <VL53L3A2_Init+0xe8>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]

	  /* setup expander   i/o direction  all output but exp1 bit 14*/
	  ExpanderData[0] = 0xFFU;
 8001dc8:	23ff      	movs	r3, #255	; 0xff
 8001dca:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xFFU;
 8001dcc:	23ff      	movs	r3, #255	; 0xff
 8001dce:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPDR, ExpanderData, 2);
 8001dd0:	463a      	mov	r2, r7
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	2114      	movs	r1, #20
 8001dd6:	2086      	movs	r0, #134	; 0x86
 8001dd8:	f000 f96e 	bl	80020b8 <_ExpanderWR>
 8001ddc:	6078      	str	r0, [r7, #4]

	  if (status)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d11c      	bne.n	8001e1e <VL53L3A2_Init+0xd2>
	  {
		VL53L3A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR0);
		goto done_err;
	  }

	  ExpanderData[0] = 0xFFU;
 8001de4:	23ff      	movs	r3, #255	; 0xff
 8001de6:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xBFU; /* all but bit 14-15 that is pb1 and xhurt */
 8001de8:	23bf      	movs	r3, #191	; 0xbf
 8001dea:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPDR, ExpanderData, 2);
 8001dec:	463a      	mov	r2, r7
 8001dee:	2302      	movs	r3, #2
 8001df0:	2114      	movs	r1, #20
 8001df2:	2084      	movs	r0, #132	; 0x84
 8001df4:	f000 f960 	bl	80020b8 <_ExpanderWR>
 8001df8:	6078      	str	r0, [r7, #4]

	  if (status)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d110      	bne.n	8001e22 <VL53L3A2_Init+0xd6>
		VL53L3A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR1);
		goto done_err;
	  }

	  /* shut down all segment and all device */
	  CurIOVal.u32 = 0x7FU + (0x7FU << 7) + (0x7FU << 16) + (0x7FU << (16 + 7));
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <VL53L3A2_Init+0xe8>)
 8001e02:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 8001e06:	601a      	str	r2, [r3, #0]

	  status = _ExpandersSetAllIO();
 8001e08:	f000 f904 	bl	8002014 <_ExpandersSetAllIO>
 8001e0c:	6078      	str	r0, [r7, #4]
	  {
		VL53L3A2_ErrLog("Set initial i/o ");
	  }
  }

done_err:
 8001e0e:	bf00      	nop
 8001e10:	e008      	b.n	8001e24 <VL53L3A2_Init+0xd8>
      goto done_err;
 8001e12:	bf00      	nop
 8001e14:	e006      	b.n	8001e24 <VL53L3A2_Init+0xd8>
      goto done_err;
 8001e16:	bf00      	nop
 8001e18:	e004      	b.n	8001e24 <VL53L3A2_Init+0xd8>
		  goto done_err;
 8001e1a:	bf00      	nop
 8001e1c:	e002      	b.n	8001e24 <VL53L3A2_Init+0xd8>
		goto done_err;
 8001e1e:	bf00      	nop
 8001e20:	e000      	b.n	8001e24 <VL53L3A2_Init+0xd8>
		goto done_err;
 8001e22:	bf00      	nop
  return status;
 8001e24:	687b      	ldr	r3, [r7, #4]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000130 	.word	0x20000130
 8001e34:	20000134 	.word	0x20000134

08001e38 <VL53L3A2_ResetId>:
  * @param  DevNo The device number, use @ref VL53L3A2_dev_e.
  * @param  state  State of the device reset (xsdn) pin @warning reset pin is active low
  * @return 0 on success
  */
int32_t VL53L3A2_ResetId(uint8_t DevNo, uint8_t state)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	460a      	mov	r2, r1
 8001e42:	71fb      	strb	r3, [r7, #7]
 8001e44:	4613      	mov	r3, r2
 8001e46:	71bb      	strb	r3, [r7, #6]
  int32_t status;

  switch (DevNo)
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d037      	beq.n	8001ebe <VL53L3A2_ResetId+0x86>
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	dc4e      	bgt.n	8001ef0 <VL53L3A2_ResetId+0xb8>
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d01a      	beq.n	8001e8c <VL53L3A2_ResetId+0x54>
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d14a      	bne.n	8001ef0 <VL53L3A2_ResetId+0xb8>
  {
    case VL53L3A2_DEV_CENTER :
      CurIOVal.bytes[3] &= ~0x80U; /* bit 15 expander 1  => byte #3 */
 8001e5a:	4b2a      	ldr	r3, [pc, #168]	; (8001f04 <VL53L3A2_ResetId+0xcc>)
 8001e5c:	78db      	ldrb	r3, [r3, #3]
 8001e5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	4b27      	ldr	r3, [pc, #156]	; (8001f04 <VL53L3A2_ResetId+0xcc>)
 8001e66:	70da      	strb	r2, [r3, #3]

      if (state)
 8001e68:	79bb      	ldrb	r3, [r7, #6]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d006      	beq.n	8001e7c <VL53L3A2_ResetId+0x44>
      {
        CurIOVal.bytes[3] |= 0x80U;  /* bit 15 expander 1  => byte #3 */
 8001e6e:	4b25      	ldr	r3, [pc, #148]	; (8001f04 <VL53L3A2_ResetId+0xcc>)
 8001e70:	78db      	ldrb	r3, [r3, #3]
 8001e72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	4b22      	ldr	r3, [pc, #136]	; (8001f04 <VL53L3A2_ResetId+0xcc>)
 8001e7a:	70da      	strb	r2, [r3, #3]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR + 1, &CurIOVal.bytes[3], 1);
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	4a22      	ldr	r2, [pc, #136]	; (8001f08 <VL53L3A2_ResetId+0xd0>)
 8001e80:	2113      	movs	r1, #19
 8001e82:	2084      	movs	r0, #132	; 0x84
 8001e84:	f000 f918 	bl	80020b8 <_ExpanderWR>
 8001e88:	60f8      	str	r0, [r7, #12]
      break;
 8001e8a:	e035      	b.n	8001ef8 <VL53L3A2_ResetId+0xc0>

    case VL53L3A2_DEV_LEFT :
      CurIOVal.bytes[1] &= ~0x40U; /* bit 14 expander 0 => byte #1*/
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <VL53L3A2_ResetId+0xcc>)
 8001e8e:	785b      	ldrb	r3, [r3, #1]
 8001e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <VL53L3A2_ResetId+0xcc>)
 8001e98:	705a      	strb	r2, [r3, #1]

      if (state)
 8001e9a:	79bb      	ldrb	r3, [r7, #6]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d006      	beq.n	8001eae <VL53L3A2_ResetId+0x76>
      {
        CurIOVal.bytes[1] |= 0x40U;  /* bit 14 expander 0 => byte #1*/
 8001ea0:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <VL53L3A2_ResetId+0xcc>)
 8001ea2:	785b      	ldrb	r3, [r3, #1]
 8001ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <VL53L3A2_ResetId+0xcc>)
 8001eac:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 8001eae:	2301      	movs	r3, #1
 8001eb0:	4a16      	ldr	r2, [pc, #88]	; (8001f0c <VL53L3A2_ResetId+0xd4>)
 8001eb2:	2113      	movs	r1, #19
 8001eb4:	2086      	movs	r0, #134	; 0x86
 8001eb6:	f000 f8ff 	bl	80020b8 <_ExpanderWR>
 8001eba:	60f8      	str	r0, [r7, #12]
      break;
 8001ebc:	e01c      	b.n	8001ef8 <VL53L3A2_ResetId+0xc0>

    case VL53L3A2_DEV_RIGHT :
      CurIOVal.bytes[1] &= ~0x80U; /* bit 15 expander 0  => byte #1 */
 8001ebe:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <VL53L3A2_ResetId+0xcc>)
 8001ec0:	785b      	ldrb	r3, [r3, #1]
 8001ec2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <VL53L3A2_ResetId+0xcc>)
 8001eca:	705a      	strb	r2, [r3, #1]

      if (state)
 8001ecc:	79bb      	ldrb	r3, [r7, #6]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d006      	beq.n	8001ee0 <VL53L3A2_ResetId+0xa8>
      {
        CurIOVal.bytes[1] |= 0x80U;  /* bit 15 expander 0 => byte #1*/
 8001ed2:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <VL53L3A2_ResetId+0xcc>)
 8001ed4:	785b      	ldrb	r3, [r3, #1]
 8001ed6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <VL53L3A2_ResetId+0xcc>)
 8001ede:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <VL53L3A2_ResetId+0xd4>)
 8001ee4:	2113      	movs	r1, #19
 8001ee6:	2086      	movs	r0, #134	; 0x86
 8001ee8:	f000 f8e6 	bl	80020b8 <_ExpanderWR>
 8001eec:	60f8      	str	r0, [r7, #12]
      break;
 8001eee:	e003      	b.n	8001ef8 <VL53L3A2_ResetId+0xc0>

    default:
      VL53L3A2_ErrLog("Invalid DevNo %d", DevNo);
      status = -1;
 8001ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef4:	60fb      	str	r3, [r7, #12]
      goto done;
 8001ef6:	e000      	b.n	8001efa <VL53L3A2_ResetId+0xc2>
  if (status)
  {
    VL53L3A2_ErrLog("expander i/o error for DevNo %d state %d ", DevNo, state);
  }

done:
 8001ef8:	bf00      	nop
  return status;
 8001efa:	68fb      	ldr	r3, [r7, #12]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20000134 	.word	0x20000134
 8001f08:	20000137 	.word	0x20000137
 8001f0c:	20000135 	.word	0x20000135

08001f10 <_I2cFailRecover>:
  * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
  * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
  * this routine does use gpio to manipulate and recover i2c bus line in all cases.
  */
static int32_t _I2cFailRecover(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af00      	add	r7, sp, #0
  /* We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
  * by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
  * all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state */

  uint8_t i;
  uint8_t retry_cnt = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	77bb      	strb	r3, [r7, #30]
  static uint8_t is_already_init = 0U;
  GPIO_InitTypeDef GPIO_InitStruct;

  if (is_already_init == 1U)
 8001f1a:	4b3b      	ldr	r3, [pc, #236]	; (8002008 <_I2cFailRecover+0xf8>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d101      	bne.n	8001f26 <_I2cFailRecover+0x16>
  {
    return BSP_ERROR_NONE;
 8001f22:	2300      	movs	r3, #0
 8001f24:	e06b      	b.n	8001ffe <_I2cFailRecover+0xee>
  }

  /* Enable I/O */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	607b      	str	r3, [r7, #4]
 8001f2a:	4b38      	ldr	r3, [pc, #224]	; (800200c <_I2cFailRecover+0xfc>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a37      	ldr	r2, [pc, #220]	; (800200c <_I2cFailRecover+0xfc>)
 8001f30:	f043 0302 	orr.w	r3, r3, #2
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b35      	ldr	r3, [pc, #212]	; (800200c <_I2cFailRecover+0xfc>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	607b      	str	r3, [r7, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin = VL53L3A2_I2C_SCL_GPIO_PIN;
 8001f42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001f48:	2311      	movs	r3, #17
 8001f4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L3A2_I2C_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001f50:	f107 0308 	add.w	r3, r7, #8
 8001f54:	4619      	mov	r1, r3
 8001f56:	482e      	ldr	r0, [pc, #184]	; (8002010 <_I2cFailRecover+0x100>)
 8001f58:	f010 fc02 	bl	8012760 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = VL53L3A2_I2C_SDA_GPIO_PIN;
 8001f5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001f62:	2311      	movs	r3, #17
 8001f64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f66:	2301      	movs	r3, #1
 8001f68:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L3A2_I2C_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001f6a:	f107 0308 	add.w	r3, r7, #8
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4827      	ldr	r0, [pc, #156]	; (8002010 <_I2cFailRecover+0x100>)
 8001f72:	f010 fbf5 	bl	8012760 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 8001f76:	2201      	movs	r2, #1
 8001f78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f7c:	4824      	ldr	r0, [pc, #144]	; (8002010 <_I2cFailRecover+0x100>)
 8001f7e:	f010 fe6f 	bl	8012c60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VL53L3A2_I2C_SDA_GPIO_PORT, VL53L3A2_I2C_SDA_GPIO_PIN, GPIO_PIN_SET);
 8001f82:	2201      	movs	r2, #1
 8001f84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f88:	4821      	ldr	r0, [pc, #132]	; (8002010 <_I2cFailRecover+0x100>)
 8001f8a:	f010 fe69 	bl	8012c60 <HAL_GPIO_WritePin>

  do
  {
    for (i = 0; i < 10U; i++)
 8001f8e:	2300      	movs	r3, #0
 8001f90:	77fb      	strb	r3, [r7, #31]
 8001f92:	e014      	b.n	8001fbe <_I2cFailRecover+0xae>
    {
      HAL_GPIO_WritePin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SCL_GPIO_PIN, GPIO_PIN_RESET);
 8001f94:	2200      	movs	r2, #0
 8001f96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f9a:	481d      	ldr	r0, [pc, #116]	; (8002010 <_I2cFailRecover+0x100>)
 8001f9c:	f010 fe60 	bl	8012c60 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	f010 fad3 	bl	801254c <HAL_Delay>
      HAL_GPIO_WritePin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fac:	4818      	ldr	r0, [pc, #96]	; (8002010 <_I2cFailRecover+0x100>)
 8001fae:	f010 fe57 	bl	8012c60 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	f010 faca 	bl	801254c <HAL_Delay>
    for (i = 0; i < 10U; i++)
 8001fb8:	7ffb      	ldrb	r3, [r7, #31]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	77fb      	strb	r3, [r7, #31]
 8001fbe:	7ffb      	ldrb	r3, [r7, #31]
 8001fc0:	2b09      	cmp	r3, #9
 8001fc2:	d9e7      	bls.n	8001f94 <_I2cFailRecover+0x84>
    }
    retry_cnt++;
 8001fc4:	7fbb      	ldrb	r3, [r7, #30]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	77bb      	strb	r3, [r7, #30]
  } while ((HAL_GPIO_ReadPin(VL53L3A2_I2C_SDA_GPIO_PORT, VL53L3A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET) && (retry_cnt < 7U));
 8001fca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fce:	4810      	ldr	r0, [pc, #64]	; (8002010 <_I2cFailRecover+0x100>)
 8001fd0:	f010 fe2e 	bl	8012c30 <HAL_GPIO_ReadPin>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d102      	bne.n	8001fe0 <_I2cFailRecover+0xd0>
 8001fda:	7fbb      	ldrb	r3, [r7, #30]
 8001fdc:	2b06      	cmp	r3, #6
 8001fde:	d9d6      	bls.n	8001f8e <_I2cFailRecover+0x7e>

  if (HAL_GPIO_ReadPin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET)
 8001fe0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fe4:	480a      	ldr	r0, [pc, #40]	; (8002010 <_I2cFailRecover+0x100>)
 8001fe6:	f010 fe23 	bl	8012c30 <HAL_GPIO_ReadPin>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d102      	bne.n	8001ff6 <_I2cFailRecover+0xe6>
  {
    /* We are still in a bad i2c state, return error */
    return BSP_ERROR_COMPONENT_FAILURE;
 8001ff0:	f06f 0304 	mvn.w	r3, #4
 8001ff4:	e003      	b.n	8001ffe <_I2cFailRecover+0xee>
  }

  is_already_init = 1U;
 8001ff6:	4b04      	ldr	r3, [pc, #16]	; (8002008 <_I2cFailRecover+0xf8>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3720      	adds	r7, #32
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000138 	.word	0x20000138
 800200c:	40023800 	.word	0x40023800
 8002010:	40020400 	.word	0x40020400

08002014 <_ExpandersSetAllIO>:
/**
  * @brief Set all i2c expended gpio in one go
  * @return i/o operation status
  */
static int32_t _ExpandersSetAllIO(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
  int32_t status;

  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR, &CurIOVal.bytes[0], 2);
 800201a:	2302      	movs	r3, #2
 800201c:	4a0b      	ldr	r2, [pc, #44]	; (800204c <_ExpandersSetAllIO+0x38>)
 800201e:	2112      	movs	r1, #18
 8002020:	2086      	movs	r0, #134	; 0x86
 8002022:	f000 f849 	bl	80020b8 <_ExpanderWR>
 8002026:	6078      	str	r0, [r7, #4]

  if (status)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d107      	bne.n	800203e <_ExpandersSetAllIO+0x2a>
  {
    goto done_err;
  }

  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR, &CurIOVal.bytes[2], 2);
 800202e:	2302      	movs	r3, #2
 8002030:	4a07      	ldr	r2, [pc, #28]	; (8002050 <_ExpandersSetAllIO+0x3c>)
 8002032:	2112      	movs	r1, #18
 8002034:	2084      	movs	r0, #132	; 0x84
 8002036:	f000 f83f 	bl	80020b8 <_ExpanderWR>
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	e000      	b.n	8002040 <_ExpandersSetAllIO+0x2c>
    goto done_err;
 800203e:	bf00      	nop

done_err:
  return status;
 8002040:	687b      	ldr	r3, [r7, #4]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000134 	.word	0x20000134
 8002050:	20000136 	.word	0x20000136

08002054 <_ExpanderRd>:
  * @param data       read data buffer
  * @param n_data     number of byte to read
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderRd(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af02      	add	r7, sp, #8
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
 8002060:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr;

  RegAddr = index;
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	b2db      	uxtb	r3, r3
 8002066:	74fb      	strb	r3, [r7, #19]
  VL53L3A2_GetI2cBus();

  do
  {
    status = HAL_I2C_Master_Transmit(&VL53L3A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	b299      	uxth	r1, r3
 800206c:	f107 0213 	add.w	r2, r7, #19
 8002070:	2364      	movs	r3, #100	; 0x64
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	2301      	movs	r3, #1
 8002076:	480f      	ldr	r0, [pc, #60]	; (80020b4 <_ExpanderRd+0x60>)
 8002078:	f010 ff94 	bl	8012fa4 <HAL_I2C_Master_Transmit>
 800207c:	4603      	mov	r3, r0
 800207e:	617b      	str	r3, [r7, #20]

    if (status)
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d110      	bne.n	80020a8 <_ExpanderRd+0x54>
    {
      break;
    }

    status = HAL_I2C_Master_Receive(&VL53L3A2_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	b299      	uxth	r1, r3
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	b29a      	uxth	r2, r3
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	2064      	movs	r0, #100	; 0x64
 8002092:	fb00 f303 	mul.w	r3, r0, r3
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	4613      	mov	r3, r2
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	4805      	ldr	r0, [pc, #20]	; (80020b4 <_ExpanderRd+0x60>)
 800209e:	f011 f87f 	bl	80131a0 <HAL_I2C_Master_Receive>
 80020a2:	4603      	mov	r3, r0
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	e000      	b.n	80020aa <_ExpanderRd+0x56>
      break;
 80020a8:	bf00      	nop
  } while (0);

  VL53L3A2_PutI2cBus();

  return status;
 80020aa:	697b      	ldr	r3, [r7, #20]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20007154 	.word	0x20007154

080020b8 <_ExpanderWR>:
  * @param data       data buffer
  * @param n_data     number of byte to write
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderWR(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08c      	sub	sp, #48	; 0x30
 80020bc:	af02      	add	r7, sp, #8
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
 80020c4:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr[0x10];

  RegAddr[0] = index;
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	753b      	strb	r3, [r7, #20]
  memcpy(RegAddr + 1, data, n_data);
 80020cc:	f107 0314 	add.w	r3, r7, #20
 80020d0:	3301      	adds	r3, #1
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f012 fd84 	bl	8014be4 <memcpy>

  VL53L3A2_GetI2cBus();
  status = HAL_I2C_Master_Transmit(&VL53L3A2_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	b299      	uxth	r1, r3
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	3301      	adds	r3, #1
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	f107 0214 	add.w	r2, r7, #20
 80020ec:	2064      	movs	r0, #100	; 0x64
 80020ee:	9000      	str	r0, [sp, #0]
 80020f0:	4804      	ldr	r0, [pc, #16]	; (8002104 <_ExpanderWR+0x4c>)
 80020f2:	f010 ff57 	bl	8012fa4 <HAL_I2C_Master_Transmit>
 80020f6:	4603      	mov	r3, r0
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
  VL53L3A2_PutI2cBus();

  return status;
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3728      	adds	r7, #40	; 0x28
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20007154 	.word	0x20007154

08002108 <VL53L3A2_RANGING_SENSOR_Init>:
  * @brief Initialize the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_Init(uint32_t Instance)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b02      	cmp	r3, #2
 8002114:	d903      	bls.n	800211e <VL53L3A2_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002116:	f06f 0301 	mvn.w	r3, #1
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	e014      	b.n	8002148 <VL53L3A2_RANGING_SENSOR_Init+0x40>
  }
  else if (VL53L3A2_Init() != 0)
 800211e:	f7ff fe15 	bl	8001d4c <VL53L3A2_Init>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <VL53L3A2_RANGING_SENSOR_Init+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8002128:	f06f 0303 	mvn.w	r3, #3
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	e00b      	b.n	8002148 <VL53L3A2_RANGING_SENSOR_Init+0x40>
  }
  else
  {
    /* reset XSHUT (XSDN) pin */
    (void)VL53L3A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_OFF);
 8002130:	2101      	movs	r1, #1
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f8fc 	bl	8002330 <VL53L3A2_RANGING_SENSOR_SetPowerMode>
    (void)VL53L3A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_ON);
 8002138:	2100      	movs	r1, #0
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f8f8 	bl	8002330 <VL53L3A2_RANGING_SENSOR_SetPowerMode>

    ret = VL53L3CX_Probe(Instance);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f935 	bl	80023b0 <VL53L3CX_Probe>
 8002146:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002148:	68fb      	ldr	r3, [r7, #12]
}
 800214a:	4618      	mov	r0, r3
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <VL53L3A2_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b02      	cmp	r3, #2
 8002162:	d903      	bls.n	800216c <VL53L3A2_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002164:	f06f 0301 	mvn.w	r3, #1
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	e012      	b.n	8002192 <VL53L3A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->ReadID(VL53L3A2_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <VL53L3A2_RANGING_SENSOR_ReadID+0x48>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	490b      	ldr	r1, [pc, #44]	; (80021a0 <VL53L3A2_RANGING_SENSOR_ReadID+0x4c>)
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800217a:	6839      	ldr	r1, [r7, #0]
 800217c:	4610      	mov	r0, r2
 800217e:	4798      	blx	r3
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	da03      	bge.n	800218e <VL53L3A2_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002186:	f06f 0304 	mvn.w	r3, #4
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	e001      	b.n	8002192 <VL53L3A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002192:	68fb      	ldr	r3, [r7, #12]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000148 	.word	0x20000148
 80021a0:	2000013c 	.word	0x2000013c

080021a4 <VL53L3A2_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d903      	bls.n	80021bc <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80021b4:	f06f 0301 	mvn.w	r3, #1
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	e012      	b.n	80021e2 <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->ConfigProfile(VL53L3A2_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x48>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	490b      	ldr	r1, [pc, #44]	; (80021f0 <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x4c>)
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80021ca:	6839      	ldr	r1, [r7, #0]
 80021cc:	4610      	mov	r0, r2
 80021ce:	4798      	blx	r3
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	da03      	bge.n	80021de <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80021d6:	f06f 0304 	mvn.w	r3, #4
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	e001      	b.n	80021e2 <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80021e2:	68fb      	ldr	r3, [r7, #12]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000148 	.word	0x20000148
 80021f0:	2000013c 	.word	0x2000013c

080021f4 <VL53L3A2_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b02      	cmp	r3, #2
 8002202:	d903      	bls.n	800220c <VL53L3A2_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002204:	f06f 0301 	mvn.w	r3, #1
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	e012      	b.n	8002232 <VL53L3A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->GetDistance(VL53L3A2_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 800220c:	4b0b      	ldr	r3, [pc, #44]	; (800223c <VL53L3A2_RANGING_SENSOR_GetDistance+0x48>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	490b      	ldr	r1, [pc, #44]	; (8002240 <VL53L3A2_RANGING_SENSOR_GetDistance+0x4c>)
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800221a:	6839      	ldr	r1, [r7, #0]
 800221c:	4610      	mov	r0, r2
 800221e:	4798      	blx	r3
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	da03      	bge.n	800222e <VL53L3A2_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002226:	f06f 0304 	mvn.w	r3, #4
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	e001      	b.n	8002232 <VL53L3A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002232:	68fb      	ldr	r3, [r7, #12]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000148 	.word	0x20000148
 8002240:	2000013c 	.word	0x2000013c

08002244 <VL53L3A2_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired RANGING_SENSOR_Mode_t
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b02      	cmp	r3, #2
 8002252:	d903      	bls.n	800225c <VL53L3A2_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002254:	f06f 0301 	mvn.w	r3, #1
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	e012      	b.n	8002282 <VL53L3A2_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->Start(VL53L3A2_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 800225c:	4b0b      	ldr	r3, [pc, #44]	; (800228c <VL53L3A2_RANGING_SENSOR_Start+0x48>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	490b      	ldr	r1, [pc, #44]	; (8002290 <VL53L3A2_RANGING_SENSOR_Start+0x4c>)
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800226a:	6839      	ldr	r1, [r7, #0]
 800226c:	4610      	mov	r0, r2
 800226e:	4798      	blx	r3
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	da03      	bge.n	800227e <VL53L3A2_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002276:	f06f 0304 	mvn.w	r3, #4
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	e001      	b.n	8002282 <VL53L3A2_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002282:	68fb      	ldr	r3, [r7, #12]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20000148 	.word	0x20000148
 8002290:	2000013c 	.word	0x2000013c

08002294 <VL53L3A2_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_Stop(uint32_t Instance)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d903      	bls.n	80022aa <VL53L3A2_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80022a2:	f06f 0301 	mvn.w	r3, #1
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	e011      	b.n	80022ce <VL53L3A2_RANGING_SENSOR_Stop+0x3a>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->Stop(VL53L3A2_RANGING_SENSOR_CompObj[Instance]) < 0)
 80022aa:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <VL53L3A2_RANGING_SENSOR_Stop+0x44>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	490a      	ldr	r1, [pc, #40]	; (80022dc <VL53L3A2_RANGING_SENSOR_Stop+0x48>)
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80022b8:	4610      	mov	r0, r2
 80022ba:	4798      	blx	r3
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	da03      	bge.n	80022ca <VL53L3A2_RANGING_SENSOR_Stop+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80022c2:	f06f 0304 	mvn.w	r3, #4
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	e001      	b.n	80022ce <VL53L3A2_RANGING_SENSOR_Stop+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80022ce:	68fb      	ldr	r3, [r7, #12]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20000148 	.word	0x20000148
 80022dc:	2000013c 	.word	0x2000013c

080022e0 <VL53L3A2_RANGING_SENSOR_SetAddress>:
  * @param Instance    Ranging sensor instance.
  * @param Address     New I2C address.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_SetAddress(uint32_t Instance, uint32_t Address)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d903      	bls.n	80022f8 <VL53L3A2_RANGING_SENSOR_SetAddress+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80022f0:	f06f 0301 	mvn.w	r3, #1
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	e012      	b.n	800231e <VL53L3A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->SetAddress(VL53L3A2_RANGING_SENSOR_CompObj[Instance], Address) < 0)
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <VL53L3A2_RANGING_SENSOR_SetAddress+0x48>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fe:	490b      	ldr	r1, [pc, #44]	; (800232c <VL53L3A2_RANGING_SENSOR_SetAddress+0x4c>)
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002306:	6839      	ldr	r1, [r7, #0]
 8002308:	4610      	mov	r0, r2
 800230a:	4798      	blx	r3
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	da03      	bge.n	800231a <VL53L3A2_RANGING_SENSOR_SetAddress+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002312:	f06f 0304 	mvn.w	r3, #4
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	e001      	b.n	800231e <VL53L3A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800231e:	68fb      	ldr	r3, [r7, #12]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20000148 	.word	0x20000148
 800232c:	2000013c 	.word	0x2000013c

08002330 <VL53L3A2_RANGING_SENSOR_SetPowerMode>:
  * @param Instance    Ranging sensor instance.
  * @param PowerMode    New power mode to be entered.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_SetPowerMode(uint32_t Instance, uint32_t PowerMode)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b02      	cmp	r3, #2
 800233e:	d903      	bls.n	8002348 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002340:	f06f 0301 	mvn.w	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	e02e      	b.n	80023a6 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_ON)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d112      	bne.n	8002374 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x44>
  {
    if (VL53L3A2_ResetId((uint8_t)Instance, 1) < 0)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2101      	movs	r1, #1
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fd6f 	bl	8001e38 <VL53L3A2_ResetId>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	da03      	bge.n	8002368 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002360:	f06f 0303 	mvn.w	r3, #3
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	e01e      	b.n	80023a6 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8002368:	2002      	movs	r0, #2
 800236a:	f010 f8ef 	bl	801254c <HAL_Delay>
      ret = BSP_ERROR_NONE;
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	e018      	b.n	80023a6 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_OFF)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d112      	bne.n	80023a0 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x70>
  {
    if (VL53L3A2_ResetId((uint8_t)Instance, 0) < 0)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2100      	movs	r1, #0
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fd59 	bl	8001e38 <VL53L3A2_ResetId>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	da03      	bge.n	8002394 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x64>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800238c:	f06f 0303 	mvn.w	r3, #3
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	e008      	b.n	80023a6 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8002394:	2002      	movs	r0, #2
 8002396:	f010 f8d9 	bl	801254c <HAL_Delay>
      ret = BSP_ERROR_NONE;
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	e002      	b.n	80023a6 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80023a0:	f06f 0301 	mvn.w	r3, #1
 80023a4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80023a6:	68fb      	ldr	r3, [r7, #12]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <VL53L3CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L3CX_Probe(uint32_t Instance)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08a      	sub	sp, #40	; 0x28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  VL53L3CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L3CX_Object_t   VL53L3CXObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L3CX_ADDRESS;
 80023b8:	2352      	movs	r3, #82	; 0x52
 80023ba:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L3A2_I2C_Init;
 80023bc:	4b38      	ldr	r3, [pc, #224]	; (80024a0 <VL53L3CX_Probe+0xf0>)
 80023be:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L3A2_I2C_DeInit;
 80023c0:	4b38      	ldr	r3, [pc, #224]	; (80024a4 <VL53L3CX_Probe+0xf4>)
 80023c2:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L3A2_I2C_WriteReg;
 80023c4:	4b38      	ldr	r3, [pc, #224]	; (80024a8 <VL53L3CX_Probe+0xf8>)
 80023c6:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L3A2_I2C_ReadReg;
 80023c8:	4b38      	ldr	r3, [pc, #224]	; (80024ac <VL53L3CX_Probe+0xfc>)
 80023ca:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L3A2_GetTick;
 80023cc:	4b38      	ldr	r3, [pc, #224]	; (80024b0 <VL53L3CX_Probe+0x100>)
 80023ce:	623b      	str	r3, [r7, #32]

  if (VL53L3CX_RegisterBusIO(&(VL53L3CXObj[Instance]), &IOCtx) != VL53L3CX_OK)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f242 42f0 	movw	r2, #9456	; 0x24f0
 80023d6:	fb02 f303 	mul.w	r3, r2, r3
 80023da:	4a36      	ldr	r2, [pc, #216]	; (80024b4 <VL53L3CX_Probe+0x104>)
 80023dc:	4413      	add	r3, r2
 80023de:	f107 020c 	add.w	r2, r7, #12
 80023e2:	4611      	mov	r1, r2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f00f fbf2 	bl	8011bce <VL53L3CX_RegisterBusIO>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <VL53L3CX_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80023f0:	f06f 0304 	mvn.w	r3, #4
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
 80023f6:	e04d      	b.n	8002494 <VL53L3CX_Probe+0xe4>
  }
  else if (VL53L3CX_ReadID(&(VL53L3CXObj[Instance]), &id) != VL53L3CX_OK)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f242 42f0 	movw	r2, #9456	; 0x24f0
 80023fe:	fb02 f303 	mul.w	r3, r2, r3
 8002402:	4a2c      	ldr	r2, [pc, #176]	; (80024b4 <VL53L3CX_Probe+0x104>)
 8002404:	4413      	add	r3, r2
 8002406:	f107 0208 	add.w	r2, r7, #8
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f00f fc90 	bl	8011d32 <VL53L3CX_ReadID>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <VL53L3CX_Probe+0x70>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002418:	f06f 0304 	mvn.w	r3, #4
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
 800241e:	e039      	b.n	8002494 <VL53L3CX_Probe+0xe4>
  }
  else
  {
    if (id != VL53L3CX_ID)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f64e 22aa 	movw	r2, #60074	; 0xeaaa
 8002426:	4293      	cmp	r3, r2
 8002428:	d003      	beq.n	8002432 <VL53L3CX_Probe+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800242a:	f06f 0306 	mvn.w	r3, #6
 800242e:	627b      	str	r3, [r7, #36]	; 0x24
 8002430:	e030      	b.n	8002494 <VL53L3CX_Probe+0xe4>
    }
    else
    {
      VL53L3A2_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L3CX_RANGING_SENSOR_Driver;
 8002432:	4b21      	ldr	r3, [pc, #132]	; (80024b8 <VL53L3CX_Probe+0x108>)
 8002434:	4a21      	ldr	r2, [pc, #132]	; (80024bc <VL53L3CX_Probe+0x10c>)
 8002436:	601a      	str	r2, [r3, #0]
      VL53L3A2_RANGING_SENSOR_CompObj[Instance] = &(VL53L3CXObj[Instance]);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f242 42f0 	movw	r2, #9456	; 0x24f0
 800243e:	fb02 f303 	mul.w	r3, r2, r3
 8002442:	4a1c      	ldr	r2, [pc, #112]	; (80024b4 <VL53L3CX_Probe+0x104>)
 8002444:	441a      	add	r2, r3
 8002446:	491e      	ldr	r1, [pc, #120]	; (80024c0 <VL53L3CX_Probe+0x110>)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (VL53L3A2_RANGING_SENSOR_Drv->Init(VL53L3A2_RANGING_SENSOR_CompObj[Instance]) != VL53L3CX_OK)
 800244e:	4b1a      	ldr	r3, [pc, #104]	; (80024b8 <VL53L3CX_Probe+0x108>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	491a      	ldr	r1, [pc, #104]	; (80024c0 <VL53L3CX_Probe+0x110>)
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800245c:	4610      	mov	r0, r2
 800245e:	4798      	blx	r3
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <VL53L3CX_Probe+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002466:	f06f 0304 	mvn.w	r3, #4
 800246a:	627b      	str	r3, [r7, #36]	; 0x24
 800246c:	e012      	b.n	8002494 <VL53L3CX_Probe+0xe4>
      }
      else if (VL53L3A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L3A2_RANGING_SENSOR_CompObj[Instance], &VL53L3A2_RANGING_SENSOR_Cap) != VL53L3CX_OK)
 800246e:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <VL53L3CX_Probe+0x108>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	4912      	ldr	r1, [pc, #72]	; (80024c0 <VL53L3CX_Probe+0x110>)
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800247c:	4911      	ldr	r1, [pc, #68]	; (80024c4 <VL53L3CX_Probe+0x114>)
 800247e:	4610      	mov	r0, r2
 8002480:	4798      	blx	r3
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <VL53L3CX_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002488:	f06f 0304 	mvn.w	r3, #4
 800248c:	627b      	str	r3, [r7, #36]	; 0x24
 800248e:	e001      	b.n	8002494 <VL53L3CX_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8002490:	2300      	movs	r3, #0
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002496:	4618      	mov	r0, r3
 8002498:	3728      	adds	r7, #40	; 0x28
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	080018ed 	.word	0x080018ed
 80024a4:	08001951 	.word	0x08001951
 80024a8:	080019a1 	.word	0x080019a1
 80024ac:	080019f5 	.word	0x080019f5
 80024b0:	08001a49 	.word	0x08001a49
 80024b4:	20000160 	.word	0x20000160
 80024b8:	20000148 	.word	0x20000148
 80024bc:	20000048 	.word	0x20000048
 80024c0:	2000013c 	.word	0x2000013c
 80024c4:	2000014c 	.word	0x2000014c

080024c8 <VL53LX_SetDeviceAddress>:
}



VL53LX_Error VL53LX_SetDeviceAddress(VL53LX_DEV Dev, uint8_t DeviceAddress)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80024d4:	2300      	movs	r3, #0
 80024d6:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3318      	adds	r3, #24
 80024dc:	613b      	str	r3, [r7, #16]
	VL53LX_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 80024e4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53LX_WrByte(Dev, VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
 80024e6:	78fb      	ldrb	r3, [r7, #3]
 80024e8:	085b      	lsrs	r3, r3, #1
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	461a      	mov	r2, r3
 80024ee:	2101      	movs	r1, #1
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f00f f98b 	bl	801180c <VL53LX_WrByte>
 80024f6:	4603      	mov	r3, r0
 80024f8:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 80024fa:	78fb      	ldrb	r3, [r7, #3]
 80024fc:	085b      	lsrs	r3, r3, #1
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002504:	b2da      	uxtb	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800250a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <VL53LX_DataInit>:


VL53LX_Error VL53LX_DataInit(VL53LX_DEV Dev)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800251e:	2300      	movs	r3, #0
 8002520:	75fb      	strb	r3, [r7, #23]
		Status = VL53LX_WrByte(Dev, VL53LX_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53LX_ERROR_NONE)
 8002522:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d105      	bne.n	8002536 <VL53LX_DataInit+0x20>
		Status = VL53LX_data_init(Dev, 1);
 800252a:	2101      	movs	r1, #1
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f001 fcba 	bl	8003ea6 <VL53LX_data_init>
 8002532:	4603      	mov	r3, r0
 8002534:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53LX_ERROR_NONE)
 8002536:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d107      	bne.n	800254e <VL53LX_DataInit+0x38>
		Status = SetPresetModeL3CX(Dev,
 800253e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002542:	2102      	movs	r1, #2
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f887 	bl	8002658 <SetPresetModeL3CX>
 800254a:	4603      	mov	r3, r0
 800254c:	75fb      	strb	r3, [r7, #23]
			VL53LX_DISTANCEMODE_MEDIUM,
			1000);


	if (Status == VL53LX_ERROR_NONE)
 800254e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d106      	bne.n	8002564 <VL53LX_DataInit+0x4e>
		Status = VL53LX_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8002556:	f248 2135 	movw	r1, #33333	; 0x8235
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f980 	bl	8002860 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 8002560:	4603      	mov	r3, r0
 8002562:	75fb      	strb	r3, [r7, #23]
				33333);

	if (Status == VL53LX_ERROR_NONE) {
 8002564:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10a      	bne.n	8002582 <VL53LX_DataInit+0x6c>
		pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3318      	adds	r3, #24
 8002570:	613b      	str	r3, [r7, #16]
		memset(&pdev->per_vcsel_cal_data, 0,
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002578:	220c      	movs	r2, #12
 800257a:	2100      	movs	r1, #0
 800257c:	4618      	mov	r0, r3
 800257e:	f012 fb3f 	bl	8014c00 <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53LX_ERROR_NONE) {
 8002582:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d105      	bne.n	8002596 <VL53LX_DataInit+0x80>
		Status = VL53LX_set_dmax_mode(Dev,
 800258a:	2102      	movs	r1, #2
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f003 fdb0 	bl	80060f2 <VL53LX_set_dmax_mode>
 8002592:	4603      	mov	r3, r0
 8002594:	75fb      	strb	r3, [r7, #23]
			VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	if (Status == VL53LX_ERROR_NONE)
 8002596:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d105      	bne.n	80025aa <VL53LX_DataInit+0x94>
		Status = VL53LX_SmudgeCorrectionEnable(Dev,
 800259e:	2100      	movs	r1, #0
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 ff41 	bl	8003428 <VL53LX_SmudgeCorrectionEnable>
 80025a6:	4603      	mov	r3, r0
 80025a8:	75fb      	strb	r3, [r7, #23]
			VL53LX_SMUDGE_CORRECTION_NONE);

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80025aa:	2320      	movs	r3, #32
 80025ac:	73fb      	strb	r3, [r7, #15]
	VL53LXDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	7bfa      	ldrb	r2, [r7, #15]
 80025b2:	76da      	strb	r2, [r3, #27]

	VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80025ba:	3320      	adds	r3, #32
 80025bc:	2202      	movs	r2, #2
 80025be:	701a      	strb	r2, [r3, #0]
			VL53LX_DISTANCEMODE_MEDIUM);

	LOG_FUNCTION_END(Status);
	return Status;
 80025c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <VL53LX_WaitDeviceBooted>:


VL53LX_Error VL53LX_WaitDeviceBooted(VL53LX_DEV Dev)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80025d4:	2300      	movs	r3, #0
 80025d6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_poll_for_boot_completion(Dev,
 80025d8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f00e fd5c 	bl	801109a <VL53LX_poll_for_boot_completion>
 80025e2:	4603      	mov	r3, r0
 80025e4:	73fb      	strb	r3, [r7, #15]
			VL53LX_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 80025e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <ComputeDevicePresetMode>:


static VL53LX_Error ComputeDevicePresetMode(
		VL53LX_DistanceModes DistanceMode,
		VL53LX_DevicePresetModes *pDevicePresetMode)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	6039      	str	r1, [r7, #0]
 80025fe:	71fb      	strb	r3, [r7, #7]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002600:	2300      	movs	r3, #0
 8002602:	73bb      	strb	r3, [r7, #14]

	uint8_t DistIdx;
	VL53LX_DevicePresetModes RangingModes[3] = {
 8002604:	4a13      	ldr	r2, [pc, #76]	; (8002654 <ComputeDevicePresetMode+0x60>)
 8002606:	f107 0308 	add.w	r3, r7, #8
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	4611      	mov	r1, r2
 800260e:	8019      	strh	r1, [r3, #0]
 8002610:	3302      	adds	r3, #2
 8002612:	0c12      	lsrs	r2, r2, #16
 8002614:	701a      	strb	r2, [r3, #0]
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	switch (DistanceMode) {
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d002      	beq.n	8002622 <ComputeDevicePresetMode+0x2e>
 800261c:	2b02      	cmp	r3, #2
 800261e:	d003      	beq.n	8002628 <ComputeDevicePresetMode+0x34>
 8002620:	e005      	b.n	800262e <ComputeDevicePresetMode+0x3a>
	case VL53LX_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8002622:	2300      	movs	r3, #0
 8002624:	73fb      	strb	r3, [r7, #15]
		break;
 8002626:	e004      	b.n	8002632 <ComputeDevicePresetMode+0x3e>
	case VL53LX_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8002628:	2301      	movs	r3, #1
 800262a:	73fb      	strb	r3, [r7, #15]
		break;
 800262c:	e001      	b.n	8002632 <ComputeDevicePresetMode+0x3e>
	default:
		DistIdx = 2;
 800262e:	2302      	movs	r3, #2
 8002630:	73fb      	strb	r3, [r7, #15]
	}

	*pDevicePresetMode = RangingModes[DistIdx];
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	f107 0210 	add.w	r2, r7, #16
 8002638:	4413      	add	r3, r2
 800263a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	701a      	strb	r2, [r3, #0]

	return Status;
 8002642:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	08015d8c 	.word	0x08015d8c

08002658 <SetPresetModeL3CX>:

static VL53LX_Error SetPresetModeL3CX(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8002658:	b5b0      	push	{r4, r5, r7, lr}
 800265a:	b08e      	sub	sp, #56	; 0x38
 800265c:	af04      	add	r7, sp, #16
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	460b      	mov	r3, r1
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002666:	2300      	movs	r3, #0
 8002668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800267c:	2320      	movs	r3, #32
 800267e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	Status = ComputeDevicePresetMode(DistanceMode,
 8002682:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8002686:	7afb      	ldrb	r3, [r7, #11]
 8002688:	4611      	mov	r1, r2
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff ffb2 	bl	80025f4 <ComputeDevicePresetMode>
 8002690:	4603      	mov	r3, r0
 8002692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53LX_ERROR_NONE)
 8002696:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800269a:	2b00      	cmp	r3, #0
 800269c:	d112      	bne.n	80026c4 <SetPresetModeL3CX+0x6c>
		Status =  VL53LX_get_preset_mode_timing_cfg(Dev,
 800269e:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80026a2:	f107 001c 	add.w	r0, r7, #28
 80026a6:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80026aa:	f107 0314 	add.w	r3, r7, #20
 80026ae:	9301      	str	r3, [sp, #4]
 80026b0:	f107 0318 	add.w	r3, r7, #24
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	4603      	mov	r3, r0
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f002 f859 	bl	8004770 <VL53LX_get_preset_mode_timing_cfg>
 80026be:	4603      	mov	r3, r0
 80026c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53LX_ERROR_NONE)
 80026c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d112      	bne.n	80026f2 <SetPresetModeL3CX+0x9a>
		Status = VL53LX_set_preset_mode(
 80026cc:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 80026d0:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 80026d2:	69fd      	ldr	r5, [r7, #28]
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	9102      	str	r1, [sp, #8]
 80026dc:	9201      	str	r2, [sp, #4]
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	462b      	mov	r3, r5
 80026e2:	4622      	mov	r2, r4
 80026e4:	4601      	mov	r1, r0
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f002 f8a3 	bl	8004832 <VL53LX_set_preset_mode>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 80026f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d103      	bne.n	8002702 <SetPresetModeL3CX+0xaa>
		VL53LXDevDataSet(Dev, LLData.measurement_mode,
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002700:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	LOG_FUNCTION_END(Status);
	return Status;
 8002702:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002706:	4618      	mov	r0, r3
 8002708:	3728      	adds	r7, #40	; 0x28
 800270a:	46bd      	mov	sp, r7
 800270c:	bdb0      	pop	{r4, r5, r7, pc}

0800270e <IsL4>:

static int IsL4(VL53LX_DEV Dev)
{
 800270e:	b480      	push	{r7}
 8002710:	b085      	sub	sp, #20
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
	int devL4 = 0;
 8002716:	2300      	movs	r3, #0
 8002718:	60fb      	str	r3, [r7, #12]
	VL53LX_LLDriverData_t *pDev;
	pDev = VL53LXDevStructGetLLDriverHandle(Dev);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3318      	adds	r3, #24
 800271e:	60bb      	str	r3, [r7, #8]

	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	f893 3393 	ldrb.w	r3, [r3, #915]	; 0x393
 8002726:	2baa      	cmp	r3, #170	; 0xaa
 8002728:	d106      	bne.n	8002738 <IsL4+0x2a>
		(pDev->nvm_copy_data.identification__model_id == 0xEB))
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	f893 3392 	ldrb.w	r3, [r3, #914]	; 0x392
	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 8002730:	2beb      	cmp	r3, #235	; 0xeb
 8002732:	d101      	bne.n	8002738 <IsL4+0x2a>
		devL4 = 1;
 8002734:	2301      	movs	r3, #1
 8002736:	60fb      	str	r3, [r7, #12]
	return devL4;
 8002738:	68fb      	ldr	r3, [r7, #12]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <CheckValidRectRoi>:

static VL53LX_Error CheckValidRectRoi(VL53LX_UserRoi_t ROI)
{
 8002746:	b480      	push	{r7}
 8002748:	b085      	sub	sp, #20
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800274e:	2300      	movs	r3, #0
 8002750:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8002752:	793b      	ldrb	r3, [r7, #4]
 8002754:	2b0f      	cmp	r3, #15
 8002756:	d808      	bhi.n	800276a <CheckValidRectRoi+0x24>
 8002758:	797b      	ldrb	r3, [r7, #5]
 800275a:	2b0f      	cmp	r3, #15
 800275c:	d805      	bhi.n	800276a <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 800275e:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8002760:	2b0f      	cmp	r3, #15
 8002762:	d802      	bhi.n	800276a <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	2b0f      	cmp	r3, #15
 8002768:	d901      	bls.n	800276e <CheckValidRectRoi+0x28>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 800276a:	23fc      	movs	r3, #252	; 0xfc
 800276c:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 800276e:	793a      	ldrb	r2, [r7, #4]
 8002770:	79bb      	ldrb	r3, [r7, #6]
 8002772:	429a      	cmp	r2, r3
 8002774:	d803      	bhi.n	800277e <CheckValidRectRoi+0x38>
 8002776:	797a      	ldrb	r2, [r7, #5]
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	429a      	cmp	r2, r3
 800277c:	d201      	bcs.n	8002782 <CheckValidRectRoi+0x3c>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 800277e:	23fc      	movs	r3, #252	; 0xfc
 8002780:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8002782:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <VL53LX_SetDistanceMode>:


VL53LX_Error VL53LX_SetDistanceMode(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b088      	sub	sp, #32
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	460b      	mov	r3, r1
 800279c:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800279e:	2300      	movs	r3, #0
 80027a0:	77fb      	strb	r3, [r7, #31]
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("%d", (int)DistanceMode);



	if ((DistanceMode != VL53LX_DISTANCEMODE_SHORT) &&
 80027ae:	78fb      	ldrb	r3, [r7, #3]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d008      	beq.n	80027c6 <VL53LX_SetDistanceMode+0x34>
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d005      	beq.n	80027c6 <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_MEDIUM) &&
 80027ba:	78fb      	ldrb	r3, [r7, #3]
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d002      	beq.n	80027c6 <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_LONG))
		return VL53LX_ERROR_INVALID_PARAMS;
 80027c0:	f06f 0303 	mvn.w	r3, #3
 80027c4:	e048      	b.n	8002858 <VL53LX_SetDistanceMode+0xc6>

	if (IsL4(Dev) && (DistanceMode == VL53LX_DISTANCEMODE_SHORT))
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff ffa1 	bl	800270e <IsL4>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d005      	beq.n	80027de <VL53LX_SetDistanceMode+0x4c>
 80027d2:	78fb      	ldrb	r3, [r7, #3]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d102      	bne.n	80027de <VL53LX_SetDistanceMode+0x4c>
		return VL53LX_ERROR_INVALID_PARAMS;
 80027d8:	f06f 0303 	mvn.w	r3, #3
 80027dc:	e03c      	b.n	8002858 <VL53LX_SetDistanceMode+0xc6>

	inter_measurement_period_ms =  VL53LXDevDataGet(Dev,
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e2:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 80027e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10a      	bne.n	8002802 <VL53LX_SetDistanceMode+0x70>
		Status = VL53LX_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 80027ec:	f107 0314 	add.w	r3, r7, #20
 80027f0:	f107 0210 	add.w	r2, r7, #16
 80027f4:	f107 010c 	add.w	r1, r7, #12
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f001 fe92 	bl	8004522 <VL53LX_get_timeouts_us>
 80027fe:	4603      	mov	r3, r0
 8002800:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53LX_ERROR_NONE)
 8002802:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d107      	bne.n	800281a <VL53LX_SetDistanceMode+0x88>
		Status = SetPresetModeL3CX(Dev,
 800280a:	78fb      	ldrb	r3, [r7, #3]
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4619      	mov	r1, r3
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff ff21 	bl	8002658 <SetPresetModeL3CX>
 8002816:	4603      	mov	r3, r0
 8002818:	77fb      	strb	r3, [r7, #31]
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE) {
 800281a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d105      	bne.n	800282e <VL53LX_SetDistanceMode+0x9c>
		VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8002828:	3320      	adds	r3, #32
 800282a:	78fa      	ldrb	r2, [r7, #3]
 800282c:	701a      	strb	r2, [r3, #0]
				DistanceMode);
	}

	if (Status == VL53LX_ERROR_NONE) {
 800282e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10e      	bne.n	8002854 <VL53LX_SetDistanceMode+0xc2>
		Status = VL53LX_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8002836:	68f9      	ldr	r1, [r7, #12]
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f001 fe37 	bl	80044b0 <VL53LX_set_timeouts_us>
 8002842:	4603      	mov	r3, r0
 8002844:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53LX_ERROR_NONE)
 8002846:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d102      	bne.n	8002854 <VL53LX_SetDistanceMode+0xc2>
			VL53LXDevDataSet(Dev, LLData.range_config_timeout_us,
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	629a      	str	r2, [r3, #40]	; 0x28
				TimingBudget);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002854:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3720      	adds	r7, #32
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>:
}


VL53LX_Error VL53LX_SetMeasurementTimingBudgetMicroSeconds(VL53LX_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08a      	sub	sp, #40	; 0x28
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800286a:	2300      	movs	r3, #0
 800286c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 800287c:	4b31      	ldr	r3, [pc, #196]	; (8002944 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe4>)
 800287e:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	4a31      	ldr	r2, [pc, #196]	; (8002948 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d902      	bls.n	800288e <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x2e>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8002888:	23fc      	movs	r3, #252	; 0xfc
 800288a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53LX_ERROR_NONE)
 800288e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10b      	bne.n	80028ae <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x4e>
		Status = VL53LX_get_timeouts_us(Dev,
 8002896:	f107 0314 	add.w	r3, r7, #20
 800289a:	f107 0210 	add.w	r2, r7, #16
 800289e:	f107 010c 	add.w	r1, r7, #12
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f001 fe3d 	bl	8004522 <VL53LX_get_timeouts_us>
 80028a8:	4603      	mov	r3, r0
 80028aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	TimingGuard = 1700;
 80028ae:	f240 63a4 	movw	r3, #1700	; 0x6a4
 80028b2:	61fb      	str	r3, [r7, #28]
	divisor = 6;
 80028b4:	2306      	movs	r3, #6
 80028b6:	61bb      	str	r3, [r7, #24]

	if (IsL4(Dev))
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ff28 	bl	800270e <IsL4>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x68>
		FDAMaxTimingBudgetUs = L4_FDA_MAX_TIMING_BUDGET_US;
 80028c4:	4b21      	ldr	r3, [pc, #132]	; (800294c <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xec>)
 80028c6:	623b      	str	r3, [r7, #32]

	if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d803      	bhi.n	80028d8 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x78>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 80028d0:	23fc      	movs	r3, #252	; 0xfc
 80028d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80028d6:	e003      	b.n	80028e0 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x80>
	else {
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
				- TimingGuard);
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	1ad3      	subs	r3, r2, r3
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
 80028de:	617b      	str	r3, [r7, #20]
	}

	if (Status == VL53LX_ERROR_NONE) {
 80028e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d11c      	bne.n	8002922 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
		if (TimingBudget > FDAMaxTimingBudgetUs)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	6a3a      	ldr	r2, [r7, #32]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d203      	bcs.n	80028f8 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x98>
			Status = VL53LX_ERROR_INVALID_PARAMS;
 80028f0:	23fc      	movs	r3, #252	; 0xfc
 80028f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80028f6:	e00d      	b.n	8002914 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xb4>
		else {
			TimingBudget /= divisor;
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002900:	617b      	str	r3, [r7, #20]
			Status = VL53LX_set_timeouts_us(
 8002902:	68f9      	ldr	r1, [r7, #12]
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f001 fdd1 	bl	80044b0 <VL53LX_set_timeouts_us>
 800290e:	4603      	mov	r3, r0
 8002910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				PhaseCalTimeoutUs,
				MmTimeoutUs,
				TimingBudget);
		}

		if (Status == VL53LX_ERROR_NONE)
 8002914:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002918:	2b00      	cmp	r3, #0
 800291a:	d102      	bne.n	8002922 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
			VL53LXDevDataSet(Dev,
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	629a      	str	r2, [r3, #40]	; 0x28
				LLData.range_config_timeout_us,
				TimingBudget);
	}

	if (Status == VL53LX_ERROR_NONE) {
 8002922:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002926:	2b00      	cmp	r3, #0
 8002928:	d105      	bne.n	8002936 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xd6>
		VL53LXDevDataSet(Dev,
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8002930:	3324      	adds	r3, #36	; 0x24
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	601a      	str	r2, [r3, #0]
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002936:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800293a:	4618      	mov	r0, r3
 800293c:	3728      	adds	r7, #40	; 0x28
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	00086470 	.word	0x00086470
 8002948:	00989680 	.word	0x00989680
 800294c:	00030d40 	.word	0x00030d40

08002950 <VL53LX_SetUserROI>:



VL53LX_Error VL53LX_SetUserROI(VL53LX_DEV Dev,
		VL53LX_UserRoi_t *pRoi)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b092      	sub	sp, #72	; 0x48
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800295a:	2300      	movs	r3, #0
 800295c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	VL53LX_zone_config_t  zone_cfg;
	uint8_t x_centre, y_centre, width, height;

	Status = CheckValidRectRoi(*pRoi);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	2300      	movs	r3, #0
 8002966:	4613      	mov	r3, r2
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff feec 	bl	8002746 <CheckValidRectRoi>
 800296e:	4603      	mov	r3, r0
 8002970:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (Status != VL53LX_ERROR_NONE)
 8002974:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002978:	2b00      	cmp	r3, #0
 800297a:	d002      	beq.n	8002982 <VL53LX_SetUserROI+0x32>
		return VL53LX_ERROR_INVALID_PARAMS;
 800297c:	f06f 0303 	mvn.w	r3, #3
 8002980:	e050      	b.n	8002a24 <VL53LX_SetUserROI+0xd4>

	x_centre = (pRoi->BotRightX + pRoi->TopLeftX  + 1) / 2;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	789b      	ldrb	r3, [r3, #2]
 8002986:	461a      	mov	r2, r3
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	4413      	add	r3, r2
 800298e:	3301      	adds	r3, #1
 8002990:	0fda      	lsrs	r2, r3, #31
 8002992:	4413      	add	r3, r2
 8002994:	105b      	asrs	r3, r3, #1
 8002996:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	y_centre = (pRoi->TopLeftY  + pRoi->BotRightY + 1) / 2;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	785b      	ldrb	r3, [r3, #1]
 800299e:	461a      	mov	r2, r3
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	78db      	ldrb	r3, [r3, #3]
 80029a4:	4413      	add	r3, r2
 80029a6:	3301      	adds	r3, #1
 80029a8:	0fda      	lsrs	r2, r3, #31
 80029aa:	4413      	add	r3, r2
 80029ac:	105b      	asrs	r3, r3, #1
 80029ae:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	width =    (pRoi->BotRightX - pRoi->TopLeftX);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	789a      	ldrb	r2, [r3, #2]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	height =   (pRoi->TopLeftY  - pRoi->BotRightY);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	785a      	ldrb	r2, [r3, #1]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	78db      	ldrb	r3, [r3, #3]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	zone_cfg.max_zones = 1;
 80029ce:	2301      	movs	r3, #1
 80029d0:	733b      	strb	r3, [r7, #12]
	zone_cfg.active_zones = 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	737b      	strb	r3, [r7, #13]
	zone_cfg.user_zones[0].x_centre = x_centre;
 80029d6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80029da:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	zone_cfg.user_zones[0].y_centre = y_centre;
 80029de:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80029e2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	zone_cfg.user_zones[0].width = width;
 80029e6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80029ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	zone_cfg.user_zones[0].height = height;
 80029ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80029f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if ((width < 3) || (height < 3))
 80029f6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d903      	bls.n	8002a06 <VL53LX_SetUserROI+0xb6>
 80029fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d803      	bhi.n	8002a0e <VL53LX_SetUserROI+0xbe>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8002a06:	23fc      	movs	r3, #252	; 0xfc
 8002a08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002a0c:	e008      	b.n	8002a20 <VL53LX_SetUserROI+0xd0>
	else
		Status =  VL53LX_set_zone_config(Dev, &zone_cfg);
 8002a0e:	f107 030c 	add.w	r3, r7, #12
 8002a12:	4619      	mov	r1, r3
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f001 fe68 	bl	80046ea <VL53LX_set_zone_config>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	LOG_FUNCTION_END(Status);
	return Status;
 8002a20:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3748      	adds	r7, #72	; 0x48
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <VL53LX_StartMeasurement>:




VL53LX_Error VL53LX_StartMeasurement(VL53LX_DEV Dev)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002a34:	2300      	movs	r3, #0
 8002a36:	75fb      	strb	r3, [r7, #23]
	uint8_t DeviceMeasurementMode;
	uint8_t i;
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3318      	adds	r3, #24
 8002a3c:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	VL53LX_load_patch(Dev);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f001 f90c 	bl	8003c5c <VL53LX_load_patch>
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8002a44:	2300      	movs	r3, #0
 8002a46:	75bb      	strb	r3, [r7, #22]
 8002a48:	e01a      	b.n	8002a80 <VL53LX_StartMeasurement+0x54>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8002a4a:	7dbb      	ldrb	r3, [r7, #22]
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8002a52:	3308      	adds	r3, #8
 8002a54:	2100      	movs	r1, #0
 8002a56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8002a5a:	7dbb      	ldrb	r3, [r7, #22]
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002a64:	3318      	adds	r3, #24
 8002a66:	22ff      	movs	r2, #255	; 0xff
 8002a68:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8002a6a:	7dbb      	ldrb	r3, [r7, #22]
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002a74:	331c      	adds	r3, #28
 8002a76:	2200      	movs	r2, #0
 8002a78:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8002a7a:	7dbb      	ldrb	r3, [r7, #22]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	75bb      	strb	r3, [r7, #22]
 8002a80:	7dbb      	ldrb	r3, [r7, #22]
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d9e1      	bls.n	8002a4a <VL53LX_StartMeasurement+0x1e>
	}
	pdev->PreviousStreamCount = 0;
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002a8c:	3321      	adds	r3, #33	; 0x21
 8002a8e:	2200      	movs	r2, #0
 8002a90:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = 0;
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002a98:	3320      	adds	r3, #32
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	7edb      	ldrb	r3, [r3, #27]
 8002aa2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53LX_ERROR_NONE)
 8002aa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d107      	bne.n	8002abc <VL53LX_StartMeasurement+0x90>
		Status = VL53LX_init_and_start_range(
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
 8002aae:	2206      	movs	r2, #6
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f001 ff80 	bl	80049b8 <VL53LX_init_and_start_range>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53LX_DEVICECONFIGLEVEL_FULL);

	LOG_FUNCTION_END(Status);
	return Status;
 8002abc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <VL53LX_StopMeasurement>:

VL53LX_Error VL53LX_StopMeasurement(VL53LX_DEV Dev)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_stop_range(Dev);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f002 f9f9 	bl	8004ecc <VL53LX_stop_range>
 8002ada:	4603      	mov	r3, r0
 8002adc:	73fb      	strb	r3, [r7, #15]

	VL53LX_unload_patch(Dev);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f001 f9ac 	bl	8003e3c <VL53LX_unload_patch>

	LOG_FUNCTION_END(Status);
	return Status;
 8002ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <VL53LX_ClearInterruptAndStartMeasurement>:


VL53LX_Error VL53LX_ClearInterruptAndStartMeasurement(VL53LX_DEV Dev)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002af8:	2300      	movs	r3, #0
 8002afa:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	7edb      	ldrb	r3, [r3, #27]
 8002b00:	73bb      	strb	r3, [r7, #14]

	Status = VL53LX_clear_interrupt_and_enable_next_range(Dev,
 8002b02:	7bbb      	ldrb	r3, [r7, #14]
 8002b04:	4619      	mov	r1, r3
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f002 fedc 	bl	80058c4 <VL53LX_clear_interrupt_and_enable_next_range>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8002b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <VL53LX_GetMeasurementDataReady>:


VL53LX_Error VL53LX_GetMeasurementDataReady(VL53LX_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002b26:	2300      	movs	r3, #0
 8002b28:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_is_new_data_ready(Dev, pMeasurementDataReady);
 8002b2a:	6839      	ldr	r1, [r7, #0]
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f00e fa7a 	bl	8011026 <VL53LX_is_new_data_ready>
 8002b32:	4603      	mov	r3, r0
 8002b34:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8002b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
	...

08002b44 <ConvertStatusHisto>:
	LOG_FUNCTION_END(Status);
	return Status;
}

static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	3b05      	subs	r3, #5
 8002b52:	2b12      	cmp	r3, #18
 8002b54:	d840      	bhi.n	8002bd8 <ConvertStatusHisto+0x94>
 8002b56:	a201      	add	r2, pc, #4	; (adr r2, 8002b5c <ConvertStatusHisto+0x18>)
 8002b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5c:	08002ba9 	.word	0x08002ba9
 8002b60:	08002baf 	.word	0x08002baf
 8002b64:	08002bbb 	.word	0x08002bbb
 8002b68:	08002bd9 	.word	0x08002bd9
 8002b6c:	08002bd3 	.word	0x08002bd3
 8002b70:	08002bd9 	.word	0x08002bd9
 8002b74:	08002bd9 	.word	0x08002bd9
 8002b78:	08002bd9 	.word	0x08002bd9
 8002b7c:	08002bd9 	.word	0x08002bd9
 8002b80:	08002bd9 	.word	0x08002bd9
 8002b84:	08002bd9 	.word	0x08002bd9
 8002b88:	08002bd9 	.word	0x08002bd9
 8002b8c:	08002bd9 	.word	0x08002bd9
 8002b90:	08002bd9 	.word	0x08002bd9
 8002b94:	08002bb5 	.word	0x08002bb5
 8002b98:	08002bc7 	.word	0x08002bc7
 8002b9c:	08002bd9 	.word	0x08002bd9
 8002ba0:	08002bcd 	.word	0x08002bcd
 8002ba4:	08002bc1 	.word	0x08002bc1
	case VL53LX_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8002ba8:	2304      	movs	r3, #4
 8002baa:	73fb      	strb	r3, [r7, #15]
		break;
 8002bac:	e016      	b.n	8002bdc <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53LX_RANGESTATUS_SIGMA_FAIL;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	73fb      	strb	r3, [r7, #15]
		break;
 8002bb2:	e013      	b.n	8002bdc <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus =
 8002bb4:	2306      	movs	r3, #6
 8002bb6:	73fb      	strb	r3, [r7, #15]
			VL53LX_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
		break;
 8002bb8:	e010      	b.n	8002bdc <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 8002bba:	2307      	movs	r3, #7
 8002bbc:	73fb      	strb	r3, [r7, #15]
		break;
 8002bbe:	e00d      	b.n	8002bdc <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53LX_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 8002bc0:	230c      	movs	r3, #12
 8002bc2:	73fb      	strb	r3, [r7, #15]
		break;
 8002bc4:	e00a      	b.n	8002bdc <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 8002bc6:	2307      	movs	r3, #7
 8002bc8:	73fb      	strb	r3, [r7, #15]
		break;
 8002bca:	e007      	b.n	8002bdc <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 8002bcc:	230b      	movs	r3, #11
 8002bce:	73fb      	strb	r3, [r7, #15]
		break;
 8002bd0:	e004      	b.n	8002bdc <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	73fb      	strb	r3, [r7, #15]
		break;
 8002bd6:	e001      	b.n	8002bdc <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53LX_RANGESTATUS_NONE;
 8002bd8:	23ff      	movs	r3, #255	; 0xff
 8002bda:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop

08002bec <SetTargetData>:

static VL53LX_Error SetTargetData(VL53LX_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53LX_range_data_t *presults_data,
	VL53LX_TargetRangeData_t *pRangeData)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08e      	sub	sp, #56	; 0x38
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	4608      	mov	r0, r1
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	70fb      	strb	r3, [r7, #3]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	70bb      	strb	r3, [r7, #2]
 8002c02:	4613      	mov	r3, r2
 8002c04:	707b      	strb	r3, [r7, #1]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	VL53LX_LLDriverData_t *pdev =
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3318      	adds	r3, #24
 8002c10:	62fb      	str	r3, [r7, #44]	; 0x2c
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_tuning_parm_storage_t *tp =
 8002c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c14:	33f8      	adds	r3, #248	; 0xf8
 8002c16:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t FilteredRangeStatus;
	FixPoint1616_t AmbientRate;
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60fb      	str	r3, [r7, #12]
	uint8_t uwr_status;
	int16_t AddOffset;

	SUPPRESS_UNUSED_WARNING(Dev);

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8002c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c1e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8002c22:	f003 031f 	and.w	r3, r3, #31
 8002c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	SignalRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8002c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c2c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002c2e:	025b      	lsls	r3, r3, #9
 8002c30:	623b      	str	r3, [r7, #32]
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8002c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c34:	6a3a      	ldr	r2, [r7, #32]
 8002c36:	605a      	str	r2, [r3, #4]

	AmbientRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8002c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c3a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002c3c:	025b      	lsls	r3, r3, #9
 8002c3e:	61fb      	str	r3, [r7, #28]
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8002c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c42:	69fa      	ldr	r2, [r7, #28]
 8002c44:	609a      	str	r2, [r3, #8]

	TempFix1616 = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8002c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c48:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002c4a:	025b      	lsls	r3, r3, #9
 8002c4c:	61bb      	str	r3, [r7, #24]
			presults_data->VL53LX_p_002);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8002c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	60da      	str	r2, [r3, #12]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8002c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c56:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8002c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c5c:	821a      	strh	r2, [r3, #16]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 8002c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c60:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8002c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c66:	801a      	strh	r2, [r3, #0]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 8002c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c6a:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 8002c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c70:	805a      	strh	r2, [r3, #2]


	switch (device_status) {
 8002c72:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002c76:	2b11      	cmp	r3, #17
 8002c78:	d009      	beq.n	8002c8e <SetTargetData+0xa2>
 8002c7a:	2b11      	cmp	r3, #17
 8002c7c:	dc0f      	bgt.n	8002c9e <SetTargetData+0xb2>
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	dc02      	bgt.n	8002c88 <SetTargetData+0x9c>
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	dc03      	bgt.n	8002c8e <SetTargetData+0xa2>
 8002c86:	e00a      	b.n	8002c9e <SetTargetData+0xb2>
 8002c88:	2b0d      	cmp	r3, #13
 8002c8a:	d004      	beq.n	8002c96 <SetTargetData+0xaa>
 8002c8c:	e007      	b.n	8002c9e <SetTargetData+0xb2>
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_HARDWARE_FAIL;
 8002c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c90:	2205      	movs	r2, #5
 8002c92:	749a      	strb	r2, [r3, #18]
		break;
 8002c94:	e006      	b.n	8002ca4 <SetTargetData+0xb8>
	case VL53LX_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_MIN_RANGE_FAIL;
 8002c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c98:	220d      	movs	r2, #13
 8002c9a:	749a      	strb	r2, [r3, #18]
		break;
 8002c9c:	e002      	b.n	8002ca4 <SetTargetData+0xb8>
	default:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_RANGE_VALID;
 8002c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	749a      	strb	r2, [r3, #18]
	}


	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8002ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ca6:	7c9b      	ldrb	r3, [r3, #18]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d117      	bne.n	8002cdc <SetTargetData+0xf0>
 8002cac:	78fb      	ldrb	r3, [r7, #3]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d114      	bne.n	8002cdc <SetTargetData+0xf0>
		(active_results == 0)) {
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_NONE;
 8002cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cb4:	22ff      	movs	r2, #255	; 0xff
 8002cb6:	749a      	strb	r2, [r3, #18]
		pRangeData->SignalRateRtnMegaCps = 0;
 8002cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cba:	2200      	movs	r2, #0
 8002cbc:	605a      	str	r2, [r3, #4]
		pRangeData->SigmaMilliMeter = 0;
 8002cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	60da      	str	r2, [r3, #12]
		pRangeData->RangeMilliMeter = 8191;
 8002cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cc6:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002cca:	821a      	strh	r2, [r3, #16]
		pRangeData->RangeMaxMilliMeter = 8191;
 8002ccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cce:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002cd2:	801a      	strh	r2, [r3, #0]
		pRangeData->RangeMinMilliMeter = 8191;
 8002cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cd6:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002cda:	805a      	strh	r2, [r3, #2]
	}


	if (pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID)
 8002cdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cde:	7c9b      	ldrb	r3, [r3, #18]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d108      	bne.n	8002cf6 <SetTargetData+0x10a>
		pRangeData->RangeStatus =
			ConvertStatusHisto(FilteredRangeStatus);
 8002ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff ff2b 	bl	8002b44 <ConvertStatusHisto>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	461a      	mov	r2, r3
		pRangeData->RangeStatus =
 8002cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cf4:	749a      	strb	r2, [r3, #18]



	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_UWR_ENABLE,
 8002cf6:	f107 030c 	add.w	r3, r7, #12
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f248 0191 	movw	r1, #32913	; 0x8091
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f003 fa37 	bl	8006174 <VL53LX_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 8002d06:	78bb      	ldrb	r3, [r7, #2]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	75fb      	strb	r3, [r7, #23]
	uwr_status = 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 8002d14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d16:	8a1b      	ldrh	r3, [r3, #16]
 8002d18:	82bb      	strh	r3, [r7, #20]
	AddOffset = 0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	86bb      	strh	r3, [r7, #52]	; 0x34

	pRangeData->ExtendedRange = 0;
 8002d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d20:	2200      	movs	r2, #0
 8002d22:	74da      	strb	r2, [r3, #19]

	if ((active_results != 1) ||
 8002d24:	78fb      	ldrb	r3, [r7, #3]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d106      	bne.n	8002d38 <SetTargetData+0x14c>
		(pdev->PreviousRangeActiveResults != 1))
 8002d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002d30:	3320      	adds	r3, #32
 8002d32:	781b      	ldrb	r3, [r3, #0]
	if ((active_results != 1) ||
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d001      	beq.n	8002d3c <SetTargetData+0x150>
		ExtendedRangeEnabled = 0;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 81dc 	beq.w	80030fc <SetTargetData+0x510>
		(pRangeData->RangeStatus ==
 8002d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d46:	7c9b      	ldrb	r3, [r3, #18]
	if (ExtendedRangeEnabled &&
 8002d48:	2b07      	cmp	r3, #7
 8002d4a:	d004      	beq.n	8002d56 <SetTargetData+0x16a>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 8002d4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d4e:	7c9b      	ldrb	r3, [r3, #18]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	f040 81d3 	bne.w	80030fc <SetTargetData+0x510>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 8002d56:	787b      	ldrb	r3, [r7, #1]
 8002d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002d60:	3318      	adds	r3, #24
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b07      	cmp	r3, #7
 8002d66:	d01c      	beq.n	8002da2 <SetTargetData+0x1b6>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 8002d68:	787b      	ldrb	r3, [r7, #1]
 8002d6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002d72:	3318      	adds	r3, #24
 8002d74:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d013      	beq.n	8002da2 <SetTargetData+0x1b6>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 8002d7a:	787b      	ldrb	r3, [r7, #1]
 8002d7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d7e:	4413      	add	r3, r2
 8002d80:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002d84:	3318      	adds	r3, #24
 8002d86:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f040 81b7 	bne.w	80030fc <SetTargetData+0x510>
			VL53LX_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 8002d8e:	787b      	ldrb	r3, [r7, #1]
 8002d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002d98:	331c      	adds	r3, #28
 8002d9a:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_RANGE_VALID &&
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	f040 81ad 	bne.w	80030fc <SetTargetData+0x510>
	{
		if (((pdev->PreviousStreamCount) ==
 8002da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da4:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002da8:	3321      	adds	r3, #33	; 0x21
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 8002dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db0:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 8002db4:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d00c      	beq.n	8002dd4 <SetTargetData+0x1e8>
		|| ((pdev->PreviousStreamCount) ==
 8002dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dbc:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002dc0:	3321      	adds	r3, #33	; 0x21
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 8002dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc8:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 8002dcc:	337f      	adds	r3, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	f040 816b 	bne.w	80030aa <SetTargetData+0x4be>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 8002dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dd6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002dda:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 8002ddc:	787b      	ldrb	r3, [r7, #1]
 8002dde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002de0:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8002de4:	3308      	adds	r3, #8
 8002de6:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002dea:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	827b      	strh	r3, [r7, #18]

		uwr_status = 1;
 8002df2:	2301      	movs	r3, #1
 8002df4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		switch (pdev->preset_mode) {
 8002df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfa:	785b      	ldrb	r3, [r3, #1]
 8002dfc:	2b21      	cmp	r3, #33	; 0x21
 8002dfe:	d008      	beq.n	8002e12 <SetTargetData+0x226>
 8002e00:	2b21      	cmp	r3, #33	; 0x21
 8002e02:	f300 814e 	bgt.w	80030a2 <SetTargetData+0x4b6>
 8002e06:	2b1b      	cmp	r3, #27
 8002e08:	f000 80d7 	beq.w	8002fba <SetTargetData+0x3ce>
 8002e0c:	2b1e      	cmp	r3, #30
 8002e0e:	d004      	beq.n	8002e1a <SetTargetData+0x22e>
 8002e10:	e147      	b.n	80030a2 <SetTargetData+0x4b6>
			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 8002e12:	2300      	movs	r3, #0
 8002e14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8002e18:	e148      	b.n	80030ac <SetTargetData+0x4c0>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8002e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1c:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8002e20:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	dd0e      	ble.n	8002e46 <SetTargetData+0x25a>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8002e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2a:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8002e2e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	da07      	bge.n	8002e46 <SetTargetData+0x25a>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8002e36:	7dfb      	ldrb	r3, [r7, #23]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d104      	bne.n	8002e46 <SetTargetData+0x25a>
					sequency == 1) {
					AddOffset =
 8002e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8002e42:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002e44:	e0b8      	b.n	8002fb8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8002e46:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4c:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8002e50:	425b      	negs	r3, r3
 8002e52:	429a      	cmp	r2, r3
 8002e54:	da0f      	bge.n	8002e76 <SetTargetData+0x28a>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8002e56:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5c:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 8002e60:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8002e62:	429a      	cmp	r2, r3
 8002e64:	dd07      	ble.n	8002e76 <SetTargetData+0x28a>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8002e66:	7dfb      	ldrb	r3, [r7, #23]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d104      	bne.n	8002e76 <SetTargetData+0x28a>
					sequency == 0) {
					AddOffset =
 8002e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6e:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8002e72:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002e74:	e0a0      	b.n	8002fb8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8002e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e78:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8002e7c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	dd0e      	ble.n	8002ea2 <SetTargetData+0x2b6>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8002e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e86:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8002e8a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	da07      	bge.n	8002ea2 <SetTargetData+0x2b6>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8002e92:	7dfb      	ldrb	r3, [r7, #23]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d104      	bne.n	8002ea2 <SetTargetData+0x2b6>
					sequency == 0) {
					AddOffset =
 8002e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9a:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8002e9e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002ea0:	e08a      	b.n	8002fb8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8002ea2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea8:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8002eac:	425b      	negs	r3, r3
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	da0f      	bge.n	8002ed2 <SetTargetData+0x2e6>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8002eb2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb8:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8002ebc:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	dd07      	ble.n	8002ed2 <SetTargetData+0x2e6>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8002ec2:	7dfb      	ldrb	r3, [r7, #23]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d104      	bne.n	8002ed2 <SetTargetData+0x2e6>
					sequency == 1) {
					AddOffset =
 8002ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eca:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002ece:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002ed0:	e072      	b.n	8002fb8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8002ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed4:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8002ed8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	dd0e      	ble.n	8002efe <SetTargetData+0x312>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8002ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee2:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8002ee6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	da07      	bge.n	8002efe <SetTargetData+0x312>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8002eee:	7dfb      	ldrb	r3, [r7, #23]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d104      	bne.n	8002efe <SetTargetData+0x312>
					sequency == 1) {
					AddOffset =
 8002ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8002efa:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002efc:	e05c      	b.n	8002fb8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8002efe:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f04:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8002f08:	425b      	negs	r3, r3
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	da0f      	bge.n	8002f2e <SetTargetData+0x342>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8002f0e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f14:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 8002f18:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	dd07      	ble.n	8002f2e <SetTargetData+0x342>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8002f1e:	7dfb      	ldrb	r3, [r7, #23]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d104      	bne.n	8002f2e <SetTargetData+0x342>
					sequency == 0) {
					AddOffset =
 8002f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f26:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8002f2a:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002f2c:	e044      	b.n	8002fb8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8002f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f30:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8002f34:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	dd0e      	ble.n	8002f5a <SetTargetData+0x36e>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8002f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3e:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8002f42:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	da07      	bge.n	8002f5a <SetTargetData+0x36e>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8002f4a:	7dfb      	ldrb	r3, [r7, #23]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d104      	bne.n	8002f5a <SetTargetData+0x36e>
					sequency == 0) {
					AddOffset =
 8002f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f52:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8002f56:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002f58:	e02e      	b.n	8002fb8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8002f5a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f60:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8002f64:	425b      	negs	r3, r3
 8002f66:	429a      	cmp	r2, r3
 8002f68:	da0f      	bge.n	8002f8a <SetTargetData+0x39e>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8002f6a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f70:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 8002f74:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8002f76:	429a      	cmp	r2, r3
 8002f78:	dd07      	ble.n	8002f8a <SetTargetData+0x39e>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8002f7a:	7dfb      	ldrb	r3, [r7, #23]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d104      	bne.n	8002f8a <SetTargetData+0x39e>
					sequency == 1) {
					AddOffset =
 8002f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f82:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8002f86:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002f88:	e016      	b.n	8002fb8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8002f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8c:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 8002f90:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	da0b      	bge.n	8002fb0 <SetTargetData+0x3c4>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 8002f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9a:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8002f9e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	dd04      	ble.n	8002fb0 <SetTargetData+0x3c4>
					AddOffset =
 8002fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa8:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8002fac:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002fae:	e003      	b.n	8002fb8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_5_rangea;
				} else
					uwr_status = 0;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8002fb6:	e079      	b.n	80030ac <SetTargetData+0x4c0>
 8002fb8:	e078      	b.n	80030ac <SetTargetData+0x4c0>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8002fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbc:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 8002fc0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	dd0e      	ble.n	8002fe6 <SetTargetData+0x3fa>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8002fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fca:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8002fce:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	da07      	bge.n	8002fe6 <SetTargetData+0x3fa>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8002fd6:	7dfb      	ldrb	r3, [r7, #23]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d104      	bne.n	8002fe6 <SetTargetData+0x3fa>
					sequency == 0) {
					AddOffset =
 8002fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fde:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 8002fe2:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002fe4:	e05c      	b.n	80030a0 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8002fe6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fec:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 8002ff0:	425b      	negs	r3, r3
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	da0f      	bge.n	8003016 <SetTargetData+0x42a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8002ff6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffc:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
 8003000:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8003002:	429a      	cmp	r2, r3
 8003004:	dd07      	ble.n	8003016 <SetTargetData+0x42a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8003006:	7dfb      	ldrb	r3, [r7, #23]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d104      	bne.n	8003016 <SetTargetData+0x42a>
					sequency == 1) {
					AddOffset =
 800300c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300e:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8003012:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003014:	e044      	b.n	80030a0 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8003016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003018:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 800301c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003020:	429a      	cmp	r2, r3
 8003022:	dd0e      	ble.n	8003042 <SetTargetData+0x456>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8003024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003026:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 800302a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800302e:	429a      	cmp	r2, r3
 8003030:	da07      	bge.n	8003042 <SetTargetData+0x456>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8003032:	7dfb      	ldrb	r3, [r7, #23]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d104      	bne.n	8003042 <SetTargetData+0x456>
					sequency == 1) {
					AddOffset =
 8003038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303a:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800303e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003040:	e02e      	b.n	80030a0 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8003042:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003048:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 800304c:	425b      	negs	r3, r3
 800304e:	429a      	cmp	r2, r3
 8003050:	da0f      	bge.n	8003072 <SetTargetData+0x486>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8003052:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003058:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
 800305c:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 800305e:	429a      	cmp	r2, r3
 8003060:	dd07      	ble.n	8003072 <SetTargetData+0x486>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8003062:	7dfb      	ldrb	r3, [r7, #23]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d104      	bne.n	8003072 <SetTargetData+0x486>
					sequency == 0) {
					AddOffset =
 8003068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306a:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	; 0xce
 800306e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003070:	e016      	b.n	80030a0 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8003072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003074:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8003078:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800307c:	429a      	cmp	r2, r3
 800307e:	da0b      	bge.n	8003098 <SetTargetData+0x4ac>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 8003080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003082:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8003086:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800308a:	429a      	cmp	r2, r3
 800308c:	dd04      	ble.n	8003098 <SetTargetData+0x4ac>
					AddOffset =
 800308e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003090:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8003094:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003096:	e003      	b.n	80030a0 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
					uwr_status = 0;
 8003098:	2300      	movs	r3, #0
 800309a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 800309e:	e005      	b.n	80030ac <SetTargetData+0x4c0>
 80030a0:	e004      	b.n	80030ac <SetTargetData+0x4c0>

			default:
				uwr_status = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 80030a8:	e000      	b.n	80030ac <SetTargetData+0x4c0>
			}
		}
 80030aa:	bf00      	nop

		if (uwr_status) {
 80030ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d023      	beq.n	80030fc <SetTargetData+0x510>
			pRangeData->RangeMilliMeter += AddOffset;
 80030b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030b6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80030be:	4413      	add	r3, r2
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	b21a      	sxth	r2, r3
 80030c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030c6:	821a      	strh	r2, [r3, #16]
			pRangeData->RangeMinMilliMeter += AddOffset;
 80030c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80030d2:	4413      	add	r3, r2
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	b21a      	sxth	r2, r3
 80030d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030da:	805a      	strh	r2, [r3, #2]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 80030dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80030e6:	4413      	add	r3, r2
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	b21a      	sxth	r2, r3
 80030ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ee:	801a      	strh	r2, [r3, #0]
			pRangeData->ExtendedRange = 1;
 80030f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030f2:	2201      	movs	r2, #1
 80030f4:	74da      	strb	r2, [r3, #19]
			pRangeData->RangeStatus = 0;
 80030f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030f8:	2200      	movs	r2, #0
 80030fa:	749a      	strb	r2, [r3, #18]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 80030fc:	787b      	ldrb	r3, [r7, #1]
 80030fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003100:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8003104:	3308      	adds	r3, #8
 8003106:	8ab9      	ldrh	r1, [r7, #20]
 8003108:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 800310c:	787b      	ldrb	r3, [r7, #1]
 800310e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003110:	7c91      	ldrb	r1, [r2, #18]
 8003112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003114:	4413      	add	r3, r2
 8003116:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800311a:	3318      	adds	r3, #24
 800311c:	460a      	mov	r2, r1
 800311e:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 8003120:	787b      	ldrb	r3, [r7, #1]
 8003122:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003124:	7cd1      	ldrb	r1, [r2, #19]
 8003126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003128:	4413      	add	r3, r2
 800312a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800312e:	331c      	adds	r3, #28
 8003130:	460a      	mov	r2, r1
 8003132:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 8003134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003136:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800313a:	3320      	adds	r3, #32
 800313c:	78fa      	ldrb	r2, [r7, #3]
 800313e:	701a      	strb	r2, [r3, #0]

	Range = pRangeData->RangeMilliMeter;
 8003140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003142:	8a1b      	ldrh	r3, [r3, #16]
 8003144:	823b      	strh	r3, [r7, #16]
	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8003146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003148:	7c9b      	ldrb	r3, [r3, #18]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d110      	bne.n	8003170 <SetTargetData+0x584>
 800314e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003152:	2b00      	cmp	r3, #0
 8003154:	da0c      	bge.n	8003170 <SetTargetData+0x584>
		(Range < 0)) {
		if (Range < BDTable[VL53LX_TUNING_PROXY_MIN])
 8003156:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800315a:	4b08      	ldr	r3, [pc, #32]	; (800317c <SetTargetData+0x590>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	429a      	cmp	r2, r3
 8003160:	da03      	bge.n	800316a <SetTargetData+0x57e>
			pRangeData->RangeStatus =
 8003162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003164:	220e      	movs	r2, #14
 8003166:	749a      	strb	r2, [r3, #18]
 8003168:	e002      	b.n	8003170 <SetTargetData+0x584>
					 VL53LX_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 800316a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800316c:	2200      	movs	r2, #0
 800316e:	821a      	strh	r2, [r3, #16]
	}

	return Status;
 8003170:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
}
 8003174:	4618      	mov	r0, r3
 8003176:	3738      	adds	r7, #56	; 0x38
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	2000001c 	.word	0x2000001c

08003180 <SetMeasurementData>:


static VL53LX_Error SetMeasurementData(VL53LX_DEV Dev,
	VL53LX_range_results_t *presults,
	VL53LX_MultiRangingData_t *pMultiRangingData)
{
 8003180:	b590      	push	{r4, r7, lr}
 8003182:	b08f      	sub	sp, #60	; 0x3c
 8003184:	af04      	add	r7, sp, #16
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	3318      	adds	r3, #24
 8003190:	623b      	str	r3, [r7, #32]
	uint8_t i;
	uint8_t iteration;
	VL53LX_TargetRangeData_t *pRangeData;
	VL53LX_range_data_t *presults_data;
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8003192:	2300      	movs	r3, #0
 8003194:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t ActiveResults;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	7c9a      	ldrb	r2, [r3, #18]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
	pMultiRangingData->HasXtalkValueChanged =
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58


	pMultiRangingData->TimeStamp = 0;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	78da      	ldrb	r2, [r3, #3]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	711a      	strb	r2, [r3, #4]

	ActiveResults = presults->active_results;
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	7c9b      	ldrb	r3, [r3, #18]
 80031be:	77fb      	strb	r3, [r7, #31]
	if (ActiveResults < 1)
 80031c0:	7ffb      	ldrb	r3, [r7, #31]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d103      	bne.n	80031ce <SetMeasurementData+0x4e>

		iteration = 1;
 80031c6:	2301      	movs	r3, #1
 80031c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80031cc:	e002      	b.n	80031d4 <SetMeasurementData+0x54>
	else
		iteration = ActiveResults;
 80031ce:	7ffb      	ldrb	r3, [r7, #31]
 80031d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for (i = 0; i < iteration; i++) {
 80031d4:	2300      	movs	r3, #0
 80031d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80031da:	e035      	b.n	8003248 <SetMeasurementData+0xc8>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 80031dc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	3308      	adds	r3, #8
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	4413      	add	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]

		presults_data = &(presults->VL53LX_p_003[i]);
 80031f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031f4:	224c      	movs	r2, #76	; 0x4c
 80031f6:	fb02 f303 	mul.w	r3, r2, r3
 80031fa:	3310      	adds	r3, #16
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	4413      	add	r3, r2
 8003200:	3304      	adds	r3, #4
 8003202:	617b      	str	r3, [r7, #20]
		if (Status == VL53LX_ERROR_NONE)
 8003204:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8003208:	2b00      	cmp	r3, #0
 800320a:	d113      	bne.n	8003234 <SetMeasurementData+0xb4>
			Status = SetTargetData(Dev, ActiveResults,
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	7918      	ldrb	r0, [r3, #4]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	7c1b      	ldrb	r3, [r3, #16]
 8003214:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8003218:	7ff9      	ldrb	r1, [r7, #31]
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	9202      	str	r2, [sp, #8]
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	9201      	str	r2, [sp, #4]
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	4623      	mov	r3, r4
 8003226:	4602      	mov	r2, r0
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f7ff fcdf 	bl	8002bec <SetTargetData>
 800322e:	4603      	mov	r3, r0
 8003230:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53LX_p_004;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	for (i = 0; i < iteration; i++) {
 800323e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003242:	3301      	adds	r3, #1
 8003244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003248:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800324c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003250:	429a      	cmp	r2, r3
 8003252:	d3c3      	bcc.n	80031dc <SetMeasurementData+0x5c>

	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	f893 243f 	ldrb.w	r2, [r3, #1087]	; 0x43f
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003260:	3321      	adds	r3, #33	; 0x21
 8003262:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8003264:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800326c:	e01f      	b.n	80032ae <SetMeasurementData+0x12e>
		pdev->PreviousRangeMilliMeter[i] = 0;
 800326e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003272:	6a3a      	ldr	r2, [r7, #32]
 8003274:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8003278:	3308      	adds	r3, #8
 800327a:	2100      	movs	r1, #0
 800327c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8003280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003284:	6a3a      	ldr	r2, [r7, #32]
 8003286:	4413      	add	r3, r2
 8003288:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800328c:	3318      	adds	r3, #24
 800328e:	22ff      	movs	r2, #255	; 0xff
 8003290:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8003292:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003296:	6a3a      	ldr	r2, [r7, #32]
 8003298:	4413      	add	r3, r2
 800329a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800329e:	331c      	adds	r3, #28
 80032a0:	2200      	movs	r2, #0
 80032a2:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 80032a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032a8:	3301      	adds	r3, #1
 80032aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80032ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d9db      	bls.n	800326e <SetMeasurementData+0xee>
	}

	return Status;
 80032b6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	372c      	adds	r7, #44	; 0x2c
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd90      	pop	{r4, r7, pc}

080032c2 <VL53LX_GetMultiRangingData>:


VL53LX_Error VL53LX_GetMultiRangingData(VL53LX_DEV Dev,
		VL53LX_MultiRangingData_t *pMultiRangingData)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b086      	sub	sp, #24
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80032cc:	2300      	movs	r3, #0
 80032ce:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3318      	adds	r3, #24
 80032d4:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_range_results_t *presults =
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80032dc:	60fb      	str	r3, [r7, #12]
			(VL53LX_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 80032de:	225c      	movs	r2, #92	; 0x5c
 80032e0:	21ff      	movs	r1, #255	; 0xff
 80032e2:	6838      	ldr	r0, [r7, #0]
 80032e4:	f011 fc8c 	bl	8014c00 <memset>
		sizeof(VL53LX_MultiRangingData_t));


	Status = VL53LX_get_device_results(
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	2102      	movs	r1, #2
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f001 fee7 	bl	80050c0 <VL53LX_get_device_results>
 80032f2:	4603      	mov	r3, r0
 80032f4:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_DEVICERESULTSLEVEL_FULL,
				presults);

	Status = SetMeasurementData(Dev,
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	68f9      	ldr	r1, [r7, #12]
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7ff ff40 	bl	8003180 <SetMeasurementData>
 8003300:	4603      	mov	r3, r0
 8003302:	75fb      	strb	r3, [r7, #23]
					presults,
					pMultiRangingData);

	LOG_FUNCTION_END(Status);
	return Status;
 8003304:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <VL53LX_PerformRefSpadManagement>:
	return Status;
}


VL53LX_Error VL53LX_PerformRefSpadManagement(VL53LX_DEV Dev)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b090      	sub	sp, #64	; 0x40
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8003318:	2300      	movs	r3, #0
 800331a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53LX_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 800331e:	f240 3305 	movw	r3, #773	; 0x305
 8003322:	81bb      	strh	r3, [r7, #12]
	VL53LX_customer_nvm_managed_t *pc;
	VL53LX_DistanceModes DistanceMode;

	LOG_FUNCTION_START("");

	pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3318      	adds	r3, #24
 8003328:	63bb      	str	r3, [r7, #56]	; 0x38
	pc = &pdev->customer;
 800332a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800332c:	3348      	adds	r3, #72	; 0x48
 800332e:	637b      	str	r3, [r7, #52]	; 0x34

	if (Status == VL53LX_ERROR_NONE) {
 8003330:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003334:	2b00      	cmp	r3, #0
 8003336:	d11c      	bne.n	8003372 <VL53LX_PerformRefSpadManagement+0x62>
		DistanceMode = VL53LXDevDataGet(Dev,
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 800333e:	3320      	adds	r3, #32
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				CurrentParameters.DistanceMode);
		Status = VL53LX_run_ref_spad_char(Dev, &RawStatus);
 8003346:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800334a:	4619      	mov	r1, r3
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f8e3 	bl	8003518 <VL53LX_run_ref_spad_char>
 8003352:	4603      	mov	r3, r0
 8003354:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53LX_ERROR_NONE)
 8003358:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800335c:	2b00      	cmp	r3, #0
 800335e:	d108      	bne.n	8003372 <VL53LX_PerformRefSpadManagement+0x62>
			Status = VL53LX_SetDistanceMode(Dev, DistanceMode);
 8003360:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003364:	4619      	mov	r1, r3
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff fa13 	bl	8002792 <VL53LX_SetDistanceMode>
 800336c:	4603      	mov	r3, r0
 800336e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	if (Status == VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 8003372:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003376:	f113 0f1d 	cmn.w	r3, #29
 800337a:	d14e      	bne.n	800341a <VL53LX_PerformRefSpadManagement+0x10a>

		Status = VL53LX_read_nvm_raw_data(Dev,
 800337c:	f107 0310 	add.w	r3, r7, #16
 8003380:	2206      	movs	r2, #6
 8003382:	2128      	movs	r1, #40	; 0x28
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f00c f991 	bl	800f6ac <VL53LX_read_nvm_raw_data>
 800338a:	4603      	mov	r3, r0
 800338c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53LX_ERROR_NONE)
 8003390:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003394:	2b00      	cmp	r3, #0
 8003396:	d109      	bne.n	80033ac <VL53LX_PerformRefSpadManagement+0x9c>
			Status = VL53LX_WriteMulti(Dev,
 8003398:	f107 020c 	add.w	r2, r7, #12
 800339c:	2302      	movs	r3, #2
 800339e:	2114      	movs	r1, #20
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f00e f9c7 	bl	8011734 <VL53LX_WriteMulti>
 80033a6:	4603      	mov	r3, r0
 80033a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53LX_ERROR_NONE) {
 80033ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d105      	bne.n	80033c0 <VL53LX_PerformRefSpadManagement+0xb0>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 80033b4:	7b3a      	ldrb	r2, [r7, #12]
 80033b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b8:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 80033ba:	7b7a      	ldrb	r2, [r7, #13]
 80033bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033be:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 80033c0:	f107 0310 	add.w	r3, r7, #16
 80033c4:	3310      	adds	r3, #16
 80033c6:	62fb      	str	r3, [r7, #44]	; 0x2c



		if (Status == VL53LX_ERROR_NONE)
 80033c8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d108      	bne.n	80033e2 <VL53LX_PerformRefSpadManagement+0xd2>
			Status = VL53LX_WriteMulti(Dev,
 80033d0:	2306      	movs	r3, #6
 80033d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033d4:	210d      	movs	r1, #13
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f00e f9ac 	bl	8011734 <VL53LX_WriteMulti>
 80033dc:	4603      	mov	r3, r0
 80033de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53LX_ERROR_NONE) {
 80033e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d117      	bne.n	800341a <VL53LX_PerformRefSpadManagement+0x10a>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 80033ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ec:	781a      	ldrb	r2, [r3, #0]
 80033ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f0:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 80033f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f4:	785a      	ldrb	r2, [r3, #1]
 80033f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f8:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 80033fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fc:	789a      	ldrb	r2, [r3, #2]
 80033fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003400:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 8003402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003404:	78da      	ldrb	r2, [r3, #3]
 8003406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003408:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 800340a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340c:	791a      	ldrb	r2, [r3, #4]
 800340e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003410:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 8003412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003414:	795a      	ldrb	r2, [r3, #5]
 8003416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003418:	715a      	strb	r2, [r3, #5]
		}

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800341a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800341e:	4618      	mov	r0, r3
 8003420:	3740      	adds	r7, #64	; 0x40
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <VL53LX_SmudgeCorrectionEnable>:


VL53LX_Error VL53LX_SmudgeCorrectionEnable(VL53LX_DEV Dev,
		VL53LX_SmudgeCorrectionModes Mode)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	460b      	mov	r3, r1
 8003432:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8003434:	2300      	movs	r3, #0
 8003436:	73fb      	strb	r3, [r7, #15]
	VL53LX_Error s1 = VL53LX_ERROR_NONE;
 8003438:	2300      	movs	r3, #0
 800343a:	73bb      	strb	r3, [r7, #14]
	VL53LX_Error s2 = VL53LX_ERROR_NONE;
 800343c:	2300      	movs	r3, #0
 800343e:	737b      	strb	r3, [r7, #13]
	VL53LX_Error s3 = VL53LX_ERROR_NONE;
 8003440:	2300      	movs	r3, #0
 8003442:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 8003444:	78fb      	ldrb	r3, [r7, #3]
 8003446:	2b03      	cmp	r3, #3
 8003448:	d84a      	bhi.n	80034e0 <VL53LX_SmudgeCorrectionEnable+0xb8>
 800344a:	a201      	add	r2, pc, #4	; (adr r2, 8003450 <VL53LX_SmudgeCorrectionEnable+0x28>)
 800344c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003450:	08003461 	.word	0x08003461
 8003454:	08003481 	.word	0x08003481
 8003458:	080034a1 	.word	0x080034a1
 800345c:	080034c1 	.word	0x080034c1
	case VL53LX_SMUDGE_CORRECTION_NONE:
		s1 = VL53LX_dynamic_xtalk_correction_disable(Dev);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f003 fd92 	bl	8006f8a <VL53LX_dynamic_xtalk_correction_disable>
 8003466:	4603      	mov	r3, r0
 8003468:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f003 fda4 	bl	8006fb8 <VL53LX_dynamic_xtalk_correction_apply_disable>
 8003470:	4603      	mov	r3, r0
 8003472:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f003 fdcd 	bl	8007014 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 800347a:	4603      	mov	r3, r0
 800347c:	733b      	strb	r3, [r7, #12]
		break;
 800347e:	e032      	b.n	80034e6 <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f003 fd6b 	bl	8006f5c <VL53LX_dynamic_xtalk_correction_enable>
 8003486:	4603      	mov	r3, r0
 8003488:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f003 fdd9 	bl	8007042 <VL53LX_dynamic_xtalk_correction_apply_enable>
 8003490:	4603      	mov	r3, r0
 8003492:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f003 fdbd 	bl	8007014 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 800349a:	4603      	mov	r3, r0
 800349c:	733b      	strb	r3, [r7, #12]
		break;
 800349e:	e022      	b.n	80034e6 <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f003 fd5b 	bl	8006f5c <VL53LX_dynamic_xtalk_correction_enable>
 80034a6:	4603      	mov	r3, r0
 80034a8:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f003 fdc9 	bl	8007042 <VL53LX_dynamic_xtalk_correction_apply_enable>
 80034b0:	4603      	mov	r3, r0
 80034b2:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_enable(Dev);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f003 fd96 	bl	8006fe6 <VL53LX_dynamic_xtalk_correction_single_apply_enable>
 80034ba:	4603      	mov	r3, r0
 80034bc:	733b      	strb	r3, [r7, #12]
		break;
 80034be:	e012      	b.n	80034e6 <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f003 fd4b 	bl	8006f5c <VL53LX_dynamic_xtalk_correction_enable>
 80034c6:	4603      	mov	r3, r0
 80034c8:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f003 fd74 	bl	8006fb8 <VL53LX_dynamic_xtalk_correction_apply_disable>
 80034d0:	4603      	mov	r3, r0
 80034d2:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f003 fd9d 	bl	8007014 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 80034da:	4603      	mov	r3, r0
 80034dc:	733b      	strb	r3, [r7, #12]
		break;
 80034de:	e002      	b.n	80034e6 <VL53LX_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53LX_ERROR_INVALID_PARAMS;
 80034e0:	23fc      	movs	r3, #252	; 0xfc
 80034e2:	73fb      	strb	r3, [r7, #15]
		break;
 80034e4:	bf00      	nop
	}

	if (Status == VL53LX_ERROR_NONE) {
 80034e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10d      	bne.n	800350a <VL53LX_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 80034ee:	7bbb      	ldrb	r3, [r7, #14]
 80034f0:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 80034f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <VL53LX_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 80034fa:	7b7b      	ldrb	r3, [r7, #13]
 80034fc:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 80034fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <VL53LX_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 8003506:	7b3b      	ldrb	r3, [r7, #12]
 8003508:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800350a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop

08003518 <VL53LX_run_ref_spad_char>:


VL53LX_Error VL53LX_run_ref_spad_char(
	VL53LX_DEV        Dev,
	VL53LX_Error     *pcal_status)
{
 8003518:	b5b0      	push	{r4, r5, r7, lr}
 800351a:	b08c      	sub	sp, #48	; 0x30
 800351c:	af04      	add	r7, sp, #16
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003522:	2300      	movs	r3, #0
 8003524:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3318      	adds	r3, #24
 800352a:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53LX_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003532:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8003534:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d104      	bne.n	8003546 <VL53LX_run_ref_spad_char+0x2e>
		status = VL53LX_enable_powerforce(Dev);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f005 fd62 	bl	8009006 <VL53LX_enable_powerforce>
 8003542:	4603      	mov	r3, r0
 8003544:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 8003546:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d117      	bne.n	800357e <VL53LX_run_ref_spad_char+0x66>
		status =
		VL53LX_set_ref_spad_char_config(
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	7858      	ldrb	r0, [r3, #1]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	685c      	ldr	r4, [r3, #4]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	891d      	ldrh	r5, [r3, #8]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	899b      	ldrh	r3, [r3, #12]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	8952      	ldrh	r2, [r2, #10]
 8003562:	69b9      	ldr	r1, [r7, #24]
 8003564:	f8b1 12de 	ldrh.w	r1, [r1, #734]	; 0x2de
 8003568:	9102      	str	r1, [sp, #8]
 800356a:	9201      	str	r2, [sp, #4]
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	462b      	mov	r3, r5
 8003570:	4622      	mov	r2, r4
 8003572:	4601      	mov	r1, r0
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f007 fb71 	bl	800ac5c <VL53LX_set_ref_spad_char_config>
 800357a:	4603      	mov	r3, r0
 800357c:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53LX_ERROR_NONE)
 800357e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d107      	bne.n	8003596 <VL53LX_run_ref_spad_char+0x7e>
		status = VL53LX_run_device_test(
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	4619      	mov	r1, r3
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f890 	bl	80036b2 <VL53LX_run_device_test>
 8003592:	4603      	mov	r3, r0
 8003594:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53LX_ERROR_NONE)
 8003596:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d108      	bne.n	80035b0 <VL53LX_run_ref_spad_char+0x98>
		status =
		VL53LX_ReadMulti(
 800359e:	f107 020c 	add.w	r2, r7, #12
 80035a2:	2302      	movs	r3, #2
 80035a4:	21d9      	movs	r1, #217	; 0xd9
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f00e f8fa 	bl	80117a0 <VL53LX_ReadMulti>
 80035ac:	4603      	mov	r3, r0
 80035ae:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53LX_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53LX_ERROR_NONE) {
 80035b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10a      	bne.n	80035ce <VL53LX_run_ref_spad_char+0xb6>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 80035b8:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 80035c0:	331f      	adds	r3, #31
 80035c2:	701a      	strb	r2, [r3, #0]
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 80035c4:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 80035cc:	701a      	strb	r2, [r3, #0]
	}



	if (status == VL53LX_ERROR_NONE)
 80035ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d108      	bne.n	80035e8 <VL53LX_run_ref_spad_char+0xd0>
		status =
			VL53LX_WriteMulti(
 80035d6:	f107 020c 	add.w	r2, r7, #12
 80035da:	2302      	movs	r3, #2
 80035dc:	2114      	movs	r1, #20
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f00e f8a8 	bl	8011734 <VL53LX_WriteMulti>
 80035e4:	4603      	mov	r3, r0
 80035e6:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 80035e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d107      	bne.n	8003600 <VL53LX_run_ref_spad_char+0xe8>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 80035f0:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 80035f8:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}



	if (status == VL53LX_ERROR_NONE)
 8003600:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d108      	bne.n	800361a <VL53LX_run_ref_spad_char+0x102>
		status =
			VL53LX_ReadMulti(
 8003608:	f107 020c 	add.w	r2, r7, #12
 800360c:	2306      	movs	r3, #6
 800360e:	21ac      	movs	r1, #172	; 0xac
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f00e f8c5 	bl	80117a0 <VL53LX_ReadMulti>
 8003616:	4603      	mov	r3, r0
 8003618:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53LX_ERROR_NONE)
 800361a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d108      	bne.n	8003634 <VL53LX_run_ref_spad_char+0x11c>
		status =
			VL53LX_WriteMulti(
 8003622:	f107 020c 	add.w	r2, r7, #12
 8003626:	2306      	movs	r3, #6
 8003628:	210d      	movs	r1, #13
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f00e f882 	bl	8011734 <VL53LX_WriteMulti>
 8003630:	4603      	mov	r3, r0
 8003632:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53LX_ERROR_NONE) {
 8003634:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d117      	bne.n	800366c <VL53LX_run_ref_spad_char+0x154>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 800363c:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 8003644:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 800364c:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 8003654:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 800365c:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 8003664:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53LX_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53LX_ERROR_NONE) {
 800366c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d114      	bne.n	800369e <VL53LX_run_ref_spad_char+0x186>

		switch (pdev->sys_results.result__range_status) {
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	f893 3367 	ldrb.w	r3, [r3, #871]	; 0x367
 800367a:	2b10      	cmp	r3, #16
 800367c:	d00c      	beq.n	8003698 <VL53LX_run_ref_spad_char+0x180>
 800367e:	2b10      	cmp	r3, #16
 8003680:	dc0e      	bgt.n	80036a0 <VL53LX_run_ref_spad_char+0x188>
 8003682:	2b0e      	cmp	r3, #14
 8003684:	d002      	beq.n	800368c <VL53LX_run_ref_spad_char+0x174>
 8003686:	2b0f      	cmp	r3, #15
 8003688:	d003      	beq.n	8003692 <VL53LX_run_ref_spad_char+0x17a>
 800368a:	e009      	b.n	80036a0 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53LX_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 800368c:	23e4      	movs	r3, #228	; 0xe4
 800368e:	77fb      	strb	r3, [r7, #31]
			break;
 8003690:	e006      	b.n	80036a0 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 8003692:	23e3      	movs	r3, #227	; 0xe3
 8003694:	77fb      	strb	r3, [r7, #31]
			break;
 8003696:	e003      	b.n	80036a0 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 8003698:	23e2      	movs	r3, #226	; 0xe2
 800369a:	77fb      	strb	r3, [r7, #31]
			break;
 800369c:	e000      	b.n	80036a0 <VL53LX_run_ref_spad_char+0x188>
		}
	}
 800369e:	bf00      	nop



	*pcal_status = status;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	7ffa      	ldrb	r2, [r7, #31]
 80036a4:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 80036a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3720      	adds	r7, #32
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bdb0      	pop	{r4, r5, r7, pc}

080036b2 <VL53LX_run_device_test>:


VL53LX_Error VL53LX_run_device_test(
	VL53LX_DEV             Dev,
	VL53LX_DeviceTestMode  device_test_mode)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b086      	sub	sp, #24
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	460b      	mov	r3, r1
 80036bc:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80036be:	2300      	movs	r3, #0
 80036c0:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3318      	adds	r3, #24
 80036c6:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 80036c8:	2300      	movs	r3, #0
 80036ca:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 80036cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d108      	bne.n	80036e6 <VL53LX_run_device_test+0x34>
		status =
			VL53LX_RdByte(
 80036d4:	f107 030b 	add.w	r3, r7, #11
 80036d8:	461a      	mov	r2, r3
 80036da:	2130      	movs	r1, #48	; 0x30
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f00e f8f1 	bl	80118c4 <VL53LX_RdByte>
 80036e2:	4603      	mov	r3, r0
 80036e4:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53LX_ERROR_NONE)
 80036e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d103      	bne.n	80036f6 <VL53LX_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 80036ee:	7afa      	ldrb	r2, [r7, #11]
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a


	if (status == VL53LX_ERROR_NONE)
 80036f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d106      	bne.n	800370c <VL53LX_run_device_test+0x5a>
		status = VL53LX_start_test(
 80036fe:	78fb      	ldrb	r3, [r7, #3]
 8003700:	4619      	mov	r1, r3
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f005 fc03 	bl	8008f0e <VL53LX_start_test>
 8003708:	4603      	mov	r3, r0
 800370a:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53LX_ERROR_NONE)
 800370c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d104      	bne.n	800371e <VL53LX_run_device_test+0x6c>
		status = VL53LX_wait_for_test_completion(Dev);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f00d fc4d 	bl	8010fb4 <VL53LX_wait_for_test_completion>
 800371a:	4603      	mov	r3, r0
 800371c:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 800371e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d108      	bne.n	8003738 <VL53LX_run_device_test+0x86>
		status =
			VL53LX_ReadMulti(
 8003726:	f107 020c 	add.w	r2, r7, #12
 800372a:	2302      	movs	r3, #2
 800372c:	2189      	movs	r1, #137	; 0x89
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f00e f836 	bl	80117a0 <VL53LX_ReadMulti>
 8003734:	4603      	mov	r3, r0
 8003736:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 8003738:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d107      	bne.n	8003750 <VL53LX_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 8003740:	7b3a      	ldrb	r2, [r7, #12]
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f883 2367 	strb.w	r2, [r3, #871]	; 0x367
		pdev->sys_results.result__report_status = comms_buffer[1];
 8003748:	7b7a      	ldrb	r2, [r7, #13]
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
	}



	pdev->sys_results.result__range_status &=
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	f893 3367 	ldrb.w	r3, [r3, #871]	; 0x367
 8003756:	f003 031f 	and.w	r3, r3, #31
 800375a:	b2da      	uxtb	r2, r3
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f883 2367 	strb.w	r2, [r3, #871]	; 0x367
		VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53LX_ERROR_NONE) {
 8003762:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d108      	bne.n	800377c <VL53LX_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53LX_ERROR_NONE)
 800376a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d104      	bne.n	800377c <VL53LX_run_device_test+0xca>
			status = VL53LX_clear_interrupt(Dev);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f005 fc6b 	bl	800904e <VL53LX_clear_interrupt>
 8003778:	4603      	mov	r3, r0
 800377a:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53LX_ERROR_NONE)
 800377c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d105      	bne.n	8003790 <VL53LX_run_device_test+0xde>
		status =
			VL53LX_start_test(
 8003784:	2100      	movs	r1, #0
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f005 fbc1 	bl	8008f0e <VL53LX_start_test>
 800378c:	4603      	mov	r3, r0
 800378e:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 8003790:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <select_offset_per_vcsel>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53LX_MAX_I2C_XFER_SIZE 256

static VL53LX_Error select_offset_per_vcsel(VL53LX_LLDriverData_t *pdev,
		int16_t *poffset) {
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 80037a6:	2300      	movs	r3, #0
 80037a8:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	785b      	ldrb	r3, [r3, #1]
 80037ae:	2b21      	cmp	r3, #33	; 0x21
 80037b0:	d006      	beq.n	80037c0 <select_offset_per_vcsel+0x24>
 80037b2:	2b21      	cmp	r3, #33	; 0x21
 80037b4:	dc2a      	bgt.n	800380c <select_offset_per_vcsel+0x70>
 80037b6:	2b1b      	cmp	r3, #27
 80037b8:	d01b      	beq.n	80037f2 <select_offset_per_vcsel+0x56>
 80037ba:	2b1e      	cmp	r3, #30
 80037bc:	d00c      	beq.n	80037d8 <select_offset_per_vcsel+0x3c>
 80037be:	e025      	b.n	800380c <select_offset_per_vcsel+0x70>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80037d0:	3302      	adds	r3, #2
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	817b      	strh	r3, [r7, #10]
		break;
 80037d6:	e02b      	b.n	8003830 <select_offset_per_vcsel+0x94>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80037de:	3304      	adds	r3, #4
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80037ea:	3306      	adds	r3, #6
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	817b      	strh	r3, [r7, #10]
		break;
 80037f0:	e01e      	b.n	8003830 <select_offset_per_vcsel+0x94>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80037f8:	3308      	adds	r3, #8
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003804:	330a      	adds	r3, #10
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	817b      	strh	r3, [r7, #10]
		break;
 800380a:	e011      	b.n	8003830 <select_offset_per_vcsel+0x94>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003812:	3308      	adds	r3, #8
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800381e:	330a      	adds	r3, #10
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	817b      	strh	r3, [r7, #10]
		status = VL53LX_ERROR_INVALID_PARAMS;
 8003824:	23fc      	movs	r3, #252	; 0xfc
 8003826:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	2200      	movs	r2, #0
 800382c:	801a      	strh	r2, [r3, #0]
		break;
 800382e:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003836:	727b      	strb	r3, [r7, #9]
	if (status == VL53LX_ERROR_NONE)
 8003838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10b      	bne.n	8003858 <select_offset_per_vcsel+0xbc>
		*poffset = (isc & 0x01) ? tA : tB;
 8003840:	7a7b      	ldrb	r3, [r7, #9]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d002      	beq.n	8003850 <select_offset_per_vcsel+0xb4>
 800384a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800384e:	e001      	b.n	8003854 <select_offset_per_vcsel+0xb8>
 8003850:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	8013      	strh	r3, [r2, #0]

	return status;
 8003858:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <vl53lx_diff_histo_stddev>:

static void vl53lx_diff_histo_stddev(VL53LX_LLDriverData_t *pdev,
	VL53LX_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8003868:	b490      	push	{r4, r7}
 800386a:	b08a      	sub	sp, #40	; 0x28
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	4611      	mov	r1, r2
 8003874:	461a      	mov	r2, r3
 8003876:	460b      	mov	r3, r1
 8003878:	71fb      	strb	r3, [r7, #7]
 800387a:	4613      	mov	r3, r2
 800387c:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 800387e:	2300      	movs	r3, #0
 8003880:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t    total_rate_pre = 0;
 8003882:	2300      	movs	r3, #0
 8003884:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 8003886:	2300      	movs	r3, #0
 8003888:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 800388a:	2300      	movs	r3, #0
 800388c:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 800388e:	2300      	movs	r3, #0
 8003890:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	b29b      	uxth	r3, r3
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	84fb      	strh	r3, [r7, #38]	; 0x26
 800389a:	e021      	b.n	80038e0 <vl53lx_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 800389c:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 80038a0:	79fb      	ldrb	r3, [r7, #7]
 80038a2:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	461a      	mov	r2, r3
 80038a8:	0052      	lsls	r2, r2, #1
 80038aa:	441a      	add	r2, r3
 80038ac:	00d3      	lsls	r3, r2, #3
 80038ae:	461a      	mov	r2, r3
 80038b0:	460b      	mov	r3, r1
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	440b      	add	r3, r1
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	4413      	add	r3, r2
 80038ba:	4423      	add	r3, r4
 80038bc:	f203 7304 	addw	r3, r3, #1796	; 0x704
 80038c0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 80038c4:	6a3a      	ldr	r2, [r7, #32]
 80038c6:	4413      	add	r3, r2
 80038c8:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 80038ca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	3206      	adds	r2, #6
 80038d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038d4:	69fa      	ldr	r2, [r7, #28]
 80038d6:	4413      	add	r3, r2
 80038d8:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 80038da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80038dc:	3301      	adds	r3, #1
 80038de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80038e0:	79bb      	ldrb	r3, [r7, #6]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d3d8      	bcc.n	800389c <vl53lx_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d047      	beq.n	8003980 <vl53lx_diff_histo_stddev+0x118>
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d044      	beq.n	8003980 <vl53lx_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 80038f6:	79fb      	ldrb	r3, [r7, #7]
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80038fe:	e03a      	b.n	8003976 <vl53lx_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 8003900:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8003904:	79fb      	ldrb	r3, [r7, #7]
 8003906:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	461a      	mov	r2, r3
 800390c:	0052      	lsls	r2, r2, #1
 800390e:	441a      	add	r2, r3
 8003910:	00d3      	lsls	r3, r2, #3
 8003912:	461a      	mov	r2, r3
 8003914:	460b      	mov	r3, r1
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	440b      	add	r3, r1
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	4413      	add	r3, r2
 800391e:	4423      	add	r3, r4
 8003920:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8003924:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003928:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003930:	fb02 f203 	mul.w	r2, r2, r3
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	fb92 f3f3 	sdiv	r3, r2, r3
 800393a:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 800393c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	3206      	adds	r2, #6
 8003942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003946:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800394a:	fb02 f203 	mul.w	r2, r2, r3
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	fb92 f3f3 	sdiv	r3, r2, r3
 8003954:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8003956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	69b9      	ldr	r1, [r7, #24]
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 8003960:	69b8      	ldr	r0, [r7, #24]
 8003962:	6979      	ldr	r1, [r7, #20]
 8003964:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8003966:	fb01 f303 	mul.w	r3, r1, r3
 800396a:	441a      	add	r2, r3
 800396c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800396e:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8003970:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003972:	3301      	adds	r3, #1
 8003974:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003976:	79bb      	ldrb	r3, [r7, #6]
 8003978:	b29b      	uxth	r3, r3
 800397a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800397c:	429a      	cmp	r2, r3
 800397e:	d3bf      	bcc.n	8003900 <vl53lx_diff_histo_stddev+0x98>
	}
}
 8003980:	bf00      	nop
 8003982:	3728      	adds	r7, #40	; 0x28
 8003984:	46bd      	mov	sp, r7
 8003986:	bc90      	pop	{r4, r7}
 8003988:	4770      	bx	lr

0800398a <vl53lx_histo_merge>:

static void vl53lx_histo_merge(VL53LX_DEV Dev,
		VL53LX_histogram_bin_data_t *pdata) {
 800398a:	b5b0      	push	{r4, r5, r7, lr}
 800398c:	b08c      	sub	sp, #48	; 0x30
 800398e:	af02      	add	r7, sp, #8
 8003990:	6078      	str	r0, [r7, #4]
 8003992:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev =
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3318      	adds	r3, #24
 8003998:	61fb      	str	r3, [r7, #28]
			VL53LXDevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 800399a:	2300      	movs	r3, #0
 800399c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t    i                        = 0;
 800399e:	2300      	movs	r3, #0
 80039a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int32_t    TuningBinRecSize		    = 0;
 80039a4:	2300      	movs	r3, #0
 80039a6:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 80039a8:	2300      	movs	r3, #0
 80039aa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t    timing					= 0;
 80039ae:	2300      	movs	r3, #0
 80039b0:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 80039b2:	2300      	movs	r3, #0
 80039b4:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53LX_HISTOGRAM_BUFFER_SIZE;
 80039ba:	2318      	movs	r3, #24
 80039bc:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 80039be:	f107 0314 	add.w	r3, r7, #20
 80039c2:	461a      	mov	r2, r3
 80039c4:	f248 018f 	movw	r1, #32911	; 0x808f
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f002 fbd3 	bl	8006174 <VL53LX_get_tuning_parm>
			&TuningBinRecSize);

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD,
 80039ce:	f107 0310 	add.w	r3, r7, #16
 80039d2:	461a      	mov	r2, r3
 80039d4:	f248 018e 	movw	r1, #32910	; 0x808e
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f002 fbcb 	bl	8006174 <VL53LX_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80039e4:	330d      	adds	r3, #13
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f040 811a 	bne.w	8003c22 <vl53lx_histo_merge+0x298>

		timing = 1 - pdata->result__stream_count % 2;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	bf0c      	ite	eq
 80039fc:	2301      	moveq	r3, #1
 80039fe:	2300      	movne	r3, #0
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 8003a08:	7efb      	ldrb	r3, [r7, #27]
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	7eba      	ldrb	r2, [r7, #26]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003a1a:	330c      	adds	r3, #12
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d008      	beq.n	8003a34 <vl53lx_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003a28:	330c      	adds	r3, #12
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a32:	e004      	b.n	8003a3e <vl53lx_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 8003a3e:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8003a42:	7efb      	ldrb	r3, [r7, #27]
 8003a44:	69f8      	ldr	r0, [r7, #28]
 8003a46:	461a      	mov	r2, r3
 8003a48:	0052      	lsls	r2, r2, #1
 8003a4a:	441a      	add	r2, r3
 8003a4c:	0153      	lsls	r3, r2, #5
 8003a4e:	461a      	mov	r2, r3
 8003a50:	460b      	mov	r3, r1
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	440b      	add	r3, r1
 8003a56:	019b      	lsls	r3, r3, #6
 8003a58:	4413      	add	r3, r2
 8003a5a:	4403      	add	r3, r0
 8003a5c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	dd0c      	ble.n	8003a80 <vl53lx_histo_merge+0xf6>
			vl53lx_diff_histo_stddev(pdev, pdata,
 8003a66:	7e79      	ldrb	r1, [r7, #25]
 8003a68:	7efa      	ldrb	r2, [r7, #27]
 8003a6a:	f107 030c 	add.w	r3, r7, #12
 8003a6e:	9301      	str	r3, [sp, #4]
 8003a70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	460b      	mov	r3, r1
 8003a78:	6839      	ldr	r1, [r7, #0]
 8003a7a:	69f8      	ldr	r0, [r7, #28]
 8003a7c:	f7ff fef4 	bl	8003868 <vl53lx_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	db23      	blt.n	8003ad0 <vl53lx_histo_merge+0x146>
			memset(pdev->multi_bins_rec, 0,
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003a8e:	3310      	adds	r3, #16
 8003a90:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8003a94:	2100      	movs	r1, #0
 8003a96:	4618      	mov	r0, r3
 8003a98:	f011 f8b2 	bl	8014c00 <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003aa2:	330c      	adds	r3, #12
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	701a      	strb	r2, [r3, #0]

			recom_been_reset = 1;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if (timing == 0)
 8003aae:	7efb      	ldrb	r3, [r7, #27]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d106      	bne.n	8003ac2 <vl53lx_histo_merge+0x138>
				pdev->pos_before_next_recom =
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003aba:	330d      	adds	r3, #13
 8003abc:	2206      	movs	r2, #6
 8003abe:	701a      	strb	r2, [r3, #0]
 8003ac0:	e034      	b.n	8003b2c <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003ac8:	330d      	adds	r3, #13
 8003aca:	2207      	movs	r2, #7
 8003acc:	701a      	strb	r2, [r3, #0]
 8003ace:	e02d      	b.n	8003b2c <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003ad6:	330c      	adds	r3, #12
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 8003adc:	2300      	movs	r3, #0
 8003ade:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003ae2:	e01e      	b.n	8003b22 <vl53lx_histo_merge+0x198>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 8003ae4:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 8003ae8:	7e39      	ldrb	r1, [r7, #24]
 8003aea:	7efb      	ldrb	r3, [r7, #27]
 8003aec:	f897 5025 	ldrb.w	r5, [r7, #37]	; 0x25
					pdata->bin_data[i];
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	3006      	adds	r0, #6
 8003af4:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 8003af8:	69f8      	ldr	r0, [r7, #28]
 8003afa:	461a      	mov	r2, r3
 8003afc:	0052      	lsls	r2, r2, #1
 8003afe:	441a      	add	r2, r3
 8003b00:	00d3      	lsls	r3, r2, #3
 8003b02:	461a      	mov	r2, r3
 8003b04:	460b      	mov	r3, r1
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	440b      	add	r3, r1
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	4413      	add	r3, r2
 8003b0e:	442b      	add	r3, r5
 8003b10:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8003b14:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 8003b18:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003b22:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003b26:	7ebb      	ldrb	r3, [r7, #26]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d3db      	bcc.n	8003ae4 <vl53lx_histo_merge+0x15a>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003b32:	330c      	adds	r3, #12
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	461a      	mov	r2, r3
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d109      	bne.n	8003b54 <vl53lx_histo_merge+0x1ca>
 8003b40:	7efb      	ldrb	r3, [r7, #27]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d106      	bne.n	8003b54 <vl53lx_histo_merge+0x1ca>
			pdev->bin_rec_pos = 0;
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003b4c:	330c      	adds	r3, #12
 8003b4e:	2200      	movs	r2, #0
 8003b50:	701a      	strb	r2, [r3, #0]
 8003b52:	e00e      	b.n	8003b72 <vl53lx_histo_merge+0x1e8>
		else if (timing == 1)
 8003b54:	7efb      	ldrb	r3, [r7, #27]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d10b      	bne.n	8003b72 <vl53lx_histo_merge+0x1e8>
			pdev->bin_rec_pos++;
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003b60:	330c      	adds	r3, #12
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	3301      	adds	r3, #1
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003b6e:	330c      	adds	r3, #12
 8003b70:	701a      	strb	r2, [r3, #0]

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8003b72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d102      	bne.n	8003b80 <vl53lx_histo_merge+0x1f6>
 8003b7a:	7efb      	ldrb	r3, [r7, #27]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d069      	beq.n	8003c54 <vl53lx_histo_merge+0x2ca>
			 (pdev->pos_before_next_recom == 0)) {
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003b86:	330d      	adds	r3, #13
 8003b88:	781b      	ldrb	r3, [r3, #0]
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d162      	bne.n	8003c54 <vl53lx_histo_merge+0x2ca>

			for (bin = 0; bin < BuffSize; bin++)
 8003b8e:	2300      	movs	r3, #0
 8003b90:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003b92:	e008      	b.n	8003ba6 <vl53lx_histo_merge+0x21c>
				pdata->bin_data[bin] = 0;
 8003b94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	3206      	adds	r2, #6
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 8003ba0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003ba6:	7ebb      	ldrb	r3, [r7, #26]
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d3f1      	bcc.n	8003b94 <vl53lx_histo_merge+0x20a>

			for (bin = 0; bin < BuffSize; bin++)
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003bb4:	e02f      	b.n	8003c16 <vl53lx_histo_merge+0x28c>
				for (i = 0; i < TuningBinRecSize; i++)
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003bbc:	e023      	b.n	8003c06 <vl53lx_histo_merge+0x27c>
					pdata->bin_data[bin] +=
 8003bbe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	3206      	adds	r2, #6
 8003bc4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 8003bc8:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003bcc:	7efb      	ldrb	r3, [r7, #27]
 8003bce:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
 8003bd0:	69fc      	ldr	r4, [r7, #28]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	0052      	lsls	r2, r2, #1
 8003bd6:	441a      	add	r2, r3
 8003bd8:	00d3      	lsls	r3, r2, #3
 8003bda:	461a      	mov	r2, r3
 8003bdc:	460b      	mov	r3, r1
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	440b      	add	r3, r1
 8003be2:	011b      	lsls	r3, r3, #4
 8003be4:	4413      	add	r3, r2
 8003be6:	442b      	add	r3, r5
 8003be8:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8003bec:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 8003bf0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003bf2:	18c1      	adds	r1, r0, r3
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	3206      	adds	r2, #6
 8003bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 8003bfc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003c00:	3301      	adds	r3, #1
 8003c02:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003c06:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	dbd6      	blt.n	8003bbe <vl53lx_histo_merge+0x234>
			for (bin = 0; bin < BuffSize; bin++)
 8003c10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003c12:	3301      	adds	r3, #1
 8003c14:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003c16:	7ebb      	ldrb	r3, [r7, #26]
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d3ca      	bcc.n	8003bb6 <vl53lx_histo_merge+0x22c>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 8003c20:	e018      	b.n	8003c54 <vl53lx_histo_merge+0x2ca>
		pdev->pos_before_next_recom--;
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003c28:	330d      	adds	r3, #13
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003c36:	330d      	adds	r3, #13
 8003c38:	701a      	strb	r2, [r3, #0]
		if (pdev->pos_before_next_recom == 255)
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003c40:	330d      	adds	r3, #13
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2bff      	cmp	r3, #255	; 0xff
 8003c46:	d105      	bne.n	8003c54 <vl53lx_histo_merge+0x2ca>
			pdev->pos_before_next_recom = 0;
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003c4e:	330d      	adds	r3, #13
 8003c50:	2200      	movs	r2, #0
 8003c52:	701a      	strb	r2, [r3, #0]
}
 8003c54:	bf00      	nop
 8003c56:	3728      	adds	r7, #40	; 0x28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bdb0      	pop	{r4, r5, r7, pc}

08003c5c <VL53LX_load_patch>:

VL53LX_Error VL53LX_load_patch(VL53LX_DEV Dev)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b0c6      	sub	sp, #280	; 0x118
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	1d3b      	adds	r3, r7, #4
 8003c64:	6018      	str	r0, [r3, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003c66:	2300      	movs	r3, #0
 8003c68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	int32_t patch_tuning = 0;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8003c72:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d108      	bne.n	8003c8c <VL53LX_load_patch+0x30>
		status = VL53LX_WrByte(Dev,
 8003c7a:	1d3b      	adds	r3, r7, #4
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	2185      	movs	r1, #133	; 0x85
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	f00d fdc3 	bl	801180c <VL53LX_WrByte>
 8003c86:	4603      	mov	r3, r0
 8003c88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8003c8c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d103      	bne.n	8003c9c <VL53LX_load_patch+0x40>
		VL53LX_enable_powerforce(Dev);
 8003c94:	1d3b      	adds	r3, r7, #4
 8003c96:	6818      	ldr	r0, [r3, #0]
 8003c98:	f005 f9b5 	bl	8009006 <VL53LX_enable_powerforce>

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER,
 8003c9c:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8003ca0:	1d3b      	adds	r3, r7, #4
 8003ca2:	f248 018c 	movw	r1, #32908	; 0x808c
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	f002 fa64 	bl	8006174 <VL53LX_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 8003cac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cb0:	2b03      	cmp	r3, #3
 8003cb2:	d81b      	bhi.n	8003cec <VL53LX_load_patch+0x90>
 8003cb4:	a201      	add	r2, pc, #4	; (adr r2, 8003cbc <VL53LX_load_patch+0x60>)
 8003cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cba:	bf00      	nop
 8003cbc:	08003ccd 	.word	0x08003ccd
 8003cc0:	08003cd5 	.word	0x08003cd5
 8003cc4:	08003cdd 	.word	0x08003cdd
 8003cc8:	08003ce5 	.word	0x08003ce5
	case 0:
		patch_power = 0x00;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8003cd2:	e00e      	b.n	8003cf2 <VL53LX_load_patch+0x96>
	case 1:
		patch_power = 0x10;
 8003cd4:	2310      	movs	r3, #16
 8003cd6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8003cda:	e00a      	b.n	8003cf2 <VL53LX_load_patch+0x96>
	case 2:
		patch_power = 0x20;
 8003cdc:	2320      	movs	r3, #32
 8003cde:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8003ce2:	e006      	b.n	8003cf2 <VL53LX_load_patch+0x96>
	case 3:
		patch_power = 0x40;
 8003ce4:	2340      	movs	r3, #64	; 0x40
 8003ce6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8003cea:	e002      	b.n	8003cf2 <VL53LX_load_patch+0x96>
	default:
		patch_power = 0x00;
 8003cec:	2300      	movs	r3, #0
 8003cee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}

	if (status == VL53LX_ERROR_NONE) {
 8003cf2:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d125      	bne.n	8003d46 <VL53LX_load_patch+0xea>

		comms_buffer[0] = 0x29;
 8003cfa:	f107 030c 	add.w	r3, r7, #12
 8003cfe:	2229      	movs	r2, #41	; 0x29
 8003d00:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 8003d02:	f107 030c 	add.w	r3, r7, #12
 8003d06:	22c9      	movs	r2, #201	; 0xc9
 8003d08:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 8003d0a:	f107 030c 	add.w	r3, r7, #12
 8003d0e:	220e      	movs	r2, #14
 8003d10:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 8003d12:	f107 030c 	add.w	r3, r7, #12
 8003d16:	2240      	movs	r2, #64	; 0x40
 8003d18:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 8003d1a:	f107 030c 	add.w	r3, r7, #12
 8003d1e:	2228      	movs	r2, #40	; 0x28
 8003d20:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 8003d22:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	f107 030c 	add.w	r3, r7, #12
 8003d2c:	715a      	strb	r2, [r3, #5]

		status = VL53LX_WriteMulti(Dev,
 8003d2e:	f107 020c 	add.w	r2, r7, #12
 8003d32:	1d38      	adds	r0, r7, #4
 8003d34:	2306      	movs	r3, #6
 8003d36:	f240 4176 	movw	r1, #1142	; 0x476
 8003d3a:	6800      	ldr	r0, [r0, #0]
 8003d3c:	f00d fcfa 	bl	8011734 <VL53LX_WriteMulti>
 8003d40:	4603      	mov	r3, r0
 8003d42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 8003d46:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d123      	bne.n	8003d96 <VL53LX_load_patch+0x13a>
		comms_buffer[0] = 0x03;
 8003d4e:	f107 030c 	add.w	r3, r7, #12
 8003d52:	2203      	movs	r2, #3
 8003d54:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8003d56:	f107 030c 	add.w	r3, r7, #12
 8003d5a:	226d      	movs	r2, #109	; 0x6d
 8003d5c:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8003d5e:	f107 030c 	add.w	r3, r7, #12
 8003d62:	2203      	movs	r2, #3
 8003d64:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 8003d66:	f107 030c 	add.w	r3, r7, #12
 8003d6a:	226f      	movs	r2, #111	; 0x6f
 8003d6c:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 8003d6e:	f107 030c 	add.w	r3, r7, #12
 8003d72:	2207      	movs	r2, #7
 8003d74:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 8003d76:	f107 030c 	add.w	r3, r7, #12
 8003d7a:	2229      	movs	r2, #41	; 0x29
 8003d7c:	715a      	strb	r2, [r3, #5]
		status = VL53LX_WriteMulti(Dev,
 8003d7e:	f107 020c 	add.w	r2, r7, #12
 8003d82:	1d38      	adds	r0, r7, #4
 8003d84:	2306      	movs	r3, #6
 8003d86:	f240 4196 	movw	r1, #1174	; 0x496
 8003d8a:	6800      	ldr	r0, [r0, #0]
 8003d8c:	f00d fcd2 	bl	8011734 <VL53LX_WriteMulti>
 8003d90:	4603      	mov	r3, r0
 8003d92:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 8003d96:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d113      	bne.n	8003dc6 <VL53LX_load_patch+0x16a>
		comms_buffer[0] = 0x00;
 8003d9e:	f107 030c 	add.w	r3, r7, #12
 8003da2:	2200      	movs	r2, #0
 8003da4:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8003da6:	f107 030c 	add.w	r3, r7, #12
 8003daa:	2207      	movs	r2, #7
 8003dac:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 8003dae:	f107 020c 	add.w	r2, r7, #12
 8003db2:	1d38      	adds	r0, r7, #4
 8003db4:	2302      	movs	r3, #2
 8003db6:	f240 4172 	movw	r1, #1138	; 0x472
 8003dba:	6800      	ldr	r0, [r0, #0]
 8003dbc:	f00d fcba 	bl	8011734 <VL53LX_WriteMulti>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE) {
 8003dc6:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d113      	bne.n	8003df6 <VL53LX_load_patch+0x19a>
		comms_buffer[0] = 0x00;
 8003dce:	f107 030c 	add.w	r3, r7, #12
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8003dd6:	f107 030c 	add.w	r3, r7, #12
 8003dda:	2207      	movs	r2, #7
 8003ddc:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 8003dde:	f107 020c 	add.w	r2, r7, #12
 8003de2:	1d38      	adds	r0, r7, #4
 8003de4:	2302      	movs	r3, #2
 8003de6:	f240 4174 	movw	r1, #1140	; 0x474
 8003dea:	6800      	ldr	r0, [r0, #0]
 8003dec:	f00d fca2 	bl	8011734 <VL53LX_WriteMulti>
 8003df0:	4603      	mov	r3, r0
 8003df2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE)
 8003df6:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d109      	bne.n	8003e12 <VL53LX_load_patch+0x1b6>
		status = VL53LX_WrByte(Dev,
 8003dfe:	1d3b      	adds	r3, r7, #4
 8003e00:	2201      	movs	r2, #1
 8003e02:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8003e06:	6818      	ldr	r0, [r3, #0]
 8003e08:	f00d fd00 	bl	801180c <VL53LX_WrByte>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__CTRL, 0x01);

	if (status == VL53LX_ERROR_NONE)
 8003e12:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d108      	bne.n	8003e2c <VL53LX_load_patch+0x1d0>
		status = VL53LX_WrByte(Dev,
 8003e1a:	1d3b      	adds	r3, r7, #4
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	2185      	movs	r1, #133	; 0x85
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	f00d fcf3 	bl	801180c <VL53LX_WrByte>
 8003e26:	4603      	mov	r3, r0
 8003e28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 8003e2c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop

08003e3c <VL53LX_unload_patch>:

VL53LX_Error VL53LX_unload_patch(VL53LX_DEV Dev)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003e44:	2300      	movs	r3, #0
 8003e46:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE)
 8003e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d106      	bne.n	8003e5e <VL53LX_unload_patch+0x22>
		status = VL53LX_WrByte(Dev,
 8003e50:	2200      	movs	r2, #0
 8003e52:	2185      	movs	r1, #133	; 0x85
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f00d fcd9 	bl	801180c <VL53LX_WrByte>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8003e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d102      	bne.n	8003e6c <VL53LX_unload_patch+0x30>
		VL53LX_disable_powerforce(Dev);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f005 f8df 	bl	800902a <VL53LX_disable_powerforce>

	if (status == VL53LX_ERROR_NONE)
 8003e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d107      	bne.n	8003e84 <VL53LX_unload_patch+0x48>
		status = VL53LX_WrByte(Dev,
 8003e74:	2200      	movs	r2, #0
 8003e76:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f00d fcc6 	bl	801180c <VL53LX_WrByte>
 8003e80:	4603      	mov	r3, r0
 8003e82:	73fb      	strb	r3, [r7, #15]
		VL53LX_PATCH__CTRL, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8003e84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d106      	bne.n	8003e9a <VL53LX_unload_patch+0x5e>
		status = VL53LX_WrByte(Dev,
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	2185      	movs	r1, #133	; 0x85
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f00d fcbb 	bl	801180c <VL53LX_WrByte>
 8003e96:	4603      	mov	r3, r0
 8003e98:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 8003e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <VL53LX_data_init>:


VL53LX_Error VL53LX_data_init(
	VL53LX_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8003ea6:	b5b0      	push	{r4, r5, r7, lr}
 8003ea8:	b08a      	sub	sp, #40	; 0x28
 8003eaa:	af04      	add	r7, sp, #16
 8003eac:	6078      	str	r0, [r7, #4]
 8003eae:	460b      	mov	r3, r1
 8003eb0:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t    *pdev =
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3318      	adds	r3, #24
 8003eba:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003ec2:	60fb      	str	r3, [r7, #12]



	VL53LX_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53LX_init_ll_driver_state(
 8003ec8:	2162      	movs	r1, #98	; 0x62
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f004 f920 	bl	8008110 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53LX_MAX_RANGE_RESULTS;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2204      	movs	r2, #4
 8003ed4:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53LX_MAX_USER_ZONES;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2205      	movs	r2, #5
 8003ee0:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	pres->zone_results.active_zones    = 0;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5

	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003eec:	2300      	movs	r3, #0
 8003eee:	75bb      	strb	r3, [r7, #22]
 8003ef0:	e01b      	b.n	8003f2a <VL53LX_data_init+0x84>
		pobjects = &(pres->zone_results.VL53LX_p_003[i]);
 8003ef2:	7dba      	ldrb	r2, [r7, #22]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	4413      	add	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	4413      	add	r3, r2
 8003f04:	3308      	adds	r3, #8
 8003f06:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53LX_p_016 = 0;
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	639a      	str	r2, [r3, #56]	; 0x38
		pobjects->xmonitor.VL53LX_p_017  = 0;
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2200      	movs	r2, #0
 8003f12:	63da      	str	r2, [r3, #60]	; 0x3c
		pobjects->xmonitor.VL53LX_p_011          = 0;
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		pobjects->xmonitor.range_status =
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003f24:	7dbb      	ldrb	r3, [r7, #22]
 8003f26:	3301      	adds	r3, #1
 8003f28:	75bb      	strb	r3, [r7, #22]
 8003f2a:	7dbb      	ldrb	r3, [r7, #22]
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d9e0      	bls.n	8003ef2 <VL53LX_data_init+0x4c>
				VL53LX_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53LX_MAX_USER_ZONES;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2205      	movs	r2, #5
 8003f34:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
	pres->zone_hists.active_zones      = 0;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d



	pres->zone_cal.max_zones           = VL53LX_MAX_USER_ZONES;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2205      	movs	r2, #5
 8003f44:	f883 238f 	strb.w	r2, [r3, #911]	; 0x38f
	pres->zone_cal.active_zones        = 0;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003f50:	2300      	movs	r3, #0
 8003f52:	75bb      	strb	r3, [r7, #22]
 8003f54:	e039      	b.n	8003fca <VL53LX_data_init+0x124>
		pres->zone_cal.VL53LX_p_003[i].no_of_samples   = 0;
 8003f56:	7dba      	ldrb	r2, [r7, #22]
 8003f58:	68f9      	ldr	r1, [r7, #12]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	1a9b      	subs	r3, r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	440b      	add	r3, r1
 8003f64:	f503 7365 	add.w	r3, r3, #916	; 0x394
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].effective_spads = 0;
 8003f6c:	7dba      	ldrb	r2, [r7, #22]
 8003f6e:	68f9      	ldr	r1, [r7, #12]
 8003f70:	4613      	mov	r3, r2
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	1a9b      	subs	r3, r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	440b      	add	r3, r1
 8003f7a:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].peak_rate_mcps  = 0;
 8003f82:	7dba      	ldrb	r2, [r7, #22]
 8003f84:	68f9      	ldr	r1, [r7, #12]
 8003f86:	4613      	mov	r3, r2
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	1a9b      	subs	r3, r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	440b      	add	r3, r1
 8003f90:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].median_range_mm = 0;
 8003f98:	7dba      	ldrb	r2, [r7, #22]
 8003f9a:	68f9      	ldr	r1, [r7, #12]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	1a9b      	subs	r3, r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].range_mm_offset = 0;
 8003fae:	7dba      	ldrb	r2, [r7, #22]
 8003fb0:	68f9      	ldr	r1, [r7, #12]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	1a9b      	subs	r3, r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	440b      	add	r3, r1
 8003fbc:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003fc4:	7dbb      	ldrb	r3, [r7, #22]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	75bb      	strb	r3, [r7, #22]
 8003fca:	7dbb      	ldrb	r3, [r7, #22]
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d9c2      	bls.n	8003f56 <VL53LX_data_init+0xb0>
	}

	pdev->wait_method             = VL53LX_WAIT_METHOD_BLOCKING;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE;
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	221e      	movs	r2, #30
 8003fda:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = 0;
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53LX_DEVICEMEASUREMENTMODE_STOP;
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	2201      	movs	r2, #1
 8003fec:	711a      	strb	r2, [r3, #4]
		VL53LX_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	715a      	strb	r2, [r3, #5]
		VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	719a      	strb	r2, [r3, #6]
		VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004000:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004008:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8004010:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	2264      	movs	r2, #100	; 0x64
 8004016:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800401e:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pdev->offset_results.max_results    = VL53LX_MAX_OFFSET_RANGE_RESULTS;
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800402e:	3302      	adds	r3, #2
 8004030:	2203      	movs	r2, #3
 8004032:	701a      	strb	r2, [r3, #0]
	pdev->offset_results.active_results = 0;
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800403a:	3303      	adds	r3, #3
 800403c:	2200      	movs	r2, #0
 800403e:	701a      	strb	r2, [r3, #0]



	pdev->gain_cal.standard_ranging_gain_factor =
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f240 72db 	movw	r2, #2011	; 0x7db
 8004046:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
			VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f240 72c3 	movw	r2, #1987	; 0x7c3
 8004050:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53LX_init_version(Dev);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f004 f83f 	bl	80080d8 <VL53LX_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8004060:	3310      	adds	r3, #16
 8004062:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8004066:	2100      	movs	r1, #0
 8004068:	4618      	mov	r0, r3
 800406a:	f010 fdc9 	bl	8014c00 <memset>
	pdev->bin_rec_pos = 0;
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8004074:	330c      	adds	r3, #12
 8004076:	2200      	movs	r2, #0
 8004078:	701a      	strb	r2, [r3, #0]
	pdev->pos_before_next_recom = 0;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8004080:	330d      	adds	r3, #13
 8004082:	2200      	movs	r2, #0
 8004084:	701a      	strb	r2, [r3, #0]



	if (read_p2p_data > 0 && status == VL53LX_ERROR_NONE)
 8004086:	78fb      	ldrb	r3, [r7, #3]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d008      	beq.n	800409e <VL53LX_data_init+0x1f8>
 800408c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d104      	bne.n	800409e <VL53LX_data_init+0x1f8>
		status = VL53LX_read_p2p_data(Dev);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f8b7 	bl	8004208 <VL53LX_read_p2p_data>
 800409a:	4603      	mov	r3, r0
 800409c:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 800409e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d107      	bne.n	80040b6 <VL53LX_data_init+0x210>
		status = VL53LX_init_refspadchar_config_struct(
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80040ac:	4618      	mov	r0, r3
 80040ae:	f002 ffdf 	bl	8007070 <VL53LX_init_refspadchar_config_struct>
 80040b2:	4603      	mov	r3, r0
 80040b4:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53LX_ERROR_NONE)
 80040b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d107      	bne.n	80040ce <VL53LX_data_init+0x228>
		status = VL53LX_init_ssc_config_struct(
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80040c4:	4618      	mov	r0, r3
 80040c6:	f002 fff7 	bl	80070b8 <VL53LX_init_ssc_config_struct>
 80040ca:	4603      	mov	r3, r0
 80040cc:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53LX_ERROR_NONE)
 80040ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10b      	bne.n	80040ee <VL53LX_data_init+0x248>
		status = VL53LX_init_xtalk_config_struct(
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80040e2:	4619      	mov	r1, r3
 80040e4:	4610      	mov	r0, r2
 80040e6:	f003 f808 	bl	80070fa <VL53LX_init_xtalk_config_struct>
 80040ea:	4603      	mov	r3, r0
 80040ec:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53LX_ERROR_NONE)
 80040ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d107      	bne.n	8004106 <VL53LX_data_init+0x260>
		status = VL53LX_init_xtalk_extract_config_struct(
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80040fc:	4618      	mov	r0, r3
 80040fe:	f003 f86f 	bl	80071e0 <VL53LX_init_xtalk_extract_config_struct>
 8004102:	4603      	mov	r3, r0
 8004104:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53LX_ERROR_NONE)
 8004106:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d107      	bne.n	800411e <VL53LX_data_init+0x278>
		status = VL53LX_init_offset_cal_config_struct(
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004114:	4618      	mov	r0, r3
 8004116:	f003 f892 	bl	800723e <VL53LX_init_offset_cal_config_struct>
 800411a:	4603      	mov	r3, r0
 800411c:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53LX_ERROR_NONE)
 800411e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d107      	bne.n	8004136 <VL53LX_data_init+0x290>
		status = VL53LX_init_zone_cal_config_struct(
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 800412c:	4618      	mov	r0, r3
 800412e:	f003 f8ad 	bl	800728c <VL53LX_init_zone_cal_config_struct>
 8004132:	4603      	mov	r3, r0
 8004134:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53LX_ERROR_NONE)
 8004136:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10b      	bne.n	8004156 <VL53LX_data_init+0x2b0>
		status = VL53LX_init_hist_post_process_config_struct(
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800414a:	4619      	mov	r1, r3
 800414c:	4610      	mov	r0, r2
 800414e:	f003 f8c1 	bl	80072d4 <VL53LX_init_hist_post_process_config_struct>
 8004152:	4603      	mov	r3, r0
 8004154:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53LX_ERROR_NONE)
 8004156:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d107      	bne.n	800416e <VL53LX_data_init+0x2c8>
		status = VL53LX_init_hist_gen3_dmax_config_struct(
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8004164:	4618      	mov	r0, r3
 8004166:	f003 fac0 	bl	80076ea <VL53LX_init_hist_gen3_dmax_config_struct>
 800416a:	4603      	mov	r3, r0
 800416c:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53LX_ERROR_NONE)
 800416e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d106      	bne.n	8004184 <VL53LX_data_init+0x2de>
		status = VL53LX_init_tuning_parm_storage_struct(
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	33f8      	adds	r3, #248	; 0xf8
 800417a:	4618      	mov	r0, r3
 800417c:	f003 f919 	bl	80073b2 <VL53LX_init_tuning_parm_storage_struct>
 8004180:	4603      	mov	r3, r0
 8004182:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53LX_ERROR_NONE)
 8004184:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d116      	bne.n	80041ba <VL53LX_data_init+0x314>
		status = VL53LX_set_preset_mode(
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	7858      	ldrb	r0, [r3, #1]
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	8b1c      	ldrh	r4, [r3, #24]
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	689d      	ldr	r5, [r3, #8]
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	6912      	ldr	r2, [r2, #16]
 80041a0:	6939      	ldr	r1, [r7, #16]
 80041a2:	6949      	ldr	r1, [r1, #20]
 80041a4:	9102      	str	r1, [sp, #8]
 80041a6:	9201      	str	r2, [sp, #4]
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	462b      	mov	r3, r5
 80041ac:	4622      	mov	r2, r4
 80041ae:	4601      	mov	r1, r0
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 fb3e 	bl	8004832 <VL53LX_set_preset_mode>
 80041b6:	4603      	mov	r3, r0
 80041b8:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53LX_init_histogram_bin_data_struct(
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80041c0:	461a      	mov	r2, r3
 80041c2:	2118      	movs	r1, #24
 80041c4:	2000      	movs	r0, #0
 80041c6:	f008 fa30 	bl	800c62a <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53LX_init_histogram_bin_data_struct(
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80041d0:	461a      	mov	r2, r3
 80041d2:	2118      	movs	r1, #24
 80041d4:	2000      	movs	r0, #0
 80041d6:	f008 fa28 	bl	800c62a <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53LX_init_xtalk_bin_data_struct(
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 80041e0:	461a      	mov	r2, r3
 80041e2:	210c      	movs	r1, #12
 80041e4:	2000      	movs	r0, #0
 80041e6:	f004 fd33 	bl	8008c50 <VL53LX_init_xtalk_bin_data_struct>
			VL53LX_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53LX_xtalk_cal_data_init(
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f007 fc24 	bl	800ba38 <VL53LX_xtalk_cal_data_init>
			Dev
			);



	VL53LX_dynamic_xtalk_correction_data_init(
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f007 fb3b 	bl	800b86c <VL53LX_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53LX_low_power_auto_data_init(
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f007 fc47 	bl	800ba8a <VL53LX_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 80041fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bdb0      	pop	{r4, r5, r7, pc}

08004208 <VL53LX_read_p2p_data>:


VL53LX_Error VL53LX_read_p2p_data(
	VL53LX_DEV        Dev)
{
 8004208:	b590      	push	{r4, r7, lr}
 800420a:	b091      	sub	sp, #68	; 0x44
 800420c:	af04      	add	r7, sp, #16
 800420e:	6078      	str	r0, [r7, #4]



	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8004210:	2300      	movs	r3, #0
 8004212:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	3318      	adds	r3, #24
 800421a:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 800421c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004222:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8004224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004226:	3348      	adds	r3, #72	; 0x48
 8004228:	623b      	str	r3, [r7, #32]
	VL53LX_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 800422a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422c:	339c      	adds	r3, #156	; 0x9c
 800422e:	61fb      	str	r3, [r7, #28]

	VL53LX_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8004230:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004234:	2b00      	cmp	r3, #0
 8004236:	d109      	bne.n	800424c <VL53LX_read_p2p_data+0x44>
		status = VL53LX_get_static_nvm_managed(
 8004238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423a:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 800423e:	4619      	mov	r1, r3
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f00b fbb0 	bl	800f9a6 <VL53LX_get_static_nvm_managed>
 8004246:	4603      	mov	r3, r0
 8004248:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53LX_ERROR_NONE)
 800424c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004250:	2b00      	cmp	r3, #0
 8004252:	d108      	bne.n	8004266 <VL53LX_read_p2p_data+0x5e>
		status = VL53LX_get_customer_nvm_managed(
 8004254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004256:	3348      	adds	r3, #72	; 0x48
 8004258:	4619      	mov	r1, r3
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f00b fce1 	bl	800fc22 <VL53LX_get_customer_nvm_managed>
 8004260:	4603      	mov	r3, r0
 8004262:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53LX_ERROR_NONE) {
 8004266:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800426a:	2b00      	cmp	r3, #0
 800426c:	d117      	bne.n	800429e <VL53LX_read_p2p_data+0x96>

		status = VL53LX_get_nvm_copy_data(
 800426e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004270:	f203 3392 	addw	r3, r3, #914	; 0x392
 8004274:	4619      	mov	r1, r3
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f00c fbdd 	bl	8010a36 <VL53LX_get_nvm_copy_data>
 800427c:	4603      	mov	r3, r0
 800427e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53LX_ERROR_NONE)
 8004282:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004286:	2b00      	cmp	r3, #0
 8004288:	d109      	bne.n	800429e <VL53LX_read_p2p_data+0x96>
			VL53LX_copy_rtn_good_spads_to_buffer(
 800428a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428c:	f203 3292 	addw	r2, r3, #914	; 0x392
 8004290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004292:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8004296:	4619      	mov	r1, r3
 8004298:	4610      	mov	r0, r2
 800429a:	f004 fa2f 	bl	80086fc <VL53LX_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53LX_ERROR_NONE) {
 800429e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10e      	bne.n	80042c4 <VL53LX_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	895b      	ldrh	r3, [r3, #10]
 80042aa:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 80042ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ae:	62da      	str	r2, [r3, #44]	; 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	865a      	strh	r2, [r3, #50]	; 0x32
	}


	if (status == VL53LX_ERROR_NONE)
 80042c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d108      	bne.n	80042de <VL53LX_read_p2p_data+0xd6>
		status =
			VL53LX_read_nvm_optical_centre(
 80042cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ce:	33c0      	adds	r3, #192	; 0xc0
 80042d0:	4619      	mov	r1, r3
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f00b fa1b 	bl	800f70e <VL53LX_read_nvm_optical_centre>
 80042d8:	4603      	mov	r3, r0
 80042da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53LX_ERROR_NONE)
 80042de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d108      	bne.n	80042f8 <VL53LX_read_p2p_data+0xf0>
		status =
			VL53LX_read_nvm_cal_peak_rate_map(
 80042e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e8:	3360      	adds	r3, #96	; 0x60
 80042ea:	4619      	mov	r1, r3
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f00b fa31 	bl	800f754 <VL53LX_read_nvm_cal_peak_rate_map>
 80042f2:	4603      	mov	r3, r0
 80042f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53LX_ERROR_NONE) {
 80042f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d12d      	bne.n	800435c <VL53LX_read_p2p_data+0x154>

		status =
			VL53LX_read_nvm_additional_offset_cal_data(
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	339c      	adds	r3, #156	; 0x9c
 8004304:	4619      	mov	r1, r3
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f00b fa4a 	bl	800f7a0 <VL53LX_read_nvm_additional_offset_cal_data>
 800430c:	4603      	mov	r3, r0
 800430e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	889b      	ldrh	r3, [r3, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d120      	bne.n	800435c <VL53LX_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 800431e:	2b00      	cmp	r3, #0
 8004320:	d11c      	bne.n	800435c <VL53LX_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	2280      	movs	r2, #128	; 0x80
 8004326:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800432e:	80da      	strh	r2, [r3, #6]



			VL53LX_calc_mm_effective_spads(
 8004330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004332:	f893 03c2 	ldrb.w	r0, [r3, #962]	; 0x3c2
 8004336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004338:	f893 43c3 	ldrb.w	r4, [r3, #963]	; 0x3c3
 800433c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8004342:	69fa      	ldr	r2, [r7, #28]
 8004344:	69f9      	ldr	r1, [r7, #28]
 8004346:	3102      	adds	r1, #2
 8004348:	9103      	str	r1, [sp, #12]
 800434a:	9202      	str	r2, [sp, #8]
 800434c:	2238      	movs	r2, #56	; 0x38
 800434e:	9201      	str	r2, [sp, #4]
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	23ff      	movs	r3, #255	; 0xff
 8004354:	22c7      	movs	r2, #199	; 0xc7
 8004356:	4621      	mov	r1, r4
 8004358:	f006 f97a 	bl	800a650 <VL53LX_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53LX_ERROR_NONE) {
 800435c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004360:	2b00      	cmp	r3, #0
 8004362:	d12f      	bne.n	80043c4 <VL53LX_read_p2p_data+0x1bc>

		status =
			VL53LX_read_nvm_fmt_range_results_data(
 8004364:	f107 030c 	add.w	r3, r7, #12
 8004368:	461a      	mov	r2, r3
 800436a:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f00b fa39 	bl	800f7e6 <VL53LX_read_nvm_fmt_range_results_data>
 8004374:	4603      	mov	r3, r0
 8004376:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				VL53LX_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53LX_ERROR_NONE) {
 800437a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800437e:	2b00      	cmp	r3, #0
 8004380:	d120      	bne.n	80043c4 <VL53LX_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 8004382:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 8004384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004386:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 800438a:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 800438c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438e:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 8004392:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 8004394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004396:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 800439a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d006      	beq.n	80043b2 <VL53LX_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 80043a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 80043aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ac:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 80043b0:	e003      	b.n	80043ba <VL53LX_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 80043b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b4:	2214      	movs	r2, #20
 80043b6:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 80043ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043c0:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		}
	}


	if (status == VL53LX_ERROR_NONE)
 80043c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10b      	bne.n	80043e4 <VL53LX_read_p2p_data+0x1dc>
		status =
			VL53LX_RdWord(
 80043cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ce:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 80043d2:	3304      	adds	r3, #4
 80043d4:	461a      	mov	r2, r3
 80043d6:	21de      	movs	r1, #222	; 0xde
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f00d faa7 	bl	801192c <VL53LX_RdWord>
 80043de:	4603      	mov	r3, r0
 80043e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53LX_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 80043e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e6:	f8b3 32de 	ldrh.w	r3, [r3, #734]	; 0x2de
 80043ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ee:	d204      	bcs.n	80043fa <VL53LX_read_p2p_data+0x1f2>
			VL53LX_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 80043f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f2:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 80043f6:	f8a3 22de 	strh.w	r2, [r3, #734]	; 0x2de
	}



	if (status == VL53LX_ERROR_NONE)
 80043fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d108      	bne.n	8004414 <VL53LX_read_p2p_data+0x20c>
		status =
			VL53LX_get_mode_mitigation_roi(
 8004402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004404:	33bc      	adds	r3, #188	; 0xbc
 8004406:	4619      	mov	r1, r3
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f91a 	bl	8004642 <VL53LX_get_mode_mitigation_roi>
 800440e:	4603      	mov	r3, r0
 8004410:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 8004414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004416:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d114      	bne.n	8004448 <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 800441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004420:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10f      	bne.n	8004448 <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8004428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800442e:	011b      	lsls	r3, r3, #4
 8004430:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8004432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004434:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8004438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8004442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004444:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 8004448:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800444c:	4618      	mov	r0, r3
 800444e:	3734      	adds	r7, #52	; 0x34
 8004450:	46bd      	mov	sp, r7
 8004452:	bd90      	pop	{r4, r7, pc}

08004454 <VL53LX_set_inter_measurement_period_ms>:


VL53LX_Error VL53LX_set_inter_measurement_period_ms(
	VL53LX_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800445e:	2300      	movs	r3, #0
 8004460:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3318      	adds	r3, #24
 8004466:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 800446e:	3304      	adds	r3, #4
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <VL53LX_set_inter_measurement_period_ms+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8004476:	23f1      	movs	r3, #241	; 0xf1
 8004478:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE) {
 800447a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10e      	bne.n	80044a0 <VL53LX_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 800448e:	3304      	adds	r3, #4
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
	}

	LOG_FUNCTION_END(status);

	return status;
 80044a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <VL53LX_set_timeouts_us>:
VL53LX_Error VL53LX_set_timeouts_us(
	VL53LX_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af02      	add	r7, sp, #8
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80044be:	2300      	movs	r3, #0
 80044c0:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	3318      	adds	r3, #24
 80044c6:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f8b3 32de 	ldrh.w	r3, [r3, #734]	; 0x2de
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <VL53LX_set_timeouts_us+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80044d2:	23f1      	movs	r3, #241	; 0xf1
 80044d4:	75fb      	strb	r3, [r7, #23]

	if (status == VL53LX_ERROR_NONE) {
 80044d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d11b      	bne.n	8004516 <VL53LX_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	611a      	str	r2, [r3, #16]

		status =
		VL53LX_calc_timeout_register_values(
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f8b3 12de 	ldrh.w	r1, [r3, #734]	; 0x2de
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	f203 331e 	addw	r3, r3, #798	; 0x31e
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	f502 724d 	add.w	r2, r2, #820	; 0x334
 8004502:	9201      	str	r2, [sp, #4]
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	460b      	mov	r3, r1
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	68b8      	ldr	r0, [r7, #8]
 800450e:	f004 ff42 	bl	8009396 <VL53LX_calc_timeout_register_values>
 8004512:	4603      	mov	r3, r0
 8004514:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8004516:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <VL53LX_get_timeouts_us>:
VL53LX_Error VL53LX_get_timeouts_us(
	VL53LX_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b088      	sub	sp, #32
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	607a      	str	r2, [r7, #4]
 800452e:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004530:	2300      	movs	r3, #0
 8004532:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev =
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3318      	adds	r3, #24
 8004538:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 800453a:	2300      	movs	r3, #0
 800453c:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 800453e:	2300      	movs	r3, #0
 8004540:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	f8b3 32de 	ldrh.w	r3, [r3, #734]	; 0x2de
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <VL53LX_get_timeouts_us+0x2e>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800454c:	23f1      	movs	r3, #241	; 0xf1
 800454e:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 8004550:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d14a      	bne.n	80045ee <VL53LX_get_timeouts_us+0xcc>


		macro_period_us =
			VL53LX_calc_macro_period_us(
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	f8b3 22de 	ldrh.w	r2, [r3, #734]	; 0x2de
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 8004564:	4619      	mov	r1, r3
 8004566:	4610      	mov	r0, r2
 8004568:	f004 fd8e 	bl	8009088 <VL53LX_calc_macro_period_us>
 800456c:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53LX_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	f893 3325 	ldrb.w	r3, [r3, #805]	; 0x325
			VL53LX_calc_timeout_us(
 8004574:	6979      	ldr	r1, [r7, #20]
 8004576:	4618      	mov	r0, r3
 8004578:	f004 fe4d 	bl	8009216 <VL53LX_calc_timeout_us>
 800457c:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
		timeout_encoded =
 8004588:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800458a:	8a7b      	ldrh	r3, [r7, #18]
 800458c:	021b      	lsls	r3, r3, #8
 800458e:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8004596:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8004598:	4413      	add	r3, r2
 800459a:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 800459c:	8a7b      	ldrh	r3, [r7, #18]
 800459e:	6979      	ldr	r1, [r7, #20]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f004 fe9d 	bl	80092e0 <VL53LX_calc_decoded_timeout_us>
 80045a6:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
		timeout_encoded =
 80045b2:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 80045b4:	8a7b      	ldrh	r3, [r7, #18]
 80045b6:	021b      	lsls	r3, r3, #8
 80045b8:	b29a      	uxth	r2, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 80045c0:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 80045c2:	4413      	add	r3, r2
 80045c4:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 80045c6:	8a7b      	ldrh	r3, [r7, #18]
 80045c8:	6979      	ldr	r1, [r7, #20]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f004 fe88 	bl	80092e0 <VL53LX_calc_decoded_timeout_us>
 80045d0:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 80045ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3720      	adds	r7, #32
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <VL53LX_set_user_zone>:


VL53LX_Error VL53LX_set_user_zone(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *puser_zone)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b084      	sub	sp, #16
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
 8004602:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004604:	2300      	movs	r3, #0
 8004606:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3318      	adds	r3, #24
 800460c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53LX_encode_row_col(
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	7858      	ldrb	r0, [r3, #1]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	7819      	ldrb	r1, [r3, #0]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	f203 335b 	addw	r3, r3, #859	; 0x35b
 800461c:	461a      	mov	r2, r3
 800461e:	f005 fe94 	bl	800a34a <VL53LX_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53LX_encode_zone_size(
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	7898      	ldrb	r0, [r3, #2]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	78d9      	ldrb	r1, [r3, #3]
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 8004630:	461a      	mov	r2, r3
 8004632:	f005 fec9 	bl	800a3c8 <VL53LX_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8004636:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <VL53LX_get_mode_mitigation_roi>:


VL53LX_Error VL53LX_get_mode_mitigation_roi(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *pmm_roi)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b086      	sub	sp, #24
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800464c:	2300      	movs	r3, #0
 800464e:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	3318      	adds	r3, #24
 8004654:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8004656:	2300      	movs	r3, #0
 8004658:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 800465a:	2300      	movs	r3, #0
 800465c:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 800465e:	2300      	movs	r3, #0
 8004660:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53LX_decode_row_col(
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f893 33c2 	ldrb.w	r3, [r3, #962]	; 0x3c2
 8004668:	f107 020e 	add.w	r2, r7, #14
 800466c:	f107 010d 	add.w	r1, r7, #13
 8004670:	4618      	mov	r0, r3
 8004672:	f008 f883 	bl	800c77c <VL53LX_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8004676:	7bba      	ldrb	r2, [r7, #14]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 800467c:	7b7a      	ldrb	r2, [r7, #13]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	f893 33c3 	ldrb.w	r3, [r3, #963]	; 0x3c3
 8004688:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 800468a:	7bfb      	ldrb	r3, [r7, #15]
 800468c:	091b      	lsrs	r3, r3, #4
 800468e:	b2da      	uxtb	r2, r3
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8004694:	7bfb      	ldrb	r3, [r7, #15]
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	b2da      	uxtb	r2, r3
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 80046a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <VL53LX_init_zone_config_histogram_bins>:

VL53LX_Error VL53LX_init_zone_config_histogram_bins(
	VL53LX_zone_config_t   *pdata)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80046b4:	2300      	movs	r3, #0
 80046b6:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 80046b8:	2300      	movs	r3, #0
 80046ba:	73fb      	strb	r3, [r7, #15]
 80046bc:	e008      	b.n	80046d0 <VL53LX_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
 80046be:	7bfb      	ldrb	r3, [r7, #15]
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	4413      	add	r3, r2
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	for (i = 0; i < pdata->max_zones; i++)
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
 80046cc:	3301      	adds	r3, #1
 80046ce:	73fb      	strb	r3, [r7, #15]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	7bfa      	ldrb	r2, [r7, #15]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d3f1      	bcc.n	80046be <VL53LX_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 80046da:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <VL53LX_set_zone_config>:

VL53LX_Error VL53LX_set_zone_config(
	VL53LX_DEV                 Dev,
	VL53LX_zone_config_t      *pzone_cfg)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b084      	sub	sp, #16
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80046f4:	2300      	movs	r3, #0
 80046f6:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3318      	adds	r3, #24
 80046fc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f103 00de 	add.w	r0, r3, #222	; 0xde
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	331c      	adds	r3, #28
 8004708:	2214      	movs	r2, #20
 800470a:	4619      	mov	r1, r3
 800470c:	f010 fa6a 	bl	8014be4 <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	781a      	ldrb	r2, [r3, #0]
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	785a      	ldrb	r2, [r3, #1]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

	status = VL53LX_init_zone_config_histogram_bins(&pdev->zone_cfg);
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	33c2      	adds	r3, #194	; 0xc2
 8004728:	4618      	mov	r0, r3
 800472a:	f7ff ffbf 	bl	80046ac <VL53LX_init_zone_config_histogram_bins>
 800472e:	4603      	mov	r3, r0
 8004730:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	785b      	ldrb	r3, [r3, #1]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d104      	bne.n	8004744 <VL53LX_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
 8004742:	e00f      	b.n	8004764 <VL53LX_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53LX_MAX_USER_ZONES)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	785b      	ldrb	r3, [r3, #1]
 8004748:	2b04      	cmp	r3, #4
 800474a:	d807      	bhi.n	800475c <VL53LX_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	785b      	ldrb	r3, [r3, #1]
 8004750:	3301      	adds	r3, #1
 8004752:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
 800475a:	e003      	b.n	8004764 <VL53LX_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2206      	movs	r2, #6
 8004760:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
				VL53LX_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 8004764:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <VL53LX_get_preset_mode_timing_cfg>:
	VL53LX_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8004770:	b480      	push	{r7}
 8004772:	b087      	sub	sp, #28
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	607a      	str	r2, [r7, #4]
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	460b      	mov	r3, r1
 800477e:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004780:	2300      	movs	r3, #0
 8004782:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	3318      	adds	r3, #24
 8004788:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 800478a:	7afb      	ldrb	r3, [r7, #11]
 800478c:	2b21      	cmp	r3, #33	; 0x21
 800478e:	d030      	beq.n	80047f2 <VL53LX_get_preset_mode_timing_cfg+0x82>
 8004790:	2b21      	cmp	r3, #33	; 0x21
 8004792:	dc43      	bgt.n	800481c <VL53LX_get_preset_mode_timing_cfg+0xac>
 8004794:	2b1b      	cmp	r3, #27
 8004796:	d002      	beq.n	800479e <VL53LX_get_preset_mode_timing_cfg+0x2e>
 8004798:	2b1e      	cmp	r3, #30
 800479a:	d015      	beq.n	80047c8 <VL53LX_get_preset_mode_timing_cfg+0x58>
 800479c:	e03e      	b.n	800481c <VL53LX_get_preset_mode_timing_cfg+0xac>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
		*pdss_config__target_total_rate_mcps =
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
		*pphasecal_config_timeout_us =
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
		*pmm_config_timeout_us =
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*prange_config_timeout_us =
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	601a      	str	r2, [r3, #0]

	break;
 80047c6:	e02c      	b.n	8004822 <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
		*pdss_config__target_total_rate_mcps =
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
		*pphasecal_config_timeout_us =
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
		*pmm_config_timeout_us =
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*prange_config_timeout_us =
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	601a      	str	r2, [r3, #0]
	break;
 80047f0:	e017      	b.n	8004822 <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
		*pdss_config__target_total_rate_mcps =
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
		*pphasecal_config_timeout_us =
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
		*pmm_config_timeout_us =
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*prange_config_timeout_us =
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	601a      	str	r2, [r3, #0]
	break;
 800481a:	e002      	b.n	8004822 <VL53LX_get_preset_mode_timing_cfg+0xb2>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 800481c:	23fc      	movs	r3, #252	; 0xfc
 800481e:	75fb      	strb	r3, [r7, #23]
		break;
 8004820:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8004822:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004826:	4618      	mov	r0, r3
 8004828:	371c      	adds	r7, #28
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <VL53LX_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b096      	sub	sp, #88	; 0x58
 8004836:	af06      	add	r7, sp, #24
 8004838:	60f8      	str	r0, [r7, #12]
 800483a:	607b      	str	r3, [r7, #4]
 800483c:	460b      	mov	r3, r1
 800483e:	72fb      	strb	r3, [r7, #11]
 8004840:	4613      	mov	r3, r2
 8004842:	813b      	strh	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004844:	2300      	movs	r3, #0
 8004846:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53LX_LLDriverData_t *pdev =
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	3318      	adds	r3, #24
 800484e:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004856:	637b      	str	r3, [r7, #52]	; 0x34
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_hist_post_process_config_t *phistpostprocess =
 8004858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800485e:	633b      	str	r3, [r7, #48]	; 0x30
			&(pdev->histpostprocess);

	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8004860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004862:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8004866:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53LX_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8004868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486a:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800486e:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8004870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004872:	f203 331e 	addw	r3, r3, #798	; 0x31e
 8004876:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8004878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800487e:	623b      	str	r3, [r7, #32]
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8004880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004882:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8004886:	61fb      	str	r3, [r7, #28]
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8004888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800488e:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 8004890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004892:	33c2      	adds	r3, #194	; 0xc2
 8004894:	617b      	str	r3, [r7, #20]
	VL53LX_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8004896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004898:	33f8      	adds	r3, #248	; 0xf8
 800489a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 800489c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489e:	7afa      	ldrb	r2, [r7, #11]
 80048a0:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 80048a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048a6:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 80048a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048ac:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80048ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80048b2:	615a      	str	r2, [r3, #20]



	VL53LX_init_ll_driver_state(
 80048b4:	2103      	movs	r1, #3
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f003 fc2a 	bl	8008110 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 80048bc:	7afb      	ldrb	r3, [r7, #11]
 80048be:	2b21      	cmp	r3, #33	; 0x21
 80048c0:	d02e      	beq.n	8004920 <VL53LX_set_preset_mode+0xee>
 80048c2:	2b21      	cmp	r3, #33	; 0x21
 80048c4:	dc40      	bgt.n	8004948 <VL53LX_set_preset_mode+0x116>
 80048c6:	2b1b      	cmp	r3, #27
 80048c8:	d002      	beq.n	80048d0 <VL53LX_set_preset_mode+0x9e>
 80048ca:	2b1e      	cmp	r3, #30
 80048cc:	d014      	beq.n	80048f8 <VL53LX_set_preset_mode+0xc6>
 80048ce:	e03b      	b.n	8004948 <VL53LX_set_preset_mode+0x116>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:

		status = VL53LX_preset_mode_histogram_long_range(
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	9304      	str	r3, [sp, #16]
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	9303      	str	r3, [sp, #12]
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	9302      	str	r3, [sp, #8]
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	9301      	str	r3, [sp, #4]
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048ec:	f003 f941 	bl	8007b72 <VL53LX_preset_mode_histogram_long_range>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80048f6:	e02b      	b.n	8004950 <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53LX_preset_mode_histogram_medium_range(
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	9304      	str	r3, [sp, #16]
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	9303      	str	r3, [sp, #12]
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	9302      	str	r3, [sp, #8]
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	9301      	str	r3, [sp, #4]
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004910:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004912:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004914:	f003 f9cb 	bl	8007cae <VL53LX_preset_mode_histogram_medium_range>
 8004918:	4603      	mov	r3, r0
 800491a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800491e:	e017      	b.n	8004950 <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53LX_preset_mode_histogram_short_range(
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	9304      	str	r3, [sp, #16]
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	9303      	str	r3, [sp, #12]
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	9302      	str	r3, [sp, #8]
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	9301      	str	r3, [sp, #4]
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	9300      	str	r3, [sp, #0]
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004938:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800493a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800493c:	f003 fa55 	bl	8007dea <VL53LX_preset_mode_histogram_short_range>
 8004940:	4603      	mov	r3, r0
 8004942:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004946:	e003      	b.n	8004950 <VL53LX_set_preset_mode+0x11e>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8004948:	23fc      	movs	r3, #252	; 0xfc
 800494a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		break;
 800494e:	bf00      	nop

	}



	if (status == VL53LX_ERROR_NONE) {
 8004950:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004954:	2b00      	cmp	r3, #0
 8004956:	d105      	bne.n	8004964 <VL53LX_set_preset_mode+0x132>

		pstatic->dss_config__target_total_rate_mcps =
 8004958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495a:	893a      	ldrh	r2, [r7, #8]
 800495c:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 800495e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004960:	893a      	ldrh	r2, [r7, #8]
 8004962:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53LX_ERROR_NONE)
 8004964:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004968:	2b00      	cmp	r3, #0
 800496a:	d108      	bne.n	800497e <VL53LX_set_preset_mode+0x14c>
		status =
			VL53LX_set_timeouts_us(
 800496c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800496e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004970:	6879      	ldr	r1, [r7, #4]
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f7ff fd9c 	bl	80044b0 <VL53LX_set_timeouts_us>
 8004978:	4603      	mov	r3, r0
 800497a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53LX_ERROR_NONE)
 800497e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004982:	2b00      	cmp	r3, #0
 8004984:	d106      	bne.n	8004994 <VL53LX_set_preset_mode+0x162>
		status =
			VL53LX_set_inter_measurement_period_ms(
 8004986:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f7ff fd63 	bl	8004454 <VL53LX_set_inter_measurement_period_ms>
 800498e:	4603      	mov	r3, r0
 8004990:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8004994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004996:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 800499a:	3301      	adds	r3, #1
 800499c:	b2da      	uxtb	r2, r3
 800499e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a0:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 80049a4:	4619      	mov	r1, r3
 80049a6:	4610      	mov	r0, r2
 80049a8:	f003 ffc8 	bl	800893c <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 80049ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3740      	adds	r7, #64	; 0x40
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <VL53LX_init_and_start_range>:

VL53LX_Error VL53LX_init_and_start_range(
	VL53LX_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53LX_DeviceConfigLevel       device_config_level)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b0d2      	sub	sp, #328	; 0x148
 80049bc:	af00      	add	r7, sp, #0
 80049be:	1d3b      	adds	r3, r7, #4
 80049c0:	6018      	str	r0, [r3, #0]
 80049c2:	4608      	mov	r0, r1
 80049c4:	4611      	mov	r1, r2
 80049c6:	1cfb      	adds	r3, r7, #3
 80049c8:	4602      	mov	r2, r0
 80049ca:	701a      	strb	r2, [r3, #0]
 80049cc:	1cbb      	adds	r3, r7, #2
 80049ce:	460a      	mov	r2, r1
 80049d0:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80049d2:	2300      	movs	r3, #0
 80049d4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80049d8:	1d3b      	adds	r3, r7, #4
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3318      	adds	r3, #24
 80049de:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	VL53LX_LLDriverResults_t  *pres =
 80049e2:	1d3b      	adds	r3, r7, #4
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80049ea:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53LXDevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 80049ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80049f2:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 80049f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	VL53LX_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 80049fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80049fe:	3348      	adds	r3, #72	; 0x48
 8004a00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8004a04:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004a08:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8004a0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8004a10:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004a14:	f203 331e 	addw	r3, r3, #798	; 0x31e
 8004a18:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8004a1c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004a20:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8004a24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8004a28:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004a2c:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8004a30:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8004a34:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004a38:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004a3c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	VL53LX_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8004a40:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004a44:	332c      	adds	r3, #44	; 0x2c
 8004a46:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8004a4a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004a4e:	3348      	adds	r3, #72	; 0x48
 8004a50:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8004a54:	f107 030c 	add.w	r3, r7, #12
 8004a58:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint16_t i                          = 0;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t i2c_index                  = 0;
 8004a62:	2300      	movs	r3, #0
 8004a64:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 8004a74:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004a78:	1cfa      	adds	r2, r7, #3
 8004a7a:	7812      	ldrb	r2, [r2, #0]
 8004a7c:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 8004a7e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004a82:	791b      	ldrb	r3, [r3, #4]
 8004a84:	b25b      	sxtb	r3, r3
 8004a86:	f003 030f 	and.w	r3, r3, #15
 8004a8a:	b25a      	sxtb	r2, r3
		VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8004a8c:	1cfb      	adds	r3, r7, #3
 8004a8e:	f993 3000 	ldrsb.w	r3, [r3]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	b25b      	sxtb	r3, r3
 8004a96:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8004a98:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004a9c:	711a      	strb	r2, [r3, #4]


	status =
		VL53LX_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 8004a9e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004aa2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
		VL53LX_set_user_zone(
 8004aa6:	3336      	adds	r3, #54	; 0x36
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8004aae:	4413      	add	r3, r2
 8004ab0:	1d9a      	adds	r2, r3, #6
 8004ab2:	1d3b      	adds	r3, r7, #4
 8004ab4:	4611      	mov	r1, r2
 8004ab6:	6818      	ldr	r0, [r3, #0]
 8004ab8:	f7ff fd9f 	bl	80045fa <VL53LX_set_user_zone>
 8004abc:	4603      	mov	r3, r0
 8004abe:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 8004ac2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004ac6:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d016      	beq.n	8004afc <VL53LX_init_and_start_range+0x144>
		status =
		VL53LX_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id])
 8004ace:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004ad2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004ad6:	461a      	mov	r2, r3
		VL53LX_set_zone_dss_config(
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8004ae4:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8004ae8:	4413      	add	r3, r2
 8004aea:	1c9a      	adds	r2, r3, #2
 8004aec:	1d3b      	adds	r3, r7, #4
 8004aee:	4611      	mov	r1, r2
 8004af0:	6818      	ldr	r0, [r3, #0]
 8004af2:	f001 fad7 	bl	80060a4 <VL53LX_set_zone_dss_config>
 8004af6:	4603      	mov	r3, r0
 8004af8:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 8004afc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b00:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10d      	bne.n	8004b28 <VL53LX_init_and_start_range+0x170>
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 8004b0c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d107      	bne.n	8004b28 <VL53LX_init_and_start_range+0x170>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8004b18:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b1c:	f8b3 22a4 	ldrh.w	r2, [r3, #676]	; 0x2a4
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8004b20:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b24:	f8a3 2316 	strh.w	r2, [r3, #790]	; 0x316





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 8004b28:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b2c:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004b30:	3312      	adds	r3, #18
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2bff      	cmp	r3, #255	; 0xff
 8004b36:	d106      	bne.n	8004b46 <VL53LX_init_and_start_range+0x18e>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8004b38:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b3c:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004b40:	3312      	adds	r3, #18
 8004b42:	2200      	movs	r2, #0
 8004b44:	701a      	strb	r2, [r3, #0]


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8004b46:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b4a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004b4e:	3311      	adds	r3, #17
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d133      	bne.n	8004bbe <VL53LX_init_and_start_range+0x206>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8004b56:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b5a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004b5e:	3312      	adds	r3, #18
 8004b60:	781b      	ldrb	r3, [r3, #0]
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d12b      	bne.n	8004bbe <VL53LX_init_and_start_range+0x206>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8004b66:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b6a:	f893 2320 	ldrb.w	r2, [r3, #800]	; 0x320
		pdev->low_power_auto_data.saved_interrupt_config =
 8004b6e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b72:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004b76:	3313      	adds	r3, #19
 8004b78:	701a      	strb	r2, [r3, #0]

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8004b7a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

		if ((pdev->dyn_cfg.system__sequence_config & (
 8004b84:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b88:	f893 335d 	ldrb.w	r3, [r3, #861]	; 0x35d
 8004b8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d109      	bne.n	8004ba8 <VL53LX_init_and_start_range+0x1f0>
			VL53LX_SEQUENCE_MM1_EN | VL53LX_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 8004b94:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004b98:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004b9c:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 8004b9e:	b21a      	sxth	r2, r3
 8004ba0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004ba4:	825a      	strh	r2, [r3, #18]
 8004ba6:	e003      	b.n	8004bb0 <VL53LX_init_and_start_range+0x1f8>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8004ba8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004bac:	2200      	movs	r2, #0
 8004bae:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 8004bb0:	1cbb      	adds	r3, r7, #2
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d802      	bhi.n	8004bbe <VL53LX_init_and_start_range+0x206>
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8004bb8:	1cbb      	adds	r3, r7, #2
 8004bba:	2205      	movs	r2, #5
 8004bbc:	701a      	strb	r2, [r3, #0]
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8004bbe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004bc2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004bc6:	3311      	adds	r3, #17
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d114      	bne.n	8004bf8 <VL53LX_init_and_start_range+0x240>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8004bce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004bd2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004bd6:	3312      	adds	r3, #18
 8004bd8:	781b      	ldrb	r3, [r3, #0]
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d10c      	bne.n	8004bf8 <VL53LX_init_and_start_range+0x240>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8004bde:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004be2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004be6:	3313      	adds	r3, #19
 8004be8:	781a      	ldrb	r2, [r3, #0]
		pdev->gen_cfg.system__interrupt_config_gpio =
 8004bea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004bee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


		device_config_level = VL53LX_DEVICECONFIGLEVEL_FULL;
 8004bf2:	1cbb      	adds	r3, r7, #2
 8004bf4:	2206      	movs	r2, #6
 8004bf6:	701a      	strb	r2, [r3, #0]





	if (status == VL53LX_ERROR_NONE)
 8004bf8:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d106      	bne.n	8004c0e <VL53LX_init_and_start_range+0x256>
		status = VL53LX_save_cfg_data(Dev);
 8004c00:	1d3b      	adds	r3, r7, #4
 8004c02:	6818      	ldr	r0, [r3, #0]
 8004c04:	f005 fe8e 	bl	800a924 <VL53LX_save_cfg_data>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147



	switch (device_config_level) {
 8004c0e:	1cbb      	adds	r3, r7, #2
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	3b01      	subs	r3, #1
 8004c14:	2b05      	cmp	r3, #5
 8004c16:	d827      	bhi.n	8004c68 <VL53LX_init_and_start_range+0x2b0>
 8004c18:	a201      	add	r2, pc, #4	; (adr r2, 8004c20 <VL53LX_init_and_start_range+0x268>)
 8004c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1e:	bf00      	nop
 8004c20:	08004c61 	.word	0x08004c61
 8004c24:	08004c59 	.word	0x08004c59
 8004c28:	08004c51 	.word	0x08004c51
 8004c2c:	08004c49 	.word	0x08004c49
 8004c30:	08004c41 	.word	0x08004c41
 8004c34:	08004c39 	.word	0x08004c39
	case VL53LX_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53LX_STATIC_NVM_MANAGED_I2C_INDEX;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8004c3e:	e017      	b.n	8004c70 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53LX_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8004c40:	230d      	movs	r3, #13
 8004c42:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8004c46:	e013      	b.n	8004c70 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53LX_STATIC_CONFIG_I2C_INDEX;
 8004c48:	2324      	movs	r3, #36	; 0x24
 8004c4a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8004c4e:	e00f      	b.n	8004c70 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53LX_GENERAL_CONFIG_I2C_INDEX;
 8004c50:	2344      	movs	r3, #68	; 0x44
 8004c52:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8004c56:	e00b      	b.n	8004c70 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53LX_TIMING_CONFIG_I2C_INDEX;
 8004c58:	235a      	movs	r3, #90	; 0x5a
 8004c5a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8004c5e:	e007      	b.n	8004c70 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53LX_DYNAMIC_CONFIG_I2C_INDEX;
 8004c60:	2371      	movs	r3, #113	; 0x71
 8004c62:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8004c66:	e003      	b.n	8004c70 <VL53LX_init_and_start_range+0x2b8>
	default:
		i2c_index = VL53LX_SYSTEM_CONTROL_I2C_INDEX;
 8004c68:	2383      	movs	r3, #131	; 0x83
 8004c6a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8004c6e:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 8004c70:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004c74:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 8004c78:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 8004c7c:	f107 030c 	add.w	r3, r7, #12
 8004c80:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8004c84:	2300      	movs	r3, #0
 8004c86:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8004c8a:	e00b      	b.n	8004ca4 <VL53LX_init_and_start_range+0x2ec>
		*pbuffer++ = 0;
 8004c8c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8004c96:	2200      	movs	r2, #0
 8004c98:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8004c9a:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8004ca4:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8004ca8:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d3ed      	bcc.n	8004c8c <VL53LX_init_and_start_range+0x2d4>



	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_FULL &&
 8004cb0:	1cbb      	adds	r3, r7, #2
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2b05      	cmp	r3, #5
 8004cb6:	d917      	bls.n	8004ce8 <VL53LX_init_and_start_range+0x330>
 8004cb8:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d113      	bne.n	8004ce8 <VL53LX_init_and_start_range+0x330>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004cc0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004cc4:	f1c3 0301 	rsb	r3, r3, #1
 8004cc8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004ccc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_static_nvm_managed(
 8004cd0:	f107 020c 	add.w	r2, r7, #12
 8004cd4:	4413      	add	r3, r2
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	210b      	movs	r1, #11
 8004cda:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8004cde:	f00a fdad 	bl	800f83c <VL53LX_i2c_encode_static_nvm_managed>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8004ce8:	1cbb      	adds	r3, r7, #2
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2b04      	cmp	r3, #4
 8004cee:	d917      	bls.n	8004d20 <VL53LX_init_and_start_range+0x368>
 8004cf0:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d113      	bne.n	8004d20 <VL53LX_init_and_start_range+0x368>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004cf8:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004cfc:	f1c3 030d 	rsb	r3, r3, #13
 8004d00:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004d04:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_customer_nvm_managed(
 8004d08:	f107 020c 	add.w	r2, r7, #12
 8004d0c:	4413      	add	r3, r2
 8004d0e:	461a      	mov	r2, r3
 8004d10:	2117      	movs	r1, #23
 8004d12:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8004d16:	f00a fe6d 	bl	800f9f4 <VL53LX_i2c_encode_customer_nvm_managed>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8004d20:	1cbb      	adds	r3, r7, #2
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b03      	cmp	r3, #3
 8004d26:	d917      	bls.n	8004d58 <VL53LX_init_and_start_range+0x3a0>
 8004d28:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d113      	bne.n	8004d58 <VL53LX_init_and_start_range+0x3a0>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004d30:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004d34:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8004d38:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_static_config(
				pstatic,
				VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004d3c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_static_config(
 8004d40:	f107 020c 	add.w	r2, r7, #12
 8004d44:	4413      	add	r3, r2
 8004d46:	461a      	mov	r2, r3
 8004d48:	2120      	movs	r1, #32
 8004d4a:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8004d4e:	f00a ffb3 	bl	800fcb8 <VL53LX_i2c_encode_static_config>
 8004d52:	4603      	mov	r3, r0
 8004d54:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8004d58:	1cbb      	adds	r3, r7, #2
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d917      	bls.n	8004d90 <VL53LX_init_and_start_range+0x3d8>
 8004d60:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d113      	bne.n	8004d90 <VL53LX_init_and_start_range+0x3d8>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004d68:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004d6c:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 8004d70:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_general_config(
				pgeneral,
				VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004d74:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_general_config(
 8004d78:	f107 020c 	add.w	r2, r7, #12
 8004d7c:	4413      	add	r3, r2
 8004d7e:	461a      	mov	r2, r3
 8004d80:	2116      	movs	r1, #22
 8004d82:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8004d86:	f00b f87a 	bl	800fe7e <VL53LX_i2c_encode_general_config>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8004d90:	1cbb      	adds	r3, r7, #2
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d917      	bls.n	8004dc8 <VL53LX_init_and_start_range+0x410>
 8004d98:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d113      	bne.n	8004dc8 <VL53LX_init_and_start_range+0x410>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004da0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004da4:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8004da8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_timing_config(
				ptiming,
				VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004dac:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_timing_config(
 8004db0:	f107 020c 	add.w	r2, r7, #12
 8004db4:	4413      	add	r3, r2
 8004db6:	461a      	mov	r2, r3
 8004db8:	2117      	movs	r1, #23
 8004dba:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8004dbe:	f00b f8e2 	bl	800ff86 <VL53LX_i2c_encode_timing_config>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8004dc8:	1cbb      	adds	r3, r7, #2
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d036      	beq.n	8004e3e <VL53LX_init_and_start_range+0x486>
 8004dd0:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d132      	bne.n	8004e3e <VL53LX_init_and_start_range+0x486>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004dd8:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004ddc:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 8004de0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53LX_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 8004de4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004de8:	791b      	ldrb	r3, [r3, #4]
 8004dea:	f003 0320 	and.w	r3, r3, #32
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d017      	beq.n	8004e22 <VL53LX_init_and_start_range+0x46a>
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 8004df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004df6:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 8004df8:	f043 0301 	orr.w	r3, r3, #1
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e02:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 8004e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e08:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 8004e0a:	f043 0301 	orr.w	r3, r3, #1
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e14:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 8004e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e1a:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 8004e1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e20:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53LX_i2c_encode_dynamic_config(
				pdynamic,
				VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004e22:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_dynamic_config(
 8004e26:	f107 020c 	add.w	r2, r7, #12
 8004e2a:	4413      	add	r3, r2
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	2112      	movs	r1, #18
 8004e30:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8004e34:	f00b f929 	bl	801008a <VL53LX_i2c_encode_dynamic_config>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (status == VL53LX_ERROR_NONE) {
 8004e3e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d113      	bne.n	8004e6e <VL53LX_init_and_start_range+0x4b6>

		i2c_buffer_offset_bytes =
 8004e46:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004e4a:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 8004e4e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_system_control(
				psystem,
				VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004e52:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_system_control(
 8004e56:	f107 020c 	add.w	r2, r7, #12
 8004e5a:	4413      	add	r3, r2
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	2105      	movs	r1, #5
 8004e60:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8004e64:	f00b f996 	bl	8010194 <VL53LX_i2c_encode_system_control>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}



	if (status == VL53LX_ERROR_NONE) {
 8004e6e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10c      	bne.n	8004e90 <VL53LX_init_and_start_range+0x4d8>
		status =
			VL53LX_WriteMulti(
 8004e76:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8004e7a:	f107 020c 	add.w	r2, r7, #12
 8004e7e:	f8b7 113c 	ldrh.w	r1, [r7, #316]	; 0x13c
 8004e82:	1d38      	adds	r0, r7, #4
 8004e84:	6800      	ldr	r0, [r0, #0]
 8004e86:	f00c fc55 	bl	8011734 <VL53LX_WriteMulti>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53LX_ERROR_NONE)
 8004e90:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d106      	bne.n	8004ea6 <VL53LX_init_and_start_range+0x4ee>
		status = VL53LX_update_ll_driver_rd_state(Dev);
 8004e98:	1d3b      	adds	r3, r7, #4
 8004e9a:	6818      	ldr	r0, [r3, #0]
 8004e9c:	f003 f968 	bl	8008170 <VL53LX_update_ll_driver_rd_state>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	if (status == VL53LX_ERROR_NONE)
 8004ea6:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d106      	bne.n	8004ebc <VL53LX_init_and_start_range+0x504>
		status = VL53LX_update_ll_driver_cfg_state(Dev);
 8004eae:	1d3b      	adds	r3, r7, #4
 8004eb0:	6818      	ldr	r0, [r3, #0]
 8004eb2:	f003 fafd 	bl	80084b0 <VL53LX_update_ll_driver_cfg_state>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	LOG_FUNCTION_END(status);

	return status;
 8004ebc:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop

08004ecc <VL53LX_stop_range>:


VL53LX_Error VL53LX_stop_range(
	VL53LX_DEV     Dev)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev =
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3318      	adds	r3, #24
 8004edc:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004ee4:	60fb      	str	r3, [r7, #12]
			VL53LXDevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8004eec:	b25b      	sxtb	r3, r3
 8004eee:	f003 030f 	and.w	r3, r3, #15
 8004ef2:	b25b      	sxtb	r3, r3
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8004ef4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ef8:	b25b      	sxtb	r3, r3
 8004efa:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364
			 VL53LX_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53LX_set_system_control(
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004f08:	4619      	mov	r1, r3
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f00b f97d 	bl	801020a <VL53LX_set_system_control>
 8004f10:	4603      	mov	r3, r0
 8004f12:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53LX_init_ll_driver_state(
 8004f26:	2103      	movs	r1, #3
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f003 f8f1 	bl	8008110 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8004f34:	3301      	adds	r3, #1
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8004f3e:	4619      	mov	r1, r3
 8004f40:	4610      	mov	r0, r2
 8004f42:	f003 fcfb 	bl	800893c <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f003 fd2d 	bl	80089a6 <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004f52:	3311      	adds	r3, #17
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d102      	bne.n	8004f60 <VL53LX_stop_range+0x94>
		VL53LX_low_power_auto_data_stop_range(Dev);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f006 fddc 	bl	800bb18 <VL53LX_low_power_auto_data_stop_range>

	return status;
 8004f60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <VL53LX_get_measurement_results>:


VL53LX_Error VL53LX_get_measurement_results(
	VL53LX_DEV                     Dev,
	VL53LX_DeviceResultsLevel      device_results_level)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b0c8      	sub	sp, #288	; 0x120
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	1d3b      	adds	r3, r7, #4
 8004f74:	6018      	str	r0, [r3, #0]
 8004f76:	460a      	mov	r2, r1
 8004f78:	1cfb      	adds	r3, r7, #3
 8004f7a:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004f82:	1d3b      	adds	r3, r7, #4
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	3318      	adds	r3, #24
 8004f88:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_system_results_t   *psystem_results = &(pdev->sys_results);
 8004f8c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004f90:	f203 3366 	addw	r3, r3, #870	; 0x366
 8004f94:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53LX_core_results_t     *pcore_results   = &(pdev->core_results);
 8004f98:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004f9c:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8004fa0:	3318      	adds	r3, #24
 8004fa2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53LX_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8004fa6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004faa:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 8004fae:	331c      	adds	r3, #28
 8004fb0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53LX_SYSTEM_RESULTS_I2C_INDEX;
 8004fb4:	2388      	movs	r3, #136	; 0x88
 8004fb6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 8004fc6:	1cfb      	adds	r3, r7, #3
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d008      	beq.n	8004fe0 <VL53LX_get_measurement_results+0x74>
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d10d      	bne.n	8004fee <VL53LX_get_measurement_results+0x82>
	case VL53LX_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8004fd2:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8004fd6:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 8004fda:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53LX_DEBUG_RESULTS_I2C_INDEX +
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8004fde:	e00a      	b.n	8004ff6 <VL53LX_get_measurement_results+0x8a>
	case VL53LX_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 8004fe0:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8004fe4:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 8004fe8:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53LX_CORE_RESULTS_I2C_INDEX +
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8004fec:	e003      	b.n	8004ff6 <VL53LX_get_measurement_results+0x8a>
	default:
		i2c_buffer_size_bytes =
 8004fee:	232c      	movs	r3, #44	; 0x2c
 8004ff0:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8004ff4:	bf00      	nop
	}



	if (status == VL53LX_ERROR_NONE)
 8004ff6:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10c      	bne.n	8005018 <VL53LX_get_measurement_results+0xac>
		status =
			VL53LX_ReadMulti(
 8004ffe:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8005002:	f107 0208 	add.w	r2, r7, #8
 8005006:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 800500a:	1d38      	adds	r0, r7, #4
 800500c:	6800      	ldr	r0, [r0, #0]
 800500e:	f00c fbc7 	bl	80117a0 <VL53LX_ReadMulti>
 8005012:	4603      	mov	r3, r0
 8005014:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_FULL &&
 8005018:	1cfb      	adds	r3, r7, #3
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d917      	bls.n	8005050 <VL53LX_get_measurement_results+0xe4>
 8005020:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005024:	2b00      	cmp	r3, #0
 8005026:	d113      	bne.n	8005050 <VL53LX_get_measurement_results+0xe4>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005028:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800502c:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 8005030:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53LX_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_debug_results(
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8005034:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_debug_results(
 8005038:	f107 0208 	add.w	r2, r7, #8
 800503c:	4413      	add	r3, r2
 800503e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005042:	4619      	mov	r1, r3
 8005044:	2038      	movs	r0, #56	; 0x38
 8005046:	f00b fa5e 	bl	8010506 <VL53LX_i2c_decode_debug_results>
 800504a:	4603      	mov	r3, r0
 800504c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_UPTO_CORE &&
 8005050:	1cfb      	adds	r3, r7, #3
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d017      	beq.n	8005088 <VL53LX_get_measurement_results+0x11c>
 8005058:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800505c:	2b00      	cmp	r3, #0
 800505e:	d113      	bne.n	8005088 <VL53LX_get_measurement_results+0x11c>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005060:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8005064:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8005068:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53LX_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_core_results(
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800506c:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_core_results(
 8005070:	f107 0208 	add.w	r2, r7, #8
 8005074:	4413      	add	r3, r2
 8005076:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800507a:	4619      	mov	r1, r3
 800507c:	2021      	movs	r0, #33	; 0x21
 800507e:	f00b f9e1 	bl	8010444 <VL53LX_i2c_decode_core_results>
 8005082:	4603      	mov	r3, r0
 8005084:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53LX_ERROR_NONE) {
 8005088:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800508c:	2b00      	cmp	r3, #0
 800508e:	d110      	bne.n	80050b2 <VL53LX_get_measurement_results+0x146>

		i2c_buffer_offset_bytes = 0;
 8005090:	2300      	movs	r3, #0
 8005092:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53LX_i2c_decode_system_results(
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8005096:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_system_results(
 800509a:	f107 0208 	add.w	r2, r7, #8
 800509e:	4413      	add	r3, r2
 80050a0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80050a4:	4619      	mov	r1, r3
 80050a6:	202c      	movs	r0, #44	; 0x2c
 80050a8:	f00b f8d6 	bl	8010258 <VL53LX_i2c_decode_system_results>
 80050ac:	4603      	mov	r3, r0
 80050ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 80050b2:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <VL53LX_get_device_results>:

VL53LX_Error VL53LX_get_device_results(
	VL53LX_DEV                    Dev,
	VL53LX_DeviceResultsLevel     device_results_level,
	VL53LX_range_results_t       *prange_results)
{
 80050c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050c4:	b0a0      	sub	sp, #128	; 0x80
 80050c6:	af06      	add	r7, sp, #24
 80050c8:	60f8      	str	r0, [r7, #12]
 80050ca:	460b      	mov	r3, r1
 80050cc:	607a      	str	r2, [r7, #4]
 80050ce:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80050d0:	2300      	movs	r3, #0
 80050d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	VL53LX_LLDriverData_t *pdev =
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	3318      	adds	r3, #24
 80050da:	663b      	str	r3, [r7, #96]	; 0x60
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80050e2:	65fb      	str	r3, [r7, #92]	; 0x5c
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_range_results_t   *presults =
 80050e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050e6:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results);
	VL53LX_zone_objects_t    *pobjects =
 80050e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050ea:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80050ee:	657b      	str	r3, [r7, #84]	; 0x54
			&(pres->zone_results.VL53LX_p_003[0]);
	VL53LX_ll_driver_state_t *pstate   =
 80050f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050f2:	332c      	adds	r3, #44	; 0x2c
 80050f4:	653b      	str	r3, [r7, #80]	; 0x50
			&(pdev->ll_state);
	VL53LX_zone_config_t     *pzone_cfg =
 80050f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050f8:	33c2      	adds	r3, #194	; 0xc2
 80050fa:	64fb      	str	r3, [r7, #76]	; 0x4c
			&(pdev->zone_cfg);
	VL53LX_zone_hist_info_t  *phist_info =
 80050fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050fe:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8005102:	64bb      	str	r3, [r7, #72]	; 0x48
			&(pres->zone_hists.VL53LX_p_003[0]);

	VL53LX_dmax_calibration_data_t   dmax_cal;
	VL53LX_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 8005104:	f107 0314 	add.w	r3, r7, #20
 8005108:	647b      	str	r3, [r7, #68]	; 0x44
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 800510a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800510c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005110:	643b      	str	r3, [r7, #64]	; 0x40
	VL53LX_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 8005112:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005114:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005118:	63fb      	str	r3, [r7, #60]	; 0x3c
	VL53LX_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 800511a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800511c:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8005120:	3310      	adds	r3, #16
 8005122:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53LX_histogram_bin_data_t *pHD = &(pdev->hist_data);
 8005124:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005126:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800512a:	637b      	str	r3, [r7, #52]	; 0x34
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 800512c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800512e:	3348      	adds	r3, #72	; 0x48
 8005130:	633b      	str	r3, [r7, #48]	; 0x30
	VL53LX_zone_histograms_t *pZH = &(pres->zone_hists);
 8005132:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005134:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8005138:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53LX_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 800513a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800513c:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8005140:	331c      	adds	r3, #28
 8005142:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_range_data_t *pdata;

	LOG_FUNCTION_START("");


	if ((pdev->sys_ctrl.system__mode_start &
 8005144:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005146:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 8290 	beq.w	8005674 <VL53LX_get_device_results+0x5b4>
		 VL53LX_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53LX_get_histogram_bin_data(
 8005154:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005156:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800515a:	4619      	mov	r1, r3
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 fbcb 	bl	80058f8 <VL53LX_get_histogram_bin_data>
 8005162:	4603      	mov	r3, r0
 8005164:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						&(pdev->hist_data));




		if (status == VL53LX_ERROR_NONE &&
 8005168:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800516c:	2b00      	cmp	r3, #0
 800516e:	d118      	bne.n	80051a2 <VL53LX_get_device_results+0xe2>
			pHD->number_of_ambient_bins == 0) {
 8005170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005172:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53LX_ERROR_NONE &&
 8005174:	2b00      	cmp	r3, #0
 8005176:	d114      	bne.n	80051a2 <VL53LX_get_device_results+0xe2>
			zid = pdev->ll_state.rd_zone_id;
 8005178:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800517a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800517e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
			&(pZH->VL53LX_p_003[zid]),
 8005182:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800518a:	4413      	add	r3, r2
 800518c:	1d1a      	adds	r2, r3, #4
 800518e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005190:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005194:	4619      	mov	r1, r3
 8005196:	4610      	mov	r0, r2
 8005198:	f004 f976 	bl	8009488 <VL53LX_hist_copy_and_scale_ambient_info>
 800519c:	4603      	mov	r3, r0
 800519e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(pdev->hist_data));
		}


		if (status != VL53LX_ERROR_NONE)
 80051a2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f040 8206 	bne.w	80055b8 <VL53LX_get_device_results+0x4f8>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 80051ac:	f107 0313 	add.w	r3, r7, #19
 80051b0:	4619      	mov	r1, r3
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f006 fdd5 	bl	800bd62 <VL53LX_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 80051b8:	7cfb      	ldrb	r3, [r7, #19]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <VL53LX_get_device_results+0x102>
			histo_merge_nb = 1;
 80051be:	2301      	movs	r3, #1
 80051c0:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 80051c2:	7cfb      	ldrb	r3, [r7, #19]
 80051c4:	3b01      	subs	r3, #1
 80051c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if (pdev->tuning_parms.tp_hist_merge == 1)
 80051ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051cc:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d107      	bne.n	80051e4 <VL53LX_get_device_results+0x124>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 80051d4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80051d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051da:	3202      	adds	r2, #2
 80051dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 80051e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e2:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 80051e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051e6:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
		pHP->gain_factor =
 80051ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051ec:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53LX_calc_crosstalk_plane_offset_with_margin(
 80051ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80051f8:	4619      	mov	r1, r3
 80051fa:	4610      	mov	r0, r2
 80051fc:	f004 f84a 	bl	8009294 <VL53LX_calc_crosstalk_plane_offset_with_margin>
 8005200:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8005202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005204:	62da      	str	r2, [r3, #44]	; 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8005206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005208:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800520c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800520e:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8005210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005212:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8005216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005218:	865a      	strh	r2, [r3, #50]	; 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 800521a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800521c:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 800521e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005220:	f883 2255 	strb.w	r2, [r3, #597]	; 0x255
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 8005224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005226:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 8005228:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800522a:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 800522e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005230:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 8005232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005234:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 8005238:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800523a:	f8b3 22fe 	ldrh.w	r2, [r3, #766]	; 0x2fe
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 800523e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005240:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 8005244:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005246:	f893 2331 	ldrb.w	r2, [r3, #817]	; 0x331
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 800524a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800524c:	f883 226e 	strb.w	r2, [r3, #622]	; 0x26e

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 8005250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005252:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 8005256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005258:	86da      	strh	r2, [r3, #54]	; 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 800525a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800525c:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 8005260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005262:	869a      	strh	r2, [r3, #52]	; 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 8005264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005266:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 8005268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800526a:	871a      	strh	r2, [r3, #56]	; 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 800526c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800526e:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 8005270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005272:	875a      	strh	r2, [r3, #58]	; 0x3a



		VL53LX_copy_rtn_good_spads_to_buffer(
 8005274:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005276:	f203 3292 	addw	r2, r3, #914	; 0x392
 800527a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800527c:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8005280:	4619      	mov	r1, r3
 8005282:	4610      	mov	r0, r2
 8005284:	f003 fa3a 	bl	80086fc <VL53LX_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 8005288:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800528a:	795b      	ldrb	r3, [r3, #5]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d002      	beq.n	8005296 <VL53LX_get_device_results+0x1d6>
 8005290:	2b03      	cmp	r3, #3
 8005292:	d02e      	beq.n	80052f2 <VL53LX_get_device_results+0x232>
 8005294:	e03d      	b.n	8005312 <VL53LX_get_device_results+0x252>

		case VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 8005296:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005298:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800529c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

			VL53LX_hist_combine_mm1_mm2_offsets(
 80052a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a2:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 80052a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a8:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 80052ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052ae:	f893 e3c2 	ldrb.w	lr, [r3, #962]	; 0x3c2
 80052b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052b4:	f893 83c3 	ldrb.w	r8, [r3, #963]	; 0x3c3
 80052b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ba:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80052be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052c0:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 80052c4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80052c6:	319c      	adds	r1, #156	; 0x9c
 80052c8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80052ca:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 80052ce:	f897 4025 	ldrb.w	r4, [r7, #37]	; 0x25
 80052d2:	b2a4      	uxth	r4, r4
 80052d4:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 80052d6:	351c      	adds	r5, #28
 80052d8:	9505      	str	r5, [sp, #20]
 80052da:	9404      	str	r4, [sp, #16]
 80052dc:	9003      	str	r0, [sp, #12]
 80052de:	9102      	str	r1, [sp, #8]
 80052e0:	9201      	str	r2, [sp, #4]
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	4643      	mov	r3, r8
 80052e6:	4672      	mov	r2, lr
 80052e8:	4661      	mov	r1, ip
 80052ea:	4630      	mov	r0, r6
 80052ec:	f004 ff7d 	bl	800a1ea <VL53LX_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 80052f0:	e013      	b.n	800531a <VL53LX_get_device_results+0x25a>
		case VL53LX_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 80052f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052f4:	331c      	adds	r3, #28
 80052f6:	4619      	mov	r1, r3
 80052f8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80052fa:	f7fe fa4f 	bl	800379c <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 80052fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005300:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8005304:	b29b      	uxth	r3, r3
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	b29b      	uxth	r3, r3
 800530a:	b21a      	sxth	r2, r3
 800530c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800530e:	839a      	strh	r2, [r3, #28]
		break;
 8005310:	e003      	b.n	800531a <VL53LX_get_device_results+0x25a>
		default:
			pHP->range_offset_mm = 0;
 8005312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005314:	2200      	movs	r2, #0
 8005316:	839a      	strh	r2, [r3, #28]
		break;
 8005318:	bf00      	nop

		}



		if (status != VL53LX_ERROR_NONE)
 800531a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800531e:	2b00      	cmp	r3, #0
 8005320:	f040 814c 	bne.w	80055bc <VL53LX_get_device_results+0x4fc>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53LX_calc_max_effective_spads(
 8005324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005326:	f893 00a8 	ldrb.w	r0, [r3, #168]	; 0xa8
 800532a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532c:	f893 10a9 	ldrb.w	r1, [r3, #169]	; 0xa9
 8005330:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005332:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 8005336:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005338:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
		VL53LX_calc_max_effective_spads(
 800533c:	b29c      	uxth	r4, r3
 800533e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005340:	f203 236a 	addw	r3, r3, #618	; 0x26a
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	4623      	mov	r3, r4
 8005348:	f005 f8f4 	bl	800a534 <VL53LX_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53LX_get_dmax_calibration_data(
 800534c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800534e:	799b      	ldrb	r3, [r3, #6]
 8005350:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005352:	4619      	mov	r1, r3
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 fee2 	bl	800611e <VL53LX_get_dmax_calibration_data>
 800535a:	4603      	mov	r3, r0
 800535c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				Dev,
				pdev->dmax_mode,
				pdmax_cal);


		if (status != VL53LX_ERROR_NONE)
 8005360:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005364:	2b00      	cmp	r3, #0
 8005366:	f040 812b 	bne.w	80055c0 <VL53LX_get_device_results+0x500>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_ipp_hist_process_data(
 800536a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800536c:	f503 7515 	add.w	r5, r3, #596	; 0x254
 8005370:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005372:	f503 7605 	add.w	r6, r3, #532	; 0x214
 8005376:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005378:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800537c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800537e:	f202 521c 	addw	r2, r2, #1308	; 0x51c
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 8005382:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005384:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
				pdev->wArea2,
 8005388:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800538a:	f500 50d0 	add.w	r0, r0, #6656	; 0x1a00
		status = VL53LX_ipp_hist_process_data(
 800538e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8005390:	9405      	str	r4, [sp, #20]
 8005392:	f107 0413 	add.w	r4, r7, #19
 8005396:	9404      	str	r4, [sp, #16]
 8005398:	9003      	str	r0, [sp, #12]
 800539a:	9102      	str	r1, [sp, #8]
 800539c:	9201      	str	r2, [sp, #4]
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	4633      	mov	r3, r6
 80053a2:	462a      	mov	r2, r5
 80053a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f00c fbf0 	bl	8011b8c <VL53LX_ipp_hist_process_data>
 80053ac:	4603      	mov	r3, r0
 80053ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&histo_merge_nb,
				presults);

		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 80053b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053b4:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d150      	bne.n	800545e <VL53LX_get_device_results+0x39e>
			(histo_merge_nb > 1))
 80053bc:	7cfb      	ldrb	r3, [r7, #19]
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d94d      	bls.n	800545e <VL53LX_get_device_results+0x39e>
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 80053c2:	2300      	movs	r3, #0
 80053c4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80053c8:	e045      	b.n	8005456 <VL53LX_get_device_results+0x396>
			pdata = &(presults->VL53LX_p_003[i]);
 80053ca:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80053ce:	224c      	movs	r2, #76	; 0x4c
 80053d0:	fb02 f303 	mul.w	r3, r2, r3
 80053d4:	3310      	adds	r3, #16
 80053d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053d8:	4413      	add	r3, r2
 80053da:	3304      	adds	r3, #4
 80053dc:	623b      	str	r3, [r7, #32]
			pdata->VL53LX_p_016 /= histo_merge_nb;
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	7cfa      	ldrb	r2, [r7, #19]
 80053e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80053e8:	6a3b      	ldr	r3, [r7, #32]
 80053ea:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->VL53LX_p_017 /= histo_merge_nb;
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f0:	7cfa      	ldrb	r2, [r7, #19]
 80053f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 /= histo_merge_nb;
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fe:	7cfa      	ldrb	r2, [r7, #19]
 8005400:	fb93 f2f2 	sdiv	r2, r3, r2
 8005404:	6a3b      	ldr	r3, [r7, #32]
 8005406:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800540c:	461a      	mov	r2, r3
 800540e:	7cfb      	ldrb	r3, [r7, #19]
 8005410:	fb92 f3f3 	sdiv	r3, r2, r3
 8005414:	b29a      	uxth	r2, r3
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800541e:	461a      	mov	r2, r3
 8005420:	7cfb      	ldrb	r3, [r7, #19]
 8005422:	fb92 f3f3 	sdiv	r3, r2, r3
 8005426:	b29a      	uxth	r2, r3
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005430:	461a      	mov	r2, r3
 8005432:	7cfb      	ldrb	r3, [r7, #19]
 8005434:	fb92 f3f3 	sdiv	r3, r2, r3
 8005438:	b29a      	uxth	r2, r3
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53LX_p_009 /= histo_merge_nb;
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005442:	7cfa      	ldrb	r2, [r7, #19]
 8005444:	fbb3 f2f2 	udiv	r2, r3, r2
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 800544c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005450:	3301      	adds	r3, #1
 8005452:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8005456:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800545a:	2b03      	cmp	r3, #3
 800545c:	d9b5      	bls.n	80053ca <VL53LX_get_device_results+0x30a>
		}


		if (status != VL53LX_ERROR_NONE)
 800545e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005462:	2b00      	cmp	r3, #0
 8005464:	f040 80ae 	bne.w	80055c4 <VL53LX_get_device_results+0x504>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_hist_wrap_dmax(
 8005468:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800546a:	f503 7005 	add.w	r0, r3, #532	; 0x214
 800546e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005470:	f503 7171 	add.w	r1, r3, #964	; 0x3c4
 8005474:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005476:	330e      	adds	r3, #14
 8005478:	461a      	mov	r2, r3
 800547a:	f004 fe80 	bl	800a17e <VL53LX_hist_wrap_dmax>
 800547e:	4603      	mov	r3, r0
 8005480:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53LX_ERROR_NONE)
 8005484:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005488:	2b00      	cmp	r3, #0
 800548a:	f040 809d 	bne.w	80055c8 <VL53LX_get_device_results+0x508>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 800548e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005490:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 8005498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054a0:	4413      	add	r3, r2
 80054a2:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 80054a4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
 80054a8:	4613      	mov	r3, r2
 80054aa:	011b      	lsls	r3, r3, #4
 80054ac:	4413      	add	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80054b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054b6:	4413      	add	r3, r2
 80054b8:	f103 0208 	add.w	r2, r3, #8
 80054bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f004 fa10 	bl	80098e4 <VL53LX_hist_phase_consistency_check>
 80054c4:	4603      	mov	r3, r0
 80054c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			presults);


		if (status != VL53LX_ERROR_NONE)
 80054ca:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d17c      	bne.n	80055cc <VL53LX_get_device_results+0x50c>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 80054d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80054d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 80054dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 80054e0:	011b      	lsls	r3, r3, #4
 80054e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054e4:	4413      	add	r3, r2
 80054e6:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 80054e8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 80054ec:	4613      	mov	r3, r2
 80054ee:	011b      	lsls	r3, r3, #4
 80054f0:	4413      	add	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80054f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054fa:	4413      	add	r3, r2
 80054fc:	f103 0208 	add.w	r2, r3, #8
 8005500:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005502:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f004 fde1 	bl	800a0ce <VL53LX_hist_xmonitor_consistency_check>
 800550c:	4603      	mov	r3, r0
 800550e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(presults->xmonitor));


		if (status != VL53LX_ERROR_NONE)
 8005512:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005516:	2b00      	cmp	r3, #0
 8005518:	d15a      	bne.n	80055d0 <VL53LX_get_device_results+0x510>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 800551a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800551c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		pZH->max_zones    = VL53LX_MAX_USER_ZONES;
 8005524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005526:	2205      	movs	r2, #5
 8005528:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 800552a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800552c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8005530:	3301      	adds	r3, #1
 8005532:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 8005534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005536:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 8005538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800553a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800553e:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 8005540:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005542:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
		if (zid <
 8005546:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800554a:	429a      	cmp	r2, r3
 800554c:	d222      	bcs.n	8005594 <VL53LX_get_device_results+0x4d4>

			phist_info =
			&(pZH->VL53LX_p_003[zid]);
 800554e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			phist_info =
 8005552:	011b      	lsls	r3, r3, #4
 8005554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005556:	4413      	add	r3, r2
 8005558:	3304      	adds	r3, #4
 800555a:	64bb      	str	r3, [r7, #72]	; 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 800555c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800555e:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 8005560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005562:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 8005564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005566:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 8005568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800556a:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 800556c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556e:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
			phist_info->result__dss_actual_effective_spads =
 8005572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005574:	805a      	strh	r2, [r3, #2]

			phist_info->VL53LX_p_005 =
				pHD->VL53LX_p_005;
 8005576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005578:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
			phist_info->VL53LX_p_005 =
 800557c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800557e:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 8005580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005582:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
			phist_info->total_periods_elapsed =
 8005586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005588:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 800558a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			phist_info->ambient_events_sum =
 8005590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005592:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53LX_ERROR_NONE)
 8005594:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005598:	2b00      	cmp	r3, #0
 800559a:	d11b      	bne.n	80055d4 <VL53LX_get_device_results+0x514>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_hist_copy_results_to_sys_and_core(
 800559c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800559e:	f503 7071 	add.w	r0, r3, #964	; 0x3c4
 80055a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055a4:	f203 3266 	addw	r2, r3, #870	; 0x366
 80055a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055aa:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80055ae:	3318      	adds	r3, #24
 80055b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055b2:	f005 f91c 	bl	800a7ee <VL53LX_hist_copy_results_to_sys_and_core>
 80055b6:	e00e      	b.n	80055d6 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80055b8:	bf00      	nop
 80055ba:	e00c      	b.n	80055d6 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80055bc:	bf00      	nop
 80055be:	e00a      	b.n	80055d6 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80055c0:	bf00      	nop
 80055c2:	e008      	b.n	80055d6 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80055c4:	bf00      	nop
 80055c6:	e006      	b.n	80055d6 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80055c8:	bf00      	nop
 80055ca:	e004      	b.n	80055d6 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80055cc:	bf00      	nop
 80055ce:	e002      	b.n	80055d6 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80055d0:	bf00      	nop
 80055d2:	e000      	b.n	80055d6 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80055d4:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 80055d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055d8:	785b      	ldrb	r3, [r3, #1]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d036      	beq.n	800564c <VL53LX_get_device_results+0x58c>
			if (pstate->rd_device_state !=
 80055de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055e0:	79db      	ldrb	r3, [r3, #7]
 80055e2:	2b06      	cmp	r3, #6
 80055e4:	d00a      	beq.n	80055fc <VL53LX_get_device_results+0x53c>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53LX_ERROR_NONE) {
 80055e6:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d106      	bne.n	80055fc <VL53LX_get_device_results+0x53c>
					status = VL53LX_dynamic_zone_update(
 80055ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f005 f9d0 	bl	800a996 <VL53LX_dynamic_zone_update>
 80055f6:	4603      	mov	r3, r0
 80055f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80055fc:	2300      	movs	r3, #0
 80055fe:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8005602:	e015      	b.n	8005630 <VL53LX_get_device_results+0x570>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 8005604:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005606:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
						& 0x01) ?
 800560a:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <VL53LX_get_device_results+0x556>
 8005612:	2103      	movs	r1, #3
 8005614:	e000      	b.n	8005618 <VL53LX_get_device_results+0x558>
 8005616:	2101      	movs	r1, #1
 8005618:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800561c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800561e:	4413      	add	r3, r2
 8005620:	460a      	mov	r2, r1
 8005622:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8005626:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800562a:	3301      	adds	r3, #1
 800562c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8005630:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005634:	2b04      	cmp	r3, #4
 8005636:	d9e5      	bls.n	8005604 <VL53LX_get_device_results+0x544>
					VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53LX_ERROR_NONE)
 8005638:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800563c:	2b00      	cmp	r3, #0
 800563e:	d105      	bne.n	800564c <VL53LX_get_device_results+0x58c>
				status = VL53LX_multizone_hist_bins_update(Dev);
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f005 fa22 	bl	800aa8a <VL53LX_multizone_hist_bins_update>
 8005646:	4603      	mov	r3, r0
 8005648:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		}



		if (status == VL53LX_ERROR_NONE)
 800564c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005650:	2b00      	cmp	r3, #0
 8005652:	d105      	bne.n	8005660 <VL53LX_get_device_results+0x5a0>
			status = VL53LX_dynamic_xtalk_correction_corrector(Dev);
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f005 fe79 	bl	800b34c <VL53LX_dynamic_xtalk_correction_corrector>
 800565a:	4603      	mov	r3, r0
 800565c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53LX_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if (pdev->tuning_parms.tp_hist_merge == 1)
 8005660:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005662:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8005666:	2b01      	cmp	r3, #1
 8005668:	d151      	bne.n	800570e <VL53LX_get_device_results+0x64e>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 800566a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566c:	689a      	ldr	r2, [r3, #8]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 800566e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	e04c      	b.n	800570e <VL53LX_get_device_results+0x64e>
	} else {

		if (status == VL53LX_ERROR_NONE)
 8005674:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005678:	2b00      	cmp	r3, #0
 800567a:	d107      	bne.n	800568c <VL53LX_get_device_results+0x5cc>
			status = VL53LX_get_measurement_results(
 800567c:	7afb      	ldrb	r3, [r7, #11]
 800567e:	4619      	mov	r1, r3
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f7ff fc73 	bl	8004f6c <VL53LX_get_measurement_results>
 8005686:	4603      	mov	r3, r0
 8005688:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							Dev,
							device_results_level);

		if (status == VL53LX_ERROR_NONE)
 800568c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10d      	bne.n	80056b0 <VL53LX_get_device_results+0x5f0>
			VL53LX_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8005694:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005696:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
			VL53LX_copy_sys_and_core_results_to_range_results(
 800569a:	4618      	mov	r0, r3
 800569c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800569e:	f203 3166 	addw	r1, r3, #870	; 0x366
 80056a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056a4:	f503 5299 	add.w	r2, r3, #4896	; 0x1320
 80056a8:	3218      	adds	r2, #24
 80056aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056ac:	f000 fb86 	bl	8005dbc <VL53LX_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 80056b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b2:	785b      	ldrb	r3, [r3, #1]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d12a      	bne.n	800570e <VL53LX_get_device_results+0x64e>

			if ((status == VL53LX_ERROR_NONE) &&
 80056b8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10d      	bne.n	80056dc <VL53LX_get_device_results+0x61c>
				(pL->low_power_auto_range_count == 0)) {
 80056c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c2:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53LX_ERROR_NONE) &&
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d109      	bne.n	80056dc <VL53LX_get_device_results+0x61c>

				status =
				VL53LX_low_power_auto_setup_manual_calibration(
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f006 fa70 	bl	800bbae <VL53LX_low_power_auto_setup_manual_calibration>
 80056ce:	4603      	mov	r3, r0
 80056d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 80056d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d6:	2201      	movs	r2, #1
 80056d8:	709a      	strb	r2, [r3, #2]
 80056da:	e00a      	b.n	80056f2 <VL53LX_get_device_results+0x632>
			} else if ((status == VL53LX_ERROR_NONE) &&
 80056dc:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d106      	bne.n	80056f2 <VL53LX_get_device_results+0x632>
				(pL->low_power_auto_range_count == 1)) {
 80056e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e6:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53LX_ERROR_NONE) &&
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d102      	bne.n	80056f2 <VL53LX_get_device_results+0x632>
				pL->low_power_auto_range_count = 2;
 80056ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ee:	2202      	movs	r2, #2
 80056f0:	709a      	strb	r2, [r3, #2]
			}


			if ((pL->low_power_auto_range_count != 0xFF) &&
 80056f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f4:	789b      	ldrb	r3, [r3, #2]
 80056f6:	2bff      	cmp	r3, #255	; 0xff
 80056f8:	d009      	beq.n	800570e <VL53LX_get_device_results+0x64e>
 80056fa:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d105      	bne.n	800570e <VL53LX_get_device_results+0x64e>
				(status == VL53LX_ERROR_NONE)) {
				status = VL53LX_low_power_auto_update_DSS(
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f006 faa5 	bl	800bc52 <VL53LX_low_power_auto_update_DSS>
 8005708:	4603      	mov	r3, r0
 800570a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800570e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005710:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005714:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005716:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8005718:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800571a:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 800571e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005720:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 8005722:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005724:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8005728:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800572a:	709a      	strb	r2, [r3, #2]

	if (status == VL53LX_ERROR_NONE) {
 800572c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005730:	2b00      	cmp	r3, #0
 8005732:	f040 80b0 	bne.w	8005896 <VL53LX_get_device_results+0x7d6>


		pres->zone_results.max_zones    = VL53LX_MAX_USER_ZONES;
 8005736:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005738:	2205      	movs	r2, #5
 800573a:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 800573e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005740:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8005744:	3301      	adds	r3, #1
 8005746:	b2da      	uxtb	r2, r3
 8005748:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800574a:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
		zid = pdev->ll_state.rd_zone_id;
 800574e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005750:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (zid < pres->zone_results.max_zones) {
 8005758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800575a:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 800575e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005762:	429a      	cmp	r2, r3
 8005764:	f080 8097 	bcs.w	8005896 <VL53LX_get_device_results+0x7d6>

			pobjects =
			&(pres->zone_results.VL53LX_p_003[zid]);
 8005768:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
			pobjects =
 800576c:	4613      	mov	r3, r2
 800576e:	011b      	lsls	r3, r3, #4
 8005770:	4413      	add	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8005778:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800577a:	4413      	add	r3, r2
 800577c:	3308      	adds	r3, #8
 800577e:	657b      	str	r3, [r7, #84]	; 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 8005780:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005782:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 8005784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005786:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 8005788:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800578a:	785a      	ldrb	r2, [r3, #1]
 800578c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800578e:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 8005790:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005792:	789a      	ldrb	r2, [r3, #2]
 8005794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005796:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 8005798:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800579a:	78da      	ldrb	r2, [r3, #3]
 800579c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800579e:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53LX_p_016 =
				presults->xmonitor.VL53LX_p_016;
 80057a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057a2:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
			pobjects->xmonitor.VL53LX_p_016 =
 80057a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057a8:	639a      	str	r2, [r3, #56]	; 0x38
			pobjects->xmonitor.VL53LX_p_017 =
				presults->xmonitor.VL53LX_p_017;
 80057aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057ac:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
			pobjects->xmonitor.VL53LX_p_017 =
 80057b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057b2:	63da      	str	r2, [r3, #60]	; 0x3c
			pobjects->xmonitor.VL53LX_p_011 =
				presults->xmonitor.VL53LX_p_011;
 80057b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057b6:	f8b3 2184 	ldrh.w	r2, [r3, #388]	; 0x184
			pobjects->xmonitor.VL53LX_p_011 =
 80057ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 80057c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057c2:	f893 218e 	ldrb.w	r2, [r3, #398]	; 0x18e
			pobjects->xmonitor.range_status =
 80057c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

			pobjects->max_objects      = presults->max_results;
 80057cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057ce:	7c5a      	ldrb	r2, [r3, #17]
 80057d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057d2:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 80057d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057d6:	7c9a      	ldrb	r2, [r3, #18]
 80057d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057da:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 80057dc:	2300      	movs	r3, #0
 80057de:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80057e2:	e052      	b.n	800588a <VL53LX_get_device_results+0x7ca>
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
					presults->VL53LX_p_003[i].VL53LX_p_016;
 80057e4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 80057e8:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_016;
 80057ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80057ee:	204c      	movs	r0, #76	; 0x4c
 80057f0:	fb00 f303 	mul.w	r3, r0, r3
 80057f4:	440b      	add	r3, r1
 80057f6:	3338      	adds	r3, #56	; 0x38
 80057f8:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 80057fa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80057fc:	4613      	mov	r3, r2
 80057fe:	005b      	lsls	r3, r3, #1
 8005800:	4413      	add	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4403      	add	r3, r0
 8005806:	3308      	adds	r3, #8
 8005808:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
					presults->VL53LX_p_003[i].VL53LX_p_017;
 800580a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 800580e:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8005812:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005814:	204c      	movs	r0, #76	; 0x4c
 8005816:	fb00 f303 	mul.w	r3, r0, r3
 800581a:	440b      	add	r3, r1
 800581c:	333c      	adds	r3, #60	; 0x3c
 800581e:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8005820:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005822:	4613      	mov	r3, r2
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	4413      	add	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4403      	add	r3, r0
 800582c:	330c      	adds	r3, #12
 800582e:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8005830:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8005834:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8005838:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800583a:	204c      	movs	r0, #76	; 0x4c
 800583c:	fb00 f303 	mul.w	r3, r0, r3
 8005840:	440b      	add	r3, r1
 8005842:	3354      	adds	r3, #84	; 0x54
 8005844:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8005846:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005848:	4613      	mov	r3, r2
 800584a:	005b      	lsls	r3, r3, #1
 800584c:	4413      	add	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	440b      	add	r3, r1
 8005852:	3310      	adds	r3, #16
 8005854:	4602      	mov	r2, r0
 8005856:	801a      	strh	r2, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
					presults->VL53LX_p_003[i].range_status;
 8005858:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].range_status =
 800585c:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].range_status;
 8005860:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005862:	204c      	movs	r0, #76	; 0x4c
 8005864:	fb00 f303 	mul.w	r3, r0, r3
 8005868:	440b      	add	r3, r1
 800586a:	335e      	adds	r3, #94	; 0x5e
 800586c:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
 800586e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005870:	4613      	mov	r3, r2
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	4413      	add	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	440b      	add	r3, r1
 800587a:	3312      	adds	r3, #18
 800587c:	4602      	mov	r2, r0
 800587e:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 8005880:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005884:	3301      	adds	r3, #1
 8005886:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800588a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800588c:	7c9b      	ldrb	r3, [r3, #18]
 800588e:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8005892:	429a      	cmp	r2, r3
 8005894:	d3a6      	bcc.n	80057e4 <VL53LX_get_device_results+0x724>
		}
	}



	memcpy(
 8005896:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800589a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f00f f9a1 	bl	8014be4 <memcpy>
		presults,
		sizeof(VL53LX_range_results_t));



	if (status == VL53LX_ERROR_NONE)
 80058a2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d105      	bne.n	80058b6 <VL53LX_get_device_results+0x7f6>
		status = VL53LX_check_ll_driver_rd_state(Dev);
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f002 fd4e 	bl	800834c <VL53LX_check_ll_driver_rd_state>
 80058b0:	4603      	mov	r3, r0
 80058b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53LX_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 80058b6:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3768      	adds	r7, #104	; 0x68
 80058be:	46bd      	mov	sp, r7
 80058c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080058c4 <VL53LX_clear_interrupt_and_enable_next_range>:


VL53LX_Error VL53LX_clear_interrupt_and_enable_next_range(
	VL53LX_DEV        Dev,
	uint8_t           measurement_mode)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	460b      	mov	r3, r1
 80058ce:	70fb      	strb	r3, [r7, #3]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 80058d0:	2300      	movs	r3, #0
 80058d2:	73fb      	strb	r3, [r7, #15]





	if (status == VL53LX_ERROR_NONE)
 80058d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d107      	bne.n	80058ec <VL53LX_clear_interrupt_and_enable_next_range+0x28>
		status = VL53LX_init_and_start_range(
 80058dc:	78fb      	ldrb	r3, [r7, #3]
 80058de:	2203      	movs	r2, #3
 80058e0:	4619      	mov	r1, r3
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7ff f868 	bl	80049b8 <VL53LX_init_and_start_range>
 80058e8:	4603      	mov	r3, r0
 80058ea:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 80058ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <VL53LX_get_histogram_bin_data>:


VL53LX_Error VL53LX_get_histogram_bin_data(
		VL53LX_DEV                   Dev,
		VL53LX_histogram_bin_data_t *pdata)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b0d2      	sub	sp, #328	; 0x148
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	1d3b      	adds	r3, r7, #4
 8005900:	6018      	str	r0, [r3, #0]
 8005902:	463b      	mov	r3, r7
 8005904:	6019      	str	r1, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8005906:	2300      	movs	r3, #0
 8005908:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53LX_LLDriverData_t *pdev =
 800590c:	1d3b      	adds	r3, r7, #4
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	3318      	adds	r3, #24
 8005912:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8005916:	1d3b      	adds	r3, r7, #4
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800591e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53LX_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 8005922:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005926:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 800592a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53LX_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 800592e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005932:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8005936:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53LX_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 800593a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800593e:	f203 331e 	addw	r3, r3, #798	; 0x31e
 8005942:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53LX_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 8005946:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800594a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800594e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53LX_range_results_t        *presults  = &(pres->range_results);
 8005952:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005956:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint8_t    buffer[VL53LX_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 800595a:	f107 030c 	add.w	r3, r7, #12
 800595e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint8_t    bin_23_0 = 0x00;
 8005962:	2300      	movs	r3, #0
 8005964:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	uint16_t   bin                      = 0;
 8005968:	2300      	movs	r3, #0
 800596a:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 800596e:	2300      	movs	r3, #0
 8005970:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint16_t   encoded_timeout          = 0;
 8005974:	2300      	movs	r3, #0
 8005976:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c

	uint32_t   pll_period_us            = 0;
 800597a:	2300      	movs	r3, #0
 800597c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 8005980:	2300      	movs	r3, #0
 8005982:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t    i                        = 0;
 8005986:	2300      	movs	r3, #0
 8005988:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b

	int32_t    hist_merge				= 0;
 800598c:	f107 0308 	add.w	r3, r7, #8
 8005990:	2200      	movs	r2, #0
 8005992:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8005994:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10a      	bne.n	80059b2 <VL53LX_get_histogram_bin_data+0xba>
		status = VL53LX_ReadMulti(
 800599c:	1d38      	adds	r0, r7, #4
 800599e:	2353      	movs	r3, #83	; 0x53
 80059a0:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80059a4:	2188      	movs	r1, #136	; 0x88
 80059a6:	6800      	ldr	r0, [r0, #0]
 80059a8:	f00b fefa 	bl	80117a0 <VL53LX_ReadMulti>
 80059ac:	4603      	mov	r3, r0
 80059ae:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			pbuffer,
			VL53LX_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 80059b2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80059b6:	781a      	ldrb	r2, [r3, #0]
 80059b8:	463b      	mov	r3, r7
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 80059c0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80059c4:	785a      	ldrb	r2, [r3, #1]
 80059c6:	463b      	mov	r3, r7
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 80059ce:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80059d2:	789a      	ldrb	r2, [r3, #2]
 80059d4:	463b      	mov	r3, r7
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 80059dc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80059e0:	78da      	ldrb	r2, [r3, #3]
 80059e2:	463b      	mov	r3, r7
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53LX_i2c_decode_uint16_t(2, pbuffer +   4);
 80059ea:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80059ee:	3304      	adds	r3, #4
 80059f0:	4619      	mov	r1, r3
 80059f2:	2002      	movs	r0, #2
 80059f4:	f003 f9aa 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 80059f8:	4603      	mov	r3, r0
 80059fa:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 80059fc:	463b      	mov	r3, r7
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c



	i2c_buffer_offset_bytes =
 8005a04:	234e      	movs	r3, #78	; 0x4e
 8005a06:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8005a0a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005a0e:	f107 020c 	add.w	r2, r7, #12
 8005a12:	4413      	add	r3, r2
 8005a14:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	pdata->phasecal_result__reference_phase =
			VL53LX_i2c_decode_uint16_t(2, pbuffer);
 8005a18:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005a1c:	2002      	movs	r0, #2
 8005a1e:	f003 f995 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 8005a22:	4603      	mov	r3, r0
 8005a24:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8005a26:	463b      	mov	r3, r7
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	i2c_buffer_offset_bytes =
 8005a2e:	2350      	movs	r3, #80	; 0x50
 8005a30:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_PHASECAL_RESULT__VCSEL_START -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 8005a34:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005a38:	f107 020c 	add.w	r2, r7, #12
 8005a3c:	5cd2      	ldrb	r2, [r2, r3]
 8005a3e:	463b      	mov	r3, r7
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 8005a46:	463b      	mov	r3, r7
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8005a4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a52:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 8005a56:	331c      	adds	r3, #28
 8005a58:	801a      	strh	r2, [r3, #0]
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 8005a5a:	463b      	mov	r3, r7
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 8005a62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a66:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 8005a6a:	331e      	adds	r3, #30
 8005a6c:	701a      	strb	r2, [r3, #0]



	i2c_buffer_offset_bytes =
 8005a6e:	2351      	movs	r3, #81	; 0x51
 8005a70:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 8005a74:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005a78:	f107 020c 	add.w	r2, r7, #12
 8005a7c:	5cd3      	ldrb	r3, [r2, r3]
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8005a84:	2352      	movs	r3, #82	; 0x52
 8005a86:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 8005a8a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005a8e:	f107 020c 	add.w	r2, r7, #12
 8005a92:	5cd2      	ldrb	r2, [r2, r3]
 8005a94:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8005a98:	4413      	add	r3, r2
 8005a9a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8005a9e:	234d      	movs	r3, #77	; 0x4d
 8005aa0:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 8005aa4:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005aa8:	f107 020c 	add.w	r2, r7, #12
 8005aac:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 8005ab0:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 8005ab2:	2306      	movs	r3, #6
 8005ab4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_0_2 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8005ab8:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005abc:	f107 020c 	add.w	r2, r7, #12
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8005acc:	e017      	b.n	8005afe <VL53LX_get_histogram_bin_data+0x206>
		pdata->bin_data[bin] =
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 8005ace:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005ad2:	2003      	movs	r0, #3
 8005ad4:	f003 f9d9 	bl	8008e8a <VL53LX_i2c_decode_uint32_t>
 8005ad8:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 8005ada:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 8005ade:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 8005ae0:	463b      	mov	r3, r7
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3206      	adds	r2, #6
 8005ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 8005aea:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005aee:	3303      	adds	r3, #3
 8005af0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8005af4:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8005af8:	3301      	adds	r3, #1
 8005afa:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8005afe:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8005b02:	2b17      	cmp	r3, #23
 8005b04:	d9e3      	bls.n	8005ace <VL53LX_get_histogram_bin_data+0x1d6>
	}




	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE, &hist_merge);
 8005b06:	f107 0208 	add.w	r2, r7, #8
 8005b0a:	1d3b      	adds	r3, r7, #4
 8005b0c:	f248 018d 	movw	r1, #32909	; 0x808d
 8005b10:	6818      	ldr	r0, [r3, #0]
 8005b12:	f000 fb2f 	bl	8006174 <VL53LX_get_tuning_parm>

	if (pdata->result__stream_count == 0) {
 8005b16:	463b      	mov	r3, r7
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d118      	bne.n	8005b54 <VL53LX_get_histogram_bin_data+0x25c>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8005b22:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b26:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8005b2a:	3310      	adds	r3, #16
 8005b2c:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8005b30:	2100      	movs	r1, #0
 8005b32:	4618      	mov	r0, r3
 8005b34:	f00f f864 	bl	8014c00 <memset>
		pdev->bin_rec_pos = 0;
 8005b38:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b3c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8005b40:	330c      	adds	r3, #12
 8005b42:	2200      	movs	r2, #0
 8005b44:	701a      	strb	r2, [r3, #0]
		pdev->pos_before_next_recom = 0;
 8005b46:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b4a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8005b4e:	330d      	adds	r3, #13
 8005b50:	2200      	movs	r2, #0
 8005b52:	701a      	strb	r2, [r3, #0]
	}

	if (hist_merge == 1)
 8005b54:	f107 0308 	add.w	r3, r7, #8
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d105      	bne.n	8005b6a <VL53LX_get_histogram_bin_data+0x272>
		vl53lx_histo_merge(Dev, pdata);
 8005b5e:	463a      	mov	r2, r7
 8005b60:	1d3b      	adds	r3, r7, #4
 8005b62:	6811      	ldr	r1, [r2, #0]
 8005b64:	6818      	ldr	r0, [r3, #0]
 8005b66:	f7fd ff10 	bl	800398a <vl53lx_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 8005b6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b6e:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8005b72:	463b      	mov	r3, r7
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	709a      	strb	r2, [r3, #2]
	pdata->VL53LX_p_019               = 0;
 8005b78:	463b      	mov	r3, r7
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020             = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8005b80:	463b      	mov	r3, r7
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2218      	movs	r2, #24
 8005b86:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021          = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8005b88:	463b      	mov	r3, r7
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2218      	movs	r2, #24
 8005b8e:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 8005b90:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005b94:	78da      	ldrb	r2, [r3, #3]
 8005b96:	463b      	mov	r3, r7
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 8005b9e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005ba2:	799b      	ldrb	r3, [r3, #6]
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	011b      	lsls	r3, r3, #4
 8005ba8:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 8005baa:	463b      	mov	r3, r7
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->vcsel_width +=
 8005bb2:	463b      	mov	r3, r7
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 8005bba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005bbe:	7c1b      	ldrb	r3, [r3, #16]
 8005bc0:	b29b      	uxth	r3, r3
	pdata->vcsel_width +=
 8005bc2:	4413      	add	r3, r2
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	463b      	mov	r3, r7
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82


	pdata->VL53LX_p_015 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 8005bce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bd2:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53LX_p_015 =
 8005bd4:	463b      	mov	r3, r7
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86



	VL53LX_hist_get_bin_sequence_config(Dev, pdata);
 8005bdc:	463a      	mov	r2, r7
 8005bde:	1d3b      	adds	r3, r7, #4
 8005be0:	6811      	ldr	r1, [r2, #0]
 8005be2:	6818      	ldr	r0, [r3, #0]
 8005be4:	f003 fd20 	bl	8009628 <VL53LX_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 8005be8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005bec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d114      	bne.n	8005c1e <VL53LX_get_histogram_bin_data+0x326>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 8005bf4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005bf8:	791b      	ldrb	r3, [r3, #4]
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	021b      	lsls	r3, r3, #8
 8005bfe:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 8005c00:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c04:	795b      	ldrb	r3, [r3, #5]
 8005c06:	b29b      	uxth	r3, r3
		encoded_timeout =
 8005c08:	4413      	add	r3, r2
 8005c0a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53LX_p_005 =  ptim_cfg->range_config__vcsel_period_a;
 8005c0e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c12:	799a      	ldrb	r2, [r3, #6]
 8005c14:	463b      	mov	r3, r7
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8005c1c:	e013      	b.n	8005c46 <VL53LX_get_histogram_bin_data+0x34e>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 8005c1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c22:	79db      	ldrb	r3, [r3, #7]
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	021b      	lsls	r3, r3, #8
 8005c28:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 8005c2a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c2e:	7a1b      	ldrb	r3, [r3, #8]
 8005c30:	b29b      	uxth	r3, r3
		encoded_timeout =
 8005c32:	4413      	add	r3, r2
 8005c34:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53LX_p_005 = ptim_cfg->range_config__vcsel_period_b;
 8005c38:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c3c:	7a5a      	ldrb	r2, [r3, #9]
 8005c3e:	463b      	mov	r3, r7
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 8005c46:	463b      	mov	r3, r7
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 8005c4e:	2300      	movs	r3, #0
 8005c50:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8005c54:	e016      	b.n	8005c84 <VL53LX_get_histogram_bin_data+0x38c>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 8005c56:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8005c5a:	463a      	mov	r2, r7
 8005c5c:	6812      	ldr	r2, [r2, #0]
 8005c5e:	4413      	add	r3, r2
 8005c60:	7b1b      	ldrb	r3, [r3, #12]
 8005c62:	f003 0307 	and.w	r3, r3, #7
 8005c66:	2b07      	cmp	r3, #7
 8005c68:	d107      	bne.n	8005c7a <VL53LX_get_histogram_bin_data+0x382>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 8005c6a:	463b      	mov	r3, r7
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	7adb      	ldrb	r3, [r3, #11]
 8005c70:	3304      	adds	r3, #4
 8005c72:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 8005c74:	463b      	mov	r3, r7
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 8005c7a:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8005c7e:	3301      	adds	r3, #1
 8005c80:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8005c84:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8005c88:	2b05      	cmp	r3, #5
 8005c8a:	d9e4      	bls.n	8005c56 <VL53LX_get_histogram_bin_data+0x35e>
	}

	pdata->total_periods_elapsed =
		VL53LX_decode_timeout(encoded_timeout);
 8005c8c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005c90:	4618      	mov	r0, r3
 8005c92:	f003 fb6a 	bl	800936a <VL53LX_decode_timeout>
 8005c96:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 8005c98:	463b      	mov	r3, r7
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88




	pll_period_us =
		VL53LX_calc_pll_period_us(pdata->VL53LX_p_015);
 8005ca0:	463b      	mov	r3, r7
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f006 f89a 	bl	800bde2 <VL53LX_calc_pll_period_us>
 8005cae:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 8005cb2:	463b      	mov	r3, r7
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cba:	3301      	adds	r3, #1
 8005cbc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


	pdata->peak_duration_us =
		VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 8005cc0:	463b      	mov	r3, r7
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
		VL53LX_duration_maths(
 8005cc8:	4619      	mov	r1, r3
 8005cca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005cce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cd2:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8005cd6:	f006 f89b 	bl	800be10 <VL53LX_duration_maths>
 8005cda:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 8005cdc:	463b      	mov	r3, r7
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 8005ce4:	463b      	mov	r3, r7
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90



	VL53LX_hist_calc_zero_distance_phase(pdata);
 8005cee:	463b      	mov	r3, r7
 8005cf0:	6818      	ldr	r0, [r3, #0]
 8005cf2:	f006 f9a4 	bl	800c03e <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_ambient_bins(pdata);
 8005cf6:	463b      	mov	r3, r7
 8005cf8:	6818      	ldr	r0, [r3, #0]
 8005cfa:	f006 fdb0 	bl	800c85e <VL53LX_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 8005cfe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d02:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005d06:	463b      	mov	r3, r7
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 8005d0c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d10:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8005d14:	463b      	mov	r3, r7
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53LX_p_003[pdata->zone_id]);
 8005d1a:	463b      	mov	r3, r7
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	789b      	ldrb	r3, [r3, #2]
 8005d20:	461a      	mov	r2, r3
 8005d22:	4613      	mov	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005d2e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005d32:	4413      	add	r3, r2
 8005d34:	3302      	adds	r3, #2
 8005d36:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 8005d3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d3e:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 8005d40:	463b      	mov	r3, r7
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 8005d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d4c:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 8005d4e:	463b      	mov	r3, r7
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 8005d56:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 8005d5e:	463b      	mov	r3, r7
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8005d66:	f003 031f 	and.w	r3, r3, #31
 8005d6a:	2b11      	cmp	r3, #17
 8005d6c:	bf8c      	ite	hi
 8005d6e:	2201      	movhi	r2, #1
 8005d70:	2200      	movls	r2, #0
 8005d72:	b2d2      	uxtb	r2, r2
 8005d74:	2a00      	cmp	r2, #0
 8005d76:	d118      	bne.n	8005daa <VL53LX_get_histogram_bin_data+0x4b2>
 8005d78:	2201      	movs	r2, #1
 8005d7a:	409a      	lsls	r2, r3
 8005d7c:	4b0e      	ldr	r3, [pc, #56]	; (8005db8 <VL53LX_get_histogram_bin_data+0x4c0>)
 8005d7e:	4013      	ands	r3, r2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	bf14      	ite	ne
 8005d84:	2301      	movne	r3, #1
 8005d86:	2300      	moveq	r3, #0
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00d      	beq.n	8005daa <VL53LX_get_histogram_bin_data+0x4b2>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 8005d8e:	463b      	mov	r3, r7
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8005d96:	f003 031f 	and.w	r3, r3, #31
 8005d9a:	b2da      	uxtb	r2, r3
 8005d9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005da0:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53LX_ERROR_RANGE_ERROR;
 8005da2:	23fa      	movs	r3, #250	; 0xfa
 8005da4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	break;
 8005da8:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8005daa:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	0002200e 	.word	0x0002200e

08005dbc <VL53LX_copy_sys_and_core_results_to_range_results>:
void VL53LX_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore,
	VL53LX_range_results_t           *presults)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b08b      	sub	sp, #44	; 0x2c
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
 8005dc8:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53LX_range_data_t *pdata;
	int32_t range_mm = 0;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	78da      	ldrb	r2, [r3, #3]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2200      	movs	r2, #0
 8005dea:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53LX_MAX_RANGE_RESULTS;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	2204      	movs	r2, #4
 8005df0:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2201      	movs	r2, #1
 8005df6:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	8a1b      	ldrh	r3, [r3, #16]
 8005dfc:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	8a9b      	ldrh	r3, [r3, #20]
 8005e02:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	8a5b      	ldrh	r3, [r3, #18]
 8005e08:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005e10:	e00b      	b.n	8005e2a <VL53LX_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53LX_p_022[i] = 0;
 8005e12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	005b      	lsls	r3, r3, #1
 8005e1a:	4413      	add	r3, r2
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 8005e20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e24:	3301      	adds	r3, #1
 8005e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005e2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	d9ef      	bls.n	8005e12 <VL53LX_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53LX_p_003[0]);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	3314      	adds	r3, #20
 8005e36:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005e3e:	e0fe      	b.n	800603e <VL53LX_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 8005e40:	6a3b      	ldr	r3, [r7, #32]
 8005e42:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005e46:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	78db      	ldrb	r3, [r3, #3]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10a      	bne.n	8005e6c <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	785b      	ldrb	r3, [r3, #1]
 8005e5a:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 8005e5e:	2b09      	cmp	r3, #9
 8005e60:	d104      	bne.n	8005e6c <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53LX_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 8005e62:	6a3b      	ldr	r3, [r7, #32]
 8005e64:	2213      	movs	r2, #19
 8005e66:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8005e6a:	e007      	b.n	8005e7c <VL53LX_copy_sys_and_core_results_to_range_results+0xc0>
				VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	785b      	ldrb	r3, [r3, #1]
 8005e70:	f003 031f 	and.w	r3, r3, #31
 8005e74:	b2da      	uxtb	r2, r3
			pdata->range_status =
 8005e76:	6a3b      	ldr	r3, [r7, #32]
 8005e78:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53LX_p_012 = 0;
 8005e7c:	6a3b      	ldr	r3, [r7, #32]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	721a      	strb	r2, [r3, #8]
		pdata->VL53LX_p_019    = 0;
 8005e82:	6a3b      	ldr	r3, [r7, #32]
 8005e84:	2200      	movs	r2, #0
 8005e86:	725a      	strb	r2, [r3, #9]
		pdata->VL53LX_p_023   = 0;
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	729a      	strb	r2, [r3, #10]
		pdata->VL53LX_p_024     = 0;
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	2200      	movs	r2, #0
 8005e92:	72da      	strb	r2, [r3, #11]
		pdata->VL53LX_p_013   = 0;
 8005e94:	6a3b      	ldr	r3, [r7, #32]
 8005e96:	2200      	movs	r2, #0
 8005e98:	731a      	strb	r2, [r3, #12]
		pdata->VL53LX_p_025    = 0;
 8005e9a:	6a3b      	ldr	r3, [r7, #32]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	735a      	strb	r2, [r3, #13]

		switch (i) {
 8005ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d002      	beq.n	8005eae <VL53LX_copy_sys_and_core_results_to_range_results+0xf2>
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d05c      	beq.n	8005f66 <VL53LX_copy_sys_and_core_results_to_range_results+0x1aa>
 8005eac:	e0a8      	b.n	8006000 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	789b      	ldrb	r3, [r3, #2]
 8005eb2:	2b07      	cmp	r3, #7
 8005eb4:	d103      	bne.n	8005ebe <VL53LX_copy_sys_and_core_results_to_range_results+0x102>
				VL53LX_DEVICEREPORTSTATUS_MM1)
				pdata->VL53LX_p_004 =
 8005eb6:	6a3b      	ldr	r3, [r7, #32]
 8005eb8:	8a7a      	ldrh	r2, [r7, #18]
 8005eba:	82da      	strh	r2, [r3, #22]
 8005ebc:	e00b      	b.n	8005ed6 <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	789b      	ldrb	r3, [r3, #2]
 8005ec2:	2b08      	cmp	r3, #8
 8005ec4:	d103      	bne.n	8005ece <VL53LX_copy_sys_and_core_results_to_range_results+0x112>
					VL53LX_DEVICEREPORTSTATUS_MM2)
				pdata->VL53LX_p_004 =
 8005ec6:	6a3b      	ldr	r3, [r7, #32]
 8005ec8:	8aba      	ldrh	r2, [r7, #20]
 8005eca:	82da      	strh	r2, [r3, #22]
 8005ecc:	e003      	b.n	8005ed6 <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd0;
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53LX_p_004 =
 8005ed2:	6a3b      	ldr	r3, [r7, #32]
 8005ed4:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	8afa      	ldrh	r2, [r7, #22]
 8005eda:	861a      	strh	r2, [r3, #48]	; 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	895b      	ldrh	r3, [r3, #10]
 8005ef0:	015b      	lsls	r3, r3, #5
 8005ef2:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005efa:	d302      	bcc.n	8005f02 <VL53LX_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 8005efc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f00:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	6a3b      	ldr	r3, [r7, #32]
 8005f08:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd0;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53LX_p_011 =
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 8005f18:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	fb02 f303 	mul.w	r3, r2, r3
 8005f22:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f2a:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	da01      	bge.n	8005f36 <VL53LX_copy_sys_and_core_results_to_range_results+0x17a>
 8005f32:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8005f36:	12db      	asrs	r3, r3, #11
 8005f38:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	b21a      	sxth	r2, r3
 8005f3e:	6a3b      	ldr	r3, [r7, #32]
 8005f40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd0;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685a      	ldr	r2, [r3, #4]
			pdata->VL53LX_p_017 =
 8005f48:	6a3b      	ldr	r3, [r7, #32]
 8005f4a:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd0;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689a      	ldr	r2, [r3, #8]
			pdata->VL53LX_p_010 =
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd0;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681a      	ldr	r2, [r3, #0]
			pdata->VL53LX_p_016 =
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 8005f64:	e04c      	b.n	8006000 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd1;
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53LX_p_004 =
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps =
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f7c:	865a      	strh	r2, [r3, #50]	; 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	8bdb      	ldrh	r3, [r3, #30]
 8005f8a:	015b      	lsls	r3, r3, #5
 8005f8c:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f94:	d302      	bcc.n	8005f9c <VL53LX_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 8005f96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f9a:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	6a3b      	ldr	r3, [r7, #32]
 8005fa2:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd1;
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53LX_p_011 =
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm = (int32_t)(
 8005fb2:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	fb02 f303 	mul.w	r3, r2, r3
 8005fbc:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fc4:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	da01      	bge.n	8005fd0 <VL53LX_copy_sys_and_core_results_to_range_results+0x214>
 8005fcc:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8005fd0:	12db      	asrs	r3, r3, #11
 8005fd2:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	b21a      	sxth	r2, r3
 8005fd8:	6a3b      	ldr	r3, [r7, #32]
 8005fda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd1;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	695a      	ldr	r2, [r3, #20]
			pdata->VL53LX_p_017 =
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd1;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	699a      	ldr	r2, [r3, #24]
			pdata->VL53LX_p_010 =
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
 8005ff4:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd1;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	691a      	ldr	r2, [r3, #16]
			pdata->VL53LX_p_016 =
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 8005ffe:	bf00      	nop
		}


		pdata->VL53LX_p_026    = pdata->VL53LX_p_011;
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8006006:	6a3b      	ldr	r3, [r7, #32]
 8006008:	87da      	strh	r2, [r3, #62]	; 0x3e
		pdata->VL53LX_p_027    = pdata->VL53LX_p_011;
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8006010:	6a3b      	ldr	r3, [r7, #32]
 8006012:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 8006022:	6a3b      	ldr	r3, [r7, #32]
 8006024:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8006028:	6a3b      	ldr	r3, [r7, #32]
 800602a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

		pdata++;
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	334c      	adds	r3, #76	; 0x4c
 8006032:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 8006034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006038:	3301      	adds	r3, #1
 800603a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800603e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006042:	2b01      	cmp	r3, #1
 8006044:	f67f aefc 	bls.w	8005e40 <VL53LX_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	2200      	movs	r2, #0
 800604c:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	785b      	ldrb	r3, [r3, #1]
 8006052:	f003 031f 	and.w	r3, r3, #31
 8006056:	2b11      	cmp	r3, #17
 8006058:	bf8c      	ite	hi
 800605a:	2201      	movhi	r2, #1
 800605c:	2200      	movls	r2, #0
 800605e:	b2d2      	uxtb	r2, r2
 8006060:	2a00      	cmp	r2, #0
 8006062:	d116      	bne.n	8006092 <VL53LX_copy_sys_and_core_results_to_range_results+0x2d6>
 8006064:	2201      	movs	r2, #1
 8006066:	409a      	lsls	r2, r3
 8006068:	4b0d      	ldr	r3, [pc, #52]	; (80060a0 <VL53LX_copy_sys_and_core_results_to_range_results+0x2e4>)
 800606a:	4013      	ands	r3, r2
 800606c:	2b00      	cmp	r3, #0
 800606e:	bf14      	ite	ne
 8006070:	2301      	movne	r3, #1
 8006072:	2300      	moveq	r3, #0
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00b      	beq.n	8006092 <VL53LX_copy_sys_and_core_results_to_range_results+0x2d6>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	785b      	ldrb	r3, [r3, #1]
 800607e:	f003 031f 	and.w	r3, r3, #31
 8006082:	b2da      	uxtb	r2, r3
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53LX_p_003[0].range_status =
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			VL53LX_DEVICEERROR_NOUPDATE;
	break;
 8006090:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8006092:	bf00      	nop
 8006094:	372c      	adds	r7, #44	; 0x2c
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	0002200e 	.word	0x0002200e

080060a4 <VL53LX_set_zone_dss_config>:


VL53LX_Error VL53LX_set_zone_dss_config(
	VL53LX_DEV                      Dev,
	VL53LX_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80060ae:	2300      	movs	r3, #0
 80060b0:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	3318      	adds	r3, #24
 80060b6:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	332c      	adds	r3, #44	; 0x2c
 80060bc:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	2b05      	cmp	r3, #5
 80060c4:	d109      	bne.n	80060da <VL53LX_set_zone_dss_config+0x36>
		VL53LX_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	2202      	movs	r2, #2
 80060ca:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
		VL53LX_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
 80060d8:	e003      	b.n	80060e2 <VL53LX_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 80060e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	371c      	adds	r7, #28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <VL53LX_set_dmax_mode>:


VL53LX_Error VL53LX_set_dmax_mode(
	VL53LX_DEV               Dev,
	VL53LX_DeviceDmaxMode    dmax_mode)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b085      	sub	sp, #20
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
 80060fa:	460b      	mov	r3, r1
 80060fc:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80060fe:	2300      	movs	r3, #0
 8006100:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	3318      	adds	r3, #24
 8006106:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	78fa      	ldrb	r2, [r7, #3]
 800610c:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 800610e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <VL53LX_get_dmax_calibration_data>:

VL53LX_Error VL53LX_get_dmax_calibration_data(
	VL53LX_DEV                      Dev,
	VL53LX_DeviceDmaxMode           dmax_mode,
	VL53LX_dmax_calibration_data_t *pdmax_cal)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b086      	sub	sp, #24
 8006122:	af00      	add	r7, sp, #0
 8006124:	60f8      	str	r0, [r7, #12]
 8006126:	460b      	mov	r3, r1
 8006128:	607a      	str	r2, [r7, #4]
 800612a:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800612c:	2300      	movs	r3, #0
 800612e:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t    *pdev =
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	3318      	adds	r3, #24
 8006134:	613b      	str	r3, [r7, #16]
		VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 8006136:	7afb      	ldrb	r3, [r7, #11]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d009      	beq.n	8006150 <VL53LX_get_dmax_calibration_data+0x32>
 800613c:	2b02      	cmp	r3, #2
 800613e:	d10f      	bne.n	8006160 <VL53LX_get_dmax_calibration_data+0x42>

	case VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	33ae      	adds	r3, #174	; 0xae
		memcpy(
 8006144:	220a      	movs	r2, #10
 8006146:	4619      	mov	r1, r3
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f00e fd4b 	bl	8014be4 <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 800614e:	e00a      	b.n	8006166 <VL53LX_get_dmax_calibration_data+0x48>

	case VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	33a4      	adds	r3, #164	; 0xa4
		memcpy(
 8006154:	220a      	movs	r2, #10
 8006156:	4619      	mov	r1, r3
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f00e fd43 	bl	8014be4 <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 800615e:	e002      	b.n	8006166 <VL53LX_get_dmax_calibration_data+0x48>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8006160:	23fc      	movs	r3, #252	; 0xfc
 8006162:	75fb      	strb	r3, [r7, #23]
	break;
 8006164:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8006166:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
	...

08006174 <VL53LX_get_tuning_parm>:

VL53LX_Error VL53LX_get_tuning_parm(
	VL53LX_DEV                     Dev,
	VL53LX_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8006174:	b480      	push	{r7}
 8006176:	b089      	sub	sp, #36	; 0x24
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	460b      	mov	r3, r1
 800617e:	607a      	str	r2, [r7, #4]
 8006180:	817b      	strh	r3, [r7, #10]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006182:	2300      	movs	r3, #0
 8006184:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3318      	adds	r3, #24
 800618a:	61bb      	str	r3, [r7, #24]
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006192:	617b      	str	r3, [r7, #20]
	VL53LX_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800619a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800619c:	897b      	ldrh	r3, [r7, #10]
 800619e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80061a2:	2bb9      	cmp	r3, #185	; 0xb9
 80061a4:	f200 86ca 	bhi.w	8006f3c <VL53LX_get_tuning_parm+0xdc8>
 80061a8:	a201      	add	r2, pc, #4	; (adr r2, 80061b0 <VL53LX_get_tuning_parm+0x3c>)
 80061aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ae:	bf00      	nop
 80061b0:	08006499 	.word	0x08006499
 80061b4:	080064a9 	.word	0x080064a9
 80061b8:	080064b9 	.word	0x080064b9
 80061bc:	080064c9 	.word	0x080064c9
 80061c0:	080064d7 	.word	0x080064d7
 80061c4:	080064e5 	.word	0x080064e5
 80061c8:	080064f3 	.word	0x080064f3
 80061cc:	08006501 	.word	0x08006501
 80061d0:	0800650f 	.word	0x0800650f
 80061d4:	0800651d 	.word	0x0800651d
 80061d8:	0800652b 	.word	0x0800652b
 80061dc:	08006537 	.word	0x08006537
 80061e0:	08006545 	.word	0x08006545
 80061e4:	08006553 	.word	0x08006553
 80061e8:	0800655f 	.word	0x0800655f
 80061ec:	0800656d 	.word	0x0800656d
 80061f0:	0800657b 	.word	0x0800657b
 80061f4:	0800658b 	.word	0x0800658b
 80061f8:	0800659b 	.word	0x0800659b
 80061fc:	080065a9 	.word	0x080065a9
 8006200:	080065b9 	.word	0x080065b9
 8006204:	080065c7 	.word	0x080065c7
 8006208:	080065d7 	.word	0x080065d7
 800620c:	080065e7 	.word	0x080065e7
 8006210:	080065f7 	.word	0x080065f7
 8006214:	08006607 	.word	0x08006607
 8006218:	08006617 	.word	0x08006617
 800621c:	08006627 	.word	0x08006627
 8006220:	08006637 	.word	0x08006637
 8006224:	08006647 	.word	0x08006647
 8006228:	08006657 	.word	0x08006657
 800622c:	08006665 	.word	0x08006665
 8006230:	08006675 	.word	0x08006675
 8006234:	08006685 	.word	0x08006685
 8006238:	08006695 	.word	0x08006695
 800623c:	080066a5 	.word	0x080066a5
 8006240:	080066b5 	.word	0x080066b5
 8006244:	080066c5 	.word	0x080066c5
 8006248:	080066d5 	.word	0x080066d5
 800624c:	080066e5 	.word	0x080066e5
 8006250:	080066f5 	.word	0x080066f5
 8006254:	08006705 	.word	0x08006705
 8006258:	08006715 	.word	0x08006715
 800625c:	08006725 	.word	0x08006725
 8006260:	08006735 	.word	0x08006735
 8006264:	08006745 	.word	0x08006745
 8006268:	08006753 	.word	0x08006753
 800626c:	08006761 	.word	0x08006761
 8006270:	0800676f 	.word	0x0800676f
 8006274:	0800677d 	.word	0x0800677d
 8006278:	0800678b 	.word	0x0800678b
 800627c:	08006799 	.word	0x08006799
 8006280:	080067a7 	.word	0x080067a7
 8006284:	080067b5 	.word	0x080067b5
 8006288:	080067c3 	.word	0x080067c3
 800628c:	080067d1 	.word	0x080067d1
 8006290:	080067df 	.word	0x080067df
 8006294:	080067ed 	.word	0x080067ed
 8006298:	080067fb 	.word	0x080067fb
 800629c:	08006809 	.word	0x08006809
 80062a0:	08006817 	.word	0x08006817
 80062a4:	08006825 	.word	0x08006825
 80062a8:	08006833 	.word	0x08006833
 80062ac:	08006841 	.word	0x08006841
 80062b0:	0800684f 	.word	0x0800684f
 80062b4:	0800685d 	.word	0x0800685d
 80062b8:	0800686b 	.word	0x0800686b
 80062bc:	08006879 	.word	0x08006879
 80062c0:	08006887 	.word	0x08006887
 80062c4:	08006895 	.word	0x08006895
 80062c8:	080068a3 	.word	0x080068a3
 80062cc:	080068b1 	.word	0x080068b1
 80062d0:	080068bf 	.word	0x080068bf
 80062d4:	080068cd 	.word	0x080068cd
 80062d8:	080068d9 	.word	0x080068d9
 80062dc:	080068e7 	.word	0x080068e7
 80062e0:	080068f5 	.word	0x080068f5
 80062e4:	08006901 	.word	0x08006901
 80062e8:	0800690d 	.word	0x0800690d
 80062ec:	08006919 	.word	0x08006919
 80062f0:	08006925 	.word	0x08006925
 80062f4:	08006931 	.word	0x08006931
 80062f8:	0800693d 	.word	0x0800693d
 80062fc:	0800694b 	.word	0x0800694b
 8006300:	08006959 	.word	0x08006959
 8006304:	08006967 	.word	0x08006967
 8006308:	08006975 	.word	0x08006975
 800630c:	08006983 	.word	0x08006983
 8006310:	08006991 	.word	0x08006991
 8006314:	0800699f 	.word	0x0800699f
 8006318:	080069ad 	.word	0x080069ad
 800631c:	080069bb 	.word	0x080069bb
 8006320:	080069c9 	.word	0x080069c9
 8006324:	080069d7 	.word	0x080069d7
 8006328:	080069e5 	.word	0x080069e5
 800632c:	080069f3 	.word	0x080069f3
 8006330:	08006a01 	.word	0x08006a01
 8006334:	08006a0f 	.word	0x08006a0f
 8006338:	08006a1d 	.word	0x08006a1d
 800633c:	08006a2b 	.word	0x08006a2b
 8006340:	08006a39 	.word	0x08006a39
 8006344:	08006a47 	.word	0x08006a47
 8006348:	08006a55 	.word	0x08006a55
 800634c:	08006a63 	.word	0x08006a63
 8006350:	08006a71 	.word	0x08006a71
 8006354:	08006a7f 	.word	0x08006a7f
 8006358:	08006a8d 	.word	0x08006a8d
 800635c:	08006a9b 	.word	0x08006a9b
 8006360:	08006aa9 	.word	0x08006aa9
 8006364:	08006ab7 	.word	0x08006ab7
 8006368:	08006ac5 	.word	0x08006ac5
 800636c:	08006ad3 	.word	0x08006ad3
 8006370:	08006ae1 	.word	0x08006ae1
 8006374:	08006aef 	.word	0x08006aef
 8006378:	08006afd 	.word	0x08006afd
 800637c:	08006b0b 	.word	0x08006b0b
 8006380:	08006b19 	.word	0x08006b19
 8006384:	08006b27 	.word	0x08006b27
 8006388:	08006b35 	.word	0x08006b35
 800638c:	08006b47 	.word	0x08006b47
 8006390:	08006b59 	.word	0x08006b59
 8006394:	08006b69 	.word	0x08006b69
 8006398:	08006b7b 	.word	0x08006b7b
 800639c:	08006b8d 	.word	0x08006b8d
 80063a0:	08006b9f 	.word	0x08006b9f
 80063a4:	08006bb1 	.word	0x08006bb1
 80063a8:	08006bc3 	.word	0x08006bc3
 80063ac:	08006bd5 	.word	0x08006bd5
 80063b0:	08006be9 	.word	0x08006be9
 80063b4:	08006bfb 	.word	0x08006bfb
 80063b8:	08006c0d 	.word	0x08006c0d
 80063bc:	08006c1f 	.word	0x08006c1f
 80063c0:	08006c31 	.word	0x08006c31
 80063c4:	08006c43 	.word	0x08006c43
 80063c8:	08006c55 	.word	0x08006c55
 80063cc:	08006c67 	.word	0x08006c67
 80063d0:	08006c79 	.word	0x08006c79
 80063d4:	08006c8b 	.word	0x08006c8b
 80063d8:	08006c99 	.word	0x08006c99
 80063dc:	08006ca7 	.word	0x08006ca7
 80063e0:	08006cb5 	.word	0x08006cb5
 80063e4:	08006cc3 	.word	0x08006cc3
 80063e8:	08006cd1 	.word	0x08006cd1
 80063ec:	08006cdf 	.word	0x08006cdf
 80063f0:	08006ced 	.word	0x08006ced
 80063f4:	08006cff 	.word	0x08006cff
 80063f8:	08006d0d 	.word	0x08006d0d
 80063fc:	08006d1b 	.word	0x08006d1b
 8006400:	08006d29 	.word	0x08006d29
 8006404:	08006d37 	.word	0x08006d37
 8006408:	08006d45 	.word	0x08006d45
 800640c:	08006d53 	.word	0x08006d53
 8006410:	08006d61 	.word	0x08006d61
 8006414:	08006d6f 	.word	0x08006d6f
 8006418:	08006d7d 	.word	0x08006d7d
 800641c:	08006d8b 	.word	0x08006d8b
 8006420:	08006d99 	.word	0x08006d99
 8006424:	08006da7 	.word	0x08006da7
 8006428:	08006db5 	.word	0x08006db5
 800642c:	08006dc3 	.word	0x08006dc3
 8006430:	08006dd1 	.word	0x08006dd1
 8006434:	08006ddf 	.word	0x08006ddf
 8006438:	08006ded 	.word	0x08006ded
 800643c:	08006dfb 	.word	0x08006dfb
 8006440:	08006e09 	.word	0x08006e09
 8006444:	08006e17 	.word	0x08006e17
 8006448:	08006e25 	.word	0x08006e25
 800644c:	08006e33 	.word	0x08006e33
 8006450:	08006e41 	.word	0x08006e41
 8006454:	08006e4f 	.word	0x08006e4f
 8006458:	08006e5d 	.word	0x08006e5d
 800645c:	08006e6b 	.word	0x08006e6b
 8006460:	08006e79 	.word	0x08006e79
 8006464:	08006e87 	.word	0x08006e87
 8006468:	08006e95 	.word	0x08006e95
 800646c:	08006ea3 	.word	0x08006ea3
 8006470:	08006eb1 	.word	0x08006eb1
 8006474:	08006ebf 	.word	0x08006ebf
 8006478:	08006ecd 	.word	0x08006ecd
 800647c:	08006edb 	.word	0x08006edb
 8006480:	08006ee9 	.word	0x08006ee9
 8006484:	08006ef7 	.word	0x08006ef7
 8006488:	08006f05 	.word	0x08006f05
 800648c:	08006f13 	.word	0x08006f13
 8006490:	08006f21 	.word	0x08006f21
 8006494:	08006f2f 	.word	0x08006f2f

	case VL53LX_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800649e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	601a      	str	r2, [r3, #0]
	break;
 80064a4:	f000 bd51 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 80064ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	601a      	str	r2, [r3, #0]
	break;
 80064b4:	f000 bd49 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 80064be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	601a      	str	r2, [r3, #0]
	break;
 80064c4:	f000 bd41 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	601a      	str	r2, [r3, #0]
	break;
 80064d2:	f000 bd3a 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	785b      	ldrb	r3, [r3, #1]
 80064da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	601a      	str	r2, [r3, #0]
	break;
 80064e0:	f000 bd33 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	789b      	ldrb	r3, [r3, #2]
 80064e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	601a      	str	r2, [r3, #0]
	break;
 80064ee:	f000 bd2c 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	78db      	ldrb	r3, [r3, #3]
 80064f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	601a      	str	r2, [r3, #0]
	break;
 80064fc:	f000 bd25 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	791b      	ldrb	r3, [r3, #4]
 8006504:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	601a      	str	r2, [r3, #0]
	break;
 800650a:	f000 bd1e 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	795b      	ldrb	r3, [r3, #5]
 8006512:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	601a      	str	r2, [r3, #0]
	break;
 8006518:	f000 bd17 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	799b      	ldrb	r3, [r3, #6]
 8006520:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	601a      	str	r2, [r3, #0]
	break;
 8006526:	f000 bd10 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	601a      	str	r2, [r3, #0]
	break;
 8006532:	f000 bd0a 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	891b      	ldrh	r3, [r3, #8]
 800653a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	601a      	str	r2, [r3, #0]
	break;
 8006540:	f000 bd03 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	8a1b      	ldrh	r3, [r3, #16]
 8006548:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	601a      	str	r2, [r3, #0]
	break;
 800654e:	f000 bcfc 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	601a      	str	r2, [r3, #0]
	break;
 800655a:	f000 bcf6 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	7e1b      	ldrb	r3, [r3, #24]
 8006562:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	601a      	str	r2, [r3, #0]
	break;
 8006568:	f000 bcef 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	8b5b      	ldrh	r3, [r3, #26]
 8006570:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	601a      	str	r2, [r3, #0]
	break;
 8006576:	f000 bce8 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8006580:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	601a      	str	r2, [r3, #0]
	break;
 8006586:	f000 bce0 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006590:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	601a      	str	r2, [r3, #0]
	break;
 8006596:	f000 bcd8 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800659e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	601a      	str	r2, [r3, #0]
	break;
 80065a4:	f000 bcd1 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80065ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	601a      	str	r2, [r3, #0]
	break;
 80065b4:	f000 bcc9 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80065bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	601a      	str	r2, [r3, #0]
	break;
 80065c2:	f000 bcc2 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80065cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	601a      	str	r2, [r3, #0]
	break;
 80065d2:	f000 bcba 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 80065dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	601a      	str	r2, [r3, #0]
	break;
 80065e2:	f000 bcb2 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80065ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	601a      	str	r2, [r3, #0]
	break;
 80065f2:	f000 bcaa 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 80065fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	601a      	str	r2, [r3, #0]
	break;
 8006602:	f000 bca2 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800660c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	601a      	str	r2, [r3, #0]
	break;
 8006612:	f000 bc9a 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 800661c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	601a      	str	r2, [r3, #0]
	break;
 8006622:	f000 bc92 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	f9b3 32a6 	ldrsh.w	r3, [r3, #678]	; 0x2a6
		*ptuning_parm_value = (int32_t)(
 800662c:	461a      	mov	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	601a      	str	r2, [r3, #0]
	break;
 8006632:	f000 bc8a 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	f9b3 32a8 	ldrsh.w	r3, [r3, #680]	; 0x2a8
		*ptuning_parm_value = (int32_t)(
 800663c:	461a      	mov	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	601a      	str	r2, [r3, #0]
	break;
 8006642:	f000 bc82 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 800664c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	601a      	str	r2, [r3, #0]
	break;
 8006652:	f000 bc7a 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800665a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	601a      	str	r2, [r3, #0]
	break;
 8006660:	f000 bc73 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
		*ptuning_parm_value = (int32_t)(
 800666a:	461a      	mov	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	601a      	str	r2, [r3, #0]
	break;
 8006670:	f000 bc6b 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800667a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	601a      	str	r2, [r3, #0]
	break;
 8006680:	f000 bc63 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	f9b3 329e 	ldrsh.w	r3, [r3, #670]	; 0x29e
 800668a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	601a      	str	r2, [r3, #0]
	break;
 8006690:	f000 bc5b 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 800669a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	601a      	str	r2, [r3, #0]
	break;
 80066a0:	f000 bc53 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 80066aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	601a      	str	r2, [r3, #0]
	break;
 80066b0:	f000 bc4b 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 80066ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	601a      	str	r2, [r3, #0]
	break;
 80066c0:	f000 bc43 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 80066ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	601a      	str	r2, [r3, #0]
	break;
 80066d0:	f000 bc3b 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 80066da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	601a      	str	r2, [r3, #0]
	break;
 80066e0:	f000 bc33 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	f8b3 3110 	ldrh.w	r3, [r3, #272]	; 0x110
 80066ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	601a      	str	r2, [r3, #0]
	break;
 80066f0:	f000 bc2b 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 80066fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	601a      	str	r2, [r3, #0]
	break;
 8006700:	f000 bc23 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800670a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	601a      	str	r2, [r3, #0]
	break;
 8006710:	f000 bc1b 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
		*ptuning_parm_value = (int32_t)(
 800671a:	461a      	mov	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	601a      	str	r2, [r3, #0]
	break;
 8006720:	f000 bc13 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800672a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	601a      	str	r2, [r3, #0]
	break;
 8006730:	f000 bc0b 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
		*ptuning_parm_value = (int32_t)(
 800673a:	461a      	mov	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	601a      	str	r2, [r3, #0]
	break;
 8006740:	f000 bc03 	b.w	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800674a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	601a      	str	r2, [r3, #0]
	break;
 8006750:	e3fb      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 8006758:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	601a      	str	r2, [r3, #0]
	break;
 800675e:	e3f4      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 8006766:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	601a      	str	r2, [r3, #0]
	break;
 800676c:	e3ed      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 8006774:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	601a      	str	r2, [r3, #0]
	break;
 800677a:	e3e6      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 8006782:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	601a      	str	r2, [r3, #0]
	break;
 8006788:	e3df      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 8006790:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	601a      	str	r2, [r3, #0]
	break;
 8006796:	e3d8      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800679e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	601a      	str	r2, [r3, #0]
	break;
 80067a4:	e3d1      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	f9b3 32a0 	ldrsh.w	r3, [r3, #672]	; 0x2a0
 80067ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	601a      	str	r2, [r3, #0]
	break;
 80067b2:	e3ca      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80067ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	601a      	str	r2, [r3, #0]
	break;
 80067c0:	e3c3      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 80067c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	601a      	str	r2, [r3, #0]
	break;
 80067ce:	e3bc      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80067d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	601a      	str	r2, [r3, #0]
	break;
 80067dc:	e3b5      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80067e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	601a      	str	r2, [r3, #0]
	break;
 80067ea:	e3ae      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 80067f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	601a      	str	r2, [r3, #0]
	break;
 80067f8:	e3a7      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 8006800:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	601a      	str	r2, [r3, #0]
	break;
 8006806:	e3a0      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 800680e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	601a      	str	r2, [r3, #0]
	break;
 8006814:	e399      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	f893 3254 	ldrb.w	r3, [r3, #596]	; 0x254
 800681c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	601a      	str	r2, [r3, #0]
	break;
 8006822:	e392      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	f8b3 3260 	ldrh.w	r3, [r3, #608]	; 0x260
 800682a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	601a      	str	r2, [r3, #0]
	break;
 8006830:	e38b      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	f8b3 3262 	ldrh.w	r3, [r3, #610]	; 0x262
 8006838:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	601a      	str	r2, [r3, #0]
	break;
 800683e:	e384      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006846:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	601a      	str	r2, [r3, #0]
	break;
 800684c:	e37d      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	f8b3 3266 	ldrh.w	r3, [r3, #614]	; 0x266
 8006854:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	601a      	str	r2, [r3, #0]
	break;
 800685a:	e376      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	f8b3 3268 	ldrh.w	r3, [r3, #616]	; 0x268
 8006862:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	601a      	str	r2, [r3, #0]
	break;
 8006868:	e36f      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8006870:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	601a      	str	r2, [r3, #0]
	break;
 8006876:	e368      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 800687e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	601a      	str	r2, [r3, #0]
	break;
 8006884:	e361      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53LX_p_005;
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 800688c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	601a      	str	r2, [r3, #0]
	break;
 8006892:	e35a      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 800689a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	601a      	str	r2, [r3, #0]
	break;
 80068a0:	e353      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 80068a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	601a      	str	r2, [r3, #0]
	break;
 80068ae:	e34c      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 80068b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	601a      	str	r2, [r3, #0]
	break;
 80068bc:	e345      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 80068c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	601a      	str	r2, [r3, #0]
	break;
 80068ca:	e33e      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	7c1b      	ldrb	r3, [r3, #16]
 80068d0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	601a      	str	r2, [r3, #0]
	break;
 80068d6:	e338      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80068de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	601a      	str	r2, [r3, #0]
	break;
 80068e4:	e331      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80068ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	601a      	str	r2, [r3, #0]
	break;
 80068f2:	e32a      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	601a      	str	r2, [r3, #0]
	break;
 80068fe:	e324      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	601a      	str	r2, [r3, #0]
	break;
 800690a:	e31e      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	8adb      	ldrh	r3, [r3, #22]
 8006910:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	601a      	str	r2, [r3, #0]
	break;
 8006916:	e318      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	8b1b      	ldrh	r3, [r3, #24]
 800691c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	601a      	str	r2, [r3, #0]
	break;
 8006922:	e312      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	601a      	str	r2, [r3, #0]
	break;
 800692e:	e30c      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	601a      	str	r2, [r3, #0]
	break;
 800693a:	e306      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006942:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	601a      	str	r2, [r3, #0]
	break;
 8006948:	e2ff      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006950:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	601a      	str	r2, [r3, #0]
	break;
 8006956:	e2f8      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800695e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	601a      	str	r2, [r3, #0]
	break;
 8006964:	e2f1      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800696c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	601a      	str	r2, [r3, #0]
	break;
 8006972:	e2ea      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	f893 32c0 	ldrb.w	r3, [r3, #704]	; 0x2c0
 800697a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	601a      	str	r2, [r3, #0]
	break;
 8006980:	e2e3      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
 8006988:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	601a      	str	r2, [r3, #0]
	break;
 800698e:	e2dc      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	f893 32c2 	ldrb.w	r3, [r3, #706]	; 0x2c2
 8006996:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	601a      	str	r2, [r3, #0]
	break;
 800699c:	e2d5      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	f8b3 32c4 	ldrh.w	r3, [r3, #708]	; 0x2c4
 80069a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	601a      	str	r2, [r3, #0]
	break;
 80069aa:	e2ce      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80069b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	601a      	str	r2, [r3, #0]
	break;
 80069b8:	e2c7      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80069c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	601a      	str	r2, [r3, #0]
	break;
 80069c6:	e2c0      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	f8b3 32d4 	ldrh.w	r3, [r3, #724]	; 0x2d4
 80069ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	601a      	str	r2, [r3, #0]
	break;
 80069d4:	e2b9      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 80069dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	601a      	str	r2, [r3, #0]
	break;
 80069e2:	e2b2      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	f8b3 32d6 	ldrh.w	r3, [r3, #726]	; 0x2d6
 80069ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	601a      	str	r2, [r3, #0]
	break;
 80069f0:	e2ab      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53LX_p_005;
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 80069f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	601a      	str	r2, [r3, #0]
	break;
 80069fe:	e2a4      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	f893 320a 	ldrb.w	r3, [r3, #522]	; 0x20a
 8006a06:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	601a      	str	r2, [r3, #0]
	break;
 8006a0c:	e29d      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8006a14:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	601a      	str	r2, [r3, #0]
	break;
 8006a1a:	e296      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8006a22:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	601a      	str	r2, [r3, #0]
	break;
 8006a28:	e28f      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	f8b3 3126 	ldrh.w	r3, [r3, #294]	; 0x126
 8006a30:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	601a      	str	r2, [r3, #0]
	break;
 8006a36:	e288      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 8006a3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	601a      	str	r2, [r3, #0]
	break;
 8006a44:	e281      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8006a4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	601a      	str	r2, [r3, #0]
	break;
 8006a52:	e27a      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8006a5a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	601a      	str	r2, [r3, #0]
	break;
 8006a60:	e273      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006a68:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	601a      	str	r2, [r3, #0]
	break;
 8006a6e:	e26c      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8006a76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	601a      	str	r2, [r3, #0]
	break;
 8006a7c:	e265      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8006a84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	601a      	str	r2, [r3, #0]
	break;
 8006a8a:	e25e      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006a92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	601a      	str	r2, [r3, #0]
	break;
 8006a98:	e257      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8006aa0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	601a      	str	r2, [r3, #0]
	break;
 8006aa6:	e250      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8006aae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	601a      	str	r2, [r3, #0]
	break;
 8006ab4:	e249      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8006abc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	601a      	str	r2, [r3, #0]
	break;
 8006ac2:	e242      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8006aca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	601a      	str	r2, [r3, #0]
	break;
 8006ad0:	e23b      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006ad8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	601a      	str	r2, [r3, #0]
	break;
 8006ade:	e234      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8006ae6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	601a      	str	r2, [r3, #0]
	break;
 8006aec:	e22d      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8006af4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	601a      	str	r2, [r3, #0]
	break;
 8006afa:	e226      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8006b02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	601a      	str	r2, [r3, #0]
	break;
 8006b08:	e21f      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8006b10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	601a      	str	r2, [r3, #0]
	break;
 8006b16:	e218      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8006b1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	601a      	str	r2, [r3, #0]
	break;
 8006b24:	e211      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8006b2c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	601a      	str	r2, [r3, #0]
	break;
 8006b32:	e20a      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006b3a:	3318      	adds	r3, #24
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	601a      	str	r2, [r3, #0]
	break;
 8006b44:	e201      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006b4c:	331c      	adds	r3, #28
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	601a      	str	r2, [r3, #0]
	break;
 8006b56:	e1f8      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	601a      	str	r2, [r3, #0]
	break;
 8006b66:	e1f0      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006b6e:	3304      	adds	r3, #4
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	601a      	str	r2, [r3, #0]
	break;
 8006b78:	e1e7      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006b80:	3308      	adds	r3, #8
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	601a      	str	r2, [r3, #0]
	break;
 8006b8a:	e1de      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006b92:	330c      	adds	r3, #12
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	601a      	str	r2, [r3, #0]
	break;
 8006b9c:	e1d5      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006ba4:	3310      	adds	r3, #16
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	601a      	str	r2, [r3, #0]
	break;
 8006bae:	e1cc      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006bb6:	3314      	adds	r3, #20
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	601a      	str	r2, [r3, #0]
	break;
 8006bc0:	e1c3      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006bc8:	331c      	adds	r3, #28
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	601a      	str	r2, [r3, #0]
	break;
 8006bd2:	e1ba      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006bda:	331e      	adds	r3, #30
 8006bdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006be0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	601a      	str	r2, [r3, #0]
	break;
 8006be6:	e1b0      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bf2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	601a      	str	r2, [r3, #0]
	break;
 8006bf8:	e1a7      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006c00:	3302      	adds	r3, #2
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	601a      	str	r2, [r3, #0]
	break;
 8006c0a:	e19e      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006c12:	3316      	adds	r3, #22
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	601a      	str	r2, [r3, #0]
	break;
 8006c1c:	e195      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006c24:	3318      	adds	r3, #24
 8006c26:	681b      	ldr	r3, [r3, #0]
		*ptuning_parm_value = (int32_t)(
 8006c28:	461a      	mov	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	601a      	str	r2, [r3, #0]
	break;
 8006c2e:	e18c      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006c36:	3304      	adds	r3, #4
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	601a      	str	r2, [r3, #0]
	break;
 8006c40:	e183      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006c48:	3308      	adds	r3, #8
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	601a      	str	r2, [r3, #0]
	break;
 8006c52:	e17a      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006c5a:	330c      	adds	r3, #12
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	601a      	str	r2, [r3, #0]
	break;
 8006c64:	e171      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006c6c:	3310      	adds	r3, #16
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	601a      	str	r2, [r3, #0]
	break;
 8006c76:	e168      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8006c7e:	3310      	adds	r3, #16
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	601a      	str	r2, [r3, #0]
	break;
 8006c88:	e15f      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8006c90:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	601a      	str	r2, [r3, #0]
	break;
 8006c96:	e158      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8006c9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	601a      	str	r2, [r3, #0]
	break;
 8006ca4:	e151      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 8006cac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	601a      	str	r2, [r3, #0]
	break;
 8006cb2:	e14a      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8006cba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	601a      	str	r2, [r3, #0]
	break;
 8006cc0:	e143      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8006cc8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	601a      	str	r2, [r3, #0]
	break;
 8006cce:	e13c      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8006cd6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	601a      	str	r2, [r3, #0]
	break;
 8006cdc:	e135      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 8006ce4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	601a      	str	r2, [r3, #0]
	break;
 8006cea:	e12e      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006cf2:	3314      	adds	r3, #20
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	601a      	str	r2, [r3, #0]
	break;
 8006cfc:	e125      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>

	case VL53LX_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	f893 3185 	ldrb.w	r3, [r3, #389]	; 0x185
 8006d04:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	601a      	str	r2, [r3, #0]
	break;
 8006d0a:	e11e      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	f9b3 3186 	ldrsh.w	r3, [r3, #390]	; 0x186
 8006d12:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	601a      	str	r2, [r3, #0]
	break;
 8006d18:	e117      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	f9b3 3188 	ldrsh.w	r3, [r3, #392]	; 0x188
 8006d20:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	601a      	str	r2, [r3, #0]
	break;
 8006d26:	e110      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	f9b3 318a 	ldrsh.w	r3, [r3, #394]	; 0x18a
 8006d2e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	601a      	str	r2, [r3, #0]
	break;
 8006d34:	e109      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	f9b3 318c 	ldrsh.w	r3, [r3, #396]	; 0x18c
 8006d3c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	601a      	str	r2, [r3, #0]
	break;
 8006d42:	e102      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	f9b3 318e 	ldrsh.w	r3, [r3, #398]	; 0x18e
 8006d4a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	601a      	str	r2, [r3, #0]
	break;
 8006d50:	e0fb      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	f9b3 3190 	ldrsh.w	r3, [r3, #400]	; 0x190
 8006d58:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	601a      	str	r2, [r3, #0]
	break;
 8006d5e:	e0f4      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	f9b3 3192 	ldrsh.w	r3, [r3, #402]	; 0x192
 8006d66:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	601a      	str	r2, [r3, #0]
	break;
 8006d6c:	e0ed      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	f9b3 3194 	ldrsh.w	r3, [r3, #404]	; 0x194
 8006d74:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	601a      	str	r2, [r3, #0]
	break;
 8006d7a:	e0e6      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	f9b3 3196 	ldrsh.w	r3, [r3, #406]	; 0x196
 8006d82:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	601a      	str	r2, [r3, #0]
	break;
 8006d88:	e0df      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	f9b3 3198 	ldrsh.w	r3, [r3, #408]	; 0x198
 8006d90:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	601a      	str	r2, [r3, #0]
	break;
 8006d96:	e0d8      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	f9b3 319a 	ldrsh.w	r3, [r3, #410]	; 0x19a
 8006d9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	601a      	str	r2, [r3, #0]
	break;
 8006da4:	e0d1      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	f9b3 319c 	ldrsh.w	r3, [r3, #412]	; 0x19c
 8006dac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	601a      	str	r2, [r3, #0]
	break;
 8006db2:	e0ca      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	f9b3 319e 	ldrsh.w	r3, [r3, #414]	; 0x19e
 8006dba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	601a      	str	r2, [r3, #0]
	break;
 8006dc0:	e0c3      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	f9b3 31a0 	ldrsh.w	r3, [r3, #416]	; 0x1a0
 8006dc8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	601a      	str	r2, [r3, #0]
	break;
 8006dce:	e0bc      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	f9b3 31a2 	ldrsh.w	r3, [r3, #418]	; 0x1a2
 8006dd6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	601a      	str	r2, [r3, #0]
	break;
 8006ddc:	e0b5      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	f9b3 31a4 	ldrsh.w	r3, [r3, #420]	; 0x1a4
 8006de4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	601a      	str	r2, [r3, #0]
	break;
 8006dea:	e0ae      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	f9b3 31a6 	ldrsh.w	r3, [r3, #422]	; 0x1a6
 8006df2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	601a      	str	r2, [r3, #0]
	break;
 8006df8:	e0a7      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	f9b3 31a8 	ldrsh.w	r3, [r3, #424]	; 0x1a8
 8006e00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	601a      	str	r2, [r3, #0]
	break;
 8006e06:	e0a0      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	f9b3 31aa 	ldrsh.w	r3, [r3, #426]	; 0x1aa
 8006e0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	601a      	str	r2, [r3, #0]
	break;
 8006e14:	e099      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	f9b3 31ac 	ldrsh.w	r3, [r3, #428]	; 0x1ac
 8006e1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	601a      	str	r2, [r3, #0]
	break;
 8006e22:	e092      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	f9b3 31ae 	ldrsh.w	r3, [r3, #430]	; 0x1ae
 8006e2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	601a      	str	r2, [r3, #0]
	break;
 8006e30:	e08b      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	f9b3 31b0 	ldrsh.w	r3, [r3, #432]	; 0x1b0
 8006e38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	601a      	str	r2, [r3, #0]
	break;
 8006e3e:	e084      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	f9b3 31b2 	ldrsh.w	r3, [r3, #434]	; 0x1b2
 8006e46:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	601a      	str	r2, [r3, #0]
	break;
 8006e4c:	e07d      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	f9b3 31b4 	ldrsh.w	r3, [r3, #436]	; 0x1b4
 8006e54:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	601a      	str	r2, [r3, #0]
	break;
 8006e5a:	e076      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	f9b3 31b6 	ldrsh.w	r3, [r3, #438]	; 0x1b6
 8006e62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	601a      	str	r2, [r3, #0]
	break;
 8006e68:	e06f      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	f9b3 31b8 	ldrsh.w	r3, [r3, #440]	; 0x1b8
 8006e70:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	601a      	str	r2, [r3, #0]
	break;
 8006e76:	e068      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	f9b3 31ba 	ldrsh.w	r3, [r3, #442]	; 0x1ba
 8006e7e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	601a      	str	r2, [r3, #0]
	break;
 8006e84:	e061      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	f9b3 31bc 	ldrsh.w	r3, [r3, #444]	; 0x1bc
 8006e8c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	601a      	str	r2, [r3, #0]
	break;
 8006e92:	e05a      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	; 0x1be
 8006e9a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	601a      	str	r2, [r3, #0]
	break;
 8006ea0:	e053      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	; 0x1c0
 8006ea8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	601a      	str	r2, [r3, #0]
	break;
 8006eae:	e04c      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	; 0x1c2
 8006eb6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	601a      	str	r2, [r3, #0]
	break;
 8006ebc:	e045      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	; 0x1c4
 8006ec4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	601a      	str	r2, [r3, #0]
	break;
 8006eca:	e03e      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	; 0x1c6
 8006ed2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	601a      	str	r2, [r3, #0]
	break;
 8006ed8:	e037      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	; 0x1c8
 8006ee0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	601a      	str	r2, [r3, #0]
	break;
 8006ee6:	e030      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	; 0x1ca
 8006eee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	601a      	str	r2, [r3, #0]
	break;
 8006ef4:	e029      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 8006efc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	601a      	str	r2, [r3, #0]
	break;
 8006f02:	e022      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	; 0x1ce
 8006f0a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	601a      	str	r2, [r3, #0]
	break;
 8006f10:	e01b      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	; 0x1d0
 8006f18:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	601a      	str	r2, [r3, #0]
	break;
 8006f1e:	e014      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	; 0x1d2
 8006f26:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	601a      	str	r2, [r3, #0]
	break;
 8006f2c:	e00d      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	; 0x1d4
 8006f34:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	601a      	str	r2, [r3, #0]
	break;
 8006f3a:	e006      	b.n	8006f4a <VL53LX_get_tuning_parm+0xdd6>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006f42:	601a      	str	r2, [r3, #0]
		status = VL53LX_ERROR_INVALID_PARAMS;
 8006f44:	23fc      	movs	r3, #252	; 0xfc
 8006f46:	77fb      	strb	r3, [r7, #31]
	break;
 8006f48:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8006f4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3724      	adds	r7, #36	; 0x24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop

08006f5c <VL53LX_dynamic_xtalk_correction_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_enable(
	VL53LX_DEV                          Dev
	)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006f64:	2300      	movs	r3, #0
 8006f66:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	3318      	adds	r3, #24
 8006f6c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006f74:	3314      	adds	r3, #20
 8006f76:	2201      	movs	r2, #1
 8006f78:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr

08006f8a <VL53LX_dynamic_xtalk_correction_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_disable(
	VL53LX_DEV                          Dev
	)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b085      	sub	sp, #20
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006f92:	2300      	movs	r3, #0
 8006f94:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	3318      	adds	r3, #24
 8006f9a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006fa2:	3314      	adds	r3, #20
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3714      	adds	r7, #20
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <VL53LX_dynamic_xtalk_correction_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	3318      	adds	r3, #24
 8006fc8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006fd0:	3315      	adds	r3, #21
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <VL53LX_dynamic_xtalk_correction_single_apply_enable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b085      	sub	sp, #20
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	3318      	adds	r3, #24
 8006ff6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006ffe:	3316      	adds	r3, #22
 8007000:	2201      	movs	r2, #1
 8007002:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8007004:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007008:	4618      	mov	r0, r3
 800700a:	3714      	adds	r7, #20
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <VL53LX_dynamic_xtalk_correction_single_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800701c:	2300      	movs	r3, #0
 800701e:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	3318      	adds	r3, #24
 8007024:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800702c:	3316      	adds	r3, #22
 800702e:	2200      	movs	r2, #0
 8007030:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8007032:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <VL53LX_dynamic_xtalk_correction_apply_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 8007042:	b480      	push	{r7}
 8007044:	b085      	sub	sp, #20
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800704a:	2300      	movs	r3, #0
 800704c:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	3318      	adds	r3, #24
 8007052:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800705a:	3315      	adds	r3, #21
 800705c:	2201      	movs	r2, #1
 800705e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8007060:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3714      	adds	r7, #20
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <VL53LX_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53LX_Error VL53LX_init_refspadchar_config_struct(
	VL53LX_refspadchar_config_t   *pdata)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007078:	2300      	movs	r3, #0
 800707a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2208      	movs	r2, #8
 8007080:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53LX_p_005              =
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	220b      	movs	r2, #11
 8007086:	705a      	strb	r2, [r3, #1]
		VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800708e:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007096:	811a      	strh	r2, [r3, #8]
		VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800709e:	815a      	strh	r2, [r3, #10]
		VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80070a6:	819a      	strh	r2, [r3, #12]
		VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80070a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <VL53LX_init_ssc_config_struct>:


VL53LX_Error VL53LX_init_ssc_config_struct(
	VL53LX_ssc_config_t   *pdata)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80070c0:	2300      	movs	r3, #0
 80070c2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53LX_DEVICESSCARRAY_RTN;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	701a      	strb	r2, [r3, #0]


	pdata->VL53LX_p_005 =
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2212      	movs	r2, #18
 80070ce:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	220f      	movs	r2, #15
 80070d4:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2202      	movs	r2, #2
 80070da:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 80070e2:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	220c      	movs	r2, #12
 80070e8:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80070ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <VL53LX_init_xtalk_config_struct>:


VL53LX_Error VL53LX_init_xtalk_config_struct(
	VL53LX_customer_nvm_managed_t *pnvm,
	VL53LX_xtalk_config_t   *pdata)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b084      	sub	sp, #16
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007104:	2300      	movs	r3, #0
 8007106:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	895b      	ldrh	r3, [r3, #10]
 800710c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	895b      	ldrh	r3, [r3, #10]
 800712a:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	2200      	movs	r2, #0
 8007148:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	2200      	movs	r2, #0
 800714e:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	2240      	movs	r2, #64	; 0x40
 8007154:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10d      	bne.n	800717a <VL53LX_init_xtalk_config_struct+0x80>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d108      	bne.n	800717a <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d103      	bne.n	800717a <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2200      	movs	r2, #0
 8007176:	741a      	strb	r2, [r3, #16]
 8007178:	e002      	b.n	8007180 <VL53LX_init_xtalk_config_struct+0x86>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	2201      	movs	r2, #1
 800717e:	741a      	strb	r2, [r3, #16]


	if ((status == VL53LX_ERROR_NONE) &&
 8007180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d114      	bne.n	80071b2 <VL53LX_init_xtalk_config_struct+0xb8>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53LX_ERROR_NONE) &&
 800718c:	2b01      	cmp	r3, #1
 800718e:	d110      	bne.n	80071b2 <VL53LX_init_xtalk_config_struct+0xb8>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53LX_calc_range_ignore_threshold(
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	6818      	ldr	r0, [r3, #0]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	7d9b      	ldrb	r3, [r3, #22]
 80071a4:	f001 ffa0 	bl	80090e8 <VL53LX_calc_range_ignore_threshold>
 80071a8:	4603      	mov	r3, r0
 80071aa:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	831a      	strh	r2, [r3, #24]
 80071b0:	e002      	b.n	80071b8 <VL53LX_init_xtalk_config_struct+0xbe>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	2200      	movs	r2, #0
 80071b6:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	f64f 72ce 	movw	r2, #65486	; 0xffce
 80071be:	835a      	strh	r2, [r3, #26]
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	2232      	movs	r2, #50	; 0x32
 80071c4:	839a      	strh	r2, [r3, #28]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80071cc:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	228c      	movs	r2, #140	; 0x8c
 80071d2:	841a      	strh	r2, [r3, #32]
			VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80071d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <VL53LX_init_xtalk_extract_config_struct>:

VL53LX_Error VL53LX_init_xtalk_extract_config_struct(
	VL53LX_xtalkextract_config_t   *pdata)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80071e8:	2300      	movs	r3, #0
 80071ea:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80071f2:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80071fa:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2207      	movs	r2, #7
 8007200:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f643 2298 	movw	r2, #15000	; 0x3a98
 8007208:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f242 7210 	movw	r2, #10000	; 0x2710
 8007210:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f64f 72ba 	movw	r2, #65466	; 0xffba
 8007218:	825a      	strh	r2, [r3, #18]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2246      	movs	r2, #70	; 0x46
 800721e:	829a      	strh	r2, [r3, #20]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007226:	82da      	strh	r2, [r3, #22]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	228c      	movs	r2, #140	; 0x8c
 800722c:	831a      	strh	r2, [r3, #24]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800722e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr

0800723e <VL53LX_init_offset_cal_config_struct>:


VL53LX_Error VL53LX_init_offset_cal_config_struct(
	VL53LX_offsetcal_config_t   *pdata)
{
 800723e:	b480      	push	{r7}
 8007240:	b085      	sub	sp, #20
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007246:	2300      	movs	r3, #0
 8007248:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007250:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f643 2298 	movw	r2, #15000	; 0x3a98
 8007258:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8007260:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8007268:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2208      	movs	r2, #8
 800726e:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2228      	movs	r2, #40	; 0x28
 8007274:	745a      	strb	r2, [r3, #17]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2209      	movs	r2, #9
 800727a:	749a      	strb	r2, [r3, #18]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800727c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007280:	4618      	mov	r0, r3
 8007282:	3714      	adds	r7, #20
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <VL53LX_init_zone_cal_config_struct>:

VL53LX_Error VL53LX_init_zone_cal_config_struct(
	VL53LX_zonecal_config_t   *pdata)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007294:	2300      	movs	r3, #0
 8007296:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800729e:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f643 2298 	movw	r2, #15000	; 0x3a98
 80072a6:	605a      	str	r2, [r3, #4]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80072ae:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80072b6:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2210      	movs	r2, #16
 80072bc:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2208      	movs	r2, #8
 80072c2:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80072c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3714      	adds	r7, #20
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <VL53LX_init_hist_post_process_config_struct>:


VL53LX_Error VL53LX_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53LX_hist_post_process_config_t   *pdata)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	4603      	mov	r3, r0
 80072dc:	6039      	str	r1, [r7, #0]
 80072de:	71fb      	strb	r3, [r7, #7]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80072e0:	2300      	movs	r3, #0
 80072e2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	2204      	movs	r2, #4
 80072e8:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	2201      	movs	r2, #1
 80072ee:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	2201      	movs	r2, #1
 80072f4:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	2202      	movs	r2, #2
 80072fa:	70da      	strb	r2, [r3, #3]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	2201      	movs	r2, #1
 8007300:	711a      	strb	r2, [r3, #4]
			VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	2250      	movs	r2, #80	; 0x50
 8007306:	715a      	strb	r2, [r3, #5]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	2264      	movs	r2, #100	; 0x64
 800730c:	719a      	strb	r2, [r3, #6]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	f241 023d 	movw	r2, #4157	; 0x103d
 8007314:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	2210      	movs	r2, #16
 800731a:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	2232      	movs	r2, #50	; 0x32
 8007320:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	2264      	movs	r2, #100	; 0x64
 8007326:	615a      	str	r2, [r3, #20]
		VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	2201      	movs	r2, #1
 800732c:	761a      	strb	r2, [r3, #24]
		VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	22b4      	movs	r2, #180	; 0xb4
 8007332:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	2200      	movs	r2, #0
 8007338:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	f240 72c3 	movw	r2, #1987	; 0x7c3
 8007340:	83da      	strh	r2, [r3, #30]
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	2208      	movs	r2, #8
 8007346:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	2288      	movs	r2, #136	; 0x88
 800734e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



	pdata->algo__consistency_check__phase_tolerance =
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	2208      	movs	r2, #8
 8007356:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007368:	849a      	strh	r2, [r3, #36]	; 0x24
	VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	2200      	movs	r2, #0
 800736e:	84da      	strh	r2, [r3, #38]	; 0x26
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	79fa      	ldrb	r2, [r7, #7]
 8007374:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	f64f 72ce 	movw	r2, #65486	; 0xffce
 800737e:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	2232      	movs	r2, #50	; 0x32
 8007384:	86da      	strh	r2, [r3, #54]	; 0x36
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800738c:	871a      	strh	r2, [r3, #56]	; 0x38
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	228c      	movs	r2, #140	; 0x8c
 8007392:	875a      	strh	r2, [r3, #58]	; 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	2250      	movs	r2, #80	; 0x50
 8007398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	2232      	movs	r2, #50	; 0x32
 80073a0:	87da      	strh	r2, [r3, #62]	; 0x3e



	LOG_FUNCTION_END(status);

	return status;
 80073a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3714      	adds	r7, #20
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <VL53LX_init_tuning_parm_storage_struct>:
}


VL53LX_Error VL53LX_init_tuning_parm_storage_struct(
	VL53LX_tuning_parm_storage_t   *pdata)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b085      	sub	sp, #20
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80073ba:	2300      	movs	r3, #0
 80073bc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	221e      	movs	r2, #30
 80073c2:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	220e      	movs	r2, #14
 80073c8:	805a      	strh	r2, [r3, #2]
			VL53LX_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f642 7294 	movw	r2, #12180	; 0x2f94
 80073d0:	809a      	strh	r2, [r3, #4]
			VL53LX_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	220e      	movs	r2, #14
 80073d6:	719a      	strb	r2, [r3, #6]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	220a      	movs	r2, #10
 80073dc:	71da      	strb	r2, [r3, #7]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2206      	movs	r2, #6
 80073e2:	721a      	strb	r2, [r3, #8]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	220e      	movs	r2, #14
 80073e8:	725a      	strb	r2, [r3, #9]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	220a      	movs	r2, #10
 80073ee:	729a      	strb	r2, [r3, #10]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2206      	movs	r2, #6
 80073f4:	72da      	strb	r2, [r3, #11]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2209      	movs	r2, #9
 80073fa:	731a      	strb	r2, [r3, #12]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2205      	movs	r2, #5
 8007400:	735a      	strb	r2, [r3, #13]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2203      	movs	r2, #3
 8007406:	739a      	strb	r2, [r3, #14]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2206      	movs	r2, #6
 800740c:	73da      	strb	r2, [r3, #15]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2206      	movs	r2, #6
 8007412:	741a      	strb	r2, [r3, #16]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2206      	movs	r2, #6
 8007418:	745a      	strb	r2, [r3, #17]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2202      	movs	r2, #2
 800741e:	749a      	strb	r2, [r3, #18]
		VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2221      	movs	r2, #33	; 0x21
 8007424:	74da      	strb	r2, [r3, #19]
			VL53LX_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	223c      	movs	r2, #60	; 0x3c
 8007436:	831a      	strh	r2, [r3, #24]
			VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	223c      	movs	r2, #60	; 0x3c
 800743c:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	223c      	movs	r2, #60	; 0x3c
 8007442:	839a      	strh	r2, [r3, #28]
			VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2280      	movs	r2, #128	; 0x80
 8007448:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2280      	movs	r2, #128	; 0x80
 800744e:	841a      	strh	r2, [r3, #32]
		VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2280      	movs	r2, #128	; 0x80
 8007454:	845a      	strh	r2, [r3, #34]	; 0x22
		VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2208      	movs	r2, #8
 800745a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2210      	movs	r2, #16
 8007462:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2201      	movs	r2, #1
 800746a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2202      	movs	r2, #2
 8007472:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			VL53LX_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			VL53LX_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2202      	movs	r2, #2
 8007482:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			VL53LX_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;
	pdata->tp_uwr_enable =
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		VL53LX_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800749c:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f640 22be 	movw	r2, #2750	; 0xabe
 80074a6:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	22fa      	movs	r2, #250	; 0xfa
 80074ae:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80074b8:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80074c2:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80074cc:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80074d6:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80074e0:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f64f 7238 	movw	r2, #65336	; 0xff38
 80074ea:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	22c8      	movs	r2, #200	; 0xc8
 80074f2:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f640 02fc 	movw	r2, #2300	; 0x8fc
 80074fc:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800750e:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f640 32ea 	movw	r2, #3050	; 0xbea
 8007518:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8007522:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f640 32ea 	movw	r2, #3050	; 0xbea
 800752c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8007536:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f641 0238 	movw	r2, #6200	; 0x1838
 8007540:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	22fa      	movs	r2, #250	; 0xfa
 8007558:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8007562:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f640 42b2 	movw	r2, #3250	; 0xcb2
 800756c:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f241 1294 	movw	r2, #4500	; 0x1194
 8007576:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f64f 7238 	movw	r2, #65336	; 0xff38
 8007580:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	22c8      	movs	r2, #200	; 0xc8
 8007588:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f640 720a 	movw	r2, #3850	; 0xf0a
 80075b2:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f241 12f8 	movw	r2, #4600	; 0x11f8
 80075bc:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f640 720a 	movw	r2, #3850	; 0xf0a
 80075c6:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007608:	859a      	strh	r2, [r3, #44]	; 0x2c
	VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8007610:	85da      	strh	r2, [r3, #46]	; 0x2e
	VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8007618:	861a      	strh	r2, [r3, #48]	; 0x30
	VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007620:	865a      	strh	r2, [r3, #50]	; 0x32
	VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007628:	639a      	str	r2, [r3, #56]	; 0x38
		VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8007630:	63da      	str	r2, [r3, #60]	; 0x3c
	VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f242 3228 	movw	r2, #9000	; 0x2328
 8007638:	641a      	str	r2, [r3, #64]	; 0x40
	VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f241 7270 	movw	r2, #6000	; 0x1770
 8007640:	645a      	str	r2, [r3, #68]	; 0x44
	VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f643 2298 	movw	r2, #15000	; 0x3a98
 8007648:	649a      	str	r2, [r3, #72]	; 0x48
	VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f242 3228 	movw	r2, #9000	; 0x2328
 8007650:	64da      	str	r2, [r3, #76]	; 0x4c
		VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f241 7270 	movw	r2, #6000	; 0x1770
 8007658:	651a      	str	r2, [r3, #80]	; 0x50
		VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007660:	655a      	str	r2, [r3, #84]	; 0x54
		VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007668:	659a      	str	r2, [r3, #88]	; 0x58
			VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007670:	65da      	str	r2, [r3, #92]	; 0x5c
			VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007678:	661a      	str	r2, [r3, #96]	; 0x60
			VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007680:	665a      	str	r2, [r3, #100]	; 0x64
			VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f24f 6218 	movw	r2, #63000	; 0xf618
 8007688:	66da      	str	r2, [r3, #108]	; 0x6c
			VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007690:	671a      	str	r2, [r3, #112]	; 0x70
		VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007698:	675a      	str	r2, [r3, #116]	; 0x74
			VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80076a0:	679a      	str	r2, [r3, #120]	; 0x78
		VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	669a      	str	r2, [r3, #104]	; 0x68
		VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80076ae:	67da      	str	r2, [r3, #124]	; 0x7c
		VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80076b6:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		VL53LX_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f643 2298 	movw	r2, #15000	; 0x3a98
 80076ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2206      	movs	r2, #6
 80076d6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80076da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <VL53LX_init_hist_gen3_dmax_config_struct>:


VL53LX_Error VL53LX_init_hist_gen3_dmax_config_struct(
	VL53LX_hist_gen3_dmax_config_t   *pdata)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b085      	sub	sp, #20
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80076f2:	2300      	movs	r3, #0
 80076f4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80076fc:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2238      	movs	r2, #56	; 0x38
 8007702:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2220      	movs	r2, #32
 8007708:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2270      	movs	r2, #112	; 0x70
 800770e:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2210      	movs	r2, #16
 8007714:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2264      	movs	r2, #100	; 0x64
 800771a:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007722:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	220f      	movs	r2, #15
 8007728:	819a      	strh	r2, [r3, #12]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2234      	movs	r2, #52	; 0x34
 800772e:	81da      	strh	r2, [r3, #14]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	22c8      	movs	r2, #200	; 0xc8
 8007734:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800773c:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007744:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8007746:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800774a:	4618      	mov	r0, r3
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <VL53LX_preset_mode_standard_ranging>:
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic,
	VL53LX_system_control_t   *psystem,
	VL53LX_tuning_parm_storage_t *ptuning_parms,
	VL53LX_zone_config_t      *pzone_cfg)
{
 8007756:	b480      	push	{r7}
 8007758:	b087      	sub	sp, #28
 800775a:	af00      	add	r7, sp, #0
 800775c:	60f8      	str	r0, [r7, #12]
 800775e:	60b9      	str	r1, [r7, #8]
 8007760:	607a      	str	r2, [r7, #4]
 8007762:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007764:	2300      	movs	r3, #0
 8007766:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800776e:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2200      	movs	r2, #0
 8007786:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2211      	movs	r2, #17
 80077b0:	731a      	strb	r2, [r3, #12]
			VL53LX_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53LX_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2202      	movs	r2, #2
 80077b6:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2202      	movs	r2, #2
 80077c2:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2208      	movs	r2, #8
 80077c8:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 80077d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 80077da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077dc:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 80077e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e6:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2201      	movs	r2, #1
 80077f2:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2200      	movs	r2, #0
 8007804:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	22ff      	movs	r2, #255	; 0xff
 800780a:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 800780c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780e:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8007814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007816:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2220      	movs	r2, #32
 800783e:	709a      	strb	r2, [r3, #2]
			VL53LX_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	220b      	movs	r2, #11
 8007844:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8007846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007848:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2202      	movs	r2, #2
 8007852:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	220d      	movs	r2, #13
 8007858:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800785a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785c:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	729a      	strb	r2, [r3, #10]
			VL53LX_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 8007880:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2238      	movs	r2, #56	; 0x38
 800788c:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	22ff      	movs	r2, #255	; 0xff
 8007892:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	2200      	movs	r2, #0
 800789e:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	221a      	movs	r2, #26
 80078a4:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	2200      	movs	r2, #0
 80078aa:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	2220      	movs	r2, #32
 80078b0:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	2201      	movs	r2, #1
 80078b6:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	22cc      	movs	r2, #204	; 0xcc
 80078bc:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	220b      	movs	r2, #11
 80078c2:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	2201      	movs	r2, #1
 80078c8:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	22f5      	movs	r2, #245	; 0xf5
 80078ce:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	2209      	movs	r2, #9
 80078d4:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 80078d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d8:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 80078de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e0:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2208      	movs	r2, #8
 80078ea:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	2278      	movs	r2, #120	; 0x78
 80078f0:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	2200      	movs	r2, #0
 80078f6:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	2200      	movs	r2, #0
 80078fc:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	2207      	movs	r2, #7
 8007902:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	2221      	movs	r2, #33	; 0x21
 8007908:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	2243      	movs	r2, #67	; 0x43
 800790e:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2210      	movs	r2, #16
 8007914:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	2232      	movs	r2, #50	; 0x32
 800791a:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	2254      	movs	r2, #84	; 0x54
 8007920:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	2207      	movs	r2, #7
 8007926:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	2221      	movs	r2, #33	; 0x21
 800792c:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	2243      	movs	r2, #67	; 0x43
 8007932:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	2210      	movs	r2, #16
 8007938:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	2202      	movs	r2, #2
 800793e:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	2243      	movs	r2, #67	; 0x43
 8007944:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	2205      	movs	r2, #5
 800794a:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	2200      	movs	r2, #0
 8007950:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	2207      	movs	r2, #7
 8007956:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	2221      	movs	r2, #33	; 0x21
 800795c:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	2243      	movs	r2, #67	; 0x43
 8007962:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	2210      	movs	r2, #16
 8007968:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	2232      	movs	r2, #50	; 0x32
 800796e:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	2254      	movs	r2, #84	; 0x54
 8007974:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800797c:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007984:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	2200      	movs	r2, #0
 800798a:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53LX_MAX_USER_ZONES;
 800798c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798e:	2205      	movs	r2, #5
 8007990:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 8007992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007994:	2200      	movs	r2, #0
 8007996:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 8007998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799a:	220f      	movs	r2, #15
 800799c:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 800799e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a0:	220f      	movs	r2, #15
 80079a2:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 80079a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a6:	2208      	movs	r2, #8
 80079a8:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 80079aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ac:	2208      	movs	r2, #8
 80079ae:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	2201      	movs	r2, #1
 80079b4:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 80079b6:	6a3b      	ldr	r3, [r7, #32]
 80079b8:	2200      	movs	r2, #0
 80079ba:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 80079bc:	6a3b      	ldr	r3, [r7, #32]
 80079be:	2200      	movs	r2, #0
 80079c0:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 80079c2:	6a3b      	ldr	r3, [r7, #32]
 80079c4:	2200      	movs	r2, #0
 80079c6:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 80079c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ca:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	pdynamic->system__seed_config =
 80079ce:	6a3b      	ldr	r3, [r7, #32]
 80079d0:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 80079d2:	6a3b      	ldr	r3, [r7, #32]
 80079d4:	220b      	movs	r2, #11
 80079d6:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	2209      	movs	r2, #9
 80079dc:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 80079de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e0:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 80079e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e8:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 80079ea:	6a3b      	ldr	r3, [r7, #32]
 80079ec:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 80079ee:	6a3b      	ldr	r3, [r7, #32]
 80079f0:	2201      	movs	r2, #1
 80079f2:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 80079f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
	pdynamic->sd_config__first_order_select =
 80079fa:	6a3b      	ldr	r3, [r7, #32]
 80079fc:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 80079fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a00:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
	pdynamic->sd_config__quantifier         =
 8007a04:	6a3b      	ldr	r3, [r7, #32]
 8007a06:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	22c7      	movs	r2, #199	; 0xc7
 8007a0c:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8007a0e:	6a3b      	ldr	r3, [r7, #32]
 8007a10:	22ff      	movs	r2, #255	; 0xff
 8007a12:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 8007a14:	6a3b      	ldr	r3, [r7, #32]
 8007a16:	22db      	movs	r2, #219	; 0xdb
 8007a18:	745a      	strb	r2, [r3, #17]
			VL53LX_SEQUENCE_DSS1_EN |
			VL53LX_SEQUENCE_DSS2_EN |
			VL53LX_SEQUENCE_MM2_EN |
			VL53LX_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	2202      	movs	r2, #2
 8007a1e:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	2200      	movs	r2, #0
 8007a24:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 8007a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a28:	2201      	movs	r2, #1
 8007a2a:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2e:	2201      	movs	r2, #1
 8007a30:	70da      	strb	r2, [r3, #3]
			VL53LX_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 8007a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a34:	2221      	movs	r2, #33	; 0x21
 8007a36:	711a      	strb	r2, [r3, #4]
			VL53LX_DEVICEREADOUTMODE_SINGLE_SD |
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8007a38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	371c      	adds	r7, #28
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <VL53LX_preset_mode_histogram_ranging>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b090      	sub	sp, #64	; 0x40
 8007a4c:	af0a      	add	r7, sp, #40	; 0x28
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
 8007a54:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007a56:	2300      	movs	r3, #0
 8007a58:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_standard_ranging(
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	9303      	str	r3, [sp, #12]
 8007a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a60:	9302      	str	r3, [sp, #8]
 8007a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a64:	9301      	str	r3, [sp, #4]
 8007a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	6a3b      	ldr	r3, [r7, #32]
 8007a6c:	683a      	ldr	r2, [r7, #0]
 8007a6e:	6879      	ldr	r1, [r7, #4]
 8007a70:	68b8      	ldr	r0, [r7, #8]
 8007a72:	f7ff fe70 	bl	8007756 <VL53LX_preset_mode_standard_ranging>
 8007a76:	4603      	mov	r3, r0
 8007a78:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8007a7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d171      	bne.n	8007b66 <VL53LX_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8007a88:	801a      	strh	r2, [r3, #0]



		VL53LX_init_histogram_config_structure(
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	9308      	str	r3, [sp, #32]
 8007a8e:	2305      	movs	r3, #5
 8007a90:	9307      	str	r3, [sp, #28]
 8007a92:	2304      	movs	r3, #4
 8007a94:	9306      	str	r3, [sp, #24]
 8007a96:	2303      	movs	r3, #3
 8007a98:	9305      	str	r3, [sp, #20]
 8007a9a:	2302      	movs	r3, #2
 8007a9c:	9304      	str	r3, [sp, #16]
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	9303      	str	r3, [sp, #12]
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	9302      	str	r3, [sp, #8]
 8007aa6:	2304      	movs	r3, #4
 8007aa8:	9301      	str	r3, [sp, #4]
 8007aaa:	2303      	movs	r3, #3
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	2302      	movs	r3, #2
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	2007      	movs	r0, #7
 8007ab6:	f000 ffab 	bl	8008a10 <VL53LX_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8007aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abc:	3302      	adds	r3, #2
 8007abe:	9308      	str	r3, [sp, #32]
 8007ac0:	2305      	movs	r3, #5
 8007ac2:	9307      	str	r3, [sp, #28]
 8007ac4:	2304      	movs	r3, #4
 8007ac6:	9306      	str	r3, [sp, #24]
 8007ac8:	2303      	movs	r3, #3
 8007aca:	9305      	str	r3, [sp, #20]
 8007acc:	2302      	movs	r3, #2
 8007ace:	9304      	str	r3, [sp, #16]
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	9303      	str	r3, [sp, #12]
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	9302      	str	r3, [sp, #8]
 8007ad8:	2304      	movs	r3, #4
 8007ada:	9301      	str	r3, [sp, #4]
 8007adc:	2303      	movs	r3, #3
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	2302      	movs	r3, #2
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	2007      	movs	r0, #7
 8007ae8:	f001 f822 	bl	8008b30 <VL53LX_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	2209      	movs	r2, #9
 8007af0:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 8007af2:	6a3b      	ldr	r3, [r7, #32]
 8007af4:	220b      	movs	r2, #11
 8007af6:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 8007af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afa:	2209      	movs	r2, #9
 8007afc:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8007afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b00:	220b      	movs	r2, #11
 8007b02:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8007b04:	6a3b      	ldr	r3, [r7, #32]
 8007b06:	2200      	movs	r2, #0
 8007b08:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 8007b0a:	6a3b      	ldr	r3, [r7, #32]
 8007b0c:	2220      	movs	r2, #32
 8007b0e:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8007b10:	6a3b      	ldr	r3, [r7, #32]
 8007b12:	2200      	movs	r2, #0
 8007b14:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 8007b16:	6a3b      	ldr	r3, [r7, #32]
 8007b18:	221a      	movs	r2, #26
 8007b1a:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8007b1c:	6a3b      	ldr	r3, [r7, #32]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 8007b22:	6a3b      	ldr	r3, [r7, #32]
 8007b24:	2228      	movs	r2, #40	; 0x28
 8007b26:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8007b28:	6a3b      	ldr	r3, [r7, #32]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 8007b2e:	6a3b      	ldr	r3, [r7, #32]
 8007b30:	2221      	movs	r2, #33	; 0x21
 8007b32:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	22f5      	movs	r2, #245	; 0xf5
 8007b38:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2208      	movs	r2, #8
 8007b3e:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2288      	movs	r2, #136	; 0x88
 8007b46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



		VL53LX_copy_hist_cfg_to_static_cfg(
 8007b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4c:	9300      	str	r3, [sp, #0]
 8007b4e:	6a3b      	ldr	r3, [r7, #32]
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	68b9      	ldr	r1, [r7, #8]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f9e6 	bl	8007f26 <VL53LX_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5c:	229b      	movs	r2, #155	; 0x9b
 8007b5e:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8007b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b62:	2226      	movs	r2, #38	; 0x26
 8007b64:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8007b66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3718      	adds	r7, #24
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <VL53LX_preset_mode_histogram_long_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b090      	sub	sp, #64	; 0x40
 8007b76:	af0a      	add	r7, sp, #40	; 0x28
 8007b78:	60f8      	str	r0, [r7, #12]
 8007b7a:	60b9      	str	r1, [r7, #8]
 8007b7c:	607a      	str	r2, [r7, #4]
 8007b7e:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007b80:	2300      	movs	r3, #0
 8007b82:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8007b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b86:	9304      	str	r3, [sp, #16]
 8007b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8a:	9303      	str	r3, [sp, #12]
 8007b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8e:	9302      	str	r3, [sp, #8]
 8007b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b92:	9301      	str	r3, [sp, #4]
 8007b94:	6a3b      	ldr	r3, [r7, #32]
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	68b9      	ldr	r1, [r7, #8]
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f7ff ff52 	bl	8007a48 <VL53LX_preset_mode_histogram_ranging>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8007ba8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d178      	bne.n	8007ca2 <VL53LX_preset_mode_histogram_long_range+0x130>





		VL53LX_init_histogram_config_structure(
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	9308      	str	r3, [sp, #32]
 8007bb4:	2305      	movs	r3, #5
 8007bb6:	9307      	str	r3, [sp, #28]
 8007bb8:	2304      	movs	r3, #4
 8007bba:	9306      	str	r3, [sp, #24]
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	9305      	str	r3, [sp, #20]
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	9304      	str	r3, [sp, #16]
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	9303      	str	r3, [sp, #12]
 8007bc8:	2300      	movs	r3, #0
 8007bca:	9302      	str	r3, [sp, #8]
 8007bcc:	2304      	movs	r3, #4
 8007bce:	9301      	str	r3, [sp, #4]
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	9300      	str	r3, [sp, #0]
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	2100      	movs	r1, #0
 8007bda:	2007      	movs	r0, #7
 8007bdc:	f000 ff18 	bl	8008a10 <VL53LX_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8007be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be2:	3302      	adds	r3, #2
 8007be4:	9308      	str	r3, [sp, #32]
 8007be6:	2305      	movs	r3, #5
 8007be8:	9307      	str	r3, [sp, #28]
 8007bea:	2304      	movs	r3, #4
 8007bec:	9306      	str	r3, [sp, #24]
 8007bee:	2303      	movs	r3, #3
 8007bf0:	9305      	str	r3, [sp, #20]
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	9304      	str	r3, [sp, #16]
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	9303      	str	r3, [sp, #12]
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	9302      	str	r3, [sp, #8]
 8007bfe:	2304      	movs	r3, #4
 8007c00:	9301      	str	r3, [sp, #4]
 8007c02:	2303      	movs	r3, #3
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	2302      	movs	r3, #2
 8007c08:	2201      	movs	r2, #1
 8007c0a:	2100      	movs	r1, #0
 8007c0c:	2007      	movs	r0, #7
 8007c0e:	f000 ff8f 	bl	8008b30 <VL53LX_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 8007c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	6a3b      	ldr	r3, [r7, #32]
 8007c18:	683a      	ldr	r2, [r7, #0]
 8007c1a:	68b9      	ldr	r1, [r7, #8]
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f982 	bl	8007f26 <VL53LX_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 8007c22:	6a3b      	ldr	r3, [r7, #32]
 8007c24:	2209      	movs	r2, #9
 8007c26:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 8007c28:	6a3b      	ldr	r3, [r7, #32]
 8007c2a:	220b      	movs	r2, #11
 8007c2c:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8007c2e:	6a3b      	ldr	r3, [r7, #32]
 8007c30:	2200      	movs	r2, #0
 8007c32:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	2221      	movs	r2, #33	; 0x21
 8007c38:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8007c3a:	6a3b      	ldr	r3, [r7, #32]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 8007c40:	6a3b      	ldr	r3, [r7, #32]
 8007c42:	221b      	movs	r2, #27
 8007c44:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8007c46:	6a3b      	ldr	r3, [r7, #32]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 8007c4c:	6a3b      	ldr	r3, [r7, #32]
 8007c4e:	2229      	movs	r2, #41	; 0x29
 8007c50:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8007c52:	6a3b      	ldr	r3, [r7, #32]
 8007c54:	2200      	movs	r2, #0
 8007c56:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 8007c58:	6a3b      	ldr	r3, [r7, #32]
 8007c5a:	2222      	movs	r2, #34	; 0x22
 8007c5c:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	2209      	movs	r2, #9
 8007c62:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	22f5      	movs	r2, #245	; 0xf5
 8007c68:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6c:	2209      	movs	r2, #9
 8007c6e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c72:	220b      	movs	r2, #11
 8007c74:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 8007c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c78:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7c:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 8007c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c80:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 8007c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c84:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2208      	movs	r2, #8
 8007c8a:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2288      	movs	r2, #136	; 0x88
 8007c92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8007c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c98:	229b      	movs	r2, #155	; 0x9b
 8007c9a:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8007c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9e:	2226      	movs	r2, #38	; 0x26
 8007ca0:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8007ca2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3718      	adds	r7, #24
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <VL53LX_preset_mode_histogram_medium_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b090      	sub	sp, #64	; 0x40
 8007cb2:	af0a      	add	r7, sp, #40	; 0x28
 8007cb4:	60f8      	str	r0, [r7, #12]
 8007cb6:	60b9      	str	r1, [r7, #8]
 8007cb8:	607a      	str	r2, [r7, #4]
 8007cba:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8007cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc2:	9304      	str	r3, [sp, #16]
 8007cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc6:	9303      	str	r3, [sp, #12]
 8007cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cca:	9302      	str	r3, [sp, #8]
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cce:	9301      	str	r3, [sp, #4]
 8007cd0:	6a3b      	ldr	r3, [r7, #32]
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	68b9      	ldr	r1, [r7, #8]
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f7ff feb4 	bl	8007a48 <VL53LX_preset_mode_histogram_ranging>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8007ce4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d178      	bne.n	8007dde <VL53LX_preset_mode_histogram_medium_range+0x130>





		VL53LX_init_histogram_config_structure(
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	9308      	str	r3, [sp, #32]
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	9307      	str	r3, [sp, #28]
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	9306      	str	r3, [sp, #24]
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	9305      	str	r3, [sp, #20]
 8007cfc:	2302      	movs	r3, #2
 8007cfe:	9304      	str	r3, [sp, #16]
 8007d00:	2301      	movs	r3, #1
 8007d02:	9303      	str	r3, [sp, #12]
 8007d04:	2300      	movs	r3, #0
 8007d06:	9302      	str	r3, [sp, #8]
 8007d08:	2302      	movs	r3, #2
 8007d0a:	9301      	str	r3, [sp, #4]
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	2301      	movs	r3, #1
 8007d12:	2201      	movs	r2, #1
 8007d14:	2100      	movs	r1, #0
 8007d16:	2007      	movs	r0, #7
 8007d18:	f000 fe7a 	bl	8008a10 <VL53LX_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8007d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1e:	3302      	adds	r3, #2
 8007d20:	9308      	str	r3, [sp, #32]
 8007d22:	2303      	movs	r3, #3
 8007d24:	9307      	str	r3, [sp, #28]
 8007d26:	2302      	movs	r3, #2
 8007d28:	9306      	str	r3, [sp, #24]
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	9305      	str	r3, [sp, #20]
 8007d2e:	2302      	movs	r3, #2
 8007d30:	9304      	str	r3, [sp, #16]
 8007d32:	2301      	movs	r3, #1
 8007d34:	9303      	str	r3, [sp, #12]
 8007d36:	2300      	movs	r3, #0
 8007d38:	9302      	str	r3, [sp, #8]
 8007d3a:	2302      	movs	r3, #2
 8007d3c:	9301      	str	r3, [sp, #4]
 8007d3e:	2302      	movs	r3, #2
 8007d40:	9300      	str	r3, [sp, #0]
 8007d42:	2301      	movs	r3, #1
 8007d44:	2201      	movs	r2, #1
 8007d46:	2100      	movs	r1, #0
 8007d48:	2007      	movs	r0, #7
 8007d4a:	f000 fef1 	bl	8008b30 <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	6a3b      	ldr	r3, [r7, #32]
 8007d54:	683a      	ldr	r2, [r7, #0]
 8007d56:	68b9      	ldr	r1, [r7, #8]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f8e4 	bl	8007f26 <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 8007d5e:	6a3b      	ldr	r3, [r7, #32]
 8007d60:	2205      	movs	r2, #5
 8007d62:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 8007d64:	6a3b      	ldr	r3, [r7, #32]
 8007d66:	2207      	movs	r2, #7
 8007d68:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8007d6a:	6a3b      	ldr	r3, [r7, #32]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 8007d70:	6a3b      	ldr	r3, [r7, #32]
 8007d72:	2236      	movs	r2, #54	; 0x36
 8007d74:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8007d76:	6a3b      	ldr	r3, [r7, #32]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 8007d7c:	6a3b      	ldr	r3, [r7, #32]
 8007d7e:	2228      	movs	r2, #40	; 0x28
 8007d80:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8007d82:	6a3b      	ldr	r3, [r7, #32]
 8007d84:	2200      	movs	r2, #0
 8007d86:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 8007d88:	6a3b      	ldr	r3, [r7, #32]
 8007d8a:	2244      	movs	r2, #68	; 0x44
 8007d8c:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8007d8e:	6a3b      	ldr	r3, [r7, #32]
 8007d90:	2200      	movs	r2, #0
 8007d92:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 8007d94:	6a3b      	ldr	r3, [r7, #32]
 8007d96:	2233      	movs	r2, #51	; 0x33
 8007d98:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	2205      	movs	r2, #5
 8007d9e:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	22f5      	movs	r2, #245	; 0xf5
 8007da4:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 8007da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da8:	2205      	movs	r2, #5
 8007daa:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 8007dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dae:	2207      	movs	r2, #7
 8007db0:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 8007db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db4:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 8007db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db8:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 8007dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dbc:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc0:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2208      	movs	r2, #8
 8007dc6:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2248      	movs	r2, #72	; 0x48
 8007dce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd4:	229b      	movs	r2, #155	; 0x9b
 8007dd6:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8007dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dda:	2226      	movs	r2, #38	; 0x26
 8007ddc:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8007dde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3718      	adds	r7, #24
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <VL53LX_preset_mode_histogram_short_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b090      	sub	sp, #64	; 0x40
 8007dee:	af0a      	add	r7, sp, #40	; 0x28
 8007df0:	60f8      	str	r0, [r7, #12]
 8007df2:	60b9      	str	r1, [r7, #8]
 8007df4:	607a      	str	r2, [r7, #4]
 8007df6:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfe:	9304      	str	r3, [sp, #16]
 8007e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e02:	9303      	str	r3, [sp, #12]
 8007e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e06:	9302      	str	r3, [sp, #8]
 8007e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0a:	9301      	str	r3, [sp, #4]
 8007e0c:	6a3b      	ldr	r3, [r7, #32]
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	68b9      	ldr	r1, [r7, #8]
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f7ff fe16 	bl	8007a48 <VL53LX_preset_mode_histogram_ranging>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8007e20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d178      	bne.n	8007f1a <VL53LX_preset_mode_histogram_short_range+0x130>





		VL53LX_init_histogram_config_structure(
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	9308      	str	r3, [sp, #32]
 8007e2c:	2302      	movs	r3, #2
 8007e2e:	9307      	str	r3, [sp, #28]
 8007e30:	2302      	movs	r3, #2
 8007e32:	9306      	str	r3, [sp, #24]
 8007e34:	2301      	movs	r3, #1
 8007e36:	9305      	str	r3, [sp, #20]
 8007e38:	2301      	movs	r3, #1
 8007e3a:	9304      	str	r3, [sp, #16]
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	9303      	str	r3, [sp, #12]
 8007e40:	2300      	movs	r3, #0
 8007e42:	9302      	str	r3, [sp, #8]
 8007e44:	2301      	movs	r3, #1
 8007e46:	9301      	str	r3, [sp, #4]
 8007e48:	2301      	movs	r3, #1
 8007e4a:	9300      	str	r3, [sp, #0]
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	2200      	movs	r2, #0
 8007e50:	2107      	movs	r1, #7
 8007e52:	2007      	movs	r0, #7
 8007e54:	f000 fddc 	bl	8008a10 <VL53LX_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8007e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5a:	3302      	adds	r3, #2
 8007e5c:	9308      	str	r3, [sp, #32]
 8007e5e:	2302      	movs	r3, #2
 8007e60:	9307      	str	r3, [sp, #28]
 8007e62:	2302      	movs	r3, #2
 8007e64:	9306      	str	r3, [sp, #24]
 8007e66:	2301      	movs	r3, #1
 8007e68:	9305      	str	r3, [sp, #20]
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	9304      	str	r3, [sp, #16]
 8007e6e:	2301      	movs	r3, #1
 8007e70:	9303      	str	r3, [sp, #12]
 8007e72:	2300      	movs	r3, #0
 8007e74:	9302      	str	r3, [sp, #8]
 8007e76:	2301      	movs	r3, #1
 8007e78:	9301      	str	r3, [sp, #4]
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	9300      	str	r3, [sp, #0]
 8007e7e:	2301      	movs	r3, #1
 8007e80:	2200      	movs	r2, #0
 8007e82:	2107      	movs	r1, #7
 8007e84:	2007      	movs	r0, #7
 8007e86:	f000 fe53 	bl	8008b30 <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8c:	9300      	str	r3, [sp, #0]
 8007e8e:	6a3b      	ldr	r3, [r7, #32]
 8007e90:	683a      	ldr	r2, [r7, #0]
 8007e92:	68b9      	ldr	r1, [r7, #8]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f846 	bl	8007f26 <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 8007e9a:	6a3b      	ldr	r3, [r7, #32]
 8007e9c:	2203      	movs	r2, #3
 8007e9e:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8007ea0:	6a3b      	ldr	r3, [r7, #32]
 8007ea2:	2205      	movs	r2, #5
 8007ea4:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8007ea6:	6a3b      	ldr	r3, [r7, #32]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 8007eac:	6a3b      	ldr	r3, [r7, #32]
 8007eae:	2252      	movs	r2, #82	; 0x52
 8007eb0:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8007eb2:	6a3b      	ldr	r3, [r7, #32]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 8007eb8:	6a3b      	ldr	r3, [r7, #32]
 8007eba:	2237      	movs	r2, #55	; 0x37
 8007ebc:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8007ebe:	6a3b      	ldr	r3, [r7, #32]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 8007ec4:	6a3b      	ldr	r3, [r7, #32]
 8007ec6:	2266      	movs	r2, #102	; 0x66
 8007ec8:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8007eca:	6a3b      	ldr	r3, [r7, #32]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 8007ed0:	6a3b      	ldr	r3, [r7, #32]
 8007ed2:	2244      	movs	r2, #68	; 0x44
 8007ed4:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	2203      	movs	r2, #3
 8007eda:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	22f5      	movs	r2, #245	; 0xf5
 8007ee0:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee4:	2203      	movs	r2, #3
 8007ee6:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eea:	2205      	movs	r2, #5
 8007eec:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 8007eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef0:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef4:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 8007ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef8:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 8007efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efc:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2208      	movs	r2, #8
 8007f02:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2228      	movs	r2, #40	; 0x28
 8007f0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	22bb      	movs	r2, #187	; 0xbb
 8007f12:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8007f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f16:	2226      	movs	r2, #38	; 0x26
 8007f18:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8007f1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3718      	adds	r7, #24
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <VL53LX_copy_hist_cfg_to_static_cfg>:
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_general_config_t   *pgeneral,
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b085      	sub	sp, #20
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	60f8      	str	r0, [r7, #12]
 8007f2e:	60b9      	str	r1, [r7, #8]
 8007f30:	607a      	str	r2, [r7, #4]
 8007f32:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	79db      	ldrb	r3, [r3, #7]
 8007f68:	b29b      	uxth	r3, r3
				<< 8)
 8007f6a:	021b      	lsls	r3, r3, #8
 8007f6c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	7a1b      	ldrb	r3, [r3, #8]
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	4413      	add	r3, r2
 8007f76:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	785b      	ldrb	r3, [r3, #1]
 8007fb0:	b29b      	uxth	r3, r3
				<< 8)
 8007fb2:	021b      	lsls	r3, r3, #8
 8007fb4:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	789b      	ldrb	r3, [r3, #2]
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	4413      	add	r3, r2
 8007fbe:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	78db      	ldrb	r3, [r3, #3]
 8007fc8:	b29b      	uxth	r3, r3
				<< 8)
 8007fca:	021b      	lsls	r3, r3, #8
 8007fcc:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	791b      	ldrb	r3, [r3, #4]
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	4413      	add	r3, r2
 8007fd6:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 8008004:	bf00      	nop
 8008006:	3714      	adds	r7, #20
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <VL53LX_copy_hist_bins_to_static_cfg>:

void VL53LX_copy_hist_bins_to_static_cfg(
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_timing_config_t    *ptiming)
{
 8008010:	b480      	push	{r7}
 8008012:	b085      	sub	sp, #20
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	79db      	ldrb	r3, [r3, #7]
 8008050:	b29b      	uxth	r3, r3
				<< 8)
 8008052:	021b      	lsls	r3, r3, #8
 8008054:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	7a1b      	ldrb	r3, [r3, #8]
 800805a:	b29b      	uxth	r3, r3
 800805c:	4413      	add	r3, r2
 800805e:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	785b      	ldrb	r3, [r3, #1]
 8008090:	b29b      	uxth	r3, r3
				<< 8)
 8008092:	021b      	lsls	r3, r3, #8
 8008094:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	789b      	ldrb	r3, [r3, #2]
 800809a:	b29b      	uxth	r3, r3
 800809c:	4413      	add	r3, r2
 800809e:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	78db      	ldrb	r3, [r3, #3]
 80080a8:	b29b      	uxth	r3, r3
				<< 8)
 80080aa:	021b      	lsls	r3, r3, #8
 80080ac:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	791b      	ldrb	r3, [r3, #4]
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	4413      	add	r3, r2
 80080b6:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 80080cc:	bf00      	nop
 80080ce:	3714      	adds	r7, #20
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <VL53LX_init_version>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53LX_init_version(
	VL53LX_DEV        Dev)
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	3318      	adds	r3, #24
 80080e4:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53LX_LL_API_IMPLEMENTATION_VER_MAJOR;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53LX_LL_API_IMPLEMENTATION_VER_MINOR;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53LX_LL_API_IMPLEMENTATION_VER_SUB;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2201      	movs	r2, #1
 80080fa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53LX_LL_API_IMPLEMENTATION_VER_REVISION;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2200      	movs	r2, #0
 8008102:	625a      	str	r2, [r3, #36]	; 0x24
}
 8008104:	bf00      	nop
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <VL53LX_init_ll_driver_state>:


void  VL53LX_init_ll_driver_state(
	VL53LX_DEV         Dev,
	VL53LX_DeviceState device_state)
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	460b      	mov	r3, r1
 800811a:	70fb      	strb	r3, [r7, #3]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	3318      	adds	r3, #24
 8008120:	60fb      	str	r3, [r7, #12]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	332c      	adds	r3, #44	; 0x2c
 8008126:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	78fa      	ldrb	r2, [r7, #3]
 800812c:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	2200      	movs	r2, #0
 8008132:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	2202      	movs	r2, #2
 8008138:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	2200      	movs	r2, #0
 800813e:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	2200      	movs	r2, #0
 8008144:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	78fa      	ldrb	r2, [r7, #3]
 800814a:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	2200      	movs	r2, #0
 8008150:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	2202      	movs	r2, #2
 8008156:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	2200      	movs	r2, #0
 800815c:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	2200      	movs	r2, #0
 8008162:	735a      	strb	r2, [r3, #13]

}
 8008164:	bf00      	nop
 8008166:	3714      	adds	r7, #20
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <VL53LX_update_ll_driver_rd_state>:


VL53LX_Error  VL53LX_update_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]


	VL53LX_Error        status  = VL53LX_ERROR_NONE;
 8008178:	2300      	movs	r3, #0
 800817a:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	3318      	adds	r3, #24
 8008180:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	332c      	adds	r3, #44	; 0x2c
 8008186:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 800818e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d115      	bne.n	80081c2 <VL53LX_update_ll_driver_rd_state+0x52>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2203      	movs	r2, #3
 800819a:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2200      	movs	r2, #0
 80081a0:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2200      	movs	r2, #0
 80081ac:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2202      	movs	r2, #2
 80081b2:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2200      	movs	r2, #0
 80081be:	735a      	strb	r2, [r3, #13]
 80081c0:	e0be      	b.n	8008340 <VL53LX_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	7a1b      	ldrb	r3, [r3, #8]
 80081c6:	2bff      	cmp	r3, #255	; 0xff
 80081c8:	d103      	bne.n	80081d2 <VL53LX_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2280      	movs	r2, #128	; 0x80
 80081ce:	721a      	strb	r2, [r3, #8]
 80081d0:	e005      	b.n	80081de <VL53LX_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	7a1b      	ldrb	r3, [r3, #8]
 80081d6:	3301      	adds	r3, #1
 80081d8:	b2da      	uxtb	r2, r3
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	721a      	strb	r2, [r3, #8]


		status = VL53LX_update_internal_stream_counters(Dev,
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	7a19      	ldrb	r1, [r3, #8]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f103 0209 	add.w	r2, r3, #9
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	330a      	adds	r3, #10
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f002 fcf6 	bl	800abde <VL53LX_update_internal_stream_counters>
 80081f2:	4603      	mov	r3, r0
 80081f4:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	7adb      	ldrb	r3, [r3, #11]
 80081fa:	f083 0302 	eor.w	r3, r3, #2
 80081fe:	b2da      	uxtb	r2, r3
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	79db      	ldrb	r3, [r3, #7]
 8008208:	3b03      	subs	r3, #3
 800820a:	2b05      	cmp	r3, #5
 800820c:	f200 8082 	bhi.w	8008314 <VL53LX_update_ll_driver_rd_state+0x1a4>
 8008210:	a201      	add	r2, pc, #4	; (adr r2, 8008218 <VL53LX_update_ll_driver_rd_state+0xa8>)
 8008212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008216:	bf00      	nop
 8008218:	08008231 	.word	0x08008231
 800821c:	08008315 	.word	0x08008315
 8008220:	08008315 	.word	0x08008315
 8008224:	08008283 	.word	0x08008283
 8008228:	080082b9 	.word	0x080082b9
 800822c:	080082e3 	.word	0x080082e3

		case VL53LX_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	f893 335e 	ldrb.w	r3, [r3, #862]	; 0x35e
 8008236:	f003 0302 	and.w	r3, r3, #2
 800823a:	2b00      	cmp	r3, #0
 800823c:	dd03      	ble.n	8008246 <VL53LX_update_ll_driver_rd_state+0xd6>
				VL53LX_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2206      	movs	r2, #6
 8008242:	71da      	strb	r2, [r3, #7]
 8008244:	e00d      	b.n	8008262 <VL53LX_update_ll_driver_rd_state+0xf2>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
				if (pstate->rd_zone_id >=
 8008250:	429a      	cmp	r2, r3
 8008252:	d303      	bcc.n	800825c <VL53LX_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2208      	movs	r2, #8
 8008258:	71da      	strb	r2, [r3, #7]
 800825a:	e002      	b.n	8008262 <VL53LX_update_ll_driver_rd_state+0xf2>
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2207      	movs	r2, #7
 8008260:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2200      	movs	r2, #0
 8008278:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	735a      	strb	r2, [r3, #13]

			break;
 8008280:	e05e      	b.n	8008340 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2200      	movs	r2, #0
 800828c:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d303      	bcc.n	80082b0 <VL53LX_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2208      	movs	r2, #8
 80082ac:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 80082ae:	e047      	b.n	8008340 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2207      	movs	r2, #7
 80082b4:	71da      	strb	r2, [r3, #7]
			break;
 80082b6:	e043      	b.n	8008340 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	7b5b      	ldrb	r3, [r3, #13]
 80082bc:	3301      	adds	r3, #1
 80082be:	b2da      	uxtb	r2, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d303      	bcc.n	80082da <VL53LX_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2208      	movs	r2, #8
 80082d6:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 80082d8:	e032      	b.n	8008340 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2207      	movs	r2, #7
 80082de:	71da      	strb	r2, [r3, #7]
			break;
 80082e0:	e02e      	b.n	8008340 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2200      	movs	r2, #0
 80082e6:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	7b1b      	ldrb	r3, [r3, #12]
 80082ec:	f083 0301 	eor.w	r3, r3, #1
 80082f0:	b2da      	uxtb	r2, r3
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 8008300:	429a      	cmp	r2, r3
 8008302:	d303      	bcc.n	800830c <VL53LX_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2208      	movs	r2, #8
 8008308:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 800830a:	e019      	b.n	8008340 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2207      	movs	r2, #7
 8008310:	71da      	strb	r2, [r3, #7]
			break;
 8008312:	e015      	b.n	8008340 <VL53LX_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2203      	movs	r2, #3
 8008318:	71da      	strb	r2, [r3, #7]
				VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2200      	movs	r2, #0
 800831e:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2200      	movs	r2, #0
 8008324:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2202      	movs	r2, #2
 8008330:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2200      	movs	r2, #0
 8008336:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2200      	movs	r2, #0
 800833c:	735a      	strb	r2, [r3, #13]
			break;
 800833e:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 8008340:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3718      	adds	r7, #24
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <VL53LX_check_ll_driver_rd_state>:


VL53LX_Error VL53LX_check_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 800834c:	b480      	push	{r7}
 800834e:	b08d      	sub	sp, #52	; 0x34
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 8008354:	2300      	movs	r3, #0
 8008356:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53LX_LLDriverData_t  *pdev =
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	3318      	adds	r3, #24
 800835e:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008366:	627b      	str	r3, [r7, #36]	; 0x24
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 8008368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836a:	332c      	adds	r3, #44	; 0x2c
 800836c:	623b      	str	r3, [r7, #32]
	VL53LX_system_results_t   *psys_results = &(pdev->sys_results);
 800836e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008370:	f203 3366 	addw	r3, r3, #870	; 0x366
 8008374:	61fb      	str	r3, [r7, #28]
	VL53LX_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 8008376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008378:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800837c:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800837e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008380:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8008384:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 8008386:	2300      	movs	r3, #0
 8008388:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 800838a:	2300      	movs	r3, #0
 800838c:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 800838e:	2300      	movs	r3, #0
 8008390:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t   histogram_mode        = 0;
 8008394:	2300      	movs	r3, #0
 8008396:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 8008398:	2300      	movs	r3, #0
 800839a:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 800839c:	2300      	movs	r3, #0
 800839e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 80083a4:	f003 031f 	and.w	r3, r3, #31
 80083a8:	74fb      	strb	r3, [r7, #19]
			VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	78db      	ldrb	r3, [r3, #3]
 80083ae:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 80083b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b2:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 80083b6:	f003 0302 	and.w	r3, r3, #2
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) ==
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	bf14      	ite	ne
 80083be:	2301      	movne	r3, #1
 80083c0:	2300      	moveq	r3, #0
 80083c2:	b2db      	uxtb	r3, r3
	histogram_mode =
 80083c4:	747b      	strb	r3, [r7, #17]
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	781b      	ldrb	r3, [r3, #0]
		VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 80083ca:	111b      	asrs	r3, r3, #4
 80083cc:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 80083ce:	f003 0302 	and.w	r3, r3, #2
 80083d2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (histogram_mode)
 80083d6:	7c7b      	ldrb	r3, [r7, #17]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d008      	beq.n	80083ee <VL53LX_check_ll_driver_rd_state+0xa2>
		device_gph_id = (phist_data->result__interrupt_status &
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
			VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 80083e2:	111b      	asrs	r3, r3, #4
 80083e4:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 80083e6:	f003 0302 	and.w	r3, r3, #2
 80083ea:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 80083ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f0:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 80083f4:	f003 0320 	and.w	r3, r3, #32
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d04e      	beq.n	800849a <VL53LX_check_ll_driver_rd_state+0x14e>
		VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 80083fc:	6a3b      	ldr	r3, [r7, #32]
 80083fe:	79db      	ldrb	r3, [r3, #7]
 8008400:	2b06      	cmp	r3, #6
 8008402:	d109      	bne.n	8008418 <VL53LX_check_ll_driver_rd_state+0xcc>
		VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 8008404:	7c7b      	ldrb	r3, [r7, #17]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d14a      	bne.n	80084a0 <VL53LX_check_ll_driver_rd_state+0x154>
			if (device_range_status !=
 800840a:	7cfb      	ldrb	r3, [r7, #19]
 800840c:	2b12      	cmp	r3, #18
 800840e:	d047      	beq.n	80084a0 <VL53LX_check_ll_driver_rd_state+0x154>
			VL53LX_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 8008410:	23ef      	movs	r3, #239	; 0xef
 8008412:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008416:	e043      	b.n	80084a0 <VL53LX_check_ll_driver_rd_state+0x154>
				VL53LX_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 8008418:	6a3b      	ldr	r3, [r7, #32]
 800841a:	7a1b      	ldrb	r3, [r3, #8]
 800841c:	7cba      	ldrb	r2, [r7, #18]
 800841e:	429a      	cmp	r2, r3
 8008420:	d002      	beq.n	8008428 <VL53LX_check_ll_driver_rd_state+0xdc>
			status = VL53LX_ERROR_STREAM_COUNT_CHECK_FAIL;
 8008422:	23ee      	movs	r3, #238	; 0xee
 8008424:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 8008428:	6a3b      	ldr	r3, [r7, #32]
 800842a:	7adb      	ldrb	r3, [r3, #11]
 800842c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8008430:	429a      	cmp	r2, r3
 8008432:	d002      	beq.n	800843a <VL53LX_check_ll_driver_rd_state+0xee>
			status = VL53LX_ERROR_GPH_ID_CHECK_FAIL;
 8008434:	23ed      	movs	r3, #237	; 0xed
 8008436:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f




		expected_stream_count =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_stream_count;
 800843a:	6a3b      	ldr	r3, [r7, #32]
 800843c:	7b5b      	ldrb	r3, [r3, #13]
 800843e:	4619      	mov	r1, r3
		expected_stream_count =
 8008440:	697a      	ldr	r2, [r7, #20]
 8008442:	460b      	mov	r3, r1
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	440b      	add	r3, r1
 8008448:	005b      	lsls	r3, r3, #1
 800844a:	4413      	add	r3, r2
 800844c:	3302      	adds	r3, #2
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id;
 8008452:	6a3b      	ldr	r3, [r7, #32]
 8008454:	7b5b      	ldrb	r3, [r3, #13]
 8008456:	4619      	mov	r1, r3
		expected_gph_id =
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	460b      	mov	r3, r1
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	440b      	add	r3, r1
 8008460:	005b      	lsls	r3, r3, #1
 8008462:	4413      	add	r3, r2
 8008464:	3303      	adds	r3, #3
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 800846a:	7c3a      	ldrb	r2, [r7, #16]
 800846c:	7cbb      	ldrb	r3, [r7, #18]
 800846e:	429a      	cmp	r2, r3
 8008470:	d00a      	beq.n	8008488 <VL53LX_check_ll_driver_rd_state+0x13c>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 8008472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008474:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8008478:	2b00      	cmp	r3, #0
 800847a:	d102      	bne.n	8008482 <VL53LX_check_ll_driver_rd_state+0x136>
 800847c:	7cbb      	ldrb	r3, [r7, #18]
 800847e:	2bff      	cmp	r3, #255	; 0xff
 8008480:	d002      	beq.n	8008488 <VL53LX_check_ll_driver_rd_state+0x13c>
				(device_stream_count == 255)))
				status =
 8008482:	23ec      	movs	r3, #236	; 0xec
 8008484:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}



		if (expected_gph_id != device_gph_id)
 8008488:	7bfa      	ldrb	r2, [r7, #15]
 800848a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800848e:	429a      	cmp	r2, r3
 8008490:	d005      	beq.n	800849e <VL53LX_check_ll_driver_rd_state+0x152>
			status = VL53LX_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 8008492:	23eb      	movs	r3, #235	; 0xeb
 8008494:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008498:	e002      	b.n	80084a0 <VL53LX_check_ll_driver_rd_state+0x154>
		goto ENDFUNC;
 800849a:	bf00      	nop
 800849c:	e000      	b.n	80084a0 <VL53LX_check_ll_driver_rd_state+0x154>

	}



ENDFUNC:
 800849e:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 80084a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3734      	adds	r7, #52	; 0x34
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <VL53LX_update_ll_driver_cfg_state>:


VL53LX_Error  VL53LX_update_ll_driver_cfg_state(
	VL53LX_DEV         Dev)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b088      	sub	sp, #32
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 80084b8:	2300      	movs	r3, #0
 80084ba:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t  *pdev =
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	3318      	adds	r3, #24
 80084c0:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80084c8:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	332c      	adds	r3, #44	; 0x2c
 80084ce:	613b      	str	r3, [r7, #16]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80084d6:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 80084de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d11b      	bne.n	800851e <VL53LX_update_ll_driver_cfg_state+0x6e>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	2203      	movs	r2, #3
 80084ea:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	2200      	movs	r2, #0
 80084f0:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	2200      	movs	r2, #0
 80084f6:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	2200      	movs	r2, #0
 80084fc:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	2202      	movs	r2, #2
 8008502:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	2200      	movs	r2, #0
 8008508:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	2200      	movs	r2, #0
 800850e:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 8008510:	2300      	movs	r3, #0
 8008512:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 8008514:	2300      	movs	r3, #0
 8008516:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 8008518:	2300      	movs	r3, #0
 800851a:	773b      	strb	r3, [r7, #28]
 800851c:	e0b1      	b.n	8008682 <VL53LX_update_ll_driver_cfg_state+0x1d2>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	791b      	ldrb	r3, [r3, #4]
 8008522:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	799b      	ldrb	r3, [r3, #6]
 8008528:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	785b      	ldrb	r3, [r3, #1]
 800852e:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	785b      	ldrb	r3, [r3, #1]
 8008534:	2bff      	cmp	r3, #255	; 0xff
 8008536:	d103      	bne.n	8008540 <VL53LX_update_ll_driver_cfg_state+0x90>
			pstate->cfg_stream_count = 0x80;
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	2280      	movs	r2, #128	; 0x80
 800853c:	705a      	strb	r2, [r3, #1]
 800853e:	e005      	b.n	800854c <VL53LX_update_ll_driver_cfg_state+0x9c>
		else
			pstate->cfg_stream_count++;
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	785b      	ldrb	r3, [r3, #1]
 8008544:	3301      	adds	r3, #1
 8008546:	b2da      	uxtb	r2, r3
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	705a      	strb	r2, [r3, #1]


		status = VL53LX_update_internal_stream_counters(
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	7859      	ldrb	r1, [r3, #1]
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	1c9a      	adds	r2, r3, #2
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	3303      	adds	r3, #3
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f002 fb40 	bl	800abde <VL53LX_update_internal_stream_counters>
 800855e:	4603      	mov	r3, r0
 8008560:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	791b      	ldrb	r3, [r3, #4]
 8008566:	f083 0302 	eor.w	r3, r3, #2
 800856a:	b2da      	uxtb	r2, r3
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	2b05      	cmp	r3, #5
 8008576:	d053      	beq.n	8008620 <VL53LX_update_ll_driver_cfg_state+0x170>
 8008578:	2b05      	cmp	r3, #5
 800857a:	dc69      	bgt.n	8008650 <VL53LX_update_ll_driver_cfg_state+0x1a0>
 800857c:	2b03      	cmp	r3, #3
 800857e:	d002      	beq.n	8008586 <VL53LX_update_ll_driver_cfg_state+0xd6>
 8008580:	2b04      	cmp	r3, #4
 8008582:	d02d      	beq.n	80085e0 <VL53LX_update_ll_driver_cfg_state+0x130>
 8008584:	e064      	b.n	8008650 <VL53LX_update_ll_driver_cfg_state+0x1a0>

		case VL53LX_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	2201      	movs	r2, #1
 800858a:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 8008596:	429a      	cmp	r2, r3
 8008598:	d909      	bls.n	80085ae <VL53LX_update_ll_driver_cfg_state+0xfe>
				pstate->cfg_zone_id = 0;
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	2200      	movs	r2, #0
 800859e:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	795b      	ldrb	r3, [r3, #5]
 80085a4:	f083 0301 	eor.w	r3, r3, #1
 80085a8:	b2da      	uxtb	r2, r3
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	2201      	movs	r2, #1
 80085b2:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d106      	bne.n	80085cc <VL53LX_update_ll_driver_cfg_state+0x11c>
				pstate->cfg_internal_stream_count = 1;
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	2201      	movs	r2, #1
 80085c2:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	2200      	movs	r2, #0
 80085c8:	70da      	strb	r2, [r3, #3]
 80085ca:	e005      	b.n	80085d8 <VL53LX_update_ll_driver_cfg_state+0x128>
			} else {
				pstate->cfg_internal_stream_count = 0;
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	2200      	movs	r2, #0
 80085d0:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	2201      	movs	r2, #1
 80085d6:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	2204      	movs	r2, #4
 80085dc:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 80085de:	e050      	b.n	8008682 <VL53LX_update_ll_driver_cfg_state+0x1d2>

		case VL53LX_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	799b      	ldrb	r3, [r3, #6]
 80085e4:	3301      	adds	r3, #1
 80085e6:	b2da      	uxtb	r2, r3
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d940      	bls.n	800867c <VL53LX_update_ll_driver_cfg_state+0x1cc>

				pstate->cfg_zone_id = 0;
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	2200      	movs	r2, #0
 80085fe:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	795b      	ldrb	r3, [r3, #5]
 8008604:	f083 0301 	eor.w	r3, r3, #1
 8008608:	b2da      	uxtb	r2, r3
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8008614:	2b00      	cmp	r3, #0
 8008616:	d031      	beq.n	800867c <VL53LX_update_ll_driver_cfg_state+0x1cc>
					pstate->cfg_device_state =
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	2205      	movs	r2, #5
 800861c:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 800861e:	e02d      	b.n	800867c <VL53LX_update_ll_driver_cfg_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	799b      	ldrb	r3, [r3, #6]
 8008624:	3301      	adds	r3, #1
 8008626:	b2da      	uxtb	r2, r3
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 8008636:	429a      	cmp	r2, r3
 8008638:	d922      	bls.n	8008680 <VL53LX_update_ll_driver_cfg_state+0x1d0>
				pstate->cfg_zone_id = 0;
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	2200      	movs	r2, #0
 800863e:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	795b      	ldrb	r3, [r3, #5]
 8008644:	f083 0301 	eor.w	r3, r3, #1
 8008648:	b2da      	uxtb	r2, r3
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	715a      	strb	r2, [r3, #5]
			}
			break;
 800864e:	e017      	b.n	8008680 <VL53LX_update_ll_driver_cfg_state+0x1d0>

		default:
			pstate->cfg_device_state =
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	2203      	movs	r2, #3
 8008654:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	2200      	movs	r2, #0
 800865a:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	2200      	movs	r2, #0
 8008660:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	2200      	movs	r2, #0
 8008666:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	2202      	movs	r2, #2
 800866c:	711a      	strb	r2, [r3, #4]
					VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	2200      	movs	r2, #0
 8008672:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	2200      	movs	r2, #0
 8008678:	719a      	strb	r2, [r3, #6]
			break;
 800867a:	e002      	b.n	8008682 <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 800867c:	bf00      	nop
 800867e:	e000      	b.n	8008682 <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8008680:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8008688:	2b00      	cmp	r3, #0
 800868a:	d11d      	bne.n	80086c8 <VL53LX_update_ll_driver_cfg_state+0x218>

		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 800868c:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 800868e:	7f3b      	ldrb	r3, [r7, #28]
 8008690:	3b01      	subs	r3, #1
 8008692:	b2d8      	uxtb	r0, r3
 8008694:	68f9      	ldr	r1, [r7, #12]
 8008696:	4613      	mov	r3, r2
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4413      	add	r3, r2
 800869c:	005b      	lsls	r3, r3, #1
 800869e:	440b      	add	r3, r1
 80086a0:	3302      	adds	r3, #2
 80086a2:	4602      	mov	r2, r0
 80086a4:	701a      	strb	r2, [r3, #0]

		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id =
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	7b5b      	ldrb	r3, [r3, #13]
 80086aa:	4619      	mov	r1, r3
 80086ac:	7f7b      	ldrb	r3, [r7, #29]
 80086ae:	f083 0302 	eor.w	r3, r3, #2
 80086b2:	b2d8      	uxtb	r0, r3
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	460b      	mov	r3, r1
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	440b      	add	r3, r1
 80086bc:	005b      	lsls	r3, r3, #1
 80086be:	4413      	add	r3, r2
 80086c0:	3303      	adds	r3, #3
 80086c2:	4602      	mov	r2, r0
 80086c4:	701a      	strb	r2, [r3, #0]
 80086c6:	e013      	b.n	80086f0 <VL53LX_update_ll_driver_cfg_state+0x240>
			prev_cfg_gph_id ^ VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 80086c8:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 80086ca:	68f9      	ldr	r1, [r7, #12]
 80086cc:	4613      	mov	r3, r2
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	4413      	add	r3, r2
 80086d2:	005b      	lsls	r3, r3, #1
 80086d4:	440b      	add	r3, r1
 80086d6:	3302      	adds	r3, #2
 80086d8:	7f3a      	ldrb	r2, [r7, #28]
 80086da:	701a      	strb	r2, [r3, #0]
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_gph_id =
 80086dc:	7fba      	ldrb	r2, [r7, #30]
 80086de:	68f9      	ldr	r1, [r7, #12]
 80086e0:	4613      	mov	r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	4413      	add	r3, r2
 80086e6:	005b      	lsls	r3, r3, #1
 80086e8:	440b      	add	r3, r1
 80086ea:	3303      	adds	r3, #3
 80086ec:	7f7a      	ldrb	r2, [r7, #29]
 80086ee:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 80086f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3720      	adds	r7, #32
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <VL53LX_copy_rtn_good_spads_to_buffer>:


void VL53LX_copy_rtn_good_spads_to_buffer(
	VL53LX_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	7c1a      	ldrb	r2, [r3, #16]
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	3301      	adds	r3, #1
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	7c52      	ldrb	r2, [r2, #17]
 8008716:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	3302      	adds	r3, #2
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	7c92      	ldrb	r2, [r2, #18]
 8008720:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	3303      	adds	r3, #3
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	7cd2      	ldrb	r2, [r2, #19]
 800872a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	3304      	adds	r3, #4
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	7d12      	ldrb	r2, [r2, #20]
 8008734:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	3305      	adds	r3, #5
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	7d52      	ldrb	r2, [r2, #21]
 800873e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	3306      	adds	r3, #6
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	7d92      	ldrb	r2, [r2, #22]
 8008748:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	3307      	adds	r3, #7
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	7dd2      	ldrb	r2, [r2, #23]
 8008752:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	3308      	adds	r3, #8
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	7e12      	ldrb	r2, [r2, #24]
 800875c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	3309      	adds	r3, #9
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	7e52      	ldrb	r2, [r2, #25]
 8008766:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	330a      	adds	r3, #10
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	7e92      	ldrb	r2, [r2, #26]
 8008770:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	330b      	adds	r3, #11
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	7ed2      	ldrb	r2, [r2, #27]
 800877a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	330c      	adds	r3, #12
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	7f12      	ldrb	r2, [r2, #28]
 8008784:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	330d      	adds	r3, #13
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	7f52      	ldrb	r2, [r2, #29]
 800878e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	330e      	adds	r3, #14
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	7f92      	ldrb	r2, [r2, #30]
 8008798:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	330f      	adds	r3, #15
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	7fd2      	ldrb	r2, [r2, #31]
 80087a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	3310      	adds	r3, #16
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	f892 2020 	ldrb.w	r2, [r2, #32]
 80087ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	3311      	adds	r3, #17
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80087ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	3312      	adds	r3, #18
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 80087c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	3313      	adds	r3, #19
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 80087d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	3314      	adds	r3, #20
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80087de:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	3315      	adds	r3, #21
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80087ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	3316      	adds	r3, #22
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 80087f6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	3317      	adds	r3, #23
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8008802:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	3318      	adds	r3, #24
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800880e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	3319      	adds	r3, #25
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800881a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	331a      	adds	r3, #26
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 8008826:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	331b      	adds	r3, #27
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 8008832:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	331c      	adds	r3, #28
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800883e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	331d      	adds	r3, #29
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800884a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	331e      	adds	r3, #30
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8008856:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	331f      	adds	r3, #31
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8008862:	701a      	strb	r2, [r3, #0]
}
 8008864:	bf00      	nop
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <VL53LX_init_system_results>:


void VL53LX_init_system_results(
		VL53LX_system_results_t  *pdata)
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	22ff      	movs	r2, #255	; 0xff
 800887c:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	22ff      	movs	r2, #255	; 0xff
 8008882:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	22ff      	movs	r2, #255	; 0xff
 8008888:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	22ff      	movs	r2, #255	; 0xff
 800888e:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008896:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800889e:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088a6:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088ae:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088b6:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088be:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088c6:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088ce:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088d6:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088de:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088e6:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088ee:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088f6:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088fe:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008906:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800890e:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008916:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800891e:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008926:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	22ff      	movs	r2, #255	; 0xff
 800892c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53LX_zone_results_t  *pdata)
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	4603      	mov	r3, r0
 8008944:	6039      	str	r1, [r7, #0]
 8008946:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 8008948:	2300      	movs	r3, #0
 800894a:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_objects_t *pobjects;

	pdata->max_zones    = VL53LX_MAX_USER_ZONES;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	2205      	movs	r2, #5
 8008950:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	79fa      	ldrb	r2, [r7, #7]
 8008956:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 8008958:	2300      	movs	r3, #0
 800895a:	73fb      	strb	r3, [r7, #15]
 800895c:	e017      	b.n	800898e <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53LX_p_003[z]);
 800895e:	7bfa      	ldrb	r2, [r7, #15]
 8008960:	4613      	mov	r3, r2
 8008962:	011b      	lsls	r3, r3, #4
 8008964:	4413      	add	r3, r2
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	683a      	ldr	r2, [r7, #0]
 800896a:	4413      	add	r3, r2
 800896c:	3304      	adds	r3, #4
 800896e:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53LX_DEVICESTATE_SW_STANDBY;
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	2203      	movs	r2, #3
 8008974:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	2203      	movs	r2, #3
 800897a:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53LX_MAX_RANGE_RESULTS;
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	2204      	movs	r2, #4
 8008980:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	2200      	movs	r2, #0
 8008986:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 8008988:	7bfb      	ldrb	r3, [r7, #15]
 800898a:	3301      	adds	r3, #1
 800898c:	73fb      	strb	r3, [r7, #15]
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	7bfa      	ldrb	r2, [r7, #15]
 8008994:	429a      	cmp	r2, r3
 8008996:	d3e2      	bcc.n	800895e <V53L1_init_zone_results_structure+0x22>
	}
}
 8008998:	bf00      	nop
 800899a:	bf00      	nop
 800899c:	3714      	adds	r7, #20
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr

080089a6 <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53LX_DEV              Dev)
{
 80089a6:	b480      	push	{r7}
 80089a8:	b087      	sub	sp, #28
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverResults_t  *pres =
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80089b4:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 80089b6:	2300      	movs	r3, #0
 80089b8:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53LX_MAX_USER_ZONES;
 80089ba:	2305      	movs	r3, #5
 80089bc:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80089c4:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 80089c6:	2300      	movs	r3, #0
 80089c8:	75fb      	strb	r3, [r7, #23]
 80089ca:	e016      	b.n	80089fa <V53L1_init_zone_dss_configs+0x54>
		pdata->VL53LX_p_003[z].dss_mode =
 80089cc:	7dfa      	ldrb	r2, [r7, #23]
 80089ce:	68b9      	ldr	r1, [r7, #8]
 80089d0:	4613      	mov	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4413      	add	r3, r2
 80089d6:	005b      	lsls	r3, r3, #1
 80089d8:	440b      	add	r3, r1
 80089da:	3304      	adds	r3, #4
 80089dc:	2201      	movs	r2, #1
 80089de:	701a      	strb	r2, [r3, #0]
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53LX_p_003[z].dss_requested_effective_spad_count = 0;
 80089e0:	7dfa      	ldrb	r2, [r7, #23]
 80089e2:	68b9      	ldr	r1, [r7, #8]
 80089e4:	4613      	mov	r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	4413      	add	r3, r2
 80089ea:	005b      	lsls	r3, r3, #1
 80089ec:	440b      	add	r3, r1
 80089ee:	3306      	adds	r3, #6
 80089f0:	2200      	movs	r2, #0
 80089f2:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 80089f4:	7dfb      	ldrb	r3, [r7, #23]
 80089f6:	3301      	adds	r3, #1
 80089f8:	75fb      	strb	r3, [r7, #23]
 80089fa:	7dfa      	ldrb	r2, [r7, #23]
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d3e4      	bcc.n	80089cc <V53L1_init_zone_dss_configs+0x26>
	}
}
 8008a02:	bf00      	nop
 8008a04:	bf00      	nop
 8008a06:	371c      	adds	r7, #28
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <VL53LX_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 8008a10:	b490      	push	{r4, r7}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	4604      	mov	r4, r0
 8008a18:	4608      	mov	r0, r1
 8008a1a:	4611      	mov	r1, r2
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	4623      	mov	r3, r4
 8008a20:	71fb      	strb	r3, [r7, #7]
 8008a22:	4603      	mov	r3, r0
 8008a24:	71bb      	strb	r3, [r7, #6]
 8008a26:	460b      	mov	r3, r1
 8008a28:	717b      	strb	r3, [r7, #5]
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 8008a2e:	79bb      	ldrb	r3, [r7, #6]
 8008a30:	011b      	lsls	r3, r3, #4
 8008a32:	b2da      	uxtb	r2, r3
 8008a34:	79fb      	ldrb	r3, [r7, #7]
 8008a36:	4413      	add	r3, r2
 8008a38:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 8008a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3c:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 8008a3e:	793b      	ldrb	r3, [r7, #4]
 8008a40:	011b      	lsls	r3, r3, #4
 8008a42:	b2da      	uxtb	r2, r3
 8008a44:	797b      	ldrb	r3, [r7, #5]
 8008a46:	4413      	add	r3, r2
 8008a48:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 8008a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4c:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 8008a4e:	7d3b      	ldrb	r3, [r7, #20]
 8008a50:	011b      	lsls	r3, r3, #4
 8008a52:	b2da      	uxtb	r2, r3
 8008a54:	7c3b      	ldrb	r3, [r7, #16]
 8008a56:	4413      	add	r3, r2
 8008a58:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 8008a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5c:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 8008a5e:	7f3b      	ldrb	r3, [r7, #28]
 8008a60:	011b      	lsls	r3, r3, #4
 8008a62:	b2da      	uxtb	r2, r3
 8008a64:	7e3b      	ldrb	r3, [r7, #24]
 8008a66:	4413      	add	r3, r2
 8008a68:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8008a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6c:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 8008a6e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008a72:	011b      	lsls	r3, r3, #4
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 8008a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a80:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 8008a82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008a86:	011b      	lsls	r3, r3, #4
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008a8e:	4413      	add	r3, r2
 8008a90:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 8008a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a94:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8008a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a98:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9c:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa0:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 8008aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa4:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 8008aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa8:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 8008aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aac:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 8008aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab0:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 8008ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab4:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 8008ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008abc:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 8008abe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008ac2:	011b      	lsls	r3, r3, #4
 8008ac4:	b2da      	uxtb	r2, r3
 8008ac6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008aca:	4413      	add	r3, r2
 8008acc:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 8008ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad0:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 8008ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8008ad8:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 8008ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008adc:	2200      	movs	r2, #0
 8008ade:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8008ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae2:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 8008ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae6:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 8008ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aea:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 8008aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aee:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 8008af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af2:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8008af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af6:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 8008af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afa:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 8008afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afe:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 8008b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b02:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 8008b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b06:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 8008b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0a:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0e:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8008b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b16:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 8008b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b1e:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 8008b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b22:	2200      	movs	r2, #0
 8008b24:	701a      	strb	r2, [r3, #0]

}
 8008b26:	bf00      	nop
 8008b28:	3708      	adds	r7, #8
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bc90      	pop	{r4, r7}
 8008b2e:	4770      	bx	lr

08008b30 <VL53LX_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 8008b30:	b490      	push	{r4, r7}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	4604      	mov	r4, r0
 8008b38:	4608      	mov	r0, r1
 8008b3a:	4611      	mov	r1, r2
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	4623      	mov	r3, r4
 8008b40:	71fb      	strb	r3, [r7, #7]
 8008b42:	4603      	mov	r3, r0
 8008b44:	71bb      	strb	r3, [r7, #6]
 8008b46:	460b      	mov	r3, r1
 8008b48:	717b      	strb	r3, [r7, #5]
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 8008b4e:	79bb      	ldrb	r3, [r7, #6]
 8008b50:	011b      	lsls	r3, r3, #4
 8008b52:	b2da      	uxtb	r2, r3
 8008b54:	79fb      	ldrb	r3, [r7, #7]
 8008b56:	4413      	add	r3, r2
 8008b58:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 8008b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5c:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 8008b5e:	793b      	ldrb	r3, [r7, #4]
 8008b60:	011b      	lsls	r3, r3, #4
 8008b62:	b2da      	uxtb	r2, r3
 8008b64:	797b      	ldrb	r3, [r7, #5]
 8008b66:	4413      	add	r3, r2
 8008b68:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 8008b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6c:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 8008b6e:	7d3b      	ldrb	r3, [r7, #20]
 8008b70:	011b      	lsls	r3, r3, #4
 8008b72:	b2da      	uxtb	r2, r3
 8008b74:	7c3b      	ldrb	r3, [r7, #16]
 8008b76:	4413      	add	r3, r2
 8008b78:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7c:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8008b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b80:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8008b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b84:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 8008b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b88:	789a      	ldrb	r2, [r3, #2]
 8008b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8c:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 8008b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b90:	78da      	ldrb	r2, [r3, #3]
 8008b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b94:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 8008b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b98:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8008b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9c:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 8008b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba0:	789a      	ldrb	r2, [r3, #2]
 8008ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba4:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 8008ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba8:	78da      	ldrb	r2, [r3, #3]
 8008baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bac:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 8008bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb0:	791a      	ldrb	r2, [r3, #4]
 8008bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb4:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 8008bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008bbc:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 8008bbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008bc2:	011b      	lsls	r3, r3, #4
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008bca:	4413      	add	r3, r2
 8008bcc:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 8008bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd0:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 8008bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8008bd8:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 8008bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bdc:	2200      	movs	r2, #0
 8008bde:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 8008be0:	7f3b      	ldrb	r3, [r7, #28]
 8008be2:	011b      	lsls	r3, r3, #4
 8008be4:	b2da      	uxtb	r2, r3
 8008be6:	7e3b      	ldrb	r3, [r7, #24]
 8008be8:	4413      	add	r3, r2
 8008bea:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 8008bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bee:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 8008bf0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008bf4:	011b      	lsls	r3, r3, #4
 8008bf6:	b2da      	uxtb	r2, r3
 8008bf8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 8008c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c02:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 8008c04:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008c08:	011b      	lsls	r3, r3, #4
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008c10:	4413      	add	r3, r2
 8008c12:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8008c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c16:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 8008c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1a:	7bda      	ldrb	r2, [r3, #15]
 8008c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1e:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 8008c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c22:	7c1a      	ldrb	r2, [r3, #16]
 8008c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c26:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 8008c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2a:	7c5a      	ldrb	r2, [r3, #17]
 8008c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2e:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8008c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c36:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 8008c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c3e:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 8008c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c42:	2200      	movs	r2, #0
 8008c44:	701a      	strb	r2, [r3, #0]
}
 8008c46:	bf00      	nop
 8008c48:	3708      	adds	r7, #8
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bc90      	pop	{r4, r7}
 8008c4e:	4770      	bx	lr

08008c50 <VL53LX_init_xtalk_bin_data_struct>:

void VL53LX_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53LX_p_021,
	VL53LX_xtalk_histogram_shape_t *pdata)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b087      	sub	sp, #28
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	460b      	mov	r3, r1
 8008c5a:	607a      	str	r2, [r7, #4]
 8008c5c:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_XTALK_HISTO_BINS;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	220c      	movs	r2, #12
 8008c78:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 8008c7a:	897b      	ldrh	r3, [r7, #10]
 8008c7c:	b2da      	uxtb	r2, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	pdata->cal_config__vcsel_start            = 0;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	pdata->vcsel_width                        = 0;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53LX_p_015                = 0;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	pdata->zero_distance_phase                = 0;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	82fb      	strh	r3, [r7, #22]
 8008cb4:	e015      	b.n	8008ce2 <VL53LX_init_xtalk_bin_data_struct+0x92>
		if (i < VL53LX_p_021)
 8008cb6:	8afa      	ldrh	r2, [r7, #22]
 8008cb8:	897b      	ldrh	r3, [r7, #10]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d207      	bcs.n	8008cce <VL53LX_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 8008cbe:	8afb      	ldrh	r3, [r7, #22]
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	3302      	adds	r3, #2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	4413      	add	r3, r2
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	605a      	str	r2, [r3, #4]
 8008ccc:	e006      	b.n	8008cdc <VL53LX_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 8008cce:	8afb      	ldrh	r3, [r7, #22]
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	3302      	adds	r3, #2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	4413      	add	r3, r2
 8008cd8:	2200      	movs	r2, #0
 8008cda:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 8008cdc:	8afb      	ldrh	r3, [r7, #22]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	82fb      	strh	r3, [r7, #22]
 8008ce2:	8afb      	ldrh	r3, [r7, #22]
 8008ce4:	2b0b      	cmp	r3, #11
 8008ce6:	d9e6      	bls.n	8008cb6 <VL53LX_init_xtalk_bin_data_struct+0x66>
	}
}
 8008ce8:	bf00      	nop
 8008cea:	bf00      	nop
 8008cec:	371c      	adds	r7, #28
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr

08008cf6 <VL53LX_i2c_encode_uint16_t>:

void VL53LX_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008cf6:	b480      	push	{r7}
 8008cf8:	b085      	sub	sp, #20
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	603a      	str	r2, [r7, #0]
 8008d00:	80fb      	strh	r3, [r7, #6]
 8008d02:	460b      	mov	r3, r1
 8008d04:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 8008d06:	2300      	movs	r3, #0
 8008d08:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53LX_p_003 = 0;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 8008d0e:	88fb      	ldrh	r3, [r7, #6]
 8008d10:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 8008d12:	2300      	movs	r3, #0
 8008d14:	81fb      	strh	r3, [r7, #14]
 8008d16:	e00e      	b.n	8008d36 <VL53LX_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8008d18:	88ba      	ldrh	r2, [r7, #4]
 8008d1a:	89fb      	ldrh	r3, [r7, #14]
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	683a      	ldr	r2, [r7, #0]
 8008d22:	4413      	add	r3, r2
 8008d24:	89ba      	ldrh	r2, [r7, #12]
 8008d26:	b2d2      	uxtb	r2, r2
 8008d28:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 8008d2a:	89bb      	ldrh	r3, [r7, #12]
 8008d2c:	0a1b      	lsrs	r3, r3, #8
 8008d2e:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 8008d30:	89fb      	ldrh	r3, [r7, #14]
 8008d32:	3301      	adds	r3, #1
 8008d34:	81fb      	strh	r3, [r7, #14]
 8008d36:	89fa      	ldrh	r2, [r7, #14]
 8008d38:	88bb      	ldrh	r3, [r7, #4]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d3ec      	bcc.n	8008d18 <VL53LX_i2c_encode_uint16_t+0x22>
	}
}
 8008d3e:	bf00      	nop
 8008d40:	bf00      	nop
 8008d42:	3714      	adds	r7, #20
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <VL53LX_i2c_decode_uint16_t>:

uint16_t VL53LX_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b085      	sub	sp, #20
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	4603      	mov	r3, r0
 8008d54:	6039      	str	r1, [r7, #0]
 8008d56:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 8008d5c:	e00a      	b.n	8008d74 <VL53LX_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 8008d5e:	89fb      	ldrh	r3, [r7, #14]
 8008d60:	021b      	lsls	r3, r3, #8
 8008d62:	b21a      	sxth	r2, r3
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	1c59      	adds	r1, r3, #1
 8008d68:	6039      	str	r1, [r7, #0]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	b21b      	sxth	r3, r3
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	b21b      	sxth	r3, r3
 8008d72:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 8008d74:	88fb      	ldrh	r3, [r7, #6]
 8008d76:	1e5a      	subs	r2, r3, #1
 8008d78:	80fa      	strh	r2, [r7, #6]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d1ef      	bne.n	8008d5e <VL53LX_i2c_decode_uint16_t+0x12>

	return value;
 8008d7e:	89fb      	ldrh	r3, [r7, #14]
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3714      	adds	r7, #20
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <VL53LX_i2c_encode_int16_t>:

void VL53LX_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	4603      	mov	r3, r0
 8008d94:	603a      	str	r2, [r7, #0]
 8008d96:	80fb      	strh	r3, [r7, #6]
 8008d98:	460b      	mov	r3, r1
 8008d9a:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53LX_p_003 = 0;
 8008da0:	2300      	movs	r3, #0
 8008da2:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 8008da4:	88fb      	ldrh	r3, [r7, #6]
 8008da6:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 8008da8:	2300      	movs	r3, #0
 8008daa:	81fb      	strh	r3, [r7, #14]
 8008dac:	e00f      	b.n	8008dce <VL53LX_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8008dae:	88ba      	ldrh	r2, [r7, #4]
 8008db0:	89fb      	ldrh	r3, [r7, #14]
 8008db2:	1ad3      	subs	r3, r2, r3
 8008db4:	3b01      	subs	r3, #1
 8008db6:	683a      	ldr	r2, [r7, #0]
 8008db8:	4413      	add	r3, r2
 8008dba:	89ba      	ldrh	r2, [r7, #12]
 8008dbc:	b2d2      	uxtb	r2, r2
 8008dbe:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 8008dc0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008dc4:	121b      	asrs	r3, r3, #8
 8008dc6:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 8008dc8:	89fb      	ldrh	r3, [r7, #14]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	81fb      	strh	r3, [r7, #14]
 8008dce:	89fa      	ldrh	r2, [r7, #14]
 8008dd0:	88bb      	ldrh	r3, [r7, #4]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d3eb      	bcc.n	8008dae <VL53LX_i2c_encode_int16_t+0x22>
	}
}
 8008dd6:	bf00      	nop
 8008dd8:	bf00      	nop
 8008dda:	3714      	adds	r7, #20
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <VL53LX_i2c_decode_int16_t>:

int16_t VL53LX_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b085      	sub	sp, #20
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	4603      	mov	r3, r0
 8008dec:	6039      	str	r1, [r7, #0]
 8008dee:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 8008df0:	2300      	movs	r3, #0
 8008df2:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	b25b      	sxtb	r3, r3
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	da0e      	bge.n	8008e1c <VL53LX_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 8008dfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e02:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 8008e04:	e00a      	b.n	8008e1c <VL53LX_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 8008e06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008e0a:	021b      	lsls	r3, r3, #8
 8008e0c:	b21a      	sxth	r2, r3
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	1c59      	adds	r1, r3, #1
 8008e12:	6039      	str	r1, [r7, #0]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	b21b      	sxth	r3, r3
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 8008e1c:	88fb      	ldrh	r3, [r7, #6]
 8008e1e:	1e5a      	subs	r2, r3, #1
 8008e20:	80fa      	strh	r2, [r7, #6]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1ef      	bne.n	8008e06 <VL53LX_i2c_decode_int16_t+0x22>

	return value;
 8008e26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3714      	adds	r7, #20
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr

08008e36 <VL53LX_i2c_encode_uint32_t>:

void VL53LX_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008e36:	b480      	push	{r7}
 8008e38:	b087      	sub	sp, #28
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	60f8      	str	r0, [r7, #12]
 8008e3e:	460b      	mov	r3, r1
 8008e40:	607a      	str	r2, [r7, #4]
 8008e42:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 8008e44:	2300      	movs	r3, #0
 8008e46:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53LX_p_003 = 0;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	613b      	str	r3, [r7, #16]

	VL53LX_p_003 =  ip_value;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 8008e50:	2300      	movs	r3, #0
 8008e52:	82fb      	strh	r3, [r7, #22]
 8008e54:	e00e      	b.n	8008e74 <VL53LX_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8008e56:	897a      	ldrh	r2, [r7, #10]
 8008e58:	8afb      	ldrh	r3, [r7, #22]
 8008e5a:	1ad3      	subs	r3, r2, r3
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	4413      	add	r3, r2
 8008e62:	693a      	ldr	r2, [r7, #16]
 8008e64:	b2d2      	uxtb	r2, r2
 8008e66:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	0a1b      	lsrs	r3, r3, #8
 8008e6c:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 8008e6e:	8afb      	ldrh	r3, [r7, #22]
 8008e70:	3301      	adds	r3, #1
 8008e72:	82fb      	strh	r3, [r7, #22]
 8008e74:	8afa      	ldrh	r2, [r7, #22]
 8008e76:	897b      	ldrh	r3, [r7, #10]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d3ec      	bcc.n	8008e56 <VL53LX_i2c_encode_uint32_t+0x20>
	}
}
 8008e7c:	bf00      	nop
 8008e7e:	bf00      	nop
 8008e80:	371c      	adds	r7, #28
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr

08008e8a <VL53LX_i2c_decode_uint32_t>:

uint32_t VL53LX_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008e8a:	b480      	push	{r7}
 8008e8c:	b085      	sub	sp, #20
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	4603      	mov	r3, r0
 8008e92:	6039      	str	r1, [r7, #0]
 8008e94:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 8008e96:	2300      	movs	r3, #0
 8008e98:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 8008e9a:	e007      	b.n	8008eac <VL53LX_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	021a      	lsls	r2, r3, #8
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	1c59      	adds	r1, r3, #1
 8008ea4:	6039      	str	r1, [r7, #0]
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 8008eac:	88fb      	ldrh	r3, [r7, #6]
 8008eae:	1e5a      	subs	r2, r3, #1
 8008eb0:	80fa      	strh	r2, [r7, #6]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1f2      	bne.n	8008e9c <VL53LX_i2c_decode_uint32_t+0x12>

	return value;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3714      	adds	r7, #20
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <VL53LX_i2c_decode_int32_t>:
}

int32_t VL53LX_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	4603      	mov	r3, r0
 8008ecc:	6039      	str	r1, [r7, #0]
 8008ece:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	b25b      	sxtb	r3, r3
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	da0b      	bge.n	8008ef6 <VL53LX_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 8008ede:	f04f 33ff 	mov.w	r3, #4294967295
 8008ee2:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 8008ee4:	e007      	b.n	8008ef6 <VL53LX_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	021a      	lsls	r2, r3, #8
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	1c59      	adds	r1, r3, #1
 8008eee:	6039      	str	r1, [r7, #0]
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 8008ef6:	88fb      	ldrh	r3, [r7, #6]
 8008ef8:	1e5a      	subs	r2, r3, #1
 8008efa:	80fa      	strh	r2, [r7, #6]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d1f2      	bne.n	8008ee6 <VL53LX_i2c_decode_int32_t+0x22>

	return value;
 8008f00:	68fb      	ldr	r3, [r7, #12]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3714      	adds	r7, #20
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr

08008f0e <VL53LX_start_test>:


VL53LX_Error VL53LX_start_test(
	VL53LX_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b084      	sub	sp, #16
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
 8008f16:	460b      	mov	r3, r1
 8008f18:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE) {
 8008f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d107      	bne.n	8008f36 <VL53LX_start_test+0x28>
		status = VL53LX_WrByte(
 8008f26:	78fb      	ldrb	r3, [r7, #3]
 8008f28:	461a      	mov	r2, r3
 8008f2a:	2127      	movs	r1, #39	; 0x27
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f008 fc6d 	bl	801180c <VL53LX_WrByte>
 8008f32:	4603      	mov	r3, r0
 8008f34:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 8008f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <VL53LX_set_firmware_enable_register>:


VL53LX_Error VL53LX_set_firmware_enable_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b084      	sub	sp, #16
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status         = VL53LX_ERROR_NONE;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	3318      	adds	r3, #24
 8008f56:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	78fa      	ldrb	r2, [r7, #3]
 8008f5c:	f883 2362 	strb.w	r2, [r3, #866]	; 0x362

	status = VL53LX_WrByte(
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	f893 3362 	ldrb.w	r3, [r3, #866]	; 0x362
 8008f66:	461a      	mov	r2, r3
 8008f68:	2185      	movs	r1, #133	; 0x85
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f008 fc4e 	bl	801180c <VL53LX_WrByte>
 8008f70:	4603      	mov	r3, r0
 8008f72:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53LX_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 8008f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <VL53LX_enable_firmware>:

VL53LX_Error VL53LX_enable_firmware(
	VL53LX_DEV    Dev)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x01);
 8008f8c:	2101      	movs	r1, #1
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f7ff ffd7 	bl	8008f42 <VL53LX_set_firmware_enable_register>
 8008f94:	4603      	mov	r3, r0
 8008f96:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8008f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <VL53LX_disable_firmware>:


VL53LX_Error VL53LX_disable_firmware(
	VL53LX_DEV    Dev)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008fac:	2300      	movs	r3, #0
 8008fae:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x00);
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f7ff ffc5 	bl	8008f42 <VL53LX_set_firmware_enable_register>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8008fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <VL53LX_set_powerforce_register>:


VL53LX_Error VL53LX_set_powerforce_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	3318      	adds	r3, #24
 8008fdc:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	78fa      	ldrb	r2, [r7, #3]
 8008fe2:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360

	status = VL53LX_WrByte(
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	f893 3360 	ldrb.w	r3, [r3, #864]	; 0x360
 8008fec:	461a      	mov	r2, r3
 8008fee:	2183      	movs	r1, #131	; 0x83
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f008 fc0b 	bl	801180c <VL53LX_WrByte>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 8008ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <VL53LX_enable_powerforce>:


VL53LX_Error VL53LX_enable_powerforce(
	VL53LX_DEV    Dev)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b084      	sub	sp, #16
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800900e:	2300      	movs	r3, #0
 8009010:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x01);
 8009012:	2101      	movs	r1, #1
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f7ff ffd7 	bl	8008fc8 <VL53LX_set_powerforce_register>
 800901a:	4603      	mov	r3, r0
 800901c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800901e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <VL53LX_disable_powerforce>:


VL53LX_Error VL53LX_disable_powerforce(
	VL53LX_DEV    Dev)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b084      	sub	sp, #16
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8009032:	2300      	movs	r3, #0
 8009034:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x00);
 8009036:	2100      	movs	r1, #0
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f7ff ffc5 	bl	8008fc8 <VL53LX_set_powerforce_register>
 800903e:	4603      	mov	r3, r0
 8009040:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8009042:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009046:	4618      	mov	r0, r3
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <VL53LX_clear_interrupt>:


VL53LX_Error VL53LX_clear_interrupt(
	VL53LX_DEV    Dev)
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b084      	sub	sp, #16
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8009056:	2300      	movs	r3, #0
 8009058:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	3318      	adds	r3, #24
 800905e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53LX_CLEAR_RANGE_INT;
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363

	status = VL53LX_WrByte(
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800906e:	461a      	mov	r2, r3
 8009070:	2186      	movs	r1, #134	; 0x86
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f008 fbca 	bl	801180c <VL53LX_WrByte>
 8009078:	4603      	mov	r3, r0
 800907a:	73fb      	strb	r3, [r7, #15]
				VL53LX_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 800907c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009080:	4618      	mov	r0, r3
 8009082:	3710      	adds	r7, #16
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <VL53LX_calc_macro_period_us>:


uint32_t VL53LX_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53LX_p_005)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b086      	sub	sp, #24
 800908c:	af00      	add	r7, sp, #0
 800908e:	4603      	mov	r3, r0
 8009090:	460a      	mov	r2, r1
 8009092:	80fb      	strh	r3, [r7, #6]
 8009094:	4613      	mov	r3, r2
 8009096:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 8009098:	2300      	movs	r3, #0
 800909a:	617b      	str	r3, [r7, #20]
	uint8_t   VL53LX_p_030   = 0;
 800909c:	2300      	movs	r3, #0
 800909e:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 80090a0:	2300      	movs	r3, #0
 80090a2:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53LX_calc_pll_period_us(fast_osc_frequency);
 80090a4:	88fb      	ldrh	r3, [r7, #6]
 80090a6:	4618      	mov	r0, r3
 80090a8:	f002 fe9b 	bl	800bde2 <VL53LX_calc_pll_period_us>
 80090ac:	6178      	str	r0, [r7, #20]



	VL53LX_p_030 = VL53LX_decode_vcsel_period(VL53LX_p_005);
 80090ae:	797b      	ldrb	r3, [r7, #5]
 80090b0:	4618      	mov	r0, r3
 80090b2:	f003 fa69 	bl	800c588 <VL53LX_decode_vcsel_period>
 80090b6:	4603      	mov	r3, r0
 80090b8:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 80090ba:	697a      	ldr	r2, [r7, #20]
 80090bc:	4613      	mov	r3, r2
 80090be:	00db      	lsls	r3, r3, #3
 80090c0:	4413      	add	r3, r2
 80090c2:	021b      	lsls	r3, r3, #8
 80090c4:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53LX_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	099b      	lsrs	r3, r3, #6
 80090ca:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53LX_p_030;
 80090cc:	7cfa      	ldrb	r2, [r7, #19]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	fb02 f303 	mul.w	r3, r2, r3
 80090d4:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	099b      	lsrs	r3, r3, #6
 80090da:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 80090dc:	68fb      	ldr	r3, [r7, #12]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3718      	adds	r7, #24
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
	...

080090e8 <VL53LX_calc_range_ignore_threshold>:
uint16_t VL53LX_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b089      	sub	sp, #36	; 0x24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	4608      	mov	r0, r1
 80090f2:	4611      	mov	r1, r2
 80090f4:	461a      	mov	r2, r3
 80090f6:	4603      	mov	r3, r0
 80090f8:	817b      	strh	r3, [r7, #10]
 80090fa:	460b      	mov	r3, r1
 80090fc:	813b      	strh	r3, [r7, #8]
 80090fe:	4613      	mov	r3, r2
 8009100:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 8009102:	2300      	movs	r3, #0
 8009104:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 8009106:	2300      	movs	r3, #0
 8009108:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800910a:	2300      	movs	r3, #0
 800910c:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800910e:	2300      	movs	r3, #0
 8009110:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 8009112:	2300      	movs	r3, #0
 8009114:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	011b      	lsls	r3, r3, #4
 800911a:	4a23      	ldr	r2, [pc, #140]	; (80091a8 <VL53LX_calc_range_ignore_threshold+0xc0>)
 800911c:	fb82 1203 	smull	r1, r2, r2, r3
 8009120:	1192      	asrs	r2, r2, #6
 8009122:	17db      	asrs	r3, r3, #31
 8009124:	1ad3      	subs	r3, r2, r3
 8009126:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 8009128:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800912c:	2b00      	cmp	r3, #0
 800912e:	da03      	bge.n	8009138 <VL53LX_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 8009130:	897b      	ldrh	r3, [r7, #10]
 8009132:	425b      	negs	r3, r3
 8009134:	b29b      	uxth	r3, r3
 8009136:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 8009138:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800913c:	2b00      	cmp	r3, #0
 800913e:	da03      	bge.n	8009148 <VL53LX_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 8009140:	893b      	ldrh	r3, [r7, #8]
 8009142:	425b      	negs	r3, r3
 8009144:	b29b      	uxth	r3, r3
 8009146:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 8009148:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800914c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009150:	4413      	add	r3, r2
 8009152:	015b      	lsls	r3, r3, #5
 8009154:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	4a13      	ldr	r2, [pc, #76]	; (80091a8 <VL53LX_calc_range_ignore_threshold+0xc0>)
 800915a:	fb82 1203 	smull	r1, r2, r2, r3
 800915e:	1192      	asrs	r2, r2, #6
 8009160:	17db      	asrs	r3, r3, #31
 8009162:	1ad3      	subs	r3, r2, r3
 8009164:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 8009166:	697a      	ldr	r2, [r7, #20]
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	4413      	add	r3, r2
 800916c:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800916e:	79fa      	ldrb	r2, [r7, #7]
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	fb02 f303 	mul.w	r3, r2, r3
 8009176:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	3310      	adds	r3, #16
 800917c:	2b00      	cmp	r3, #0
 800917e:	da00      	bge.n	8009182 <VL53LX_calc_range_ignore_threshold+0x9a>
 8009180:	331f      	adds	r3, #31
 8009182:	115b      	asrs	r3, r3, #5
 8009184:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800918c:	db03      	blt.n	8009196 <VL53LX_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800918e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009192:	83fb      	strh	r3, [r7, #30]
 8009194:	e001      	b.n	800919a <VL53LX_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800919a:	8bfb      	ldrh	r3, [r7, #30]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3724      	adds	r7, #36	; 0x24
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr
 80091a8:	10624dd3 	.word	0x10624dd3

080091ac <VL53LX_calc_timeout_mclks>:


uint32_t VL53LX_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 80091b6:	2300      	movs	r3, #0
 80091b8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d102      	bne.n	80091c6 <VL53LX_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 80091c0:	2300      	movs	r3, #0
 80091c2:	60fb      	str	r3, [r7, #12]
 80091c4:	e008      	b.n	80091d8 <VL53LX_calc_timeout_mclks+0x2c>
	else
		timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	031a      	lsls	r2, r3, #12
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	085b      	lsrs	r3, r3, #1
 80091ce:	441a      	add	r2, r3
		timeout_mclks   =
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80091d6:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 80091d8:	68fb      	ldr	r3, [r7, #12]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3714      	adds	r7, #20
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr

080091e6 <VL53LX_calc_encoded_timeout>:


uint16_t VL53LX_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b084      	sub	sp, #16
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 80091f0:	2300      	movs	r3, #0
 80091f2:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 80091f4:	2300      	movs	r3, #0
 80091f6:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53LX_calc_timeout_mclks(timeout_us, macro_period_us);
 80091f8:	6839      	ldr	r1, [r7, #0]
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f7ff ffd6 	bl	80091ac <VL53LX_calc_timeout_mclks>
 8009200:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53LX_encode_timeout(timeout_mclks);
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f000 f885 	bl	8009312 <VL53LX_encode_timeout>
 8009208:	4603      	mov	r3, r0
 800920a:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800920c:	897b      	ldrh	r3, [r7, #10]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <VL53LX_calc_timeout_us>:


uint32_t VL53LX_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 8009216:	b4f0      	push	{r4, r5, r6, r7}
 8009218:	b086      	sub	sp, #24
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
 800921e:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 8009220:	2300      	movs	r3, #0
 8009222:	617b      	str	r3, [r7, #20]
	uint64_t tmp            = 0;
 8009224:	f04f 0200 	mov.w	r2, #0
 8009228:	f04f 0300 	mov.w	r3, #0
 800922c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4618      	mov	r0, r3
 8009234:	f04f 0100 	mov.w	r1, #0
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	461a      	mov	r2, r3
 800923c:	f04f 0300 	mov.w	r3, #0
 8009240:	fb02 fc01 	mul.w	ip, r2, r1
 8009244:	fb00 f603 	mul.w	r6, r0, r3
 8009248:	4466      	add	r6, ip
 800924a:	fba0 2302 	umull	r2, r3, r0, r2
 800924e:	18f1      	adds	r1, r6, r3
 8009250:	460b      	mov	r3, r1
 8009252:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8009256:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800925a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800925e:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 8009262:	f143 0500 	adc.w	r5, r3, #0
 8009266:	e9c7 4502 	strd	r4, r5, [r7, #8]
	tmp  = tmp >> 12;
 800926a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800926e:	f04f 0200 	mov.w	r2, #0
 8009272:	f04f 0300 	mov.w	r3, #0
 8009276:	0b02      	lsrs	r2, r0, #12
 8009278:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800927c:	0b0b      	lsrs	r3, r1, #12
 800927e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 8009286:	697b      	ldr	r3, [r7, #20]
}
 8009288:	4618      	mov	r0, r3
 800928a:	3718      	adds	r7, #24
 800928c:	46bd      	mov	sp, r7
 800928e:	bcf0      	pop	{r4, r5, r6, r7}
 8009290:	4770      	bx	lr
	...

08009294 <VL53LX_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53LX_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	460b      	mov	r3, r1
 800929e:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 80092a0:	2300      	movs	r3, #0
 80092a2:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 80092a4:	2300      	movs	r3, #0
 80092a6:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 80092a8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 80092ac:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 80092ae:	4413      	add	r3, r2
 80092b0:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	da02      	bge.n	80092be <VL53LX_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 80092b8:	2300      	movs	r3, #0
 80092ba:	60fb      	str	r3, [r7, #12]
 80092bc:	e005      	b.n	80092ca <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80092c4:	db01      	blt.n	80092ca <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 80092c6:	4b05      	ldr	r3, [pc, #20]	; (80092dc <VL53LX_calc_crosstalk_plane_offset_with_margin+0x48>)
 80092c8:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 80092ce:	68bb      	ldr	r3, [r7, #8]

}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3714      	adds	r7, #20
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr
 80092dc:	0003ffff 	.word	0x0003ffff

080092e0 <VL53LX_calc_decoded_timeout_us>:

uint32_t VL53LX_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	4603      	mov	r3, r0
 80092e8:	6039      	str	r1, [r7, #0]
 80092ea:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 80092ec:	2300      	movs	r3, #0
 80092ee:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 80092f0:	2300      	movs	r3, #0
 80092f2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53LX_decode_timeout(timeout_encoded);
 80092f4:	88fb      	ldrh	r3, [r7, #6]
 80092f6:	4618      	mov	r0, r3
 80092f8:	f000 f837 	bl	800936a <VL53LX_decode_timeout>
 80092fc:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53LX_calc_timeout_us(timeout_mclks, macro_period_us);
 80092fe:	6839      	ldr	r1, [r7, #0]
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f7ff ff88 	bl	8009216 <VL53LX_calc_timeout_us>
 8009306:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 8009308:	68bb      	ldr	r3, [r7, #8]
}
 800930a:	4618      	mov	r0, r3
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <VL53LX_encode_timeout>:


uint16_t VL53LX_encode_timeout(uint32_t timeout_mclks)
{
 8009312:	b480      	push	{r7}
 8009314:	b087      	sub	sp, #28
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 800931a:	2300      	movs	r3, #0
 800931c:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800931e:	2300      	movs	r3, #0
 8009320:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8009322:	2300      	movs	r3, #0
 8009324:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d017      	beq.n	800935c <VL53LX_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	3b01      	subs	r3, #1
 8009330:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009332:	e005      	b.n	8009340 <VL53LX_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	085b      	lsrs	r3, r3, #1
 8009338:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800933a:	89fb      	ldrh	r3, [r7, #14]
 800933c:	3301      	adds	r3, #1
 800933e:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009346:	2b00      	cmp	r3, #0
 8009348:	d1f4      	bne.n	8009334 <VL53LX_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800934a:	89fb      	ldrh	r3, [r7, #14]
 800934c:	021b      	lsls	r3, r3, #8
 800934e:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	b29b      	uxth	r3, r3
 8009354:	b2db      	uxtb	r3, r3
 8009356:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8009358:	4413      	add	r3, r2
 800935a:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800935c:	8afb      	ldrh	r3, [r7, #22]
}
 800935e:	4618      	mov	r0, r3
 8009360:	371c      	adds	r7, #28
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr

0800936a <VL53LX_decode_timeout>:


uint32_t VL53LX_decode_timeout(uint16_t encoded_timeout)
{
 800936a:	b480      	push	{r7}
 800936c:	b085      	sub	sp, #20
 800936e:	af00      	add	r7, sp, #0
 8009370:	4603      	mov	r3, r0
 8009372:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 8009374:	2300      	movs	r3, #0
 8009376:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009378:	88fb      	ldrh	r3, [r7, #6]
 800937a:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800937c:	88fa      	ldrh	r2, [r7, #6]
 800937e:	0a12      	lsrs	r2, r2, #8
 8009380:	b292      	uxth	r2, r2
 8009382:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009384:	3301      	adds	r3, #1
 8009386:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8009388:	68fb      	ldr	r3, [r7, #12]
}
 800938a:	4618      	mov	r0, r3
 800938c:	3714      	adds	r7, #20
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr

08009396 <VL53LX_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53LX_general_config_t *pgeneral,
	VL53LX_timing_config_t  *ptiming)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b088      	sub	sp, #32
 800939a:	af00      	add	r7, sp, #0
 800939c:	60f8      	str	r0, [r7, #12]
 800939e:	60b9      	str	r1, [r7, #8]
 80093a0:	607a      	str	r2, [r7, #4]
 80093a2:	807b      	strh	r3, [r7, #2]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80093a4:	2300      	movs	r3, #0
 80093a6:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 80093a8:	2300      	movs	r3, #0
 80093aa:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 80093ac:	2300      	movs	r3, #0
 80093ae:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 80093b0:	2300      	movs	r3, #0
 80093b2:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 80093b4:	887b      	ldrh	r3, [r7, #2]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d102      	bne.n	80093c0 <VL53LX_calc_timeout_register_values+0x2a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80093ba:	23f1      	movs	r3, #241	; 0xf1
 80093bc:	77fb      	strb	r3, [r7, #31]
 80093be:	e05d      	b.n	800947c <VL53LX_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53LX_calc_macro_period_us(
 80093c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c2:	799a      	ldrb	r2, [r3, #6]
 80093c4:	887b      	ldrh	r3, [r7, #2]
 80093c6:	4611      	mov	r1, r2
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7ff fe5d 	bl	8009088 <VL53LX_calc_macro_period_us>
 80093ce:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53LX_calc_timeout_mclks(
 80093d0:	6979      	ldr	r1, [r7, #20]
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f7ff feea 	bl	80091ac <VL53LX_calc_timeout_mclks>
 80093d8:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	2bff      	cmp	r3, #255	; 0xff
 80093de:	d901      	bls.n	80093e4 <VL53LX_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 80093e0:	23ff      	movs	r3, #255	; 0xff
 80093e2:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 80093e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ea:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 80093ec:	6979      	ldr	r1, [r7, #20]
 80093ee:	68b8      	ldr	r0, [r7, #8]
 80093f0:	f7ff fef9 	bl	80091e6 <VL53LX_calc_encoded_timeout>
 80093f4:	4603      	mov	r3, r0
 80093f6:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80093f8:	8a7b      	ldrh	r3, [r7, #18]
 80093fa:	0a1b      	lsrs	r3, r3, #8
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 8009400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009402:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8009404:	8a7b      	ldrh	r3, [r7, #18]
 8009406:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 8009408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800940a:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 800940c:	6979      	ldr	r1, [r7, #20]
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f7ff fee9 	bl	80091e6 <VL53LX_calc_encoded_timeout>
 8009414:	4603      	mov	r3, r0
 8009416:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8009418:	8a7b      	ldrh	r3, [r7, #18]
 800941a:	0a1b      	lsrs	r3, r3, #8
 800941c:	b29b      	uxth	r3, r3
 800941e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 8009420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009422:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8009424:	8a7b      	ldrh	r3, [r7, #18]
 8009426:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 8009428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942a:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53LX_calc_macro_period_us(
 800942c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942e:	7a5a      	ldrb	r2, [r3, #9]
 8009430:	887b      	ldrh	r3, [r7, #2]
 8009432:	4611      	mov	r1, r2
 8009434:	4618      	mov	r0, r3
 8009436:	f7ff fe27 	bl	8009088 <VL53LX_calc_macro_period_us>
 800943a:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53LX_calc_encoded_timeout(
 800943c:	6979      	ldr	r1, [r7, #20]
 800943e:	68b8      	ldr	r0, [r7, #8]
 8009440:	f7ff fed1 	bl	80091e6 <VL53LX_calc_encoded_timeout>
 8009444:	4603      	mov	r3, r0
 8009446:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8009448:	8a7b      	ldrh	r3, [r7, #18]
 800944a:	0a1b      	lsrs	r3, r3, #8
 800944c:	b29b      	uxth	r3, r3
 800944e:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 8009450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009452:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8009454:	8a7b      	ldrh	r3, [r7, #18]
 8009456:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 8009458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800945a:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53LX_calc_encoded_timeout(
 800945c:	6979      	ldr	r1, [r7, #20]
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f7ff fec1 	bl	80091e6 <VL53LX_calc_encoded_timeout>
 8009464:	4603      	mov	r3, r0
 8009466:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8009468:	8a7b      	ldrh	r3, [r7, #18]
 800946a:	0a1b      	lsrs	r3, r3, #8
 800946c:	b29b      	uxth	r3, r3
 800946e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 8009470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009472:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8009474:	8a7b      	ldrh	r3, [r7, #18]
 8009476:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 8009478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800947a:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800947c:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8009480:	4618      	mov	r0, r3
 8009482:	3720      	adds	r7, #32
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <VL53LX_hist_copy_and_scale_ambient_info>:


VL53LX_Error  VL53LX_hist_copy_and_scale_ambient_info(
	VL53LX_zone_hist_info_t       *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 8009488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800948c:	b08b      	sub	sp, #44	; 0x2c
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
 8009492:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8009494:	2100      	movs	r1, #0
 8009496:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27

	int64_t  evts              = 0;
 800949a:	f04f 0000 	mov.w	r0, #0
 800949e:	f04f 0100 	mov.w	r1, #0
 80094a2:	e9c7 0106 	strd	r0, r1, [r7, #24]
	int64_t  tmpi              = 0;
 80094a6:	f04f 0000 	mov.w	r0, #0
 80094aa:	f04f 0100 	mov.w	r1, #0
 80094ae:	e9c7 0104 	strd	r0, r1, [r7, #16]
	int64_t  tmpo              = 0;
 80094b2:	f04f 0000 	mov.w	r0, #0
 80094b6:	f04f 0100 	mov.w	r1, #0
 80094ba:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 80094be:	6879      	ldr	r1, [r7, #4]
 80094c0:	8849      	ldrh	r1, [r1, #2]
 80094c2:	2900      	cmp	r1, #0
 80094c4:	d103      	bne.n	80094ce <VL53LX_hist_copy_and_scale_ambient_info+0x46>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80094c6:	23f1      	movs	r3, #241	; 0xf1
 80094c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80094cc:	e0a5      	b.n	800961a <VL53LX_hist_copy_and_scale_ambient_info+0x192>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 80094ce:	6879      	ldr	r1, [r7, #4]
 80094d0:	7849      	ldrb	r1, [r1, #1]
 80094d2:	2900      	cmp	r1, #0
 80094d4:	f000 80a1 	beq.w	800961a <VL53LX_hist_copy_and_scale_ambient_info+0x192>
			podata->number_of_ambient_bins == 0) {
 80094d8:	6839      	ldr	r1, [r7, #0]
 80094da:	7ac9      	ldrb	r1, [r1, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 80094dc:	2900      	cmp	r1, #0
 80094de:	f040 809c 	bne.w	800961a <VL53LX_hist_copy_and_scale_ambient_info+0x192>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 80094e2:	6839      	ldr	r1, [r7, #0]
 80094e4:	f8d1 1088 	ldr.w	r1, [r1, #136]	; 0x88
 80094e8:	4608      	mov	r0, r1
 80094ea:	f04f 0100 	mov.w	r1, #0
 80094ee:	f110 0a01 	adds.w	sl, r0, #1
 80094f2:	f141 0b00 	adc.w	fp, r1, #0
 80094f6:	e9c7 ab02 	strd	sl, fp, [r7, #8]
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 80094fa:	6839      	ldr	r1, [r7, #0]
 80094fc:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
 8009500:	b288      	uxth	r0, r1
 8009502:	f04f 0100 	mov.w	r1, #0
			tmpo   *=
 8009506:	68fe      	ldr	r6, [r7, #12]
 8009508:	fb00 fc06 	mul.w	ip, r0, r6
 800950c:	68be      	ldr	r6, [r7, #8]
 800950e:	fb01 f606 	mul.w	r6, r1, r6
 8009512:	44b4      	add	ip, r6
 8009514:	68be      	ldr	r6, [r7, #8]
 8009516:	fba6 0100 	umull	r0, r1, r6, r0
 800951a:	eb0c 0601 	add.w	r6, ip, r1
 800951e:	4631      	mov	r1, r6
 8009520:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8009524:	e9c7 0102 	strd	r0, r1, [r7, #8]

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 8009528:	6879      	ldr	r1, [r7, #4]
 800952a:	6889      	ldr	r1, [r1, #8]
 800952c:	4608      	mov	r0, r1
 800952e:	f04f 0100 	mov.w	r1, #0
 8009532:	1c44      	adds	r4, r0, #1
 8009534:	f141 0500 	adc.w	r5, r1, #0
 8009538:	e9c7 4504 	strd	r4, r5, [r7, #16]
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 800953c:	6879      	ldr	r1, [r7, #4]
 800953e:	8849      	ldrh	r1, [r1, #2]
 8009540:	b288      	uxth	r0, r1
 8009542:	f04f 0100 	mov.w	r1, #0
			tmpi   *=
 8009546:	697c      	ldr	r4, [r7, #20]
 8009548:	fb00 f504 	mul.w	r5, r0, r4
 800954c:	693c      	ldr	r4, [r7, #16]
 800954e:	fb01 f404 	mul.w	r4, r1, r4
 8009552:	442c      	add	r4, r5
 8009554:	693d      	ldr	r5, [r7, #16]
 8009556:	fba5 0100 	umull	r0, r1, r5, r0
 800955a:	440c      	add	r4, r1
 800955c:	4621      	mov	r1, r4
 800955e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8009562:	e9c7 0104 	strd	r0, r1, [r7, #16]

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 8009566:	6879      	ldr	r1, [r7, #4]
 8009568:	68c9      	ldr	r1, [r1, #12]
 800956a:	4608      	mov	r0, r1
 800956c:	ea4f 71e0 	mov.w	r1, r0, asr #31
			evts  = tmpo *
 8009570:	68fc      	ldr	r4, [r7, #12]
 8009572:	fb00 f504 	mul.w	r5, r0, r4
 8009576:	68bc      	ldr	r4, [r7, #8]
 8009578:	fb01 f404 	mul.w	r4, r1, r4
 800957c:	442c      	add	r4, r5
 800957e:	68bd      	ldr	r5, [r7, #8]
 8009580:	fba5 0100 	umull	r0, r1, r5, r0
 8009584:	440c      	add	r4, r1
 8009586:	4621      	mov	r1, r4
 8009588:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800958c:	e9c7 0106 	strd	r0, r1, [r7, #24]
			evts += (tmpi/2);
 8009590:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009594:	0fcc      	lsrs	r4, r1, #31
 8009596:	f04f 0500 	mov.w	r5, #0
 800959a:	1822      	adds	r2, r4, r0
 800959c:	eb45 0301 	adc.w	r3, r5, r1
 80095a0:	f04f 0000 	mov.w	r0, #0
 80095a4:	f04f 0100 	mov.w	r1, #0
 80095a8:	0850      	lsrs	r0, r2, #1
 80095aa:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 80095ae:	1059      	asrs	r1, r3, #1
 80095b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80095b4:	eb12 0800 	adds.w	r8, r2, r0
 80095b8:	eb43 0901 	adc.w	r9, r3, r1
 80095bc:	e9c7 8906 	strd	r8, r9, [r7, #24]


			if (tmpi != 0)
 80095c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80095c4:	4313      	orrs	r3, r2
 80095c6:	d009      	beq.n	80095dc <VL53LX_hist_copy_and_scale_ambient_info+0x154>
				evts = do_division_s(evts, tmpi);
 80095c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80095cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80095d0:	f7f7 fa4c 	bl	8000a6c <__aeabi_ldivmod>
 80095d4:	4602      	mov	r2, r0
 80095d6:	460b      	mov	r3, r1
 80095d8:	e9c7 2306 	strd	r2, r3, [r7, #24]

			podata->ambient_events_sum = (int32_t)evts;
 80095dc:	69ba      	ldr	r2, [r7, #24]
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0



			podata->VL53LX_p_028 =
				podata->ambient_events_sum;
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			podata->VL53LX_p_028 =
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53LX_p_028 +=
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	7852      	ldrb	r2, [r2, #1]
 80095fa:	0852      	lsrs	r2, r2, #1
 80095fc:	b2d2      	uxtb	r2, r2
			podata->VL53LX_p_028 +=
 80095fe:	441a      	add	r2, r3
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53LX_p_028 /=
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	7852      	ldrb	r2, [r2, #1]
			podata->VL53LX_p_028 /=
 8009610:	fb93 f2f2 	sdiv	r2, r3, r2
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 800961a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800961e:	4618      	mov	r0, r3
 8009620:	372c      	adds	r7, #44	; 0x2c
 8009622:	46bd      	mov	sp, r7
 8009624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009628 <VL53LX_hist_get_bin_sequence_config>:


void  VL53LX_hist_get_bin_sequence_config(
	VL53LX_DEV                     Dev,
	VL53LX_histogram_bin_data_t   *pdata)
{
 8009628:	b480      	push	{r7}
 800962a:	b087      	sub	sp, #28
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	3318      	adds	r3, #24
 8009636:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 8009638:	2300      	movs	r3, #0
 800963a:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 800963c:	2300      	movs	r3, #0
 800963e:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 8009640:	2300      	movs	r3, #0
 8009642:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	f8b3 32fa 	ldrh.w	r3, [r3, #762]	; 0x2fa
	amb_thresh_low  = 1024 *
 800964a:	029b      	lsls	r3, r3, #10
 800964c:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
	amb_thresh_high = 1024 *
 8009654:	029b      	lsls	r3, r3, #10
 8009656:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800965e:	f003 0301 	and.w	r3, r3, #1
 8009662:	2b00      	cmp	r3, #0
 8009664:	f040 8095 	bne.w	8009792 <VL53LX_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	f893 32ed 	ldrb.w	r3, [r3, #749]	; 0x2ed
		pdata->bin_seq[5] =
 800966e:	091b      	lsrs	r3, r3, #4
 8009670:	b2da      	uxtb	r2, r3
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	f893 32ed 	ldrb.w	r3, [r3, #749]	; 0x2ed
 800967c:	f003 030f 	and.w	r3, r3, #15
 8009680:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	f893 32ec 	ldrb.w	r3, [r3, #748]	; 0x2ec
		pdata->bin_seq[3] =
 800968c:	091b      	lsrs	r3, r3, #4
 800968e:	b2da      	uxtb	r2, r3
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	f893 32ec 	ldrb.w	r3, [r3, #748]	; 0x2ec
 800969a:	f003 030f 	and.w	r3, r3, #15
 800969e:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	f893 32eb 	ldrb.w	r3, [r3, #747]	; 0x2eb
		pdata->bin_seq[1] =
 80096aa:	091b      	lsrs	r3, r3, #4
 80096ac:	b2da      	uxtb	r2, r3
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	f893 32eb 	ldrb.w	r3, [r3, #747]	; 0x2eb
 80096b8:	f003 030f 	and.w	r3, r3, #15
 80096bc:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80096c8:	68ba      	ldr	r2, [r7, #8]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	da2c      	bge.n	8009728 <VL53LX_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	f893 32f5 	ldrb.w	r3, [r3, #757]	; 0x2f5
			pdata->bin_seq[5] =
 80096d4:	091b      	lsrs	r3, r3, #4
 80096d6:	b2da      	uxtb	r2, r3
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	f893 32f5 	ldrb.w	r3, [r3, #757]	; 0x2f5
			& 0x0F;
 80096e2:	f003 030f 	and.w	r3, r3, #15
 80096e6:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
			pdata->bin_seq[3] =
 80096f2:	091b      	lsrs	r3, r3, #4
 80096f4:	b2da      	uxtb	r2, r3
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
			& 0x0F;
 8009700:	f003 030f 	and.w	r3, r3, #15
 8009704:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	f893 32f3 	ldrb.w	r3, [r3, #755]	; 0x2f3
			pdata->bin_seq[1] =
 8009710:	091b      	lsrs	r3, r3, #4
 8009712:	b2da      	uxtb	r2, r3
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	f893 32f3 	ldrb.w	r3, [r3, #755]	; 0x2f3
			& 0x0F;
 800971e:	f003 030f 	and.w	r3, r3, #15
 8009722:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800972e:	68fa      	ldr	r2, [r7, #12]
 8009730:	429a      	cmp	r2, r3
 8009732:	f340 80c2 	ble.w	80098ba <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	f893 32e7 	ldrb.w	r3, [r3, #743]	; 0x2e7
			pdata->bin_seq[5] =
 800973c:	091b      	lsrs	r3, r3, #4
 800973e:	b2da      	uxtb	r2, r3
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	f893 32e7 	ldrb.w	r3, [r3, #743]	; 0x2e7
			& 0x0F;
 800974a:	f003 030f 	and.w	r3, r3, #15
 800974e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
			pdata->bin_seq[3] =
 800975a:	091b      	lsrs	r3, r3, #4
 800975c:	b2da      	uxtb	r2, r3
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
			& 0x0F;
 8009768:	f003 030f 	and.w	r3, r3, #15
 800976c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
			pdata->bin_seq[1] =
 8009778:	091b      	lsrs	r3, r3, #4
 800977a:	b2da      	uxtb	r2, r3
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
			& 0x0F;
 8009786:	f003 030f 	and.w	r3, r3, #15
 800978a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	731a      	strb	r2, [r3, #12]
 8009790:	e093      	b.n	80098ba <VL53LX_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	f893 32f1 	ldrb.w	r3, [r3, #753]	; 0x2f1
			& 0x0F;
 8009798:	f003 030f 	and.w	r3, r3, #15
 800979c:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
			& 0x0F;
 80097a8:	f003 030f 	and.w	r3, r3, #15
 80097ac:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
		pdata->bin_seq[3] =
 80097b8:	091b      	lsrs	r3, r3, #4
 80097ba:	b2da      	uxtb	r2, r3
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	f893 32ef 	ldrb.w	r3, [r3, #751]	; 0x2ef
 80097c6:	f003 030f 	and.w	r3, r3, #15
 80097ca:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	f893 32ee 	ldrb.w	r3, [r3, #750]	; 0x2ee
		pdata->bin_seq[1] =
 80097d6:	091b      	lsrs	r3, r3, #4
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	f893 32ee 	ldrb.w	r3, [r3, #750]	; 0x2ee
			& 0x0F;
 80097e4:	f003 030f 	and.w	r3, r3, #15
 80097e8:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80097f4:	68ba      	ldr	r2, [r7, #8]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	da2c      	bge.n	8009854 <VL53LX_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
			pdata->bin_seq[5] =
 8009800:	091b      	lsrs	r3, r3, #4
 8009802:	b2da      	uxtb	r2, r3
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
			& 0x0F;
 800980e:	f003 030f 	and.w	r3, r3, #15
 8009812:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	f893 32f7 	ldrb.w	r3, [r3, #759]	; 0x2f7
			pdata->bin_seq[3] =
 800981e:	091b      	lsrs	r3, r3, #4
 8009820:	b2da      	uxtb	r2, r3
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	f893 32f7 	ldrb.w	r3, [r3, #759]	; 0x2f7
			& 0x0F;
 800982c:	f003 030f 	and.w	r3, r3, #15
 8009830:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	f893 32f6 	ldrb.w	r3, [r3, #758]	; 0x2f6
			pdata->bin_seq[1] =
 800983c:	091b      	lsrs	r3, r3, #4
 800983e:	b2da      	uxtb	r2, r3
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	f893 32f6 	ldrb.w	r3, [r3, #758]	; 0x2f6
			& 0x0F;
 800984a:	f003 030f 	and.w	r3, r3, #15
 800984e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800985a:	68fa      	ldr	r2, [r7, #12]
 800985c:	429a      	cmp	r2, r3
 800985e:	dd2c      	ble.n	80098ba <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	f893 32ea 	ldrb.w	r3, [r3, #746]	; 0x2ea
			pdata->bin_seq[5] =
 8009866:	091b      	lsrs	r3, r3, #4
 8009868:	b2da      	uxtb	r2, r3
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	f893 32ea 	ldrb.w	r3, [r3, #746]	; 0x2ea
			& 0x0F;
 8009874:	f003 030f 	and.w	r3, r3, #15
 8009878:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	f893 32e9 	ldrb.w	r3, [r3, #745]	; 0x2e9
			pdata->bin_seq[3] =
 8009884:	091b      	lsrs	r3, r3, #4
 8009886:	b2da      	uxtb	r2, r3
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	f893 32e9 	ldrb.w	r3, [r3, #745]	; 0x2e9
			& 0x0F;
 8009892:	f003 030f 	and.w	r3, r3, #15
 8009896:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
			pdata->bin_seq[1] =
 80098a2:	091b      	lsrs	r3, r3, #4
 80098a4:	b2da      	uxtb	r2, r3
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
			& 0x0F;
 80098b0:	f003 030f 	and.w	r3, r3, #15
 80098b4:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 80098ba:	2300      	movs	r3, #0
 80098bc:	75fb      	strb	r3, [r7, #23]
 80098be:	e007      	b.n	80098d0 <VL53LX_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 80098c0:	7dfb      	ldrb	r3, [r7, #23]
 80098c2:	683a      	ldr	r2, [r7, #0]
 80098c4:	4413      	add	r3, r2
 80098c6:	2201      	movs	r2, #1
 80098c8:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 80098ca:	7dfb      	ldrb	r3, [r7, #23]
 80098cc:	3301      	adds	r3, #1
 80098ce:	75fb      	strb	r3, [r7, #23]
 80098d0:	7dfb      	ldrb	r3, [r7, #23]
 80098d2:	2b05      	cmp	r3, #5
 80098d4:	d9f4      	bls.n	80098c0 <VL53LX_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 80098d6:	bf00      	nop
 80098d8:	bf00      	nop
 80098da:	371c      	adds	r7, #28
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <VL53LX_hist_phase_consistency_check>:
VL53LX_Error  VL53LX_hist_phase_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_results_t      *prange_curr)
{
 80098e4:	b590      	push	{r4, r7, lr}
 80098e6:	b093      	sub	sp, #76	; 0x4c
 80098e8:	af04      	add	r7, sp, #16
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
 80098f0:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80098f2:	2300      	movs	r3, #0
 80098f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53LX_LLDriverData_t *pdev =
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	3318      	adds	r3, #24
 80098fc:	62fb      	str	r3, [r7, #44]	; 0x2c
		VL53LXDevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 80098fe:	2300      	movs	r3, #0
 8009900:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t   p = 0;
 8009904:	2300      	movs	r3, #0
 8009906:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint16_t  phase_delta      = 0;
 800990a:	2300      	movs	r3, #0
 800990c:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t  phase_tolerance  = 0;
 800990e:	2300      	movs	r3, #0
 8009910:	857b      	strh	r3, [r7, #42]	; 0x2a

	int32_t   events_delta     = 0;
 8009912:	2300      	movs	r3, #0
 8009914:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 8009916:	2300      	movs	r3, #0
 8009918:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53LX_DeviceError  range_status = 0;
 800991a:	2300      	movs	r3, #0
 800991c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 800991e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009920:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8009924:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 8009928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800992a:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 800992e:	84fb      	strh	r3, [r7, #38]	; 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 8009930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009932:	f8b3 323a 	ldrh.w	r3, [r3, #570]	; 0x23a
 8009936:	84bb      	strh	r3, [r7, #36]	; 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 8009938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993a:	f893 3236 	ldrb.w	r3, [r3, #566]	; 0x236
 800993e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	phase_tolerance = (uint16_t)pht;
 8009942:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009946:	857b      	strh	r3, [r7, #42]	; 0x2a
	phase_tolerance = phase_tolerance << 8;
 8009948:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800994a:	021b      	lsls	r3, r3, #8
 800994c:	857b      	strh	r3, [r7, #42]	; 0x2a



	if (prange_prev->rd_device_state !=
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	785b      	ldrb	r3, [r3, #1]
 8009952:	2b07      	cmp	r3, #7
 8009954:	d006      	beq.n	8009964 <VL53LX_hist_phase_consistency_check+0x80>
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	785b      	ldrb	r3, [r3, #1]
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
 800995a:	2b08      	cmp	r3, #8
 800995c:	d002      	beq.n	8009964 <VL53LX_hist_phase_consistency_check+0x80>
				VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 800995e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009962:	e0ec      	b.n	8009b3e <VL53LX_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 8009964:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009966:	2b00      	cmp	r3, #0
 8009968:	d102      	bne.n	8009970 <VL53LX_hist_phase_consistency_check+0x8c>
		return status;
 800996a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800996e:	e0e6      	b.n	8009b3e <VL53LX_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 8009970:	2300      	movs	r3, #0
 8009972:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8009976:	e0d9      	b.n	8009b2c <VL53LX_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8009978:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800997c:	683a      	ldr	r2, [r7, #0]
 800997e:	214c      	movs	r1, #76	; 0x4c
 8009980:	fb01 f303 	mul.w	r3, r1, r3
 8009984:	4413      	add	r3, r2
 8009986:	335e      	adds	r3, #94	; 0x5e
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	2b09      	cmp	r3, #9
 800998c:	d00b      	beq.n	80099a6 <VL53LX_hist_phase_consistency_check+0xc2>
			VL53LX_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53LX_p_003[lc].range_status ==
 800998e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009992:	683a      	ldr	r2, [r7, #0]
 8009994:	214c      	movs	r1, #76	; 0x4c
 8009996:	fb01 f303 	mul.w	r3, r1, r3
 800999a:	4413      	add	r3, r2
 800999c:	335e      	adds	r3, #94	; 0x5e
 800999e:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 80099a0:	2b13      	cmp	r3, #19
 80099a2:	f040 80bd 	bne.w	8009b20 <VL53LX_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	795b      	ldrb	r3, [r3, #5]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d10a      	bne.n	80099c4 <VL53LX_hist_phase_consistency_check+0xe0>
			prange_curr->VL53LX_p_003[lc].range_status =
 80099ae:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80099b2:	683a      	ldr	r2, [r7, #0]
 80099b4:	214c      	movs	r1, #76	; 0x4c
 80099b6:	fb01 f303 	mul.w	r3, r1, r3
 80099ba:	4413      	add	r3, r2
 80099bc:	335e      	adds	r3, #94	; 0x5e
 80099be:	2217      	movs	r2, #23
 80099c0:	701a      	strb	r2, [r3, #0]
 80099c2:	e009      	b.n	80099d8 <VL53LX_hist_phase_consistency_check+0xf4>
			VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53LX_p_003[lc].range_status =
 80099c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80099c8:	683a      	ldr	r2, [r7, #0]
 80099ca:	214c      	movs	r1, #76	; 0x4c
 80099cc:	fb01 f303 	mul.w	r3, r1, r3
 80099d0:	4413      	add	r3, r2
 80099d2:	335e      	adds	r3, #94	; 0x5e
 80099d4:	2207      	movs	r2, #7
 80099d6:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 80099d8:	2300      	movs	r3, #0
 80099da:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80099de:	e097      	b.n	8009b10 <VL53LX_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 80099e0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80099e4:	683a      	ldr	r2, [r7, #0]
 80099e6:	214c      	movs	r1, #76	; 0x4c
 80099e8:	fb01 f303 	mul.w	r3, r1, r3
 80099ec:	4413      	add	r3, r2
 80099ee:	3354      	adds	r3, #84	; 0x54
 80099f0:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011) {
 80099f2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	4613      	mov	r3, r2
 80099fa:	005b      	lsls	r3, r3, #1
 80099fc:	4413      	add	r3, r2
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	4403      	add	r3, r0
 8009a02:	3310      	adds	r3, #16
 8009a04:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 8009a06:	4299      	cmp	r1, r3
 8009a08:	d915      	bls.n	8009a36 <VL53LX_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011 -
 8009a0a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009a0e:	683a      	ldr	r2, [r7, #0]
 8009a10:	214c      	movs	r1, #76	; 0x4c
 8009a12:	fb01 f303 	mul.w	r3, r1, r3
 8009a16:	4413      	add	r3, r2
 8009a18:	3354      	adds	r3, #84	; 0x54
 8009a1a:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011;
 8009a1c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	4613      	mov	r3, r2
 8009a24:	005b      	lsls	r3, r3, #1
 8009a26:	4413      	add	r3, r2
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	4403      	add	r3, r0
 8009a2c:	3310      	adds	r3, #16
 8009a2e:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 8009a30:	1acb      	subs	r3, r1, r3
 8009a32:	867b      	strh	r3, [r7, #50]	; 0x32
 8009a34:	e014      	b.n	8009a60 <VL53LX_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53LX_p_003[p].VL53LX_p_011 -
 8009a36:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8009a3a:	6879      	ldr	r1, [r7, #4]
 8009a3c:	4613      	mov	r3, r2
 8009a3e:	005b      	lsls	r3, r3, #1
 8009a40:	4413      	add	r3, r2
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	440b      	add	r3, r1
 8009a46:	3310      	adds	r3, #16
 8009a48:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011;
 8009a4a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009a4e:	6839      	ldr	r1, [r7, #0]
 8009a50:	204c      	movs	r0, #76	; 0x4c
 8009a52:	fb00 f303 	mul.w	r3, r0, r3
 8009a56:	440b      	add	r3, r1
 8009a58:	3354      	adds	r3, #84	; 0x54
 8009a5a:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 8009a5c:	1ad3      	subs	r3, r2, r3
 8009a5e:	867b      	strh	r3, [r7, #50]	; 0x32
			}

			if (phase_delta < phase_tolerance) {
 8009a60:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8009a62:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d24e      	bcs.n	8009b06 <VL53LX_hist_phase_consistency_check+0x222>





				if (status == VL53LX_ERROR_NONE)
 8009a68:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d125      	bne.n	8009abc <VL53LX_hist_phase_consistency_check+0x1d8>
					status =
					VL53LX_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53LX_p_003[p]),
 8009a70:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					VL53LX_hist_events_consistency_check(
 8009a74:	4613      	mov	r3, r2
 8009a76:	005b      	lsls	r3, r3, #1
 8009a78:	4413      	add	r3, r2
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	3308      	adds	r3, #8
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53LX_p_003[lc]),
 8009a82:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53LX_hist_events_consistency_check(
 8009a86:	224c      	movs	r2, #76	; 0x4c
 8009a88:	fb02 f303 	mul.w	r3, r2, r3
 8009a8c:	3310      	adds	r3, #16
 8009a8e:	683a      	ldr	r2, [r7, #0]
 8009a90:	4413      	add	r3, r2
 8009a92:	3304      	adds	r3, #4
 8009a94:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8009a96:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 8009a9a:	f107 0217 	add.w	r2, r7, #23
 8009a9e:	9203      	str	r2, [sp, #12]
 8009aa0:	f107 021c 	add.w	r2, r7, #28
 8009aa4:	9202      	str	r2, [sp, #8]
 8009aa6:	f107 0218 	add.w	r2, r7, #24
 8009aaa:	9201      	str	r2, [sp, #4]
 8009aac:	9300      	str	r3, [sp, #0]
 8009aae:	4623      	mov	r3, r4
 8009ab0:	68ba      	ldr	r2, [r7, #8]
 8009ab2:	f000 f848 	bl	8009b46 <VL53LX_hist_events_consistency_check>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);




				if (status == VL53LX_ERROR_NONE &&
 8009abc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d115      	bne.n	8009af0 <VL53LX_hist_phase_consistency_check+0x20c>
					range_status ==
 8009ac4:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53LX_ERROR_NONE &&
 8009ac6:	2b09      	cmp	r3, #9
 8009ac8:	d112      	bne.n	8009af0 <VL53LX_hist_phase_consistency_check+0x20c>
					VL53LX_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53LX_hist_merged_pulse_check(
 8009aca:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
					min_max_tolerance,
					&(prange_curr->VL53LX_p_003[lc]),
 8009ace:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53LX_hist_merged_pulse_check(
 8009ad2:	224c      	movs	r2, #76	; 0x4c
 8009ad4:	fb02 f303 	mul.w	r3, r2, r3
 8009ad8:	3310      	adds	r3, #16
 8009ada:	683a      	ldr	r2, [r7, #0]
 8009adc:	4413      	add	r3, r2
 8009ade:	3304      	adds	r3, #4
 8009ae0:	f107 0217 	add.w	r2, r7, #23
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	f000 faaf 	bl	800a048 <VL53LX_hist_merged_pulse_check>
 8009aea:	4603      	mov	r3, r0
 8009aec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);

				prange_curr->VL53LX_p_003[lc].range_status =
 8009af0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009af4:	7df8      	ldrb	r0, [r7, #23]
 8009af6:	683a      	ldr	r2, [r7, #0]
 8009af8:	214c      	movs	r1, #76	; 0x4c
 8009afa:	fb01 f303 	mul.w	r3, r1, r3
 8009afe:	4413      	add	r3, r2
 8009b00:	335e      	adds	r3, #94	; 0x5e
 8009b02:	4602      	mov	r2, r0
 8009b04:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 8009b06:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	795b      	ldrb	r3, [r3, #5]
 8009b14:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	f4ff af61 	bcc.w	80099e0 <VL53LX_hist_phase_consistency_check+0xfc>
 8009b1e:	e000      	b.n	8009b22 <VL53LX_hist_phase_consistency_check+0x23e>
			continue;
 8009b20:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 8009b22:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009b26:	3301      	adds	r3, #1
 8009b28:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	7c9b      	ldrb	r3, [r3, #18]
 8009b30:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8009b34:	429a      	cmp	r2, r3
 8009b36:	f4ff af1f 	bcc.w	8009978 <VL53LX_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 8009b3a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	373c      	adds	r7, #60	; 0x3c
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd90      	pop	{r4, r7, pc}

08009b46 <VL53LX_hist_events_consistency_check>:
	VL53LX_object_data_t        *prange_prev,
	VL53LX_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53LX_DeviceError          *prange_status)
{
 8009b46:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b4a:	b0a8      	sub	sp, #160	; 0xa0
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009b50:	647b      	str	r3, [r7, #68]	; 0x44
 8009b52:	4603      	mov	r3, r0
 8009b54:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009b58:	460b      	mov	r3, r1
 8009b5a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

	int64_t   tmpp                   = 0;
 8009b64:	f04f 0200 	mov.w	r2, #0
 8009b68:	f04f 0300 	mov.w	r3, #0
 8009b6c:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	int64_t   tmpc                   = 0;
 8009b70:	f04f 0200 	mov.w	r2, #0
 8009b74:	f04f 0300 	mov.w	r3, #0
 8009b78:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	int64_t   events_scaler          = 0;
 8009b7c:	f04f 0200 	mov.w	r2, #0
 8009b80:	f04f 0300 	mov.w	r3, #0
 8009b84:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	int64_t   events_scaler_sq       = 0;
 8009b88:	f04f 0200 	mov.w	r2, #0
 8009b8c:	f04f 0300 	mov.w	r3, #0
 8009b90:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	int64_t   c_signal_events        = 0;
 8009b94:	f04f 0200 	mov.w	r2, #0
 8009b98:	f04f 0300 	mov.w	r3, #0
 8009b9c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	int64_t   c_sig_noise_sq         = 0;
 8009ba0:	f04f 0200 	mov.w	r2, #0
 8009ba4:	f04f 0300 	mov.w	r3, #0
 8009ba8:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int64_t   c_amb_noise_sq         = 0;
 8009bac:	f04f 0200 	mov.w	r2, #0
 8009bb0:	f04f 0300 	mov.w	r3, #0
 8009bb4:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t   p_amb_noise_sq         = 0;
 8009bb8:	f04f 0200 	mov.w	r2, #0
 8009bbc:	f04f 0300 	mov.w	r3, #0
 8009bc0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	int32_t   p_signal_events        = 0;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t  noise_sq_sum           = 0;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	653b      	str	r3, [r7, #80]	; 0x50



	if (event_sigma == 0) {
 8009bcc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d106      	bne.n	8009be2 <VL53LX_hist_events_consistency_check+0x9c>
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 8009bd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009bd8:	2209      	movs	r2, #9
 8009bda:	701a      	strb	r2, [r3, #0]
		return status;
 8009bdc:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 8009be0:	e22d      	b.n	800a03e <VL53LX_hist_events_consistency_check+0x4f8>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 8009be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	461a      	mov	r2, r3
 8009be8:	f04f 0300 	mov.w	r3, #0
 8009bec:	f112 0801 	adds.w	r8, r2, #1
 8009bf0:	f143 0900 	adc.w	r9, r3, #0
 8009bf4:	e9c7 8922 	strd	r8, r9, [r7, #136]	; 0x88
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 8009bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bfa:	885b      	ldrh	r3, [r3, #2]
 8009bfc:	b29a      	uxth	r2, r3
 8009bfe:	f04f 0300 	mov.w	r3, #0
 8009c02:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8009c06:	fb02 f001 	mul.w	r0, r2, r1
 8009c0a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8009c0e:	fb03 f101 	mul.w	r1, r3, r1
 8009c12:	4408      	add	r0, r1
 8009c14:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8009c18:	fba1 2302 	umull	r2, r3, r1, r2
 8009c1c:	18c1      	adds	r1, r0, r3
 8009c1e:	460b      	mov	r3, r1
 8009c20:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 8009c24:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 8009c28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009c2c:	699b      	ldr	r3, [r3, #24]
 8009c2e:	461a      	mov	r2, r3
 8009c30:	f04f 0300 	mov.w	r3, #0
 8009c34:	f112 0a01 	adds.w	sl, r2, #1
 8009c38:	f143 0b00 	adc.w	fp, r3, #0
 8009c3c:	e9c7 ab20 	strd	sl, fp, [r7, #128]	; 0x80
	tmpc *= (int64_t)prange_curr->VL53LX_p_004;
 8009c40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009c44:	8adb      	ldrh	r3, [r3, #22]
 8009c46:	b29a      	uxth	r2, r3
 8009c48:	f04f 0300 	mov.w	r3, #0
 8009c4c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8009c50:	fb02 f001 	mul.w	r0, r2, r1
 8009c54:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009c58:	fb03 f101 	mul.w	r1, r3, r1
 8009c5c:	4408      	add	r0, r1
 8009c5e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009c62:	fba1 2302 	umull	r2, r3, r1, r2
 8009c66:	18c1      	adds	r1, r0, r3
 8009c68:	460b      	mov	r3, r1
 8009c6a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8009c6e:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80



	events_scaler  = tmpp * 4096;
 8009c72:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009c76:	f04f 0000 	mov.w	r0, #0
 8009c7a:	f04f 0100 	mov.w	r1, #0
 8009c7e:	0319      	lsls	r1, r3, #12
 8009c80:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 8009c84:	0310      	lsls	r0, r2, #12
 8009c86:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
	if (tmpc != 0) {
 8009c8a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	d026      	beq.n	8009ce0 <VL53LX_hist_events_consistency_check+0x19a>
		events_scaler += (tmpc/2);
 8009c92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009c96:	0fcb      	lsrs	r3, r1, #31
 8009c98:	461a      	mov	r2, r3
 8009c9a:	f04f 0300 	mov.w	r3, #0
 8009c9e:	1814      	adds	r4, r2, r0
 8009ca0:	eb43 0501 	adc.w	r5, r3, r1
 8009ca4:	f04f 0200 	mov.w	r2, #0
 8009ca8:	f04f 0300 	mov.w	r3, #0
 8009cac:	0862      	lsrs	r2, r4, #1
 8009cae:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8009cb2:	106b      	asrs	r3, r5, #1
 8009cb4:	4610      	mov	r0, r2
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009cbc:	1814      	adds	r4, r2, r0
 8009cbe:	63bc      	str	r4, [r7, #56]	; 0x38
 8009cc0:	414b      	adcs	r3, r1
 8009cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cc4:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8009cc8:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		events_scaler  = do_division_s(events_scaler, tmpc);
 8009ccc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009cd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009cd4:	f7f6 feca 	bl	8000a6c <__aeabi_ldivmod>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	460b      	mov	r3, r1
 8009cdc:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	}

	events_scaler_sq  = events_scaler * events_scaler;
 8009ce0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009ce4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ce8:	fb03 f102 	mul.w	r1, r3, r2
 8009cec:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009cf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009cf4:	fb03 f302 	mul.w	r3, r3, r2
 8009cf8:	4419      	add	r1, r3
 8009cfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009cfe:	fba3 2303 	umull	r2, r3, r3, r3
 8009d02:	4419      	add	r1, r3
 8009d04:	460b      	mov	r3, r1
 8009d06:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 8009d0a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	events_scaler_sq += 2048;
 8009d0e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009d12:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8009d16:	6339      	str	r1, [r7, #48]	; 0x30
 8009d18:	f143 0300 	adc.w	r3, r3, #0
 8009d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8009d1e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8009d22:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	events_scaler_sq /= 4096;
 8009d26:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009d2a:	4610      	mov	r0, r2
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	f171 0300 	sbcs.w	r3, r1, #0
 8009d34:	da06      	bge.n	8009d44 <VL53LX_hist_events_consistency_check+0x1fe>
 8009d36:	f640 72ff 	movw	r2, #4095	; 0xfff
 8009d3a:	f04f 0300 	mov.w	r3, #0
 8009d3e:	1880      	adds	r0, r0, r2
 8009d40:	eb43 0101 	adc.w	r1, r3, r1
 8009d44:	f04f 0200 	mov.w	r2, #0
 8009d48:	f04f 0300 	mov.w	r3, #0
 8009d4c:	0b02      	lsrs	r2, r0, #12
 8009d4e:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8009d52:	130b      	asrs	r3, r1, #12
 8009d54:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78



	c_signal_events  = (int64_t)prange_curr->VL53LX_p_017;
 8009d58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d5e:	461a      	mov	r2, r3
 8009d60:	f04f 0300 	mov.w	r3, #0
 8009d64:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	c_signal_events -= (int64_t)prange_curr->VL53LX_p_016;
 8009d68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f04f 0100 	mov.w	r1, #0
 8009d74:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009d78:	1a14      	subs	r4, r2, r0
 8009d7a:	62bc      	str	r4, [r7, #40]	; 0x28
 8009d7c:	eb63 0301 	sbc.w	r3, r3, r1
 8009d80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d82:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8009d86:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	c_signal_events *= (int64_t)events_scaler;
 8009d8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d8c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009d90:	fb02 f203 	mul.w	r2, r2, r3
 8009d94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009d98:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009d9a:	fb01 f303 	mul.w	r3, r1, r3
 8009d9e:	18d1      	adds	r1, r2, r3
 8009da0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009da2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009da6:	fba2 2303 	umull	r2, r3, r2, r3
 8009daa:	4419      	add	r1, r3
 8009dac:	460b      	mov	r3, r1
 8009dae:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8009db2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	c_signal_events += 2048;
 8009db6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009dba:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8009dbe:	6239      	str	r1, [r7, #32]
 8009dc0:	f143 0300 	adc.w	r3, r3, #0
 8009dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8009dc6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8009dca:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	c_signal_events /= 4096;
 8009dce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009dd2:	2a00      	cmp	r2, #0
 8009dd4:	f173 0100 	sbcs.w	r1, r3, #0
 8009dd8:	da06      	bge.n	8009de8 <VL53LX_hist_events_consistency_check+0x2a2>
 8009dda:	f640 70ff 	movw	r0, #4095	; 0xfff
 8009dde:	f04f 0100 	mov.w	r1, #0
 8009de2:	1812      	adds	r2, r2, r0
 8009de4:	eb41 0303 	adc.w	r3, r1, r3
 8009de8:	f04f 0000 	mov.w	r0, #0
 8009dec:	f04f 0100 	mov.w	r1, #0
 8009df0:	0b10      	lsrs	r0, r2, #12
 8009df2:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8009df6:	1319      	asrs	r1, r3, #12
 8009df8:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 8009dfc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009e00:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	c_sig_noise_sq *= (int64_t)prange_curr->VL53LX_p_017;
 8009e04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	f04f 0300 	mov.w	r3, #0
 8009e10:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009e12:	fb02 f001 	mul.w	r0, r2, r1
 8009e16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009e18:	fb03 f101 	mul.w	r1, r3, r1
 8009e1c:	4401      	add	r1, r0
 8009e1e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8009e20:	fba0 2302 	umull	r2, r3, r0, r2
 8009e24:	4419      	add	r1, r3
 8009e26:	460b      	mov	r3, r1
 8009e28:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8009e2c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	c_sig_noise_sq += 2048;
 8009e30:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009e34:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8009e38:	61b9      	str	r1, [r7, #24]
 8009e3a:	f143 0300 	adc.w	r3, r3, #0
 8009e3e:	61fb      	str	r3, [r7, #28]
 8009e40:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009e44:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	c_sig_noise_sq /= 4096;
 8009e48:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009e4c:	2a00      	cmp	r2, #0
 8009e4e:	f173 0100 	sbcs.w	r1, r3, #0
 8009e52:	da06      	bge.n	8009e62 <VL53LX_hist_events_consistency_check+0x31c>
 8009e54:	f640 70ff 	movw	r0, #4095	; 0xfff
 8009e58:	f04f 0100 	mov.w	r1, #0
 8009e5c:	1812      	adds	r2, r2, r0
 8009e5e:	eb41 0303 	adc.w	r3, r1, r3
 8009e62:	f04f 0000 	mov.w	r0, #0
 8009e66:	f04f 0100 	mov.w	r1, #0
 8009e6a:	0b10      	lsrs	r0, r2, #12
 8009e6c:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8009e70:	1319      	asrs	r1, r3, #12
 8009e72:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 8009e76:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009e7a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	c_amb_noise_sq *= (int64_t)prange_curr->VL53LX_p_016;
 8009e7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e84:	461a      	mov	r2, r3
 8009e86:	f04f 0300 	mov.w	r3, #0
 8009e8a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009e8c:	fb02 f001 	mul.w	r0, r2, r1
 8009e90:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009e92:	fb03 f101 	mul.w	r1, r3, r1
 8009e96:	4401      	add	r1, r0
 8009e98:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8009e9a:	fba0 2302 	umull	r2, r3, r0, r2
 8009e9e:	4419      	add	r1, r3
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8009ea6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	c_amb_noise_sq += 2048;
 8009eaa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009eae:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8009eb2:	6139      	str	r1, [r7, #16]
 8009eb4:	f143 0300 	adc.w	r3, r3, #0
 8009eb8:	617b      	str	r3, [r7, #20]
 8009eba:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009ebe:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	c_amb_noise_sq /= 4096;
 8009ec2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009ec6:	2a00      	cmp	r2, #0
 8009ec8:	f173 0100 	sbcs.w	r1, r3, #0
 8009ecc:	da06      	bge.n	8009edc <VL53LX_hist_events_consistency_check+0x396>
 8009ece:	f640 70ff 	movw	r0, #4095	; 0xfff
 8009ed2:	f04f 0100 	mov.w	r1, #0
 8009ed6:	1812      	adds	r2, r2, r0
 8009ed8:	eb41 0303 	adc.w	r3, r1, r3
 8009edc:	f04f 0000 	mov.w	r0, #0
 8009ee0:	f04f 0100 	mov.w	r1, #0
 8009ee4:	0b10      	lsrs	r0, r2, #12
 8009ee6:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8009eea:	1319      	asrs	r1, r3, #12
 8009eec:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60


	c_amb_noise_sq += 2;
 8009ef0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009ef4:	1c91      	adds	r1, r2, #2
 8009ef6:	60b9      	str	r1, [r7, #8]
 8009ef8:	f143 0300 	adc.w	r3, r3, #0
 8009efc:	60fb      	str	r3, [r7, #12]
 8009efe:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009f02:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	c_amb_noise_sq /= 4;
 8009f06:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009f0a:	2a00      	cmp	r2, #0
 8009f0c:	f173 0100 	sbcs.w	r1, r3, #0
 8009f10:	da02      	bge.n	8009f18 <VL53LX_hist_events_consistency_check+0x3d2>
 8009f12:	3203      	adds	r2, #3
 8009f14:	f143 0300 	adc.w	r3, r3, #0
 8009f18:	f04f 0000 	mov.w	r0, #0
 8009f1c:	f04f 0100 	mov.w	r1, #0
 8009f20:	0890      	lsrs	r0, r2, #2
 8009f22:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8009f26:	1099      	asrs	r1, r3, #2
 8009f28:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53LX_p_016;
 8009f2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f2e:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 8009f30:	461a      	mov	r2, r3
 8009f32:	f04f 0300 	mov.w	r3, #0
 8009f36:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58


	p_amb_noise_sq += 2;
 8009f3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009f3e:	1c91      	adds	r1, r2, #2
 8009f40:	6039      	str	r1, [r7, #0]
 8009f42:	f143 0300 	adc.w	r3, r3, #0
 8009f46:	607b      	str	r3, [r7, #4]
 8009f48:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009f4c:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	p_amb_noise_sq /= 4;
 8009f50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009f54:	2a00      	cmp	r2, #0
 8009f56:	f173 0100 	sbcs.w	r1, r3, #0
 8009f5a:	da02      	bge.n	8009f62 <VL53LX_hist_events_consistency_check+0x41c>
 8009f5c:	3203      	adds	r2, #3
 8009f5e:	f143 0300 	adc.w	r3, r3, #0
 8009f62:	f04f 0000 	mov.w	r0, #0
 8009f66:	f04f 0100 	mov.w	r1, #0
 8009f6a:	0890      	lsrs	r0, r2, #2
 8009f6c:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8009f70:	1099      	asrs	r1, r3, #2
 8009f72:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

	noise_sq_sum =
		(uint32_t)prange_prev->VL53LX_p_017 +
 8009f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f78:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 8009f7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
		(uint32_t)prange_prev->VL53LX_p_017 +
 8009f7c:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 8009f7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		(uint32_t)c_sig_noise_sq +
 8009f80:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 8009f82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
	noise_sq_sum =
 8009f84:	4413      	add	r3, r2
 8009f86:	653b      	str	r3, [r7, #80]	; 0x50

	*pevents_tolerance =
		(int32_t)VL53LX_isqrt(noise_sq_sum * 16);
 8009f88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f8a:	011b      	lsls	r3, r3, #4
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f002 f822 	bl	800bfd6 <VL53LX_isqrt>
 8009f92:	4603      	mov	r3, r0
 8009f94:	461a      	mov	r2, r3
	*pevents_tolerance =
 8009f96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009f9a:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 8009f9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8009fa6:	fb02 f203 	mul.w	r2, r2, r3
 8009faa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009fae:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 8009fb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f103 0220 	add.w	r2, r3, #32
 8009fba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009fbe:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 8009fc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	da00      	bge.n	8009fcc <VL53LX_hist_events_consistency_check+0x486>
 8009fca:	333f      	adds	r3, #63	; 0x3f
 8009fcc:	119b      	asrs	r3, r3, #6
 8009fce:	461a      	mov	r2, r3
 8009fd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009fd4:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53LX_p_017;
 8009fd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	657b      	str	r3, [r7, #84]	; 0x54
	p_signal_events -= (int32_t)prange_prev->VL53LX_p_016;
 8009fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fe4:	1a9b      	subs	r3, r3, r2
 8009fe6:	657b      	str	r3, [r7, #84]	; 0x54

	if ((int32_t)c_signal_events > p_signal_events)
 8009fe8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009fea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009fec:	429a      	cmp	r2, r3
 8009fee:	da06      	bge.n	8009ffe <VL53LX_hist_events_consistency_check+0x4b8>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 8009ff0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ff4:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 8009ff6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ffa:	601a      	str	r2, [r3, #0]
 8009ffc:	e005      	b.n	800a00a <VL53LX_hist_events_consistency_check+0x4c4>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 8009ffe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a000:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a002:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800a004:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a008:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 800a00a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	429a      	cmp	r2, r3
 800a018:	dd0b      	ble.n	800a032 <VL53LX_hist_events_consistency_check+0x4ec>
		prange_curr->VL53LX_p_004 > min_effective_spad_count)
 800a01a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a01e:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 800a020:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800a024:	429a      	cmp	r2, r3
 800a026:	d204      	bcs.n	800a032 <VL53LX_hist_events_consistency_check+0x4ec>
		*prange_status = VL53LX_DEVICEERROR_EVENTCONSISTENCY;
 800a028:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a02c:	2214      	movs	r2, #20
 800a02e:	701a      	strb	r2, [r3, #0]
 800a030:	e003      	b.n	800a03a <VL53LX_hist_events_consistency_check+0x4f4>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 800a032:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a036:	2209      	movs	r2, #9
 800a038:	701a      	strb	r2, [r3, #0]





	return status;
 800a03a:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 800a03e:	4618      	mov	r0, r3
 800a040:	37a0      	adds	r7, #160	; 0xa0
 800a042:	46bd      	mov	sp, r7
 800a044:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a048 <VL53LX_hist_merged_pulse_check>:

VL53LX_Error  VL53LX_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53LX_range_data_t         *pdata,
	VL53LX_DeviceError          *prange_status)
{
 800a048:	b480      	push	{r7}
 800a04a:	b087      	sub	sp, #28
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	4603      	mov	r3, r0
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	607a      	str	r2, [r7, #4]
 800a054:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error  status   = VL53LX_ERROR_NONE;
 800a056:	2300      	movs	r3, #0
 800a058:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 800a05a:	2300      	movs	r3, #0
 800a05c:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800a06a:	429a      	cmp	r2, r3
 800a06c:	dd0b      	ble.n	800a086 <VL53LX_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800a074:	b29a      	uxth	r2, r3
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	1ad3      	subs	r3, r2, r3
 800a080:	b29b      	uxth	r3, r3
		delta_mm =
 800a082:	82fb      	strh	r3, [r7, #22]
 800a084:	e00a      	b.n	800a09c <VL53LX_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800a08c:	b29a      	uxth	r2, r3
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800a094:	b29b      	uxth	r3, r3
 800a096:	1ad3      	subs	r3, r2, r3
 800a098:	b29b      	uxth	r3, r3
		delta_mm =
 800a09a:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 800a09c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	dd09      	ble.n	800a0b8 <VL53LX_hist_merged_pulse_check+0x70>
 800a0a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a0a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	dd03      	ble.n	800a0b8 <VL53LX_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2216      	movs	r2, #22
 800a0b4:	701a      	strb	r2, [r3, #0]
 800a0b6:	e002      	b.n	800a0be <VL53LX_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2209      	movs	r2, #9
 800a0bc:	701a      	strb	r2, [r3, #0]

	return status;
 800a0be:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	371c      	adds	r7, #28
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr

0800a0ce <VL53LX_hist_xmonitor_consistency_check>:
VL53LX_Error  VL53LX_hist_xmonitor_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_data_t         *prange_curr)
{
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b08e      	sub	sp, #56	; 0x38
 800a0d2:	af04      	add	r7, sp, #16
 800a0d4:	60f8      	str	r0, [r7, #12]
 800a0d6:	60b9      	str	r1, [r7, #8]
 800a0d8:	607a      	str	r2, [r7, #4]
 800a0da:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_LLDriverData_t *pdev =
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	3318      	adds	r3, #24
 800a0e6:	623b      	str	r3, [r7, #32]
		VL53LXDevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 800a0f0:	6a3b      	ldr	r3, [r7, #32]
 800a0f2:	f893 3250 	ldrb.w	r3, [r3, #592]	; 0x250
 800a0f6:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 800a0f8:	6a3b      	ldr	r3, [r7, #32]
 800a0fa:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 800a0fe:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800a106:	2b09      	cmp	r3, #9
 800a108:	d009      	beq.n	800a11e <VL53LX_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 800a110:	2b13      	cmp	r3, #19
 800a112:	d004      	beq.n	800a11e <VL53LX_hist_xmonitor_consistency_check+0x50>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800a11a:	2b14      	cmp	r3, #20
 800a11c:	d129      	bne.n	800a172 <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a124:	2b09      	cmp	r3, #9
 800a126:	d009      	beq.n	800a13c <VL53LX_hist_xmonitor_consistency_check+0x6e>
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
 800a12e:	2b13      	cmp	r3, #19
 800a130:	d004      	beq.n	800a13c <VL53LX_hist_xmonitor_consistency_check+0x6e>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800a138:	2b14      	cmp	r3, #20
 800a13a:	d11a      	bne.n	800a172 <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	2209      	movs	r2, #9
 800a140:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					VL53LX_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53LX_hist_events_consistency_check(
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f103 0238 	add.w	r2, r3, #56	; 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	334a      	adds	r3, #74	; 0x4a
				VL53LX_hist_events_consistency_check(
 800a14e:	8bb9      	ldrh	r1, [r7, #28]
 800a150:	7ff8      	ldrb	r0, [r7, #31]
 800a152:	9303      	str	r3, [sp, #12]
 800a154:	f107 0318 	add.w	r3, r7, #24
 800a158:	9302      	str	r3, [sp, #8]
 800a15a:	f107 0314 	add.w	r3, r7, #20
 800a15e:	9301      	str	r3, [sp, #4]
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	9300      	str	r3, [sp, #0]
 800a164:	4613      	mov	r3, r2
 800a166:	68ba      	ldr	r2, [r7, #8]
 800a168:	f7ff fced 	bl	8009b46 <VL53LX_hist_events_consistency_check>
 800a16c:	4603      	mov	r3, r0
 800a16e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		}
	}

	return status;
 800a172:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a176:	4618      	mov	r0, r3
 800a178:	3728      	adds	r7, #40	; 0x28
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}

0800a17e <VL53LX_hist_wrap_dmax>:

VL53LX_Error  VL53LX_hist_wrap_dmax(
	VL53LX_hist_post_process_config_t  *phistpostprocess,
	VL53LX_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 800a17e:	b580      	push	{r7, lr}
 800a180:	b088      	sub	sp, #32
 800a182:	af00      	add	r7, sp, #0
 800a184:	60f8      	str	r0, [r7, #12]
 800a186:	60b9      	str	r1, [r7, #8]
 800a188:	607a      	str	r2, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a18a:	2300      	movs	r3, #0
 800a18c:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 800a18e:	2300      	movs	r3, #0
 800a190:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 800a192:	2300      	movs	r3, #0
 800a194:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 800a196:	2300      	movs	r3, #0
 800a198:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53LX_p_015 != 0) {
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d019      	beq.n	800a1de <VL53LX_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53LX_calc_pll_period_mm(
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f002 f877 	bl	800c2a4 <VL53LX_calc_pll_period_mm>
 800a1b6:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53LX_p_015);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		wrap_dmax_phase =
 800a1be:	021b      	lsls	r3, r3, #8
 800a1c0:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	69ba      	ldr	r2, [r7, #24]
 800a1c6:	fb02 f303 	mul.w	r3, r2, r3
 800a1ca:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800a1d2:	0bdb      	lsrs	r3, r3, #15
 800a1d4:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	b21a      	sxth	r2, r3
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800a1de:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3720      	adds	r7, #32
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}

0800a1ea <VL53LX_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53LX_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 800a1ea:	b590      	push	{r4, r7, lr}
 800a1ec:	b08d      	sub	sp, #52	; 0x34
 800a1ee:	af04      	add	r7, sp, #16
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	4608      	mov	r0, r1
 800a1f4:	4611      	mov	r1, r2
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	4623      	mov	r3, r4
 800a1fa:	80fb      	strh	r3, [r7, #6]
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	80bb      	strh	r3, [r7, #4]
 800a200:	460b      	mov	r3, r1
 800a202:	70fb      	strb	r3, [r7, #3]
 800a204:	4613      	mov	r3, r2
 800a206:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 800a208:	2300      	movs	r3, #0
 800a20a:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 800a20c:	2300      	movs	r3, #0
 800a20e:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 800a210:	2300      	movs	r3, #0
 800a212:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 800a214:	2300      	movs	r3, #0
 800a216:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 800a218:	2300      	movs	r3, #0
 800a21a:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 800a21c:	2300      	movs	r3, #0
 800a21e:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 800a220:	2300      	movs	r3, #0
 800a222:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 800a224:	2300      	movs	r3, #0
 800a226:	613b      	str	r3, [r7, #16]



	VL53LX_calc_mm_effective_spads(
 800a228:	78b9      	ldrb	r1, [r7, #2]
 800a22a:	78f8      	ldrb	r0, [r7, #3]
 800a22c:	f107 030c 	add.w	r3, r7, #12
 800a230:	9303      	str	r3, [sp, #12]
 800a232:	f107 030e 	add.w	r3, r7, #14
 800a236:	9302      	str	r3, [sp, #8]
 800a238:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a23c:	9301      	str	r3, [sp, #4]
 800a23e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a240:	9300      	str	r3, [sp, #0]
 800a242:	23ff      	movs	r3, #255	; 0xff
 800a244:	22c7      	movs	r2, #199	; 0xc7
 800a246:	f000 fa03 	bl	800a650 <VL53LX_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 800a24a:	89fb      	ldrh	r3, [r7, #14]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d050      	beq.n	800a2f2 <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 800a250:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 800a252:	2b00      	cmp	r3, #0
 800a254:	d04d      	beq.n	800a2f2 <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;


	VL53LX_calc_mm_effective_spads(
 800a256:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 800a25a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800a25e:	78b9      	ldrb	r1, [r7, #2]
 800a260:	78f8      	ldrb	r0, [r7, #3]
 800a262:	f107 0308 	add.w	r3, r7, #8
 800a266:	9303      	str	r3, [sp, #12]
 800a268:	f107 030a 	add.w	r3, r7, #10
 800a26c:	9302      	str	r3, [sp, #8]
 800a26e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a272:	9301      	str	r3, [sp, #4]
 800a274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a276:	9300      	str	r3, [sp, #0]
 800a278:	4623      	mov	r3, r4
 800a27a:	f000 f9e9 	bl	800a650 <VL53LX_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 800a27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a280:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 800a282:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 800a284:	897b      	ldrh	r3, [r7, #10]
 800a286:	461a      	mov	r2, r3
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	fb02 f303 	mul.w	r3, r2, r3
 800a28e:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 800a290:	89fb      	ldrh	r3, [r7, #14]
 800a292:	461a      	mov	r2, r3
 800a294:	69bb      	ldr	r3, [r7, #24]
 800a296:	fbb3 f3f2 	udiv	r3, r3, r2
 800a29a:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 800a29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29e:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 800a2a0:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 800a2a2:	893b      	ldrh	r3, [r7, #8]
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	fb02 f303 	mul.w	r3, r2, r3
 800a2ac:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 800a2ae:	89bb      	ldrh	r3, [r7, #12]
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2b8:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 800a2ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a2be:	69ba      	ldr	r2, [r7, #24]
 800a2c0:	fb02 f303 	mul.w	r3, r2, r3
 800a2c4:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 800a2c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a2ca:	697a      	ldr	r2, [r7, #20]
 800a2cc:	fb02 f303 	mul.w	r3, r2, r3
 800a2d0:	69fa      	ldr	r2, [r7, #28]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800a2d6:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 800a2d8:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800a2da:	4413      	add	r3, r2
 800a2dc:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d008      	beq.n	800a2f6 <VL53LX_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	009a      	lsls	r2, r3, #2
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	fb92 f3f3 	sdiv	r3, r2, r3
 800a2ee:	61fb      	str	r3, [r7, #28]
 800a2f0:	e002      	b.n	800a2f8 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 800a2f2:	bf00      	nop
 800a2f4:	e000      	b.n	800a2f8 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 800a2f6:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	b21a      	sxth	r2, r3
 800a2fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2fe:	801a      	strh	r2, [r3, #0]

}
 800a300:	bf00      	nop
 800a302:	3724      	adds	r7, #36	; 0x24
 800a304:	46bd      	mov	sp, r7
 800a306:	bd90      	pop	{r4, r7, pc}

0800a308 <VL53LX_spad_number_to_byte_bit_index>:
void VL53LX_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 800a308:	b480      	push	{r7}
 800a30a:	b085      	sub	sp, #20
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60b9      	str	r1, [r7, #8]
 800a310:	607a      	str	r2, [r7, #4]
 800a312:	603b      	str	r3, [r7, #0]
 800a314:	4603      	mov	r3, r0
 800a316:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 800a318:	7bfb      	ldrb	r3, [r7, #15]
 800a31a:	08db      	lsrs	r3, r3, #3
 800a31c:	b2da      	uxtb	r2, r3
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 800a322:	7bfb      	ldrb	r3, [r7, #15]
 800a324:	f003 0307 	and.w	r3, r3, #7
 800a328:	b2da      	uxtb	r2, r3
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	461a      	mov	r2, r3
 800a334:	2301      	movs	r3, #1
 800a336:	4093      	lsls	r3, r2
 800a338:	b2da      	uxtb	r2, r3
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	701a      	strb	r2, [r3, #0]

}
 800a33e:	bf00      	nop
 800a340:	3714      	adds	r7, #20
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr

0800a34a <VL53LX_encode_row_col>:

void VL53LX_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800a34a:	b480      	push	{r7}
 800a34c:	b083      	sub	sp, #12
 800a34e:	af00      	add	r7, sp, #0
 800a350:	4603      	mov	r3, r0
 800a352:	603a      	str	r2, [r7, #0]
 800a354:	71fb      	strb	r3, [r7, #7]
 800a356:	460b      	mov	r3, r1
 800a358:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 800a35a:	79fb      	ldrb	r3, [r7, #7]
 800a35c:	2b07      	cmp	r3, #7
 800a35e:	d90a      	bls.n	800a376 <VL53LX_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800a360:	79bb      	ldrb	r3, [r7, #6]
 800a362:	00db      	lsls	r3, r3, #3
 800a364:	b2da      	uxtb	r2, r3
 800a366:	79fb      	ldrb	r3, [r7, #7]
 800a368:	1ad3      	subs	r3, r2, r3
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	3b71      	subs	r3, #113	; 0x71
 800a36e:	b2da      	uxtb	r2, r3
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 800a374:	e00a      	b.n	800a38c <VL53LX_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800a376:	79bb      	ldrb	r3, [r7, #6]
 800a378:	f1c3 030f 	rsb	r3, r3, #15
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	00db      	lsls	r3, r3, #3
 800a380:	b2da      	uxtb	r2, r3
 800a382:	79fb      	ldrb	r3, [r7, #7]
 800a384:	4413      	add	r3, r2
 800a386:	b2da      	uxtb	r2, r3
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	701a      	strb	r2, [r3, #0]
}
 800a38c:	bf00      	nop
 800a38e:	370c      	adds	r7, #12
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <VL53LX_decode_zone_size>:

void VL53LX_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	4603      	mov	r3, r0
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	607a      	str	r2, [r7, #4]
 800a3a4:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 800a3a6:	7bfb      	ldrb	r3, [r7, #15]
 800a3a8:	091b      	lsrs	r3, r3, #4
 800a3aa:	b2da      	uxtb	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800a3b0:	7bfb      	ldrb	r3, [r7, #15]
 800a3b2:	f003 030f 	and.w	r3, r3, #15
 800a3b6:	b2da      	uxtb	r2, r3
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	701a      	strb	r2, [r3, #0]

}
 800a3bc:	bf00      	nop
 800a3be:	3714      	adds	r7, #20
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <VL53LX_encode_zone_size>:

void VL53LX_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	603a      	str	r2, [r7, #0]
 800a3d2:	71fb      	strb	r3, [r7, #7]
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 800a3d8:	79bb      	ldrb	r3, [r7, #6]
 800a3da:	011b      	lsls	r3, r3, #4
 800a3dc:	b2da      	uxtb	r2, r3
 800a3de:	79fb      	ldrb	r3, [r7, #7]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	b2da      	uxtb	r2, r3
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	701a      	strb	r2, [r3, #0]

}
 800a3e8:	bf00      	nop
 800a3ea:	370c      	adds	r7, #12
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr

0800a3f4 <VL53LX_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b086      	sub	sp, #24
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60ba      	str	r2, [r7, #8]
 800a3fc:	607b      	str	r3, [r7, #4]
 800a3fe:	4603      	mov	r3, r0
 800a400:	73fb      	strb	r3, [r7, #15]
 800a402:	460b      	mov	r3, r1
 800a404:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 800a406:	2300      	movs	r3, #0
 800a408:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 800a40a:	2300      	movs	r3, #0
 800a40c:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 800a40e:	2300      	movs	r3, #0
 800a410:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 800a412:	2300      	movs	r3, #0
 800a414:	753b      	strb	r3, [r7, #20]



	VL53LX_decode_row_col(
 800a416:	f107 0217 	add.w	r2, r7, #23
 800a41a:	f107 0116 	add.w	r1, r7, #22
 800a41e:	7bfb      	ldrb	r3, [r7, #15]
 800a420:	4618      	mov	r0, r3
 800a422:	f002 f9ab 	bl	800c77c <VL53LX_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53LX_decode_zone_size(
 800a426:	f107 0214 	add.w	r2, r7, #20
 800a42a:	f107 0115 	add.w	r1, r7, #21
 800a42e:	7bbb      	ldrb	r3, [r7, #14]
 800a430:	4618      	mov	r0, r3
 800a432:	f7ff ffb1 	bl	800a398 <VL53LX_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 800a436:	7dfb      	ldrb	r3, [r7, #23]
 800a438:	b29a      	uxth	r2, r3
 800a43a:	7d7b      	ldrb	r3, [r7, #21]
 800a43c:	3301      	adds	r3, #1
 800a43e:	0fd9      	lsrs	r1, r3, #31
 800a440:	440b      	add	r3, r1
 800a442:	105b      	asrs	r3, r3, #1
 800a444:	425b      	negs	r3, r3
 800a446:	b29b      	uxth	r3, r3
 800a448:	4413      	add	r3, r2
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	b21a      	sxth	r2, r3
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	da02      	bge.n	800a462 <VL53LX_decode_zone_limits+0x6e>
		*px_ll = 0;
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	2200      	movs	r2, #0
 800a460:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a468:	b29a      	uxth	r2, r3
 800a46a:	7d7b      	ldrb	r3, [r7, #21]
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	4413      	add	r3, r2
 800a470:	b29b      	uxth	r3, r3
 800a472:	b21a      	sxth	r2, r3
 800a474:	6a3b      	ldr	r3, [r7, #32]
 800a476:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53LX_SPAD_ARRAY_WIDTH-1))
 800a478:	6a3b      	ldr	r3, [r7, #32]
 800a47a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a47e:	2b0f      	cmp	r3, #15
 800a480:	dd02      	ble.n	800a488 <VL53LX_decode_zone_limits+0x94>
		*px_ur = VL53LX_SPAD_ARRAY_WIDTH-1;
 800a482:	6a3b      	ldr	r3, [r7, #32]
 800a484:	220f      	movs	r2, #15
 800a486:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 800a488:	7dbb      	ldrb	r3, [r7, #22]
 800a48a:	b29a      	uxth	r2, r3
 800a48c:	7d3b      	ldrb	r3, [r7, #20]
 800a48e:	3301      	adds	r3, #1
 800a490:	0fd9      	lsrs	r1, r3, #31
 800a492:	440b      	add	r3, r1
 800a494:	105b      	asrs	r3, r3, #1
 800a496:	425b      	negs	r3, r3
 800a498:	b29b      	uxth	r3, r3
 800a49a:	4413      	add	r3, r2
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	b21a      	sxth	r2, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	da02      	bge.n	800a4b4 <VL53LX_decode_zone_limits+0xc0>
		*py_ll = 0;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a4ba:	b29a      	uxth	r2, r3
 800a4bc:	7d3b      	ldrb	r3, [r7, #20]
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	4413      	add	r3, r2
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	b21a      	sxth	r2, r3
 800a4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c8:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53LX_SPAD_ARRAY_HEIGHT-1))
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a4d0:	2b0f      	cmp	r3, #15
 800a4d2:	dd02      	ble.n	800a4da <VL53LX_decode_zone_limits+0xe6>
		*py_ur = VL53LX_SPAD_ARRAY_HEIGHT-1;
 800a4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d6:	220f      	movs	r2, #15
 800a4d8:	801a      	strh	r2, [r3, #0]
}
 800a4da:	bf00      	nop
 800a4dc:	3718      	adds	r7, #24
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <VL53LX_is_aperture_location>:


uint8_t VL53LX_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 800a4e2:	b480      	push	{r7}
 800a4e4:	b085      	sub	sp, #20
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	460a      	mov	r2, r1
 800a4ec:	71fb      	strb	r3, [r7, #7]
 800a4ee:	4613      	mov	r3, r2
 800a4f0:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 800a4f6:	79fb      	ldrb	r3, [r7, #7]
 800a4f8:	f003 0303 	and.w	r3, r3, #3
 800a4fc:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 800a4fe:	79bb      	ldrb	r3, [r7, #6]
 800a500:	f003 0303 	and.w	r3, r3, #3
 800a504:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 800a506:	7bbb      	ldrb	r3, [r7, #14]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d104      	bne.n	800a516 <VL53LX_is_aperture_location+0x34>
 800a50c:	7b7b      	ldrb	r3, [r7, #13]
 800a50e:	2b02      	cmp	r3, #2
 800a510:	d101      	bne.n	800a516 <VL53LX_is_aperture_location+0x34>
		is_aperture = 1;
 800a512:	2301      	movs	r3, #1
 800a514:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 800a516:	7bbb      	ldrb	r3, [r7, #14]
 800a518:	2b02      	cmp	r3, #2
 800a51a:	d104      	bne.n	800a526 <VL53LX_is_aperture_location+0x44>
 800a51c:	7b7b      	ldrb	r3, [r7, #13]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d101      	bne.n	800a526 <VL53LX_is_aperture_location+0x44>
		is_aperture = 1;
 800a522:	2301      	movs	r3, #1
 800a524:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 800a526:	7bfb      	ldrb	r3, [r7, #15]
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3714      	adds	r7, #20
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <VL53LX_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 800a534:	b590      	push	{r4, r7, lr}
 800a536:	b08b      	sub	sp, #44	; 0x2c
 800a538:	af02      	add	r7, sp, #8
 800a53a:	603a      	str	r2, [r7, #0]
 800a53c:	461a      	mov	r2, r3
 800a53e:	4603      	mov	r3, r0
 800a540:	71fb      	strb	r3, [r7, #7]
 800a542:	460b      	mov	r3, r1
 800a544:	71bb      	strb	r3, [r7, #6]
 800a546:	4613      	mov	r3, r2
 800a548:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 800a54a:	2300      	movs	r3, #0
 800a54c:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 800a54e:	2300      	movs	r3, #0
 800a550:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 800a552:	2300      	movs	r3, #0
 800a554:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 800a556:	2300      	movs	r3, #0
 800a558:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 800a55a:	2300      	movs	r3, #0
 800a55c:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 800a55e:	2300      	movs	r3, #0
 800a560:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 800a562:	2300      	movs	r3, #0
 800a564:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 800a566:	2300      	movs	r3, #0
 800a568:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 800a56a:	2300      	movs	r3, #0
 800a56c:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 800a56e:	2300      	movs	r3, #0
 800a570:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 800a572:	2300      	movs	r3, #0
 800a574:	76fb      	strb	r3, [r7, #27]



	VL53LX_decode_zone_limits(
 800a576:	f107 0416 	add.w	r4, r7, #22
 800a57a:	f107 0218 	add.w	r2, r7, #24
 800a57e:	79b9      	ldrb	r1, [r7, #6]
 800a580:	79f8      	ldrb	r0, [r7, #7]
 800a582:	f107 0312 	add.w	r3, r7, #18
 800a586:	9301      	str	r3, [sp, #4]
 800a588:	f107 0314 	add.w	r3, r7, #20
 800a58c:	9300      	str	r3, [sp, #0]
 800a58e:	4623      	mov	r3, r4
 800a590:	f7ff ff30 	bl	800a3f4 <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 800a594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a596:	2200      	movs	r2, #0
 800a598:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800a59a:	8afb      	ldrh	r3, [r7, #22]
 800a59c:	83bb      	strh	r3, [r7, #28]
 800a59e:	e04c      	b.n	800a63a <VL53LX_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800a5a0:	8b3b      	ldrh	r3, [r7, #24]
 800a5a2:	83fb      	strh	r3, [r7, #30]
 800a5a4:	e03d      	b.n	800a622 <VL53LX_calc_max_effective_spads+0xee>



			VL53LX_encode_row_col(
 800a5a6:	8bbb      	ldrh	r3, [r7, #28]
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	8bfa      	ldrh	r2, [r7, #30]
 800a5ac:	b2d1      	uxtb	r1, r2
 800a5ae:	f107 0211 	add.w	r2, r7, #17
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7ff fec9 	bl	800a34a <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 800a5b8:	7c78      	ldrb	r0, [r7, #17]
 800a5ba:	f107 030e 	add.w	r3, r7, #14
 800a5be:	f107 020f 	add.w	r2, r7, #15
 800a5c2:	f107 0110 	add.w	r1, r7, #16
 800a5c6:	f7ff fe9f 	bl	800a308 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800a5ca:	7c3b      	ldrb	r3, [r7, #16]
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	781a      	ldrb	r2, [r3, #0]
 800a5d4:	7bbb      	ldrb	r3, [r7, #14]
 800a5d6:	4013      	ands	r3, r2
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d01b      	beq.n	800a616 <VL53LX_calc_max_effective_spads+0xe2>


				is_aperture = VL53LX_is_aperture_location(
 800a5de:	8bbb      	ldrh	r3, [r7, #28]
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	8bfa      	ldrh	r2, [r7, #30]
 800a5e4:	b2d2      	uxtb	r2, r2
 800a5e6:	4611      	mov	r1, r2
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f7ff ff7a 	bl	800a4e2 <VL53LX_is_aperture_location>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800a5f2:	7efb      	ldrb	r3, [r7, #27]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d007      	beq.n	800a608 <VL53LX_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 800a5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fa:	881a      	ldrh	r2, [r3, #0]
 800a5fc:	88bb      	ldrh	r3, [r7, #4]
 800a5fe:	4413      	add	r3, r2
 800a600:	b29a      	uxth	r2, r3
 800a602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a604:	801a      	strh	r2, [r3, #0]
 800a606:	e006      	b.n	800a616 <VL53LX_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 800a608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a60a:	881b      	ldrh	r3, [r3, #0]
 800a60c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a610:	b29a      	uxth	r2, r3
 800a612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a614:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800a616:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a61a:	b29b      	uxth	r3, r3
 800a61c:	3301      	adds	r3, #1
 800a61e:	b29b      	uxth	r3, r3
 800a620:	83fb      	strh	r3, [r7, #30]
 800a622:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a626:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	ddbb      	ble.n	800a5a6 <VL53LX_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800a62e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a632:	b29b      	uxth	r3, r3
 800a634:	3301      	adds	r3, #1
 800a636:	b29b      	uxth	r3, r3
 800a638:	83bb      	strh	r3, [r7, #28]
 800a63a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a63e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800a642:	429a      	cmp	r2, r3
 800a644:	ddac      	ble.n	800a5a0 <VL53LX_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 800a646:	bf00      	nop
 800a648:	bf00      	nop
 800a64a:	3724      	adds	r7, #36	; 0x24
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd90      	pop	{r4, r7, pc}

0800a650 <VL53LX_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 800a650:	b590      	push	{r4, r7, lr}
 800a652:	b08d      	sub	sp, #52	; 0x34
 800a654:	af02      	add	r7, sp, #8
 800a656:	4604      	mov	r4, r0
 800a658:	4608      	mov	r0, r1
 800a65a:	4611      	mov	r1, r2
 800a65c:	461a      	mov	r2, r3
 800a65e:	4623      	mov	r3, r4
 800a660:	71fb      	strb	r3, [r7, #7]
 800a662:	4603      	mov	r3, r0
 800a664:	71bb      	strb	r3, [r7, #6]
 800a666:	460b      	mov	r3, r1
 800a668:	717b      	strb	r3, [r7, #5]
 800a66a:	4613      	mov	r3, r2
 800a66c:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 800a66e:	2300      	movs	r3, #0
 800a670:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t   y         = 0;
 800a672:	2300      	movs	r3, #0
 800a674:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t   mm_x_ll   = 0;
 800a676:	2300      	movs	r3, #0
 800a678:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 800a67a:	2300      	movs	r3, #0
 800a67c:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 800a67e:	2300      	movs	r3, #0
 800a680:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 800a682:	2300      	movs	r3, #0
 800a684:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 800a686:	2300      	movs	r3, #0
 800a688:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 800a68a:	2300      	movs	r3, #0
 800a68c:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 800a68e:	2300      	movs	r3, #0
 800a690:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 800a692:	2300      	movs	r3, #0
 800a694:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 800a696:	2300      	movs	r3, #0
 800a698:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 800a69a:	2300      	movs	r3, #0
 800a69c:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t  spad_attenuation = 0;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	847b      	strh	r3, [r7, #34]	; 0x22



	VL53LX_decode_zone_limits(
 800a6b0:	f107 041c 	add.w	r4, r7, #28
 800a6b4:	f107 021e 	add.w	r2, r7, #30
 800a6b8:	79b9      	ldrb	r1, [r7, #6]
 800a6ba:	79f8      	ldrb	r0, [r7, #7]
 800a6bc:	f107 0318 	add.w	r3, r7, #24
 800a6c0:	9301      	str	r3, [sp, #4]
 800a6c2:	f107 031a 	add.w	r3, r7, #26
 800a6c6:	9300      	str	r3, [sp, #0]
 800a6c8:	4623      	mov	r3, r4
 800a6ca:	f7ff fe93 	bl	800a3f4 <VL53LX_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53LX_decode_zone_limits(
 800a6ce:	f107 0414 	add.w	r4, r7, #20
 800a6d2:	f107 0216 	add.w	r2, r7, #22
 800a6d6:	7939      	ldrb	r1, [r7, #4]
 800a6d8:	7978      	ldrb	r0, [r7, #5]
 800a6da:	f107 0310 	add.w	r3, r7, #16
 800a6de:	9301      	str	r3, [sp, #4]
 800a6e0:	f107 0312 	add.w	r3, r7, #18
 800a6e4:	9300      	str	r3, [sp, #0]
 800a6e6:	4623      	mov	r3, r4
 800a6e8:	f7ff fe84 	bl	800a3f4 <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 800a6ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 800a6f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800a6f8:	8abb      	ldrh	r3, [r7, #20]
 800a6fa:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a6fc:	e06c      	b.n	800a7d8 <VL53LX_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800a6fe:	8afb      	ldrh	r3, [r7, #22]
 800a700:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a702:	e05d      	b.n	800a7c0 <VL53LX_calc_mm_effective_spads+0x170>



			VL53LX_encode_row_col(
 800a704:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a706:	b2db      	uxtb	r3, r3
 800a708:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a70a:	b2d1      	uxtb	r1, r2
 800a70c:	f107 020f 	add.w	r2, r7, #15
 800a710:	4618      	mov	r0, r3
 800a712:	f7ff fe1a 	bl	800a34a <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 800a716:	7bf8      	ldrb	r0, [r7, #15]
 800a718:	f107 030c 	add.w	r3, r7, #12
 800a71c:	f107 020d 	add.w	r2, r7, #13
 800a720:	f107 010e 	add.w	r1, r7, #14
 800a724:	f7ff fdf0 	bl	800a308 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800a728:	7bbb      	ldrb	r3, [r7, #14]
 800a72a:	461a      	mov	r2, r3
 800a72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a72e:	4413      	add	r3, r2
 800a730:	781a      	ldrb	r2, [r3, #0]
 800a732:	7b3b      	ldrb	r3, [r7, #12]
 800a734:	4013      	ands	r3, r2
 800a736:	b2db      	uxtb	r3, r3
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d03b      	beq.n	800a7b4 <VL53LX_calc_mm_effective_spads+0x164>


				is_aperture = VL53LX_is_aperture_location(
 800a73c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a742:	b2d2      	uxtb	r2, r2
 800a744:	4611      	mov	r1, r2
 800a746:	4618      	mov	r0, r3
 800a748:	f7ff fecb 	bl	800a4e2 <VL53LX_is_aperture_location>
 800a74c:	4603      	mov	r3, r0
 800a74e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800a752:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a756:	2b00      	cmp	r3, #0
 800a758:	d002      	beq.n	800a760 <VL53LX_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 800a75a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a75c:	847b      	strh	r3, [r7, #34]	; 0x22
 800a75e:	e002      	b.n	800a766 <VL53LX_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 800a760:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a764:	847b      	strh	r3, [r7, #34]	; 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 800a766:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a76a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800a76e:	429a      	cmp	r2, r3
 800a770:	db19      	blt.n	800a7a6 <VL53LX_calc_mm_effective_spads+0x156>
 800a772:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a776:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800a77a:	429a      	cmp	r2, r3
 800a77c:	dc13      	bgt.n	800a7a6 <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800a77e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 800a782:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800a786:	429a      	cmp	r2, r3
 800a788:	db0d      	blt.n	800a7a6 <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800a78a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800a78e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800a792:	429a      	cmp	r2, r3
 800a794:	dc07      	bgt.n	800a7a6 <VL53LX_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 800a796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a798:	881a      	ldrh	r2, [r3, #0]
 800a79a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a79c:	4413      	add	r3, r2
 800a79e:	b29a      	uxth	r2, r3
 800a7a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7a2:	801a      	strh	r2, [r3, #0]
 800a7a4:	e006      	b.n	800a7b4 <VL53LX_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 800a7a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7a8:	881a      	ldrh	r2, [r3, #0]
 800a7aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a7ac:	4413      	add	r3, r2
 800a7ae:	b29a      	uxth	r2, r3
 800a7b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7b2:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800a7b4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a7c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a7c4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	dd9b      	ble.n	800a704 <VL53LX_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800a7cc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800a7d0:	b29b      	uxth	r3, r3
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a7d8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a7dc:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	dd8c      	ble.n	800a6fe <VL53LX_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 800a7e4:	bf00      	nop
 800a7e6:	bf00      	nop
 800a7e8:	372c      	adds	r7, #44	; 0x2c
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd90      	pop	{r4, r7, pc}

0800a7ee <VL53LX_hist_copy_results_to_sys_and_core>:
void VL53LX_hist_copy_results_to_sys_and_core(
	VL53LX_histogram_bin_data_t      *pbins,
	VL53LX_range_results_t           *phist,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore)
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b086      	sub	sp, #24
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	60f8      	str	r0, [r7, #12]
 800a7f6:	60b9      	str	r1, [r7, #8]
 800a7f8:	607a      	str	r2, [r7, #4]
 800a7fa:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53LX_init_system_results(psys);
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f7fe f835 	bl	8008870 <VL53LX_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	7c9a      	ldrb	r2, [r3, #18]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53LX_p_003[0]);
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	3314      	adds	r3, #20
 800a830:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 800a832:	2300      	movs	r3, #0
 800a834:	75fb      	strb	r3, [r7, #23]
 800a836:	e06b      	b.n	800a910 <VL53LX_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 800a838:	7dfb      	ldrb	r3, [r7, #23]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d002      	beq.n	800a844 <VL53LX_hist_copy_results_to_sys_and_core+0x56>
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d034      	beq.n	800a8ac <VL53LX_hist_copy_results_to_sys_and_core+0xbe>
 800a842:	e05f      	b.n	800a904 <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53LX_p_004;
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53LX_p_002;
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53LX_p_011;
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800a87c:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	8a9a      	ldrh	r2, [r3, #20]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53LX_p_017;
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53LX_p_010;
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53LX_p_016;
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	601a      	str	r2, [r3, #0]

			break;
 800a8aa:	e02b      	b.n	800a904 <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53LX_p_004;
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53LX_p_002;
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53LX_p_011;
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800a8dc:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	845a      	strh	r2, [r3, #34]	; 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53LX_p_017;
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53LX_p_010;
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53LX_p_016;
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	611a      	str	r2, [r3, #16]
			break;
 800a902:	bf00      	nop
		}

		pdata++;
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	334c      	adds	r3, #76	; 0x4c
 800a908:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 800a90a:	7dfb      	ldrb	r3, [r7, #23]
 800a90c:	3301      	adds	r3, #1
 800a90e:	75fb      	strb	r3, [r7, #23]
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	7c9b      	ldrb	r3, [r3, #18]
 800a914:	7dfa      	ldrb	r2, [r7, #23]
 800a916:	429a      	cmp	r2, r3
 800a918:	d38e      	bcc.n	800a838 <VL53LX_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 800a91a:	bf00      	nop
 800a91c:	bf00      	nop
 800a91e:	3718      	adds	r7, #24
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <VL53LX_save_cfg_data>:
}


VL53LX_Error VL53LX_save_cfg_data(
	VL53LX_DEV  Dev)
{
 800a924:	b480      	push	{r7}
 800a926:	b089      	sub	sp, #36	; 0x24
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a92c:	2300      	movs	r3, #0
 800a92e:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	3318      	adds	r3, #24
 800a934:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800a93c:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53LX_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800a944:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id]);
 800a946:	69bb      	ldr	r3, [r7, #24]
 800a948:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a94c:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 800a94e:	4613      	mov	r3, r2
 800a950:	009b      	lsls	r3, r3, #2
 800a952:	4413      	add	r3, r2
 800a954:	005b      	lsls	r3, r3, #1
 800a956:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a95a:	697a      	ldr	r2, [r7, #20]
 800a95c:	4413      	add	r3, r2
 800a95e:	3302      	adds	r3, #2
 800a960:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 800a962:	69bb      	ldr	r3, [r7, #24]
 800a964:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
	pzone_dyn_cfg->expected_stream_count =
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 800a96c:	69bb      	ldr	r3, [r7, #24]
 800a96e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	pzone_dyn_cfg->expected_gph_id =
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 800a986:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3724      	adds	r7, #36	; 0x24
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr

0800a996 <VL53LX_dynamic_zone_update>:


VL53LX_Error VL53LX_dynamic_zone_update(
	VL53LX_DEV  Dev,
	VL53LX_range_results_t *presults)
{
 800a996:	b480      	push	{r7}
 800a998:	b08b      	sub	sp, #44	; 0x2c
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]
 800a99e:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	3318      	adds	r3, #24
 800a9a8:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800a9b0:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a9b8:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 800a9ba:	69bb      	ldr	r3, [r7, #24]
 800a9bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a9c0:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800a9c8:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 800a9ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a9ce:	623b      	str	r3, [r7, #32]
		pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count = 0;
 800a9d0:	7bfa      	ldrb	r2, [r7, #15]
 800a9d2:	6939      	ldr	r1, [r7, #16]
 800a9d4:	4613      	mov	r3, r2
 800a9d6:	009b      	lsls	r3, r3, #2
 800a9d8:	4413      	add	r3, r2
 800a9da:	005b      	lsls	r3, r3, #1
 800a9dc:	440b      	add	r3, r1
 800a9de:	3306      	adds	r3, #6
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	801a      	strh	r2, [r3, #0]

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a9ea:	84bb      	strh	r3, [r7, #36]	; 0x24

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a9f2:	e01a      	b.n	800aa2a <VL53LX_dynamic_zone_update+0x94>

		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53LX_p_003[i].total_rate_per_spad_mcps);

		if (presults->VL53LX_p_003[i].total_rate_per_spad_mcps >
 800a9f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9f8:	683a      	ldr	r2, [r7, #0]
 800a9fa:	214c      	movs	r1, #76	; 0x4c
 800a9fc:	fb01 f303 	mul.w	r3, r1, r3
 800aa00:	4413      	add	r3, r2
 800aa02:	334a      	adds	r3, #74	; 0x4a
 800aa04:	881b      	ldrh	r3, [r3, #0]
 800aa06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d209      	bcs.n	800aa20 <VL53LX_dynamic_zone_update+0x8a>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53LX_p_003[i].total_rate_per_spad_mcps;
 800aa0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			max_total_rate_per_spads =
 800aa10:	683a      	ldr	r2, [r7, #0]
 800aa12:	214c      	movs	r1, #76	; 0x4c
 800aa14:	fb01 f303 	mul.w	r3, r1, r3
 800aa18:	4413      	add	r3, r2
 800aa1a:	334a      	adds	r3, #74	; 0x4a
 800aa1c:	881b      	ldrh	r3, [r3, #0]
 800aa1e:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (i = 1; i < presults->active_results; i++) {
 800aa20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa24:	3301      	adds	r3, #1
 800aa26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	7c9b      	ldrb	r3, [r3, #18]
 800aa2e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d3de      	bcc.n	800a9f4 <VL53LX_dynamic_zone_update+0x5e>

	}

	if (max_total_rate_per_spads == 0) {
 800aa36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d103      	bne.n	800aa44 <VL53LX_dynamic_zone_update+0xae>

		temp = 0xFFFF;
 800aa3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa40:	623b      	str	r3, [r7, #32]
 800aa42:	e00e      	b.n	800aa62 <VL53LX_dynamic_zone_update+0xcc>
	} else {

		temp = target_rate << 14;
 800aa44:	89bb      	ldrh	r3, [r7, #12]
 800aa46:	039b      	lsls	r3, r3, #14
 800aa48:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800aa4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa4c:	6a3a      	ldr	r2, [r7, #32]
 800aa4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa52:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800aa54:	6a3b      	ldr	r3, [r7, #32]
 800aa56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa5a:	d302      	bcc.n	800aa62 <VL53LX_dynamic_zone_update+0xcc>
			temp = 0xFFFF;
 800aa5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa60:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800aa62:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 800aa64:	6a3b      	ldr	r3, [r7, #32]
 800aa66:	b298      	uxth	r0, r3
	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800aa68:	6939      	ldr	r1, [r7, #16]
 800aa6a:	4613      	mov	r3, r2
 800aa6c:	009b      	lsls	r3, r3, #2
 800aa6e:	4413      	add	r3, r2
 800aa70:	005b      	lsls	r3, r3, #1
 800aa72:	440b      	add	r3, r1
 800aa74:	3306      	adds	r3, #6
 800aa76:	4602      	mov	r2, r0
 800aa78:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 800aa7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	372c      	adds	r7, #44	; 0x2c
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr

0800aa8a <VL53LX_multizone_hist_bins_update>:

VL53LX_Error VL53LX_multizone_hist_bins_update(
	VL53LX_DEV  Dev)
{
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b08a      	sub	sp, #40	; 0x28
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800aa92:	2300      	movs	r3, #0
 800aa94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	3318      	adds	r3, #24
 800aa9c:	623b      	str	r3, [r7, #32]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 800aa9e:	6a3b      	ldr	r3, [r7, #32]
 800aaa0:	332c      	adds	r3, #44	; 0x2c
 800aaa2:	61fb      	str	r3, [r7, #28]
	VL53LX_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 800aaa4:	6a3b      	ldr	r3, [r7, #32]
 800aaa6:	33c2      	adds	r3, #194	; 0xc2
 800aaa8:	61bb      	str	r3, [r7, #24]
	VL53LX_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800aaaa:	6a3b      	ldr	r3, [r7, #32]
 800aaac:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800aab0:	617b      	str	r3, [r7, #20]
	VL53LX_histogram_config_t *pmulti_hist =
 800aab2:	69bb      	ldr	r3, [r7, #24]
 800aab4:	3302      	adds	r3, #2
 800aab6:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800aab8:	69fb      	ldr	r3, [r7, #28]
 800aaba:	785b      	ldrb	r3, [r3, #1]
 800aabc:	f003 0301 	and.w	r3, r3, #1
 800aac0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800aac2:	6a3b      	ldr	r3, [r7, #32]
 800aac4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800aac8:	461a      	mov	r2, r3
 800aaca:	69bb      	ldr	r3, [r7, #24]
 800aacc:	4413      	add	r3, r2
 800aace:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d11e      	bne.n	800ab14 <VL53LX_multizone_hist_bins_update+0x8a>
		VL53LX_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800aad6:	7bfb      	ldrb	r3, [r7, #15]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d10b      	bne.n	800aaf4 <VL53LX_multizone_hist_bins_update+0x6a>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800aaf4:	7bfb      	ldrb	r3, [r7, #15]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d05d      	beq.n	800abb6 <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	719a      	strb	r2, [r3, #6]
 800ab12:	e050      	b.n	800abb6 <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800ab14:	6a3b      	ldr	r3, [r7, #32]
 800ab16:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	4413      	add	r3, r2
 800ab20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ab24:	2b02      	cmp	r3, #2
 800ab26:	d11e      	bne.n	800ab66 <VL53LX_multizone_hist_bins_update+0xdc>
		VL53LX_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800ab28:	7bfb      	ldrb	r3, [r7, #15]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d10b      	bne.n	800ab46 <VL53LX_multizone_hist_bins_update+0xbc>
			trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800ab46:	7bfb      	ldrb	r3, [r7, #15]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d034      	beq.n	800abb6 <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	719a      	strb	r2, [r3, #6]
 800ab64:	e027      	b.n	800abb6 <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800ab66:	6a3b      	ldr	r3, [r7, #32]
 800ab68:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	69bb      	ldr	r3, [r7, #24]
 800ab70:	4413      	add	r3, r2
 800ab72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ab76:	2b03      	cmp	r3, #3
 800ab78:	d11d      	bne.n	800abb6 <VL53LX_multizone_hist_bins_update+0x12c>
			VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800ab7a:	7bfb      	ldrb	r3, [r7, #15]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d10b      	bne.n	800ab98 <VL53LX_multizone_hist_bins_update+0x10e>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800ab98:	7bfb      	ldrb	r3, [r7, #15]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d00b      	beq.n	800abb6 <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53LX_ERROR_NONE) {
 800abb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d109      	bne.n	800abd2 <VL53LX_multizone_hist_bins_update+0x148>
		VL53LX_copy_hist_bins_to_static_cfg(
 800abbe:	6a3b      	ldr	r3, [r7, #32]
 800abc0:	f203 21fe 	addw	r1, r3, #766	; 0x2fe
 800abc4:	6a3b      	ldr	r3, [r7, #32]
 800abc6:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800abca:	461a      	mov	r2, r3
 800abcc:	6978      	ldr	r0, [r7, #20]
 800abce:	f7fd fa1f 	bl	8008010 <VL53LX_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800abd2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3728      	adds	r7, #40	; 0x28
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}

0800abde <VL53LX_update_internal_stream_counters>:
VL53LX_Error VL53LX_update_internal_stream_counters(
	VL53LX_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800abde:	b480      	push	{r7}
 800abe0:	b089      	sub	sp, #36	; 0x24
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	60f8      	str	r0, [r7, #12]
 800abe6:	607a      	str	r2, [r7, #4]
 800abe8:	603b      	str	r3, [r7, #0]
 800abea:	460b      	mov	r3, r1
 800abec:	72fb      	strb	r3, [r7, #11]

	VL53LX_Error status = VL53LX_ERROR_NONE;
 800abee:	2300      	movs	r3, #0
 800abf0:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53LX_LLDriverData_t  *pdev =
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	3318      	adds	r3, #24
 800abf6:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800abf8:	69bb      	ldr	r3, [r7, #24]
 800abfa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800abfe:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800ac00:	7dfb      	ldrb	r3, [r7, #23]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d103      	bne.n	800ac0e <VL53LX_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	7afa      	ldrb	r2, [r7, #11]
 800ac0a:	701a      	strb	r2, [r3, #0]
 800ac0c:	e01e      	b.n	800ac4c <VL53LX_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	461a      	mov	r2, r3
 800ac14:	7dfb      	ldrb	r3, [r7, #23]
 800ac16:	3b01      	subs	r3, #1
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d111      	bne.n	800ac40 <VL53LX_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	2bff      	cmp	r3, #255	; 0xff
 800ac22:	d103      	bne.n	800ac2c <VL53LX_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2280      	movs	r2, #128	; 0x80
 800ac28:	701a      	strb	r2, [r3, #0]
 800ac2a:	e005      	b.n	800ac38 <VL53LX_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	3301      	adds	r3, #1
 800ac32:	b2da      	uxtb	r2, r3
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	701a      	strb	r2, [r3, #0]
 800ac3e:	e005      	b.n	800ac4c <VL53LX_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	3301      	adds	r3, #1
 800ac46:	b2da      	uxtb	r2, r3
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800ac4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3724      	adds	r7, #36	; 0x24
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <VL53LX_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b08a      	sub	sp, #40	; 0x28
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	607a      	str	r2, [r7, #4]
 800ac66:	461a      	mov	r2, r3
 800ac68:	460b      	mov	r3, r1
 800ac6a:	72fb      	strb	r3, [r7, #11]
 800ac6c:	4613      	mov	r3, r2
 800ac6e:	813b      	strh	r3, [r7, #8]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ac70:	2300      	movs	r3, #0
 800ac72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	3318      	adds	r3, #24
 800ac7a:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 800ac80:	2300      	movs	r3, #0
 800ac82:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53LX_calc_macro_period_us(
 800ac84:	7afa      	ldrb	r2, [r7, #11]
 800ac86:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ac88:	4611      	mov	r1, r2
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7fe f9fc 	bl	8009088 <VL53LX_calc_macro_period_us>
 800ac90:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800ac92:	6a3b      	ldr	r3, [r7, #32]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d101      	bne.n	800ac9c <VL53LX_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	623b      	str	r3, [r7, #32]


	timeout_mclks = phasecal_timeout_us << 12;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	031b      	lsls	r3, r3, #12
 800aca0:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800aca2:	6a3b      	ldr	r3, [r7, #32]
 800aca4:	085b      	lsrs	r3, r3, #1
 800aca6:	69ba      	ldr	r2, [r7, #24]
 800aca8:	4413      	add	r3, r2
 800acaa:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800acac:	69ba      	ldr	r2, [r7, #24]
 800acae:	6a3b      	ldr	r3, [r7, #32]
 800acb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800acb4:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	2bff      	cmp	r3, #255	; 0xff
 800acba:	d904      	bls.n	800acc6 <VL53LX_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800acbc:	69fb      	ldr	r3, [r7, #28]
 800acbe:	22ff      	movs	r2, #255	; 0xff
 800acc0:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325
 800acc4:	e004      	b.n	800acd0 <VL53LX_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800acca:	69fb      	ldr	r3, [r7, #28]
 800accc:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800acd0:	69fb      	ldr	r3, [r7, #28]
 800acd2:	7afa      	ldrb	r2, [r7, #11]
 800acd4:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a



	if (status == VL53LX_ERROR_NONE)
 800acd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d10a      	bne.n	800acf6 <VL53LX_set_ref_spad_char_config+0x9a>
		status =
			VL53LX_WrByte(
 800ace0:	69fb      	ldr	r3, [r7, #28]
 800ace2:	f893 3325 	ldrb.w	r3, [r3, #805]	; 0x325
 800ace6:	461a      	mov	r2, r3
 800ace8:	214b      	movs	r1, #75	; 0x4b
 800acea:	68f8      	ldr	r0, [r7, #12]
 800acec:	f006 fd8e 	bl	801180c <VL53LX_WrByte>
 800acf0:	4603      	mov	r3, r0
 800acf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53LX_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53LX_ERROR_NONE)
 800acf6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d10a      	bne.n	800ad14 <VL53LX_set_ref_spad_char_config+0xb8>
		status =
			VL53LX_WrByte(
 800acfe:	69fb      	ldr	r3, [r7, #28]
 800ad00:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800ad04:	461a      	mov	r2, r3
 800ad06:	2160      	movs	r1, #96	; 0x60
 800ad08:	68f8      	ldr	r0, [r7, #12]
 800ad0a:	f006 fd7f 	bl	801180c <VL53LX_WrByte>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53LX_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800ad1a:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800ad1c:	69fb      	ldr	r3, [r7, #28]
 800ad1e:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800ad22:	757b      	strb	r3, [r7, #21]

	if (status == VL53LX_ERROR_NONE)
 800ad24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d109      	bne.n	800ad40 <VL53LX_set_ref_spad_char_config+0xe4>
		status =
			VL53LX_WriteMulti(
 800ad2c:	f107 0214 	add.w	r2, r7, #20
 800ad30:	2302      	movs	r3, #2
 800ad32:	2178      	movs	r1, #120	; 0x78
 800ad34:	68f8      	ldr	r0, [r7, #12]
 800ad36:	f006 fcfd 	bl	8011734 <VL53LX_WriteMulti>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800ad40:	69fb      	ldr	r3, [r7, #28]
 800ad42:	893a      	ldrh	r2, [r7, #8]
 800ad44:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			total_rate_target_mcps;

	if (status == VL53LX_ERROR_NONE)
 800ad48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d108      	bne.n	800ad62 <VL53LX_set_ref_spad_char_config+0x106>
		status =
			VL53LX_WrWord(
 800ad50:	893b      	ldrh	r3, [r7, #8]
 800ad52:	461a      	mov	r2, r3
 800ad54:	211c      	movs	r1, #28
 800ad56:	68f8      	ldr	r0, [r7, #12]
 800ad58:	f006 fd82 	bl	8011860 <VL53LX_WrWord>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53LX_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53LX_ERROR_NONE)
 800ad62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d108      	bne.n	800ad7c <VL53LX_set_ref_spad_char_config+0x120>
		status =
			VL53LX_WrWord(
 800ad6a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	2164      	movs	r1, #100	; 0x64
 800ad70:	68f8      	ldr	r0, [r7, #12]
 800ad72:	f006 fd75 	bl	8011860 <VL53LX_WrWord>
 800ad76:	4603      	mov	r3, r0
 800ad78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53LX_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53LX_ERROR_NONE)
 800ad7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d108      	bne.n	800ad96 <VL53LX_set_ref_spad_char_config+0x13a>
		status =
			VL53LX_WrWord(
 800ad84:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ad86:	461a      	mov	r2, r3
 800ad88:	2166      	movs	r1, #102	; 0x66
 800ad8a:	68f8      	ldr	r0, [r7, #12]
 800ad8c:	f006 fd68 	bl	8011860 <VL53LX_WrWord>
 800ad90:	4603      	mov	r3, r0
 800ad92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LX_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800ad96:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3728      	adds	r7, #40	; 0x28
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <VL53LX_dynamic_xtalk_correction_calc_required_samples>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_calc_required_samples(
	VL53LX_DEV                          Dev
	)
{
 800ada2:	b5b0      	push	{r4, r5, r7, lr}
 800ada4:	b090      	sub	sp, #64	; 0x40
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800adaa:	2300      	movs	r3, #0
 800adac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	3318      	adds	r3, #24
 800adb4:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800adbc:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_smudge_corrector_config_t *pconfig =
 800adbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800adc4:	3314      	adds	r3, #20
 800adc6:	623b      	str	r3, [r7, #32]
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800adc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adca:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800adce:	3318      	adds	r3, #24
 800add0:	61fb      	str	r3, [r7, #28]
				&(pdev->smudge_corrector_internals);

	VL53LX_range_results_t *presults = &(pres->range_results);
 800add2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add4:	61bb      	str	r3, [r7, #24]
	VL53LX_range_data_t *pxmonitor = &(presults->xmonitor);
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800addc:	617b      	str	r3, [r7, #20]

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	69db      	ldr	r3, [r3, #28]
 800ade2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	temp64a = pxmonitor->VL53LX_p_017 +
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		pxmonitor->VL53LX_p_016;
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	temp64a = pxmonitor->VL53LX_p_017 +
 800adec:	4413      	add	r3, r2
 800adee:	461a      	mov	r2, r3
 800adf0:	f04f 0300 	mov.w	r3, #0
 800adf4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (peak_duration_us == 0)
 800adf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d102      	bne.n	800ae04 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x62>
		peak_duration_us = 1000;
 800adfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ae02:	63fb      	str	r3, [r7, #60]	; 0x3c
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800ae04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ae08:	4602      	mov	r2, r0
 800ae0a:	460b      	mov	r3, r1
 800ae0c:	f04f 0400 	mov.w	r4, #0
 800ae10:	f04f 0500 	mov.w	r5, #0
 800ae14:	015d      	lsls	r5, r3, #5
 800ae16:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800ae1a:	0154      	lsls	r4, r2, #5
 800ae1c:	4622      	mov	r2, r4
 800ae1e:	462b      	mov	r3, r5
 800ae20:	1a12      	subs	r2, r2, r0
 800ae22:	eb63 0301 	sbc.w	r3, r3, r1
 800ae26:	f04f 0400 	mov.w	r4, #0
 800ae2a:	f04f 0500 	mov.w	r5, #0
 800ae2e:	009d      	lsls	r5, r3, #2
 800ae30:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800ae34:	0094      	lsls	r4, r2, #2
 800ae36:	4622      	mov	r2, r4
 800ae38:	462b      	mov	r3, r5
 800ae3a:	1812      	adds	r2, r2, r0
 800ae3c:	eb41 0303 	adc.w	r3, r1, r3
 800ae40:	f04f 0000 	mov.w	r0, #0
 800ae44:	f04f 0100 	mov.w	r1, #0
 800ae48:	00d9      	lsls	r1, r3, #3
 800ae4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ae4e:	00d0      	lsls	r0, r2, #3
 800ae50:	4602      	mov	r2, r0
 800ae52:	460b      	mov	r3, r1
 800ae54:	4610      	mov	r0, r2
 800ae56:	4619      	mov	r1, r3
 800ae58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	f04f 0300 	mov.w	r3, #0
 800ae60:	f7f5 fe54 	bl	8000b0c <__aeabi_uldivmod>
 800ae64:	4602      	mov	r2, r0
 800ae66:	460b      	mov	r3, r1
 800ae68:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800ae6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ae70:	4602      	mov	r2, r0
 800ae72:	460b      	mov	r3, r1
 800ae74:	f04f 0400 	mov.w	r4, #0
 800ae78:	f04f 0500 	mov.w	r5, #0
 800ae7c:	015d      	lsls	r5, r3, #5
 800ae7e:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800ae82:	0154      	lsls	r4, r2, #5
 800ae84:	4622      	mov	r2, r4
 800ae86:	462b      	mov	r3, r5
 800ae88:	1a12      	subs	r2, r2, r0
 800ae8a:	eb63 0301 	sbc.w	r3, r3, r1
 800ae8e:	f04f 0400 	mov.w	r4, #0
 800ae92:	f04f 0500 	mov.w	r5, #0
 800ae96:	009d      	lsls	r5, r3, #2
 800ae98:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800ae9c:	0094      	lsls	r4, r2, #2
 800ae9e:	4622      	mov	r2, r4
 800aea0:	462b      	mov	r3, r5
 800aea2:	1812      	adds	r2, r2, r0
 800aea4:	eb41 0303 	adc.w	r3, r1, r3
 800aea8:	f04f 0000 	mov.w	r0, #0
 800aeac:	f04f 0100 	mov.w	r1, #0
 800aeb0:	00d9      	lsls	r1, r3, #3
 800aeb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800aeb6:	00d0      	lsls	r0, r2, #3
 800aeb8:	4602      	mov	r2, r0
 800aeba:	460b      	mov	r3, r1
 800aebc:	4610      	mov	r0, r2
 800aebe:	4619      	mov	r1, r3
 800aec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aec2:	461a      	mov	r2, r3
 800aec4:	f04f 0300 	mov.w	r3, #0
 800aec8:	f7f5 fe20 	bl	8000b0c <__aeabi_uldivmod>
 800aecc:	4602      	mov	r2, r0
 800aece:	460b      	mov	r3, r1
 800aed0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	temp64z = pconfig->noise_margin * pxmonitor->VL53LX_p_004;
 800aed4:	6a3b      	ldr	r3, [r7, #32]
 800aed6:	689b      	ldr	r3, [r3, #8]
 800aed8:	697a      	ldr	r2, [r7, #20]
 800aeda:	8ad2      	ldrh	r2, [r2, #22]
 800aedc:	fb02 f303 	mul.w	r3, r2, r3
 800aee0:	461a      	mov	r2, r3
 800aee2:	f04f 0300 	mov.w	r3, #0
 800aee6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	if (temp64z == 0)
 800aeea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800aeee:	4313      	orrs	r3, r2
 800aef0:	d105      	bne.n	800aefe <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x15c>
		temp64z = 1;
 800aef2:	f04f 0201 	mov.w	r2, #1
 800aef6:	f04f 0300 	mov.w	r3, #0
 800aefa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	temp64a = temp64a * 1000 * 256;
 800aefe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800af02:	4602      	mov	r2, r0
 800af04:	460b      	mov	r3, r1
 800af06:	f04f 0400 	mov.w	r4, #0
 800af0a:	f04f 0500 	mov.w	r5, #0
 800af0e:	015d      	lsls	r5, r3, #5
 800af10:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800af14:	0154      	lsls	r4, r2, #5
 800af16:	4622      	mov	r2, r4
 800af18:	462b      	mov	r3, r5
 800af1a:	1a12      	subs	r2, r2, r0
 800af1c:	eb63 0301 	sbc.w	r3, r3, r1
 800af20:	f04f 0400 	mov.w	r4, #0
 800af24:	f04f 0500 	mov.w	r5, #0
 800af28:	009d      	lsls	r5, r3, #2
 800af2a:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800af2e:	0094      	lsls	r4, r2, #2
 800af30:	4622      	mov	r2, r4
 800af32:	462b      	mov	r3, r5
 800af34:	1812      	adds	r2, r2, r0
 800af36:	eb41 0303 	adc.w	r3, r1, r3
 800af3a:	f04f 0000 	mov.w	r0, #0
 800af3e:	f04f 0100 	mov.w	r1, #0
 800af42:	02d9      	lsls	r1, r3, #11
 800af44:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800af48:	02d0      	lsls	r0, r2, #11
 800af4a:	4602      	mov	r2, r0
 800af4c:	460b      	mov	r3, r1
 800af4e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = do_division_u(temp64a, temp64z);
 800af52:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800af56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800af5a:	f7f5 fdd7 	bl	8000b0c <__aeabi_uldivmod>
 800af5e:	4602      	mov	r2, r0
 800af60:	460b      	mov	r3, r1
 800af62:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = temp64a * 1000 * 256;
 800af66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800af6a:	4602      	mov	r2, r0
 800af6c:	460b      	mov	r3, r1
 800af6e:	f04f 0400 	mov.w	r4, #0
 800af72:	f04f 0500 	mov.w	r5, #0
 800af76:	015d      	lsls	r5, r3, #5
 800af78:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800af7c:	0154      	lsls	r4, r2, #5
 800af7e:	4622      	mov	r2, r4
 800af80:	462b      	mov	r3, r5
 800af82:	1a12      	subs	r2, r2, r0
 800af84:	eb63 0301 	sbc.w	r3, r3, r1
 800af88:	f04f 0400 	mov.w	r4, #0
 800af8c:	f04f 0500 	mov.w	r5, #0
 800af90:	009d      	lsls	r5, r3, #2
 800af92:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800af96:	0094      	lsls	r4, r2, #2
 800af98:	4622      	mov	r2, r4
 800af9a:	462b      	mov	r3, r5
 800af9c:	1812      	adds	r2, r2, r0
 800af9e:	eb41 0303 	adc.w	r3, r1, r3
 800afa2:	f04f 0000 	mov.w	r0, #0
 800afa6:	f04f 0100 	mov.w	r1, #0
 800afaa:	02d9      	lsls	r1, r3, #11
 800afac:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800afb0:	02d0      	lsls	r0, r2, #11
 800afb2:	4602      	mov	r2, r0
 800afb4:	460b      	mov	r3, r1
 800afb6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = do_division_u(temp64a, temp64z);
 800afba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800afbe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800afc2:	f7f5 fda3 	bl	8000b0c <__aeabi_uldivmod>
 800afc6:	4602      	mov	r2, r0
 800afc8:	460b      	mov	r3, r1
 800afca:	e9c7 2302 	strd	r2, r3, [r7, #8]

	pint->required_samples = (uint32_t)temp64a;
 800afce:	68ba      	ldr	r2, [r7, #8]
 800afd0:	69fb      	ldr	r3, [r7, #28]
 800afd2:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800afd4:	69fb      	ldr	r3, [r7, #28]
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	2b01      	cmp	r3, #1
 800afda:	d802      	bhi.n	800afe2 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x240>
		pint->required_samples = 2;
 800afdc:	69fb      	ldr	r3, [r7, #28]
 800afde:	2202      	movs	r2, #2
 800afe0:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800afe2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3740      	adds	r7, #64	; 0x40
 800afea:	46bd      	mov	sp, r7
 800afec:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800aff0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53LX_smudge_corrector_config_t	*pconfig,
	VL53LX_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b096      	sub	sp, #88	; 0x58
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	607a      	str	r2, [r7, #4]
 800affc:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800affe:	2300      	movs	r3, #0
 800b000:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	3318      	adds	r3, #24
 800b008:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t  orig_y_gradient;
	uint8_t  histo_merge_nb;
	uint8_t  i;
	int32_t  itemp32;
	uint32_t SmudgeFactor;
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800b00a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b00c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b010:	633b      	str	r3, [r7, #48]	; 0x30
	VL53LX_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800b012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b014:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 800b018:	331c      	adds	r3, #28
 800b01a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t incXtalk, cval;

	LOG_FUNCTION_START("");


	if (add_smudge == 1) {
 800b01c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800b020:	2b01      	cmp	r3, #1
 800b022:	d107      	bne.n	800b034 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x44>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	889b      	ldrh	r3, [r3, #4]
 800b028:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	609a      	str	r2, [r3, #8]
 800b032:	e002      	b.n	800b03a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x4a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	68ba      	ldr	r2, [r7, #8]
 800b038:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800b03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03c:	689b      	ldr	r3, [r3, #8]
 800b03e:	653b      	str	r3, [r7, #80]	; 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800b040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b042:	899b      	ldrh	r3, [r3, #12]
 800b044:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800b048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04a:	89db      	ldrh	r3, [r3, #14]
 800b04c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b056:	2b00      	cmp	r3, #0
 800b058:	d004      	beq.n	800b064 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x74>
		(pconfig->scaler_calc_method == 1)) &&
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800b060:	2b01      	cmp	r3, #1
 800b062:	d126      	bne.n	800b0b2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800b064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b066:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d022      	beq.n	800b0b2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800b06c:	f107 0317 	add.w	r3, r7, #23
 800b070:	4619      	mov	r1, r3
 800b072:	68f8      	ldr	r0, [r7, #12]
 800b074:	f000 fe75 	bl	800bd62 <VL53LX_compute_histo_merge_nb>

		if (histo_merge_nb == 0)
 800b078:	7dfb      	ldrb	r3, [r7, #23]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d101      	bne.n	800b082 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x92>
			histo_merge_nb = 1;
 800b07e:	2301      	movs	r3, #1
 800b080:	75fb      	strb	r3, [r7, #23]
		if (pdev->tuning_parms.tp_hist_merge != 1)
 800b082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b084:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 800b088:	2b01      	cmp	r3, #1
 800b08a:	d003      	beq.n	800b094 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xa4>
			orig_xtalk_offset =
 800b08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	653b      	str	r3, [r7, #80]	; 0x50
 800b092:	e006      	b.n	800b0a2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800b094:	7dfb      	ldrb	r3, [r7, #23]
 800b096:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800b098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b09a:	3202      	adds	r2, #2
 800b09c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0a0:	653b      	str	r3, [r7, #80]	; 0x50

		orig_x_gradient =
 800b0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a4:	889b      	ldrh	r3, [r3, #4]
 800b0a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800b0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ac:	88db      	ldrh	r3, [r3, #6]
 800b0ae:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d10a      	bne.n	800b0d2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
 800b0bc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d106      	bne.n	800b0d2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
		pout->gradient_zero_flag |= 0x01;
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	795b      	ldrb	r3, [r3, #5]
 800b0c8:	f043 0301 	orr.w	r3, r3, #1
 800b0cc:	b2da      	uxtb	r2, r3
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d10a      	bne.n	800b0f2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
 800b0dc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d106      	bne.n	800b0f2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
		pout->gradient_zero_flag |= 0x02;
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	795b      	ldrb	r3, [r3, #5]
 800b0e8:	f043 0302 	orr.w	r3, r3, #2
 800b0ec:	b2da      	uxtb	r2, r3
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800b0f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d101      	bne.n	800b0fc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x10c>
		orig_xtalk_offset = 1;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	653b      	str	r3, [r7, #80]	; 0x50



	if (pconfig->user_scaler_set == 1) {
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b102:	2b01      	cmp	r3, #1
 800b104:	d108      	bne.n	800b118 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x128>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b10a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b112:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800b116:	e019      	b.n	800b14c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x15c>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800b118:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800b11c:	019b      	lsls	r3, r3, #6
 800b11e:	461a      	mov	r2, r3
 800b120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b122:	fbb2 f3f3 	udiv	r3, r2, r3
 800b126:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800b130:	855a      	strh	r2, [r3, #42]	; 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800b132:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800b136:	019b      	lsls	r3, r3, #6
 800b138:	461a      	mov	r2, r3
 800b13a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b13c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b140:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800b14a:	859a      	strh	r2, [r3, #44]	; 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b152:	2b00      	cmp	r3, #0
 800b154:	d12a      	bne.n	800b1ac <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1bc>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	689b      	ldr	r3, [r3, #8]
 800b15a:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 800b15e:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800b162:	647b      	str	r3, [r7, #68]	; 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800b164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b166:	119b      	asrs	r3, r3, #6
 800b168:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800b16a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b16c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b170:	db02      	blt.n	800b178 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x188>
			itemp32 = 0xFFFF;
 800b172:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b176:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800b178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b17a:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	689b      	ldr	r3, [r3, #8]
 800b184:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800b188:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800b18c:	647b      	str	r3, [r7, #68]	; 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800b18e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b190:	119b      	asrs	r3, r3, #6
 800b192:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800b194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b19a:	db02      	blt.n	800b1a2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1b2>
			itemp32 = 0xFFFF;
 800b19c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b1a0:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800b1a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1a4:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	81da      	strh	r2, [r3, #14]
 800b1aa:	e042      	b.n	800b232 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x242>
	} else if (pconfig->scaler_calc_method == 1) {
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1b2:	2b01      	cmp	r3, #1
 800b1b4:	d13d      	bne.n	800b232 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x242>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800b1ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b1bc:	1ad3      	subs	r3, r2, r3
 800b1be:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800b1c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	da00      	bge.n	800b1c8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1d8>
 800b1c6:	330f      	adds	r3, #15
 800b1c8:	111b      	asrs	r3, r3, #4
 800b1ca:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800b1cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800b1d2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800b1d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1d8:	4413      	add	r3, r2
 800b1da:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800b1dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1e2:	db02      	blt.n	800b1ea <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1fa>
			itemp32 = 0xFFFF;
 800b1e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b1e8:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800b1ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1ec:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800b1f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b1f8:	1ad3      	subs	r3, r2, r3
 800b1fa:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800b1fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1fe:	4a52      	ldr	r2, [pc, #328]	; (800b348 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x358>)
 800b200:	fb82 1203 	smull	r1, r2, r2, r3
 800b204:	1152      	asrs	r2, r2, #5
 800b206:	17db      	asrs	r3, r3, #31
 800b208:	1ad3      	subs	r3, r2, r3
 800b20a:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800b20c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b20e:	009b      	lsls	r3, r3, #2
 800b210:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800b212:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800b216:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b218:	4413      	add	r3, r2
 800b21a:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800b21c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b21e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b222:	db02      	blt.n	800b22a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x23a>
			itemp32 = 0xFFFF;
 800b224:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b228:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800b22a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b22c:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	81da      	strh	r2, [r3, #14]
	}


	if ((pconfig->smudge_corr_apply_enabled == 1) &&
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	785b      	ldrb	r3, [r3, #1]
 800b236:	2b01      	cmp	r3, #1
 800b238:	d178      	bne.n	800b32c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>
 800b23a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800b23e:	2b01      	cmp	r3, #1
 800b240:	d074      	beq.n	800b32c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>
		(soft_update != 1)) {

		pout->new_xtalk_applied_flag = 1;
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	2201      	movs	r2, #1
 800b246:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	689b      	ldr	r3, [r3, #8]
 800b24c:	62bb      	str	r3, [r7, #40]	; 0x28

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800b24e:	f107 0317 	add.w	r3, r7, #23
 800b252:	4619      	mov	r1, r3
 800b254:	68f8      	ldr	r0, [r7, #12]
 800b256:	f000 fd84 	bl	800bd62 <VL53LX_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800b25a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b25c:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 800b260:	627b      	str	r3, [r7, #36]	; 0x24
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 800b262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b264:	3308      	adds	r3, #8
 800b266:	643b      	str	r3, [r7, #64]	; 0x40
		if ((histo_merge_nb > 0) &&
 800b268:	7dfb      	ldrb	r3, [r7, #23]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d042      	beq.n	800b2f4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800b26e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b270:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
		if ((histo_merge_nb > 0) &&
 800b274:	2b01      	cmp	r3, #1
 800b276:	d13d      	bne.n	800b2f4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800b278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d03a      	beq.n	800b2f4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(nXtalk != 0)) {
			cXtalk =
 800b27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	623b      	str	r3, [r7, #32]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 800b284:	6a3b      	ldr	r3, [r7, #32]
 800b286:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b28a:	fb02 f203 	mul.w	r2, r2, r3
 800b28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b290:	fbb2 f3f3 	udiv	r3, r2, r3
 800b294:	61fb      	str	r3, [r7, #28]
			if ((max ==  0)||
 800b296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d004      	beq.n	800b2a6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2b6>
				(SmudgeFactor >= pconfig->max_smudge_factor))
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			if ((max ==  0)||
 800b2a0:	69fa      	ldr	r2, [r7, #28]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d303      	bcc.n	800b2ae <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2be>
				pout->new_xtalk_applied_flag = 0;
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	719a      	strb	r2, [r3, #6]
 800b2ac:	e022      	b.n	800b2f4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			else {
				incXtalk = nXtalk / max;
 800b2ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2b6:	61bb      	str	r3, [r7, #24]
				cval = 0;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	63fb      	str	r3, [r7, #60]	; 0x3c
				for (i = 0; i < max-1; i++) {
 800b2bc:	2300      	movs	r3, #0
 800b2be:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800b2c2:	e00e      	b.n	800b2e2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2f2>
					cval += incXtalk;
 800b2c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b2c6:	69bb      	ldr	r3, [r7, #24]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
					*pcpo = cval;
 800b2cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b2d0:	601a      	str	r2, [r3, #0]
					pcpo++;
 800b2d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2d4:	3304      	adds	r3, #4
 800b2d6:	643b      	str	r3, [r7, #64]	; 0x40
				for (i = 0; i < max-1; i++) {
 800b2d8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800b2dc:	3301      	adds	r3, #1
 800b2de:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800b2e2:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800b2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d3ea      	bcc.n	800b2c4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2d4>
				}
				*pcpo = nXtalk;
 800b2ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2f2:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	799b      	ldrb	r3, [r3, #6]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d017      	beq.n	800b32c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800b300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b302:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800b30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30c:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800b314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b316:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	789b      	ldrb	r3, [r3, #2]
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	d105      	bne.n	800b32c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>

			pconfig->smudge_corr_apply_enabled = 0;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2200      	movs	r2, #0
 800b324:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 800b32c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800b330:	2b01      	cmp	r3, #1
 800b332:	d002      	beq.n	800b33a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x34a>
		pout->smudge_corr_valid = 1;
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	2201      	movs	r2, #1
 800b338:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800b33a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3758      	adds	r7, #88	; 0x58
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	66666667 	.word	0x66666667

0800b34c <VL53LX_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53LX_Error VL53LX_dynamic_xtalk_correction_corrector(
	VL53LX_DEV                          Dev
	)
{
 800b34c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b350:	b09a      	sub	sp, #104	; 0x68
 800b352:	af02      	add	r7, sp, #8
 800b354:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b356:	2300      	movs	r3, #0
 800b358:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	3318      	adds	r3, #24
 800b360:	64bb      	str	r3, [r7, #72]	; 0x48
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800b368:	647b      	str	r3, [r7, #68]	; 0x44
	VL53LX_smudge_corrector_config_t *pconfig =
 800b36a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b36c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b370:	3314      	adds	r3, #20
 800b372:	643b      	str	r3, [r7, #64]	; 0x40
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800b374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b376:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b37a:	3318      	adds	r3, #24
 800b37c:	63fb      	str	r3, [r7, #60]	; 0x3c
				&(pdev->smudge_corrector_internals);
	VL53LX_smudge_corrector_data_t *pout =
 800b37e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b380:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b384:	63bb      	str	r3, [r7, #56]	; 0x38
			&(pres->range_results.smudge_corrector_data);
	VL53LX_range_results_t  *pR = &(pres->range_results);
 800b386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b388:	637b      	str	r3, [r7, #52]	; 0x34
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800b38a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b38c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b390:	633b      	str	r3, [r7, #48]	; 0x30

	uint8_t	run_smudge_detection = 0;
 800b392:	2300      	movs	r3, #0
 800b394:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t merging_complete = 0;
 800b398:	2300      	movs	r3, #0
 800b39a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t	run_nodetect = 0;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t ambient_check = 0;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	int32_t itemp32 = 0;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	65bb      	str	r3, [r7, #88]	; 0x58
	uint64_t utemp64 = 0;
 800b3ae:	f04f 0200 	mov.w	r2, #0
 800b3b2:	f04f 0300 	mov.w	r3, #0
 800b3b6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint8_t continue_processing = CONT_CONTINUE;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint32_t xtalk_offset_out = 0;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t xtalk_offset_in = 0;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	61fb      	str	r3, [r7, #28]
	uint32_t current_xtalk = 0;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	61bb      	str	r3, [r7, #24]
	uint32_t smudge_margin_adjusted = 0;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	617b      	str	r3, [r7, #20]
	uint8_t i = 0;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t nodetect_index = 0;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t histo_merge_nb;


	LOG_FUNCTION_START("");

	VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800b3dc:	f107 030b 	add.w	r3, r7, #11
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 fcbd 	bl	800bd62 <VL53LX_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) ||
 800b3e8:	7afb      	ldrb	r3, [r7, #11]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d004      	beq.n	800b3f8 <VL53LX_dynamic_xtalk_correction_corrector+0xac>
		(pdev->tuning_parms.tp_hist_merge != 1))
 800b3ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3f0:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
	if ((histo_merge_nb == 0) ||
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d001      	beq.n	800b3fc <VL53LX_dynamic_xtalk_correction_corrector+0xb0>
		histo_merge_nb = 1;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	72fb      	strb	r3, [r7, #11]


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800b3fc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b3fe:	f000 faeb 	bl	800b9d8 <VL53LX_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800b402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b406:	2b00      	cmp	r3, #0
 800b408:	d009      	beq.n	800b41e <VL53LX_dynamic_xtalk_correction_corrector+0xd2>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb)  >
 800b40a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b40e:	7afa      	ldrb	r2, [r7, #11]
 800b410:	fb02 f303 	mul.w	r3, r2, r3
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800b414:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b416:	f8b2 2178 	ldrh.w	r2, [r2, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d901      	bls.n	800b422 <VL53LX_dynamic_xtalk_correction_corrector+0xd6>
 800b41e:	2301      	movs	r3, #1
 800b420:	e000      	b.n	800b424 <VL53LX_dynamic_xtalk_correction_corrector+0xd8>
 800b422:	2300      	movs	r3, #0
 800b424:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d


	merging_complete =
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800b428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b42a:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d105      	bne.n	800b43e <VL53LX_dynamic_xtalk_correction_corrector+0xf2>
		(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800b432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b434:	f893 2184 	ldrb.w	r2, [r3, #388]	; 0x184
 800b438:	7afb      	ldrb	r3, [r7, #11]
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d101      	bne.n	800b442 <VL53LX_dynamic_xtalk_correction_corrector+0xf6>
 800b43e:	2301      	movs	r3, #1
 800b440:	e000      	b.n	800b444 <VL53LX_dynamic_xtalk_correction_corrector+0xf8>
 800b442:	2300      	movs	r3, #0
	merging_complete =
 800b444:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 800b448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b44a:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	d10e      	bne.n	800b46e <VL53LX_dynamic_xtalk_correction_corrector+0x122>
		(pconfig->smudge_corr_enabled == 1) &&
 800b450:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b454:	2b00      	cmp	r3, #0
 800b456:	d00a      	beq.n	800b46e <VL53LX_dynamic_xtalk_correction_corrector+0x122>
		(pR->xmonitor.range_status
 800b458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b45a:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
		ambient_check &&
 800b45e:	2b09      	cmp	r3, #9
 800b460:	d105      	bne.n	800b46e <VL53LX_dynamic_xtalk_correction_corrector+0x122>
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800b462:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b466:	2b00      	cmp	r3, #0
 800b468:	d001      	beq.n	800b46e <VL53LX_dynamic_xtalk_correction_corrector+0x122>
 800b46a:	2301      	movs	r3, #1
 800b46c:	e000      	b.n	800b470 <VL53LX_dynamic_xtalk_correction_corrector+0x124>
 800b46e:	2300      	movs	r3, #0
	run_smudge_detection =
 800b470:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		merging_complete;


	if ((pR->xmonitor.range_status
 800b474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b476:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 800b47a:	2b09      	cmp	r3, #9
 800b47c:	f000 809e 	beq.w	800b5bc <VL53LX_dynamic_xtalk_correction_corrector+0x270>
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 800b480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b482:	781b      	ldrb	r3, [r3, #0]
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800b484:	2b01      	cmp	r3, #1
 800b486:	f040 8099 	bne.w	800b5bc <VL53LX_dynamic_xtalk_correction_corrector+0x270>

		run_nodetect = 2;
 800b48a:	2302      	movs	r3, #2
 800b48c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		for (i = 0; i < pR->active_results; i++) {
 800b490:	2300      	movs	r3, #0
 800b492:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800b496:	e02d      	b.n	800b4f4 <VL53LX_dynamic_xtalk_correction_corrector+0x1a8>
			if (pR->VL53LX_p_003[i].range_status ==
 800b498:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b49c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b49e:	214c      	movs	r1, #76	; 0x4c
 800b4a0:	fb01 f303 	mul.w	r3, r1, r3
 800b4a4:	4413      	add	r3, r2
 800b4a6:	335e      	adds	r3, #94	; 0x5e
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	2b09      	cmp	r3, #9
 800b4ac:	d11d      	bne.n	800b4ea <VL53LX_dynamic_xtalk_correction_corrector+0x19e>
				VL53LX_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53LX_p_003[i].median_range_mm
 800b4ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b4b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4b4:	214c      	movs	r1, #76	; 0x4c
 800b4b6:	fb01 f303 	mul.w	r3, r1, r3
 800b4ba:	4413      	add	r3, r2
 800b4bc:	335a      	adds	r3, #90	; 0x5a
 800b4be:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4c2:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 800b4c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4c6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
				if (pR->VL53LX_p_003[i].median_range_mm
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	dc03      	bgt.n	800b4d4 <VL53LX_dynamic_xtalk_correction_corrector+0x188>
					run_nodetect = 0;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b4d2:	e00a      	b.n	800b4ea <VL53LX_dynamic_xtalk_correction_corrector+0x19e>
				} else {
					if (run_nodetect == 2) {
 800b4d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4d8:	2b02      	cmp	r3, #2
 800b4da:	d106      	bne.n	800b4ea <VL53LX_dynamic_xtalk_correction_corrector+0x19e>
						run_nodetect = 1;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						nodetect_index = i;
 800b4e2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b4e6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		for (i = 0; i < pR->active_results; i++) {
 800b4ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800b4f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4f6:	7c9b      	ldrb	r3, [r3, #18]
 800b4f8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d3cb      	bcc.n	800b498 <VL53LX_dynamic_xtalk_correction_corrector+0x14c>
					}
				}
			}
		}

		if (run_nodetect == 2)
 800b500:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b504:	2b02      	cmp	r3, #2
 800b506:	d102      	bne.n	800b50e <VL53LX_dynamic_xtalk_correction_corrector+0x1c2>

			run_nodetect = 0;
 800b508:	2300      	movs	r3, #0
 800b50a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		amr =
		pR->VL53LX_p_003[nodetect_index].ambient_count_rate_mcps;
 800b50e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
		amr =
 800b512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b514:	214c      	movs	r1, #76	; 0x4c
 800b516:	fb01 f303 	mul.w	r3, r1, r3
 800b51a:	4413      	add	r3, r2
 800b51c:	3348      	adds	r3, #72	; 0x48
 800b51e:	881b      	ldrh	r3, [r3, #0]
 800b520:	827b      	strh	r3, [r7, #18]

		if (run_nodetect == 1) {
 800b522:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b526:	2b01      	cmp	r3, #1
 800b528:	d148      	bne.n	800b5bc <VL53LX_dynamic_xtalk_correction_corrector+0x270>




			utemp64 = 1000 * ((uint64_t)amr);
 800b52a:	8a78      	ldrh	r0, [r7, #18]
 800b52c:	f04f 0100 	mov.w	r1, #0
 800b530:	4602      	mov	r2, r0
 800b532:	460b      	mov	r3, r1
 800b534:	f04f 0400 	mov.w	r4, #0
 800b538:	f04f 0500 	mov.w	r5, #0
 800b53c:	015d      	lsls	r5, r3, #5
 800b53e:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800b542:	0154      	lsls	r4, r2, #5
 800b544:	4622      	mov	r2, r4
 800b546:	462b      	mov	r3, r5
 800b548:	1a12      	subs	r2, r2, r0
 800b54a:	eb63 0301 	sbc.w	r3, r3, r1
 800b54e:	f04f 0400 	mov.w	r4, #0
 800b552:	f04f 0500 	mov.w	r5, #0
 800b556:	009d      	lsls	r5, r3, #2
 800b558:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800b55c:	0094      	lsls	r4, r2, #2
 800b55e:	4622      	mov	r2, r4
 800b560:	462b      	mov	r3, r5
 800b562:	1812      	adds	r2, r2, r0
 800b564:	eb41 0303 	adc.w	r3, r1, r3
 800b568:	f04f 0000 	mov.w	r0, #0
 800b56c:	f04f 0100 	mov.w	r1, #0
 800b570:	00d9      	lsls	r1, r3, #3
 800b572:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b576:	00d0      	lsls	r0, r2, #3
 800b578:	4602      	mov	r2, r0
 800b57a:	460b      	mov	r3, r1
 800b57c:	e9c7 2308 	strd	r2, r3, [r7, #32]


			utemp64 = utemp64 << 9;
 800b580:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b584:	f04f 0200 	mov.w	r2, #0
 800b588:	f04f 0300 	mov.w	r3, #0
 800b58c:	024b      	lsls	r3, r1, #9
 800b58e:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800b592:	0242      	lsls	r2, r0, #9
 800b594:	e9c7 2308 	strd	r2, r3, [r7, #32]


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800b598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b59a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b59c:	461a      	mov	r2, r3
 800b59e:	f04f 0300 	mov.w	r3, #0
 800b5a2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b5a6:	4299      	cmp	r1, r3
 800b5a8:	bf08      	it	eq
 800b5aa:	4290      	cmpeq	r0, r2
 800b5ac:	d203      	bcs.n	800b5b6 <VL53LX_dynamic_xtalk_correction_corrector+0x26a>
				run_nodetect = 1;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b5b4:	e002      	b.n	800b5bc <VL53LX_dynamic_xtalk_correction_corrector+0x270>
			else
				run_nodetect = 0;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		}
	}


	if (run_smudge_detection) {
 800b5bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	f000 8101 	beq.w	800b7c8 <VL53LX_dynamic_xtalk_correction_corrector+0x47c>

		pint->nodetect_counter = 0;
 800b5c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	611a      	str	r2, [r3, #16]


		VL53LX_dynamic_xtalk_correction_calc_required_samples(Dev);
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f7ff fbe8 	bl	800ada2 <VL53LX_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 800b5d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5d4:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800b5d8:	61fb      	str	r3, [r7, #28]
			pR->xmonitor.VL53LX_p_009;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800b5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	60fb      	str	r3, [r7, #12]
		current_xtalk = ((uint32_t)cco) << 2;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	61bb      	str	r3, [r7, #24]


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800b5e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5e8:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	617b      	str	r3, [r7, #20]


		itemp32 = xtalk_offset_in - current_xtalk +
 800b5ee:	69fa      	ldr	r2, [r7, #28]
 800b5f0:	69bb      	ldr	r3, [r7, #24]
 800b5f2:	1ad2      	subs	r2, r2, r3
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	4413      	add	r3, r2
 800b5f8:	65bb      	str	r3, [r7, #88]	; 0x58
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800b5fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	da02      	bge.n	800b606 <VL53LX_dynamic_xtalk_correction_corrector+0x2ba>
			itemp32 = itemp32 * (-1);
 800b600:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b602:	425b      	negs	r3, r3
 800b604:	65bb      	str	r3, [r7, #88]	; 0x58


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800b606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b608:	699b      	ldr	r3, [r3, #24]
 800b60a:	461a      	mov	r2, r3
 800b60c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b60e:	4293      	cmp	r3, r2
 800b610:	dd0c      	ble.n	800b62c <VL53LX_dynamic_xtalk_correction_corrector+0x2e0>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 800b612:	69ba      	ldr	r2, [r7, #24]
					(int32_t)smudge_margin_adjusted)) {
 800b614:	697b      	ldr	r3, [r7, #20]
				((int32_t)current_xtalk -
 800b616:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	429a      	cmp	r2, r3
 800b61c:	da03      	bge.n	800b626 <VL53LX_dynamic_xtalk_correction_corrector+0x2da>
				pout->single_xtalk_delta_flag = 1;
 800b61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b620:	2201      	movs	r2, #1
 800b622:	709a      	strb	r2, [r3, #2]
 800b624:	e002      	b.n	800b62c <VL53LX_dynamic_xtalk_correction_corrector+0x2e0>
			} else {
				pout->single_xtalk_delta_flag = 2;
 800b626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b628:	2202      	movs	r2, #2
 800b62a:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 800b62c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	1c5a      	adds	r2, r3, #1
 800b632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b634:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 800b636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b638:	681a      	ldr	r2, [r3, #0]
 800b63a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b63c:	695b      	ldr	r3, [r3, #20]
 800b63e:	429a      	cmp	r2, r3
 800b640:	d906      	bls.n	800b650 <VL53LX_dynamic_xtalk_correction_corrector+0x304>
			pout->sample_limit_exceeded_flag = 1;
 800b642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b644:	2201      	movs	r2, #1
 800b646:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 800b648:	2302      	movs	r3, #2
 800b64a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800b64e:	e00d      	b.n	800b66c <VL53LX_dynamic_xtalk_correction_corrector+0x320>
		} else {
			pint->accumulator = pint->accumulator +
 800b650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b652:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b656:	69fb      	ldr	r3, [r7, #28]
 800b658:	461a      	mov	r2, r3
 800b65a:	f04f 0300 	mov.w	r3, #0
 800b65e:	eb10 0802 	adds.w	r8, r0, r2
 800b662:	eb41 0903 	adc.w	r9, r1, r3
 800b666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b668:	e9c3 8902 	strd	r8, r9, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 800b66c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	429a      	cmp	r2, r3
 800b676:	d202      	bcs.n	800b67e <VL53LX_dynamic_xtalk_correction_corrector+0x332>
			continue_processing = CONT_NEXT_LOOP;
 800b678:	2301      	movs	r3, #1
 800b67a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 800b67e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b680:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	461a      	mov	r2, r3
 800b68a:	f04f 0300 	mov.w	r3, #0
 800b68e:	f7f5 fa3d 	bl	8000b0c <__aeabi_uldivmod>
 800b692:	4602      	mov	r2, r0
 800b694:	460b      	mov	r3, r1
		xtalk_offset_out =
 800b696:	4613      	mov	r3, r2
 800b698:	653b      	str	r3, [r7, #80]	; 0x50
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 800b69a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b69c:	69bb      	ldr	r3, [r7, #24]
 800b69e:	1ad2      	subs	r2, r2, r3
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	4413      	add	r3, r2
 800b6a4:	65bb      	str	r3, [r7, #88]	; 0x58
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800b6a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	da02      	bge.n	800b6b2 <VL53LX_dynamic_xtalk_correction_corrector+0x366>
			itemp32 = itemp32 * (-1);
 800b6ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b6ae:	425b      	negs	r3, r3
 800b6b0:	65bb      	str	r3, [r7, #88]	; 0x58

		if (continue_processing == CONT_CONTINUE &&
 800b6b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d112      	bne.n	800b6e0 <VL53LX_dynamic_xtalk_correction_corrector+0x394>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800b6ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6bc:	69db      	ldr	r3, [r3, #28]
 800b6be:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800b6c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	db0c      	blt.n	800b6e0 <VL53LX_dynamic_xtalk_correction_corrector+0x394>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 800b6c6:	69ba      	ldr	r2, [r7, #24]
					(int32_t)smudge_margin_adjusted))
 800b6c8:	697b      	ldr	r3, [r7, #20]
				((int32_t)current_xtalk -
 800b6ca:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 800b6cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	da03      	bge.n	800b6da <VL53LX_dynamic_xtalk_correction_corrector+0x38e>
				pout->averaged_xtalk_delta_flag = 1;
 800b6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d4:	2201      	movs	r2, #1
 800b6d6:	70da      	strb	r2, [r3, #3]
 800b6d8:	e002      	b.n	800b6e0 <VL53LX_dynamic_xtalk_correction_corrector+0x394>
			else
				pout->averaged_xtalk_delta_flag = 2;
 800b6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6dc:	2202      	movs	r2, #2
 800b6de:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 800b6e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d108      	bne.n	800b6fa <VL53LX_dynamic_xtalk_correction_corrector+0x3ae>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 800b6e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6ea:	69db      	ldr	r3, [r3, #28]
 800b6ec:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800b6ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	da02      	bge.n	800b6fa <VL53LX_dynamic_xtalk_correction_corrector+0x3ae>
			)

			continue_processing = CONT_RESET;
 800b6f4:	2302      	movs	r3, #2
 800b6f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57



		pout->smudge_corr_clipped = 0;
 800b6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 800b700:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b704:	2b00      	cmp	r3, #0
 800b706:	d111      	bne.n	800b72c <VL53LX_dynamic_xtalk_correction_corrector+0x3e0>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800b708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b70a:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d00d      	beq.n	800b72c <VL53LX_dynamic_xtalk_correction_corrector+0x3e0>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800b710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b712:	6a1b      	ldr	r3, [r3, #32]
 800b714:	7afa      	ldrb	r2, [r7, #11]
 800b716:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 800b71a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d905      	bls.n	800b72c <VL53LX_dynamic_xtalk_correction_corrector+0x3e0>
				pout->smudge_corr_clipped = 1;
 800b720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b722:	2201      	movs	r2, #1
 800b724:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 800b726:	2302      	movs	r3, #2
 800b728:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 800b72c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b72e:	7c1b      	ldrb	r3, [r3, #16]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d007      	beq.n	800b744 <VL53LX_dynamic_xtalk_correction_corrector+0x3f8>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 800b734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b736:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 800b738:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d902      	bls.n	800b744 <VL53LX_dynamic_xtalk_correction_corrector+0x3f8>
			xtalk_offset_out =
 800b73e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b740:	68db      	ldr	r3, [r3, #12]
 800b742:	653b      	str	r3, [r7, #80]	; 0x50
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800b744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b746:	7c1b      	ldrb	r3, [r3, #16]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d107      	bne.n	800b75c <VL53LX_dynamic_xtalk_correction_corrector+0x410>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 800b74c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b74e:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800b750:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b752:	429a      	cmp	r2, r3
 800b754:	d202      	bcs.n	800b75c <VL53LX_dynamic_xtalk_correction_corrector+0x410>
			xtalk_offset_out =
 800b756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b758:	68db      	ldr	r3, [r3, #12]
 800b75a:	653b      	str	r3, [r7, #80]	; 0x50
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 800b75c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b75e:	089b      	lsrs	r3, r3, #2
 800b760:	653b      	str	r3, [r7, #80]	; 0x50
		if (xtalk_offset_out > 0x3FFFF)
 800b762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b764:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b768:	d301      	bcc.n	800b76e <VL53LX_dynamic_xtalk_correction_corrector+0x422>
			xtalk_offset_out = 0x3FFFF;
 800b76a:	4b3f      	ldr	r3, [pc, #252]	; (800b868 <VL53LX_dynamic_xtalk_correction_corrector+0x51c>)
 800b76c:	653b      	str	r3, [r7, #80]	; 0x50


		if (continue_processing == CONT_CONTINUE) {
 800b76e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b772:	2b00      	cmp	r3, #0
 800b774:	d10d      	bne.n	800b792 <VL53LX_dynamic_xtalk_correction_corrector+0x446>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800b776:	2300      	movs	r3, #0
 800b778:	9301      	str	r3, [sp, #4]
 800b77a:	2301      	movs	r3, #1
 800b77c:	9300      	str	r3, [sp, #0]
 800b77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b780:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b782:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f7ff fc33 	bl	800aff0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 800b78a:	2302      	movs	r3, #2
 800b78c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800b790:	e009      	b.n	800b7a6 <VL53LX_dynamic_xtalk_correction_corrector+0x45a>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800b792:	2301      	movs	r3, #1
 800b794:	9301      	str	r3, [sp, #4]
 800b796:	2301      	movs	r3, #1
 800b798:	9300      	str	r3, [sp, #0]
 800b79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b79c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b79e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f7ff fc25 	bl	800aff0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800b7a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b7aa:	2b02      	cmp	r3, #2
 800b7ac:	d10c      	bne.n	800b7c8 <VL53LX_dynamic_xtalk_correction_corrector+0x47c>
			pint->accumulator = 0;
 800b7ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b7b0:	f04f 0200 	mov.w	r2, #0
 800b7b4:	f04f 0300 	mov.w	r3, #0
 800b7b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800b7bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7be:	2200      	movs	r2, #0
 800b7c0:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800b7c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (run_nodetect == 1) {
 800b7ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d140      	bne.n	800b858 <VL53LX_dynamic_xtalk_correction_corrector+0x50c>

		pint->nodetect_counter += 1;
 800b7d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7d8:	691b      	ldr	r3, [r3, #16]
 800b7da:	1c5a      	adds	r2, r3, #1
 800b7dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7de:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800b7e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7e2:	691a      	ldr	r2, [r3, #16]
 800b7e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d202      	bcs.n	800b7f2 <VL53LX_dynamic_xtalk_correction_corrector+0x4a6>
			continue_processing = CONT_NEXT_LOOP;
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 800b7f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7f6:	653b      	str	r3, [r7, #80]	; 0x50

		if (continue_processing == CONT_CONTINUE) {
 800b7f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d110      	bne.n	800b822 <VL53LX_dynamic_xtalk_correction_corrector+0x4d6>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800b800:	2300      	movs	r3, #0
 800b802:	9301      	str	r3, [sp, #4]
 800b804:	2300      	movs	r3, #0
 800b806:	9300      	str	r3, [sp, #0]
 800b808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b80a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b80c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f7ff fbee 	bl	800aff0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 800b814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b816:	2202      	movs	r2, #2
 800b818:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 800b81a:	2302      	movs	r3, #2
 800b81c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800b820:	e009      	b.n	800b836 <VL53LX_dynamic_xtalk_correction_corrector+0x4ea>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800b822:	2301      	movs	r3, #1
 800b824:	9301      	str	r3, [sp, #4]
 800b826:	2300      	movs	r3, #0
 800b828:	9300      	str	r3, [sp, #0]
 800b82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b82c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b82e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f7ff fbdd 	bl	800aff0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800b836:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b83a:	2b02      	cmp	r3, #2
 800b83c:	d10c      	bne.n	800b858 <VL53LX_dynamic_xtalk_correction_corrector+0x50c>
			pint->accumulator = 0;
 800b83e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b840:	f04f 0200 	mov.w	r2, #0
 800b844:	f04f 0300 	mov.w	r3, #0
 800b848:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800b84c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b84e:	2200      	movs	r2, #0
 800b850:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800b852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b854:	2200      	movs	r2, #0
 800b856:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800b858:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3760      	adds	r7, #96	; 0x60
 800b860:	46bd      	mov	sp, r7
 800b862:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b866:	bf00      	nop
 800b868:	0003ffff 	.word	0x0003ffff

0800b86c <VL53LX_dynamic_xtalk_correction_data_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_data_init(
	VL53LX_DEV                          Dev
	)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b086      	sub	sp, #24
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b874:	2300      	movs	r3, #0
 800b876:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	3318      	adds	r3, #24
 800b87c:	613b      	str	r3, [r7, #16]
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800b884:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b88c:	3314      	adds	r3, #20
 800b88e:	2201      	movs	r2, #1
 800b890:	701a      	strb	r2, [r3, #0]
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b898:	3315      	adds	r3, #21
 800b89a:	2201      	movs	r2, #1
 800b89c:	701a      	strb	r2, [r3, #0]
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b8a4:	3316      	adds	r3, #22
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b8b0:	3318      	adds	r3, #24
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b8bc:	331c      	adds	r3, #28
 800b8be:	2264      	movs	r2, #100	; 0x64
 800b8c0:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b8d2:	3304      	adds	r3, #4
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b8de:	3308      	adds	r3, #8
 800b8e0:	22c8      	movs	r2, #200	; 0xc8
 800b8e2:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b8ea:	330c      	adds	r3, #12
 800b8ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b8f0:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b8f8:	3310      	adds	r3, #16
 800b8fa:	f44f 729a 	mov.w	r2, #308	; 0x134
 800b8fe:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b906:	3314      	adds	r3, #20
 800b908:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b90c:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b914:	3318      	adds	r3, #24
 800b916:	2280      	movs	r2, #128	; 0x80
 800b918:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b920:	331c      	adds	r3, #28
 800b922:	2200      	movs	r2, #0
 800b924:	701a      	strb	r2, [r3, #0]
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b92c:	331e      	adds	r3, #30
 800b92e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b932:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b93a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b93e:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b946:	3302      	adds	r3, #2
 800b948:	2200      	movs	r2, #0
 800b94a:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b952:	3304      	adds	r3, #4
 800b954:	f04f 725c 	mov.w	r2, #57671680	; 0x3700000
 800b958:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b960:	3308      	adds	r3, #8
 800b962:	2228      	movs	r2, #40	; 0x28
 800b964:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b96c:	330c      	adds	r3, #12
 800b96e:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 800b972:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b97a:	3310      	adds	r3, #16
 800b97c:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b980:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b988:	3314      	adds	r3, #20
 800b98a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b98e:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b996:	3318      	adds	r3, #24
 800b998:	2200      	movs	r2, #0
 800b99a:	601a      	str	r2, [r3, #0]
	pdev->smudge_corrector_internals.required_samples = 0;
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b9a2:	331c      	adds	r3, #28
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	601a      	str	r2, [r3, #0]
	pdev->smudge_corrector_internals.accumulator = 0;
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	f503 519f 	add.w	r1, r3, #5088	; 0x13e0
 800b9ae:	f04f 0200 	mov.w	r2, #0
 800b9b2:	f04f 0300 	mov.w	r3, #0
 800b9b6:	e9c1 2300 	strd	r2, r3, [r1]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b9c0:	3308      	adds	r3, #8
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	601a      	str	r2, [r3, #0]


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800b9c6:	68f8      	ldr	r0, [r7, #12]
 800b9c8:	f000 f806 	bl	800b9d8 <VL53LX_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800b9cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3718      	adds	r7, #24
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <VL53LX_dynamic_xtalk_correction_output_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_output_init(
	VL53LX_LLDriverResults_t *pres
	)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b085      	sub	sp, #20
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	73fb      	strb	r3, [r7, #15]
	VL53LX_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b9ea:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	2200      	movs	r2, #0
 800ba02:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	2200      	movs	r2, #0
 800ba08:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	2200      	movs	r2, #0
 800ba14:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	2200      	movs	r2, #0
 800ba26:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800ba28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3714      	adds	r7, #20
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr

0800ba38 <VL53LX_xtalk_cal_data_init>:


VL53LX_Error VL53LX_xtalk_cal_data_init(
	VL53LX_DEV                          Dev
	)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800ba40:	2300      	movs	r3, #0
 800ba42:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	3318      	adds	r3, #24
 800ba48:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 800ba50:	331c      	adds	r3, #28
 800ba52:	2200      	movs	r2, #0
 800ba54:	601a      	str	r2, [r3, #0]
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	801a      	strh	r2, [r3, #0]
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 800ba66:	3302      	adds	r3, #2
 800ba68:	2200      	movs	r2, #0
 800ba6a:	801a      	strh	r2, [r3, #0]
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 800ba72:	3304      	adds	r3, #4
 800ba74:	2218      	movs	r2, #24
 800ba76:	2100      	movs	r1, #0
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f009 f8c1 	bl	8014c00 <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800ba7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3710      	adds	r7, #16
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <VL53LX_low_power_auto_data_init>:


VL53LX_Error VL53LX_low_power_auto_data_init(
	VL53LX_DEV                          Dev
	)
{
 800ba8a:	b480      	push	{r7}
 800ba8c:	b085      	sub	sp, #20
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800ba92:	2300      	movs	r3, #0
 800ba94:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	3318      	adds	r3, #24
 800ba9a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800baa2:	3310      	adds	r3, #16
 800baa4:	2203      	movs	r2, #3
 800baa6:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800baae:	3311      	adds	r3, #17
 800bab0:	2200      	movs	r2, #0
 800bab2:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800baba:	3312      	adds	r3, #18
 800babc:	2200      	movs	r2, #0
 800babe:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bac6:	3313      	adds	r3, #19
 800bac8:	2200      	movs	r2, #0
 800baca:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bad2:	3314      	adds	r3, #20
 800bad4:	2200      	movs	r2, #0
 800bad6:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bade:	3315      	adds	r3, #21
 800bae0:	2200      	movs	r2, #0
 800bae2:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800baea:	3316      	adds	r3, #22
 800baec:	2200      	movs	r2, #0
 800baee:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800baf6:	3318      	adds	r3, #24
 800baf8:	2200      	movs	r2, #0
 800bafa:	601a      	str	r2, [r3, #0]
	pdev->low_power_auto_data.dss__required_spads = 0;
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bb02:	331c      	adds	r3, #28
 800bb04:	2200      	movs	r2, #0
 800bb06:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800bb08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3714      	adds	r7, #20
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr

0800bb18 <VL53LX_low_power_auto_data_stop_range>:

VL53LX_Error VL53LX_low_power_auto_data_stop_range(
	VL53LX_DEV                          Dev
	)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b085      	sub	sp, #20
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800bb20:	2300      	movs	r3, #0
 800bb22:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	3318      	adds	r3, #24
 800bb28:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bb30:	3312      	adds	r3, #18
 800bb32:	22ff      	movs	r2, #255	; 0xff
 800bb34:	701a      	strb	r2, [r3, #0]

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bb3c:	3316      	adds	r3, #22
 800bb3e:	2200      	movs	r2, #0
 800bb40:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bb48:	3318      	adds	r3, #24
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	601a      	str	r2, [r3, #0]
	pdev->low_power_auto_data.dss__required_spads = 0;
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bb54:	331c      	adds	r3, #28
 800bb56:	2200      	movs	r2, #0
 800bb58:	801a      	strh	r2, [r3, #0]


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bb60:	3314      	adds	r3, #20
 800bb62:	781b      	ldrb	r3, [r3, #0]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d007      	beq.n	800bb78 <VL53LX_low_power_auto_data_stop_range+0x60>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bb6e:	3314      	adds	r3, #20
 800bb70:	781a      	ldrb	r2, [r3, #0]
		pdev->stat_nvm.vhv_config__init =
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bb7e:	3315      	adds	r3, #21
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d007      	beq.n	800bb96 <VL53LX_low_power_auto_data_stop_range+0x7e>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bb8c:	3315      	adds	r3, #21
 800bb8e:	781a      	ldrb	r2, [r3, #0]
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0


	pdev->gen_cfg.phasecal_config__override = 0x00;
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327

	LOG_FUNCTION_END(status);

	return status;
 800bb9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3714      	adds	r7, #20
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr

0800bbae <VL53LX_low_power_auto_setup_manual_calibration>:
	return status;
}

VL53LX_Error VL53LX_low_power_auto_setup_manual_calibration(
	VL53LX_DEV        Dev)
{
 800bbae:	b480      	push	{r7}
 800bbb0:	b085      	sub	sp, #20
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	3318      	adds	r3, #24
 800bbba:	60fb      	str	r3, [r7, #12]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f893 22e3 	ldrb.w	r2, [r3, #739]	; 0x2e3
	pdev->low_power_auto_data.saved_vhv_init =
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bbcc:	3314      	adds	r3, #20
 800bbce:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f893 22e0 	ldrb.w	r2, [r3, #736]	; 0x2e0
	pdev->low_power_auto_data.saved_vhv_timeout =
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bbdc:	3315      	adds	r3, #21
 800bbde:	701a      	strb	r2, [r3, #0]


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f893 32e3 	ldrb.w	r3, [r3, #739]	; 0x2e3
 800bbe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbea:	b2da      	uxtb	r2, r3
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800bbf8:	f003 0303 	and.w	r3, r3, #3
 800bbfc:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bc04:	3310      	adds	r3, #16
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	009b      	lsls	r3, r3, #2
 800bc0a:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800bc0c:	4413      	add	r3, r2
 800bc0e:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2201      	movs	r2, #1
 800bc1a:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 800bc24:	331e      	adds	r3, #30
 800bc26:	781a      	ldrb	r2, [r3, #0]
	pdev->low_power_auto_data.first_run_phasecal_result =
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bc2e:	3316      	adds	r3, #22
 800bc30:	701a      	strb	r2, [r3, #0]
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bc38:	3316      	adds	r3, #22
 800bc3a:	781a      	ldrb	r2, [r3, #0]
	pdev->gen_cfg.cal_config__vcsel_start =
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

	LOG_FUNCTION_END(status);

	return status;
 800bc42:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3714      	adds	r7, #20
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr

0800bc52 <VL53LX_low_power_auto_update_DSS>:

VL53LX_Error VL53LX_low_power_auto_update_DSS(
	VL53LX_DEV        Dev)
{
 800bc52:	b480      	push	{r7}
 800bc54:	b087      	sub	sp, #28
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	3318      	adds	r3, #24
 800bc5e:	60fb      	str	r3, [r7, #12]

	VL53LX_system_results_t *pS = &(pdev->sys_results);
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f203 3366 	addw	r3, r3, #870	; 0x366
 800bc66:	60bb      	str	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	75fb      	strb	r3, [r7, #23]




	utemp32a =
		pS->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	8a1b      	ldrh	r3, [r3, #16]
 800bc70:	461a      	mov	r2, r3
		 + pS->result__ambient_count_rate_mcps_sd0;
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	891b      	ldrh	r3, [r3, #8]
 800bc76:	4413      	add	r3, r2
	utemp32a =
 800bc78:	613b      	str	r3, [r7, #16]


	if (utemp32a > 0xFFFF)
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc80:	d302      	bcc.n	800bc88 <VL53LX_low_power_auto_update_DSS+0x36>
		utemp32a = 0xFFFF;
 800bc82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc86:	613b      	str	r3, [r7, #16]



	utemp32a = utemp32a << 16;
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	041b      	lsls	r3, r3, #16
 800bc8c:	613b      	str	r3, [r7, #16]


	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	f8b3 336a 	ldrh.w	r3, [r3, #874]	; 0x36a
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d102      	bne.n	800bc9e <VL53LX_low_power_auto_update_DSS+0x4c>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800bc98:	23f1      	movs	r3, #241	; 0xf1
 800bc9a:	75fb      	strb	r3, [r7, #23]
 800bc9c:	e03f      	b.n	800bd1e <VL53LX_low_power_auto_update_DSS+0xcc>
	else {

		utemp32a = utemp32a /
		pdev->sys_results.result__dss_actual_effective_spads_sd0;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	f8b3 336a 	ldrh.w	r3, [r3, #874]	; 0x36a
 800bca4:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	fbb3 f3f2 	udiv	r3, r3, r2
 800bcac:	613b      	str	r3, [r7, #16]

		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bcb4:	3318      	adds	r3, #24
 800bcb6:	693a      	ldr	r2, [r7, #16]
 800bcb8:	601a      	str	r2, [r3, #0]
			utemp32a;


		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800bcc0:	041b      	lsls	r3, r3, #16
 800bcc2:	613b      	str	r3, [r7, #16]
			16;


		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bcca:	3318      	adds	r3, #24
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d102      	bne.n	800bcd8 <VL53LX_low_power_auto_update_DSS+0x86>
				== 0)
			status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800bcd2:	23f1      	movs	r3, #241	; 0xf1
 800bcd4:	75fb      	strb	r3, [r7, #23]
 800bcd6:	e022      	b.n	800bd1e <VL53LX_low_power_auto_update_DSS+0xcc>
		else {

			utemp32a = utemp32a /
			pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bcde:	3318      	adds	r3, #24
 800bce0:	681b      	ldr	r3, [r3, #0]
			utemp32a = utemp32a /
 800bce2:	693a      	ldr	r2, [r7, #16]
 800bce4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bce8:	613b      	str	r3, [r7, #16]


			if (utemp32a > 0xFFFF)
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bcf0:	d302      	bcc.n	800bcf8 <VL53LX_low_power_auto_update_DSS+0xa6>
				utemp32a = 0xFFFF;
 800bcf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bcf6:	613b      	str	r3, [r7, #16]


			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bd02:	331c      	adds	r3, #28
 800bd04:	801a      	strh	r2, [r3, #0]


			pdev->gen_cfg.dss_config__manual_effective_spads_select
			= pdev->low_power_auto_data.dss__required_spads;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bd0c:	331c      	adds	r3, #28
 800bd0e:	881a      	ldrh	r2, [r3, #0]
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
			pdev->gen_cfg.dss_config__roi_mode_control =
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2202      	movs	r2, #2
 800bd1a:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53LX_ERROR_DIVISION_BY_ZERO) {
 800bd1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd22:	f113 0f0f 	cmn.w	r3, #15
 800bd26:	d114      	bne.n	800bd52 <VL53LX_low_power_auto_update_DSS+0x100>



		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bd2e:	331c      	adds	r3, #28
 800bd30:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800bd34:	801a      	strh	r2, [r3, #0]


		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pdev->low_power_auto_data.dss__required_spads;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bd3c:	331c      	adds	r3, #28
 800bd3e:	881a      	ldrh	r2, [r3, #0]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
		pdev->gen_cfg.dss_config__roi_mode_control =
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2202      	movs	r2, #2
 800bd4a:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;


		status = VL53LX_ERROR_NONE;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 800bd52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	371c      	adds	r7, #28
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr

0800bd62 <VL53LX_compute_histo_merge_nb>:



VL53LX_Error VL53LX_compute_histo_merge_nb(
	VL53LX_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800bd62:	b480      	push	{r7}
 800bd64:	b087      	sub	sp, #28
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	6078      	str	r0, [r7, #4]
 800bd6a:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	3318      	adds	r3, #24
 800bd70:	613b      	str	r3, [r7, #16]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800bd72:	2300      	movs	r3, #0
 800bd74:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800bd76:	2300      	movs	r3, #0
 800bd78:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 800bd80:	2b07      	cmp	r3, #7
 800bd82:	bf0c      	ite	eq
 800bd84:	2301      	moveq	r3, #1
 800bd86:	2300      	movne	r3, #0
 800bd88:	b2db      	uxtb	r3, r3
 800bd8a:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	75fb      	strb	r3, [r7, #23]
 800bd90:	e019      	b.n	800bdc6 <VL53LX_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800bd92:	7df9      	ldrb	r1, [r7, #23]
 800bd94:	7bbb      	ldrb	r3, [r7, #14]
 800bd96:	6938      	ldr	r0, [r7, #16]
 800bd98:	461a      	mov	r2, r3
 800bd9a:	0052      	lsls	r2, r2, #1
 800bd9c:	441a      	add	r2, r3
 800bd9e:	0153      	lsls	r3, r2, #5
 800bda0:	461a      	mov	r2, r3
 800bda2:	460b      	mov	r3, r1
 800bda4:	005b      	lsls	r3, r3, #1
 800bda6:	440b      	add	r3, r1
 800bda8:	019b      	lsls	r3, r3, #6
 800bdaa:	4413      	add	r3, r2
 800bdac:	4403      	add	r3, r0
 800bdae:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800bdb2:	330c      	adds	r3, #12
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	dd02      	ble.n	800bdc0 <VL53LX_compute_histo_merge_nb+0x5e>
			sum++;
 800bdba:	7dbb      	ldrb	r3, [r7, #22]
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800bdc0:	7dfb      	ldrb	r3, [r7, #23]
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	75fb      	strb	r3, [r7, #23]
 800bdc6:	7dfb      	ldrb	r3, [r7, #23]
 800bdc8:	2b05      	cmp	r3, #5
 800bdca:	d9e2      	bls.n	800bd92 <VL53LX_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	7dba      	ldrb	r2, [r7, #22]
 800bdd0:	701a      	strb	r2, [r3, #0]

	return status;
 800bdd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	371c      	adds	r7, #28
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr

0800bde2 <VL53LX_calc_pll_period_us>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53LX_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800bde2:	b480      	push	{r7}
 800bde4:	b085      	sub	sp, #20
 800bde6:	af00      	add	r7, sp, #0
 800bde8:	4603      	mov	r3, r0
 800bdea:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800bdec:	2300      	movs	r3, #0
 800bdee:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800bdf0:	88fb      	ldrh	r3, [r7, #6]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d005      	beq.n	800be02 <VL53LX_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800bdf6:	88fb      	ldrh	r3, [r7, #6]
 800bdf8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800bdfc:	fb92 f3f3 	sdiv	r3, r2, r3
 800be00:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800be02:	68fb      	ldr	r3, [r7, #12]
}
 800be04:	4618      	mov	r0, r3
 800be06:	3714      	adds	r7, #20
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr

0800be10 <VL53LX_duration_maths>:
uint32_t  VL53LX_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800be10:	b480      	push	{r7}
 800be12:	b089      	sub	sp, #36	; 0x24
 800be14:	af00      	add	r7, sp, #0
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	60b9      	str	r1, [r7, #8]
 800be1a:	607a      	str	r2, [r7, #4]
 800be1c:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800be1e:	f04f 0200 	mov.w	r2, #0
 800be22:	f04f 0300 	mov.w	r3, #0
 800be26:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800be2a:	2300      	movs	r3, #0
 800be2c:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	68fa      	ldr	r2, [r7, #12]
 800be32:	fb02 f303 	mul.w	r3, r2, r3
 800be36:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	0b1b      	lsrs	r3, r3, #12
 800be3c:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	461a      	mov	r2, r3
 800be42:	f04f 0300 	mov.w	r3, #0
 800be46:	e9c7 2306 	strd	r2, r3, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	68ba      	ldr	r2, [r7, #8]
 800be4e:	fb02 f303 	mul.w	r3, r2, r3
 800be52:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	091b      	lsrs	r3, r3, #4
 800be58:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	461a      	mov	r2, r3
 800be5e:	f04f 0300 	mov.w	r3, #0
 800be62:	69f9      	ldr	r1, [r7, #28]
 800be64:	fb02 f001 	mul.w	r0, r2, r1
 800be68:	69b9      	ldr	r1, [r7, #24]
 800be6a:	fb03 f101 	mul.w	r1, r3, r1
 800be6e:	4401      	add	r1, r0
 800be70:	69b8      	ldr	r0, [r7, #24]
 800be72:	fba0 2302 	umull	r2, r3, r0, r2
 800be76:	4419      	add	r1, r3
 800be78:	460b      	mov	r3, r1
 800be7a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800be7e:	e9c7 2306 	strd	r2, r3, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800be82:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800be86:	f04f 0200 	mov.w	r2, #0
 800be8a:	f04f 0300 	mov.w	r3, #0
 800be8e:	0b02      	lsrs	r2, r0, #12
 800be90:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800be94:	0b0b      	lsrs	r3, r1, #12
 800be96:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800be9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	bf08      	it	eq
 800bea2:	2a00      	cmpeq	r2, #0
 800bea4:	d305      	bcc.n	800beb2 <VL53LX_duration_maths+0xa2>
		tmp_long_int = 0xFFFFFFFF;
 800bea6:	f04f 32ff 	mov.w	r2, #4294967295
 800beaa:	f04f 0300 	mov.w	r3, #0
 800beae:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800beb2:	69bb      	ldr	r3, [r7, #24]
 800beb4:	617b      	str	r3, [r7, #20]

	return duration_us;
 800beb6:	697b      	ldr	r3, [r7, #20]
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3724      	adds	r7, #36	; 0x24
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr

0800bec4 <VL53LX_events_per_spad_maths>:

uint32_t VL53LX_events_per_spad_maths(
	int32_t   VL53LX_p_010,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800bec4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800bec8:	b08e      	sub	sp, #56	; 0x38
 800beca:	af00      	add	r7, sp, #0
 800becc:	60f8      	str	r0, [r7, #12]
 800bece:	460b      	mov	r3, r1
 800bed0:	607a      	str	r2, [r7, #4]
 800bed2:	817b      	strh	r3, [r7, #10]
	uint64_t total_hist_counts  = 0;
 800bed4:	f04f 0200 	mov.w	r2, #0
 800bed8:	f04f 0300 	mov.w	r3, #0
 800bedc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	uint64_t xtalk_per_spad     = 0;
 800bee0:	f04f 0200 	mov.w	r2, #0
 800bee4:	f04f 0300 	mov.w	r3, #0
 800bee8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	uint32_t rate_per_spad_kcps = 0;
 800beec:	2300      	movs	r3, #0
 800beee:	627b      	str	r3, [r7, #36]	; 0x24





	uint64_t dividend = ((uint64_t)VL53LX_p_010
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	4618      	mov	r0, r3
 800bef4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800bef8:	4602      	mov	r2, r0
 800befa:	460b      	mov	r3, r1
 800befc:	f04f 0400 	mov.w	r4, #0
 800bf00:	f04f 0500 	mov.w	r5, #0
 800bf04:	015d      	lsls	r5, r3, #5
 800bf06:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800bf0a:	0154      	lsls	r4, r2, #5
 800bf0c:	4622      	mov	r2, r4
 800bf0e:	462b      	mov	r3, r5
 800bf10:	1a12      	subs	r2, r2, r0
 800bf12:	eb63 0301 	sbc.w	r3, r3, r1
 800bf16:	f04f 0400 	mov.w	r4, #0
 800bf1a:	f04f 0500 	mov.w	r5, #0
 800bf1e:	009d      	lsls	r5, r3, #2
 800bf20:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800bf24:	0094      	lsls	r4, r2, #2
 800bf26:	4622      	mov	r2, r4
 800bf28:	462b      	mov	r3, r5
 800bf2a:	1812      	adds	r2, r2, r0
 800bf2c:	eb41 0303 	adc.w	r3, r1, r3
 800bf30:	f04f 0000 	mov.w	r0, #0
 800bf34:	f04f 0100 	mov.w	r1, #0
 800bf38:	02d9      	lsls	r1, r3, #11
 800bf3a:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800bf3e:	02d0      	lsls	r0, r2, #11
 800bf40:	4602      	mov	r2, r0
 800bf42:	460b      	mov	r3, r1
 800bf44:	e9c7 2306 	strd	r2, r3, [r7, #24]
			* 1000 * 256);

	if (num_spads != 0)
 800bf48:	897b      	ldrh	r3, [r7, #10]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d00a      	beq.n	800bf64 <VL53LX_events_per_spad_maths+0xa0>
		total_hist_counts = do_division_u(
 800bf4e:	897a      	ldrh	r2, [r7, #10]
 800bf50:	f04f 0300 	mov.w	r3, #0
 800bf54:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bf58:	f7f4 fdd8 	bl	8000b0c <__aeabi_uldivmod>
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	460b      	mov	r3, r1
 800bf60:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d021      	beq.n	800bfae <VL53LX_events_per_spad_maths+0xea>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800bf6a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800bf6e:	f04f 0200 	mov.w	r2, #0
 800bf72:	f04f 0300 	mov.w	r3, #0
 800bf76:	02cb      	lsls	r3, r1, #11
 800bf78:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800bf7c:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800bf7e:	6879      	ldr	r1, [r7, #4]
 800bf80:	0849      	lsrs	r1, r1, #1
 800bf82:	4608      	mov	r0, r1
 800bf84:	f04f 0100 	mov.w	r1, #0
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800bf88:	eb12 0800 	adds.w	r8, r2, r0
 800bf8c:	eb43 0901 	adc.w	r9, r3, r1
 800bf90:	e9c7 8904 	strd	r8, r9, [r7, #16]

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	461a      	mov	r2, r3
 800bf98:	f04f 0300 	mov.w	r3, #0
 800bf9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800bfa0:	f7f4 fdb4 	bl	8000b0c <__aeabi_uldivmod>
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800bfac:	e00b      	b.n	800bfc6 <VL53LX_events_per_spad_maths+0x102>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800bfae:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800bfb2:	f04f 0200 	mov.w	r2, #0
 800bfb6:	f04f 0300 	mov.w	r3, #0
 800bfba:	02cb      	lsls	r3, r1, #11
 800bfbc:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800bfc0:	02c2      	lsls	r2, r0, #11
 800bfc2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800bfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc8:	627b      	str	r3, [r7, #36]	; 0x24

	return rate_per_spad_kcps;
 800bfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3738      	adds	r7, #56	; 0x38
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800bfd6 <VL53LX_isqrt>:


uint32_t VL53LX_isqrt(uint32_t num)
{
 800bfd6:	b480      	push	{r7}
 800bfd8:	b085      	sub	sp, #20
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800bfe2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bfe6:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800bfe8:	e002      	b.n	800bff0 <VL53LX_isqrt+0x1a>
		bit >>= 2;
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	089b      	lsrs	r3, r3, #2
 800bfee:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800bff0:	68ba      	ldr	r2, [r7, #8]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d8f8      	bhi.n	800bfea <VL53LX_isqrt+0x14>

	while (bit != 0) {
 800bff8:	e017      	b.n	800c02a <VL53LX_isqrt+0x54>
		if (num >= res + bit)  {
 800bffa:	68fa      	ldr	r2, [r7, #12]
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	4413      	add	r3, r2
 800c000:	687a      	ldr	r2, [r7, #4]
 800c002:	429a      	cmp	r2, r3
 800c004:	d30b      	bcc.n	800c01e <VL53LX_isqrt+0x48>
			num -= res + bit;
 800c006:	68fa      	ldr	r2, [r7, #12]
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	4413      	add	r3, r2
 800c00c:	687a      	ldr	r2, [r7, #4]
 800c00e:	1ad3      	subs	r3, r2, r3
 800c010:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	085b      	lsrs	r3, r3, #1
 800c016:	68ba      	ldr	r2, [r7, #8]
 800c018:	4413      	add	r3, r2
 800c01a:	60fb      	str	r3, [r7, #12]
 800c01c:	e002      	b.n	800c024 <VL53LX_isqrt+0x4e>
		} else {
			res >>= 1;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	085b      	lsrs	r3, r3, #1
 800c022:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	089b      	lsrs	r3, r3, #2
 800c028:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d1e4      	bne.n	800bffa <VL53LX_isqrt+0x24>
	}

	return res;
 800c030:	68fb      	ldr	r3, [r7, #12]
}
 800c032:	4618      	mov	r0, r3
 800c034:	3714      	adds	r7, #20
 800c036:	46bd      	mov	sp, r7
 800c038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03c:	4770      	bx	lr

0800c03e <VL53LX_hist_calc_zero_distance_phase>:


void  VL53LX_hist_calc_zero_distance_phase(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800c03e:	b580      	push	{r7, lr}
 800c040:	b084      	sub	sp, #16
 800c042:	af00      	add	r7, sp, #0
 800c044:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800c046:	2300      	movs	r3, #0
 800c048:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53LX_p_014         = 0;
 800c04a:	2300      	movs	r3, #0
 800c04c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata->VL53LX_p_005);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c054:	4618      	mov	r0, r3
 800c056:	f000 fa97 	bl	800c588 <VL53LX_decode_vcsel_period>
 800c05a:	4603      	mov	r3, r0
	period = 2048 *
 800c05c:	02db      	lsls	r3, r3, #11
 800c05e:	60bb      	str	r3, [r7, #8]

	VL53LX_p_014  = period;
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (uint32_t)pdata->phasecal_result__reference_phase;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800c06a:	461a      	mov	r2, r3
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	4413      	add	r3, r2
 800c070:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c078:	02db      	lsls	r3, r3, #11
 800c07a:	68fa      	ldr	r2, [r7, #12]
 800c07c:	4413      	add	r3, r2
 800c07e:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c086:	02db      	lsls	r3, r3, #11
 800c088:	68fa      	ldr	r2, [r7, #12]
 800c08a:	1ad3      	subs	r3, r2, r3
 800c08c:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d009      	beq.n	800c0a8 <VL53LX_hist_calc_zero_distance_phase+0x6a>
		VL53LX_p_014  = VL53LX_p_014 % period;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	68ba      	ldr	r2, [r7, #8]
 800c098:	fbb3 f2f2 	udiv	r2, r3, r2
 800c09c:	68b9      	ldr	r1, [r7, #8]
 800c09e:	fb01 f202 	mul.w	r2, r1, r2
 800c0a2:	1a9b      	subs	r3, r3, r2
 800c0a4:	60fb      	str	r3, [r7, #12]
 800c0a6:	e001      	b.n	800c0ac <VL53LX_hist_calc_zero_distance_phase+0x6e>
	else
		VL53LX_p_014 = 0;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53LX_p_014;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	b29a      	uxth	r2, r3
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	LOG_FUNCTION_END(0);
}
 800c0b6:	bf00      	nop
 800c0b8:	3710      	adds	r7, #16
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}

0800c0be <VL53LX_hist_estimate_ambient_from_thresholded_bins>:


void  VL53LX_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53LX_histogram_bin_data_t   *pdata)
{
 800c0be:	b580      	push	{r7, lr}
 800c0c0:	b084      	sub	sp, #16
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
 800c0c6:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53LX_p_031 = 0;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53LX_hist_find_min_max_bin_values(pdata);
 800c0d0:	6838      	ldr	r0, [r7, #0]
 800c0d2:	f000 fb82 	bl	800c7da <VL53LX_hist_find_min_max_bin_values>



	VL53LX_p_031  =
		(int32_t)VL53LX_isqrt((uint32_t)pdata->min_bin_value);
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7ff ff7a 	bl	800bfd6 <VL53LX_isqrt>
 800c0e2:	4603      	mov	r3, r0
	VL53LX_p_031  =
 800c0e4:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 *= ambient_threshold_sigma;
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	fb02 f303 	mul.w	r3, r2, r3
 800c0ee:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += 0x07;
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	3307      	adds	r3, #7
 800c0f4:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031  = VL53LX_p_031 >> 4;
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	111b      	asrs	r3, r3, #4
 800c0fa:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += pdata->min_bin_value;
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c102:	68ba      	ldr	r2, [r7, #8]
 800c104:	4413      	add	r3, r2
 800c106:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	2200      	movs	r2, #0
 800c10c:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum        = 0;
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	2200      	movs	r2, #0
 800c114:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800c118:	2300      	movs	r3, #0
 800c11a:	73fb      	strb	r3, [r7, #15]
 800c11c:	e01e      	b.n	800c15c <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53LX_p_031) {
 800c11e:	7bfa      	ldrb	r2, [r7, #15]
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	3206      	adds	r2, #6
 800c124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c128:	68ba      	ldr	r2, [r7, #8]
 800c12a:	429a      	cmp	r2, r3
 800c12c:	dd13      	ble.n	800c156 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800c134:	7bf9      	ldrb	r1, [r7, #15]
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	3106      	adds	r1, #6
 800c13a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c13e:	441a      	add	r2, r3
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800c14c:	3301      	adds	r3, #1
 800c14e:	b2da      	uxtb	r2, r3
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800c156:	7bfb      	ldrb	r3, [r7, #15]
 800c158:	3301      	adds	r3, #1
 800c15a:	73fb      	strb	r3, [r7, #15]
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	7a9b      	ldrb	r3, [r3, #10]
 800c160:	7bfa      	ldrb	r2, [r7, #15]
 800c162:	429a      	cmp	r2, r3
 800c164:	d3db      	bcc.n	800c11e <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d01c      	beq.n	800c1aa <VL53LX_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53LX_p_028 =
			pdata->ambient_events_sum;
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		pdata->VL53LX_p_028 =
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 +=
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800c182:	683a      	ldr	r2, [r7, #0]
 800c184:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 800c188:	0852      	lsrs	r2, r2, #1
 800c18a:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800c18c:	441a      	add	r2, r3
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 /=
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800c19a:	683a      	ldr	r2, [r7, #0]
 800c19c:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
		pdata->VL53LX_p_028 /=
 800c1a0:	fb93 f2f2 	sdiv	r2, r3, r2
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800c1aa:	bf00      	nop
 800c1ac:	3710      	adds	r7, #16
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}

0800c1b2 <VL53LX_hist_remove_ambient_bins>:


void  VL53LX_hist_remove_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800c1b2:	b480      	push	{r7}
 800c1b4:	b085      	sub	sp, #20
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	7b1b      	ldrb	r3, [r3, #12]
 800c1ca:	f003 0307 	and.w	r3, r3, #7
 800c1ce:	2b07      	cmp	r3, #7
 800c1d0:	d13a      	bne.n	800c248 <VL53LX_hist_remove_ambient_bins+0x96>

		i = 0;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	73bb      	strb	r3, [r7, #14]
 800c1da:	e01f      	b.n	800c21c <VL53LX_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800c1dc:	7bbb      	ldrb	r3, [r7, #14]
 800c1de:	687a      	ldr	r2, [r7, #4]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	7b1b      	ldrb	r3, [r3, #12]
 800c1e4:	f003 0307 	and.w	r3, r3, #7
 800c1e8:	2b07      	cmp	r3, #7
 800c1ea:	d014      	beq.n	800c216 <VL53LX_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800c1ec:	7bba      	ldrb	r2, [r7, #14]
 800c1ee:	7b7b      	ldrb	r3, [r7, #13]
 800c1f0:	6879      	ldr	r1, [r7, #4]
 800c1f2:	440a      	add	r2, r1
 800c1f4:	7b11      	ldrb	r1, [r2, #12]
 800c1f6:	687a      	ldr	r2, [r7, #4]
 800c1f8:	4413      	add	r3, r2
 800c1fa:	460a      	mov	r2, r1
 800c1fc:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800c1fe:	7bba      	ldrb	r2, [r7, #14]
 800c200:	7b7b      	ldrb	r3, [r7, #13]
 800c202:	6879      	ldr	r1, [r7, #4]
 800c204:	440a      	add	r2, r1
 800c206:	7c91      	ldrb	r1, [r2, #18]
 800c208:	687a      	ldr	r2, [r7, #4]
 800c20a:	4413      	add	r3, r2
 800c20c:	460a      	mov	r2, r1
 800c20e:	749a      	strb	r2, [r3, #18]
				i++;
 800c210:	7b7b      	ldrb	r3, [r7, #13]
 800c212:	3301      	adds	r3, #1
 800c214:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800c216:	7bbb      	ldrb	r3, [r7, #14]
 800c218:	3301      	adds	r3, #1
 800c21a:	73bb      	strb	r3, [r7, #14]
 800c21c:	7bbb      	ldrb	r3, [r7, #14]
 800c21e:	2b05      	cmp	r3, #5
 800c220:	d9dc      	bls.n	800c1dc <VL53LX_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800c222:	7b7b      	ldrb	r3, [r7, #13]
 800c224:	73bb      	strb	r3, [r7, #14]
 800c226:	e00c      	b.n	800c242 <VL53LX_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE + 1;
 800c228:	7bbb      	ldrb	r3, [r7, #14]
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	4413      	add	r3, r2
 800c22e:	2210      	movs	r2, #16
 800c230:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800c232:	7bbb      	ldrb	r3, [r7, #14]
 800c234:	687a      	ldr	r2, [r7, #4]
 800c236:	4413      	add	r3, r2
 800c238:	2200      	movs	r2, #0
 800c23a:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800c23c:	7bbb      	ldrb	r3, [r7, #14]
 800c23e:	3301      	adds	r3, #1
 800c240:	73bb      	strb	r3, [r7, #14]
 800c242:	7bbb      	ldrb	r3, [r7, #14]
 800c244:	2b05      	cmp	r3, #5
 800c246:	d9ef      	bls.n	800c228 <VL53LX_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	7adb      	ldrb	r3, [r3, #11]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d023      	beq.n	800c298 <VL53LX_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	7adb      	ldrb	r3, [r3, #11]
 800c254:	73fb      	strb	r3, [r7, #15]
 800c256:	e00f      	b.n	800c278 <VL53LX_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53LX_p_020; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800c258:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800c25a:	7bfb      	ldrb	r3, [r7, #15]
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	7ad2      	ldrb	r2, [r2, #11]
 800c260:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	3106      	adds	r1, #6
 800c266:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	3206      	adds	r2, #6
 800c26e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53LX_p_020; bin++) {
 800c272:	7bfb      	ldrb	r3, [r7, #15]
 800c274:	3301      	adds	r3, #1
 800c276:	73fb      	strb	r3, [r7, #15]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	7a5b      	ldrb	r3, [r3, #9]
		for (bin = pdata->number_of_ambient_bins;
 800c27c:	7bfa      	ldrb	r2, [r7, #15]
 800c27e:	429a      	cmp	r2, r3
 800c280:	d3ea      	bcc.n	800c258 <VL53LX_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53LX_p_021 =
				pdata->VL53LX_p_021 -
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53LX_p_021 -
 800c28a:	1ad3      	subs	r3, r2, r3
 800c28c:	b2da      	uxtb	r2, r3
		pdata->VL53LX_p_021 =
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2200      	movs	r2, #0
 800c296:	72da      	strb	r2, [r3, #11]
	}
}
 800c298:	bf00      	nop
 800c29a:	3714      	adds	r7, #20
 800c29c:	46bd      	mov	sp, r7
 800c29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a2:	4770      	bx	lr

0800c2a4 <VL53LX_calc_pll_period_mm>:


uint32_t VL53LX_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b084      	sub	sp, #16
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800c2b6:	88fb      	ldrh	r3, [r7, #6]
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f7ff fd92 	bl	800bde2 <VL53LX_calc_pll_period_us>
 800c2be:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800c2c4:	f249 2257 	movw	r2, #37463	; 0x9257
 800c2c8:	fb02 f303 	mul.w	r3, r2, r3
 800c2cc:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c2d4:	0c1b      	lsrs	r3, r3, #16
 800c2d6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800c2d8:	68bb      	ldr	r3, [r7, #8]
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3710      	adds	r7, #16
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}

0800c2e2 <VL53LX_rate_maths>:


uint16_t VL53LX_rate_maths(
	int32_t   VL53LX_p_018,
	uint32_t  time_us)
{
 800c2e2:	b480      	push	{r7}
 800c2e4:	b087      	sub	sp, #28
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	6078      	str	r0, [r7, #4]
 800c2ea:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800c2f0:	2307      	movs	r3, #7
 800c2f2:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	81fb      	strh	r3, [r7, #14]



	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_MAX)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2fe:	db03      	blt.n	800c308 <VL53LX_rate_maths+0x26>
		tmp_int = VL53LX_SPAD_TOTAL_COUNT_MAX;
 800c300:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800c304:	617b      	str	r3, [r7, #20]
 800c306:	e004      	b.n	800c312 <VL53LX_rate_maths+0x30>
	else if (VL53LX_p_018 > 0)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	dd01      	ble.n	800c312 <VL53LX_rate_maths+0x30>
		tmp_int = (uint32_t)VL53LX_p_018;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	617b      	str	r3, [r7, #20]




	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c318:	dd02      	ble.n	800c320 <VL53LX_rate_maths+0x3e>
		frac_bits = 3;
 800c31a:	2303      	movs	r3, #3
 800c31c:	613b      	str	r3, [r7, #16]
 800c31e:	e001      	b.n	800c324 <VL53LX_rate_maths+0x42>
	else
		frac_bits = 7;
 800c320:	2307      	movs	r3, #7
 800c322:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d009      	beq.n	800c33e <VL53LX_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800c32a:	697a      	ldr	r2, [r7, #20]
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	409a      	lsls	r2, r3
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	085b      	lsrs	r3, r3, #1
 800c334:	441a      	add	r2, r3
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	fbb2 f3f3 	udiv	r3, r2, r3
 800c33c:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c344:	dd02      	ble.n	800c34c <VL53LX_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	011b      	lsls	r3, r3, #4
 800c34a:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c352:	d302      	bcc.n	800c35a <VL53LX_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800c354:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c358:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800c35e:	89fb      	ldrh	r3, [r7, #14]
}
 800c360:	4618      	mov	r0, r3
 800c362:	371c      	adds	r7, #28
 800c364:	46bd      	mov	sp, r7
 800c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36a:	4770      	bx	lr

0800c36c <VL53LX_rate_per_spad_maths>:
uint16_t VL53LX_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b087      	sub	sp, #28
 800c370:	af00      	add	r7, sp, #0
 800c372:	60f8      	str	r0, [r7, #12]
 800c374:	60b9      	str	r1, [r7, #8]
 800c376:	603b      	str	r3, [r7, #0]
 800c378:	4613      	mov	r3, r2
 800c37a:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800c37c:	2300      	movs	r3, #0
 800c37e:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800c380:	2300      	movs	r3, #0
 800c382:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800c384:	88fb      	ldrh	r3, [r7, #6]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d010      	beq.n	800c3ac <VL53LX_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	021a      	lsls	r2, r3, #8
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	fa02 f303 	lsl.w	r3, r2, r3
 800c394:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800c396:	88fb      	ldrh	r3, [r7, #6]
 800c398:	085b      	lsrs	r3, r3, #1
 800c39a:	b29b      	uxth	r3, r3
 800c39c:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800c3a2:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800c3a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3a8:	617b      	str	r3, [r7, #20]
 800c3aa:	e004      	b.n	800c3b6 <VL53LX_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800c3ac:	68ba      	ldr	r2, [r7, #8]
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	fa02 f303 	lsl.w	r3, r2, r3
 800c3b4:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800c3b6:	697a      	ldr	r2, [r7, #20]
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d901      	bls.n	800c3c2 <VL53LX_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800c3c6:	8a7b      	ldrh	r3, [r7, #18]
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	371c      	adds	r7, #28
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr

0800c3d4 <VL53LX_range_maths>:
	uint16_t  VL53LX_p_014,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800c3d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3d6:	b089      	sub	sp, #36	; 0x24
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	4606      	mov	r6, r0
 800c3dc:	4608      	mov	r0, r1
 800c3de:	4611      	mov	r1, r2
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	4633      	mov	r3, r6
 800c3e4:	80fb      	strh	r3, [r7, #6]
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	80bb      	strh	r3, [r7, #4]
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	807b      	strh	r3, [r7, #2]
 800c3ee:	4613      	mov	r3, r2
 800c3f0:	707b      	strb	r3, [r7, #1]


	uint32_t    pll_period_us = 0;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	61bb      	str	r3, [r7, #24]
	int64_t     tmp_long_int  = 0;
 800c3f6:	f04f 0200 	mov.w	r2, #0
 800c3fa:	f04f 0300 	mov.w	r3, #0
 800c3fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int32_t     range_mm      = 0;
 800c402:	2300      	movs	r3, #0
 800c404:	61fb      	str	r3, [r7, #28]
	int32_t     range_mm_10   = 0;
 800c406:	2300      	movs	r3, #0
 800c408:	60fb      	str	r3, [r7, #12]



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800c40a:	88fb      	ldrh	r3, [r7, #6]
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7ff fce8 	bl	800bde2 <VL53LX_calc_pll_period_us>
 800c412:	61b8      	str	r0, [r7, #24]



	tmp_long_int = (int64_t)VL53LX_p_014 - (int64_t)zero_distance_phase;
 800c414:	88b8      	ldrh	r0, [r7, #4]
 800c416:	f04f 0100 	mov.w	r1, #0
 800c41a:	887a      	ldrh	r2, [r7, #2]
 800c41c:	f04f 0300 	mov.w	r3, #0
 800c420:	1a84      	subs	r4, r0, r2
 800c422:	eb61 0503 	sbc.w	r5, r1, r3
 800c426:	e9c7 4504 	strd	r4, r5, [r7, #16]



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800c42a:	69bb      	ldr	r3, [r7, #24]
 800c42c:	461a      	mov	r2, r3
 800c42e:	f04f 0300 	mov.w	r3, #0
 800c432:	6979      	ldr	r1, [r7, #20]
 800c434:	fb02 f001 	mul.w	r0, r2, r1
 800c438:	6939      	ldr	r1, [r7, #16]
 800c43a:	fb03 f101 	mul.w	r1, r3, r1
 800c43e:	4401      	add	r1, r0
 800c440:	6938      	ldr	r0, [r7, #16]
 800c442:	fba0 2302 	umull	r2, r3, r0, r2
 800c446:	4419      	add	r1, r3
 800c448:	460b      	mov	r3, r1
 800c44a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800c44e:	e9c7 2304 	strd	r2, r3, [r7, #16]



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800c452:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c456:	2a00      	cmp	r2, #0
 800c458:	f173 0100 	sbcs.w	r1, r3, #0
 800c45c:	da06      	bge.n	800c46c <VL53LX_range_maths+0x98>
 800c45e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c462:	f04f 0100 	mov.w	r1, #0
 800c466:	1812      	adds	r2, r2, r0
 800c468:	eb41 0303 	adc.w	r3, r1, r3
 800c46c:	f04f 0000 	mov.w	r0, #0
 800c470:	f04f 0100 	mov.w	r1, #0
 800c474:	0a50      	lsrs	r0, r2, #9
 800c476:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800c47a:	1259      	asrs	r1, r3, #9
 800c47c:	e9c7 0104 	strd	r0, r1, [r7, #16]



	tmp_long_int =  tmp_long_int * VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	f249 2257 	movw	r2, #37463	; 0x9257
 800c486:	fb02 f203 	mul.w	r2, r2, r3
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	2100      	movs	r1, #0
 800c48e:	fb01 f303 	mul.w	r3, r1, r3
 800c492:	18d1      	adds	r1, r2, r3
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	f249 2257 	movw	r2, #37463	; 0x9257
 800c49a:	fba3 2302 	umull	r2, r3, r3, r2
 800c49e:	4419      	add	r1, r3
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800c4a6:	e9c7 2304 	strd	r2, r3, [r7, #16]



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800c4aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c4ae:	2a00      	cmp	r2, #0
 800c4b0:	f173 0100 	sbcs.w	r1, r3, #0
 800c4b4:	da05      	bge.n	800c4c2 <VL53LX_range_maths+0xee>
 800c4b6:	4832      	ldr	r0, [pc, #200]	; (800c580 <VL53LX_range_maths+0x1ac>)
 800c4b8:	f04f 0100 	mov.w	r1, #0
 800c4bc:	1812      	adds	r2, r2, r0
 800c4be:	eb41 0303 	adc.w	r3, r1, r3
 800c4c2:	f04f 0000 	mov.w	r0, #0
 800c4c6:	f04f 0100 	mov.w	r1, #0
 800c4ca:	0d90      	lsrs	r0, r2, #22
 800c4cc:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800c4d0:	1599      	asrs	r1, r3, #22
 800c4d2:	e9c7 0104 	strd	r0, r1, [r7, #16]


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c4da:	4413      	add	r3, r2
 800c4dc:	61fb      	str	r3, [r7, #28]


	range_mm *= gain_factor;
 800c4de:	69fb      	ldr	r3, [r7, #28]
 800c4e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4e2:	fb02 f303 	mul.w	r3, r2, r3
 800c4e6:	61fb      	str	r3, [r7, #28]
	range_mm += 0x0400;
 800c4e8:	69fb      	ldr	r3, [r7, #28]
 800c4ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c4ee:	61fb      	str	r3, [r7, #28]
	range_mm /= 0x0800;
 800c4f0:	69fb      	ldr	r3, [r7, #28]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	da01      	bge.n	800c4fa <VL53LX_range_maths+0x126>
 800c4f6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800c4fa:	12db      	asrs	r3, r3, #11
 800c4fc:	61fb      	str	r3, [r7, #28]


	if (fractional_bits == 0) {
 800c4fe:	787b      	ldrb	r3, [r7, #1]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d130      	bne.n	800c566 <VL53LX_range_maths+0x192>
		range_mm_10 = range_mm * 10;
 800c504:	69fa      	ldr	r2, [r7, #28]
 800c506:	4613      	mov	r3, r2
 800c508:	009b      	lsls	r3, r3, #2
 800c50a:	4413      	add	r3, r2
 800c50c:	005b      	lsls	r3, r3, #1
 800c50e:	60fb      	str	r3, [r7, #12]
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	2b00      	cmp	r3, #0
 800c514:	da00      	bge.n	800c518 <VL53LX_range_maths+0x144>
 800c516:	3303      	adds	r3, #3
 800c518:	109b      	asrs	r3, r3, #2
 800c51a:	60fb      	str	r3, [r7, #12]
		if ((range_mm_10 % 10) < 5)
 800c51c:	68f9      	ldr	r1, [r7, #12]
 800c51e:	4b19      	ldr	r3, [pc, #100]	; (800c584 <VL53LX_range_maths+0x1b0>)
 800c520:	fb83 2301 	smull	r2, r3, r3, r1
 800c524:	109a      	asrs	r2, r3, #2
 800c526:	17cb      	asrs	r3, r1, #31
 800c528:	1ad2      	subs	r2, r2, r3
 800c52a:	4613      	mov	r3, r2
 800c52c:	009b      	lsls	r3, r3, #2
 800c52e:	4413      	add	r3, r2
 800c530:	005b      	lsls	r3, r3, #1
 800c532:	1aca      	subs	r2, r1, r3
 800c534:	2a04      	cmp	r2, #4
 800c536:	dc09      	bgt.n	800c54c <VL53LX_range_maths+0x178>
			range_mm = (int16_t)(range_mm_10 / 10);
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	4a12      	ldr	r2, [pc, #72]	; (800c584 <VL53LX_range_maths+0x1b0>)
 800c53c:	fb82 1203 	smull	r1, r2, r2, r3
 800c540:	1092      	asrs	r2, r2, #2
 800c542:	17db      	asrs	r3, r3, #31
 800c544:	1ad3      	subs	r3, r2, r3
 800c546:	b21b      	sxth	r3, r3
 800c548:	61fb      	str	r3, [r7, #28]
 800c54a:	e014      	b.n	800c576 <VL53LX_range_maths+0x1a2>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	4a0d      	ldr	r2, [pc, #52]	; (800c584 <VL53LX_range_maths+0x1b0>)
 800c550:	fb82 1203 	smull	r1, r2, r2, r3
 800c554:	1092      	asrs	r2, r2, #2
 800c556:	17db      	asrs	r3, r3, #31
 800c558:	1ad3      	subs	r3, r2, r3
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	3301      	adds	r3, #1
 800c55e:	b29b      	uxth	r3, r3
 800c560:	b21b      	sxth	r3, r3
 800c562:	61fb      	str	r3, [r7, #28]
 800c564:	e007      	b.n	800c576 <VL53LX_range_maths+0x1a2>
	} else if (fractional_bits == 1)
 800c566:	787b      	ldrb	r3, [r7, #1]
 800c568:	2b01      	cmp	r3, #1
 800c56a:	d104      	bne.n	800c576 <VL53LX_range_maths+0x1a2>
		range_mm = range_mm / (0x01 << 1);
 800c56c:	69fb      	ldr	r3, [r7, #28]
 800c56e:	0fda      	lsrs	r2, r3, #31
 800c570:	4413      	add	r3, r2
 800c572:	105b      	asrs	r3, r3, #1
 800c574:	61fb      	str	r3, [r7, #28]

	return range_mm;
 800c576:	69fb      	ldr	r3, [r7, #28]
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3724      	adds	r7, #36	; 0x24
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c580:	003fffff 	.word	0x003fffff
 800c584:	66666667 	.word	0x66666667

0800c588 <VL53LX_decode_vcsel_period>:


uint8_t VL53LX_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800c588:	b480      	push	{r7}
 800c58a:	b085      	sub	sp, #20
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	4603      	mov	r3, r0
 800c590:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53LX_p_030 = 0;
 800c592:	2300      	movs	r3, #0
 800c594:	73fb      	strb	r3, [r7, #15]

	VL53LX_p_030 = (vcsel_period_reg + 1) << 1;
 800c596:	79fb      	ldrb	r3, [r7, #7]
 800c598:	3301      	adds	r3, #1
 800c59a:	b2db      	uxtb	r3, r3
 800c59c:	005b      	lsls	r3, r3, #1
 800c59e:	73fb      	strb	r3, [r7, #15]

	return VL53LX_p_030;
 800c5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3714      	adds	r7, #20
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ac:	4770      	bx	lr

0800c5ae <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53LX_xtalk_histogram_shape_t *pxtalk,
		VL53LX_histogram_bin_data_t    *phist)
{
 800c5ae:	b480      	push	{r7}
 800c5b0:	b083      	sub	sp, #12
 800c5b2:	af00      	add	r7, sp, #0
 800c5b4:	6078      	str	r0, [r7, #4]
 800c5b6:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	phist->cal_config__vcsel_start =
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	phist->VL53LX_p_015 =
			pxtalk->VL53LX_p_015;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
	phist->VL53LX_p_015 =
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	phist->VL53LX_p_019 =
			pxtalk->VL53LX_p_019;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53LX_p_019 =
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	phist->phasecal_result__reference_phase   =
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	phist->phasecal_result__vcsel_start       =
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
	phist->vcsel_width =
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
	phist->zero_distance_phase =
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	781a      	ldrb	r2, [r3, #0]
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	709a      	strb	r2, [r3, #2]
	phist->VL53LX_p_020  = pxtalk->VL53LX_p_020;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	7a5a      	ldrb	r2, [r3, #9]
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	685a      	ldr	r2, [r3, #4]
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	605a      	str	r2, [r3, #4]
}
 800c61e:	bf00      	nop
 800c620:	370c      	adds	r7, #12
 800c622:	46bd      	mov	sp, r7
 800c624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c628:	4770      	bx	lr

0800c62a <VL53LX_init_histogram_bin_data_struct>:

void VL53LX_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53LX_p_021,
	VL53LX_histogram_bin_data_t *pdata)
{
 800c62a:	b480      	push	{r7}
 800c62c:	b087      	sub	sp, #28
 800c62e:	af00      	add	r7, sp, #0
 800c630:	60f8      	str	r0, [r7, #12]
 800c632:	460b      	mov	r3, r1
 800c634:	607a      	str	r2, [r7, #4]
 800c636:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800c638:	2300      	movs	r3, #0
 800c63a:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53LX_DEVICESTATE_SW_STANDBY;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2203      	movs	r2, #3
 800c640:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53LX_DEVICESTATE_SW_STANDBY;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2203      	movs	r2, #3
 800c646:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2200      	movs	r2, #0
 800c64c:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2200      	movs	r2, #0
 800c652:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2200      	movs	r2, #0
 800c658:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2218      	movs	r2, #24
 800c65e:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 800c660:	897b      	ldrh	r3, [r7, #10]
 800c662:	b2da      	uxtb	r2, r3
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2200      	movs	r2, #0
 800c66c:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2200      	movs	r2, #0
 800c672:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status               = 0;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2200      	movs	r2, #0
 800c67a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status              = 0;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2200      	movs	r2, #0
 800c682:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count               = 0;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2200      	movs	r2, #0
 800c68a:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2200      	movs	r2, #0
 800c692:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2200      	movs	r2, #0
 800c69a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	pdata->cal_config__vcsel_start            = 0;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	pdata->vcsel_width                        = 0;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->VL53LX_p_005                       = 0;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	pdata->VL53LX_p_015                = 0;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	pdata->min_bin_value                      = 0;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pdata->max_bin_value                      = 0;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pdata->zero_distance_phase                = 0;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum                 = 0;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pdata->VL53LX_p_028             = 0;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800c6fe:	2300      	movs	r3, #0
 800c700:	82fb      	strh	r3, [r7, #22]
 800c702:	e009      	b.n	800c718 <VL53LX_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800c704:	8afb      	ldrh	r3, [r7, #22]
 800c706:	8afa      	ldrh	r2, [r7, #22]
 800c708:	b2d1      	uxtb	r1, r2
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	4413      	add	r3, r2
 800c70e:	460a      	mov	r2, r1
 800c710:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800c712:	8afb      	ldrh	r3, [r7, #22]
 800c714:	3301      	adds	r3, #1
 800c716:	82fb      	strh	r3, [r7, #22]
 800c718:	8afb      	ldrh	r3, [r7, #22]
 800c71a:	2b05      	cmp	r3, #5
 800c71c:	d9f2      	bls.n	800c704 <VL53LX_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800c71e:	2300      	movs	r3, #0
 800c720:	82fb      	strh	r3, [r7, #22]
 800c722:	e007      	b.n	800c734 <VL53LX_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800c724:	8afb      	ldrh	r3, [r7, #22]
 800c726:	687a      	ldr	r2, [r7, #4]
 800c728:	4413      	add	r3, r2
 800c72a:	2201      	movs	r2, #1
 800c72c:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800c72e:	8afb      	ldrh	r3, [r7, #22]
 800c730:	3301      	adds	r3, #1
 800c732:	82fb      	strh	r3, [r7, #22]
 800c734:	8afb      	ldrh	r3, [r7, #22]
 800c736:	2b05      	cmp	r3, #5
 800c738:	d9f4      	bls.n	800c724 <VL53LX_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800c73a:	2300      	movs	r3, #0
 800c73c:	82fb      	strh	r3, [r7, #22]
 800c73e:	e013      	b.n	800c768 <VL53LX_init_histogram_bin_data_struct+0x13e>
		if (i < VL53LX_p_021)
 800c740:	8afa      	ldrh	r2, [r7, #22]
 800c742:	897b      	ldrh	r3, [r7, #10]
 800c744:	429a      	cmp	r2, r3
 800c746:	d206      	bcs.n	800c756 <VL53LX_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 800c748:	8afa      	ldrh	r2, [r7, #22]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	3206      	adds	r2, #6
 800c74e:	68f9      	ldr	r1, [r7, #12]
 800c750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c754:	e005      	b.n	800c762 <VL53LX_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 800c756:	8afa      	ldrh	r2, [r7, #22]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	3206      	adds	r2, #6
 800c75c:	2100      	movs	r1, #0
 800c75e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800c762:	8afb      	ldrh	r3, [r7, #22]
 800c764:	3301      	adds	r3, #1
 800c766:	82fb      	strh	r3, [r7, #22]
 800c768:	8afb      	ldrh	r3, [r7, #22]
 800c76a:	2b17      	cmp	r3, #23
 800c76c:	d9e8      	bls.n	800c740 <VL53LX_init_histogram_bin_data_struct+0x116>


}
 800c76e:	bf00      	nop
 800c770:	bf00      	nop
 800c772:	371c      	adds	r7, #28
 800c774:	46bd      	mov	sp, r7
 800c776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77a:	4770      	bx	lr

0800c77c <VL53LX_decode_row_col>:

void VL53LX_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800c77c:	b480      	push	{r7}
 800c77e:	b085      	sub	sp, #20
 800c780:	af00      	add	r7, sp, #0
 800c782:	4603      	mov	r3, r0
 800c784:	60b9      	str	r1, [r7, #8]
 800c786:	607a      	str	r2, [r7, #4]
 800c788:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 800c78a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	da10      	bge.n	800c7b4 <VL53LX_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800c792:	7bfb      	ldrb	r3, [r7, #15]
 800c794:	43db      	mvns	r3, r3
 800c796:	b2db      	uxtb	r3, r3
 800c798:	f003 0307 	and.w	r3, r3, #7
 800c79c:	b2db      	uxtb	r3, r3
 800c79e:	3308      	adds	r3, #8
 800c7a0:	b2da      	uxtb	r2, r3
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800c7a6:	7bfb      	ldrb	r3, [r7, #15]
 800c7a8:	3b80      	subs	r3, #128	; 0x80
 800c7aa:	10db      	asrs	r3, r3, #3
 800c7ac:	b2da      	uxtb	r2, r3
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800c7b2:	e00c      	b.n	800c7ce <VL53LX_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800c7b4:	7bfb      	ldrb	r3, [r7, #15]
 800c7b6:	f003 0307 	and.w	r3, r3, #7
 800c7ba:	b2da      	uxtb	r2, r3
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800c7c0:	7bfb      	ldrb	r3, [r7, #15]
 800c7c2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800c7c6:	10db      	asrs	r3, r3, #3
 800c7c8:	b2da      	uxtb	r2, r3
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	701a      	strb	r2, [r3, #0]
}
 800c7ce:	bf00      	nop
 800c7d0:	3714      	adds	r7, #20
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d8:	4770      	bx	lr

0800c7da <VL53LX_hist_find_min_max_bin_values>:


void  VL53LX_hist_find_min_max_bin_values(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800c7da:	b480      	push	{r7}
 800c7dc:	b085      	sub	sp, #20
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	73fb      	strb	r3, [r7, #15]
 800c7ea:	e02c      	b.n	800c846 <VL53LX_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 800c7ec:	7bfb      	ldrb	r3, [r7, #15]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d009      	beq.n	800c806 <VL53LX_hist_find_min_max_bin_values+0x2c>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800c7f8:	7bf9      	ldrb	r1, [r7, #15]
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	3106      	adds	r1, #6
 800c7fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c802:	429a      	cmp	r2, r3
 800c804:	db07      	blt.n	800c816 <VL53LX_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 800c806:	7bfa      	ldrb	r2, [r7, #15]
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	3206      	adds	r2, #6
 800c80c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800c816:	7bfb      	ldrb	r3, [r7, #15]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d009      	beq.n	800c830 <VL53LX_hist_find_min_max_bin_values+0x56>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c822:	7bf9      	ldrb	r1, [r7, #15]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	3106      	adds	r1, #6
 800c828:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c82c:	429a      	cmp	r2, r3
 800c82e:	dc07      	bgt.n	800c840 <VL53LX_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 800c830:	7bfa      	ldrb	r2, [r7, #15]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	3206      	adds	r2, #6
 800c836:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800c840:	7bfb      	ldrb	r3, [r7, #15]
 800c842:	3301      	adds	r3, #1
 800c844:	73fb      	strb	r3, [r7, #15]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	7a9b      	ldrb	r3, [r3, #10]
 800c84a:	7bfa      	ldrb	r2, [r7, #15]
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d3cd      	bcc.n	800c7ec <VL53LX_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 800c850:	bf00      	nop
 800c852:	bf00      	nop
 800c854:	3714      	adds	r7, #20
 800c856:	46bd      	mov	sp, r7
 800c858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85c:	4770      	bx	lr

0800c85e <VL53LX_hist_estimate_ambient_from_ambient_bins>:


void  VL53LX_hist_estimate_ambient_from_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800c85e:	b480      	push	{r7}
 800c860:	b085      	sub	sp, #20
 800c862:	af00      	add	r7, sp, #0
 800c864:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800c866:	2300      	movs	r3, #0
 800c868:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	7adb      	ldrb	r3, [r3, #11]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d03a      	beq.n	800c8e8 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e



		pdata->ambient_events_sum = 0;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2200      	movs	r2, #0
 800c880:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800c884:	2300      	movs	r3, #0
 800c886:	73fb      	strb	r3, [r7, #15]
 800c888:	e00e      	b.n	800c8a8 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800c890:	7bf9      	ldrb	r1, [r7, #15]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	3106      	adds	r1, #6
 800c896:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c89a:	441a      	add	r2, r3
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800c8a2:	7bfb      	ldrb	r3, [r7, #15]
 800c8a4:	3301      	adds	r3, #1
 800c8a6:	73fb      	strb	r3, [r7, #15]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	7adb      	ldrb	r3, [r3, #11]
 800c8ac:	7bfa      	ldrb	r2, [r7, #15]
 800c8ae:	429a      	cmp	r2, r3
 800c8b0:	d3eb      	bcc.n	800c88a <VL53LX_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53LX_p_028 = pdata->ambient_events_sum;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 +=
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 800c8c4:	687a      	ldr	r2, [r7, #4]
 800c8c6:	7ad2      	ldrb	r2, [r2, #11]
 800c8c8:	0852      	lsrs	r2, r2, #1
 800c8ca:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800c8cc:	441a      	add	r2, r3
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 /=
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53LX_p_028 /=
 800c8de:	fb93 f2f2 	sdiv	r2, r3, r2
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	}

	LOG_FUNCTION_END(0);
}
 800c8e8:	bf00      	nop
 800c8ea:	3714      	adds	r7, #20
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f2:	4770      	bx	lr

0800c8f4 <VL53LX_f_001>:
	VL53LX_dmax_calibration_data_t	     *pcal,
	VL53LX_hist_gen3_dmax_config_t	     *pcfg,
	VL53LX_histogram_bin_data_t          *pbins,
	VL53LX_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 800c8f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c8f8:	b096      	sub	sp, #88	; 0x58
 800c8fa:	af00      	add	r7, sp, #0
 800c8fc:	6339      	str	r1, [r7, #48]	; 0x30
 800c8fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c900:	62bb      	str	r3, [r7, #40]	; 0x28
 800c902:	4603      	mov	r3, r0
 800c904:	86fb      	strh	r3, [r7, #54]	; 0x36



	VL53LX_Error status  = VL53LX_ERROR_NONE;
 800c906:	2300      	movs	r3, #0
 800c908:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	uint32_t    pll_period_us       = 0;
 800c90c:	2300      	movs	r3, #0
 800c90e:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t    periods_elapsed     = 0;
 800c910:	2300      	movs	r3, #0
 800c912:	63fb      	str	r3, [r7, #60]	; 0x3c

	uint32_t    tmp32               = 0;
 800c914:	2300      	movs	r3, #0
 800c916:	657b      	str	r3, [r7, #84]	; 0x54
	uint64_t    tmp64               = 0;
 800c918:	f04f 0200 	mov.w	r2, #0
 800c91c:	f04f 0300 	mov.w	r3, #0
 800c920:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint32_t    amb_thres_delta     = 0;
 800c924:	2300      	movs	r3, #0
 800c926:	63bb      	str	r3, [r7, #56]	; 0x38

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_004     = 0x0000;
 800c928:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c92a:	2300      	movs	r3, #0
 800c92c:	8353      	strh	r3, [r2, #26]
	pdata->VL53LX_p_033 = 0x0000;
 800c92e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c930:	2300      	movs	r3, #0
 800c932:	6153      	str	r3, [r2, #20]
	pdata->VL53LX_p_034          = 0x0000;
 800c934:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c936:	2300      	movs	r3, #0
 800c938:	8313      	strh	r3, [r2, #24]
	pdata->VL53LX_p_009    = 0x0000;
 800c93a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c93c:	2300      	movs	r3, #0
 800c93e:	6113      	str	r3, [r2, #16]
	pdata->VL53LX_p_028     = 0x0000;
 800c940:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c942:	2300      	movs	r3, #0
 800c944:	61d3      	str	r3, [r2, #28]
	pdata->VL53LX_p_035 = 0x0000;
 800c946:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c948:	2300      	movs	r3, #0
 800c94a:	6213      	str	r3, [r2, #32]
	pdata->VL53LX_p_036             = 0;
 800c94c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c94e:	2300      	movs	r3, #0
 800c950:	8493      	strh	r3, [r2, #36]	; 0x24
	pdata->VL53LX_p_022            = 0;
 800c952:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c954:	2300      	movs	r3, #0
 800c956:	84d3      	strh	r3, [r2, #38]	; 0x26

	*pambient_dmax_mm  = 0;
 800c958:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c95a:	2300      	movs	r3, #0
 800c95c:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53LX_p_015        != 0) &&
 800c95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c960:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c964:	2b00      	cmp	r3, #0
 800c966:	f000 80ab 	beq.w	800cac0 <VL53LX_f_001+0x1cc>
		(pbins->total_periods_elapsed      != 0)) {
 800c96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c96c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((pbins->VL53LX_p_015        != 0) &&
 800c970:	2b00      	cmp	r3, #0
 800c972:	f000 80a5 	beq.w	800cac0 <VL53LX_f_001+0x1cc>



		pll_period_us   =
			VL53LX_calc_pll_period_us(pbins->VL53LX_p_015);
 800c976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c978:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c97c:	4618      	mov	r0, r3
 800c97e:	f7ff fa30 	bl	800bde2 <VL53LX_calc_pll_period_us>
 800c982:	6438      	str	r0, [r7, #64]	; 0x40



		periods_elapsed = pbins->total_periods_elapsed + 1;
 800c984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c98a:	3301      	adds	r3, #1
 800c98c:	63fb      	str	r3, [r7, #60]	; 0x3c



		pdata->VL53LX_p_037  =
			VL53LX_duration_maths(
 800c98e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c990:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c994:	2110      	movs	r1, #16
 800c996:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c998:	f7ff fa3a 	bl	800be10 <VL53LX_duration_maths>
 800c99c:	4602      	mov	r2, r0
		pdata->VL53LX_p_037  =
 800c99e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9a0:	601a      	str	r2, [r3, #0]
				VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53LX_p_034 =
			VL53LX_rate_maths(
 800c9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800c9a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	4610      	mov	r0, r2
 800c9b0:	f7ff fc97 	bl	800c2e2 <VL53LX_rate_maths>
 800c9b4:	4603      	mov	r3, r0
		pdata->VL53LX_p_034 =
 800c9b6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c9b8:	8313      	strh	r3, [r2, #24]
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_033   =
			VL53LX_events_per_spad_maths(
 800c9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9bc:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 800c9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c2:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 800c9c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	461a      	mov	r2, r3
 800c9cc:	f7ff fa7a 	bl	800bec4 <VL53LX_events_per_spad_maths>
 800c9d0:	4602      	mov	r2, r0
		pdata->VL53LX_p_033   =
 800c9d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9d4:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_038 = pcfg->max_effective_spads;
 800c9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d8:	8adb      	ldrh	r3, [r3, #22]
 800c9da:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c9dc:	8193      	strh	r3, [r2, #12]
		pdata->VL53LX_p_004  = pcfg->max_effective_spads;
 800c9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e0:	8adb      	ldrh	r3, [r3, #22]
 800c9e2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c9e4:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53LX_p_033 > 0) {
 800c9e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9e8:	695b      	ldr	r3, [r3, #20]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d068      	beq.n	800cac0 <VL53LX_f_001+0x1cc>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 800c9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f0:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 800c9f2:	b29a      	uxth	r2, r3
 800c9f4:	f04f 0300 	mov.w	r3, #0
 800c9f8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tmp64  *= 1000;
 800c9fc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800ca00:	4622      	mov	r2, r4
 800ca02:	462b      	mov	r3, r5
 800ca04:	f04f 0000 	mov.w	r0, #0
 800ca08:	f04f 0100 	mov.w	r1, #0
 800ca0c:	0159      	lsls	r1, r3, #5
 800ca0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ca12:	0150      	lsls	r0, r2, #5
 800ca14:	4602      	mov	r2, r0
 800ca16:	460b      	mov	r3, r1
 800ca18:	1b12      	subs	r2, r2, r4
 800ca1a:	eb63 0305 	sbc.w	r3, r3, r5
 800ca1e:	f04f 0000 	mov.w	r0, #0
 800ca22:	f04f 0100 	mov.w	r1, #0
 800ca26:	0099      	lsls	r1, r3, #2
 800ca28:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800ca2c:	0090      	lsls	r0, r2, #2
 800ca2e:	4602      	mov	r2, r0
 800ca30:	460b      	mov	r3, r1
 800ca32:	1912      	adds	r2, r2, r4
 800ca34:	eb45 0303 	adc.w	r3, r5, r3
 800ca38:	f04f 0000 	mov.w	r0, #0
 800ca3c:	f04f 0100 	mov.w	r1, #0
 800ca40:	00d9      	lsls	r1, r3, #3
 800ca42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ca46:	00d0      	lsls	r0, r2, #3
 800ca48:	4602      	mov	r2, r0
 800ca4a:	460b      	mov	r3, r1
 800ca4c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tmp64 <<= (11+1);
 800ca50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ca54:	f04f 0000 	mov.w	r0, #0
 800ca58:	f04f 0100 	mov.w	r1, #0
 800ca5c:	0319      	lsls	r1, r3, #12
 800ca5e:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800ca62:	0310      	lsls	r0, r2, #12
 800ca64:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
			tmp32 = pdata->VL53LX_p_033/2;
 800ca68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca6a:	695b      	ldr	r3, [r3, #20]
 800ca6c:	085b      	lsrs	r3, r3, #1
 800ca6e:	657b      	str	r3, [r7, #84]	; 0x54
			tmp64 += (uint64_t)tmp32;
 800ca70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca72:	4618      	mov	r0, r3
 800ca74:	f04f 0100 	mov.w	r1, #0
 800ca78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ca7c:	eb12 0800 	adds.w	r8, r2, r0
 800ca80:	eb43 0901 	adc.w	r9, r3, r1
 800ca84:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
			tmp64 = do_division_u(tmp64,
 800ca88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca8a:	695b      	ldr	r3, [r3, #20]
 800ca8c:	461a      	mov	r2, r3
 800ca8e:	f04f 0300 	mov.w	r3, #0
 800ca92:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800ca96:	f7f4 f839 	bl	8000b0c <__aeabi_uldivmod>
 800ca9a:	4602      	mov	r2, r0
 800ca9c:	460b      	mov	r3, r1
 800ca9e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				(uint64_t)pdata->VL53LX_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 800caa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa4:	8adb      	ldrh	r3, [r3, #22]
 800caa6:	b298      	uxth	r0, r3
 800caa8:	f04f 0100 	mov.w	r1, #0
 800caac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cab0:	428b      	cmp	r3, r1
 800cab2:	bf08      	it	eq
 800cab4:	4282      	cmpeq	r2, r0
 800cab6:	d203      	bcs.n	800cac0 <VL53LX_f_001+0x1cc>
				pdata->VL53LX_p_004 = (uint16_t)tmp64;
 800cab8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800cabc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cabe:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 800cac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac2:	881b      	ldrh	r3, [r3, #0]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	f000 8203 	beq.w	800ced0 <VL53LX_f_001+0x5dc>
		(pbins->VL53LX_p_015        != 0) &&
 800caca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cacc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	f000 81fd 	beq.w	800ced0 <VL53LX_f_001+0x5dc>
		(pcal->ref_reflectance_pc          != 0) &&
 800cad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad8:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53LX_p_015        != 0) &&
 800cada:	2b00      	cmp	r3, #0
 800cadc:	f000 81f8 	beq.w	800ced0 <VL53LX_f_001+0x5dc>
		(pbins->total_periods_elapsed      != 0)) {
 800cae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	f000 81f2 	beq.w	800ced0 <VL53LX_f_001+0x5dc>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 800caec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caee:	885b      	ldrh	r3, [r3, #2]
 800caf0:	b29a      	uxth	r2, r3
 800caf2:	f04f 0300 	mov.w	r3, #0
 800caf6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64 *= (1000 * 256);
 800cafa:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800cafe:	4622      	mov	r2, r4
 800cb00:	462b      	mov	r3, r5
 800cb02:	f04f 0000 	mov.w	r0, #0
 800cb06:	f04f 0100 	mov.w	r1, #0
 800cb0a:	0159      	lsls	r1, r3, #5
 800cb0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cb10:	0150      	lsls	r0, r2, #5
 800cb12:	4602      	mov	r2, r0
 800cb14:	460b      	mov	r3, r1
 800cb16:	1b12      	subs	r2, r2, r4
 800cb18:	eb63 0305 	sbc.w	r3, r3, r5
 800cb1c:	f04f 0000 	mov.w	r0, #0
 800cb20:	f04f 0100 	mov.w	r1, #0
 800cb24:	0099      	lsls	r1, r3, #2
 800cb26:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800cb2a:	0090      	lsls	r0, r2, #2
 800cb2c:	4602      	mov	r2, r0
 800cb2e:	460b      	mov	r3, r1
 800cb30:	1912      	adds	r2, r2, r4
 800cb32:	eb45 0303 	adc.w	r3, r5, r3
 800cb36:	f04f 0000 	mov.w	r0, #0
 800cb3a:	f04f 0100 	mov.w	r1, #0
 800cb3e:	02d9      	lsls	r1, r3, #11
 800cb40:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800cb44:	02d0      	lsls	r0, r2, #11
 800cb46:	4602      	mov	r2, r0
 800cb48:	460b      	mov	r3, r1
 800cb4a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp32  = pcal->ref__actual_effective_spads/2;
 800cb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb50:	881b      	ldrh	r3, [r3, #0]
 800cb52:	085b      	lsrs	r3, r3, #1
 800cb54:	b29b      	uxth	r3, r3
 800cb56:	657b      	str	r3, [r7, #84]	; 0x54
		tmp64 += (uint64_t)tmp32;
 800cb58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f04f 0100 	mov.w	r1, #0
 800cb60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cb64:	eb12 0a00 	adds.w	sl, r2, r0
 800cb68:	eb43 0b01 	adc.w	fp, r3, r1
 800cb6c:	e9c7 ab12 	strd	sl, fp, [r7, #72]	; 0x48
		tmp64  = do_division_u(tmp64,
 800cb70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb72:	881b      	ldrh	r3, [r3, #0]
 800cb74:	b29a      	uxth	r2, r3
 800cb76:	f04f 0300 	mov.w	r3, #0
 800cb7a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800cb7e:	f7f3 ffc5 	bl	8000b0c <__aeabi_uldivmod>
 800cb82:	4602      	mov	r2, r0
 800cb84:	460b      	mov	r3, r1
 800cb86:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53LX_p_009   = (uint32_t)tmp64;
 800cb8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb8e:	611a      	str	r2, [r3, #16]
		pdata->VL53LX_p_009 <<= 4;
 800cb90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb92:	691b      	ldr	r3, [r3, #16]
 800cb94:	011a      	lsls	r2, r3, #4
 800cb96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb98:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800cb9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	461a      	mov	r2, r3
 800cba0:	f04f 0300 	mov.w	r3, #0
 800cba4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_033;
 800cba8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cbaa:	695b      	ldr	r3, [r3, #20]
 800cbac:	461a      	mov	r2, r3
 800cbae:	f04f 0300 	mov.w	r3, #0
 800cbb2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cbb4:	fb02 f001 	mul.w	r0, r2, r1
 800cbb8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cbba:	fb03 f101 	mul.w	r1, r3, r1
 800cbbe:	4401      	add	r1, r0
 800cbc0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800cbc2:	fba0 2302 	umull	r2, r3, r0, r2
 800cbc6:	4419      	add	r1, r3
 800cbc8:	460b      	mov	r3, r1
 800cbca:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800cbce:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800cbd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cbd4:	8b5b      	ldrh	r3, [r3, #26]
 800cbd6:	b29a      	uxth	r2, r3
 800cbd8:	f04f 0300 	mov.w	r3, #0
 800cbdc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cbde:	fb02 f001 	mul.w	r0, r2, r1
 800cbe2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cbe4:	fb03 f101 	mul.w	r1, r3, r1
 800cbe8:	4401      	add	r1, r0
 800cbea:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800cbec:	fba0 2302 	umull	r2, r3, r0, r2
 800cbf0:	4419      	add	r1, r3
 800cbf2:	460b      	mov	r3, r1
 800cbf4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800cbf8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  += (1<<(11+7));
 800cbfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cc00:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800cc04:	6239      	str	r1, [r7, #32]
 800cc06:	f143 0300 	adc.w	r3, r3, #0
 800cc0a:	627b      	str	r3, [r7, #36]	; 0x24
 800cc0c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800cc10:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64 >>= (11+8);
 800cc14:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800cc18:	f04f 0200 	mov.w	r2, #0
 800cc1c:	f04f 0300 	mov.w	r3, #0
 800cc20:	0cc2      	lsrs	r2, r0, #19
 800cc22:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800cc26:	0ccb      	lsrs	r3, r1, #19
 800cc28:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  +=  500;
 800cc2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cc30:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800cc34:	61b9      	str	r1, [r7, #24]
 800cc36:	f143 0300 	adc.w	r3, r3, #0
 800cc3a:	61fb      	str	r3, [r7, #28]
 800cc3c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800cc40:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64   = do_division_u(tmp64, 1000);
 800cc44:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800cc48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cc4c:	f04f 0300 	mov.w	r3, #0
 800cc50:	f7f3 ff5c 	bl	8000b0c <__aeabi_uldivmod>
 800cc54:	4602      	mov	r2, r0
 800cc56:	460b      	mov	r3, r1
 800cc58:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48


		if (tmp64 > 0x00FFFFFF)
 800cc5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cc60:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800cc64:	f04f 0100 	mov.w	r1, #0
 800cc68:	4299      	cmp	r1, r3
 800cc6a:	bf08      	it	eq
 800cc6c:	4290      	cmpeq	r0, r2
 800cc6e:	d205      	bcs.n	800cc7c <VL53LX_f_001+0x388>
			tmp64 = 0x00FFFFFF;
 800cc70:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800cc74:	f04f 0300 	mov.w	r3, #0
 800cc78:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		pdata->VL53LX_p_028     = (uint32_t)tmp64;
 800cc7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc80:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800cc82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	461a      	mov	r2, r3
 800cc88:	f04f 0300 	mov.w	r3, #0
 800cc8c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_009;
 800cc90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc92:	691b      	ldr	r3, [r3, #16]
 800cc94:	461a      	mov	r2, r3
 800cc96:	f04f 0300 	mov.w	r3, #0
 800cc9a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cc9c:	fb02 f001 	mul.w	r0, r2, r1
 800cca0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cca2:	fb03 f101 	mul.w	r1, r3, r1
 800cca6:	4401      	add	r1, r0
 800cca8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ccaa:	fba0 2302 	umull	r2, r3, r0, r2
 800ccae:	4419      	add	r1, r3
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800ccb6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800ccba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ccbc:	8b5b      	ldrh	r3, [r3, #26]
 800ccbe:	b29a      	uxth	r2, r3
 800ccc0:	f04f 0300 	mov.w	r3, #0
 800ccc4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ccc6:	fb02 f001 	mul.w	r0, r2, r1
 800ccca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cccc:	fb03 f101 	mul.w	r1, r3, r1
 800ccd0:	4401      	add	r1, r0
 800ccd2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ccd4:	fba0 2302 	umull	r2, r3, r0, r2
 800ccd8:	4419      	add	r1, r3
 800ccda:	460b      	mov	r3, r1
 800ccdc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800cce0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  += (1<<(11+7));
 800cce4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cce8:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800ccec:	6139      	str	r1, [r7, #16]
 800ccee:	f143 0300 	adc.w	r3, r3, #0
 800ccf2:	617b      	str	r3, [r7, #20]
 800ccf4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ccf8:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64 >>= (11+8);
 800ccfc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800cd00:	f04f 0200 	mov.w	r2, #0
 800cd04:	f04f 0300 	mov.w	r3, #0
 800cd08:	0cc2      	lsrs	r2, r0, #19
 800cd0a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800cd0e:	0ccb      	lsrs	r3, r1, #19
 800cd10:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48



		tmp64  *= ((uint64_t)target_reflectance *
 800cd14:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 800cd16:	f04f 0100 	mov.w	r1, #0
				   (uint64_t)pcal->coverglass_transmission);
 800cd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd1c:	891b      	ldrh	r3, [r3, #8]
 800cd1e:	b29a      	uxth	r2, r3
 800cd20:	f04f 0300 	mov.w	r3, #0
		tmp64  *= ((uint64_t)target_reflectance *
 800cd24:	fb02 f501 	mul.w	r5, r2, r1
 800cd28:	fb00 f403 	mul.w	r4, r0, r3
 800cd2c:	442c      	add	r4, r5
 800cd2e:	fba0 2302 	umull	r2, r3, r0, r2
 800cd32:	18e1      	adds	r1, r4, r3
 800cd34:	460b      	mov	r3, r1
 800cd36:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cd38:	fb02 f001 	mul.w	r0, r2, r1
 800cd3c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cd3e:	fb03 f101 	mul.w	r1, r3, r1
 800cd42:	4401      	add	r1, r0
 800cd44:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800cd46:	fba0 2302 	umull	r2, r3, r0, r2
 800cd4a:	4419      	add	r1, r3
 800cd4c:	460b      	mov	r3, r1
 800cd4e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800cd52:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 800cd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd58:	88db      	ldrh	r3, [r3, #6]
 800cd5a:	b298      	uxth	r0, r3
 800cd5c:	f04f 0100 	mov.w	r1, #0
 800cd60:	f04f 0200 	mov.w	r2, #0
 800cd64:	f04f 0300 	mov.w	r3, #0
 800cd68:	01cb      	lsls	r3, r1, #7
 800cd6a:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 800cd6e:	01c2      	lsls	r2, r0, #7
 800cd70:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800cd74:	1884      	adds	r4, r0, r2
 800cd76:	60bc      	str	r4, [r7, #8]
 800cd78:	eb41 0303 	adc.w	r3, r1, r3
 800cd7c:	60fb      	str	r3, [r7, #12]
 800cd7e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800cd82:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64  = do_division_u(tmp64,
 800cd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd88:	88db      	ldrh	r3, [r3, #6]
 800cd8a:	b298      	uxth	r0, r3
 800cd8c:	f04f 0100 	mov.w	r1, #0
 800cd90:	f04f 0200 	mov.w	r2, #0
 800cd94:	f04f 0300 	mov.w	r3, #0
 800cd98:	020b      	lsls	r3, r1, #8
 800cd9a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cd9e:	0202      	lsls	r2, r0, #8
 800cda0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800cda4:	f7f3 feb2 	bl	8000b0c <__aeabi_uldivmod>
 800cda8:	4602      	mov	r2, r0
 800cdaa:	460b      	mov	r3, r1
 800cdac:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 800cdb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cdb4:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800cdb8:	6039      	str	r1, [r7, #0]
 800cdba:	f143 0300 	adc.w	r3, r3, #0
 800cdbe:	607b      	str	r3, [r7, #4]
 800cdc0:	e9d7 3400 	ldrd	r3, r4, [r7]
 800cdc4:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64  = do_division_u(tmp64, 1000);
 800cdc8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800cdcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cdd0:	f04f 0300 	mov.w	r3, #0
 800cdd4:	f7f3 fe9a 	bl	8000b0c <__aeabi_uldivmod>
 800cdd8:	4602      	mov	r2, r0
 800cdda:	460b      	mov	r3, r1
 800cddc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48


		if (tmp64 > 0x00FFFFFF)
 800cde0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cde4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800cde8:	f04f 0100 	mov.w	r1, #0
 800cdec:	4299      	cmp	r1, r3
 800cdee:	bf08      	it	eq
 800cdf0:	4290      	cmpeq	r0, r2
 800cdf2:	d205      	bcs.n	800ce00 <VL53LX_f_001+0x50c>
			tmp64 = 0x00FFFFFF;
 800cdf4:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800cdf8:	f04f 0300 	mov.w	r3, #0
 800cdfc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		pdata->VL53LX_p_035 = (uint32_t)tmp64;
 800ce00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce04:	621a      	str	r2, [r3, #32]



		tmp32  = VL53LX_isqrt(pdata->VL53LX_p_028 << 8);
 800ce06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce08:	69db      	ldr	r3, [r3, #28]
 800ce0a:	021b      	lsls	r3, r3, #8
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f7ff f8e2 	bl	800bfd6 <VL53LX_isqrt>
 800ce12:	6578      	str	r0, [r7, #84]	; 0x54
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 800ce14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce16:	785b      	ldrb	r3, [r3, #1]
 800ce18:	461a      	mov	r2, r3
 800ce1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce1c:	fb02 f303 	mul.w	r3, r2, r3
 800ce20:	657b      	str	r3, [r7, #84]	; 0x54



		if (pdata->VL53LX_p_028 <
 800ce22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce24:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 800ce26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce28:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53LX_p_028 <
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	d20f      	bcs.n	800ce4e <VL53LX_f_001+0x55a>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 800ce2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53LX_p_028;
 800ce34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce36:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 800ce38:	1ad3      	subs	r3, r2, r3
 800ce3a:	63bb      	str	r3, [r7, #56]	; 0x38


			amb_thres_delta <<= 8;
 800ce3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce3e:	021b      	lsls	r3, r3, #8
 800ce40:	63bb      	str	r3, [r7, #56]	; 0x38

			if (tmp32 < amb_thres_delta)
 800ce42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ce44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d201      	bcs.n	800ce4e <VL53LX_f_001+0x55a>
				tmp32 = amb_thres_delta;
 800ce4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4c:	657b      	str	r3, [r7, #84]	; 0x54
		}



		pdata->VL53LX_p_022 =
			(int16_t)VL53LX_f_002(
 800ce4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce50:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53LX_p_035,
				(uint32_t)pcal->ref__distance_mm,
 800ce52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce54:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800ce56:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800ce58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce5a:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800ce5c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ce5e:	f000 f83e 	bl	800cede <VL53LX_f_002>
 800ce62:	4603      	mov	r3, r0
 800ce64:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_022 =
 800ce66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce68:	84da      	strh	r2, [r3, #38]	; 0x26



		tmp32  = (uint32_t)pdata->VL53LX_p_035;
 800ce6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce6c:	6a1b      	ldr	r3, [r3, #32]
 800ce6e:	657b      	str	r3, [r7, #84]	; 0x54
		tmp32 *= (uint32_t)pbins->vcsel_width;
 800ce70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce72:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800ce76:	461a      	mov	r2, r3
 800ce78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce7a:	fb02 f303 	mul.w	r3, r2, r3
 800ce7e:	657b      	str	r3, [r7, #84]	; 0x54
		tmp32 += (1 << 3);
 800ce80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce82:	3308      	adds	r3, #8
 800ce84:	657b      	str	r3, [r7, #84]	; 0x54
		tmp32 /= (1 << 4);
 800ce86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce88:	091b      	lsrs	r3, r3, #4
 800ce8a:	657b      	str	r3, [r7, #84]	; 0x54

		pdata->VL53LX_p_036 =
			(int16_t)VL53LX_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 800ce8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce8e:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53LX_f_002(
 800ce90:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 800ce92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce94:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800ce96:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800ce98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce9a:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800ce9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ce9e:	f000 f81e 	bl	800cede <VL53LX_f_002>
 800cea2:	4603      	mov	r3, r0
 800cea4:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_036 =
 800cea6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cea8:	849a      	strh	r2, [r3, #36]	; 0x24




		if (pdata->VL53LX_p_036 < pdata->VL53LX_p_022)
 800ceaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ceac:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800ceb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ceb2:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800ceb6:	429a      	cmp	r2, r3
 800ceb8:	da05      	bge.n	800cec6 <VL53LX_f_001+0x5d2>
			*pambient_dmax_mm = pdata->VL53LX_p_036;
 800ceba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cebc:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800cec0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cec2:	801a      	strh	r2, [r3, #0]
 800cec4:	e004      	b.n	800ced0 <VL53LX_f_001+0x5dc>
		else
			*pambient_dmax_mm = pdata->VL53LX_p_022;
 800cec6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cec8:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800cecc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cece:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 800ced0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47

}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3758      	adds	r7, #88	; 0x58
 800ced8:	46bd      	mov	sp, r7
 800ceda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800cede <VL53LX_f_002>:
uint32_t VL53LX_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 800cede:	b580      	push	{r7, lr}
 800cee0:	b086      	sub	sp, #24
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	60f8      	str	r0, [r7, #12]
 800cee6:	60b9      	str	r1, [r7, #8]
 800cee8:	607a      	str	r2, [r7, #4]
 800ceea:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 800ceec:	2300      	movs	r3, #0
 800ceee:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 800cef0:	2300      	movs	r3, #0
 800cef2:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	009b      	lsls	r3, r3, #2
 800cef8:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	fb03 f303 	mul.w	r3, r3, r3
 800cf00:	693a      	ldr	r2, [r7, #16]
 800cf02:	4413      	add	r3, r2
 800cf04:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53LX_isqrt(tmp32);
 800cf06:	6938      	ldr	r0, [r7, #16]
 800cf08:	f7ff f865 	bl	800bfd6 <VL53LX_isqrt>
 800cf0c:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 800cf0e:	693a      	ldr	r2, [r7, #16]
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	4413      	add	r3, r2
 800cf14:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53LX_isqrt(ref_signal_events << 4);
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	011b      	lsls	r3, r3, #4
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	f7ff f85b 	bl	800bfd6 <VL53LX_isqrt>
 800cf20:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	687a      	ldr	r2, [r7, #4]
 800cf26:	fb02 f303 	mul.w	r3, r2, r3
 800cf2a:	617b      	str	r3, [r7, #20]
	if (tmp32 != 0) {
 800cf2c:	693b      	ldr	r3, [r7, #16]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d009      	beq.n	800cf46 <VL53LX_f_002+0x68>
		range_mm += (tmp32);
 800cf32:	697a      	ldr	r2, [r7, #20]
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	4413      	add	r3, r2
 800cf38:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 800cf3a:	693b      	ldr	r3, [r7, #16]
 800cf3c:	005b      	lsls	r3, r3, #1
 800cf3e:	697a      	ldr	r2, [r7, #20]
 800cf40:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf44:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 800cf46:	697b      	ldr	r3, [r7, #20]

}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	3718      	adds	r7, #24
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}

0800cf50 <VL53LX_f_003>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53LX_f_003(
	VL53LX_hist_gen3_algo_private_data_t   *palgo)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b084      	sub	sp, #16
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	73fb      	strb	r3, [r7, #15]

	palgo->VL53LX_p_020              = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2218      	movs	r2, #24
 800cf60:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019                = 0;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2200      	movs	r2, #0
 800cf66:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021           = 0;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_039         = 0;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2200      	movs	r2, #0
 800cf72:	711a      	strb	r2, [r3, #4]
	palgo->VL53LX_p_028   = 0;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2200      	movs	r2, #0
 800cf78:	609a      	str	r2, [r3, #8]
	palgo->VL53LX_p_031 = 0;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	73fb      	strb	r3, [r7, #15]
 800cf86:	e01f      	b.n	800cfc8 <VL53LX_f_003+0x78>
		palgo->VL53LX_p_040[lb]      = 0;
 800cf88:	7bfb      	ldrb	r3, [r7, #15]
 800cf8a:	687a      	ldr	r2, [r7, #4]
 800cf8c:	4413      	add	r3, r2
 800cf8e:	2200      	movs	r2, #0
 800cf90:	741a      	strb	r2, [r3, #16]
		palgo->VL53LX_p_041[lb] = 0;
 800cf92:	7bfb      	ldrb	r3, [r7, #15]
 800cf94:	687a      	ldr	r2, [r7, #4]
 800cf96:	4413      	add	r3, r2
 800cf98:	2200      	movs	r2, #0
 800cf9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		palgo->VL53LX_p_042[lb]     = 0;
 800cf9e:	7bfb      	ldrb	r3, [r7, #15]
 800cfa0:	687a      	ldr	r2, [r7, #4]
 800cfa2:	4413      	add	r3, r2
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		palgo->VL53LX_p_043[lb]      = 0;
 800cfaa:	7bfa      	ldrb	r2, [r7, #15]
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	322e      	adds	r2, #46	; 0x2e
 800cfb0:	2100      	movs	r1, #0
 800cfb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53LX_p_018[lb]     = 0;
 800cfb6:	7bfa      	ldrb	r2, [r7, #15]
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	3246      	adds	r2, #70	; 0x46
 800cfbc:	2100      	movs	r1, #0
 800cfbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800cfc2:	7bfb      	ldrb	r3, [r7, #15]
 800cfc4:	3301      	adds	r3, #1
 800cfc6:	73fb      	strb	r3, [r7, #15]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	785b      	ldrb	r3, [r3, #1]
 800cfcc:	7bfa      	ldrb	r2, [r7, #15]
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d3da      	bcc.n	800cf88 <VL53LX_f_003+0x38>
	}

	palgo->VL53LX_p_044 = 0;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	palgo->VL53LX_p_045               = VL53LX_D_001;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2208      	movs	r2, #8
 800cfde:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	palgo->VL53LX_p_046             = 0;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a



	VL53LX_init_histogram_bin_data_struct(
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800cff0:	461a      	mov	r2, r3
 800cff2:	2118      	movs	r1, #24
 800cff4:	2000      	movs	r0, #0
 800cff6:	f7ff fb18 	bl	800c62a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_006));
	VL53LX_init_histogram_bin_data_struct(
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800d000:	461a      	mov	r2, r3
 800d002:	2118      	movs	r1, #24
 800d004:	2000      	movs	r0, #0
 800d006:	f7ff fb10 	bl	800c62a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_047));
	VL53LX_init_histogram_bin_data_struct(
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800d010:	461a      	mov	r2, r3
 800d012:	2118      	movs	r1, #24
 800d014:	2000      	movs	r0, #0
 800d016:	f7ff fb08 	bl	800c62a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_048));
	VL53LX_init_histogram_bin_data_struct(
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800d020:	461a      	mov	r2, r3
 800d022:	2118      	movs	r1, #24
 800d024:	2000      	movs	r0, #0
 800d026:	f7ff fb00 	bl	800c62a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_049));
	VL53LX_init_histogram_bin_data_struct(
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800d030:	461a      	mov	r2, r3
 800d032:	2118      	movs	r1, #24
 800d034:	2000      	movs	r0, #0
 800d036:	f7ff faf8 	bl	800c62a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_050));
}
 800d03a:	bf00      	nop
 800d03c:	3710      	adds	r7, #16
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}

0800d042 <VL53LX_f_006>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_histogram_bin_data_t           *pxtalk,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d042:	b5b0      	push	{r4, r5, r7, lr}
 800d044:	b08c      	sub	sp, #48	; 0x30
 800d046:	af00      	add	r7, sp, #0
 800d048:	60b9      	str	r1, [r7, #8]
 800d04a:	607a      	str	r2, [r7, #4]
 800d04c:	461a      	mov	r2, r3
 800d04e:	4603      	mov	r3, r0
 800d050:	81fb      	strh	r3, [r7, #14]
 800d052:	4613      	mov	r3, r2
 800d054:	737b      	strb	r3, [r7, #13]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d056:	2300      	movs	r3, #0
 800d058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  lb            = 0;
 800d05c:	2300      	movs	r3, #0
 800d05e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t  VL53LX_p_001            = 0;
 800d062:	2300      	movs	r3, #0
 800d064:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	int64_t  tmp          = 0;
 800d068:	f04f 0200 	mov.w	r2, #0
 800d06c:	f04f 0300 	mov.w	r3, #0
 800d070:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int32_t  amb_events   = 0;
 800d074:	2300      	movs	r3, #0
 800d076:	617b      	str	r3, [r7, #20]
	int32_t  VL53LX_p_018       = 0;
 800d078:	2300      	movs	r3, #0
 800d07a:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  samples      = 0;
 800d07c:	2300      	movs	r3, #0
 800d07e:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	palgo->VL53LX_p_020            = pbins->VL53LX_p_020;
 800d080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d082:	7a5a      	ldrb	r2, [r3, #9]
 800d084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d086:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019              = pbins->VL53LX_p_019;
 800d088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d08a:	7a1a      	ldrb	r2, [r3, #8]
 800d08c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d08e:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021         = pbins->VL53LX_p_021;
 800d090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d092:	7a9a      	ldrb	r2, [r3, #10]
 800d094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d096:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_028 = pbins->VL53LX_p_028;
 800d098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d09a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800d09e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0a0:	609a      	str	r2, [r3, #8]



	palgo->VL53LX_p_030 =
			VL53LX_decode_vcsel_period(pbins->VL53LX_p_005);
 800d0a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0a4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7ff fa6d 	bl	800c588 <VL53LX_decode_vcsel_period>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	461a      	mov	r2, r3
	palgo->VL53LX_p_030 =
 800d0b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0b4:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53LX_p_028;
 800d0b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d0bc:	461a      	mov	r2, r3
 800d0be:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800d0c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	tmp *= (int64_t)ambient_threshold_events_scaler;
 800d0c6:	89fa      	ldrh	r2, [r7, #14]
 800d0c8:	f04f 0300 	mov.w	r3, #0
 800d0cc:	69f9      	ldr	r1, [r7, #28]
 800d0ce:	fb02 f001 	mul.w	r0, r2, r1
 800d0d2:	69b9      	ldr	r1, [r7, #24]
 800d0d4:	fb03 f101 	mul.w	r1, r3, r1
 800d0d8:	4401      	add	r1, r0
 800d0da:	69b8      	ldr	r0, [r7, #24]
 800d0dc:	fba0 2302 	umull	r2, r3, r0, r2
 800d0e0:	4419      	add	r1, r3
 800d0e2:	460b      	mov	r3, r1
 800d0e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800d0e8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	tmp += 2048;
 800d0ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d0f0:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 800d0f4:	f143 0500 	adc.w	r5, r3, #0
 800d0f8:	e9c7 4506 	strd	r4, r5, [r7, #24]
	tmp = do_division_s(tmp, 4096);
 800d0fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d100:	2a00      	cmp	r2, #0
 800d102:	f173 0100 	sbcs.w	r1, r3, #0
 800d106:	da06      	bge.n	800d116 <VL53LX_f_006+0xd4>
 800d108:	f640 70ff 	movw	r0, #4095	; 0xfff
 800d10c:	f04f 0100 	mov.w	r1, #0
 800d110:	1812      	adds	r2, r2, r0
 800d112:	eb41 0303 	adc.w	r3, r1, r3
 800d116:	f04f 0000 	mov.w	r0, #0
 800d11a:	f04f 0100 	mov.w	r1, #0
 800d11e:	0b10      	lsrs	r0, r2, #12
 800d120:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800d124:	1319      	asrs	r1, r3, #12
 800d126:	e9c7 0106 	strd	r0, r1, [r7, #24]
	amb_events = (int32_t)tmp;
 800d12a:	69bb      	ldr	r3, [r7, #24]
 800d12c:	617b      	str	r3, [r7, #20]



	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800d12e:	2300      	movs	r3, #0
 800d130:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d134:	e062      	b.n	800d1fc <VL53LX_f_006+0x1ba>

		VL53LX_p_001 = lb >> 2;
 800d136:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d13a:	089b      	lsrs	r3, r3, #2
 800d13c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		samples = (int32_t)pbins->bin_rep[VL53LX_p_001];
 800d140:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d144:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d146:	4413      	add	r3, r2
 800d148:	7c9b      	ldrb	r3, [r3, #18]
 800d14a:	613b      	str	r3, [r7, #16]

		if (samples > 0) {
 800d14c:	693b      	ldr	r3, [r7, #16]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	dd4f      	ble.n	800d1f2 <VL53LX_f_006+0x1b0>

			if (lb < pxtalk->VL53LX_p_021 &&
 800d152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d154:	7a9b      	ldrb	r3, [r3, #10]
 800d156:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d20f      	bcs.n	800d17e <VL53LX_f_006+0x13c>
 800d15e:	7b7b      	ldrb	r3, [r7, #13]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d00c      	beq.n	800d17e <VL53LX_f_006+0x13c>
				algo__crosstalk_compensation_enable > 0)
				VL53LX_p_018 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 800d164:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d16a:	3206      	adds	r2, #6
 800d16c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53LX_p_018 = samples * (amb_events +
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	441a      	add	r2, r3
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	fb02 f303 	mul.w	r3, r2, r3
 800d17a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d17c:	e004      	b.n	800d188 <VL53LX_f_006+0x146>
			else
				VL53LX_p_018 = samples *  amb_events;
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	697a      	ldr	r2, [r7, #20]
 800d182:	fb02 f303 	mul.w	r3, r2, r3
 800d186:	62bb      	str	r3, [r7, #40]	; 0x28

			VL53LX_p_018  = VL53LX_isqrt(VL53LX_p_018);
 800d188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d18a:	4618      	mov	r0, r3
 800d18c:	f7fe ff23 	bl	800bfd6 <VL53LX_isqrt>
 800d190:	4603      	mov	r3, r0
 800d192:	62bb      	str	r3, [r7, #40]	; 0x28

			VL53LX_p_018 += (samples/2);
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	0fda      	lsrs	r2, r3, #31
 800d198:	4413      	add	r3, r2
 800d19a:	105b      	asrs	r3, r3, #1
 800d19c:	461a      	mov	r2, r3
 800d19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a0:	4413      	add	r3, r2
 800d1a2:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 /= samples;
 800d1a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	fb92 f3f3 	sdiv	r3, r2, r3
 800d1ac:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 *= ambient_threshold_sigma;
 800d1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b0:	68ba      	ldr	r2, [r7, #8]
 800d1b2:	fb02 f303 	mul.w	r3, r2, r3
 800d1b6:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 += 8;
 800d1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ba:	3308      	adds	r3, #8
 800d1bc:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 /= 16;
 800d1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	da00      	bge.n	800d1c6 <VL53LX_f_006+0x184>
 800d1c4:	330f      	adds	r3, #15
 800d1c6:	111b      	asrs	r3, r3, #4
 800d1c8:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 += amb_events;
 800d1ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	4413      	add	r3, r2
 800d1d0:	62bb      	str	r3, [r7, #40]	; 0x28

			if (VL53LX_p_018 < min_ambient_threshold_events)
 800d1d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	da01      	bge.n	800d1de <VL53LX_f_006+0x19c>
				VL53LX_p_018 = min_ambient_threshold_events;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	62bb      	str	r3, [r7, #40]	; 0x28

			palgo->VL53LX_p_052[lb]             = VL53LX_p_018;
 800d1de:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d1e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1e4:	3216      	adds	r2, #22
 800d1e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53LX_p_031 = VL53LX_p_018;
 800d1ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1f0:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800d1f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d1f6:	3301      	adds	r3, #1
 800d1f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d1fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1fe:	7a9b      	ldrb	r3, [r3, #10]
 800d200:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d204:	429a      	cmp	r2, r3
 800d206:	d396      	bcc.n	800d136 <VL53LX_f_006+0xf4>

	}



	palgo->VL53LX_p_039 = 0;
 800d208:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d20a:	2200      	movs	r2, #0
 800d20c:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800d20e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d210:	7a1b      	ldrb	r3, [r3, #8]
 800d212:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d216:	e033      	b.n	800d280 <VL53LX_f_006+0x23e>

		if (pbins->bin_data[lb] > palgo->VL53LX_p_052[lb]) {
 800d218:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d21c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d21e:	3206      	adds	r2, #6
 800d220:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d224:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800d228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d22a:	3116      	adds	r1, #22
 800d22c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d230:	429a      	cmp	r2, r3
 800d232:	dd13      	ble.n	800d25c <VL53LX_f_006+0x21a>
			palgo->VL53LX_p_040[lb]      = 1;
 800d234:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d238:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d23a:	4413      	add	r3, r2
 800d23c:	2201      	movs	r2, #1
 800d23e:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 1;
 800d240:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d244:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d246:	4413      	add	r3, r2
 800d248:	2201      	movs	r2, #1
 800d24a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			palgo->VL53LX_p_039++;
 800d24e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d250:	791b      	ldrb	r3, [r3, #4]
 800d252:	3301      	adds	r3, #1
 800d254:	b2da      	uxtb	r2, r3
 800d256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d258:	711a      	strb	r2, [r3, #4]
 800d25a:	e00c      	b.n	800d276 <VL53LX_f_006+0x234>
		} else {
			palgo->VL53LX_p_040[lb]      = 0;
 800d25c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d260:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d262:	4413      	add	r3, r2
 800d264:	2200      	movs	r2, #0
 800d266:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 0;
 800d268:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d26c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d26e:	4413      	add	r3, r2
 800d270:	2200      	movs	r2, #0
 800d272:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800d276:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d27a:	3301      	adds	r3, #1
 800d27c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d282:	7a9b      	ldrb	r3, [r3, #10]
 800d284:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d288:	429a      	cmp	r2, r3
 800d28a:	d3c5      	bcc.n	800d218 <VL53LX_f_006+0x1d6>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800d28c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 800d290:	4618      	mov	r0, r3
 800d292:	3730      	adds	r7, #48	; 0x30
 800d294:	46bd      	mov	sp, r7
 800d296:	bdb0      	pop	{r4, r5, r7, pc}

0800d298 <VL53LX_f_007>:



VL53LX_Error VL53LX_f_007(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d298:	b480      	push	{r7}
 800d29a:	b085      	sub	sp, #20
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53LX_p_044 = 0;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	73fb      	strb	r3, [r7, #15]
 800d2bc:	e02d      	b.n	800d31a <VL53LX_f_007+0x82>

		j = (i + 1) % palgo->VL53LX_p_030;
 800d2be:	7bfb      	ldrb	r3, [r7, #15]
 800d2c0:	3301      	adds	r3, #1
 800d2c2:	687a      	ldr	r2, [r7, #4]
 800d2c4:	78d2      	ldrb	r2, [r2, #3]
 800d2c6:	fb93 f1f2 	sdiv	r1, r3, r2
 800d2ca:	fb02 f201 	mul.w	r2, r2, r1
 800d2ce:	1a9b      	subs	r3, r3, r2
 800d2d0:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	789b      	ldrb	r3, [r3, #2]
 800d2d6:	7bfa      	ldrb	r2, [r7, #15]
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	d21b      	bcs.n	800d314 <VL53LX_f_007+0x7c>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	789b      	ldrb	r3, [r3, #2]
 800d2e0:	7b3a      	ldrb	r2, [r7, #12]
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d216      	bcs.n	800d314 <VL53LX_f_007+0x7c>
			if (palgo->VL53LX_p_041[i] == 0 &&
 800d2e6:	7bfb      	ldrb	r3, [r7, #15]
 800d2e8:	687a      	ldr	r2, [r7, #4]
 800d2ea:	4413      	add	r3, r2
 800d2ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d10f      	bne.n	800d314 <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800d2f4:	7b3b      	ldrb	r3, [r7, #12]
 800d2f6:	687a      	ldr	r2, [r7, #4]
 800d2f8:	4413      	add	r3, r2
 800d2fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800d2fe:	2b01      	cmp	r3, #1
 800d300:	d108      	bne.n	800d314 <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800d302:	7bbb      	ldrb	r3, [r7, #14]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d105      	bne.n	800d314 <VL53LX_f_007+0x7c>
				found == 0) {
				palgo->VL53LX_p_044 = i;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	7bfa      	ldrb	r2, [r7, #15]
 800d30c:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
				found = 1;
 800d310:	2301      	movs	r3, #1
 800d312:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800d314:	7bfb      	ldrb	r3, [r7, #15]
 800d316:	3301      	adds	r3, #1
 800d318:	73fb      	strb	r3, [r7, #15]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	78db      	ldrb	r3, [r3, #3]
 800d31e:	7bfa      	ldrb	r2, [r7, #15]
 800d320:	429a      	cmp	r2, r3
 800d322:	d3cc      	bcc.n	800d2be <VL53LX_f_007+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800d324:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3714      	adds	r7, #20
 800d32c:	46bd      	mov	sp, r7
 800d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d332:	4770      	bx	lr

0800d334 <VL53LX_f_008>:


VL53LX_Error VL53LX_f_008(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d334:	b480      	push	{r7}
 800d336:	b085      	sub	sp, #20
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d33c:	2300      	movs	r3, #0
 800d33e:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 800d340:	2300      	movs	r3, #0
 800d342:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 800d344:	2300      	movs	r3, #0
 800d346:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 800d348:	2300      	movs	r3, #0
 800d34a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53LX_p_044;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800d352:	73fb      	strb	r3, [r7, #15]
 800d354:	e05a      	b.n	800d40c <VL53LX_f_008+0xd8>
		palgo->VL53LX_p_030);
		lb++) {



		i =  lb      % palgo->VL53LX_p_030;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	78da      	ldrb	r2, [r3, #3]
 800d35a:	7bfb      	ldrb	r3, [r7, #15]
 800d35c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d360:	fb02 f201 	mul.w	r2, r2, r1
 800d364:	1a9b      	subs	r3, r3, r2
 800d366:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53LX_p_030;
 800d368:	7bfb      	ldrb	r3, [r7, #15]
 800d36a:	3301      	adds	r3, #1
 800d36c:	687a      	ldr	r2, [r7, #4]
 800d36e:	78d2      	ldrb	r2, [r2, #3]
 800d370:	fb93 f1f2 	sdiv	r1, r3, r2
 800d374:	fb02 f201 	mul.w	r2, r2, r1
 800d378:	1a9b      	subs	r3, r3, r2
 800d37a:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	789b      	ldrb	r3, [r3, #2]
 800d380:	7b7a      	ldrb	r2, [r7, #13]
 800d382:	429a      	cmp	r2, r3
 800d384:	d23f      	bcs.n	800d406 <VL53LX_f_008+0xd2>
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	789b      	ldrb	r3, [r3, #2]
 800d38a:	7b3a      	ldrb	r2, [r7, #12]
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d23a      	bcs.n	800d406 <VL53LX_f_008+0xd2>

			if (palgo->VL53LX_p_041[i] == 0 &&
 800d390:	7b7b      	ldrb	r3, [r7, #13]
 800d392:	687a      	ldr	r2, [r7, #4]
 800d394:	4413      	add	r3, r2
 800d396:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d10e      	bne.n	800d3bc <VL53LX_f_008+0x88>
				palgo->VL53LX_p_041[j] == 1)
 800d39e:	7b3b      	ldrb	r3, [r7, #12]
 800d3a0:	687a      	ldr	r2, [r7, #4]
 800d3a2:	4413      	add	r3, r2
 800d3a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800d3a8:	2b01      	cmp	r3, #1
 800d3aa:	d107      	bne.n	800d3bc <VL53LX_f_008+0x88>
				palgo->VL53LX_p_046++;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800d3b2:	3301      	adds	r3, #1
 800d3b4:	b2da      	uxtb	r2, r3
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53LX_p_046 > palgo->VL53LX_p_045)
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d905      	bls.n	800d3d8 <VL53LX_f_008+0xa4>
				palgo->VL53LX_p_046 = palgo->VL53LX_p_045;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53LX_p_041[i] > 0)
 800d3d8:	7b7b      	ldrb	r3, [r7, #13]
 800d3da:	687a      	ldr	r2, [r7, #4]
 800d3dc:	4413      	add	r3, r2
 800d3de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d009      	beq.n	800d3fa <VL53LX_f_008+0xc6>
				palgo->VL53LX_p_042[i] = palgo->VL53LX_p_046;
 800d3e6:	7b7b      	ldrb	r3, [r7, #13]
 800d3e8:	687a      	ldr	r2, [r7, #4]
 800d3ea:	f892 117a 	ldrb.w	r1, [r2, #378]	; 0x17a
 800d3ee:	687a      	ldr	r2, [r7, #4]
 800d3f0:	4413      	add	r3, r2
 800d3f2:	460a      	mov	r2, r1
 800d3f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d3f8:	e005      	b.n	800d406 <VL53LX_f_008+0xd2>
			else
				palgo->VL53LX_p_042[i] = 0;
 800d3fa:	7b7b      	ldrb	r3, [r7, #13]
 800d3fc:	687a      	ldr	r2, [r7, #4]
 800d3fe:	4413      	add	r3, r2
 800d400:	2200      	movs	r2, #0
 800d402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		lb++) {
 800d406:	7bfb      	ldrb	r3, [r7, #15]
 800d408:	3301      	adds	r3, #1
 800d40a:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53LX_p_044 +
 800d40c:	7bfa      	ldrb	r2, [r7, #15]
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800d414:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800d41a:	440b      	add	r3, r1
	for (lb = palgo->VL53LX_p_044;
 800d41c:	429a      	cmp	r2, r3
 800d41e:	db9a      	blt.n	800d356 <VL53LX_f_008+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 800d420:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 800d424:	4618      	mov	r0, r3
 800d426:	3714      	adds	r7, #20
 800d428:	46bd      	mov	sp, r7
 800d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42e:	4770      	bx	lr

0800d430 <VL53LX_f_009>:


VL53LX_Error VL53LX_f_009(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d430:	b480      	push	{r7}
 800d432:	b087      	sub	sp, #28
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d438:	2300      	movs	r3, #0
 800d43a:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800d43c:	2300      	movs	r3, #0
 800d43e:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 800d440:	2300      	movs	r3, #0
 800d442:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 800d444:	2300      	movs	r3, #0
 800d446:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 800d448:	2300      	movs	r3, #0
 800d44a:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 800d44c:	2300      	movs	r3, #0
 800d44e:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53LX_p_030 - 1;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	78db      	ldrb	r3, [r3, #3]
 800d454:	3b01      	subs	r3, #1
 800d456:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 800d458:	7cbb      	ldrb	r3, [r7, #18]
 800d45a:	085b      	lsrs	r3, r3, #1
 800d45c:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53LX_p_044;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800d464:	75fb      	strb	r3, [r7, #23]
 800d466:	e0a2      	b.n	800d5ae <VL53LX_f_009+0x17e>
		palgo->VL53LX_p_030);
		blb++) {



		i =  blb      % palgo->VL53LX_p_030;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	78da      	ldrb	r2, [r3, #3]
 800d46c:	7dfb      	ldrb	r3, [r7, #23]
 800d46e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d472:	fb02 f201 	mul.w	r2, r2, r1
 800d476:	1a9b      	subs	r3, r3, r2
 800d478:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53LX_p_030;
 800d47a:	7dfb      	ldrb	r3, [r7, #23]
 800d47c:	3301      	adds	r3, #1
 800d47e:	687a      	ldr	r2, [r7, #4]
 800d480:	78d2      	ldrb	r2, [r2, #3]
 800d482:	fb93 f1f2 	sdiv	r1, r3, r2
 800d486:	fb02 f201 	mul.w	r2, r2, r1
 800d48a:	1a9b      	subs	r3, r3, r2
 800d48c:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53LX_p_021 &&
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	789b      	ldrb	r3, [r3, #2]
 800d492:	7d7a      	ldrb	r2, [r7, #21]
 800d494:	429a      	cmp	r2, r3
 800d496:	f080 8087 	bcs.w	800d5a8 <VL53LX_f_009+0x178>
				j < palgo->VL53LX_p_021) {
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53LX_p_021 &&
 800d49e:	7d3a      	ldrb	r2, [r7, #20]
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	f080 8081 	bcs.w	800d5a8 <VL53LX_f_009+0x178>



			if (palgo->VL53LX_p_042[i] == 0 &&
 800d4a6:	7d7b      	ldrb	r3, [r7, #21]
 800d4a8:	687a      	ldr	r2, [r7, #4]
 800d4aa:	4413      	add	r3, r2
 800d4ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d12f      	bne.n	800d514 <VL53LX_f_009+0xe4>
					palgo->VL53LX_p_042[j] > 0) {
 800d4b4:	7d3b      	ldrb	r3, [r7, #20]
 800d4b6:	687a      	ldr	r2, [r7, #4]
 800d4b8:	4413      	add	r3, r2
 800d4ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
			if (palgo->VL53LX_p_042[i] == 0 &&
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d028      	beq.n	800d514 <VL53LX_f_009+0xe4>

				pulse_no = palgo->VL53LX_p_042[j] - 1;
 800d4c2:	7d3b      	ldrb	r3, [r7, #20]
 800d4c4:	687a      	ldr	r2, [r7, #4]
 800d4c6:	4413      	add	r3, r2
 800d4c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d4cc:	3b01      	subs	r3, #1
 800d4ce:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800d4d6:	7cfa      	ldrb	r2, [r7, #19]
 800d4d8:	429a      	cmp	r2, r3
 800d4da:	d21b      	bcs.n	800d514 <VL53LX_f_009+0xe4>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d4dc:	7cfa      	ldrb	r2, [r7, #19]
 800d4de:	4613      	mov	r3, r2
 800d4e0:	00db      	lsls	r3, r3, #3
 800d4e2:	4413      	add	r3, r2
 800d4e4:	009b      	lsls	r3, r3, #2
 800d4e6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d4ea:	687a      	ldr	r2, [r7, #4]
 800d4ec:	4413      	add	r3, r2
 800d4ee:	3304      	adds	r3, #4
 800d4f0:	60fb      	str	r3, [r7, #12]
					pdata->VL53LX_p_012 = blb;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	7dfa      	ldrb	r2, [r7, #23]
 800d4f6:	701a      	strb	r2, [r3, #0]
					pdata->VL53LX_p_019    = blb + 1;
 800d4f8:	7dfb      	ldrb	r3, [r7, #23]
 800d4fa:	3301      	adds	r3, #1
 800d4fc:	b2da      	uxtb	r2, r3
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	705a      	strb	r2, [r3, #1]
					pdata->VL53LX_p_023   = 0xFF;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	22ff      	movs	r2, #255	; 0xff
 800d506:	709a      	strb	r2, [r3, #2]
					pdata->VL53LX_p_024     = 0;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	2200      	movs	r2, #0
 800d50c:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013   = 0;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	2200      	movs	r2, #0
 800d512:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53LX_p_042[i] > 0
 800d514:	7d7b      	ldrb	r3, [r7, #21]
 800d516:	687a      	ldr	r2, [r7, #4]
 800d518:	4413      	add	r3, r2
 800d51a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d042      	beq.n	800d5a8 <VL53LX_f_009+0x178>
				&& palgo->VL53LX_p_042[j] == 0) {
 800d522:	7d3b      	ldrb	r3, [r7, #20]
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	4413      	add	r3, r2
 800d528:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d13b      	bne.n	800d5a8 <VL53LX_f_009+0x178>

				pulse_no = palgo->VL53LX_p_042[i] - 1;
 800d530:	7d7b      	ldrb	r3, [r7, #21]
 800d532:	687a      	ldr	r2, [r7, #4]
 800d534:	4413      	add	r3, r2
 800d536:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d53a:	3b01      	subs	r3, #1
 800d53c:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800d544:	7cfa      	ldrb	r2, [r7, #19]
 800d546:	429a      	cmp	r2, r3
 800d548:	d22e      	bcs.n	800d5a8 <VL53LX_f_009+0x178>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d54a:	7cfa      	ldrb	r2, [r7, #19]
 800d54c:	4613      	mov	r3, r2
 800d54e:	00db      	lsls	r3, r3, #3
 800d550:	4413      	add	r3, r2
 800d552:	009b      	lsls	r3, r3, #2
 800d554:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d558:	687a      	ldr	r2, [r7, #4]
 800d55a:	4413      	add	r3, r2
 800d55c:	3304      	adds	r3, #4
 800d55e:	60fb      	str	r3, [r7, #12]

					pdata->VL53LX_p_024    = blb;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	7dfa      	ldrb	r2, [r7, #23]
 800d564:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013  = blb + 1;
 800d566:	7dfb      	ldrb	r3, [r7, #23]
 800d568:	3301      	adds	r3, #1
 800d56a:	b2da      	uxtb	r2, r3
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	711a      	strb	r2, [r3, #4]

					pdata->VL53LX_p_025 =
						(pdata->VL53LX_p_024 + 1) -
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53LX_p_019;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53LX_p_024 + 1) -
 800d578:	1ad3      	subs	r3, r2, r3
 800d57a:	b2db      	uxtb	r3, r3
 800d57c:	3301      	adds	r3, #1
 800d57e:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_025 =
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	715a      	strb	r2, [r3, #5]
					pdata->VL53LX_p_051 =
						(pdata->VL53LX_p_013 + 1) -
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53LX_p_012;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53LX_p_013 + 1) -
 800d58c:	1ad3      	subs	r3, r2, r3
 800d58e:	b2db      	uxtb	r3, r3
 800d590:	3301      	adds	r3, #1
 800d592:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_051 =
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53LX_p_051 >
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	799b      	ldrb	r3, [r3, #6]
 800d59c:	7cba      	ldrb	r2, [r7, #18]
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d202      	bcs.n	800d5a8 <VL53LX_f_009+0x178>
						max_filter_half_width)
						pdata->VL53LX_p_051 =
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	7cba      	ldrb	r2, [r7, #18]
 800d5a6:	719a      	strb	r2, [r3, #6]
		blb++) {
 800d5a8:	7dfb      	ldrb	r3, [r7, #23]
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53LX_p_044 +
 800d5ae:	7dfa      	ldrb	r2, [r7, #23]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800d5b6:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53LX_p_044 +
 800d5bc:	440b      	add	r3, r1
	for (blb = palgo->VL53LX_p_044;
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	f6ff af52 	blt.w	800d468 <VL53LX_f_009+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800d5c4:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	371c      	adds	r7, #28
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d2:	4770      	bx	lr

0800d5d4 <VL53LX_f_016>:


VL53LX_Error VL53LX_f_016(
	VL53LX_HistTargetOrder                target_order,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b090      	sub	sp, #64	; 0x40
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	4603      	mov	r3, r0
 800d5dc:	6039      	str	r1, [r7, #0]
 800d5de:	71fb      	strb	r3, [r7, #7]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	VL53LX_hist_pulse_data_t  tmp;
	VL53LX_hist_pulse_data_t *ptmp = &tmp;
 800d5e6:	f107 030c 	add.w	r3, r7, #12
 800d5ea:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53LX_hist_pulse_data_t *p0;
	VL53LX_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t swapped = 1;
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53LX_p_046 > 1))
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800d5fe:	2b01      	cmp	r3, #1
 800d600:	d965      	bls.n	800d6ce <VL53LX_f_016+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 800d602:	e05f      	b.n	800d6c4 <VL53LX_f_016+0xf0>

		swapped = 0;
 800d604:	2300      	movs	r3, #0
 800d606:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800d60a:	2301      	movs	r3, #1
 800d60c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d610:	e051      	b.n	800d6b6 <VL53LX_f_016+0xe2>

			p0 = &(palgo->VL53LX_p_003[i-1]);
 800d612:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d616:	1e5a      	subs	r2, r3, #1
 800d618:	4613      	mov	r3, r2
 800d61a:	00db      	lsls	r3, r3, #3
 800d61c:	4413      	add	r3, r2
 800d61e:	009b      	lsls	r3, r3, #2
 800d620:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d624:	683a      	ldr	r2, [r7, #0]
 800d626:	4413      	add	r3, r2
 800d628:	3304      	adds	r3, #4
 800d62a:	637b      	str	r3, [r7, #52]	; 0x34
			p1 = &(palgo->VL53LX_p_003[i]);
 800d62c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800d630:	4613      	mov	r3, r2
 800d632:	00db      	lsls	r3, r3, #3
 800d634:	4413      	add	r3, r2
 800d636:	009b      	lsls	r3, r3, #2
 800d638:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d63c:	683a      	ldr	r2, [r7, #0]
 800d63e:	4413      	add	r3, r2
 800d640:	3304      	adds	r3, #4
 800d642:	633b      	str	r3, [r7, #48]	; 0x30



			if (target_order
 800d644:	79fb      	ldrb	r3, [r7, #7]
 800d646:	2b02      	cmp	r3, #2
 800d648:	d118      	bne.n	800d67c <VL53LX_f_016+0xa8>
			== VL53LX_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53LX_p_010 <
 800d64a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d64c:	691a      	ldr	r2, [r3, #16]
						p1->VL53LX_p_010) {
 800d64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d650:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53LX_p_010 <
 800d652:	429a      	cmp	r2, r3
 800d654:	da2a      	bge.n	800d6ac <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800d656:	2224      	movs	r2, #36	; 0x24
 800d658:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d65a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d65c:	f007 fac2 	bl	8014be4 <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800d660:	2224      	movs	r2, #36	; 0x24
 800d662:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d666:	f007 fabd 	bl	8014be4 <memcpy>
					p0, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800d66a:	2224      	movs	r2, #36	; 0x24
 800d66c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d66e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d670:	f007 fab8 	bl	8014be4 <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800d674:	2301      	movs	r3, #1
 800d676:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800d67a:	e017      	b.n	800d6ac <VL53LX_f_016+0xd8>
				}

			} else {

				if (p0->VL53LX_p_011 > p1->VL53LX_p_011) {
 800d67c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d67e:	699a      	ldr	r2, [r3, #24]
 800d680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d682:	699b      	ldr	r3, [r3, #24]
 800d684:	429a      	cmp	r2, r3
 800d686:	d911      	bls.n	800d6ac <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800d688:	2224      	movs	r2, #36	; 0x24
 800d68a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d68c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d68e:	f007 faa9 	bl	8014be4 <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800d692:	2224      	movs	r2, #36	; 0x24
 800d694:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d696:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d698:	f007 faa4 	bl	8014be4 <memcpy>
					p0,   sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800d69c:	2224      	movs	r2, #36	; 0x24
 800d69e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d6a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d6a2:	f007 fa9f 	bl	8014be4 <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800d6ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d6b0:	3301      	adds	r3, #1
 800d6b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800d6bc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	d3a6      	bcc.n	800d612 <VL53LX_f_016+0x3e>
	while (swapped > 0) {
 800d6c4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d19b      	bne.n	800d604 <VL53LX_f_016+0x30>

			}
		}
	}

ENDFUNC:
 800d6cc:	e000      	b.n	800d6d0 <VL53LX_f_016+0xfc>
		goto ENDFUNC;
 800d6ce:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 800d6d0:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d

}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3740      	adds	r7, #64	; 0x40
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}

0800d6dc <VL53LX_f_010>:

VL53LX_Error VL53LX_f_010(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b087      	sub	sp, #28
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	60b9      	str	r1, [r7, #8]
 800d6e6:	607a      	str	r2, [r7, #4]
 800d6e8:	73fb      	strb	r3, [r7, #15]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d6f6:	7bfa      	ldrb	r2, [r7, #15]
 800d6f8:	4613      	mov	r3, r2
 800d6fa:	00db      	lsls	r3, r3, #3
 800d6fc:	4413      	add	r3, r2
 800d6fe:	009b      	lsls	r3, r3, #2
 800d700:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d704:	687a      	ldr	r2, [r7, #4]
 800d706:	4413      	add	r3, r2
 800d708:	3304      	adds	r3, #4
 800d70a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_017  = 0;
 800d70c:	693b      	ldr	r3, [r7, #16]
 800d70e:	2200      	movs	r2, #0
 800d710:	60da      	str	r2, [r3, #12]
	pdata->VL53LX_p_016 = 0;
 800d712:	693b      	ldr	r3, [r7, #16]
 800d714:	2200      	movs	r2, #0
 800d716:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	781b      	ldrb	r3, [r3, #0]
 800d71c:	75fb      	strb	r3, [r7, #23]
 800d71e:	e01c      	b.n	800d75a <VL53LX_f_010+0x7e>
		i =  lb % palgo->VL53LX_p_030;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	78da      	ldrb	r2, [r3, #3]
 800d724:	7dfb      	ldrb	r3, [r7, #23]
 800d726:	fbb3 f1f2 	udiv	r1, r3, r2
 800d72a:	fb02 f201 	mul.w	r2, r2, r1
 800d72e:	1a9b      	subs	r3, r3, r2
 800d730:	757b      	strb	r3, [r7, #21]
		pdata->VL53LX_p_017  += pbins->bin_data[i];
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	68da      	ldr	r2, [r3, #12]
 800d736:	7d79      	ldrb	r1, [r7, #21]
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	3106      	adds	r1, #6
 800d73c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d740:	441a      	add	r2, r3
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	60da      	str	r2, [r3, #12]
		pdata->VL53LX_p_016 += palgo->VL53LX_p_028;
 800d746:	693b      	ldr	r3, [r7, #16]
 800d748:	689a      	ldr	r2, [r3, #8]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	689b      	ldr	r3, [r3, #8]
 800d74e:	441a      	add	r2, r3
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800d754:	7dfb      	ldrb	r3, [r7, #23]
 800d756:	3301      	adds	r3, #1
 800d758:	75fb      	strb	r3, [r7, #23]
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	791b      	ldrb	r3, [r3, #4]
 800d75e:	7dfa      	ldrb	r2, [r7, #23]
 800d760:	429a      	cmp	r2, r3
 800d762:	d9dd      	bls.n	800d720 <VL53LX_f_010+0x44>
	}



	pdata->VL53LX_p_010 =
		pdata->VL53LX_p_017 - pdata->VL53LX_p_016;
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	68da      	ldr	r2, [r3, #12]
 800d768:	693b      	ldr	r3, [r7, #16]
 800d76a:	689b      	ldr	r3, [r3, #8]
 800d76c:	1ad2      	subs	r2, r2, r3
	pdata->VL53LX_p_010 =
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 800d772:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800d776:	4618      	mov	r0, r3
 800d778:	371c      	adds	r7, #28
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr

0800d782 <VL53LX_f_015>:
VL53LX_Error VL53LX_f_015(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d782:	b590      	push	{r4, r7, lr}
 800d784:	b08d      	sub	sp, #52	; 0x34
 800d786:	af02      	add	r7, sp, #8
 800d788:	60ba      	str	r2, [r7, #8]
 800d78a:	607b      	str	r3, [r7, #4]
 800d78c:	4603      	mov	r3, r0
 800d78e:	73fb      	strb	r3, [r7, #15]
 800d790:	460b      	mov	r3, r1
 800d792:	73bb      	strb	r3, [r7, #14]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d794:	2300      	movs	r3, #0
 800d796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t   i            = 0;
 800d79a:	2300      	movs	r3, #0
 800d79c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t   VL53LX_p_012 = 0;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	843b      	strh	r3, [r7, #32]
	int16_t   VL53LX_p_013   = 0;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t  tmp_phase    = 0;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	61bb      	str	r3, [r7, #24]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d7b0:	7bfa      	ldrb	r2, [r7, #15]
 800d7b2:	4613      	mov	r3, r2
 800d7b4:	00db      	lsls	r3, r3, #3
 800d7b6:	4413      	add	r3, r2
 800d7b8:	009b      	lsls	r3, r3, #2
 800d7ba:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d7be:	687a      	ldr	r2, [r7, #4]
 800d7c0:	4413      	add	r3, r2
 800d7c2:	3304      	adds	r3, #4
 800d7c4:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53LX_p_023 == 0xFF)
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	789b      	ldrb	r3, [r3, #2]
 800d7ca:	2bff      	cmp	r3, #255	; 0xff
 800d7cc:	d102      	bne.n	800d7d4 <VL53LX_f_015+0x52>
		pdata->VL53LX_p_023 = 1;
 800d7ce:	697b      	ldr	r3, [r7, #20]
 800d7d0:	2201      	movs	r2, #1
 800d7d2:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53LX_p_023 % palgo->VL53LX_p_030;
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	789b      	ldrb	r3, [r3, #2]
 800d7d8:	687a      	ldr	r2, [r7, #4]
 800d7da:	78d2      	ldrb	r2, [r2, #3]
 800d7dc:	fbb3 f1f2 	udiv	r1, r3, r2
 800d7e0:	fb02 f201 	mul.w	r2, r2, r1
 800d7e4:	1a9b      	subs	r3, r3, r2
 800d7e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	VL53LX_p_012  = (int16_t)i;
 800d7ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d7ee:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 += (int16_t)pdata->VL53LX_p_012;
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	781b      	ldrb	r3, [r3, #0]
 800d7f4:	b29a      	uxth	r2, r3
 800d7f6:	8c3b      	ldrh	r3, [r7, #32]
 800d7f8:	4413      	add	r3, r2
 800d7fa:	b29b      	uxth	r3, r3
 800d7fc:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 -= (int16_t)pdata->VL53LX_p_023;
 800d7fe:	8c3a      	ldrh	r2, [r7, #32]
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	789b      	ldrb	r3, [r3, #2]
 800d804:	b29b      	uxth	r3, r3
 800d806:	1ad3      	subs	r3, r2, r3
 800d808:	b29b      	uxth	r3, r3
 800d80a:	843b      	strh	r3, [r7, #32]

	VL53LX_p_013    = (int16_t)i;
 800d80c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d810:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   += (int16_t)pdata->VL53LX_p_013;
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	791b      	ldrb	r3, [r3, #4]
 800d816:	b29a      	uxth	r2, r3
 800d818:	8bfb      	ldrh	r3, [r7, #30]
 800d81a:	4413      	add	r3, r2
 800d81c:	b29b      	uxth	r3, r3
 800d81e:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   -= (int16_t)pdata->VL53LX_p_023;
 800d820:	8bfa      	ldrh	r2, [r7, #30]
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	789b      	ldrb	r3, [r3, #2]
 800d826:	b29b      	uxth	r3, r3
 800d828:	1ad3      	subs	r3, r2, r3
 800d82a:	b29b      	uxth	r3, r3
 800d82c:	83fb      	strh	r3, [r7, #30]


	window_width = VL53LX_p_013 - VL53LX_p_012;
 800d82e:	8bfa      	ldrh	r2, [r7, #30]
 800d830:	8c3b      	ldrh	r3, [r7, #32]
 800d832:	1ad3      	subs	r3, r2, r3
 800d834:	b29b      	uxth	r3, r3
 800d836:	84bb      	strh	r3, [r7, #36]	; 0x24
	if (window_width > 3)
 800d838:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d83c:	2b03      	cmp	r3, #3
 800d83e:	dd01      	ble.n	800d844 <VL53LX_f_015+0xc2>
		window_width = 3;
 800d840:	2303      	movs	r3, #3
 800d842:	84bb      	strh	r3, [r7, #36]	; 0x24

	status =
		VL53LX_f_020(
			VL53LX_p_012,
			VL53LX_p_012 + window_width,
 800d844:	8c3a      	ldrh	r2, [r7, #32]
 800d846:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d848:	4413      	add	r3, r2
 800d84a:	b29b      	uxth	r3, r3
		VL53LX_f_020(
 800d84c:	b219      	sxth	r1, r3
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	78da      	ldrb	r2, [r3, #3]
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	3314      	adds	r3, #20
 800d856:	7bbc      	ldrb	r4, [r7, #14]
 800d858:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800d85c:	9301      	str	r3, [sp, #4]
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	9300      	str	r3, [sp, #0]
 800d862:	4623      	mov	r3, r4
 800d864:	f000 f846 	bl	800d8f4 <VL53LX_f_020>
 800d868:	4603      	mov	r3, r0
 800d86a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			clip_events,
			pbins,
			&(pdata->VL53LX_p_026));


	if (status == VL53LX_ERROR_NONE)
 800d86e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d872:	2b00      	cmp	r3, #0
 800d874:	d114      	bne.n	800d8a0 <VL53LX_f_015+0x11e>
		status =
			VL53LX_f_020(
				VL53LX_p_013 - window_width,
 800d876:	8bfa      	ldrh	r2, [r7, #30]
 800d878:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d87a:	1ad3      	subs	r3, r2, r3
 800d87c:	b29b      	uxth	r3, r3
			VL53LX_f_020(
 800d87e:	b218      	sxth	r0, r3
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	78da      	ldrb	r2, [r3, #3]
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	331c      	adds	r3, #28
 800d888:	7bbc      	ldrb	r4, [r7, #14]
 800d88a:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800d88e:	9301      	str	r3, [sp, #4]
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	9300      	str	r3, [sp, #0]
 800d894:	4623      	mov	r3, r4
 800d896:	f000 f82d 	bl	800d8f4 <VL53LX_f_020>
 800d89a:	4603      	mov	r3, r0
 800d89c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				clip_events,
				pbins,
				&(pdata->VL53LX_p_027));


	if (pdata->VL53LX_p_026 > pdata->VL53LX_p_027) {
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	695a      	ldr	r2, [r3, #20]
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	69db      	ldr	r3, [r3, #28]
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d909      	bls.n	800d8c0 <VL53LX_f_015+0x13e>
		tmp_phase        = pdata->VL53LX_p_026;
 800d8ac:	697b      	ldr	r3, [r7, #20]
 800d8ae:	695b      	ldr	r3, [r3, #20]
 800d8b0:	61bb      	str	r3, [r7, #24]
		pdata->VL53LX_p_026 = pdata->VL53LX_p_027;
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	69da      	ldr	r2, [r3, #28]
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	615a      	str	r2, [r3, #20]
		pdata->VL53LX_p_027 = tmp_phase;
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	69ba      	ldr	r2, [r7, #24]
 800d8be:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53LX_p_011 < pdata->VL53LX_p_026)
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	699a      	ldr	r2, [r3, #24]
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	695b      	ldr	r3, [r3, #20]
 800d8c8:	429a      	cmp	r2, r3
 800d8ca:	d203      	bcs.n	800d8d4 <VL53LX_f_015+0x152>
		pdata->VL53LX_p_026 = pdata->VL53LX_p_011;
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	699a      	ldr	r2, [r3, #24]
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	615a      	str	r2, [r3, #20]


	if (pdata->VL53LX_p_011 > pdata->VL53LX_p_027)
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	699a      	ldr	r2, [r3, #24]
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	69db      	ldr	r3, [r3, #28]
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d903      	bls.n	800d8e8 <VL53LX_f_015+0x166>
		pdata->VL53LX_p_027 = pdata->VL53LX_p_011;
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	699a      	ldr	r2, [r3, #24]
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 800d8e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	372c      	adds	r7, #44	; 0x2c
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd90      	pop	{r4, r7, pc}

0800d8f4 <VL53LX_f_020>:
	int16_t                            VL53LX_p_024,
	uint8_t                            VL53LX_p_030,
	uint8_t                            clip_events,
	VL53LX_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 800d8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8f8:	b093      	sub	sp, #76	; 0x4c
 800d8fa:	af00      	add	r7, sp, #0
 800d8fc:	4616      	mov	r6, r2
 800d8fe:	461a      	mov	r2, r3
 800d900:	4603      	mov	r3, r0
 800d902:	83fb      	strh	r3, [r7, #30]
 800d904:	460b      	mov	r3, r1
 800d906:	83bb      	strh	r3, [r7, #28]
 800d908:	4633      	mov	r3, r6
 800d90a:	76fb      	strb	r3, [r7, #27]
 800d90c:	4613      	mov	r3, r2
 800d90e:	76bb      	strb	r3, [r7, #26]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d910:	2300      	movs	r3, #0
 800d912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	int16_t  i            = 0;
 800d916:	2300      	movs	r3, #0
 800d918:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t  lb            = 0;
 800d91c:	2300      	movs	r3, #0
 800d91e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	int64_t VL53LX_p_018        = 0;
 800d922:	f04f 0200 	mov.w	r2, #0
 800d926:	f04f 0300 	mov.w	r3, #0
 800d92a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int64_t event_sum     = 0;
 800d92e:	f04f 0200 	mov.w	r2, #0
 800d932:	f04f 0300 	mov.w	r3, #0
 800d936:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	int64_t weighted_sum  = 0;
 800d93a:	f04f 0200 	mov.w	r2, #0
 800d93e:	f04f 0300 	mov.w	r3, #0
 800d942:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	LOG_FUNCTION_START("");

	*pphase = VL53LX_MAX_ALLOWED_PHASE;
 800d946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d948:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d94c:	601a      	str	r2, [r3, #0]

	if (VL53LX_p_030 != 0)
 800d94e:	7efb      	ldrb	r3, [r7, #27]
 800d950:	2b00      	cmp	r3, #0
 800d952:	f000 808b 	beq.w	800da6c <VL53LX_f_020+0x178>
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800d956:	8bfb      	ldrh	r3, [r7, #30]
 800d958:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d95c:	e07f      	b.n	800da5e <VL53LX_f_020+0x16a>

		if (lb < 0)
 800d95e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800d962:	2b00      	cmp	r3, #0
 800d964:	da08      	bge.n	800d978 <VL53LX_f_020+0x84>
			i = lb + (int16_t)VL53LX_p_030;
 800d966:	7efb      	ldrb	r3, [r7, #27]
 800d968:	b29a      	uxth	r2, r3
 800d96a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d96e:	4413      	add	r3, r2
 800d970:	b29b      	uxth	r3, r3
 800d972:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d976:	e009      	b.n	800d98c <VL53LX_f_020+0x98>
		else
			i = lb % (int16_t)VL53LX_p_030;
 800d978:	f9b7 1044 	ldrsh.w	r1, [r7, #68]	; 0x44
 800d97c:	7efa      	ldrb	r2, [r7, #27]
 800d97e:	fb91 f3f2 	sdiv	r3, r1, r2
 800d982:	fb02 f303 	mul.w	r3, r2, r3
 800d986:	1acb      	subs	r3, r1, r3
 800d988:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

		if ((i >= 0) && (i < VL53LX_HISTOGRAM_BUFFER_SIZE)) {
 800d98c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800d990:	2b00      	cmp	r3, #0
 800d992:	db5d      	blt.n	800da50 <VL53LX_f_020+0x15c>
 800d994:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800d998:	2b17      	cmp	r3, #23
 800d99a:	dc59      	bgt.n	800da50 <VL53LX_f_020+0x15c>
			VL53LX_p_018 =
				(int64_t)pbins->bin_data[i] -
 800d99c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800d9a0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d9a2:	3306      	adds	r3, #6
 800d9a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	ea4f 71e0 	mov.w	r1, r0, asr #31
				(int64_t)pbins->VL53LX_p_028;
 800d9ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d9b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	ea4f 73e2 	mov.w	r3, r2, asr #31
			VL53LX_p_018 =
 800d9ba:	1a86      	subs	r6, r0, r2
 800d9bc:	613e      	str	r6, [r7, #16]
 800d9be:	eb61 0303 	sbc.w	r3, r1, r3
 800d9c2:	617b      	str	r3, [r7, #20]
 800d9c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d9c8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

			if (clip_events > 0 && VL53LX_p_018 < 0)
 800d9cc:	7ebb      	ldrb	r3, [r7, #26]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d00b      	beq.n	800d9ea <VL53LX_f_020+0xf6>
 800d9d2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d9d6:	2a00      	cmp	r2, #0
 800d9d8:	f173 0300 	sbcs.w	r3, r3, #0
 800d9dc:	da05      	bge.n	800d9ea <VL53LX_f_020+0xf6>
				VL53LX_p_018 = 0;
 800d9de:	f04f 0200 	mov.w	r2, #0
 800d9e2:	f04f 0300 	mov.w	r3, #0
 800d9e6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			event_sum += VL53LX_p_018;
 800d9ea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d9ee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d9f2:	1886      	adds	r6, r0, r2
 800d9f4:	60be      	str	r6, [r7, #8]
 800d9f6:	eb41 0303 	adc.w	r3, r1, r3
 800d9fa:	60fb      	str	r3, [r7, #12]
 800d9fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800da00:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			weighted_sum +=
				(VL53LX_p_018 * (1024 + (2048*(int64_t)lb)));
 800da04:	f9b7 0044 	ldrsh.w	r0, [r7, #68]	; 0x44
 800da08:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800da0c:	f04f 0200 	mov.w	r2, #0
 800da10:	f04f 0300 	mov.w	r3, #0
 800da14:	02cb      	lsls	r3, r1, #11
 800da16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800da1a:	02c2      	lsls	r2, r0, #11
 800da1c:	f512 6880 	adds.w	r8, r2, #1024	; 0x400
 800da20:	f143 0900 	adc.w	r9, r3, #0
 800da24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da26:	fb09 f203 	mul.w	r2, r9, r3
 800da2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da2c:	fb08 f303 	mul.w	r3, r8, r3
 800da30:	441a      	add	r2, r3
 800da32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da34:	fba3 0108 	umull	r0, r1, r3, r8
 800da38:	1853      	adds	r3, r2, r1
 800da3a:	4619      	mov	r1, r3
			weighted_sum +=
 800da3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800da40:	1816      	adds	r6, r2, r0
 800da42:	603e      	str	r6, [r7, #0]
 800da44:	414b      	adcs	r3, r1
 800da46:	607b      	str	r3, [r7, #4]
 800da48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da4c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800da50:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800da54:	b29b      	uxth	r3, r3
 800da56:	3301      	adds	r3, #1
 800da58:	b29b      	uxth	r3, r3
 800da5a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800da5e:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 800da62:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800da66:	429a      	cmp	r2, r3
 800da68:	f77f af79 	ble.w	800d95e <VL53LX_f_020+0x6a>
			VL53LX_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 800da6c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800da70:	2a01      	cmp	r2, #1
 800da72:	f173 0300 	sbcs.w	r3, r3, #0
 800da76:	db33      	blt.n	800dae0 <VL53LX_f_020+0x1ec>
		weighted_sum += do_division_s(event_sum, 2);
 800da78:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800da7c:	0fd9      	lsrs	r1, r3, #31
 800da7e:	4608      	mov	r0, r1
 800da80:	f04f 0100 	mov.w	r1, #0
 800da84:	1884      	adds	r4, r0, r2
 800da86:	eb41 0503 	adc.w	r5, r1, r3
 800da8a:	f04f 0200 	mov.w	r2, #0
 800da8e:	f04f 0300 	mov.w	r3, #0
 800da92:	0862      	lsrs	r2, r4, #1
 800da94:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800da98:	106b      	asrs	r3, r5, #1
 800da9a:	4610      	mov	r0, r2
 800da9c:	4619      	mov	r1, r3
 800da9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800daa2:	eb12 0a00 	adds.w	sl, r2, r0
 800daa6:	eb43 0b01 	adc.w	fp, r3, r1
 800daaa:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
		weighted_sum = do_division_s(weighted_sum, event_sum);
 800daae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800dab2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800dab6:	f7f2 ffd9 	bl	8000a6c <__aeabi_ldivmod>
 800daba:	4602      	mov	r2, r0
 800dabc:	460b      	mov	r3, r1
 800dabe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		if (weighted_sum < 0)
 800dac2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800dac6:	2a00      	cmp	r2, #0
 800dac8:	f173 0300 	sbcs.w	r3, r3, #0
 800dacc:	da05      	bge.n	800dada <VL53LX_f_020+0x1e6>
			weighted_sum = 0;
 800dace:	f04f 0200 	mov.w	r2, #0
 800dad2:	f04f 0300 	mov.w	r3, #0
 800dad6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		*pphase = (uint32_t)weighted_sum;
 800dada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dadc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dade:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800dae0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	374c      	adds	r7, #76	; 0x4c
 800dae8:	46bd      	mov	sp, r7
 800daea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800daee <VL53LX_f_011>:
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53LX_histogram_bin_data_t           *ppulse)
{
 800daee:	b580      	push	{r7, lr}
 800daf0:	b086      	sub	sp, #24
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	60b9      	str	r1, [r7, #8]
 800daf6:	607a      	str	r2, [r7, #4]
 800daf8:	603b      	str	r3, [r7, #0]
 800dafa:	4603      	mov	r3, r0
 800dafc:	73fb      	strb	r3, [r7, #15]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800dafe:	2300      	movs	r3, #0
 800db00:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800db02:	2300      	movs	r3, #0
 800db04:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800db06:	2300      	movs	r3, #0
 800db08:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800db0a:	7bfa      	ldrb	r2, [r7, #15]
 800db0c:	4613      	mov	r3, r2
 800db0e:	00db      	lsls	r3, r3, #3
 800db10:	4413      	add	r3, r2
 800db12:	009b      	lsls	r3, r3, #2
 800db14:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800db18:	687a      	ldr	r2, [r7, #4]
 800db1a:	4413      	add	r3, r2
 800db1c:	3304      	adds	r3, #4
 800db1e:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53LX_histogram_bin_data_t));
 800db20:	22ac      	movs	r2, #172	; 0xac
 800db22:	68b9      	ldr	r1, [r7, #8]
 800db24:	6a38      	ldr	r0, [r7, #32]
 800db26:	f007 f85d 	bl	8014be4 <memcpy>



	for (lb = palgo->VL53LX_p_044;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800db30:	75fb      	strb	r3, [r7, #23]
 800db32:	e020      	b.n	800db76 <VL53LX_f_011+0x88>
		lb < (palgo->VL53LX_p_044 +
		palgo->VL53LX_p_030);
		lb++) {

		if (lb < pdata->VL53LX_p_012 || lb > pdata->VL53LX_p_013) {
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	781b      	ldrb	r3, [r3, #0]
 800db38:	7dfa      	ldrb	r2, [r7, #23]
 800db3a:	429a      	cmp	r2, r3
 800db3c:	d304      	bcc.n	800db48 <VL53LX_f_011+0x5a>
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	791b      	ldrb	r3, [r3, #4]
 800db42:	7dfa      	ldrb	r2, [r7, #23]
 800db44:	429a      	cmp	r2, r3
 800db46:	d913      	bls.n	800db70 <VL53LX_f_011+0x82>
			i =  lb % palgo->VL53LX_p_030;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	78da      	ldrb	r2, [r3, #3]
 800db4c:	7dfb      	ldrb	r3, [r7, #23]
 800db4e:	fbb3 f1f2 	udiv	r1, r3, r2
 800db52:	fb02 f201 	mul.w	r2, r2, r1
 800db56:	1a9b      	subs	r3, r3, r2
 800db58:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53LX_p_021)
 800db5a:	6a3b      	ldr	r3, [r7, #32]
 800db5c:	7a9b      	ldrb	r3, [r3, #10]
 800db5e:	7d7a      	ldrb	r2, [r7, #21]
 800db60:	429a      	cmp	r2, r3
 800db62:	d205      	bcs.n	800db70 <VL53LX_f_011+0x82>
				ppulse->bin_data[i] = pad_value;
 800db64:	7d7a      	ldrb	r2, [r7, #21]
 800db66:	6a3b      	ldr	r3, [r7, #32]
 800db68:	3206      	adds	r2, #6
 800db6a:	6839      	ldr	r1, [r7, #0]
 800db6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 800db70:	7dfb      	ldrb	r3, [r7, #23]
 800db72:	3301      	adds	r3, #1
 800db74:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53LX_p_044 +
 800db76:	7dfa      	ldrb	r2, [r7, #23]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800db7e:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800db84:	440b      	add	r3, r1
	for (lb = palgo->VL53LX_p_044;
 800db86:	429a      	cmp	r2, r3
 800db88:	dbd4      	blt.n	800db34 <VL53LX_f_011+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800db8a:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3718      	adds	r7, #24
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}

0800db96 <VL53LX_f_014>:
	uint8_t                       crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t  *phist_data_ap,
	VL53LX_histogram_bin_data_t  *phist_data_zp,
	VL53LX_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 800db96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db9a:	b096      	sub	sp, #88	; 0x58
 800db9c:	af08      	add	r7, sp, #32
 800db9e:	4604      	mov	r4, r0
 800dba0:	4608      	mov	r0, r1
 800dba2:	4611      	mov	r1, r2
 800dba4:	461a      	mov	r2, r3
 800dba6:	4623      	mov	r3, r4
 800dba8:	73fb      	strb	r3, [r7, #15]
 800dbaa:	4603      	mov	r3, r0
 800dbac:	73bb      	strb	r3, [r7, #14]
 800dbae:	460b      	mov	r3, r1
 800dbb0:	737b      	strb	r3, [r7, #13]
 800dbb2:	4613      	mov	r3, r2
 800dbb4:	733b      	strb	r3, [r7, #12]


	VL53LX_Error status      = VL53LX_ERROR_NONE;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53LX_Error func_status = VL53LX_ERROR_NONE;
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t  i    = 0;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int32_t  VL53LX_p_007    = 0;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t  VL53LX_p_032    = 0;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t  VL53LX_p_001    = 0;
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  a_zp = 0;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  c_zp = 0;
 800dbd8:	2300      	movs	r3, #0
 800dbda:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 800dbdc:	2300      	movs	r3, #0
 800dbde:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_030 == 0) {
 800dbe8:	7b7b      	ldrb	r3, [r7, #13]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d106      	bne.n	800dbfc <VL53LX_f_014+0x66>
		*psigma_est = 0xFFFF;
 800dbee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dbf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dbf4:	801a      	strh	r2, [r3, #0]
		return VL53LX_ERROR_DIVISION_BY_ZERO;
 800dbf6:	f06f 030e 	mvn.w	r3, #14
 800dbfa:	e06f      	b.n	800dcdc <VL53LX_f_014+0x146>
	}
	i = bin % VL53LX_p_030;
 800dbfc:	7bfb      	ldrb	r3, [r7, #15]
 800dbfe:	7b7a      	ldrb	r2, [r7, #13]
 800dc00:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc04:	fb02 f201 	mul.w	r2, r2, r1
 800dc08:	1a9b      	subs	r3, r3, r2
 800dc0a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35



	VL53LX_f_022(
 800dc0e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800dc12:	7b39      	ldrb	r1, [r7, #12]
 800dc14:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800dc18:	f107 0320 	add.w	r3, r7, #32
 800dc1c:	9301      	str	r3, [sp, #4]
 800dc1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dc22:	9300      	str	r3, [sp, #0]
 800dc24:	4613      	mov	r3, r2
 800dc26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dc28:	f000 fda8 	bl	800e77c <VL53LX_f_022>
			&VL53LX_p_032,
			&c_zp);



	VL53LX_f_022(
 800dc2c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800dc30:	7b39      	ldrb	r1, [r7, #12]
 800dc32:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800dc36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dc3a:	9301      	str	r3, [sp, #4]
 800dc3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dc40:	9300      	str	r3, [sp, #0]
 800dc42:	4613      	mov	r3, r2
 800dc44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dc46:	f000 fd99 	bl	800e77c <VL53LX_f_022>
			phist_data_ap,
			&VL53LX_p_007,
			&VL53LX_p_032,
			&VL53LX_p_001);

	if (crosstalk_compensation_enable > 0)
 800dc4a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d00e      	beq.n	800dc70 <VL53LX_f_014+0xda>
		VL53LX_f_022(
 800dc52:	f107 021c 	add.w	r2, r7, #28
 800dc56:	7b39      	ldrb	r1, [r7, #12]
 800dc58:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800dc5c:	f107 0314 	add.w	r3, r7, #20
 800dc60:	9301      	str	r3, [sp, #4]
 800dc62:	f107 0318 	add.w	r3, r7, #24
 800dc66:	9300      	str	r3, [sp, #0]
 800dc68:	4613      	mov	r3, r2
 800dc6a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dc6c:	f000 fd86 	bl	800e77c <VL53LX_f_022>




	func_status =
		VL53LX_f_023(
 800dc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc72:	469c      	mov	ip, r3
 800dc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc76:	469e      	mov	lr, r3
 800dc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc7a:	4698      	mov	r8, r3
 800dc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc7e:	4619      	mov	r1, r3
 800dc80:	6a3b      	ldr	r3, [r7, #32]
 800dc82:	461c      	mov	r4, r3
 800dc84:	69bb      	ldr	r3, [r7, #24]
 800dc86:	461d      	mov	r5, r3
 800dc88:	69fb      	ldr	r3, [r7, #28]
 800dc8a:	461e      	mov	r6, r3
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53LX_p_028,
 800dc90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
		VL53LX_f_023(
 800dc96:	607b      	str	r3, [r7, #4]
 800dc98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc9a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800dc9e:	7bb8      	ldrb	r0, [r7, #14]
 800dca0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dca2:	9207      	str	r2, [sp, #28]
 800dca4:	9306      	str	r3, [sp, #24]
 800dca6:	687a      	ldr	r2, [r7, #4]
 800dca8:	9205      	str	r2, [sp, #20]
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	9304      	str	r3, [sp, #16]
 800dcae:	9603      	str	r6, [sp, #12]
 800dcb0:	9502      	str	r5, [sp, #8]
 800dcb2:	9401      	str	r4, [sp, #4]
 800dcb4:	9100      	str	r1, [sp, #0]
 800dcb6:	4643      	mov	r3, r8
 800dcb8:	4672      	mov	r2, lr
 800dcba:	4661      	mov	r1, ip
 800dcbc:	f002 fee6 	bl	8010a8c <VL53LX_f_023>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			psigma_est);




	if (func_status == VL53LX_ERROR_DIVISION_BY_ZERO)
 800dcc6:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 800dcca:	f113 0f0f 	cmn.w	r3, #15
 800dcce:	d103      	bne.n	800dcd8 <VL53LX_f_014+0x142>
		*psigma_est = 0xFFFF;
 800dcd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dcd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dcd6:	801a      	strh	r2, [r3, #0]


	return status;
 800dcd8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3738      	adds	r7, #56	; 0x38
 800dce0:	46bd      	mov	sp, r7
 800dce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dce6 <VL53LX_f_017>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53LX_histogram_bin_data_t *pbins,
	VL53LX_hist_pulse_data_t    *ppulse,
	VL53LX_range_data_t         *pdata)
{
 800dce6:	b490      	push	{r4, r7}
 800dce8:	b084      	sub	sp, #16
 800dcea:	af00      	add	r7, sp, #0
 800dcec:	4604      	mov	r4, r0
 800dcee:	4608      	mov	r0, r1
 800dcf0:	4611      	mov	r1, r2
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	4623      	mov	r3, r4
 800dcf6:	71fb      	strb	r3, [r7, #7]
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	71bb      	strb	r3, [r7, #6]
 800dcfc:	460b      	mov	r3, r1
 800dcfe:	717b      	strb	r3, [r7, #5]
 800dd00:	4613      	mov	r3, r2
 800dd02:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 800dd04:	2300      	movs	r3, #0
 800dd06:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 800dd0c:	6a3b      	ldr	r3, [r7, #32]
 800dd0e:	79fa      	ldrb	r2, [r7, #7]
 800dd10:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 800dd12:	6a3b      	ldr	r3, [r7, #32]
 800dd14:	2200      	movs	r2, #0
 800dd16:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_012          = ppulse->VL53LX_p_012;
 800dd18:	69fb      	ldr	r3, [r7, #28]
 800dd1a:	781a      	ldrb	r2, [r3, #0]
 800dd1c:	6a3b      	ldr	r3, [r7, #32]
 800dd1e:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_019             = ppulse->VL53LX_p_019;
 800dd20:	69fb      	ldr	r3, [r7, #28]
 800dd22:	785a      	ldrb	r2, [r3, #1]
 800dd24:	6a3b      	ldr	r3, [r7, #32]
 800dd26:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_023            = ppulse->VL53LX_p_023;
 800dd28:	69fb      	ldr	r3, [r7, #28]
 800dd2a:	789a      	ldrb	r2, [r3, #2]
 800dd2c:	6a3b      	ldr	r3, [r7, #32]
 800dd2e:	729a      	strb	r2, [r3, #10]
	pdata->VL53LX_p_024              = ppulse->VL53LX_p_024;
 800dd30:	69fb      	ldr	r3, [r7, #28]
 800dd32:	78da      	ldrb	r2, [r3, #3]
 800dd34:	6a3b      	ldr	r3, [r7, #32]
 800dd36:	72da      	strb	r2, [r3, #11]
	pdata->VL53LX_p_013            = ppulse->VL53LX_p_013;
 800dd38:	69fb      	ldr	r3, [r7, #28]
 800dd3a:	791a      	ldrb	r2, [r3, #4]
 800dd3c:	6a3b      	ldr	r3, [r7, #32]
 800dd3e:	731a      	strb	r2, [r3, #12]
	pdata->VL53LX_p_025             = ppulse->VL53LX_p_025;
 800dd40:	69fb      	ldr	r3, [r7, #28]
 800dd42:	795a      	ldrb	r2, [r3, #5]
 800dd44:	6a3b      	ldr	r3, [r7, #32]
 800dd46:	735a      	strb	r2, [r3, #13]



	pdata->VL53LX_p_029  =
		(ppulse->VL53LX_p_013 + 1) - ppulse->VL53LX_p_012;
 800dd48:	69fb      	ldr	r3, [r7, #28]
 800dd4a:	791a      	ldrb	r2, [r3, #4]
 800dd4c:	69fb      	ldr	r3, [r7, #28]
 800dd4e:	781b      	ldrb	r3, [r3, #0]
 800dd50:	1ad3      	subs	r3, r2, r3
 800dd52:	b2db      	uxtb	r3, r3
 800dd54:	3301      	adds	r3, #1
 800dd56:	b2da      	uxtb	r2, r3
	pdata->VL53LX_p_029  =
 800dd58:	6a3b      	ldr	r3, [r7, #32]
 800dd5a:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 800dd5c:	69bb      	ldr	r3, [r7, #24]
 800dd5e:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800dd62:	6a3b      	ldr	r3, [r7, #32]
 800dd64:	829a      	strh	r2, [r3, #20]
	pdata->VL53LX_p_002              = ppulse->VL53LX_p_002;
 800dd66:	69fb      	ldr	r3, [r7, #28]
 800dd68:	8c1a      	ldrh	r2, [r3, #32]
 800dd6a:	6a3b      	ldr	r3, [r7, #32]
 800dd6c:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->VL53LX_p_026             = (uint16_t)ppulse->VL53LX_p_026;
 800dd6e:	69fb      	ldr	r3, [r7, #28]
 800dd70:	695b      	ldr	r3, [r3, #20]
 800dd72:	b29a      	uxth	r2, r3
 800dd74:	6a3b      	ldr	r3, [r7, #32]
 800dd76:	87da      	strh	r2, [r3, #62]	; 0x3e
	pdata->VL53LX_p_011          = (uint16_t)ppulse->VL53LX_p_011;
 800dd78:	69fb      	ldr	r3, [r7, #28]
 800dd7a:	699b      	ldr	r3, [r3, #24]
 800dd7c:	b29a      	uxth	r2, r3
 800dd7e:	6a3b      	ldr	r3, [r7, #32]
 800dd80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53LX_p_027             = (uint16_t)ppulse->VL53LX_p_027;
 800dd84:	69fb      	ldr	r3, [r7, #28]
 800dd86:	69db      	ldr	r3, [r3, #28]
 800dd88:	b29a      	uxth	r2, r3
 800dd8a:	6a3b      	ldr	r3, [r7, #32]
 800dd8c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pdata->VL53LX_p_017  = (uint32_t)ppulse->VL53LX_p_017;
 800dd90:	69fb      	ldr	r3, [r7, #28]
 800dd92:	68db      	ldr	r3, [r3, #12]
 800dd94:	461a      	mov	r2, r3
 800dd96:	6a3b      	ldr	r3, [r7, #32]
 800dd98:	629a      	str	r2, [r3, #40]	; 0x28
	pdata->VL53LX_p_010   = ppulse->VL53LX_p_010;
 800dd9a:	69fb      	ldr	r3, [r7, #28]
 800dd9c:	691a      	ldr	r2, [r3, #16]
 800dd9e:	6a3b      	ldr	r3, [r7, #32]
 800dda0:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->VL53LX_p_016 = (uint32_t)ppulse->VL53LX_p_016;
 800dda2:	69fb      	ldr	r3, [r7, #28]
 800dda4:	689b      	ldr	r3, [r3, #8]
 800dda6:	461a      	mov	r2, r3
 800dda8:	6a3b      	ldr	r3, [r7, #32]
 800ddaa:	625a      	str	r2, [r3, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 800ddac:	69bb      	ldr	r3, [r7, #24]
 800ddae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800ddb2:	6a3b      	ldr	r3, [r7, #32]
 800ddb4:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800ddb6:	6a3b      	ldr	r3, [r7, #32]
 800ddb8:	2213      	movs	r2, #19
 800ddba:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a


	if (sigma_thres > 0 &&
 800ddbe:	887b      	ldrh	r3, [r7, #2]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d00a      	beq.n	800ddda <VL53LX_f_017+0xf4>
		(uint32_t)ppulse->VL53LX_p_002 > ((uint32_t)sigma_thres << 5))
 800ddc4:	69fb      	ldr	r3, [r7, #28]
 800ddc6:	8c1b      	ldrh	r3, [r3, #32]
 800ddc8:	461a      	mov	r2, r3
 800ddca:	887b      	ldrh	r3, [r7, #2]
 800ddcc:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 800ddce:	429a      	cmp	r2, r3
 800ddd0:	d903      	bls.n	800ddda <VL53LX_f_017+0xf4>
		pdata->range_status = VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK;
 800ddd2:	6a3b      	ldr	r3, [r7, #32]
 800ddd4:	2206      	movs	r2, #6
 800ddd6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 800ddda:	79bb      	ldrb	r3, [r7, #6]
 800dddc:	b29b      	uxth	r3, r3
 800ddde:	021b      	lsls	r3, r3, #8
 800dde0:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 800dde2:	6a3b      	ldr	r3, [r7, #32]
 800dde4:	8a9b      	ldrh	r3, [r3, #20]
 800dde6:	89fa      	ldrh	r2, [r7, #14]
 800dde8:	429a      	cmp	r2, r3
 800ddea:	d205      	bcs.n	800ddf8 <VL53LX_f_017+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 800ddec:	6a3b      	ldr	r3, [r7, #32]
 800ddee:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 800ddf0:	89fb      	ldrh	r3, [r7, #14]
 800ddf2:	1ad3      	subs	r3, r2, r3
 800ddf4:	81fb      	strh	r3, [r7, #14]
 800ddf6:	e001      	b.n	800ddfc <VL53LX_f_017+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 800ddfc:	797b      	ldrb	r3, [r7, #5]
 800ddfe:	b29b      	uxth	r3, r3
 800de00:	021b      	lsls	r3, r3, #8
 800de02:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 800de04:	69bb      	ldr	r3, [r7, #24]
 800de06:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800de0a:	89bb      	ldrh	r3, [r7, #12]
 800de0c:	4413      	add	r3, r2
 800de0e:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800de10:	6a3b      	ldr	r3, [r7, #32]
 800de12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800de16:	89fa      	ldrh	r2, [r7, #14]
 800de18:	429a      	cmp	r2, r3
 800de1a:	d805      	bhi.n	800de28 <VL53LX_f_017+0x142>
		pdata->VL53LX_p_011 > upper_phase_limit)
 800de1c:	6a3b      	ldr	r3, [r7, #32]
 800de1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800de22:	89ba      	ldrh	r2, [r7, #12]
 800de24:	429a      	cmp	r2, r3
 800de26:	d203      	bcs.n	800de30 <VL53LX_f_017+0x14a>
		pdata->range_status = VL53LX_DEVICEERROR_RANGEPHASECHECK;
 800de28:	6a3b      	ldr	r3, [r7, #32]
 800de2a:	2205      	movs	r2, #5
 800de2c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

}
 800de30:	bf00      	nop
 800de32:	3710      	adds	r7, #16
 800de34:	46bd      	mov	sp, r7
 800de36:	bc90      	pop	{r4, r7}
 800de38:	4770      	bx	lr

0800de3a <VL53LX_f_025>:
	VL53LX_hist_gen3_algo_private_data_t   *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53LX_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53LX_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 800de3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de3c:	b08f      	sub	sp, #60	; 0x3c
 800de3e:	af06      	add	r7, sp, #24
 800de40:	60f8      	str	r0, [r7, #12]
 800de42:	60b9      	str	r1, [r7, #8]
 800de44:	607a      	str	r2, [r7, #4]
 800de46:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800de48:	2300      	movs	r3, #0
 800de4a:	77fb      	strb	r3, [r7, #31]

	VL53LX_hist_pulse_data_t     *ppulse_data;
	VL53LX_range_data_t          *prange_data;

	uint8_t                       p = 0;
 800de4c:	2300      	movs	r3, #0
 800de4e:	77bb      	strb	r3, [r7, #30]
	VL53LX_histogram_bin_data_t *pB = &(palgo3->VL53LX_p_006);
 800de50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de52:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800de56:	61bb      	str	r3, [r7, #24]





	VL53LX_f_003(palgo3);
 800de58:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800de5a:	f7ff f879 	bl	800cf50 <VL53LX_f_003>



	memcpy(
		&(palgo3->VL53LX_p_006),
 800de5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de60:	f503 7327 	add.w	r3, r3, #668	; 0x29c
	memcpy(
 800de64:	22ac      	movs	r2, #172	; 0xac
 800de66:	6839      	ldr	r1, [r7, #0]
 800de68:	4618      	mov	r0, r3
 800de6a:	f006 febb 	bl	8014be4 <memcpy>
		pbins_input,
		sizeof(VL53LX_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	781a      	ldrb	r2, [r3, #0]
 800de72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de74:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	785a      	ldrb	r2, [r3, #1]
 800de7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de7c:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	789a      	ldrb	r2, [r3, #2]
 800de82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de84:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800de8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de8e:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 800de90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de92:	2200      	movs	r2, #0
 800de94:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53LX_MAX_RANGE_RESULTS;
 800de96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de98:	2204      	movs	r2, #4
 800de9a:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 800de9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de9e:	2200      	movs	r2, #0
 800dea0:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800dea2:	2300      	movs	r3, #0
 800dea4:	77bb      	strb	r3, [r7, #30]
 800dea6:	e008      	b.n	800deba <VL53LX_f_025+0x80>
		presults->VL53LX_p_022[p] = 0;
 800dea8:	7fbb      	ldrb	r3, [r7, #30]
 800deaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800deac:	005b      	lsls	r3, r3, #1
 800deae:	4413      	add	r3, r2
 800deb0:	2200      	movs	r2, #0
 800deb2:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800deb4:	7fbb      	ldrb	r3, [r7, #30]
 800deb6:	3301      	adds	r3, #1
 800deb8:	77bb      	strb	r3, [r7, #30]
 800deba:	7fbb      	ldrb	r3, [r7, #30]
 800debc:	2b04      	cmp	r3, #4
 800debe:	d9f3      	bls.n	800dea8 <VL53LX_f_025+0x6e>



	VL53LX_hist_calc_zero_distance_phase(&(palgo3->VL53LX_p_006));
 800dec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dec2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800dec6:	4618      	mov	r0, r3
 800dec8:	f7fe f8b9 	bl	800c03e <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	795b      	ldrb	r3, [r3, #5]
	VL53LX_hist_estimate_ambient_from_thresholded_bins(
 800ded0:	461a      	mov	r2, r3
 800ded2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ded4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800ded8:	4619      	mov	r1, r3
 800deda:	4610      	mov	r0, r2
 800dedc:	f7fe f8ef 	bl	800c0be <VL53LX_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53LX_p_006));

	VL53LX_hist_estimate_ambient_from_ambient_bins(
 800dee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dee2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7fe fcb9 	bl	800c85e <VL53LX_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53LX_p_006));


	VL53LX_hist_remove_ambient_bins(&(palgo3->VL53LX_p_006));
 800deec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800deee:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800def2:	4618      	mov	r0, r3
 800def4:	f7fe f95d 	bl	800c1b2 <VL53LX_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800defe:	2b00      	cmp	r3, #0
 800df00:	d009      	beq.n	800df16 <VL53LX_f_025+0xdc>
		VL53LX_f_005(
 800df02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df04:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800df08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df0a:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800df0e:	461a      	mov	r2, r3
 800df10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800df12:	f000 fd7b 	bl	800ea0c <VL53LX_f_005>
				&(palgo3->VL53LX_p_006),
				&(palgo3->VL53LX_p_047));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800df1e:	2300      	movs	r3, #0
 800df20:	77bb      	strb	r3, [r7, #30]
 800df22:	e01e      	b.n	800df62 <VL53LX_f_025+0x128>
		if (status == VL53LX_ERROR_NONE) {
 800df24:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d117      	bne.n	800df5c <VL53LX_f_025+0x122>
			status =
			VL53LX_f_001(
 800df2c:	7fbb      	ldrb	r3, [r7, #30]
 800df2e:	68ba      	ldr	r2, [r7, #8]
 800df30:	3304      	adds	r3, #4
 800df32:	005b      	lsls	r3, r3, #1
 800df34:	4413      	add	r3, r2
 800df36:	8898      	ldrh	r0, [r3, #4]
 800df38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df3a:	f503 7127 	add.w	r1, r3, #668	; 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53LX_p_006),
				pdmax_algo,
				&(presults->VL53LX_p_022[p]));
 800df3e:	7fbb      	ldrb	r3, [r7, #30]
			VL53LX_f_001(
 800df40:	005b      	lsls	r3, r3, #1
 800df42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800df44:	4413      	add	r3, r2
 800df46:	3304      	adds	r3, #4
 800df48:	9301      	str	r3, [sp, #4]
 800df4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df4c:	9300      	str	r3, [sp, #0]
 800df4e:	460b      	mov	r3, r1
 800df50:	68ba      	ldr	r2, [r7, #8]
 800df52:	68f9      	ldr	r1, [r7, #12]
 800df54:	f7fe fcce 	bl	800c8f4 <VL53LX_f_001>
 800df58:	4603      	mov	r3, r0
 800df5a:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800df5c:	7fbb      	ldrb	r3, [r7, #30]
 800df5e:	3301      	adds	r3, #1
 800df60:	77bb      	strb	r3, [r7, #30]
 800df62:	7fbb      	ldrb	r3, [r7, #30]
 800df64:	2b04      	cmp	r3, #4
 800df66:	d9dd      	bls.n	800df24 <VL53LX_f_025+0xea>





	if (status == VL53LX_ERROR_NONE)
 800df68:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d11a      	bne.n	800dfa6 <VL53LX_f_025+0x16c>
		status =
			VL53LX_f_006(
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	785b      	ldrb	r3, [r3, #1]
			VL53LX_f_006(
 800df78:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	68dc      	ldr	r4, [r3, #12]
			VL53LX_f_006(
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 800df84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df86:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800df8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800df8c:	f502 7252 	add.w	r2, r2, #840	; 0x348
 800df90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800df92:	9102      	str	r1, [sp, #8]
 800df94:	9201      	str	r2, [sp, #4]
 800df96:	9300      	str	r3, [sp, #0]
 800df98:	462b      	mov	r3, r5
 800df9a:	4622      	mov	r2, r4
 800df9c:	4631      	mov	r1, r6
 800df9e:	f7ff f850 	bl	800d042 <VL53LX_f_006>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	77fb      	strb	r3, [r7, #31]





	if (status == VL53LX_ERROR_NONE)
 800dfa6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d104      	bne.n	800dfb8 <VL53LX_f_025+0x17e>
		status =
			VL53LX_f_007(palgo3);
 800dfae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dfb0:	f7ff f972 	bl	800d298 <VL53LX_f_007>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800dfb8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d104      	bne.n	800dfca <VL53LX_f_025+0x190>
		status =
			VL53LX_f_008(palgo3);
 800dfc0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dfc2:	f7ff f9b7 	bl	800d334 <VL53LX_f_008>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800dfca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d104      	bne.n	800dfdc <VL53LX_f_025+0x1a2>
		status =
			VL53LX_f_009(palgo3);
 800dfd2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dfd4:	f7ff fa2c 	bl	800d430 <VL53LX_f_009>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800dfdc:	2300      	movs	r3, #0
 800dfde:	77bb      	strb	r3, [r7, #30]
 800dfe0:	e0a6      	b.n	800e130 <VL53LX_f_025+0x2f6>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800dfe2:	7fba      	ldrb	r2, [r7, #30]
 800dfe4:	4613      	mov	r3, r2
 800dfe6:	00db      	lsls	r3, r3, #3
 800dfe8:	4413      	add	r3, r2
 800dfea:	009b      	lsls	r3, r3, #2
 800dfec:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800dff0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dff2:	4413      	add	r3, r2
 800dff4:	3304      	adds	r3, #4
 800dff6:	617b      	str	r3, [r7, #20]



		if (status == VL53LX_ERROR_NONE)
 800dff8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d109      	bne.n	800e014 <VL53LX_f_025+0x1da>
			status =
				VL53LX_f_010(
 800e000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e002:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800e006:	7fbb      	ldrb	r3, [r7, #30]
 800e008:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7ff fb66 	bl	800d6dc <VL53LX_f_010>
 800e010:	4603      	mov	r3, r0
 800e012:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_006),
					palgo3);



		if (status == VL53LX_ERROR_NONE)
 800e014:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d110      	bne.n	800e03e <VL53LX_f_025+0x204>
			status =
				VL53LX_f_011(
 800e01c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e01e:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800e022:	69bb      	ldr	r3, [r7, #24]
 800e024:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800e028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e02a:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800e02e:	7fb8      	ldrb	r0, [r7, #30]
 800e030:	9300      	str	r3, [sp, #0]
 800e032:	4613      	mov	r3, r2
 800e034:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e036:	f7ff fd5a 	bl	800daee <VL53LX_f_011>
 800e03a:	4603      	mov	r3, r0
 800e03c:	77fb      	strb	r3, [r7, #31]
					pB->VL53LX_p_028,
					&(palgo3->VL53LX_p_048));



		if (status == VL53LX_ERROR_NONE) {
 800e03e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d10d      	bne.n	800e062 <VL53LX_f_025+0x228>
			status =
				VL53LX_f_011(
 800e046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e048:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800e04c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e04e:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800e052:	7fb8      	ldrb	r0, [r7, #30]
 800e054:	9300      	str	r3, [sp, #0]
 800e056:	2300      	movs	r3, #0
 800e058:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e05a:	f7ff fd48 	bl	800daee <VL53LX_f_011>
 800e05e:	4603      	mov	r3, r0
 800e060:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_049));
		}



		if (status == VL53LX_ERROR_NONE) {
 800e062:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d10d      	bne.n	800e086 <VL53LX_f_025+0x24c>
			status =
				VL53LX_f_011(
 800e06a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e06c:	f503 7152 	add.w	r1, r3, #840	; 0x348
 800e070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e072:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800e076:	7fb8      	ldrb	r0, [r7, #30]
 800e078:	9300      	str	r3, [sp, #0]
 800e07a:	2300      	movs	r3, #0
 800e07c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e07e:	f7ff fd36 	bl	800daee <VL53LX_f_011>
 800e082:	4603      	mov	r3, r0
 800e084:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_050));
		}



		if (status == VL53LX_ERROR_NONE)
 800e086:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d109      	bne.n	800e0a2 <VL53LX_f_025+0x268>
			status =
				VL53LX_f_026(
 800e08e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e090:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 800e094:	7fb8      	ldrb	r0, [r7, #30]
 800e096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e098:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e09a:	f000 f8dd 	bl	800e258 <VL53LX_f_026>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53LX_ERROR_NONE)
 800e0a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d108      	bne.n	800e0bc <VL53LX_f_025+0x282>
			status =
				VL53LX_f_027(
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	8a19      	ldrh	r1, [r3, #16]
 800e0ae:	7fb8      	ldrb	r0, [r7, #30]
 800e0b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e0b4:	f000 f95c 	bl	800e370 <VL53LX_f_027>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53LX_ERROR_NONE)
 800e0bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d124      	bne.n	800e10e <VL53LX_f_025+0x2d4>
			status =
			VL53LX_f_014(
 800e0c4:	697b      	ldr	r3, [r7, #20]
 800e0c6:	789d      	ldrb	r5, [r3, #2]
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	7e1e      	ldrb	r6, [r3, #24]
 800e0cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0ce:	f893 c003 	ldrb.w	ip, [r3, #3]
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	f893 e006 	ldrb.w	lr, [r3, #6]
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e0de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e0e0:	f502 727d 	add.w	r2, r2, #1012	; 0x3f4
 800e0e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e0e6:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 800e0ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e0ec:	f200 504c 	addw	r0, r0, #1356	; 0x54c
 800e0f0:	697c      	ldr	r4, [r7, #20]
 800e0f2:	3420      	adds	r4, #32
 800e0f4:	9404      	str	r4, [sp, #16]
 800e0f6:	9003      	str	r0, [sp, #12]
 800e0f8:	9102      	str	r1, [sp, #8]
 800e0fa:	9201      	str	r2, [sp, #4]
 800e0fc:	9300      	str	r3, [sp, #0]
 800e0fe:	4673      	mov	r3, lr
 800e100:	4662      	mov	r2, ip
 800e102:	4631      	mov	r1, r6
 800e104:	4628      	mov	r0, r5
 800e106:	f7ff fd46 	bl	800db96 <VL53LX_f_014>
 800e10a:	4603      	mov	r3, r0
 800e10c:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53LX_p_050),
			&(ppulse_data->VL53LX_p_002));



		if (status == VL53LX_ERROR_NONE)
 800e10e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d109      	bne.n	800e12a <VL53LX_f_025+0x2f0>
			status =
				VL53LX_f_015(
 800e116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e118:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 800e11c:	7fb8      	ldrb	r0, [r7, #30]
 800e11e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e120:	2101      	movs	r1, #1
 800e122:	f7ff fb2e 	bl	800d782 <VL53LX_f_015>
 800e126:	4603      	mov	r3, r0
 800e128:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800e12a:	7fbb      	ldrb	r3, [r7, #30]
 800e12c:	3301      	adds	r3, #1
 800e12e:	77bb      	strb	r3, [r7, #30]
 800e130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e132:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800e136:	7fba      	ldrb	r2, [r7, #30]
 800e138:	429a      	cmp	r2, r3
 800e13a:	f4ff af52 	bcc.w	800dfe2 <VL53LX_f_025+0x1a8>

	}



	if (status == VL53LX_ERROR_NONE)
 800e13e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d107      	bne.n	800e156 <VL53LX_f_025+0x31c>
		status =
			VL53LX_f_016(
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	785b      	ldrb	r3, [r3, #1]
 800e14a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7ff fa41 	bl	800d5d4 <VL53LX_f_016>
 800e152:	4603      	mov	r3, r0
 800e154:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800e156:	2300      	movs	r3, #0
 800e158:	77bb      	strb	r3, [r7, #30]
 800e15a:	e071      	b.n	800e240 <VL53LX_f_025+0x406>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800e15c:	7fba      	ldrb	r2, [r7, #30]
 800e15e:	4613      	mov	r3, r2
 800e160:	00db      	lsls	r3, r3, #3
 800e162:	4413      	add	r3, r2
 800e164:	009b      	lsls	r3, r3, #2
 800e166:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800e16a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e16c:	4413      	add	r3, r2
 800e16e:	3304      	adds	r3, #4
 800e170:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 800e172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e174:	7c9a      	ldrb	r2, [r3, #18]
 800e176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e178:	7c5b      	ldrb	r3, [r3, #17]
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d25c      	bcs.n	800e238 <VL53LX_f_025+0x3fe>
			continue;




		if (ppulse_data->VL53LX_p_010 >
 800e17e:	697b      	ldr	r3, [r7, #20]
 800e180:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53LX_p_010 >
 800e186:	429a      	cmp	r2, r3
 800e188:	dd57      	ble.n	800e23a <VL53LX_f_025+0x400>
			ppulse_data->VL53LX_p_023 < 0xFF) {
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 800e18e:	2bff      	cmp	r3, #255	; 0xff
 800e190:	d053      	beq.n	800e23a <VL53LX_f_025+0x400>

			prange_data =
			&(presults->VL53LX_p_003[presults->active_results]);
 800e192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e194:	7c9b      	ldrb	r3, [r3, #18]
 800e196:	461a      	mov	r2, r3
			prange_data =
 800e198:	234c      	movs	r3, #76	; 0x4c
 800e19a:	fb03 f302 	mul.w	r3, r3, r2
 800e19e:	3310      	adds	r3, #16
 800e1a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e1a2:	4413      	add	r3, r2
 800e1a4:	3304      	adds	r3, #4
 800e1a6:	613b      	str	r3, [r7, #16]

			if (status == VL53LX_ERROR_NONE)
 800e1a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d115      	bne.n	800e1dc <VL53LX_f_025+0x3a2>
				VL53LX_f_017(
 800e1b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1b2:	7c98      	ldrb	r0, [r3, #18]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f893 1020 	ldrb.w	r1, [r3, #32]
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	8b5d      	ldrh	r5, [r3, #26]
 800e1c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1c6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800e1ca:	693a      	ldr	r2, [r7, #16]
 800e1cc:	9202      	str	r2, [sp, #8]
 800e1ce:	697a      	ldr	r2, [r7, #20]
 800e1d0:	9201      	str	r2, [sp, #4]
 800e1d2:	9300      	str	r3, [sp, #0]
 800e1d4:	462b      	mov	r3, r5
 800e1d6:	4622      	mov	r2, r4
 800e1d8:	f7ff fd85 	bl	800dce6 <VL53LX_f_017>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53LX_p_006),
						ppulse_data,
						prange_data);

			if (status == VL53LX_ERROR_NONE)
 800e1dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d115      	bne.n	800e210 <VL53LX_f_025+0x3d6>
				status =
				VL53LX_f_018(
 800e1e4:	69bb      	ldr	r3, [r7, #24]
 800e1e6:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 800e1ea:	69bb      	ldr	r3, [r7, #24]
 800e1ec:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 800e1f0:	69bb      	ldr	r3, [r7, #24]
 800e1f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800e1f6:	69bb      	ldr	r3, [r7, #24]
 800e1f8:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
 800e1fc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800e200:	9301      	str	r3, [sp, #4]
 800e202:	693b      	ldr	r3, [r7, #16]
 800e204:	9300      	str	r3, [sp, #0]
 800e206:	4623      	mov	r3, r4
 800e208:	f000 fb11 	bl	800e82e <VL53LX_f_018>
 800e20c:	4603      	mov	r3, r0
 800e20e:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53LX_ERROR_NONE)
 800e210:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d108      	bne.n	800e22a <VL53LX_f_025+0x3f0>
				VL53LX_f_019(
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	8bd8      	ldrh	r0, [r3, #30]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800e222:	693a      	ldr	r2, [r7, #16]
 800e224:	4619      	mov	r1, r3
 800e226:	f000 fba7 	bl	800e978 <VL53LX_f_019>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 800e22a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e22c:	7c9b      	ldrb	r3, [r3, #18]
 800e22e:	3301      	adds	r3, #1
 800e230:	b2da      	uxtb	r2, r3
 800e232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e234:	749a      	strb	r2, [r3, #18]
 800e236:	e000      	b.n	800e23a <VL53LX_f_025+0x400>
			continue;
 800e238:	bf00      	nop
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800e23a:	7fbb      	ldrb	r3, [r7, #30]
 800e23c:	3301      	adds	r3, #1
 800e23e:	77bb      	strb	r3, [r7, #30]
 800e240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e242:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800e246:	7fba      	ldrb	r2, [r7, #30]
 800e248:	429a      	cmp	r2, r3
 800e24a:	d387      	bcc.n	800e15c <VL53LX_f_025+0x322>



	LOG_FUNCTION_END(status);

	return status;
 800e24c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e250:	4618      	mov	r0, r3
 800e252:	3724      	adds	r7, #36	; 0x24
 800e254:	46bd      	mov	sp, r7
 800e256:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e258 <VL53LX_f_026>:
VL53LX_Error VL53LX_f_026(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *ppulse,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b08c      	sub	sp, #48	; 0x30
 800e25c:	af02      	add	r7, sp, #8
 800e25e:	60b9      	str	r1, [r7, #8]
 800e260:	607a      	str	r2, [r7, #4]
 800e262:	603b      	str	r3, [r7, #0]
 800e264:	4603      	mov	r3, r0
 800e266:	73fb      	strb	r3, [r7, #15]




	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800e268:	2300      	movs	r3, #0
 800e26a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800e26e:	7bfa      	ldrb	r2, [r7, #15]
 800e270:	4613      	mov	r3, r2
 800e272:	00db      	lsls	r3, r3, #3
 800e274:	4413      	add	r3, r2
 800e276:	009b      	lsls	r3, r3, #2
 800e278:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800e27c:	687a      	ldr	r2, [r7, #4]
 800e27e:	4413      	add	r3, r2
 800e280:	3304      	adds	r3, #4
 800e282:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 800e284:	2300      	movs	r3, #0
 800e286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  i     = 0;
 800e28a:	2300      	movs	r3, #0
 800e28c:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 800e28e:	2300      	movs	r3, #0
 800e290:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 800e292:	2300      	movs	r3, #0
 800e294:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 800e296:	2300      	movs	r3, #0
 800e298:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53LX_p_020    = palgo3->VL53LX_p_020;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	785a      	ldrb	r2, [r3, #1]
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53LX_p_019      = palgo3->VL53LX_p_019;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	781a      	ldrb	r2, [r3, #0]
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53LX_p_021 = palgo3->VL53LX_p_021;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	789a      	ldrb	r2, [r3, #2]
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800e2b2:	6a3b      	ldr	r3, [r7, #32]
 800e2b4:	781b      	ldrb	r3, [r3, #0]
 800e2b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e2ba:	e04d      	b.n	800e358 <VL53LX_f_026+0x100>

		i =  lb  % palgo3->VL53LX_p_030;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	78da      	ldrb	r2, [r3, #3]
 800e2c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800e2c8:	fb02 f201 	mul.w	r2, r2, r1
 800e2cc:	1a9b      	subs	r3, r3, r2
 800e2ce:	77fb      	strb	r3, [r7, #31]


		VL53LX_f_022(
 800e2d0:	6a3b      	ldr	r3, [r7, #32]
 800e2d2:	7999      	ldrb	r1, [r3, #6]
 800e2d4:	f107 0218 	add.w	r2, r7, #24
 800e2d8:	7ff8      	ldrb	r0, [r7, #31]
 800e2da:	f107 0310 	add.w	r3, r7, #16
 800e2de:	9301      	str	r3, [sp, #4]
 800e2e0:	f107 0314 	add.w	r3, r7, #20
 800e2e4:	9300      	str	r3, [sp, #0]
 800e2e6:	4613      	mov	r3, r2
 800e2e8:	68ba      	ldr	r2, [r7, #8]
 800e2ea:	f000 fa47 	bl	800e77c <VL53LX_f_022>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53LX_p_007[i] = suma;
 800e2ee:	7ffb      	ldrb	r3, [r7, #31]
 800e2f0:	69ba      	ldr	r2, [r7, #24]
 800e2f2:	6839      	ldr	r1, [r7, #0]
 800e2f4:	009b      	lsls	r3, r3, #2
 800e2f6:	440b      	add	r3, r1
 800e2f8:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_032[i] = sumb;
 800e2fa:	7ffb      	ldrb	r3, [r7, #31]
 800e2fc:	697a      	ldr	r2, [r7, #20]
 800e2fe:	6839      	ldr	r1, [r7, #0]
 800e300:	3318      	adds	r3, #24
 800e302:	009b      	lsls	r3, r3, #2
 800e304:	440b      	add	r3, r1
 800e306:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_001[i] = sumc;
 800e308:	7ffb      	ldrb	r3, [r7, #31]
 800e30a:	693a      	ldr	r2, [r7, #16]
 800e30c:	6839      	ldr	r1, [r7, #0]
 800e30e:	3330      	adds	r3, #48	; 0x30
 800e310:	009b      	lsls	r3, r3, #2
 800e312:	440b      	add	r3, r1
 800e314:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_053[i] =
			(suma + sumb) -
 800e316:	69ba      	ldr	r2, [r7, #24]
 800e318:	697b      	ldr	r3, [r7, #20]
 800e31a:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53LX_p_028);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	689a      	ldr	r2, [r3, #8]
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	441a      	add	r2, r3
		pfiltered->VL53LX_p_053[i] =
 800e324:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 800e326:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_053[i] =
 800e328:	6839      	ldr	r1, [r7, #0]
 800e32a:	3348      	adds	r3, #72	; 0x48
 800e32c:	009b      	lsls	r3, r3, #2
 800e32e:	440b      	add	r3, r1
 800e330:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_054[i] =
			(sumb + sumc) -
 800e332:	697a      	ldr	r2, [r7, #20]
 800e334:	693b      	ldr	r3, [r7, #16]
 800e336:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53LX_p_028);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	689a      	ldr	r2, [r3, #8]
 800e33c:	69bb      	ldr	r3, [r7, #24]
 800e33e:	441a      	add	r2, r3
		pfiltered->VL53LX_p_054[i] =
 800e340:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 800e342:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_054[i] =
 800e344:	6839      	ldr	r1, [r7, #0]
 800e346:	3360      	adds	r3, #96	; 0x60
 800e348:	009b      	lsls	r3, r3, #2
 800e34a:	440b      	add	r3, r1
 800e34c:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800e34e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e352:	3301      	adds	r3, #1
 800e354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e358:	6a3b      	ldr	r3, [r7, #32]
 800e35a:	791b      	ldrb	r3, [r3, #4]
 800e35c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e360:	429a      	cmp	r2, r3
 800e362:	d9ab      	bls.n	800e2bc <VL53LX_f_026+0x64>
	}

	return status;
 800e364:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800e368:	4618      	mov	r0, r3
 800e36a:	3728      	adds	r7, #40	; 0x28
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}

0800e370 <VL53LX_f_027>:
VL53LX_Error VL53LX_f_027(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3)
{
 800e370:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e372:	b08f      	sub	sp, #60	; 0x3c
 800e374:	af06      	add	r7, sp, #24
 800e376:	60ba      	str	r2, [r7, #8]
 800e378:	607b      	str	r3, [r7, #4]
 800e37a:	4603      	mov	r3, r0
 800e37c:	73fb      	strb	r3, [r7, #15]
 800e37e:	460b      	mov	r3, r1
 800e380:	81bb      	strh	r3, [r7, #12]



	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800e382:	2300      	movs	r3, #0
 800e384:	77bb      	strb	r3, [r7, #30]
	VL53LX_Error  func_status  = VL53LX_ERROR_NONE;
 800e386:	2300      	movs	r3, #0
 800e388:	777b      	strb	r3, [r7, #29]

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800e38a:	7bfa      	ldrb	r2, [r7, #15]
 800e38c:	4613      	mov	r3, r2
 800e38e:	00db      	lsls	r3, r3, #3
 800e390:	4413      	add	r3, r2
 800e392:	009b      	lsls	r3, r3, #2
 800e394:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800e398:	687a      	ldr	r2, [r7, #4]
 800e39a:	4413      	add	r3, r2
 800e39c:	3304      	adds	r3, #4
 800e39e:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800e3ac:	69bb      	ldr	r3, [r7, #24]
 800e3ae:	781b      	ldrb	r3, [r3, #0]
 800e3b0:	77fb      	strb	r3, [r7, #31]
 800e3b2:	e0b9      	b.n	800e528 <VL53LX_f_027+0x1b8>

		i =  lb    % palgo3->VL53LX_p_030;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	78da      	ldrb	r2, [r3, #3]
 800e3b8:	7ffb      	ldrb	r3, [r7, #31]
 800e3ba:	fbb3 f1f2 	udiv	r1, r3, r2
 800e3be:	fb02 f201 	mul.w	r2, r2, r1
 800e3c2:	1a9b      	subs	r3, r3, r2
 800e3c4:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53LX_p_030;
 800e3c6:	7ffb      	ldrb	r3, [r7, #31]
 800e3c8:	3301      	adds	r3, #1
 800e3ca:	687a      	ldr	r2, [r7, #4]
 800e3cc:	78d2      	ldrb	r2, [r2, #3]
 800e3ce:	fb93 f1f2 	sdiv	r1, r3, r2
 800e3d2:	fb02 f201 	mul.w	r2, r2, r1
 800e3d6:	1a9b      	subs	r3, r3, r2
 800e3d8:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53LX_p_021 &&
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	789b      	ldrb	r3, [r3, #2]
 800e3de:	7dfa      	ldrb	r2, [r7, #23]
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	f080 809e 	bcs.w	800e522 <VL53LX_f_027+0x1b2>
			j < palgo3->VL53LX_p_021) {
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53LX_p_021 &&
 800e3ea:	7dba      	ldrb	r2, [r7, #22]
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	f080 8098 	bcs.w	800e522 <VL53LX_f_027+0x1b2>

			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800e3f2:	7dfb      	ldrb	r3, [r7, #23]
 800e3f4:	68ba      	ldr	r2, [r7, #8]
 800e3f6:	3348      	adds	r3, #72	; 0x48
 800e3f8:	009b      	lsls	r3, r3, #2
 800e3fa:	4413      	add	r3, r2
 800e3fc:	685b      	ldr	r3, [r3, #4]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d10e      	bne.n	800e420 <VL53LX_f_027+0xb0>
				pfiltered->VL53LX_p_054[i] == 0)
 800e402:	7dfb      	ldrb	r3, [r7, #23]
 800e404:	68ba      	ldr	r2, [r7, #8]
 800e406:	3360      	adds	r3, #96	; 0x60
 800e408:	009b      	lsls	r3, r3, #2
 800e40a:	4413      	add	r3, r2
 800e40c:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d106      	bne.n	800e420 <VL53LX_f_027+0xb0>

				pfiltered->VL53LX_p_040[i] = 0;
 800e412:	7dfb      	ldrb	r3, [r7, #23]
 800e414:	68ba      	ldr	r2, [r7, #8]
 800e416:	4413      	add	r3, r2
 800e418:	2200      	movs	r2, #0
 800e41a:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800e41e:	e043      	b.n	800e4a8 <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800e420:	7dfb      	ldrb	r3, [r7, #23]
 800e422:	68ba      	ldr	r2, [r7, #8]
 800e424:	3348      	adds	r3, #72	; 0x48
 800e426:	009b      	lsls	r3, r3, #2
 800e428:	4413      	add	r3, r2
 800e42a:	685b      	ldr	r3, [r3, #4]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	db0e      	blt.n	800e44e <VL53LX_f_027+0xde>
					 pfiltered->VL53LX_p_054[i] >= 0)
 800e430:	7dfb      	ldrb	r3, [r7, #23]
 800e432:	68ba      	ldr	r2, [r7, #8]
 800e434:	3360      	adds	r3, #96	; 0x60
 800e436:	009b      	lsls	r3, r3, #2
 800e438:	4413      	add	r3, r2
 800e43a:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	db06      	blt.n	800e44e <VL53LX_f_027+0xde>
				pfiltered->VL53LX_p_040[i] = 1;
 800e440:	7dfb      	ldrb	r3, [r7, #23]
 800e442:	68ba      	ldr	r2, [r7, #8]
 800e444:	4413      	add	r3, r2
 800e446:	2201      	movs	r2, #1
 800e448:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800e44c:	e02c      	b.n	800e4a8 <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800e44e:	7dfb      	ldrb	r3, [r7, #23]
 800e450:	68ba      	ldr	r2, [r7, #8]
 800e452:	3348      	adds	r3, #72	; 0x48
 800e454:	009b      	lsls	r3, r3, #2
 800e456:	4413      	add	r3, r2
 800e458:	685b      	ldr	r3, [r3, #4]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	da1e      	bge.n	800e49c <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800e45e:	7dfb      	ldrb	r3, [r7, #23]
 800e460:	68ba      	ldr	r2, [r7, #8]
 800e462:	3360      	adds	r3, #96	; 0x60
 800e464:	009b      	lsls	r3, r3, #2
 800e466:	4413      	add	r3, r2
 800e468:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	db16      	blt.n	800e49c <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800e46e:	7dbb      	ldrb	r3, [r7, #22]
 800e470:	68ba      	ldr	r2, [r7, #8]
 800e472:	3348      	adds	r3, #72	; 0x48
 800e474:	009b      	lsls	r3, r3, #2
 800e476:	4413      	add	r3, r2
 800e478:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	db0e      	blt.n	800e49c <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[j] <  0)
 800e47e:	7dbb      	ldrb	r3, [r7, #22]
 800e480:	68ba      	ldr	r2, [r7, #8]
 800e482:	3360      	adds	r3, #96	; 0x60
 800e484:	009b      	lsls	r3, r3, #2
 800e486:	4413      	add	r3, r2
 800e488:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	da06      	bge.n	800e49c <VL53LX_f_027+0x12c>
				pfiltered->VL53LX_p_040[i] = 1;
 800e48e:	7dfb      	ldrb	r3, [r7, #23]
 800e490:	68ba      	ldr	r2, [r7, #8]
 800e492:	4413      	add	r3, r2
 800e494:	2201      	movs	r2, #1
 800e496:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800e49a:	e005      	b.n	800e4a8 <VL53LX_f_027+0x138>

			else
				pfiltered->VL53LX_p_040[i] = 0;
 800e49c:	7dfb      	ldrb	r3, [r7, #23]
 800e49e:	68ba      	ldr	r2, [r7, #8]
 800e4a0:	4413      	add	r3, r2
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4


			if (pfiltered->VL53LX_p_040[i] > 0) {
 800e4a8:	7dfb      	ldrb	r3, [r7, #23]
 800e4aa:	68ba      	ldr	r2, [r7, #8]
 800e4ac:	4413      	add	r3, r2
 800e4ae:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d035      	beq.n	800e522 <VL53LX_f_027+0x1b2>

				pdata->VL53LX_p_023 = lb;
 800e4b6:	69bb      	ldr	r3, [r7, #24]
 800e4b8:	7ffa      	ldrb	r2, [r7, #31]
 800e4ba:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53LX_f_028(
 800e4bc:	7dfb      	ldrb	r3, [r7, #23]
 800e4be:	68ba      	ldr	r2, [r7, #8]
 800e4c0:	009b      	lsls	r3, r3, #2
 800e4c2:	4413      	add	r3, r2
 800e4c4:	685c      	ldr	r4, [r3, #4]
 800e4c6:	7dfb      	ldrb	r3, [r7, #23]
 800e4c8:	68ba      	ldr	r2, [r7, #8]
 800e4ca:	3318      	adds	r3, #24
 800e4cc:	009b      	lsls	r3, r3, #2
 800e4ce:	4413      	add	r3, r2
 800e4d0:	685d      	ldr	r5, [r3, #4]
 800e4d2:	7dfb      	ldrb	r3, [r7, #23]
 800e4d4:	68ba      	ldr	r2, [r7, #8]
 800e4d6:	3330      	adds	r3, #48	; 0x30
 800e4d8:	009b      	lsls	r3, r3, #2
 800e4da:	4413      	add	r3, r2
 800e4dc:	685e      	ldr	r6, [r3, #4]
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	689b      	ldr	r3, [r3, #8]
 800e4e2:	687a      	ldr	r2, [r7, #4]
 800e4e4:	78d2      	ldrb	r2, [r2, #3]
 800e4e6:	69b9      	ldr	r1, [r7, #24]
 800e4e8:	3118      	adds	r1, #24
 800e4ea:	7ff8      	ldrb	r0, [r7, #31]
 800e4ec:	9105      	str	r1, [sp, #20]
 800e4ee:	9204      	str	r2, [sp, #16]
 800e4f0:	9303      	str	r3, [sp, #12]
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	9302      	str	r3, [sp, #8]
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	9301      	str	r3, [sp, #4]
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	9300      	str	r3, [sp, #0]
 800e4fe:	4633      	mov	r3, r6
 800e500:	462a      	mov	r2, r5
 800e502:	4621      	mov	r1, r4
 800e504:	f000 f81c 	bl	800e540 <VL53LX_f_028>
 800e508:	4603      	mov	r3, r0
 800e50a:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53LX_p_028,
					palgo3->VL53LX_p_030,
					&(pdata->VL53LX_p_011));

				if (func_status ==
 800e50c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e510:	f113 0f0f 	cmn.w	r3, #15
 800e514:	d105      	bne.n	800e522 <VL53LX_f_027+0x1b2>
					VL53LX_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53LX_p_040[i] = 0;
 800e516:	7dfb      	ldrb	r3, [r7, #23]
 800e518:	68ba      	ldr	r2, [r7, #8]
 800e51a:	4413      	add	r3, r2
 800e51c:	2200      	movs	r2, #0
 800e51e:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800e522:	7ffb      	ldrb	r3, [r7, #31]
 800e524:	3301      	adds	r3, #1
 800e526:	77fb      	strb	r3, [r7, #31]
 800e528:	69bb      	ldr	r3, [r7, #24]
 800e52a:	791b      	ldrb	r3, [r3, #4]
 800e52c:	7ffa      	ldrb	r2, [r7, #31]
 800e52e:	429a      	cmp	r2, r3
 800e530:	f4ff af40 	bcc.w	800e3b4 <VL53LX_f_027+0x44>

			}
		}
	}

	return status;
 800e534:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800e538:	4618      	mov	r0, r3
 800e53a:	3724      	adds	r7, #36	; 0x24
 800e53c:	46bd      	mov	sp, r7
 800e53e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e540 <VL53LX_f_028>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53LX_p_028,
	uint8_t   VL53LX_p_030,
	uint32_t *pmean_phase)
{
 800e540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e544:	b09e      	sub	sp, #120	; 0x78
 800e546:	af00      	add	r7, sp, #0
 800e548:	64b9      	str	r1, [r7, #72]	; 0x48
 800e54a:	647a      	str	r2, [r7, #68]	; 0x44
 800e54c:	643b      	str	r3, [r7, #64]	; 0x40
 800e54e:	4603      	mov	r3, r0
 800e550:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f


	VL53LX_Error  status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800e554:	23f1      	movs	r3, #241	; 0xf1
 800e556:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	int64_t  mean_phase  = VL53LX_MAX_ALLOWED_PHASE;
 800e55a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e55e:	f04f 0300 	mov.w	r3, #0
 800e562:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int32_t  mean_phase32;
	int64_t  VL53LX_p_055   = 0;
 800e566:	f04f 0200 	mov.w	r2, #0
 800e56a:	f04f 0300 	mov.w	r3, #0
 800e56e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t  half_b_minus_amb = 0;
 800e572:	f04f 0200 	mov.w	r2, #0
 800e576:	f04f 0300 	mov.w	r3, #0
 800e57a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58


	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800e57e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e580:	4618      	mov	r0, r3
 800e582:	ea4f 71e0 	mov.w	r1, r0, asr #31
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800e586:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e58a:	461a      	mov	r2, r3
 800e58c:	ea4f 73e2 	mov.w	r3, r2, asr #31
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800e590:	ebb0 0802 	subs.w	r8, r0, r2
 800e594:	eb61 0903 	sbc.w	r9, r1, r3
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800e598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e59a:	461a      	mov	r2, r3
 800e59c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800e5a0:	ebb8 0a02 	subs.w	sl, r8, r2
 800e5a4:	eb69 0b03 	sbc.w	fp, r9, r3
 800e5a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e5ac:	461a      	mov	r2, r3
 800e5ae:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800e5b2:	ebba 0402 	subs.w	r4, sl, r2
 800e5b6:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800e5ba:	f04f 0200 	mov.w	r2, #0
 800e5be:	f04f 0300 	mov.w	r3, #0
 800e5c2:	032b      	lsls	r3, r5, #12
 800e5c4:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800e5c8:	0322      	lsls	r2, r4, #12
 800e5ca:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800e5ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	ea4f 71e0 	mov.w	r1, r0, asr #31
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800e5d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e5da:	461a      	mov	r2, r3
 800e5dc:	ea4f 73e2 	mov.w	r3, r2, asr #31
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800e5e0:	1a84      	subs	r4, r0, r2
 800e5e2:	63bc      	str	r4, [r7, #56]	; 0x38
 800e5e4:	eb61 0303 	sbc.w	r3, r1, r3
 800e5e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800e5ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e5ee:	461a      	mov	r2, r3
 800e5f0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800e5f4:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800e5f8:	4621      	mov	r1, r4
 800e5fa:	1a89      	subs	r1, r1, r2
 800e5fc:	6339      	str	r1, [r7, #48]	; 0x30
 800e5fe:	4629      	mov	r1, r5
 800e600:	eb61 0303 	sbc.w	r3, r1, r3
 800e604:	637b      	str	r3, [r7, #52]	; 0x34
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800e606:	f04f 0200 	mov.w	r2, #0
 800e60a:	f04f 0300 	mov.w	r3, #0
 800e60e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800e612:	4629      	mov	r1, r5
 800e614:	030b      	lsls	r3, r1, #12
 800e616:	4621      	mov	r1, r4
 800e618:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 800e61c:	4621      	mov	r1, r4
 800e61e:	030a      	lsls	r2, r1, #12
 800e620:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	if (half_b_minus_amb != 0) {
 800e624:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e628:	4313      	orrs	r3, r2
 800e62a:	f000 809c 	beq.w	800e766 <VL53LX_f_028+0x226>

		mean_phase = (4096 * VL53LX_p_055) + half_b_minus_amb;
 800e62e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800e632:	f04f 0000 	mov.w	r0, #0
 800e636:	f04f 0100 	mov.w	r1, #0
 800e63a:	0319      	lsls	r1, r3, #12
 800e63c:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800e640:	0310      	lsls	r0, r2, #12
 800e642:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e646:	1814      	adds	r4, r2, r0
 800e648:	623c      	str	r4, [r7, #32]
 800e64a:	414b      	adcs	r3, r1
 800e64c:	627b      	str	r3, [r7, #36]	; 0x24
 800e64e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800e652:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 800e656:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e65a:	1891      	adds	r1, r2, r2
 800e65c:	61b9      	str	r1, [r7, #24]
 800e65e:	415b      	adcs	r3, r3
 800e660:	61fb      	str	r3, [r7, #28]
 800e662:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e666:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e66a:	f7f2 f9ff 	bl	8000a6c <__aeabi_ldivmod>
 800e66e:	4602      	mov	r2, r0
 800e670:	460b      	mov	r3, r1
 800e672:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

		mean_phase  +=  2048;
 800e676:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e67a:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800e67e:	6139      	str	r1, [r7, #16]
 800e680:	f143 0300 	adc.w	r3, r3, #0
 800e684:	617b      	str	r3, [r7, #20]
 800e686:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e68a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		mean_phase  += (4096 * (int64_t)bin);
 800e68e:	f897 004f 	ldrb.w	r0, [r7, #79]	; 0x4f
 800e692:	f04f 0100 	mov.w	r1, #0
 800e696:	f04f 0200 	mov.w	r2, #0
 800e69a:	f04f 0300 	mov.w	r3, #0
 800e69e:	030b      	lsls	r3, r1, #12
 800e6a0:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 800e6a4:	0302      	lsls	r2, r0, #12
 800e6a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e6aa:	1884      	adds	r4, r0, r2
 800e6ac:	60bc      	str	r4, [r7, #8]
 800e6ae:	eb41 0303 	adc.w	r3, r1, r3
 800e6b2:	60fb      	str	r3, [r7, #12]
 800e6b4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800e6b8:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


		mean_phase  = do_division_s((mean_phase + 1), 2);
 800e6bc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e6c0:	1c51      	adds	r1, r2, #1
 800e6c2:	62b9      	str	r1, [r7, #40]	; 0x28
 800e6c4:	f143 0300 	adc.w	r3, r3, #0
 800e6c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e6ca:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800e6ce:	462b      	mov	r3, r5
 800e6d0:	0fdb      	lsrs	r3, r3, #31
 800e6d2:	461a      	mov	r2, r3
 800e6d4:	f04f 0300 	mov.w	r3, #0
 800e6d8:	4621      	mov	r1, r4
 800e6da:	1851      	adds	r1, r2, r1
 800e6dc:	6039      	str	r1, [r7, #0]
 800e6de:	4629      	mov	r1, r5
 800e6e0:	eb43 0101 	adc.w	r1, r3, r1
 800e6e4:	6079      	str	r1, [r7, #4]
 800e6e6:	f04f 0200 	mov.w	r2, #0
 800e6ea:	f04f 0300 	mov.w	r3, #0
 800e6ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e6f2:	4621      	mov	r1, r4
 800e6f4:	084a      	lsrs	r2, r1, #1
 800e6f6:	4629      	mov	r1, r5
 800e6f8:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800e6fc:	4629      	mov	r1, r5
 800e6fe:	104b      	asrs	r3, r1, #1
 800e700:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


		if (mean_phase  < 0)
 800e704:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e708:	2a00      	cmp	r2, #0
 800e70a:	f173 0300 	sbcs.w	r3, r3, #0
 800e70e:	da05      	bge.n	800e71c <VL53LX_f_028+0x1dc>
			mean_phase = 0;
 800e710:	f04f 0200 	mov.w	r2, #0
 800e714:	f04f 0300 	mov.w	r3, #0
 800e718:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
		if (mean_phase > VL53LX_MAX_ALLOWED_PHASE)
 800e71c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e720:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e724:	f04f 0100 	mov.w	r1, #0
 800e728:	4290      	cmp	r0, r2
 800e72a:	eb71 0303 	sbcs.w	r3, r1, r3
 800e72e:	da05      	bge.n	800e73c <VL53LX_f_028+0x1fc>
			mean_phase = VL53LX_MAX_ALLOWED_PHASE;
 800e730:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e734:	f04f 0300 	mov.w	r3, #0
 800e738:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


		mean_phase32 = (int32_t)mean_phase;
 800e73c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e73e:	657b      	str	r3, [r7, #84]	; 0x54
		mean_phase32 = mean_phase32 %
			((int32_t)VL53LX_p_030 * 2048);
 800e740:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 800e744:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 800e746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e748:	fb93 f1f2 	sdiv	r1, r3, r2
 800e74c:	fb02 f201 	mul.w	r2, r2, r1
 800e750:	1a9b      	subs	r3, r3, r2
 800e752:	657b      	str	r3, [r7, #84]	; 0x54
		mean_phase = mean_phase32;
 800e754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e756:	461a      	mov	r2, r3
 800e758:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800e75c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

		status = VL53LX_ERROR_NONE;
 800e760:	2300      	movs	r3, #0
 800e762:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	}

	*pmean_phase = (uint32_t)mean_phase;
 800e766:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e768:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e76c:	601a      	str	r2, [r3, #0]

	return status;
 800e76e:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800e772:	4618      	mov	r0, r3
 800e774:	3778      	adds	r7, #120	; 0x78
 800e776:	46bd      	mov	sp, r7
 800e778:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e77c <VL53LX_f_022>:
	uint8_t                         filter_woi,
	VL53LX_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 800e77c:	b480      	push	{r7}
 800e77e:	b087      	sub	sp, #28
 800e780:	af00      	add	r7, sp, #0
 800e782:	60ba      	str	r2, [r7, #8]
 800e784:	607b      	str	r3, [r7, #4]
 800e786:	4603      	mov	r3, r0
 800e788:	73fb      	strb	r3, [r7, #15]
 800e78a:	460b      	mov	r3, r1
 800e78c:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 800e78e:	2300      	movs	r3, #0
 800e790:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 800e792:	2300      	movs	r3, #0
 800e794:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2200      	movs	r2, #0
 800e79a:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53LX_p_032];
 800e79c:	7bfa      	ldrb	r2, [r7, #15]
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	3206      	adds	r2, #6
 800e7a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e7a6:	6a3b      	ldr	r3, [r7, #32]
 800e7a8:	601a      	str	r2, [r3, #0]
	*pc = 0;
 800e7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	75fb      	strb	r3, [r7, #23]
 800e7b4:	e02f      	b.n	800e816 <VL53LX_f_022+0x9a>


		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800e7b6:	7bfa      	ldrb	r2, [r7, #15]
 800e7b8:	7dfb      	ldrb	r3, [r7, #23]
 800e7ba:	4413      	add	r3, r2
 800e7bc:	68ba      	ldr	r2, [r7, #8]
 800e7be:	7a92      	ldrb	r2, [r2, #10]
 800e7c0:	441a      	add	r2, r3
 800e7c2:	7bbb      	ldrb	r3, [r7, #14]
 800e7c4:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53LX_p_021;
 800e7c6:	68ba      	ldr	r2, [r7, #8]
 800e7c8:	7a92      	ldrb	r2, [r2, #10]
 800e7ca:	fb93 f1f2 	sdiv	r1, r3, r2
 800e7ce:	fb02 f201 	mul.w	r2, r2, r1
 800e7d2:	1a9b      	subs	r3, r3, r2
		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800e7d4:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 800e7d6:	7dfa      	ldrb	r2, [r7, #23]
 800e7d8:	7bbb      	ldrb	r3, [r7, #14]
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	d20a      	bcs.n	800e7f4 <VL53LX_f_022+0x78>
			*pa += pbins->bin_data[j];
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681a      	ldr	r2, [r3, #0]
 800e7e2:	7db9      	ldrb	r1, [r7, #22]
 800e7e4:	68bb      	ldr	r3, [r7, #8]
 800e7e6:	3106      	adds	r1, #6
 800e7e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e7ec:	441a      	add	r2, r3
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	601a      	str	r2, [r3, #0]
 800e7f2:	e00d      	b.n	800e810 <VL53LX_f_022+0x94>
		else if (w > filter_woi)
 800e7f4:	7dfa      	ldrb	r2, [r7, #23]
 800e7f6:	7bbb      	ldrb	r3, [r7, #14]
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	d909      	bls.n	800e810 <VL53LX_f_022+0x94>
			*pc += pbins->bin_data[j];
 800e7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7fe:	681a      	ldr	r2, [r3, #0]
 800e800:	7db9      	ldrb	r1, [r7, #22]
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	3106      	adds	r1, #6
 800e806:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e80a:	441a      	add	r2, r3
 800e80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e80e:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800e810:	7dfb      	ldrb	r3, [r7, #23]
 800e812:	3301      	adds	r3, #1
 800e814:	75fb      	strb	r3, [r7, #23]
 800e816:	7bbb      	ldrb	r3, [r7, #14]
 800e818:	005a      	lsls	r2, r3, #1
 800e81a:	7dfb      	ldrb	r3, [r7, #23]
 800e81c:	429a      	cmp	r2, r3
 800e81e:	daca      	bge.n	800e7b6 <VL53LX_f_022+0x3a>
	}
}
 800e820:	bf00      	nop
 800e822:	bf00      	nop
 800e824:	371c      	adds	r7, #28
 800e826:	46bd      	mov	sp, r7
 800e828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82c:	4770      	bx	lr

0800e82e <VL53LX_f_018>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53LX_p_004,
	VL53LX_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 800e82e:	b580      	push	{r7, lr}
 800e830:	b088      	sub	sp, #32
 800e832:	af00      	add	r7, sp, #0
 800e834:	60ba      	str	r2, [r7, #8]
 800e836:	461a      	mov	r2, r3
 800e838:	4603      	mov	r3, r0
 800e83a:	81fb      	strh	r3, [r7, #14]
 800e83c:	460b      	mov	r3, r1
 800e83e:	81bb      	strh	r3, [r7, #12]
 800e840:	4613      	mov	r3, r2
 800e842:	80fb      	strh	r3, [r7, #6]
	VL53LX_Error     status = VL53LX_ERROR_NONE;
 800e844:	2300      	movs	r3, #0
 800e846:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 800e848:	2300      	movs	r3, #0
 800e84a:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 800e84c:	2300      	movs	r3, #0
 800e84e:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 800e850:	2300      	movs	r3, #0
 800e852:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 800e854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e856:	89fa      	ldrh	r2, [r7, #14]
 800e858:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 800e85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85c:	89ba      	ldrh	r2, [r7, #12]
 800e85e:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 800e860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e862:	68ba      	ldr	r2, [r7, #8]
 800e864:	619a      	str	r2, [r3, #24]
	pdata->VL53LX_p_004 = VL53LX_p_004;
 800e866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e868:	88fa      	ldrh	r2, [r7, #6]
 800e86a:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 800e86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e86e:	8a5b      	ldrh	r3, [r3, #18]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d101      	bne.n	800e878 <VL53LX_f_018+0x4a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800e874:	23f1      	movs	r3, #241	; 0xf1
 800e876:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 800e878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e87a:	699b      	ldr	r3, [r3, #24]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d101      	bne.n	800e884 <VL53LX_f_018+0x56>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800e880:	23f1      	movs	r3, #241	; 0xf1
 800e882:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 800e884:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d16f      	bne.n	800e96c <VL53LX_f_018+0x13e>



		pll_period_us =
			VL53LX_calc_pll_period_us(pdata->fast_osc_frequency);
 800e88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e88e:	8a5b      	ldrh	r3, [r3, #18]
 800e890:	4618      	mov	r0, r3
 800e892:	f7fd faa6 	bl	800bde2 <VL53LX_calc_pll_period_us>
 800e896:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 800e898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e89a:	699b      	ldr	r3, [r3, #24]
 800e89c:	3301      	adds	r3, #1
 800e89e:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 800e8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a2:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53LX_duration_maths(
 800e8a4:	4619      	mov	r1, r3
 800e8a6:	693b      	ldr	r3, [r7, #16]
 800e8a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e8ac:	6978      	ldr	r0, [r7, #20]
 800e8ae:	f7fd faaf 	bl	800be10 <VL53LX_duration_maths>
 800e8b2:	4602      	mov	r2, r0
 800e8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b6:	61da      	str	r2, [r3, #28]
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53LX_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53LX_p_029) << 4,
 800e8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ba:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53LX_duration_maths(
 800e8bc:	0119      	lsls	r1, r3, #4
 800e8be:	693b      	ldr	r3, [r7, #16]
 800e8c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e8c4:	6978      	ldr	r0, [r7, #20]
 800e8c6:	f7fd faa3 	bl	800be10 <VL53LX_duration_maths>
 800e8ca:	4602      	mov	r2, r0
 800e8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ce:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800e8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
 800e8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d6:	69db      	ldr	r3, [r3, #28]
 800e8d8:	4619      	mov	r1, r3
 800e8da:	4610      	mov	r0, r2
 800e8dc:	f7fd fd01 	bl	800c2e2 <VL53LX_rate_maths>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	461a      	mov	r2, r3
 800e8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e6:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800e8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
 800e8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ee:	6a1b      	ldr	r3, [r3, #32]
 800e8f0:	4619      	mov	r1, r3
 800e8f2:	4610      	mov	r0, r2
 800e8f4:	f7fd fcf5 	bl	800c2e2 <VL53LX_rate_maths>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	461a      	mov	r2, r3
 800e8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8fe:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_016,
 800e900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
 800e904:	461a      	mov	r2, r3
 800e906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e908:	6a1b      	ldr	r3, [r3, #32]
 800e90a:	4619      	mov	r1, r3
 800e90c:	4610      	mov	r0, r2
 800e90e:	f7fd fce8 	bl	800c2e2 <VL53LX_rate_maths>
 800e912:	4603      	mov	r3, r0
 800e914:	461a      	mov	r2, r3
 800e916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e918:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 800e91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e91c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800e91e:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 800e920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e922:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		count_rate_total =
 800e924:	4413      	add	r3, r2
 800e926:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 800e928:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e92c:	2b01      	cmp	r3, #1
 800e92e:	d905      	bls.n	800e93c <VL53LX_f_018+0x10e>
			count_rate_total /= histo_merge_nb;
 800e930:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e934:	69ba      	ldr	r2, [r7, #24]
 800e936:	fbb2 f3f3 	udiv	r3, r2, r3
 800e93a:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53LX_rate_per_spad_maths(
 800e93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e93e:	8ada      	ldrh	r2, [r3, #22]
 800e940:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e944:	69b9      	ldr	r1, [r7, #24]
 800e946:	2006      	movs	r0, #6
 800e948:	f7fd fd10 	bl	800c36c <VL53LX_rate_per_spad_maths>
 800e94c:	4603      	mov	r3, r0
 800e94e:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 800e950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e952:	86da      	strh	r2, [r3, #54]	; 0x36
					 0xFFFF);



		pdata->VL53LX_p_009   =
			VL53LX_events_per_spad_maths(
 800e954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e956:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e95a:	8ad9      	ldrh	r1, [r3, #22]
 800e95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e95e:	69db      	ldr	r3, [r3, #28]
 800e960:	461a      	mov	r2, r3
 800e962:	f7fd faaf 	bl	800bec4 <VL53LX_events_per_spad_maths>
 800e966:	4602      	mov	r2, r0
		pdata->VL53LX_p_009   =
 800e968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e96a:	639a      	str	r2, [r3, #56]	; 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 800e96c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e970:	4618      	mov	r0, r3
 800e972:	3720      	adds	r7, #32
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}

0800e978 <VL53LX_f_019>:

void VL53LX_f_019(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53LX_range_data_t *pdata)
{
 800e978:	b590      	push	{r4, r7, lr}
 800e97a:	b085      	sub	sp, #20
 800e97c:	af02      	add	r7, sp, #8
 800e97e:	4603      	mov	r3, r0
 800e980:	603a      	str	r2, [r7, #0]
 800e982:	80fb      	strh	r3, [r7, #6]
 800e984:	460b      	mov	r3, r1
 800e986:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53LX_range_maths(
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	8a58      	ldrh	r0, [r3, #18]
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	8a9c      	ldrh	r4, [r3, #20]
 800e994:	88fb      	ldrh	r3, [r7, #6]
 800e996:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e99a:	9201      	str	r2, [sp, #4]
 800e99c:	9300      	str	r3, [sp, #0]
 800e99e:	2300      	movs	r3, #0
 800e9a0:	4622      	mov	r2, r4
 800e9a2:	f7fd fd17 	bl	800c3d4 <VL53LX_range_maths>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53LX_range_maths(
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	8a58      	ldrh	r0, [r3, #18]
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	8a9c      	ldrh	r4, [r3, #20]
 800e9be:	88fb      	ldrh	r3, [r7, #6]
 800e9c0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e9c4:	9201      	str	r2, [sp, #4]
 800e9c6:	9300      	str	r3, [sp, #0]
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	4622      	mov	r2, r4
 800e9cc:	f7fd fd02 	bl	800c3d4 <VL53LX_range_maths>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53LX_range_maths(
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	8a58      	ldrh	r0, [r3, #18]
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	8a9c      	ldrh	r4, [r3, #20]
 800e9e8:	88fb      	ldrh	r3, [r7, #6]
 800e9ea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e9ee:	9201      	str	r2, [sp, #4]
 800e9f0:	9300      	str	r3, [sp, #0]
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	4622      	mov	r2, r4
 800e9f6:	f7fd fced 	bl	800c3d4 <VL53LX_range_maths>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 800ea04:	bf00      	nop
 800ea06:	370c      	adds	r7, #12
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd90      	pop	{r4, r7, pc}

0800ea0c <VL53LX_f_005>:

void  VL53LX_f_005(
	VL53LX_histogram_bin_data_t   *pxtalk,
	VL53LX_histogram_bin_data_t   *pbins,
	VL53LX_histogram_bin_data_t   *pxtalk_realigned)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b086      	sub	sp, #24
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	60f8      	str	r0, [r7, #12]
 800ea14:	60b9      	str	r1, [r7, #8]
 800ea16:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 800ea18:	2300      	movs	r3, #0
 800ea1a:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 800ea20:	2300      	movs	r3, #0
 800ea22:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 800ea24:	2300      	movs	r3, #0
 800ea26:	757b      	strb	r3, [r7, #21]





	memcpy(
 800ea28:	22ac      	movs	r2, #172	; 0xac
 800ea2a:	68b9      	ldr	r1, [r7, #8]
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f006 f8d9 	bl	8014be4 <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53LX_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800ea32:	2300      	movs	r3, #0
 800ea34:	75fb      	strb	r3, [r7, #23]
 800ea36:	e008      	b.n	800ea4a <VL53LX_f_005+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 800ea38:	7dfa      	ldrb	r2, [r7, #23]
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	3206      	adds	r2, #6
 800ea3e:	2100      	movs	r1, #0
 800ea40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800ea44:	7dfb      	ldrb	r3, [r7, #23]
 800ea46:	3301      	adds	r3, #1
 800ea48:	75fb      	strb	r3, [r7, #23]
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	7a5b      	ldrb	r3, [r3, #9]
 800ea4e:	7dfa      	ldrb	r2, [r7, #23]
 800ea50:	429a      	cmp	r2, r3
 800ea52:	d3f1      	bcc.n	800ea38 <VL53LX_f_005+0x2c>



	bin_offset =  VL53LX_f_030(
 800ea54:	68f9      	ldr	r1, [r7, #12]
 800ea56:	68b8      	ldr	r0, [r7, #8]
 800ea58:	f000 f878 	bl	800eb4c <VL53LX_f_030>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53LX_p_021 < pbins->VL53LX_p_021)
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	7a9a      	ldrb	r2, [r3, #10]
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	7a9b      	ldrb	r3, [r3, #10]
 800ea68:	429a      	cmp	r2, r3
 800ea6a:	d203      	bcs.n	800ea74 <VL53LX_f_005+0x68>
		min_bins = pxtalk->VL53LX_p_021;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	7a9b      	ldrb	r3, [r3, #10]
 800ea70:	75bb      	strb	r3, [r7, #22]
 800ea72:	e002      	b.n	800ea7a <VL53LX_f_005+0x6e>
	else
		min_bins = pbins->VL53LX_p_021;
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	7a9b      	ldrb	r3, [r3, #10]
 800ea78:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	75fb      	strb	r3, [r7, #23]
 800ea7e:	e05c      	b.n	800eb3a <VL53LX_f_005+0x12e>



		if (bin_offset >= 0)
 800ea80:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	db0f      	blt.n	800eaa8 <VL53LX_f_005+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800ea88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ea8c:	461a      	mov	r2, r3
 800ea8e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800ea92:	4413      	add	r3, r2
				% (int8_t)pbins->VL53LX_p_021;
 800ea94:	68ba      	ldr	r2, [r7, #8]
 800ea96:	7a92      	ldrb	r2, [r2, #10]
 800ea98:	b252      	sxtb	r2, r2
 800ea9a:	fb93 f1f2 	sdiv	r1, r3, r2
 800ea9e:	fb02 f201 	mul.w	r2, r2, r1
 800eaa2:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800eaa4:	757b      	strb	r3, [r7, #21]
 800eaa6:	e013      	b.n	800ead0 <VL53LX_f_005+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	7a9b      	ldrb	r3, [r3, #10]
 800eaac:	b25b      	sxtb	r3, r3
 800eaae:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 800eab0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eab4:	4619      	mov	r1, r3
 800eab6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800eaba:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800eabc:	4413      	add	r3, r2
					% (int8_t)pbins->VL53LX_p_021;
 800eabe:	68ba      	ldr	r2, [r7, #8]
 800eac0:	7a92      	ldrb	r2, [r2, #10]
 800eac2:	b252      	sxtb	r2, r2
 800eac4:	fb93 f1f2 	sdiv	r1, r3, r2
 800eac8:	fb02 f201 	mul.w	r2, r2, r1
 800eacc:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800eace:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 800ead0:	7d7b      	ldrb	r3, [r7, #21]
 800ead2:	461a      	mov	r2, r3
 800ead4:	68bb      	ldr	r3, [r7, #8]
 800ead6:	3206      	adds	r2, #6
 800ead8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 800eadc:	7df9      	ldrb	r1, [r7, #23]
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	3106      	adds	r1, #6
 800eae2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 800eae6:	429a      	cmp	r2, r3
 800eae8:	dd12      	ble.n	800eb10 <VL53LX_f_005+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 800eaea:	7d7b      	ldrb	r3, [r7, #21]
 800eaec:	461a      	mov	r2, r3
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	3206      	adds	r2, #6
 800eaf2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 800eaf6:	7df9      	ldrb	r1, [r7, #23]
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	3106      	adds	r1, #6
 800eafc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 800eb00:	7d79      	ldrb	r1, [r7, #21]
 800eb02:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 800eb04:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	1d82      	adds	r2, r0, #6
 800eb0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800eb0e:	e006      	b.n	800eb1e <VL53LX_f_005+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 800eb10:	7d7b      	ldrb	r3, [r7, #21]
 800eb12:	461a      	mov	r2, r3
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	3206      	adds	r2, #6
 800eb18:	2100      	movs	r1, #0
 800eb1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 800eb1e:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800eb20:	7d7b      	ldrb	r3, [r7, #21]
 800eb22:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	3206      	adds	r2, #6
 800eb28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	1d82      	adds	r2, r0, #6
 800eb30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 800eb34:	7dfb      	ldrb	r3, [r7, #23]
 800eb36:	3301      	adds	r3, #1
 800eb38:	75fb      	strb	r3, [r7, #23]
 800eb3a:	7dfa      	ldrb	r2, [r7, #23]
 800eb3c:	7dbb      	ldrb	r3, [r7, #22]
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	d39e      	bcc.n	800ea80 <VL53LX_f_005+0x74>
	}



	LOG_FUNCTION_END(0);
}
 800eb42:	bf00      	nop
 800eb44:	bf00      	nop
 800eb46:	3718      	adds	r7, #24
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <VL53LX_f_030>:


int8_t  VL53LX_f_030(
	VL53LX_histogram_bin_data_t   *pdata1,
	VL53LX_histogram_bin_data_t   *pdata2)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b086      	sub	sp, #24
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
 800eb54:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 800eb56:	2300      	movs	r3, #0
 800eb58:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 800eb5e:	2300      	movs	r3, #0
 800eb60:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 800eb62:	2300      	movs	r3, #0
 800eb64:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata1->VL53LX_p_005);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f7fd fd0b 	bl	800c588 <VL53LX_decode_vcsel_period>
 800eb72:	4603      	mov	r3, r0
	period = 2048 *
 800eb74:	02db      	lsls	r3, r3, #11
 800eb76:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d00a      	beq.n	800eb94 <VL53LX_f_030+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		remapped_phase =
 800eb84:	68ba      	ldr	r2, [r7, #8]
 800eb86:	fbb3 f2f2 	udiv	r2, r3, r2
 800eb8a:	68b9      	ldr	r1, [r7, #8]
 800eb8c:	fb01 f202 	mul.w	r2, r1, r2
 800eb90:	1a9b      	subs	r3, r3, r2
 800eb92:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800eb9a:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 800eb9c:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 800eb9e:	1ad3      	subs	r3, r2, r3
 800eba0:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	dd09      	ble.n	800ebbc <VL53LX_f_030+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	da01      	bge.n	800ebb6 <VL53LX_f_030+0x6a>
 800ebb2:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800ebb6:	12db      	asrs	r3, r3, #11
 800ebb8:	75fb      	strb	r3, [r7, #23]
 800ebba:	e008      	b.n	800ebce <VL53LX_f_030+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	da01      	bge.n	800ebca <VL53LX_f_030+0x7e>
 800ebc6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800ebca:	12db      	asrs	r3, r3, #11
 800ebcc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 800ebce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3718      	adds	r7, #24
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}

0800ebda <VL53LX_f_031>:


VL53LX_Error  VL53LX_f_031(
	VL53LX_histogram_bin_data_t   *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 800ebda:	b580      	push	{r7, lr}
 800ebdc:	b08e      	sub	sp, #56	; 0x38
 800ebde:	af00      	add	r7, sp, #0
 800ebe0:	6078      	str	r0, [r7, #4]
 800ebe2:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	uint8_t  bin_initial_index[VL53LX_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53LX_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 800ebea:	2300      	movs	r3, #0
 800ebec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bin_seq_length = 0;
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t  repeat_count   = 0;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t  VL53LX_p_032       = 0;
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t  lc       = 0;
 800ec00:	2300      	movs	r3, #0
 800ec02:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t  i       = 0;
 800ec06:	2300      	movs	r3, #0
 800ec08:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53LX_histogram_bin_data_t));
 800ec0c:	22ac      	movs	r2, #172	; 0xac
 800ec0e:	6879      	ldr	r1, [r7, #4]
 800ec10:	6838      	ldr	r0, [r7, #0]
 800ec12:	f005 ffe7 	bl	8014be4 <memcpy>


	podata->VL53LX_p_021 = 0;
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	2200      	movs	r2, #0
 800ec1a:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800ec22:	e00a      	b.n	800ec3a <VL53LX_f_031+0x60>
		podata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE+1;
 800ec24:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ec28:	683a      	ldr	r2, [r7, #0]
 800ec2a:	4413      	add	r3, r2
 800ec2c:	2210      	movs	r2, #16
 800ec2e:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800ec30:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ec34:	3301      	adds	r3, #1
 800ec36:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800ec3a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ec3e:	2b05      	cmp	r3, #5
 800ec40:	d9f0      	bls.n	800ec24 <VL53LX_f_031+0x4a>

	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800ec42:	2300      	movs	r3, #0
 800ec44:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800ec48:	e00b      	b.n	800ec62 <VL53LX_f_031+0x88>
		podata->bin_data[lc] = 0;
 800ec4a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	3206      	adds	r2, #6
 800ec52:	2100      	movs	r1, #0
 800ec54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800ec58:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ec5c:	3301      	adds	r3, #1
 800ec5e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	7a5b      	ldrb	r3, [r3, #9]
 800ec66:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	d3ed      	bcc.n	800ec4a <VL53LX_f_031+0x70>



	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800ec6e:	2300      	movs	r3, #0
 800ec70:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800ec74:	e014      	b.n	800eca0 <VL53LX_f_031+0xc6>
		bin_initial_index[lc] = 0x00;
 800ec76:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ec7a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800ec7e:	4413      	add	r3, r2
 800ec80:	2200      	movs	r2, #0
 800ec82:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 800ec86:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ec8a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800ec8e:	4413      	add	r3, r2
 800ec90:	2200      	movs	r2, #0
 800ec92:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800ec96:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ec9a:	3301      	adds	r3, #1
 800ec9c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800eca0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800eca4:	2b0f      	cmp	r3, #15
 800eca6:	d9e6      	bls.n	800ec76 <VL53LX_f_031+0x9c>
	}




	bin_seq_length = 0x00;
 800eca8:	2300      	movs	r3, #0
 800ecaa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800ecae:	2300      	movs	r3, #0
 800ecb0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800ecb4:	e06c      	b.n	800ed90 <VL53LX_f_031+0x1b6>

		bin_cfg = pidata->bin_seq[lc];
 800ecb6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ecba:	687a      	ldr	r2, [r7, #4]
 800ecbc:	4413      	add	r3, r2
 800ecbe:	7b1b      	ldrb	r3, [r3, #12]
 800ecc0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 800ecc4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ecc8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800eccc:	4413      	add	r3, r2
 800ecce:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d116      	bne.n	800ed04 <VL53LX_f_031+0x12a>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 800ecd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ecda:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ecde:	0092      	lsls	r2, r2, #2
 800ece0:	b2d2      	uxtb	r2, r2
 800ece2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ece6:	440b      	add	r3, r1
 800ece8:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 800ecec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ecf0:	683a      	ldr	r2, [r7, #0]
 800ecf2:	4413      	add	r3, r2
 800ecf4:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ecf8:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 800ecfa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ecfe:	3301      	adds	r3, #1
 800ed00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

		bin_repeat_count[bin_cfg]++;
 800ed04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ed08:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800ed0c:	441a      	add	r2, r3
 800ed0e:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 800ed12:	3201      	adds	r2, #1
 800ed14:	b2d2      	uxtb	r2, r2
 800ed16:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ed1a:	440b      	add	r3, r1
 800ed1c:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53LX_p_032 = bin_initial_index[bin_cfg];
 800ed20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ed24:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800ed28:	4413      	add	r3, r2
 800ed2a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800ed2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		for (i = 0 ; i < 4 ; i++)
 800ed32:	2300      	movs	r3, #0
 800ed34:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800ed38:	e021      	b.n	800ed7e <VL53LX_f_031+0x1a4>
			podata->bin_data[VL53LX_p_032+i] +=
 800ed3a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800ed3e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800ed42:	441a      	add	r2, r3
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	3206      	adds	r2, #6
 800ed48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 800ed4c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ed50:	009a      	lsls	r2, r3, #2
 800ed52:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800ed56:	441a      	add	r2, r3
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	3206      	adds	r2, #6
 800ed5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53LX_p_032+i] +=
 800ed60:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 800ed64:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800ed68:	4402      	add	r2, r0
 800ed6a:	4419      	add	r1, r3
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	3206      	adds	r2, #6
 800ed70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 800ed74:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800ed78:	3301      	adds	r3, #1
 800ed7a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800ed7e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800ed82:	2b03      	cmp	r3, #3
 800ed84:	d9d9      	bls.n	800ed3a <VL53LX_f_031+0x160>
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800ed86:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ed8a:	3301      	adds	r3, #1
 800ed8c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800ed90:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ed94:	2b05      	cmp	r3, #5
 800ed96:	d98e      	bls.n	800ecb6 <VL53LX_f_031+0xdc>

	}



	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800ed98:	2300      	movs	r3, #0
 800ed9a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800ed9e:	e023      	b.n	800ede8 <VL53LX_f_031+0x20e>

		bin_cfg = podata->bin_seq[lc];
 800eda0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800eda4:	683a      	ldr	r2, [r7, #0]
 800eda6:	4413      	add	r3, r2
 800eda8:	7b1b      	ldrb	r3, [r3, #12]
 800edaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if (bin_cfg <= VL53LX_MAX_BIN_SEQUENCE_CODE)
 800edae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800edb2:	2b0f      	cmp	r3, #15
 800edb4:	d80d      	bhi.n	800edd2 <VL53LX_f_031+0x1f8>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 800edb6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
			podata->bin_rep[lc] =
 800edba:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
				bin_repeat_count[bin_cfg];
 800edbe:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800edc2:	440a      	add	r2, r1
 800edc4:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 800edc8:	683a      	ldr	r2, [r7, #0]
 800edca:	4413      	add	r3, r2
 800edcc:	460a      	mov	r2, r1
 800edce:	749a      	strb	r2, [r3, #18]
 800edd0:	e005      	b.n	800edde <VL53LX_f_031+0x204>
		else
			podata->bin_rep[lc] = 0;
 800edd2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800edd6:	683a      	ldr	r2, [r7, #0]
 800edd8:	4413      	add	r3, r2
 800edda:	2200      	movs	r2, #0
 800eddc:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800edde:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ede2:	3301      	adds	r3, #1
 800ede4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800ede8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800edec:	2b05      	cmp	r3, #5
 800edee:	d9d7      	bls.n	800eda0 <VL53LX_f_031+0x1c6>
	}

	podata->VL53LX_p_021 = bin_seq_length * 4;
 800edf0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800edf4:	009b      	lsls	r3, r3, #2
 800edf6:	b2da      	uxtb	r2, r3
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800edfc:	2300      	movs	r3, #0
 800edfe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800ee02:	e052      	b.n	800eeaa <VL53LX_f_031+0x2d0>

		repeat_count = (int32_t)bin_repeat_count[lc];
 800ee04:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ee08:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800ee0c:	4413      	add	r3, r2
 800ee0e:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800ee12:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (repeat_count > 0) {
 800ee14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	dd42      	ble.n	800eea0 <VL53LX_f_031+0x2c6>

			VL53LX_p_032 = bin_initial_index[lc];
 800ee1a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ee1e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800ee22:	4413      	add	r3, r2
 800ee24:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800ee28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			for (i = 0 ; i < 4 ; i++) {
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800ee32:	e031      	b.n	800ee98 <VL53LX_f_031+0x2be>
				podata->bin_data[VL53LX_p_032+i] +=
 800ee34:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800ee38:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800ee3c:	441a      	add	r2, r3
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	3206      	adds	r2, #6
 800ee42:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 800ee46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee48:	0fda      	lsrs	r2, r3, #31
 800ee4a:	4413      	add	r3, r2
 800ee4c:	105b      	asrs	r3, r3, #1
 800ee4e:	4618      	mov	r0, r3
				podata->bin_data[VL53LX_p_032+i] +=
 800ee50:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800ee54:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800ee58:	441a      	add	r2, r3
 800ee5a:	4401      	add	r1, r0
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	3206      	adds	r2, #6
 800ee60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53LX_p_032+i] /=
 800ee64:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800ee68:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800ee6c:	441a      	add	r2, r3
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	3206      	adds	r2, #6
 800ee72:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ee76:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800ee7a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800ee7e:	441a      	add	r2, r3
 800ee80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee82:	fb91 f1f3 	sdiv	r1, r1, r3
 800ee86:	683b      	ldr	r3, [r7, #0]
 800ee88:	3206      	adds	r2, #6
 800ee8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 800ee8e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800ee92:	3301      	adds	r3, #1
 800ee94:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800ee98:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800ee9c:	2b03      	cmp	r3, #3
 800ee9e:	d9c9      	bls.n	800ee34 <VL53LX_f_031+0x25a>
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800eea0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800eea4:	3301      	adds	r3, #1
 800eea6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800eeaa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800eeae:	2b0f      	cmp	r3, #15
 800eeb0:	d9a8      	bls.n	800ee04 <VL53LX_f_031+0x22a>
		}
	}



	podata->number_of_ambient_bins = 0;
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 800eeb8:	7bfb      	ldrb	r3, [r7, #15]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d102      	bne.n	800eec4 <VL53LX_f_031+0x2ea>
		(bin_repeat_count[15] > 0))
 800eebe:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d002      	beq.n	800eeca <VL53LX_f_031+0x2f0>
		podata->number_of_ambient_bins = 4;
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	2204      	movs	r2, #4
 800eec8:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 800eeca:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
}
 800eece:	4618      	mov	r0, r3
 800eed0:	3738      	adds	r7, #56	; 0x38
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}

0800eed6 <VL53LX_hist_process_data>:
	VL53LX_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53LX_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 800eed6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eed8:	b0cb      	sub	sp, #300	; 0x12c
 800eeda:	af06      	add	r7, sp, #24
 800eedc:	f107 040c 	add.w	r4, r7, #12
 800eee0:	6020      	str	r0, [r4, #0]
 800eee2:	f107 0008 	add.w	r0, r7, #8
 800eee6:	6001      	str	r1, [r0, #0]
 800eee8:	1d39      	adds	r1, r7, #4
 800eeea:	600a      	str	r2, [r1, #0]
 800eeec:	463a      	mov	r2, r7
 800eeee:	6013      	str	r3, [r2, #0]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800eef0:	2300      	movs	r3, #0
 800eef2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	VL53LX_hist_gen3_algo_private_data_t  *palgo_gen3 =
 800eef6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eefa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			(VL53LX_hist_gen3_algo_private_data_t *) pArea1;
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered4 =
 800eefe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ef02:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			(VL53LX_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53LX_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53LX_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 800ef06:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800ef0a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						&dmax_algo_gen3;

	VL53LX_histogram_bin_data_t             bins_averaged;
	VL53LX_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 800ef0e:	f107 0318 	add.w	r3, r7, #24
 800ef12:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	VL53LX_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 800ef16:	2300      	movs	r3, #0
 800ef18:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint8_t  xtalk_enable                  = 0;
 800ef20:	2300      	movs	r3, #0
 800ef22:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t  r                             = 0;
 800ef26:	2300      	movs	r3, #0
 800ef28:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t  t                             = 0;
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 800ef32:	2300      	movs	r3, #0
 800ef34:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0


	int16_t  delta_mm                      = 0;
 800ef38:	2300      	movs	r3, #0
 800ef3a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	LOG_FUNCTION_START("");



	VL53LX_f_031(
 800ef3e:	463b      	mov	r3, r7
 800ef40:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800ef44:	6818      	ldr	r0, [r3, #0]
 800ef46:	f7ff fe48 	bl	800ebda <VL53LX_f_031>



	VL53LX_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53LX_p_021,
 800ef4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ef4e:	7a9b      	ldrb	r3, [r3, #10]
	VL53LX_init_histogram_bin_data_struct(
 800ef50:	b299      	uxth	r1, r3
 800ef52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ef56:	3348      	adds	r3, #72	; 0x48
 800ef58:	461a      	mov	r2, r3
 800ef5a:	2000      	movs	r0, #0
 800ef5c:	f7fd fb65 	bl	800c62a <VL53LX_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
 800ef60:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800ef64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ef68:	3348      	adds	r3, #72	; 0x48
 800ef6a:	4619      	mov	r1, r3
 800ef6c:	4610      	mov	r0, r2
 800ef6e:	f7fd fb1e 	bl	800c5ae <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53LX_ERROR_NONE) &&
 800ef72:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d12d      	bne.n	800efd6 <VL53LX_hist_process_data+0x100>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800ef7a:	1d3b      	adds	r3, r7, #4
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d027      	beq.n	800efd6 <VL53LX_hist_process_data+0x100>
		status =
		VL53LX_f_032(
 800ef86:	1d3b      	adds	r3, r7, #4
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800ef8c:	1d3b      	adds	r3, r7, #4
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	; 0x30
 800ef94:	1d3b      	adds	r3, r7, #4
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	; 0x32
 800ef9c:	463b      	mov	r3, r7
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800efa4:	463a      	mov	r2, r7
 800efa6:	6812      	ldr	r2, [r2, #0]
 800efa8:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 800efac:	4639      	mov	r1, r7
 800efae:	6809      	ldr	r1, [r1, #0]
 800efb0:	f891 10a9 	ldrb.w	r1, [r1, #169]	; 0xa9
 800efb4:	f107 0014 	add.w	r0, r7, #20
 800efb8:	9004      	str	r0, [sp, #16]
 800efba:	9103      	str	r1, [sp, #12]
 800efbc:	9202      	str	r2, [sp, #8]
 800efbe:	9301      	str	r3, [sp, #4]
 800efc0:	2300      	movs	r3, #0
 800efc2:	9300      	str	r3, [sp, #0]
 800efc4:	2300      	movs	r3, #0
 800efc6:	4632      	mov	r2, r6
 800efc8:	4629      	mov	r1, r5
 800efca:	4620      	mov	r0, r4
 800efcc:	f002 f8bf 	bl	801114e <VL53LX_f_032>
 800efd0:	4603      	mov	r3, r0
 800efd2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53LX_ERROR_NONE) &&
 800efd6:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d112      	bne.n	800f004 <VL53LX_hist_process_data+0x12e>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800efde:	1d3b      	adds	r3, r7, #4
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d00c      	beq.n	800f004 <VL53LX_hist_process_data+0x12e>
		status =
			VL53LX_f_033(
 800efea:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800efee:	697a      	ldr	r2, [r7, #20]
 800eff0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eff4:	3348      	adds	r3, #72	; 0x48
 800eff6:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800effa:	f002 faab 	bl	8011554 <VL53LX_f_033>
 800effe:	4603      	mov	r3, r0
 800f000:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 800f004:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f008:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	presults->xmonitor.total_periods_elapsed =
 800f00c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f010:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	presults->xmonitor.VL53LX_p_004 =
		pbins_averaged->result__dss_actual_effective_spads;
 800f014:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f018:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
	presults->xmonitor.VL53LX_p_004 =
 800f01c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f020:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 800f024:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f028:	2200      	movs	r2, #0
 800f02a:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	presults->xmonitor.VL53LX_p_009     = 0;
 800f02e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f032:	2200      	movs	r2, #0
 800f034:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 800f038:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f03c:	2200      	movs	r2, #0
 800f03e:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	presults->xmonitor.range_status = VL53LX_DEVICEERROR_NOUPDATE;
 800f042:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f046:	2200      	movs	r2, #0
 800f048:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e



	xtalk_enable = 0;
 800f04c:	2300      	movs	r3, #0
 800f04e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800f052:	1d3b      	adds	r3, r7, #4
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d002      	beq.n	800f064 <VL53LX_hist_process_data+0x18e>
		xtalk_enable = 1;
 800f05e:	2301      	movs	r3, #1
 800f060:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 800f064:	2300      	movs	r3, #0
 800f066:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800f06a:	e0ef      	b.n	800f24c <VL53LX_hist_process_data+0x376>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 800f06c:	1d3b      	adds	r3, r7, #4
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800f074:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28



		status =
		VL53LX_f_025(
 800f078:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f07c:	3348      	adds	r3, #72	; 0x48
 800f07e:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800f082:	7814      	ldrb	r4, [r2, #0]
 800f084:	1d3a      	adds	r2, r7, #4
 800f086:	f107 0108 	add.w	r1, r7, #8
 800f08a:	f107 000c 	add.w	r0, r7, #12
 800f08e:	9405      	str	r4, [sp, #20]
 800f090:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 800f094:	9404      	str	r4, [sp, #16]
 800f096:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 800f09a:	9403      	str	r4, [sp, #12]
 800f09c:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 800f0a0:	9402      	str	r4, [sp, #8]
 800f0a2:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 800f0a6:	9401      	str	r4, [sp, #4]
 800f0a8:	9300      	str	r3, [sp, #0]
 800f0aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f0ae:	6812      	ldr	r2, [r2, #0]
 800f0b0:	6809      	ldr	r1, [r1, #0]
 800f0b2:	6800      	ldr	r0, [r0, #0]
 800f0b4:	f7fe fec1 	bl	800de3a <VL53LX_f_025>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53LX_ERROR_NONE && r == 0))
 800f0be:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	f040 80bc 	bne.w	800f240 <VL53LX_hist_process_data+0x36a>
 800f0c8:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	f040 80b7 	bne.w	800f240 <VL53LX_hist_process_data+0x36a>
			continue;



		if (presults->active_results == 0) {
 800f0d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f0d6:	7c9b      	ldrb	r3, [r3, #18]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d110      	bne.n	800f0fe <VL53LX_hist_process_data+0x228>
			pdata = &(presults->VL53LX_p_003[0]);
 800f0dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f0e0:	3314      	adds	r3, #20
 800f0e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53LX_p_034;
 800f0e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f0ea:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 800f0ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f0f0:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53LX_p_004 =
				pdmax_algo_gen3->VL53LX_p_004;
 800f0f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f0f6:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53LX_p_004 =
 800f0f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f0fc:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 800f0fe:	1d3b      	adds	r3, r7, #4
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 800f104:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 800f108:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f10c:	781b      	ldrb	r3, [r3, #0]
 800f10e:	461a      	mov	r2, r3
 800f110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f114:	fb02 f303 	mul.w	r3, r2, r3
 800f118:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 800f11c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f120:	011b      	lsls	r3, r3, #4
 800f122:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 800f126:	2300      	movs	r3, #0
 800f128:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 800f12c:	e07f      	b.n	800f22e <VL53LX_hist_process_data+0x358>

			pdata = &(presults->VL53LX_p_003[t]);
 800f12e:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 800f132:	224c      	movs	r2, #76	; 0x4c
 800f134:	fb02 f303 	mul.w	r3, r2, r3
 800f138:	3310      	adds	r3, #16
 800f13a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800f13e:	4413      	add	r3, r2
 800f140:	3304      	adds	r3, #4
 800f142:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 800f146:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f14a:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800f14e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f152:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800f156:	429a      	cmp	r2, r3
 800f158:	dd0e      	ble.n	800f178 <VL53LX_hist_process_data+0x2a2>
				delta_mm =
					pdata->max_range_mm -
 800f15a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f15e:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800f162:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 800f164:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f168:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800f16c:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 800f16e:	1ad3      	subs	r3, r2, r3
 800f170:	b29b      	uxth	r3, r3
				delta_mm =
 800f172:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800f176:	e00d      	b.n	800f194 <VL53LX_hist_process_data+0x2be>
			else
				delta_mm =
					pdata->min_range_mm -
 800f178:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f17c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800f180:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 800f182:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f186:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800f18a:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 800f18c:	1ad3      	subs	r3, r2, r3
 800f18e:	b29b      	uxth	r3, r3
				delta_mm =
 800f190:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 800f194:	1d3b      	adds	r3, r7, #4
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			XtalkDetectMaxSigma =
 800f19a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 800f19e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f1a2:	781b      	ldrb	r3, [r3, #0]
 800f1a4:	461a      	mov	r2, r3
 800f1a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f1aa:	fb02 f303 	mul.w	r3, r2, r3
 800f1ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma <<= 5;
 800f1b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f1b6:	015b      	lsls	r3, r3, #5
 800f1b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			if (pdata->median_range_mm  >
 800f1bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f1c0:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800f1c4:	1d3b      	adds	r3, r7, #4
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
			if (pdata->median_range_mm  >
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	dd29      	ble.n	800f224 <VL53LX_hist_process_data+0x34e>
			pdata->median_range_mm  <
 800f1d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f1d4:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800f1d8:	1d3b      	adds	r3, r7, #4
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	da1f      	bge.n	800f224 <VL53LX_hist_process_data+0x34e>
			pdata->VL53LX_p_009 <
 800f1e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800f1ea:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800f1ee:	429a      	cmp	r2, r3
 800f1f0:	d918      	bls.n	800f224 <VL53LX_hist_process_data+0x34e>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800f1f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f1f6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800f1f8:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 800f1fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f1fe:	4293      	cmp	r3, r2
 800f200:	d910      	bls.n	800f224 <VL53LX_hist_process_data+0x34e>
			delta_mm <
 800f202:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 800f206:	1d3a      	adds	r2, r7, #4
 800f208:	6812      	ldr	r2, [r2, #0]
 800f20a:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800f20c:	4293      	cmp	r3, r2
 800f20e:	da09      	bge.n	800f224 <VL53LX_hist_process_data+0x34e>



				memcpy(
					&(presults->xmonitor),
 800f210:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f214:	f503 73a2 	add.w	r3, r3, #324	; 0x144
				memcpy(
 800f218:	224c      	movs	r2, #76	; 0x4c
 800f21a:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800f21e:	4618      	mov	r0, r3
 800f220:	f005 fce0 	bl	8014be4 <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 800f224:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 800f228:	3301      	adds	r3, #1
 800f22a:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 800f22e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f232:	7c9b      	ldrb	r3, [r3, #18]
 800f234:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 800f238:	429a      	cmp	r2, r3
 800f23a:	f4ff af78 	bcc.w	800f12e <VL53LX_hist_process_data+0x258>
 800f23e:	e000      	b.n	800f242 <VL53LX_hist_process_data+0x36c>
			continue;
 800f240:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 800f242:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800f246:	3301      	adds	r3, #1
 800f248:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800f24c:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800f250:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800f254:	429a      	cmp	r2, r3
 800f256:	f67f af09 	bls.w	800f06c <VL53LX_hist_process_data+0x196>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 800f25a:	1d3b      	adds	r3, r7, #4
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 800f262:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	LOG_FUNCTION_END(status);

	return status;
 800f266:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 800f26a:	4618      	mov	r0, r3
 800f26c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800f270:	46bd      	mov	sp, r7
 800f272:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f274 <VL53LX_nvm_enable>:

VL53LX_Error VL53LX_nvm_enable(
	VL53LX_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b086      	sub	sp, #24
 800f278:	af00      	add	r7, sp, #0
 800f27a:	60f8      	str	r0, [r7, #12]
 800f27c:	460b      	mov	r3, r1
 800f27e:	607a      	str	r2, [r7, #4]
 800f280:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f282:	2300      	movs	r3, #0
 800f284:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53LX_ERROR_NONE)
 800f286:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d104      	bne.n	800f298 <VL53LX_nvm_enable+0x24>
		status = VL53LX_disable_firmware(Dev);
 800f28e:	68f8      	ldr	r0, [r7, #12]
 800f290:	f7f9 fe88 	bl	8008fa4 <VL53LX_disable_firmware>
 800f294:	4603      	mov	r3, r0
 800f296:	75fb      	strb	r3, [r7, #23]




	if (status == VL53LX_ERROR_NONE)
 800f298:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d104      	bne.n	800f2aa <VL53LX_nvm_enable+0x36>
		status = VL53LX_enable_powerforce(Dev);
 800f2a0:	68f8      	ldr	r0, [r7, #12]
 800f2a2:	f7f9 feb0 	bl	8009006 <VL53LX_enable_powerforce>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	75fb      	strb	r3, [r7, #23]



	if (status == VL53LX_ERROR_NONE)
 800f2aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d105      	bne.n	800f2be <VL53LX_nvm_enable+0x4a>
		status = VL53LX_WaitUs(
 800f2b2:	21fa      	movs	r1, #250	; 0xfa
 800f2b4:	68f8      	ldr	r0, [r7, #12]
 800f2b6:	f002 fb9d 	bl	80119f4 <VL53LX_WaitUs>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53LX_ERROR_NONE)
 800f2be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d107      	bne.n	800f2d6 <VL53LX_nvm_enable+0x62>
		status = VL53LX_WrByte(
 800f2c6:	2201      	movs	r2, #1
 800f2c8:	f240 7181 	movw	r1, #1921	; 0x781
 800f2cc:	68f8      	ldr	r0, [r7, #12]
 800f2ce:	f002 fa9d 	bl	801180c <VL53LX_WrByte>
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800f2d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d107      	bne.n	800f2ee <VL53LX_nvm_enable+0x7a>
		status = VL53LX_WrByte(
 800f2de:	2205      	movs	r2, #5
 800f2e0:	f240 6183 	movw	r1, #1667	; 0x683
 800f2e4:	68f8      	ldr	r0, [r7, #12]
 800f2e6:	f002 fa91 	bl	801180c <VL53LX_WrByte>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53LX_ERROR_NONE)
 800f2ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d105      	bne.n	800f302 <VL53LX_nvm_enable+0x8e>
		status = VL53LX_WaitUs(
 800f2f6:	6879      	ldr	r1, [r7, #4]
 800f2f8:	68f8      	ldr	r0, [r7, #12]
 800f2fa:	f002 fb7b 	bl	80119f4 <VL53LX_WaitUs>
 800f2fe:	4603      	mov	r3, r0
 800f300:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53LX_ERROR_NONE)
 800f302:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d107      	bne.n	800f31a <VL53LX_nvm_enable+0xa6>
		status = VL53LX_WrByte(
 800f30a:	2201      	movs	r2, #1
 800f30c:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 800f310:	68f8      	ldr	r0, [r7, #12]
 800f312:	f002 fa7b 	bl	801180c <VL53LX_WrByte>
 800f316:	4603      	mov	r3, r0
 800f318:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53LX_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53LX_ERROR_NONE)
 800f31a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d108      	bne.n	800f334 <VL53LX_nvm_enable+0xc0>
		status = VL53LX_WrWord(
 800f322:	897b      	ldrh	r3, [r7, #10]
 800f324:	461a      	mov	r2, r3
 800f326:	f240 7184 	movw	r1, #1924	; 0x784
 800f32a:	68f8      	ldr	r0, [r7, #12]
 800f32c:	f002 fa98 	bl	8011860 <VL53LX_WrWord>
 800f330:	4603      	mov	r3, r0
 800f332:	75fb      	strb	r3, [r7, #23]
			VL53LX_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 800f334:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800f338:	4618      	mov	r0, r3
 800f33a:	3718      	adds	r7, #24
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}

0800f340 <VL53LX_nvm_read>:
VL53LX_Error VL53LX_nvm_read(
	VL53LX_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b086      	sub	sp, #24
 800f344:	af00      	add	r7, sp, #0
 800f346:	60f8      	str	r0, [r7, #12]
 800f348:	607b      	str	r3, [r7, #4]
 800f34a:	460b      	mov	r3, r1
 800f34c:	72fb      	strb	r3, [r7, #11]
 800f34e:	4613      	mov	r3, r2
 800f350:	72bb      	strb	r3, [r7, #10]


	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800f352:	2300      	movs	r3, #0
 800f354:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 800f356:	2300      	movs	r3, #0
 800f358:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53LX_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 800f35a:	7afb      	ldrb	r3, [r7, #11]
 800f35c:	75bb      	strb	r3, [r7, #22]
 800f35e:	e041      	b.n	800f3e4 <VL53LX_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53LX_ERROR_NONE)
 800f360:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d108      	bne.n	800f37a <VL53LX_nvm_read+0x3a>
			status = VL53LX_WrByte(
 800f368:	7dbb      	ldrb	r3, [r7, #22]
 800f36a:	461a      	mov	r2, r3
 800f36c:	f240 7194 	movw	r1, #1940	; 0x794
 800f370:	68f8      	ldr	r0, [r7, #12]
 800f372:	f002 fa4b 	bl	801180c <VL53LX_WrByte>
 800f376:	4603      	mov	r3, r0
 800f378:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53LX_ERROR_NONE)
 800f37a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d107      	bne.n	800f392 <VL53LX_nvm_read+0x52>
			status = VL53LX_WrByte(
 800f382:	2200      	movs	r2, #0
 800f384:	f240 7183 	movw	r1, #1923	; 0x783
 800f388:	68f8      	ldr	r0, [r7, #12]
 800f38a:	f002 fa3f 	bl	801180c <VL53LX_WrByte>
 800f38e:	4603      	mov	r3, r0
 800f390:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53LX_ERROR_NONE)
 800f392:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d105      	bne.n	800f3a6 <VL53LX_nvm_read+0x66>
			status = VL53LX_WaitUs(
 800f39a:	2105      	movs	r1, #5
 800f39c:	68f8      	ldr	r0, [r7, #12]
 800f39e:	f002 fb29 	bl	80119f4 <VL53LX_WaitUs>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53LX_ERROR_NONE)
 800f3a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d107      	bne.n	800f3be <VL53LX_nvm_read+0x7e>
			status = VL53LX_WrByte(
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	f240 7183 	movw	r1, #1923	; 0x783
 800f3b4:	68f8      	ldr	r0, [r7, #12]
 800f3b6:	f002 fa29 	bl	801180c <VL53LX_WrByte>
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53LX_ERROR_NONE)
 800f3be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d108      	bne.n	800f3d8 <VL53LX_nvm_read+0x98>
			status = VL53LX_ReadMulti(
 800f3c6:	2304      	movs	r3, #4
 800f3c8:	687a      	ldr	r2, [r7, #4]
 800f3ca:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 800f3ce:	68f8      	ldr	r0, [r7, #12]
 800f3d0:	f002 f9e6 	bl	80117a0 <VL53LX_ReadMulti>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	3304      	adds	r3, #4
 800f3dc:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 800f3de:	7dbb      	ldrb	r3, [r7, #22]
 800f3e0:	3301      	adds	r3, #1
 800f3e2:	75bb      	strb	r3, [r7, #22]
 800f3e4:	7dba      	ldrb	r2, [r7, #22]
 800f3e6:	7af9      	ldrb	r1, [r7, #11]
 800f3e8:	7abb      	ldrb	r3, [r7, #10]
 800f3ea:	440b      	add	r3, r1
	for (nvm_addr = start_address;
 800f3ec:	429a      	cmp	r2, r3
 800f3ee:	dbb7      	blt.n	800f360 <VL53LX_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 800f3f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	3718      	adds	r7, #24
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}

0800f3fc <VL53LX_nvm_disable>:


VL53LX_Error VL53LX_nvm_disable(
	VL53LX_DEV    Dev)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b084      	sub	sp, #16
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f404:	2300      	movs	r3, #0
 800f406:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f408:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d107      	bne.n	800f420 <VL53LX_nvm_disable+0x24>
		status = VL53LX_WrByte(
 800f410:	2201      	movs	r2, #1
 800f412:	f240 7183 	movw	r1, #1923	; 0x783
 800f416:	6878      	ldr	r0, [r7, #4]
 800f418:	f002 f9f8 	bl	801180c <VL53LX_WrByte>
 800f41c:	4603      	mov	r3, r0
 800f41e:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800f420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d107      	bne.n	800f438 <VL53LX_nvm_disable+0x3c>
		status = VL53LX_WrByte(
 800f428:	2200      	movs	r2, #0
 800f42a:	f240 7181 	movw	r1, #1921	; 0x781
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f002 f9ec 	bl	801180c <VL53LX_WrByte>
 800f434:	4603      	mov	r3, r0
 800f436:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53LX_ERROR_NONE)
 800f438:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d104      	bne.n	800f44a <VL53LX_nvm_disable+0x4e>
		status = VL53LX_disable_powerforce(Dev);
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	f7f9 fdf2 	bl	800902a <VL53LX_disable_powerforce>
 800f446:	4603      	mov	r3, r0
 800f448:	73fb      	strb	r3, [r7, #15]



	if (status == VL53LX_ERROR_NONE)
 800f44a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d104      	bne.n	800f45c <VL53LX_nvm_disable+0x60>
		status = VL53LX_enable_firmware(Dev);
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	f7f9 fd94 	bl	8008f80 <VL53LX_enable_firmware>
 800f458:	4603      	mov	r3, r0
 800f45a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800f45c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800f460:	4618      	mov	r0, r3
 800f462:	3710      	adds	r7, #16
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}

0800f468 <VL53LX_nvm_decode_optical_centre>:

VL53LX_Error VL53LX_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_optical_centre_t    *pdata)
{
 800f468:	b480      	push	{r7}
 800f46a:	b087      	sub	sp, #28
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	4603      	mov	r3, r0
 800f470:	60b9      	str	r1, [r7, #8]
 800f472:	607a      	str	r2, [r7, #4]
 800f474:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800f476:	2300      	movs	r3, #0
 800f478:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 800f47a:	2300      	movs	r3, #0
 800f47c:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53LX_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 800f47e:	89fb      	ldrh	r3, [r7, #14]
 800f480:	2b03      	cmp	r3, #3
 800f482:	d802      	bhi.n	800f48a <VL53LX_nvm_decode_optical_centre+0x22>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800f484:	f06f 0308 	mvn.w	r3, #8
 800f488:	e018      	b.n	800f4bc <VL53LX_nvm_decode_optical_centre+0x54>


	tmp  = 0x0100;
 800f48a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f48e:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	3302      	adds	r3, #2
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	b29b      	uxth	r3, r3
 800f498:	8afa      	ldrh	r2, [r7, #22]
 800f49a:	1ad3      	subs	r3, r2, r3
 800f49c:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 800f49e:	8afb      	ldrh	r3, [r7, #22]
 800f4a0:	2bff      	cmp	r3, #255	; 0xff
 800f4a2:	d901      	bls.n	800f4a8 <VL53LX_nvm_decode_optical_centre+0x40>
		tmp = 0;
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 800f4a8:	8afb      	ldrh	r3, [r7, #22]
 800f4aa:	b2da      	uxtb	r2, r3
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	78da      	ldrb	r2, [r3, #3]
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	705a      	strb	r2, [r3, #1]

	return status;
 800f4b8:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800f4bc:	4618      	mov	r0, r3
 800f4be:	371c      	adds	r7, #28
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c6:	4770      	bx	lr

0800f4c8 <VL53LX_nvm_decode_cal_peak_rate_map>:

VL53LX_Error VL53LX_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_cal_peak_rate_map_t *pdata)
{
 800f4c8:	b590      	push	{r4, r7, lr}
 800f4ca:	b087      	sub	sp, #28
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	60b9      	str	r1, [r7, #8]
 800f4d2:	607a      	str	r2, [r7, #4]
 800f4d4:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 800f4da:	2300      	movs	r3, #0
 800f4dc:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 800f4de:	2300      	movs	r3, #0
 800f4e0:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53LX_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 800f4e2:	89fb      	ldrh	r3, [r7, #14]
 800f4e4:	2b37      	cmp	r3, #55	; 0x37
 800f4e6:	d802      	bhi.n	800f4ee <VL53LX_nvm_decode_cal_peak_rate_map+0x26>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800f4e8:	f06f 0308 	mvn.w	r3, #8
 800f4ec:	e03e      	b.n	800f56c <VL53LX_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800f4ee:	68b9      	ldr	r1, [r7, #8]
 800f4f0:	2002      	movs	r0, #2
 800f4f2:	f7f9 fc2b 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800f4fe:	68bb      	ldr	r3, [r7, #8]
 800f500:	3302      	adds	r3, #2
 800f502:	4619      	mov	r1, r3
 800f504:	2002      	movs	r0, #2
 800f506:	f7f9 fc21 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 800f50a:	4603      	mov	r3, r0
 800f50c:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 800f516:	099b      	lsrs	r3, r3, #6
 800f518:	b29a      	uxth	r2, r3
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53LX_NVM_PEAK_RATE_MAP_SAMPLES;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	2219      	movs	r2, #25
 800f522:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53LX_NVM_PEAK_RATE_MAP_WIDTH;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	2205      	movs	r2, #5
 800f528:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53LX_NVM_PEAK_RATE_MAP_HEIGHT;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2205      	movs	r2, #5
 800f52e:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	3304      	adds	r3, #4
 800f534:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800f536:	2300      	movs	r3, #0
 800f538:	74fb      	strb	r3, [r7, #19]
 800f53a:	e012      	b.n	800f562 <VL53LX_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 800f53c:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53LX_i2c_decode_uint16_t(2, ptmp);
 800f53e:	6979      	ldr	r1, [r7, #20]
 800f540:	2002      	movs	r0, #2
 800f542:	f7f9 fc03 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 800f546:	4603      	mov	r3, r0
 800f548:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 800f54a:	687a      	ldr	r2, [r7, #4]
 800f54c:	1d23      	adds	r3, r4, #4
 800f54e:	005b      	lsls	r3, r3, #1
 800f550:	4413      	add	r3, r2
 800f552:	460a      	mov	r2, r1
 800f554:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 800f556:	697b      	ldr	r3, [r7, #20]
 800f558:	3302      	adds	r3, #2
 800f55a:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800f55c:	7cfb      	ldrb	r3, [r7, #19]
 800f55e:	3301      	adds	r3, #1
 800f560:	74fb      	strb	r3, [r7, #19]
 800f562:	7cfb      	ldrb	r3, [r7, #19]
 800f564:	2b18      	cmp	r3, #24
 800f566:	d9e9      	bls.n	800f53c <VL53LX_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 800f568:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800f56c:	4618      	mov	r0, r3
 800f56e:	371c      	adds	r7, #28
 800f570:	46bd      	mov	sp, r7
 800f572:	bd90      	pop	{r4, r7, pc}

0800f574 <VL53LX_nvm_decode_additional_offset_cal_data>:

VL53LX_Error VL53LX_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_additional_offset_cal_data_t *pdata)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b086      	sub	sp, #24
 800f578:	af00      	add	r7, sp, #0
 800f57a:	4603      	mov	r3, r0
 800f57c:	60b9      	str	r1, [r7, #8]
 800f57e:	607a      	str	r2, [r7, #4]
 800f580:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800f582:	2300      	movs	r3, #0
 800f584:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 800f586:	89fb      	ldrh	r3, [r7, #14]
 800f588:	2b07      	cmp	r3, #7
 800f58a:	d802      	bhi.n	800f592 <VL53LX_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800f58c:	f06f 0308 	mvn.w	r3, #8
 800f590:	e027      	b.n	800f5e2 <VL53LX_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800f592:	68b9      	ldr	r1, [r7, #8]
 800f594:	2002      	movs	r0, #2
 800f596:	f7f9 fbd9 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 800f59a:	4603      	mov	r3, r0
 800f59c:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	3302      	adds	r3, #2
 800f5a6:	4619      	mov	r1, r3
 800f5a8:	2002      	movs	r0, #2
 800f5aa:	f7f9 fbcf 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800f5b6:	68bb      	ldr	r3, [r7, #8]
 800f5b8:	3304      	adds	r3, #4
 800f5ba:	4619      	mov	r1, r3
 800f5bc:	2002      	movs	r0, #2
 800f5be:	f7f9 fbc5 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	3306      	adds	r3, #6
 800f5ce:	4619      	mov	r1, r3
 800f5d0:	2002      	movs	r0, #2
 800f5d2:	f7f9 fbbb 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	80da      	strh	r2, [r3, #6]

	return status;
 800f5de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	3718      	adds	r7, #24
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}

0800f5ea <VL53LX_nvm_decode_fmt_range_results_data>:

VL53LX_Error VL53LX_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_decoded_nvm_fmt_range_data_t *pdata)
{
 800f5ea:	b580      	push	{r7, lr}
 800f5ec:	b086      	sub	sp, #24
 800f5ee:	af00      	add	r7, sp, #0
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	60b9      	str	r1, [r7, #8]
 800f5f4:	607a      	str	r2, [r7, #4]
 800f5f6:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 800f5fc:	89fb      	ldrh	r3, [r7, #14]
 800f5fe:	2b0f      	cmp	r3, #15
 800f600:	d802      	bhi.n	800f608 <VL53LX_nvm_decode_fmt_range_results_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800f602:	f06f 0308 	mvn.w	r3, #8
 800f606:	e04d      	b.n	800f6a4 <VL53LX_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800f608:	68b9      	ldr	r1, [r7, #8]
 800f60a:	2002      	movs	r0, #2
 800f60c:	f7f9 fb9e 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 800f610:	4603      	mov	r3, r0
 800f612:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 800f618:	68bb      	ldr	r3, [r7, #8]
 800f61a:	789a      	ldrb	r2, [r3, #2]
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	78da      	ldrb	r2, [r3, #3]
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	3304      	adds	r3, #4
 800f62c:	4619      	mov	r1, r3
 800f62e:	2002      	movs	r0, #2
 800f630:	f7f9 fb8c 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 800f634:	4603      	mov	r3, r0
 800f636:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800f63c:	68bb      	ldr	r3, [r7, #8]
 800f63e:	3306      	adds	r3, #6
 800f640:	4619      	mov	r1, r3
 800f642:	2002      	movs	r0, #2
 800f644:	f7f9 fb82 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 800f648:	4603      	mov	r3, r0
 800f64a:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 8);
 800f650:	68bb      	ldr	r3, [r7, #8]
 800f652:	3308      	adds	r3, #8
 800f654:	4619      	mov	r1, r3
 800f656:	2002      	movs	r0, #2
 800f658:	f7f9 fb78 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 800f65c:	4603      	mov	r3, r0
 800f65e:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 10);
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	330a      	adds	r3, #10
 800f668:	4619      	mov	r1, r3
 800f66a:	2002      	movs	r0, #2
 800f66c:	f7f9 fb6e 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 800f670:	4603      	mov	r3, r0
 800f672:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 12);
 800f678:	68bb      	ldr	r3, [r7, #8]
 800f67a:	330c      	adds	r3, #12
 800f67c:	4619      	mov	r1, r3
 800f67e:	2002      	movs	r0, #2
 800f680:	f7f9 fb64 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 800f684:	4603      	mov	r3, r0
 800f686:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 14);
 800f68c:	68bb      	ldr	r3, [r7, #8]
 800f68e:	330e      	adds	r3, #14
 800f690:	4619      	mov	r1, r3
 800f692:	2002      	movs	r0, #2
 800f694:	f7f9 fb5a 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 800f698:	4603      	mov	r3, r0
 800f69a:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	81da      	strh	r2, [r3, #14]

	return status;
 800f6a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3718      	adds	r7, #24
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}

0800f6ac <VL53LX_read_nvm_raw_data>:
VL53LX_Error VL53LX_read_nvm_raw_data(
	VL53LX_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b086      	sub	sp, #24
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	60f8      	str	r0, [r7, #12]
 800f6b4:	607b      	str	r3, [r7, #4]
 800f6b6:	460b      	mov	r3, r1
 800f6b8:	72fb      	strb	r3, [r7, #11]
 800f6ba:	4613      	mov	r3, r2
 800f6bc:	72bb      	strb	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 800f6c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d106      	bne.n	800f6d8 <VL53LX_read_nvm_raw_data+0x2c>
		status = VL53LX_nvm_enable(
 800f6ca:	2232      	movs	r2, #50	; 0x32
 800f6cc:	2104      	movs	r1, #4
 800f6ce:	68f8      	ldr	r0, [r7, #12]
 800f6d0:	f7ff fdd0 	bl	800f274 <VL53LX_nvm_enable>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53LX_NVM_POWER_UP_DELAY_US);



	if (status == VL53LX_ERROR_NONE)
 800f6d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d107      	bne.n	800f6f0 <VL53LX_read_nvm_raw_data+0x44>
		status = VL53LX_nvm_read(
 800f6e0:	7aba      	ldrb	r2, [r7, #10]
 800f6e2:	7af9      	ldrb	r1, [r7, #11]
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	68f8      	ldr	r0, [r7, #12]
 800f6e8:	f7ff fe2a 	bl	800f340 <VL53LX_nvm_read>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53LX_ERROR_NONE)
 800f6f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d104      	bne.n	800f702 <VL53LX_read_nvm_raw_data+0x56>
		status = VL53LX_nvm_disable(Dev);
 800f6f8:	68f8      	ldr	r0, [r7, #12]
 800f6fa:	f7ff fe7f 	bl	800f3fc <VL53LX_nvm_disable>
 800f6fe:	4603      	mov	r3, r0
 800f700:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 800f702:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800f706:	4618      	mov	r0, r3
 800f708:	3718      	adds	r7, #24
 800f70a:	46bd      	mov	sp, r7
 800f70c:	bd80      	pop	{r7, pc}

0800f70e <VL53LX_read_nvm_optical_centre>:


VL53LX_Error VL53LX_read_nvm_optical_centre(
	VL53LX_DEV                        Dev,
	VL53LX_optical_centre_t          *pcentre)
{
 800f70e:	b580      	push	{r7, lr}
 800f710:	b084      	sub	sp, #16
 800f712:	af00      	add	r7, sp, #0
 800f714:	6078      	str	r0, [r7, #4]
 800f716:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f718:	2300      	movs	r3, #0
 800f71a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800f71c:	f107 0308 	add.w	r3, r7, #8
 800f720:	2201      	movs	r2, #1
 800f722:	212e      	movs	r1, #46	; 0x2e
 800f724:	6878      	ldr	r0, [r7, #4]
 800f726:	f7ff ffc1 	bl	800f6ac <VL53LX_read_nvm_raw_data>
 800f72a:	4603      	mov	r3, r0
 800f72c:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f72e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d108      	bne.n	800f748 <VL53LX_read_nvm_optical_centre+0x3a>
		status =
			VL53LX_nvm_decode_optical_centre(
 800f736:	f107 0308 	add.w	r3, r7, #8
 800f73a:	683a      	ldr	r2, [r7, #0]
 800f73c:	4619      	mov	r1, r3
 800f73e:	2004      	movs	r0, #4
 800f740:	f7ff fe92 	bl	800f468 <VL53LX_nvm_decode_optical_centre>
 800f744:	4603      	mov	r3, r0
 800f746:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 800f748:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f74c:	4618      	mov	r0, r3
 800f74e:	3710      	adds	r7, #16
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}

0800f754 <VL53LX_read_nvm_cal_peak_rate_map>:


VL53LX_Error VL53LX_read_nvm_cal_peak_rate_map(
	VL53LX_DEV                           Dev,
	VL53LX_cal_peak_rate_map_t          *pcal_data)
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b092      	sub	sp, #72	; 0x48
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
 800f75c:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f75e:	2300      	movs	r3, #0
 800f760:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800f764:	f107 030c 	add.w	r3, r7, #12
 800f768:	220e      	movs	r2, #14
 800f76a:	2157      	movs	r1, #87	; 0x57
 800f76c:	6878      	ldr	r0, [r7, #4]
 800f76e:	f7ff ff9d 	bl	800f6ac <VL53LX_read_nvm_raw_data>
 800f772:	4603      	mov	r3, r0
 800f774:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f778:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d109      	bne.n	800f794 <VL53LX_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53LX_nvm_decode_cal_peak_rate_map(
 800f780:	f107 030c 	add.w	r3, r7, #12
 800f784:	683a      	ldr	r2, [r7, #0]
 800f786:	4619      	mov	r1, r3
 800f788:	2038      	movs	r0, #56	; 0x38
 800f78a:	f7ff fe9d 	bl	800f4c8 <VL53LX_nvm_decode_cal_peak_rate_map>
 800f78e:	4603      	mov	r3, r0
 800f790:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800f794:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800f798:	4618      	mov	r0, r3
 800f79a:	3748      	adds	r7, #72	; 0x48
 800f79c:	46bd      	mov	sp, r7
 800f79e:	bd80      	pop	{r7, pc}

0800f7a0 <VL53LX_read_nvm_additional_offset_cal_data>:


VL53LX_Error VL53LX_read_nvm_additional_offset_cal_data(
	VL53LX_DEV                           Dev,
	VL53LX_additional_offset_cal_data_t *pcal_data)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b086      	sub	sp, #24
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
 800f7a8:	6039      	str	r1, [r7, #0]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800f7ae:	f107 030c 	add.w	r3, r7, #12
 800f7b2:	2202      	movs	r2, #2
 800f7b4:	2165      	movs	r1, #101	; 0x65
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f7ff ff78 	bl	800f6ac <VL53LX_read_nvm_raw_data>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	75fb      	strb	r3, [r7, #23]
			VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f7c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d108      	bne.n	800f7da <VL53LX_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53LX_nvm_decode_additional_offset_cal_data(
 800f7c8:	f107 030c 	add.w	r3, r7, #12
 800f7cc:	683a      	ldr	r2, [r7, #0]
 800f7ce:	4619      	mov	r1, r3
 800f7d0:	2008      	movs	r0, #8
 800f7d2:	f7ff fecf 	bl	800f574 <VL53LX_nvm_decode_additional_offset_cal_data>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800f7da:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3718      	adds	r7, #24
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}

0800f7e6 <VL53LX_read_nvm_fmt_range_results_data>:

VL53LX_Error VL53LX_read_nvm_fmt_range_results_data(
	VL53LX_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53LX_decoded_nvm_fmt_range_data_t *prange_data)
{
 800f7e6:	b580      	push	{r7, lr}
 800f7e8:	b08a      	sub	sp, #40	; 0x28
 800f7ea:	af00      	add	r7, sp, #0
 800f7ec:	60f8      	str	r0, [r7, #12]
 800f7ee:	460b      	mov	r3, r1
 800f7f0:	607a      	str	r2, [r7, #4]
 800f7f2:	817b      	strh	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	LOG_FUNCTION_START("");



	status = VL53LX_read_nvm_raw_data(
 800f7fa:	897b      	ldrh	r3, [r7, #10]
 800f7fc:	089b      	lsrs	r3, r3, #2
 800f7fe:	b29b      	uxth	r3, r3
 800f800:	b2d9      	uxtb	r1, r3
 800f802:	f107 0314 	add.w	r3, r7, #20
 800f806:	2204      	movs	r2, #4
 800f808:	68f8      	ldr	r0, [r7, #12]
 800f80a:	f7ff ff4f 	bl	800f6ac <VL53LX_read_nvm_raw_data>
 800f80e:	4603      	mov	r3, r0
 800f810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		(uint8_t)(VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f814:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d109      	bne.n	800f830 <VL53LX_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53LX_nvm_decode_fmt_range_results_data(
 800f81c:	f107 0314 	add.w	r3, r7, #20
 800f820:	687a      	ldr	r2, [r7, #4]
 800f822:	4619      	mov	r1, r3
 800f824:	2010      	movs	r0, #16
 800f826:	f7ff fee0 	bl	800f5ea <VL53LX_nvm_decode_fmt_range_results_data>
 800f82a:	4603      	mov	r3, r0
 800f82c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 800f830:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 800f834:	4618      	mov	r0, r3
 800f836:	3728      	adds	r7, #40	; 0x28
 800f838:	46bd      	mov	sp, r7
 800f83a:	bd80      	pop	{r7, pc}

0800f83c <VL53LX_i2c_encode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_static_nvm_managed(
	VL53LX_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b086      	sub	sp, #24
 800f840:	af00      	add	r7, sp, #0
 800f842:	60f8      	str	r0, [r7, #12]
 800f844:	460b      	mov	r3, r1
 800f846:	607a      	str	r2, [r7, #4]
 800f848:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f84a:	2300      	movs	r3, #0
 800f84c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800f84e:	897b      	ldrh	r3, [r7, #10]
 800f850:	2b0a      	cmp	r3, #10
 800f852:	d802      	bhi.n	800f85a <VL53LX_i2c_encode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f854:	f06f 0309 	mvn.w	r3, #9
 800f858:	e047      	b.n	800f8ea <VL53LX_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	781b      	ldrb	r3, [r3, #0]
 800f85e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f862:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800f870:	f002 020f 	and.w	r2, r2, #15
 800f874:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800f876:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800f880:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f884:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f886:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800f890:	f002 0203 	and.w	r2, r2, #3
 800f894:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f896:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800f8a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f8a4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f8a6:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	88d8      	ldrh	r0, [r3, #6]
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	3305      	adds	r3, #5
 800f8b0:	461a      	mov	r2, r3
 800f8b2:	2102      	movs	r1, #2
 800f8b4:	f7f9 fa1f 	bl	8008cf6 <VL53LX_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800f8bc:	68fa      	ldr	r2, [r7, #12]
 800f8be:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800f8c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800f8c6:	68fa      	ldr	r2, [r7, #12]
 800f8c8:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800f8ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800f8d4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f8d8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f8da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800f8e0:	68fa      	ldr	r2, [r7, #12]
 800f8e2:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800f8e4:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f8e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	3718      	adds	r7, #24
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	bd80      	pop	{r7, pc}

0800f8f2 <VL53LX_i2c_decode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800f8f2:	b580      	push	{r7, lr}
 800f8f4:	b086      	sub	sp, #24
 800f8f6:	af00      	add	r7, sp, #0
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	60b9      	str	r1, [r7, #8]
 800f8fc:	607a      	str	r2, [r7, #4]
 800f8fe:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f900:	2300      	movs	r3, #0
 800f902:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800f904:	89fb      	ldrh	r3, [r7, #14]
 800f906:	2b0a      	cmp	r3, #10
 800f908:	d802      	bhi.n	800f910 <VL53LX_i2c_decode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f90a:	f06f 0309 	mvn.w	r3, #9
 800f90e:	e046      	b.n	800f99e <VL53LX_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	781b      	ldrb	r3, [r3, #0]
 800f914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f918:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800f91e:	68bb      	ldr	r3, [r7, #8]
 800f920:	3301      	adds	r3, #1
 800f922:	781b      	ldrb	r3, [r3, #0]
 800f924:	f003 030f 	and.w	r3, r3, #15
 800f928:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800f92e:	68bb      	ldr	r3, [r7, #8]
 800f930:	3302      	adds	r3, #2
 800f932:	781b      	ldrb	r3, [r3, #0]
 800f934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f938:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800f93e:	68bb      	ldr	r3, [r7, #8]
 800f940:	3303      	adds	r3, #3
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	f003 0303 	and.w	r3, r3, #3
 800f948:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	3304      	adds	r3, #4
 800f952:	781b      	ldrb	r3, [r3, #0]
 800f954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f958:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   5));
 800f95e:	68bb      	ldr	r3, [r7, #8]
 800f960:	3305      	adds	r3, #5
 800f962:	4619      	mov	r1, r3
 800f964:	2002      	movs	r0, #2
 800f966:	f7f9 f9f1 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 800f96a:	4603      	mov	r3, r0
 800f96c:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	79da      	ldrb	r2, [r3, #7]
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800f97a:	68bb      	ldr	r3, [r7, #8]
 800f97c:	7a1a      	ldrb	r2, [r3, #8]
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	3309      	adds	r3, #9
 800f986:	781b      	ldrb	r3, [r3, #0]
 800f988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f98c:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	7a9a      	ldrb	r2, [r3, #10]
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800f99a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f99e:	4618      	mov	r0, r3
 800f9a0:	3718      	adds	r7, #24
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}

0800f9a6 <VL53LX_get_static_nvm_managed>:


VL53LX_Error VL53LX_get_static_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800f9a6:	b580      	push	{r7, lr}
 800f9a8:	b086      	sub	sp, #24
 800f9aa:	af00      	add	r7, sp, #0
 800f9ac:	6078      	str	r0, [r7, #4]
 800f9ae:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f9b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d108      	bne.n	800f9ce <VL53LX_get_static_nvm_managed+0x28>
		status = VL53LX_ReadMulti(
 800f9bc:	f107 020c 	add.w	r2, r7, #12
 800f9c0:	230b      	movs	r3, #11
 800f9c2:	2101      	movs	r1, #1
 800f9c4:	6878      	ldr	r0, [r7, #4]
 800f9c6:	f001 feeb 	bl	80117a0 <VL53LX_ReadMulti>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800f9ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d108      	bne.n	800f9e8 <VL53LX_get_static_nvm_managed+0x42>
		status = VL53LX_i2c_decode_static_nvm_managed(
 800f9d6:	f107 030c 	add.w	r3, r7, #12
 800f9da:	683a      	ldr	r2, [r7, #0]
 800f9dc:	4619      	mov	r1, r3
 800f9de:	200b      	movs	r0, #11
 800f9e0:	f7ff ff87 	bl	800f8f2 <VL53LX_i2c_decode_static_nvm_managed>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800f9e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3718      	adds	r7, #24
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}

0800f9f4 <VL53LX_i2c_encode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_customer_nvm_managed(
	VL53LX_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b086      	sub	sp, #24
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	60f8      	str	r0, [r7, #12]
 800f9fc:	460b      	mov	r3, r1
 800f9fe:	607a      	str	r2, [r7, #4]
 800fa00:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fa02:	2300      	movs	r3, #0
 800fa04:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800fa06:	897b      	ldrh	r3, [r7, #10]
 800fa08:	2b16      	cmp	r3, #22
 800fa0a:	d802      	bhi.n	800fa12 <VL53LX_i2c_encode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fa0c:	f06f 0309 	mvn.w	r3, #9
 800fa10:	e076      	b.n	800fb00 <VL53LX_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800fa1e:	68fa      	ldr	r2, [r7, #12]
 800fa20:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800fa22:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800fa28:	68fa      	ldr	r2, [r7, #12]
 800fa2a:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800fa2c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800fa32:	68fa      	ldr	r2, [r7, #12]
 800fa34:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800fa36:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800fa3c:	68fa      	ldr	r2, [r7, #12]
 800fa3e:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800fa40:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800fa4a:	f002 020f 	and.w	r2, r2, #15
 800fa4e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800fa50:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800fa56:	68fa      	ldr	r2, [r7, #12]
 800fa58:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800fa5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800fa64:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800fa68:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800fa6a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800fa74:	f002 0203 	and.w	r2, r2, #3
 800fa78:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800fa7a:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	8958      	ldrh	r0, [r3, #10]
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	3309      	adds	r3, #9
 800fa84:	461a      	mov	r2, r3
 800fa86:	2102      	movs	r1, #2
 800fa88:	f7f9 f935 	bl	8008cf6 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53LX_i2c_encode_int16_t(
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	330b      	adds	r3, #11
 800fa96:	461a      	mov	r2, r3
 800fa98:	2102      	movs	r1, #2
 800fa9a:	f7f9 f977 	bl	8008d8c <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53LX_i2c_encode_int16_t(
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	330d      	adds	r3, #13
 800faa8:	461a      	mov	r2, r3
 800faaa:	2102      	movs	r1, #2
 800faac:	f7f9 f96e 	bl	8008d8c <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53LX_i2c_encode_uint16_t(
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	8a18      	ldrh	r0, [r3, #16]
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	330f      	adds	r3, #15
 800fab8:	461a      	mov	r2, r3
 800faba:	2102      	movs	r1, #2
 800fabc:	f7f9 f91b 	bl	8008cf6 <VL53LX_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53LX_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53LX_i2c_encode_int16_t(
 800fac6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800faca:	b218      	sxth	r0, r3
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	3311      	adds	r3, #17
 800fad0:	461a      	mov	r2, r3
 800fad2:	2102      	movs	r1, #2
 800fad4:	f7f9 f95a 	bl	8008d8c <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53LX_i2c_encode_int16_t(
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	3313      	adds	r3, #19
 800fae2:	461a      	mov	r2, r3
 800fae4:	2102      	movs	r1, #2
 800fae6:	f7f9 f951 	bl	8008d8c <VL53LX_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53LX_i2c_encode_int16_t(
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	3315      	adds	r3, #21
 800faf4:	461a      	mov	r2, r3
 800faf6:	2102      	movs	r1, #2
 800faf8:	f7f9 f948 	bl	8008d8c <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800fafc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fb00:	4618      	mov	r0, r3
 800fb02:	3718      	adds	r7, #24
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}

0800fb08 <VL53LX_i2c_decode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b086      	sub	sp, #24
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	4603      	mov	r3, r0
 800fb10:	60b9      	str	r1, [r7, #8]
 800fb12:	607a      	str	r2, [r7, #4]
 800fb14:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fb16:	2300      	movs	r3, #0
 800fb18:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800fb1a:	89fb      	ldrh	r3, [r7, #14]
 800fb1c:	2b16      	cmp	r3, #22
 800fb1e:	d802      	bhi.n	800fb26 <VL53LX_i2c_decode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fb20:	f06f 0309 	mvn.w	r3, #9
 800fb24:	e079      	b.n	800fc1a <VL53LX_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800fb26:	68bb      	ldr	r3, [r7, #8]
 800fb28:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800fb2e:	68bb      	ldr	r3, [r7, #8]
 800fb30:	785a      	ldrb	r2, [r3, #1]
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	789a      	ldrb	r2, [r3, #2]
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800fb3e:	68bb      	ldr	r3, [r7, #8]
 800fb40:	78da      	ldrb	r2, [r3, #3]
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800fb46:	68bb      	ldr	r3, [r7, #8]
 800fb48:	791a      	ldrb	r2, [r3, #4]
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800fb4e:	68bb      	ldr	r3, [r7, #8]
 800fb50:	3305      	adds	r3, #5
 800fb52:	781b      	ldrb	r3, [r3, #0]
 800fb54:	f003 030f 	and.w	r3, r3, #15
 800fb58:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800fb5e:	68bb      	ldr	r3, [r7, #8]
 800fb60:	799a      	ldrb	r2, [r3, #6]
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800fb66:	68bb      	ldr	r3, [r7, #8]
 800fb68:	3307      	adds	r3, #7
 800fb6a:	781b      	ldrb	r3, [r3, #0]
 800fb6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fb70:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800fb76:	68bb      	ldr	r3, [r7, #8]
 800fb78:	3308      	adds	r3, #8
 800fb7a:	781b      	ldrb	r3, [r3, #0]
 800fb7c:	f003 0303 	and.w	r3, r3, #3
 800fb80:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   9));
 800fb86:	68bb      	ldr	r3, [r7, #8]
 800fb88:	3309      	adds	r3, #9
 800fb8a:	4619      	mov	r1, r3
 800fb8c:	2002      	movs	r0, #2
 800fb8e:	f7f9 f8dd 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 800fb92:	4603      	mov	r3, r0
 800fb94:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  11));
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	330b      	adds	r3, #11
 800fb9e:	4619      	mov	r1, r3
 800fba0:	2002      	movs	r0, #2
 800fba2:	f7f9 f91f 	bl	8008de4 <VL53LX_i2c_decode_int16_t>
 800fba6:	4603      	mov	r3, r0
 800fba8:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  13));
 800fbae:	68bb      	ldr	r3, [r7, #8]
 800fbb0:	330d      	adds	r3, #13
 800fbb2:	4619      	mov	r1, r3
 800fbb4:	2002      	movs	r0, #2
 800fbb6:	f7f9 f915 	bl	8008de4 <VL53LX_i2c_decode_int16_t>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  15));
 800fbc2:	68bb      	ldr	r3, [r7, #8]
 800fbc4:	330f      	adds	r3, #15
 800fbc6:	4619      	mov	r1, r3
 800fbc8:	2002      	movs	r0, #2
 800fbca:	f7f9 f8bf 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800fbd6:	68bb      	ldr	r3, [r7, #8]
 800fbd8:	3311      	adds	r3, #17
 800fbda:	4619      	mov	r1, r3
 800fbdc:	2002      	movs	r0, #2
 800fbde:	f7f9 f901 	bl	8008de4 <VL53LX_i2c_decode_int16_t>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fbe8:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  19));
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	3313      	adds	r3, #19
 800fbf2:	4619      	mov	r1, r3
 800fbf4:	2002      	movs	r0, #2
 800fbf6:	f7f9 f8f5 	bl	8008de4 <VL53LX_i2c_decode_int16_t>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  21));
 800fc02:	68bb      	ldr	r3, [r7, #8]
 800fc04:	3315      	adds	r3, #21
 800fc06:	4619      	mov	r1, r3
 800fc08:	2002      	movs	r0, #2
 800fc0a:	f7f9 f8eb 	bl	8008de4 <VL53LX_i2c_decode_int16_t>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800fc16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	3718      	adds	r7, #24
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}

0800fc22 <VL53LX_get_customer_nvm_managed>:


VL53LX_Error VL53LX_get_customer_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800fc22:	b580      	push	{r7, lr}
 800fc24:	b08a      	sub	sp, #40	; 0x28
 800fc26:	af00      	add	r7, sp, #0
 800fc28:	6078      	str	r0, [r7, #4]
 800fc2a:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t comms_buffer[VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];
	int16_t offset;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800fc32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d109      	bne.n	800fc4e <VL53LX_get_customer_nvm_managed+0x2c>
		status = VL53LX_ReadMulti(
 800fc3a:	f107 020c 	add.w	r2, r7, #12
 800fc3e:	2317      	movs	r3, #23
 800fc40:	210d      	movs	r1, #13
 800fc42:	6878      	ldr	r0, [r7, #4]
 800fc44:	f001 fdac 	bl	80117a0 <VL53LX_ReadMulti>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev,
			VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800fc4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d109      	bne.n	800fc6a <VL53LX_get_customer_nvm_managed+0x48>
		status = VL53LX_i2c_decode_customer_nvm_managed(
 800fc56:	f107 030c 	add.w	r3, r7, #12
 800fc5a:	683a      	ldr	r2, [r7, #0]
 800fc5c:	4619      	mov	r1, r3
 800fc5e:	2017      	movs	r0, #23
 800fc60:	f7ff ff52 	bl	800fb08 <VL53LX_i2c_decode_customer_nvm_managed>
 800fc64:	4603      	mov	r3, r0
 800fc66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
			comms_buffer,
			pdata);

	if (status == VL53LX_ERROR_NONE) {
 800fc6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d11c      	bne.n	800fcac <VL53LX_get_customer_nvm_managed+0x8a>
		offset = pdata->algo__part_to_part_range_offset_mm;
 800fc72:	683b      	ldr	r3, [r7, #0]
 800fc74:	8a5b      	ldrh	r3, [r3, #18]
 800fc76:	84bb      	strh	r3, [r7, #36]	; 0x24
		offset = offset / 4;
 800fc78:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	da00      	bge.n	800fc82 <VL53LX_get_customer_nvm_managed+0x60>
 800fc80:	3303      	adds	r3, #3
 800fc82:	109b      	asrs	r3, r3, #2
 800fc84:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (offset >= 1024)
 800fc86:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800fc8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fc8e:	db04      	blt.n	800fc9a <VL53LX_get_customer_nvm_managed+0x78>
			offset -= 2048;
 800fc90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc92:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800fc96:	b29b      	uxth	r3, r3
 800fc98:	84bb      	strh	r3, [r7, #36]	; 0x24
		pdata->algo__part_to_part_range_offset_mm = 0;
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	825a      	strh	r2, [r3, #18]
		pdata->mm_config__inner_offset_mm = offset;
 800fca0:	683b      	ldr	r3, [r7, #0]
 800fca2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fca4:	829a      	strh	r2, [r3, #20]
		pdata->mm_config__outer_offset_mm = offset;
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fcaa:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800fcac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	3728      	adds	r7, #40	; 0x28
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}

0800fcb8 <VL53LX_i2c_encode_static_config>:

VL53LX_Error VL53LX_i2c_encode_static_config(
	VL53LX_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b086      	sub	sp, #24
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	60f8      	str	r0, [r7, #12]
 800fcc0:	460b      	mov	r3, r1
 800fcc2:	607a      	str	r2, [r7, #4]
 800fcc4:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES)
 800fcca:	897b      	ldrh	r3, [r7, #10]
 800fccc:	2b1f      	cmp	r3, #31
 800fcce:	d802      	bhi.n	800fcd6 <VL53LX_i2c_encode_static_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fcd0:	f06f 0309 	mvn.w	r3, #9
 800fcd4:	e0cf      	b.n	800fe76 <VL53LX_i2c_encode_static_config+0x1be>

	VL53LX_i2c_encode_uint16_t(
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	881b      	ldrh	r3, [r3, #0]
 800fcda:	687a      	ldr	r2, [r7, #4]
 800fcdc:	2102      	movs	r1, #2
 800fcde:	4618      	mov	r0, r3
 800fce0:	f7f9 f809 	bl	8008cf6 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800fcec:	f002 0201 	and.w	r2, r2, #1
 800fcf0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800fcf2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800fcfc:	f002 020f 	and.w	r2, r2, #15
 800fd00:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800fd02:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800fd0c:	f002 020f 	and.w	r2, r2, #15
 800fd10:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800fd12:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800fd1c:	f002 021f 	and.w	r2, r2, #31
 800fd20:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800fd22:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800fd2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800fd30:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800fd32:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800fd3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800fd40:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800fd42:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800fd4c:	f002 0201 	and.w	r2, r2, #1
 800fd50:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800fd52:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800fd58:	68fa      	ldr	r2, [r7, #12]
 800fd5a:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800fd5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800fd66:	f002 0201 	and.w	r2, r2, #1
 800fd6a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800fd6c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800fd76:	f002 0203 	and.w	r2, r2, #3
 800fd7a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800fd7c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800fd86:	f002 021f 	and.w	r2, r2, #31
 800fd8a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800fd8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800fd96:	f002 0203 	and.w	r2, r2, #3
 800fd9a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800fd9c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800fda6:	f002 0203 	and.w	r2, r2, #3
 800fdaa:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800fdac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800fdb6:	f002 0207 	and.w	r2, r2, #7
 800fdba:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800fdbc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800fdc6:	f002 021f 	and.w	r2, r2, #31
 800fdca:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800fdcc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800fdd6:	f002 0201 	and.w	r2, r2, #1
 800fdda:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800fddc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800fde2:	68fa      	ldr	r2, [r7, #12]
 800fde4:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800fde6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800fdec:	68fa      	ldr	r2, [r7, #12]
 800fdee:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800fdf0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800fdf6:	68fa      	ldr	r2, [r7, #12]
 800fdf8:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800fdfa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800fe00:	68fa      	ldr	r2, [r7, #12]
 800fe02:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800fe04:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800fe0a:	68fa      	ldr	r2, [r7, #12]
 800fe0c:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800fe0e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800fe14:	68fa      	ldr	r2, [r7, #12]
 800fe16:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800fe18:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	8b18      	ldrh	r0, [r3, #24]
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	3318      	adds	r3, #24
 800fe22:	461a      	mov	r2, r3
 800fe24:	2102      	movs	r1, #2
 800fe26:	f7f8 ff66 	bl	8008cf6 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800fe2e:	68fa      	ldr	r2, [r7, #12]
 800fe30:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800fe32:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800fe38:	68fa      	ldr	r2, [r7, #12]
 800fe3a:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800fe3c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800fe46:	f002 020f 	and.w	r2, r2, #15
 800fe4a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800fe4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800fe52:	68fa      	ldr	r2, [r7, #12]
 800fe54:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800fe56:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800fe60:	f002 020f 	and.w	r2, r2, #15
 800fe64:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800fe66:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800fe6c:	68fa      	ldr	r2, [r7, #12]
 800fe6e:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800fe70:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800fe72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fe76:	4618      	mov	r0, r3
 800fe78:	3718      	adds	r7, #24
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}

0800fe7e <VL53LX_i2c_encode_general_config>:

VL53LX_Error VL53LX_i2c_encode_general_config(
	VL53LX_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800fe7e:	b580      	push	{r7, lr}
 800fe80:	b086      	sub	sp, #24
 800fe82:	af00      	add	r7, sp, #0
 800fe84:	60f8      	str	r0, [r7, #12]
 800fe86:	460b      	mov	r3, r1
 800fe88:	607a      	str	r2, [r7, #4]
 800fe8a:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES)
 800fe90:	897b      	ldrh	r3, [r7, #10]
 800fe92:	2b15      	cmp	r3, #21
 800fe94:	d802      	bhi.n	800fe9c <VL53LX_i2c_encode_general_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fe96:	f06f 0309 	mvn.w	r3, #9
 800fe9a:	e070      	b.n	800ff7e <VL53LX_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800fea8:	68fa      	ldr	r2, [r7, #12]
 800feaa:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800feac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800feb2:	68fa      	ldr	r2, [r7, #12]
 800feb4:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800feb6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800fec0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800fec4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800fec6:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	889b      	ldrh	r3, [r3, #4]
	VL53LX_i2c_encode_uint16_t(
 800fecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fed0:	b298      	uxth	r0, r3
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	3304      	adds	r3, #4
 800fed6:	461a      	mov	r2, r3
 800fed8:	2102      	movs	r1, #2
 800feda:	f7f8 ff0c 	bl	8008cf6 <VL53LX_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800fee6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800feea:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800feec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800fef2:	68fa      	ldr	r2, [r7, #12]
 800fef4:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800fef6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800fefc:	68fa      	ldr	r2, [r7, #12]
 800fefe:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800ff00:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800ff0a:	f002 0201 	and.w	r2, r2, #1
 800ff0e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800ff10:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800ff1a:	f002 0207 	and.w	r2, r2, #7
 800ff1e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800ff20:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	8998      	ldrh	r0, [r3, #12]
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	330c      	adds	r3, #12
 800ff2a:	461a      	mov	r2, r3
 800ff2c:	2102      	movs	r1, #2
 800ff2e:	f7f8 fee2 	bl	8008cf6 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53LX_i2c_encode_uint16_t(
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	89d8      	ldrh	r0, [r3, #14]
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	330e      	adds	r3, #14
 800ff3a:	461a      	mov	r2, r3
 800ff3c:	2102      	movs	r1, #2
 800ff3e:	f7f8 feda 	bl	8008cf6 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53LX_i2c_encode_uint16_t(
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	8a18      	ldrh	r0, [r3, #16]
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	3310      	adds	r3, #16
 800ff4a:	461a      	mov	r2, r3
 800ff4c:	2102      	movs	r1, #2
 800ff4e:	f7f8 fed2 	bl	8008cf6 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800ff56:	68fa      	ldr	r2, [r7, #12]
 800ff58:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800ff5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800ff60:	68fa      	ldr	r2, [r7, #12]
 800ff62:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800ff64:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800ff6a:	68fa      	ldr	r2, [r7, #12]
 800ff6c:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800ff6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800ff74:	68fa      	ldr	r2, [r7, #12]
 800ff76:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800ff78:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800ff7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff7e:	4618      	mov	r0, r3
 800ff80:	3718      	adds	r7, #24
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bd80      	pop	{r7, pc}

0800ff86 <VL53LX_i2c_encode_timing_config>:

VL53LX_Error VL53LX_i2c_encode_timing_config(
	VL53LX_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ff86:	b580      	push	{r7, lr}
 800ff88:	b086      	sub	sp, #24
 800ff8a:	af00      	add	r7, sp, #0
 800ff8c:	60f8      	str	r0, [r7, #12]
 800ff8e:	460b      	mov	r3, r1
 800ff90:	607a      	str	r2, [r7, #4]
 800ff92:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ff94:	2300      	movs	r3, #0
 800ff96:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES)
 800ff98:	897b      	ldrh	r3, [r7, #10]
 800ff9a:	2b16      	cmp	r3, #22
 800ff9c:	d802      	bhi.n	800ffa4 <VL53LX_i2c_encode_timing_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ff9e:	f06f 0309 	mvn.w	r3, #9
 800ffa2:	e06e      	b.n	8010082 <VL53LX_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	781b      	ldrb	r3, [r3, #0]
 800ffa8:	f003 030f 	and.w	r3, r3, #15
 800ffac:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800ffb6:	68fa      	ldr	r2, [r7, #12]
 800ffb8:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800ffba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800ffc4:	f002 020f 	and.w	r2, r2, #15
 800ffc8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800ffca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800ffd0:	68fa      	ldr	r2, [r7, #12]
 800ffd2:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800ffd4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800ffde:	f002 020f 	and.w	r2, r2, #15
 800ffe2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800ffe4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800ffea:	68fa      	ldr	r2, [r7, #12]
 800ffec:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800ffee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800fff8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800fffc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800fffe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8010008:	f002 020f 	and.w	r2, r2, #15
 801000c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 801000e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 8010014:	68fa      	ldr	r2, [r7, #12]
 8010016:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8010018:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 8010022:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8010026:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8010028:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	8958      	ldrh	r0, [r3, #10]
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	330a      	adds	r3, #10
 8010032:	461a      	mov	r2, r3
 8010034:	2102      	movs	r1, #2
 8010036:	f7f8 fe5e 	bl	8008cf6 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53LX_i2c_encode_uint16_t(
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	8998      	ldrh	r0, [r3, #12]
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	330c      	adds	r3, #12
 8010042:	461a      	mov	r2, r3
 8010044:	2102      	movs	r1, #2
 8010046:	f7f8 fe56 	bl	8008cf6 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 801004e:	68fa      	ldr	r2, [r7, #12]
 8010050:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 8010052:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 8010058:	68fa      	ldr	r2, [r7, #12]
 801005a:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 801005c:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint32_t(
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	6918      	ldr	r0, [r3, #16]
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	3312      	adds	r3, #18
 8010066:	461a      	mov	r2, r3
 8010068:	2104      	movs	r1, #4
 801006a:	f7f8 fee4 	bl	8008e36 <VL53LX_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 8010076:	f002 0201 	and.w	r2, r2, #1
 801007a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 801007c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 801007e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010082:	4618      	mov	r0, r3
 8010084:	3718      	adds	r7, #24
 8010086:	46bd      	mov	sp, r7
 8010088:	bd80      	pop	{r7, pc}

0801008a <VL53LX_i2c_encode_dynamic_config>:

VL53LX_Error VL53LX_i2c_encode_dynamic_config(
	VL53LX_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801008a:	b580      	push	{r7, lr}
 801008c:	b086      	sub	sp, #24
 801008e:	af00      	add	r7, sp, #0
 8010090:	60f8      	str	r0, [r7, #12]
 8010092:	460b      	mov	r3, r1
 8010094:	607a      	str	r2, [r7, #4]
 8010096:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010098:	2300      	movs	r3, #0
 801009a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 801009c:	897b      	ldrh	r3, [r7, #10]
 801009e:	2b11      	cmp	r3, #17
 80100a0:	d802      	bhi.n	80100a8 <VL53LX_i2c_encode_dynamic_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 80100a2:	f06f 0309 	mvn.w	r3, #9
 80100a6:	e071      	b.n	801018c <VL53LX_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	781b      	ldrb	r3, [r3, #0]
 80100ac:	f003 0303 	and.w	r3, r3, #3
 80100b0:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	8858      	ldrh	r0, [r3, #2]
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	3301      	adds	r3, #1
 80100be:	461a      	mov	r2, r3
 80100c0:	2102      	movs	r1, #2
 80100c2:	f7f8 fe18 	bl	8008cf6 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53LX_i2c_encode_uint16_t(
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	8898      	ldrh	r0, [r3, #4]
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	3303      	adds	r3, #3
 80100ce:	461a      	mov	r2, r3
 80100d0:	2102      	movs	r1, #2
 80100d2:	f7f8 fe10 	bl	8008cf6 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 80100de:	f002 0201 	and.w	r2, r2, #1
 80100e2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80100e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 80100ee:	f002 0207 	and.w	r2, r2, #7
 80100f2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80100f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 80100fa:	68fa      	ldr	r2, [r7, #12]
 80100fc:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 80100fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 8010104:	68fa      	ldr	r2, [r7, #12]
 8010106:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8010108:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8010112:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010116:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8010118:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8010122:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010126:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8010128:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8010132:	f002 0203 	and.w	r2, r2, #3
 8010136:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8010138:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 8010142:	f002 0203 	and.w	r2, r2, #3
 8010146:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8010148:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 8010152:	f002 020f 	and.w	r2, r2, #15
 8010156:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8010158:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 801015e:	68fa      	ldr	r2, [r7, #12]
 8010160:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 8010162:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 8010168:	68fa      	ldr	r2, [r7, #12]
 801016a:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 801016c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 8010172:	68fa      	ldr	r2, [r7, #12]
 8010174:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8010176:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 8010180:	f002 0203 	and.w	r2, r2, #3
 8010184:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8010186:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8010188:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801018c:	4618      	mov	r0, r3
 801018e:	3718      	adds	r7, #24
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}

08010194 <VL53LX_i2c_encode_system_control>:

VL53LX_Error VL53LX_i2c_encode_system_control(
	VL53LX_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8010194:	b480      	push	{r7}
 8010196:	b087      	sub	sp, #28
 8010198:	af00      	add	r7, sp, #0
 801019a:	60f8      	str	r0, [r7, #12]
 801019c:	460b      	mov	r3, r1
 801019e:	607a      	str	r2, [r7, #4]
 80101a0:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80101a2:	2300      	movs	r3, #0
 80101a4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 80101a6:	897b      	ldrh	r3, [r7, #10]
 80101a8:	2b04      	cmp	r3, #4
 80101aa:	d802      	bhi.n	80101b2 <VL53LX_i2c_encode_system_control+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 80101ac:	f06f 0309 	mvn.w	r3, #9
 80101b0:	e025      	b.n	80101fe <VL53LX_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	781b      	ldrb	r3, [r3, #0]
 80101b6:	f003 0301 	and.w	r3, r3, #1
 80101ba:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 80101c8:	f002 0201 	and.w	r2, r2, #1
 80101cc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 80101ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 80101d8:	f002 0201 	and.w	r2, r2, #1
 80101dc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80101de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 80101e8:	f002 0203 	and.w	r2, r2, #3
 80101ec:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80101ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	3304      	adds	r3, #4
		pdata->system__mode_start;
 80101f4:	68fa      	ldr	r2, [r7, #12]
 80101f6:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 80101f8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80101fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80101fe:	4618      	mov	r0, r3
 8010200:	371c      	adds	r7, #28
 8010202:	46bd      	mov	sp, r7
 8010204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010208:	4770      	bx	lr

0801020a <VL53LX_set_system_control>:


VL53LX_Error VL53LX_set_system_control(
	VL53LX_DEV                 Dev,
	VL53LX_system_control_t   *pdata)
{
 801020a:	b580      	push	{r7, lr}
 801020c:	b084      	sub	sp, #16
 801020e:	af00      	add	r7, sp, #0
 8010210:	6078      	str	r0, [r7, #4]
 8010212:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010214:	2300      	movs	r3, #0
 8010216:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8010218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d108      	bne.n	8010232 <VL53LX_set_system_control+0x28>
		status = VL53LX_i2c_encode_system_control(
 8010220:	f107 0308 	add.w	r3, r7, #8
 8010224:	461a      	mov	r2, r3
 8010226:	2105      	movs	r1, #5
 8010228:	6838      	ldr	r0, [r7, #0]
 801022a:	f7ff ffb3 	bl	8010194 <VL53LX_i2c_encode_system_control>
 801022e:	4603      	mov	r3, r0
 8010230:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53LX_ERROR_NONE)
 8010232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d108      	bne.n	801024c <VL53LX_set_system_control+0x42>
		status = VL53LX_WriteMulti(
 801023a:	f107 0208 	add.w	r2, r7, #8
 801023e:	2305      	movs	r3, #5
 8010240:	2183      	movs	r1, #131	; 0x83
 8010242:	6878      	ldr	r0, [r7, #4]
 8010244:	f001 fa76 	bl	8011734 <VL53LX_WriteMulti>
 8010248:	4603      	mov	r3, r0
 801024a:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 801024c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010250:	4618      	mov	r0, r3
 8010252:	3710      	adds	r7, #16
 8010254:	46bd      	mov	sp, r7
 8010256:	bd80      	pop	{r7, pc}

08010258 <VL53LX_i2c_decode_system_results>:

VL53LX_Error VL53LX_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_system_results_t   *pdata)
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b086      	sub	sp, #24
 801025c:	af00      	add	r7, sp, #0
 801025e:	4603      	mov	r3, r0
 8010260:	60b9      	str	r1, [r7, #8]
 8010262:	607a      	str	r2, [r7, #4]
 8010264:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010266:	2300      	movs	r3, #0
 8010268:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 801026a:	89fb      	ldrh	r3, [r7, #14]
 801026c:	2b2b      	cmp	r3, #43	; 0x2b
 801026e:	d802      	bhi.n	8010276 <VL53LX_i2c_decode_system_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010270:	f06f 0309 	mvn.w	r3, #9
 8010274:	e0e2      	b.n	801043c <VL53LX_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8010276:	68bb      	ldr	r3, [r7, #8]
 8010278:	781b      	ldrb	r3, [r3, #0]
 801027a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801027e:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 8010284:	68bb      	ldr	r3, [r7, #8]
 8010286:	785a      	ldrb	r2, [r3, #1]
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	3302      	adds	r3, #2
 8010290:	781b      	ldrb	r3, [r3, #0]
 8010292:	f003 030f 	and.w	r3, r3, #15
 8010296:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	78da      	ldrb	r2, [r3, #3]
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   4));
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	3304      	adds	r3, #4
 80102a8:	4619      	mov	r1, r3
 80102aa:	2002      	movs	r0, #2
 80102ac:	f7f8 fd4e 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 80102b0:	4603      	mov	r3, r0
 80102b2:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   6));
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	3306      	adds	r3, #6
 80102bc:	4619      	mov	r1, r3
 80102be:	2002      	movs	r0, #2
 80102c0:	f7f8 fd44 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 80102c4:	4603      	mov	r3, r0
 80102c6:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8));
 80102cc:	68bb      	ldr	r3, [r7, #8]
 80102ce:	3308      	adds	r3, #8
 80102d0:	4619      	mov	r1, r3
 80102d2:	2002      	movs	r0, #2
 80102d4:	f7f8 fd3a 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 80102d8:	4603      	mov	r3, r0
 80102da:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  10));
 80102e0:	68bb      	ldr	r3, [r7, #8]
 80102e2:	330a      	adds	r3, #10
 80102e4:	4619      	mov	r1, r3
 80102e6:	2002      	movs	r0, #2
 80102e8:	f7f8 fd30 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 80102ec:	4603      	mov	r3, r0
 80102ee:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  12));
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	330c      	adds	r3, #12
 80102f8:	4619      	mov	r1, r3
 80102fa:	2002      	movs	r0, #2
 80102fc:	f7f8 fd26 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 8010300:	4603      	mov	r3, r0
 8010302:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  14));
 8010308:	68bb      	ldr	r3, [r7, #8]
 801030a:	330e      	adds	r3, #14
 801030c:	4619      	mov	r1, r3
 801030e:	2002      	movs	r0, #2
 8010310:	f7f8 fd1c 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 8010314:	4603      	mov	r3, r0
 8010316:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  16));
 801031c:	68bb      	ldr	r3, [r7, #8]
 801031e:	3310      	adds	r3, #16
 8010320:	4619      	mov	r1, r3
 8010322:	2002      	movs	r0, #2
 8010324:	f7f8 fd12 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 8010328:	4603      	mov	r3, r0
 801032a:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18));
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	3312      	adds	r3, #18
 8010334:	4619      	mov	r1, r3
 8010336:	2002      	movs	r0, #2
 8010338:	f7f8 fd08 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 801033c:	4603      	mov	r3, r0
 801033e:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  20));
 8010344:	68bb      	ldr	r3, [r7, #8]
 8010346:	3314      	adds	r3, #20
 8010348:	4619      	mov	r1, r3
 801034a:	2002      	movs	r0, #2
 801034c:	f7f8 fcfe 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 8010350:	4603      	mov	r3, r0
 8010352:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	3316      	adds	r3, #22
 801035c:	4619      	mov	r1, r3
 801035e:	2002      	movs	r0, #2
 8010360:	f7f8 fcf4 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 8010364:	4603      	mov	r3, r0
 8010366:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	3318      	adds	r3, #24
 8010370:	4619      	mov	r1, r3
 8010372:	2002      	movs	r0, #2
 8010374:	f7f8 fcea 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 8010378:	4603      	mov	r3, r0
 801037a:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  26));
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	331a      	adds	r3, #26
 8010384:	4619      	mov	r1, r3
 8010386:	2002      	movs	r0, #2
 8010388:	f7f8 fce0 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 801038c:	4603      	mov	r3, r0
 801038e:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  28));
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	331c      	adds	r3, #28
 8010398:	4619      	mov	r1, r3
 801039a:	2002      	movs	r0, #2
 801039c:	f7f8 fcd6 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 80103a0:	4603      	mov	r3, r0
 80103a2:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  30));
 80103a8:	68bb      	ldr	r3, [r7, #8]
 80103aa:	331e      	adds	r3, #30
 80103ac:	4619      	mov	r1, r3
 80103ae:	2002      	movs	r0, #2
 80103b0:	f7f8 fccc 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 80103b4:	4603      	mov	r3, r0
 80103b6:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  32));
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	3320      	adds	r3, #32
 80103c0:	4619      	mov	r1, r3
 80103c2:	2002      	movs	r0, #2
 80103c4:	f7f8 fcc2 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 80103c8:	4603      	mov	r3, r0
 80103ca:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  34));
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	3322      	adds	r3, #34	; 0x22
 80103d4:	4619      	mov	r1, r3
 80103d6:	2002      	movs	r0, #2
 80103d8:	f7f8 fcb8 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 80103dc:	4603      	mov	r3, r0
 80103de:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  36));
 80103e4:	68bb      	ldr	r3, [r7, #8]
 80103e6:	3324      	adds	r3, #36	; 0x24
 80103e8:	4619      	mov	r1, r3
 80103ea:	2002      	movs	r0, #2
 80103ec:	f7f8 fcae 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 80103f0:	4603      	mov	r3, r0
 80103f2:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  38));
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	3326      	adds	r3, #38	; 0x26
 80103fc:	4619      	mov	r1, r3
 80103fe:	2002      	movs	r0, #2
 8010400:	f7f8 fca4 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 8010404:	4603      	mov	r3, r0
 8010406:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  40));
 801040c:	68bb      	ldr	r3, [r7, #8]
 801040e:	3328      	adds	r3, #40	; 0x28
 8010410:	4619      	mov	r1, r3
 8010412:	2002      	movs	r0, #2
 8010414:	f7f8 fc9a 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 8010418:	4603      	mov	r3, r0
 801041a:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 8010420:	68bb      	ldr	r3, [r7, #8]
 8010422:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 8010438:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801043c:	4618      	mov	r0, r3
 801043e:	3718      	adds	r7, #24
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}

08010444 <VL53LX_i2c_decode_core_results>:

VL53LX_Error VL53LX_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_core_results_t     *pdata)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b086      	sub	sp, #24
 8010448:	af00      	add	r7, sp, #0
 801044a:	4603      	mov	r3, r0
 801044c:	60b9      	str	r1, [r7, #8]
 801044e:	607a      	str	r2, [r7, #4]
 8010450:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010452:	2300      	movs	r3, #0
 8010454:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CORE_RESULTS_I2C_SIZE_BYTES)
 8010456:	89fb      	ldrh	r3, [r7, #14]
 8010458:	2b20      	cmp	r3, #32
 801045a:	d802      	bhi.n	8010462 <VL53LX_i2c_decode_core_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 801045c:	f06f 0309 	mvn.w	r3, #9
 8010460:	e04d      	b.n	80104fe <VL53LX_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   0));
 8010462:	68b9      	ldr	r1, [r7, #8]
 8010464:	2004      	movs	r0, #4
 8010466:	f7f8 fd10 	bl	8008e8a <VL53LX_i2c_decode_uint32_t>
 801046a:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   4));
 8010470:	68bb      	ldr	r3, [r7, #8]
 8010472:	3304      	adds	r3, #4
 8010474:	4619      	mov	r1, r3
 8010476:	2004      	movs	r0, #4
 8010478:	f7f8 fd07 	bl	8008e8a <VL53LX_i2c_decode_uint32_t>
 801047c:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +   8));
 8010482:	68bb      	ldr	r3, [r7, #8]
 8010484:	3308      	adds	r3, #8
 8010486:	4619      	mov	r1, r3
 8010488:	2004      	movs	r0, #4
 801048a:	f7f8 fd1b 	bl	8008ec4 <VL53LX_i2c_decode_int32_t>
 801048e:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  12));
 8010494:	68bb      	ldr	r3, [r7, #8]
 8010496:	330c      	adds	r3, #12
 8010498:	4619      	mov	r1, r3
 801049a:	2004      	movs	r0, #4
 801049c:	f7f8 fcf5 	bl	8008e8a <VL53LX_i2c_decode_uint32_t>
 80104a0:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  16));
 80104a6:	68bb      	ldr	r3, [r7, #8]
 80104a8:	3310      	adds	r3, #16
 80104aa:	4619      	mov	r1, r3
 80104ac:	2004      	movs	r0, #4
 80104ae:	f7f8 fcec 	bl	8008e8a <VL53LX_i2c_decode_uint32_t>
 80104b2:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  20));
 80104b8:	68bb      	ldr	r3, [r7, #8]
 80104ba:	3314      	adds	r3, #20
 80104bc:	4619      	mov	r1, r3
 80104be:	2004      	movs	r0, #4
 80104c0:	f7f8 fce3 	bl	8008e8a <VL53LX_i2c_decode_uint32_t>
 80104c4:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +  24));
 80104ca:	68bb      	ldr	r3, [r7, #8]
 80104cc:	3318      	adds	r3, #24
 80104ce:	4619      	mov	r1, r3
 80104d0:	2004      	movs	r0, #4
 80104d2:	f7f8 fcf7 	bl	8008ec4 <VL53LX_i2c_decode_int32_t>
 80104d6:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  28));
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	331c      	adds	r3, #28
 80104e0:	4619      	mov	r1, r3
 80104e2:	2004      	movs	r0, #4
 80104e4:	f7f8 fcd1 	bl	8008e8a <VL53LX_i2c_decode_uint32_t>
 80104e8:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 80104ee:	68bb      	ldr	r3, [r7, #8]
 80104f0:	f893 2020 	ldrb.w	r2, [r3, #32]
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 80104fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80104fe:	4618      	mov	r0, r3
 8010500:	3718      	adds	r7, #24
 8010502:	46bd      	mov	sp, r7
 8010504:	bd80      	pop	{r7, pc}

08010506 <VL53LX_i2c_decode_debug_results>:

VL53LX_Error VL53LX_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_debug_results_t    *pdata)
{
 8010506:	b580      	push	{r7, lr}
 8010508:	b086      	sub	sp, #24
 801050a:	af00      	add	r7, sp, #0
 801050c:	4603      	mov	r3, r0
 801050e:	60b9      	str	r1, [r7, #8]
 8010510:	607a      	str	r2, [r7, #4]
 8010512:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010514:	2300      	movs	r3, #0
 8010516:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES)
 8010518:	89fb      	ldrh	r3, [r7, #14]
 801051a:	2b37      	cmp	r3, #55	; 0x37
 801051c:	d802      	bhi.n	8010524 <VL53LX_i2c_decode_debug_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 801051e:	f06f 0309 	mvn.w	r3, #9
 8010522:	e15e      	b.n	80107e2 <VL53LX_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   0));
 8010524:	68b9      	ldr	r1, [r7, #8]
 8010526:	2002      	movs	r0, #2
 8010528:	f7f8 fc10 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 801052c:	4603      	mov	r3, r0
 801052e:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8010534:	68bb      	ldr	r3, [r7, #8]
 8010536:	3302      	adds	r3, #2
 8010538:	781b      	ldrb	r3, [r3, #0]
 801053a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801053e:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 8010544:	68bb      	ldr	r3, [r7, #8]
 8010546:	3303      	adds	r3, #3
 8010548:	781b      	ldrb	r3, [r3, #0]
 801054a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801054e:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 8010554:	68bb      	ldr	r3, [r7, #8]
 8010556:	3304      	adds	r3, #4
 8010558:	781b      	ldrb	r3, [r3, #0]
 801055a:	f003 0303 	and.w	r3, r3, #3
 801055e:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8010564:	68bb      	ldr	r3, [r7, #8]
 8010566:	3305      	adds	r3, #5
 8010568:	781b      	ldrb	r3, [r3, #0]
 801056a:	f003 0301 	and.w	r3, r3, #1
 801056e:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8010574:	68bb      	ldr	r3, [r7, #8]
 8010576:	3306      	adds	r3, #6
 8010578:	781b      	ldrb	r3, [r3, #0]
 801057a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801057e:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8010584:	68bb      	ldr	r3, [r7, #8]
 8010586:	3307      	adds	r3, #7
 8010588:	781b      	ldrb	r3, [r3, #0]
 801058a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801058e:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8010594:	68bb      	ldr	r3, [r7, #8]
 8010596:	3308      	adds	r3, #8
 8010598:	4619      	mov	r1, r3
 801059a:	2002      	movs	r0, #2
 801059c:	f7f8 fbd6 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 80105a0:	4603      	mov	r3, r0
 80105a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80105a6:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	330a      	adds	r3, #10
 80105b0:	781b      	ldrb	r3, [r3, #0]
 80105b2:	f003 0303 	and.w	r3, r3, #3
 80105b6:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 80105bc:	68bb      	ldr	r3, [r7, #8]
 80105be:	330b      	adds	r3, #11
 80105c0:	781b      	ldrb	r3, [r3, #0]
 80105c2:	f003 0303 	and.w	r3, r3, #3
 80105c6:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 80105cc:	68bb      	ldr	r3, [r7, #8]
 80105ce:	330c      	adds	r3, #12
 80105d0:	781b      	ldrb	r3, [r3, #0]
 80105d2:	f003 030f 	and.w	r3, r3, #15
 80105d6:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 80105dc:	68bb      	ldr	r3, [r7, #8]
 80105de:	330d      	adds	r3, #13
 80105e0:	781b      	ldrb	r3, [r3, #0]
 80105e2:	f003 0307 	and.w	r3, r3, #7
 80105e6:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 80105ec:	68bb      	ldr	r3, [r7, #8]
 80105ee:	330e      	adds	r3, #14
 80105f0:	781b      	ldrb	r3, [r3, #0]
 80105f2:	f003 0301 	and.w	r3, r3, #1
 80105f6:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 80105fc:	68bb      	ldr	r3, [r7, #8]
 80105fe:	330f      	adds	r3, #15
 8010600:	781b      	ldrb	r3, [r3, #0]
 8010602:	f003 0303 	and.w	r3, r3, #3
 8010606:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	7c1a      	ldrb	r2, [r3, #16]
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8010614:	68bb      	ldr	r3, [r7, #8]
 8010616:	7c5a      	ldrb	r2, [r3, #17]
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 801061c:	68bb      	ldr	r3, [r7, #8]
 801061e:	3312      	adds	r3, #18
 8010620:	4619      	mov	r1, r3
 8010622:	2002      	movs	r0, #2
 8010624:	f7f8 fb92 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 8010628:	4603      	mov	r3, r0
 801062a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801062e:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 8010634:	68bb      	ldr	r3, [r7, #8]
 8010636:	3316      	adds	r3, #22
 8010638:	4619      	mov	r1, r3
 801063a:	2002      	movs	r0, #2
 801063c:	f7f8 fb86 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 8010640:	4603      	mov	r3, r0
 8010642:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 8010648:	68bb      	ldr	r3, [r7, #8]
 801064a:	3318      	adds	r3, #24
 801064c:	4619      	mov	r1, r3
 801064e:	2002      	movs	r0, #2
 8010650:	f7f8 fb7c 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 8010654:	4603      	mov	r3, r0
 8010656:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 801065c:	68bb      	ldr	r3, [r7, #8]
 801065e:	331a      	adds	r3, #26
 8010660:	781b      	ldrb	r3, [r3, #0]
 8010662:	f003 0301 	and.w	r3, r3, #1
 8010666:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	331b      	adds	r3, #27
 8010670:	781b      	ldrb	r3, [r3, #0]
 8010672:	f003 0307 	and.w	r3, r3, #7
 8010676:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 801067c:	68bb      	ldr	r3, [r7, #8]
 801067e:	7f1a      	ldrb	r2, [r3, #28]
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8010684:	68bb      	ldr	r3, [r7, #8]
 8010686:	7f5a      	ldrb	r2, [r3, #29]
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 801068c:	68bb      	ldr	r3, [r7, #8]
 801068e:	331e      	adds	r3, #30
 8010690:	781b      	ldrb	r3, [r3, #0]
 8010692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010696:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	331f      	adds	r3, #31
 80106a0:	781b      	ldrb	r3, [r3, #0]
 80106a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80106a6:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 80106ac:	68bb      	ldr	r3, [r7, #8]
 80106ae:	3320      	adds	r3, #32
 80106b0:	781b      	ldrb	r3, [r3, #0]
 80106b2:	f003 0303 	and.w	r3, r3, #3
 80106b6:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 80106bc:	68bb      	ldr	r3, [r7, #8]
 80106be:	3321      	adds	r3, #33	; 0x21
 80106c0:	781b      	ldrb	r3, [r3, #0]
 80106c2:	f003 030f 	and.w	r3, r3, #15
 80106c6:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 80106cc:	68bb      	ldr	r3, [r7, #8]
 80106ce:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	3325      	adds	r3, #37	; 0x25
 80106f4:	781b      	ldrb	r3, [r3, #0]
 80106f6:	f003 0301 	and.w	r3, r3, #1
 80106fa:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8010702:	68bb      	ldr	r3, [r7, #8]
 8010704:	3326      	adds	r3, #38	; 0x26
 8010706:	781b      	ldrb	r3, [r3, #0]
 8010708:	f003 0303 	and.w	r3, r3, #3
 801070c:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8010714:	68bb      	ldr	r3, [r7, #8]
 8010716:	3327      	adds	r3, #39	; 0x27
 8010718:	781b      	ldrb	r3, [r3, #0]
 801071a:	f003 031f 	and.w	r3, r3, #31
 801071e:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8010726:	68bb      	ldr	r3, [r7, #8]
 8010728:	3328      	adds	r3, #40	; 0x28
 801072a:	781b      	ldrb	r3, [r3, #0]
 801072c:	f003 031f 	and.w	r3, r3, #31
 8010730:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 8010738:	68bb      	ldr	r3, [r7, #8]
 801073a:	3329      	adds	r3, #41	; 0x29
 801073c:	781b      	ldrb	r3, [r3, #0]
 801073e:	f003 031f 	and.w	r3, r3, #31
 8010742:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 801074a:	68bb      	ldr	r3, [r7, #8]
 801074c:	332a      	adds	r3, #42	; 0x2a
 801074e:	781b      	ldrb	r3, [r3, #0]
 8010750:	f003 0301 	and.w	r3, r3, #1
 8010754:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	332b      	adds	r3, #43	; 0x2b
 8010760:	781b      	ldrb	r3, [r3, #0]
 8010762:	f003 0301 	and.w	r3, r3, #1
 8010766:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 801076e:	68bb      	ldr	r3, [r7, #8]
 8010770:	332c      	adds	r3, #44	; 0x2c
 8010772:	781b      	ldrb	r3, [r3, #0]
 8010774:	f003 0303 	and.w	r3, r3, #3
 8010778:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 8010780:	68bb      	ldr	r3, [r7, #8]
 8010782:	332d      	adds	r3, #45	; 0x2d
 8010784:	781b      	ldrb	r3, [r3, #0]
 8010786:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801078a:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 8010792:	68bb      	ldr	r3, [r7, #8]
 8010794:	332e      	adds	r3, #46	; 0x2e
 8010796:	4619      	mov	r1, r3
 8010798:	2004      	movs	r0, #4
 801079a:	f7f8 fb76 	bl	8008e8a <VL53LX_i2c_decode_uint32_t>
 801079e:	4603      	mov	r3, r0
 80107a0:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  50));
 80107a8:	68bb      	ldr	r3, [r7, #8]
 80107aa:	3332      	adds	r3, #50	; 0x32
 80107ac:	4619      	mov	r1, r3
 80107ae:	2004      	movs	r0, #4
 80107b0:	f7f8 fb6b 	bl	8008e8a <VL53LX_i2c_decode_uint32_t>
 80107b4:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 80107ba:	68bb      	ldr	r3, [r7, #8]
 80107bc:	3336      	adds	r3, #54	; 0x36
 80107be:	781b      	ldrb	r3, [r3, #0]
 80107c0:	f003 0301 	and.w	r3, r3, #1
 80107c4:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 80107cc:	68bb      	ldr	r3, [r7, #8]
 80107ce:	3337      	adds	r3, #55	; 0x37
 80107d0:	781b      	ldrb	r3, [r3, #0]
 80107d2:	f003 0301 	and.w	r3, r3, #1
 80107d6:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 80107de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80107e2:	4618      	mov	r0, r3
 80107e4:	3718      	adds	r7, #24
 80107e6:	46bd      	mov	sp, r7
 80107e8:	bd80      	pop	{r7, pc}

080107ea <VL53LX_i2c_decode_nvm_copy_data>:

VL53LX_Error VL53LX_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_nvm_copy_data_t    *pdata)
{
 80107ea:	b580      	push	{r7, lr}
 80107ec:	b086      	sub	sp, #24
 80107ee:	af00      	add	r7, sp, #0
 80107f0:	4603      	mov	r3, r0
 80107f2:	60b9      	str	r1, [r7, #8]
 80107f4:	607a      	str	r2, [r7, #4]
 80107f6:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80107f8:	2300      	movs	r3, #0
 80107fa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES)
 80107fc:	89fb      	ldrh	r3, [r7, #14]
 80107fe:	2b30      	cmp	r3, #48	; 0x30
 8010800:	d802      	bhi.n	8010808 <VL53LX_i2c_decode_nvm_copy_data+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010802:	f06f 0309 	mvn.w	r3, #9
 8010806:	e112      	b.n	8010a2e <VL53LX_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 8010810:	68bb      	ldr	r3, [r7, #8]
 8010812:	785a      	ldrb	r2, [r3, #1]
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8010818:	68bb      	ldr	r3, [r7, #8]
 801081a:	789a      	ldrb	r2, [r3, #2]
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   3));
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	3303      	adds	r3, #3
 8010824:	4619      	mov	r1, r3
 8010826:	2002      	movs	r0, #2
 8010828:	f7f8 fa90 	bl	8008d4c <VL53LX_i2c_decode_uint16_t>
 801082c:	4603      	mov	r3, r0
 801082e:	461a      	mov	r2, r3
	pdata->identification__module_id =
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8010834:	68bb      	ldr	r3, [r7, #8]
 8010836:	3305      	adds	r3, #5
 8010838:	781b      	ldrb	r3, [r3, #0]
 801083a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801083e:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 8010844:	68bb      	ldr	r3, [r7, #8]
 8010846:	3306      	adds	r3, #6
 8010848:	781b      	ldrb	r3, [r3, #0]
 801084a:	f003 0307 	and.w	r3, r3, #7
 801084e:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 8010854:	68bb      	ldr	r3, [r7, #8]
 8010856:	3307      	adds	r3, #7
 8010858:	781b      	ldrb	r3, [r3, #0]
 801085a:	f003 0307 	and.w	r3, r3, #7
 801085e:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8010864:	68bb      	ldr	r3, [r7, #8]
 8010866:	3308      	adds	r3, #8
 8010868:	781b      	ldrb	r3, [r3, #0]
 801086a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801086e:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 8010874:	68bb      	ldr	r3, [r7, #8]
 8010876:	3309      	adds	r3, #9
 8010878:	781b      	ldrb	r3, [r3, #0]
 801087a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801087e:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8010884:	68bb      	ldr	r3, [r7, #8]
 8010886:	330a      	adds	r3, #10
 8010888:	781b      	ldrb	r3, [r3, #0]
 801088a:	f003 0301 	and.w	r3, r3, #1
 801088e:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 8010894:	68bb      	ldr	r3, [r7, #8]
 8010896:	330b      	adds	r3, #11
 8010898:	781b      	ldrb	r3, [r3, #0]
 801089a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801089e:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 80108a4:	68bb      	ldr	r3, [r7, #8]
 80108a6:	330c      	adds	r3, #12
 80108a8:	781b      	ldrb	r3, [r3, #0]
 80108aa:	f003 0301 	and.w	r3, r3, #1
 80108ae:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 80108b4:	68bb      	ldr	r3, [r7, #8]
 80108b6:	330d      	adds	r3, #13
 80108b8:	781b      	ldrb	r3, [r3, #0]
 80108ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80108be:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	330e      	adds	r3, #14
 80108c8:	781b      	ldrb	r3, [r3, #0]
 80108ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80108ce:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 80108d4:	68bb      	ldr	r3, [r7, #8]
 80108d6:	7bda      	ldrb	r2, [r3, #15]
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 80108dc:	68bb      	ldr	r3, [r7, #8]
 80108de:	7c1a      	ldrb	r2, [r3, #16]
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 80108e4:	68bb      	ldr	r3, [r7, #8]
 80108e6:	7c5a      	ldrb	r2, [r3, #17]
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	7c9a      	ldrb	r2, [r3, #18]
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 80108f4:	68bb      	ldr	r3, [r7, #8]
 80108f6:	7cda      	ldrb	r2, [r3, #19]
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	7d1a      	ldrb	r2, [r3, #20]
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8010904:	68bb      	ldr	r3, [r7, #8]
 8010906:	7d5a      	ldrb	r2, [r3, #21]
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 801090c:	68bb      	ldr	r3, [r7, #8]
 801090e:	7d9a      	ldrb	r2, [r3, #22]
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8010914:	68bb      	ldr	r3, [r7, #8]
 8010916:	7dda      	ldrb	r2, [r3, #23]
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 801091c:	68bb      	ldr	r3, [r7, #8]
 801091e:	7e1a      	ldrb	r2, [r3, #24]
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8010924:	68bb      	ldr	r3, [r7, #8]
 8010926:	7e5a      	ldrb	r2, [r3, #25]
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 801092c:	68bb      	ldr	r3, [r7, #8]
 801092e:	7e9a      	ldrb	r2, [r3, #26]
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	7eda      	ldrb	r2, [r3, #27]
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	7f1a      	ldrb	r2, [r3, #28]
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 8010944:	68bb      	ldr	r3, [r7, #8]
 8010946:	7f5a      	ldrb	r2, [r3, #29]
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 801094c:	68bb      	ldr	r3, [r7, #8]
 801094e:	7f9a      	ldrb	r2, [r3, #30]
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 8010954:	68bb      	ldr	r3, [r7, #8]
 8010956:	7fda      	ldrb	r2, [r3, #31]
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 801095e:	68bb      	ldr	r3, [r7, #8]
 8010960:	f893 2020 	ldrb.w	r2, [r3, #32]
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 801096a:	68bb      	ldr	r3, [r7, #8]
 801096c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8010976:	68bb      	ldr	r3, [r7, #8]
 8010978:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8010982:	68bb      	ldr	r3, [r7, #8]
 8010984:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 801098e:	68bb      	ldr	r3, [r7, #8]
 8010990:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 801099a:	68bb      	ldr	r3, [r7, #8]
 801099c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 80109a6:	68bb      	ldr	r3, [r7, #8]
 80109a8:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 80109b2:	68bb      	ldr	r3, [r7, #8]
 80109b4:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 80109be:	68bb      	ldr	r3, [r7, #8]
 80109c0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 80109ca:	68bb      	ldr	r3, [r7, #8]
 80109cc:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 80109d6:	68bb      	ldr	r3, [r7, #8]
 80109d8:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 80109e2:	68bb      	ldr	r3, [r7, #8]
 80109e4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 80109ee:	68bb      	ldr	r3, [r7, #8]
 80109f0:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 80109fa:	68bb      	ldr	r3, [r7, #8]
 80109fc:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8010a06:	68bb      	ldr	r3, [r7, #8]
 8010a08:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8010a12:	68bb      	ldr	r3, [r7, #8]
 8010a14:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 8010a1e:	68bb      	ldr	r3, [r7, #8]
 8010a20:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 8010a2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010a2e:	4618      	mov	r0, r3
 8010a30:	3718      	adds	r7, #24
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd80      	pop	{r7, pc}

08010a36 <VL53LX_get_nvm_copy_data>:


VL53LX_Error VL53LX_get_nvm_copy_data(
	VL53LX_DEV                 Dev,
	VL53LX_nvm_copy_data_t    *pdata)
{
 8010a36:	b580      	push	{r7, lr}
 8010a38:	b090      	sub	sp, #64	; 0x40
 8010a3a:	af00      	add	r7, sp, #0
 8010a3c:	6078      	str	r0, [r7, #4]
 8010a3e:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010a40:	2300      	movs	r3, #0
 8010a42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8010a46:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d10a      	bne.n	8010a64 <VL53LX_get_nvm_copy_data+0x2e>
		status = VL53LX_ReadMulti(
 8010a4e:	f107 020c 	add.w	r2, r7, #12
 8010a52:	2331      	movs	r3, #49	; 0x31
 8010a54:	f240 110f 	movw	r1, #271	; 0x10f
 8010a58:	6878      	ldr	r0, [r7, #4]
 8010a5a:	f000 fea1 	bl	80117a0 <VL53LX_ReadMulti>
 8010a5e:	4603      	mov	r3, r0
 8010a60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53LX_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 8010a64:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d109      	bne.n	8010a80 <VL53LX_get_nvm_copy_data+0x4a>
		status = VL53LX_i2c_decode_nvm_copy_data(
 8010a6c:	f107 030c 	add.w	r3, r7, #12
 8010a70:	683a      	ldr	r2, [r7, #0]
 8010a72:	4619      	mov	r1, r3
 8010a74:	2031      	movs	r0, #49	; 0x31
 8010a76:	f7ff feb8 	bl	80107ea <VL53LX_i2c_decode_nvm_copy_data>
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8010a80:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8010a84:	4618      	mov	r0, r3
 8010a86:	3740      	adds	r7, #64	; 0x40
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}

08010a8c <VL53LX_f_023>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53LX_p_028,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 8010a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a90:	b0a1      	sub	sp, #132	; 0x84
 8010a92:	af00      	add	r7, sp, #0
 8010a94:	64b9      	str	r1, [r7, #72]	; 0x48
 8010a96:	647a      	str	r2, [r7, #68]	; 0x44
 8010a98:	643b      	str	r3, [r7, #64]	; 0x40
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f


	VL53LX_Error status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8010aa0:	23f1      	movs	r3, #241	; 0xf1
 8010aa2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint32_t sigma_int  = VL53LX_D_002;
 8010aa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010aaa:	657b      	str	r3, [r7, #84]	; 0x54

	uint32_t pll_period_mm  = 0;
 8010aac:	2300      	movs	r3, #0
 8010aae:	653b      	str	r3, [r7, #80]	; 0x50

	uint64_t tmp0        = 0;
 8010ab0:	f04f 0200 	mov.w	r2, #0
 8010ab4:	f04f 0300 	mov.w	r3, #0
 8010ab8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	uint64_t tmp1        = 0;
 8010abc:	f04f 0200 	mov.w	r2, #0
 8010ac0:	f04f 0300 	mov.w	r3, #0
 8010ac4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	uint64_t b_minus_amb = 0;
 8010ac8:	f04f 0200 	mov.w	r2, #0
 8010acc:	f04f 0300 	mov.w	r3, #0
 8010ad0:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	uint64_t VL53LX_p_055   = 0;
 8010ad4:	f04f 0200 	mov.w	r2, #0
 8010ad8:	f04f 0300 	mov.w	r3, #0
 8010adc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	*psigma_est  = VL53LX_D_002;
 8010ae0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010ae4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010ae8:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 8010aea:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	f000 8259 	beq.w	8010fa6 <VL53LX_f_023+0x51a>



		pll_period_mm = VL53LX_calc_pll_period_mm(fast_osc_frequency);
 8010af4:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8010af8:	4618      	mov	r0, r3
 8010afa:	f7fb fbd3 	bl	800c2a4 <VL53LX_calc_pll_period_mm>
 8010afe:	6538      	str	r0, [r7, #80]	; 0x50



		if (VL53LX_p_028 > VL53LX_p_032)
 8010b00:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8010b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b06:	429a      	cmp	r2, r3
 8010b08:	d90f      	bls.n	8010b2a <VL53LX_f_023+0x9e>
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 8010b0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010b0e:	4618      	mov	r0, r3
 8010b10:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_032;
 8010b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b16:	461a      	mov	r2, r3
 8010b18:	f04f 0300 	mov.w	r3, #0
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 8010b1c:	ebb0 0a02 	subs.w	sl, r0, r2
 8010b20:	eb61 0b03 	sbc.w	fp, r1, r3
 8010b24:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 8010b28:	e00e      	b.n	8010b48 <VL53LX_f_023+0xbc>
		else
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 8010b2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_028;
 8010b32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010b36:	461a      	mov	r2, r3
 8010b38:	f04f 0300 	mov.w	r3, #0
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 8010b3c:	ebb0 0802 	subs.w	r8, r0, r2
 8010b40:	eb61 0903 	sbc.w	r9, r1, r3
 8010b44:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60



		if (VL53LX_p_007 > VL53LX_p_001)
 8010b48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b4c:	429a      	cmp	r2, r3
 8010b4e:	d911      	bls.n	8010b74 <VL53LX_f_023+0xe8>
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 8010b50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b52:	4618      	mov	r0, r3
 8010b54:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_001;
 8010b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b5a:	461a      	mov	r2, r3
 8010b5c:	f04f 0300 	mov.w	r3, #0
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 8010b60:	1a86      	subs	r6, r0, r2
 8010b62:	62be      	str	r6, [r7, #40]	; 0x28
 8010b64:	eb61 0303 	sbc.w	r3, r1, r3
 8010b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010b6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010b6e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8010b72:	e010      	b.n	8010b96 <VL53LX_f_023+0x10a>
		else
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 8010b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b76:	4618      	mov	r0, r3
 8010b78:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_007;
 8010b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b7e:	461a      	mov	r2, r3
 8010b80:	f04f 0300 	mov.w	r3, #0
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 8010b84:	1a86      	subs	r6, r0, r2
 8010b86:	623e      	str	r6, [r7, #32]
 8010b88:	eb61 0303 	sbc.w	r3, r1, r3
 8010b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8010b8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010b92:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58



		if (b_minus_amb != 0) {
 8010b96:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010b9a:	4313      	orrs	r3, r2
 8010b9c:	f000 8203 	beq.w	8010fa6 <VL53LX_f_023+0x51a>




			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 8010ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	f04f 0100 	mov.w	r1, #0
 8010ba8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010bac:	461a      	mov	r2, r3
 8010bae:	f04f 0300 	mov.w	r3, #0
 8010bb2:	1884      	adds	r4, r0, r2
 8010bb4:	eb41 0503 	adc.w	r5, r1, r3
					(uint64_t)VL53LX_p_028;
 8010bb8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010bbc:	461a      	mov	r2, r3
 8010bbe:	f04f 0300 	mov.w	r3, #0
			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 8010bc2:	18a1      	adds	r1, r4, r2
 8010bc4:	61b9      	str	r1, [r7, #24]
 8010bc6:	eb45 0303 	adc.w	r3, r5, r3
 8010bca:	61fb      	str	r3, [r7, #28]
 8010bcc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8010bd0:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			if (tmp0 > VL53LX_D_003)
 8010bd4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010bd8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8010bdc:	f04f 0100 	mov.w	r1, #0
 8010be0:	4299      	cmp	r1, r3
 8010be2:	bf08      	it	eq
 8010be4:	4290      	cmpeq	r0, r2
 8010be6:	d205      	bcs.n	8010bf4 <VL53LX_f_023+0x168>
				tmp0 = VL53LX_D_003;
 8010be8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8010bec:	f04f 0300 	mov.w	r3, #0
 8010bf0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70



			tmp1 = (uint64_t)VL53LX_p_055 * (uint64_t)VL53LX_p_055;
 8010bf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010bf6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010bf8:	fb02 f203 	mul.w	r2, r2, r3
 8010bfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010bfe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010c00:	fb01 f303 	mul.w	r3, r1, r3
 8010c04:	18d1      	adds	r1, r2, r3
 8010c06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010c08:	fba3 2303 	umull	r2, r3, r3, r3
 8010c0c:	4419      	add	r1, r3
 8010c0e:	460b      	mov	r3, r1
 8010c10:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8010c14:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp1 = tmp1 << 8;
 8010c18:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8010c1c:	f04f 0200 	mov.w	r2, #0
 8010c20:	f04f 0300 	mov.w	r3, #0
 8010c24:	020b      	lsls	r3, r1, #8
 8010c26:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010c2a:	0202      	lsls	r2, r0, #8
 8010c2c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			if (tmp1 > VL53LX_D_004)
 8010c30:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010c34:	f04f 30ff 	mov.w	r0, #4294967295
 8010c38:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010c3c:	4299      	cmp	r1, r3
 8010c3e:	bf08      	it	eq
 8010c40:	4290      	cmpeq	r0, r2
 8010c42:	d205      	bcs.n	8010c50 <VL53LX_f_023+0x1c4>
				tmp1 = VL53LX_D_004;
 8010c44:	f04f 32ff 	mov.w	r2, #4294967295
 8010c48:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8010c4c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			tmp1 = do_division_u(tmp1, b_minus_amb);
 8010c50:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010c54:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8010c58:	f7ef ff58 	bl	8000b0c <__aeabi_uldivmod>
 8010c5c:	4602      	mov	r2, r0
 8010c5e:	460b      	mov	r3, r1
 8010c60:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp1 = do_division_u(tmp1, b_minus_amb);
 8010c64:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010c68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8010c6c:	f7ef ff4e 	bl	8000b0c <__aeabi_uldivmod>
 8010c70:	4602      	mov	r2, r0
 8010c72:	460b      	mov	r3, r1
 8010c74:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			if (tmp1 > (uint64_t)VL53LX_D_005)
 8010c78:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010c7c:	2b80      	cmp	r3, #128	; 0x80
 8010c7e:	bf08      	it	eq
 8010c80:	2a00      	cmpeq	r2, #0
 8010c82:	d305      	bcc.n	8010c90 <VL53LX_f_023+0x204>
				tmp1 = (uint64_t)VL53LX_D_005;
 8010c84:	f04f 32ff 	mov.w	r2, #4294967295
 8010c88:	f04f 037f 	mov.w	r3, #127	; 0x7f
 8010c8c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			tmp0 = tmp1 * tmp0;
 8010c90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010c92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010c94:	fb02 f203 	mul.w	r2, r2, r3
 8010c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c9a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010c9c:	fb01 f303 	mul.w	r3, r1, r3
 8010ca0:	18d1      	adds	r1, r2, r3
 8010ca2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010ca4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8010caa:	4419      	add	r1, r3
 8010cac:	460b      	mov	r3, r1
 8010cae:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8010cb2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8010cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f04f 0100 	mov.w	r1, #0
 8010cc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010cc4:	461a      	mov	r2, r3
 8010cc6:	f04f 0300 	mov.w	r3, #0
 8010cca:	1884      	adds	r4, r0, r2
 8010ccc:	63bc      	str	r4, [r7, #56]	; 0x38
 8010cce:	eb41 0303 	adc.w	r3, r1, r3
 8010cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8010cd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010cd8:	461a      	mov	r2, r3
 8010cda:	f04f 0300 	mov.w	r3, #0
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8010cde:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8010ce2:	4621      	mov	r1, r4
 8010ce4:	1889      	adds	r1, r1, r2
 8010ce6:	6339      	str	r1, [r7, #48]	; 0x30
 8010ce8:	4629      	mov	r1, r5
 8010cea:	eb43 0101 	adc.w	r1, r3, r1
 8010cee:	6379      	str	r1, [r7, #52]	; 0x34
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8010cf0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010cf4:	461a      	mov	r2, r3
 8010cf6:	f04f 0300 	mov.w	r3, #0
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8010cfa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8010cfe:	4621      	mov	r1, r4
 8010d00:	1889      	adds	r1, r1, r2
 8010d02:	6139      	str	r1, [r7, #16]
 8010d04:	4629      	mov	r1, r5
 8010d06:	eb43 0101 	adc.w	r1, r3, r1
 8010d0a:	6179      	str	r1, [r7, #20]
 8010d0c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8010d10:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


			if (tmp1 > (uint64_t)VL53LX_D_003)
 8010d14:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010d18:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8010d1c:	f04f 0100 	mov.w	r1, #0
 8010d20:	4299      	cmp	r1, r3
 8010d22:	bf08      	it	eq
 8010d24:	4290      	cmpeq	r0, r2
 8010d26:	d205      	bcs.n	8010d34 <VL53LX_f_023+0x2a8>
				tmp1 = (uint64_t)VL53LX_D_003;
 8010d28:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8010d2c:	f04f 0300 	mov.w	r3, #0
 8010d30:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			tmp1 = tmp1 << 8;
 8010d34:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8010d38:	f04f 0200 	mov.w	r2, #0
 8010d3c:	f04f 0300 	mov.w	r3, #0
 8010d40:	020b      	lsls	r3, r1, #8
 8010d42:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010d46:	0202      	lsls	r2, r0, #8
 8010d48:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			tmp0 = tmp1 + tmp0;
 8010d4c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010d50:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010d54:	1884      	adds	r4, r0, r2
 8010d56:	60bc      	str	r4, [r7, #8]
 8010d58:	eb41 0303 	adc.w	r3, r1, r3
 8010d5c:	60fb      	str	r3, [r7, #12]
 8010d5e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8010d62:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			if (tmp0 > (uint64_t)VL53LX_D_006)
 8010d66:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010d6a:	2a00      	cmp	r2, #0
 8010d6c:	f173 0300 	sbcs.w	r3, r3, #0
 8010d70:	da05      	bge.n	8010d7e <VL53LX_f_023+0x2f2>
				tmp0 = (uint64_t)VL53LX_D_006;
 8010d72:	f04f 32ff 	mov.w	r2, #4294967295
 8010d76:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010d7a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70





			if (tmp0 > (uint64_t)VL53LX_D_007) {
 8010d7e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010d82:	2b01      	cmp	r3, #1
 8010d84:	bf08      	it	eq
 8010d86:	2a00      	cmpeq	r2, #0
 8010d88:	d31e      	bcc.n	8010dc8 <VL53LX_f_023+0x33c>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8010d8a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010d8e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010d92:	f7ef febb 	bl	8000b0c <__aeabi_uldivmod>
 8010d96:	4602      	mov	r2, r0
 8010d98:	460b      	mov	r3, r1
 8010d9a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = tmp0 * pll_period_mm;
 8010d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010da0:	461a      	mov	r2, r3
 8010da2:	f04f 0300 	mov.w	r3, #0
 8010da6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010da8:	fb02 f001 	mul.w	r0, r2, r1
 8010dac:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010dae:	fb03 f101 	mul.w	r1, r3, r1
 8010db2:	4401      	add	r1, r0
 8010db4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8010db6:	fba0 2302 	umull	r2, r3, r0, r2
 8010dba:	4419      	add	r1, r3
 8010dbc:	460b      	mov	r3, r1
 8010dbe:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8010dc2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8010dc6:	e01d      	b.n	8010e04 <VL53LX_f_023+0x378>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8010dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010dca:	461a      	mov	r2, r3
 8010dcc:	f04f 0300 	mov.w	r3, #0
 8010dd0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010dd2:	fb02 f001 	mul.w	r0, r2, r1
 8010dd6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010dd8:	fb03 f101 	mul.w	r1, r3, r1
 8010ddc:	4401      	add	r1, r0
 8010dde:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8010de0:	fba0 2302 	umull	r2, r3, r0, r2
 8010de4:	4419      	add	r1, r3
 8010de6:	460b      	mov	r3, r1
 8010de8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8010dec:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8010df0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010df4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010df8:	f7ef fe88 	bl	8000b0c <__aeabi_uldivmod>
 8010dfc:	4602      	mov	r2, r0
 8010dfe:	460b      	mov	r3, r1
 8010e00:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 8010e04:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010e08:	2a00      	cmp	r2, #0
 8010e0a:	f173 0300 	sbcs.w	r3, r3, #0
 8010e0e:	da05      	bge.n	8010e1c <VL53LX_f_023+0x390>
				tmp0 = (uint64_t)VL53LX_D_006;
 8010e10:	f04f 32ff 	mov.w	r2, #4294967295
 8010e14:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010e18:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70



			if (tmp0 > (uint64_t)VL53LX_D_007) {
 8010e1c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010e20:	2b01      	cmp	r3, #1
 8010e22:	bf08      	it	eq
 8010e24:	2a00      	cmpeq	r2, #0
 8010e26:	d32a      	bcc.n	8010e7e <VL53LX_f_023+0x3f2>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8010e28:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010e2c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010e30:	f7ef fe6c 	bl	8000b0c <__aeabi_uldivmod>
 8010e34:	4602      	mov	r2, r0
 8010e36:	460b      	mov	r3, r1
 8010e38:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, 4);
 8010e3c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010e40:	f04f 0200 	mov.w	r2, #0
 8010e44:	f04f 0300 	mov.w	r3, #0
 8010e48:	0882      	lsrs	r2, r0, #2
 8010e4a:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8010e4e:	088b      	lsrs	r3, r1, #2
 8010e50:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = tmp0 * pll_period_mm;
 8010e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e56:	461a      	mov	r2, r3
 8010e58:	f04f 0300 	mov.w	r3, #0
 8010e5c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010e5e:	fb02 f001 	mul.w	r0, r2, r1
 8010e62:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010e64:	fb03 f101 	mul.w	r1, r3, r1
 8010e68:	4401      	add	r1, r0
 8010e6a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8010e6c:	fba0 2302 	umull	r2, r3, r0, r2
 8010e70:	4419      	add	r1, r3
 8010e72:	460b      	mov	r3, r1
 8010e74:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8010e78:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8010e7c:	e029      	b.n	8010ed2 <VL53LX_f_023+0x446>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8010e7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e80:	461a      	mov	r2, r3
 8010e82:	f04f 0300 	mov.w	r3, #0
 8010e86:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010e88:	fb02 f001 	mul.w	r0, r2, r1
 8010e8c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010e8e:	fb03 f101 	mul.w	r1, r3, r1
 8010e92:	4401      	add	r1, r0
 8010e94:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8010e96:	fba0 2302 	umull	r2, r3, r0, r2
 8010e9a:	4419      	add	r1, r3
 8010e9c:	460b      	mov	r3, r1
 8010e9e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8010ea2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8010ea6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010eaa:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010eae:	f7ef fe2d 	bl	8000b0c <__aeabi_uldivmod>
 8010eb2:	4602      	mov	r2, r0
 8010eb4:	460b      	mov	r3, r1
 8010eb6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, 4);
 8010eba:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010ebe:	f04f 0200 	mov.w	r2, #0
 8010ec2:	f04f 0300 	mov.w	r3, #0
 8010ec6:	0882      	lsrs	r2, r0, #2
 8010ec8:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8010ecc:	088b      	lsrs	r3, r1, #2
 8010ece:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 8010ed2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010ed6:	2a00      	cmp	r2, #0
 8010ed8:	f173 0300 	sbcs.w	r3, r3, #0
 8010edc:	da05      	bge.n	8010eea <VL53LX_f_023+0x45e>
				tmp0 = (uint64_t)VL53LX_D_006;
 8010ede:	f04f 32ff 	mov.w	r2, #4294967295
 8010ee2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010ee6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			tmp0 = tmp0 >> 2;
 8010eea:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010eee:	f04f 0200 	mov.w	r2, #0
 8010ef2:	f04f 0300 	mov.w	r3, #0
 8010ef6:	0882      	lsrs	r2, r0, #2
 8010ef8:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8010efc:	088b      	lsrs	r3, r1, #2
 8010efe:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			if (tmp0 > (uint64_t)VL53LX_D_007)
 8010f02:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010f06:	2b01      	cmp	r3, #1
 8010f08:	bf08      	it	eq
 8010f0a:	2a00      	cmpeq	r2, #0
 8010f0c:	d305      	bcc.n	8010f1a <VL53LX_f_023+0x48e>
				tmp0 = (uint64_t)VL53LX_D_007;
 8010f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8010f12:	f04f 0300 	mov.w	r3, #0
 8010f16:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 8010f1a:	f897 004f 	ldrb.w	r0, [r7, #79]	; 0x4f
 8010f1e:	f04f 0100 	mov.w	r1, #0
 8010f22:	f04f 0200 	mov.w	r2, #0
 8010f26:	f04f 0300 	mov.w	r3, #0
 8010f2a:	01cb      	lsls	r3, r1, #7
 8010f2c:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 8010f30:	01c2      	lsls	r2, r0, #7
 8010f32:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp1 = tmp1 * tmp1;
 8010f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f38:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010f3a:	fb02 f203 	mul.w	r2, r2, r3
 8010f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f40:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010f42:	fb01 f303 	mul.w	r3, r1, r3
 8010f46:	18d1      	adds	r1, r2, r3
 8010f48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010f4a:	fba3 2303 	umull	r2, r3, r3, r3
 8010f4e:	4419      	add	r1, r3
 8010f50:	460b      	mov	r3, r1
 8010f52:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8010f56:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp0 = tmp0 + tmp1;
 8010f5a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010f5e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010f62:	1884      	adds	r4, r0, r2
 8010f64:	603c      	str	r4, [r7, #0]
 8010f66:	eb41 0303 	adc.w	r3, r1, r3
 8010f6a:	607b      	str	r3, [r7, #4]
 8010f6c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010f70:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70


			if (tmp0 > (uint64_t)VL53LX_D_007)
 8010f74:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010f78:	2b01      	cmp	r3, #1
 8010f7a:	bf08      	it	eq
 8010f7c:	2a00      	cmpeq	r2, #0
 8010f7e:	d305      	bcc.n	8010f8c <VL53LX_f_023+0x500>
				tmp0 = (uint64_t)VL53LX_D_007;
 8010f80:	f04f 32ff 	mov.w	r2, #4294967295
 8010f84:	f04f 0300 	mov.w	r3, #0
 8010f88:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			sigma_int = VL53LX_isqrt((uint32_t)tmp0);
 8010f8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f7fb f821 	bl	800bfd6 <VL53LX_isqrt>
 8010f94:	6578      	str	r0, [r7, #84]	; 0x54

			*psigma_est = (uint16_t)sigma_int;
 8010f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f98:	b29a      	uxth	r2, r3
 8010f9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010f9e:	801a      	strh	r2, [r3, #0]

			status = VL53LX_ERROR_NONE;
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		}

	}

	return status;
 8010fa6:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
}
 8010faa:	4618      	mov	r0, r3
 8010fac:	3784      	adds	r7, #132	; 0x84
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010fb4 <VL53LX_wait_for_test_completion>:
}


VL53LX_Error VL53LX_wait_for_test_completion(
	VL53LX_DEV     Dev)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b086      	sub	sp, #24
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	3318      	adds	r3, #24
 8010fc4:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53LX_WAIT_METHOD_BLOCKING) {
 8010fca:	693b      	ldr	r3, [r7, #16]
 8010fcc:	781b      	ldrb	r3, [r3, #0]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d107      	bne.n	8010fe2 <VL53LX_wait_for_test_completion+0x2e>



		status =
			VL53LX_poll_for_range_completion(
 8010fd2:	f64e 2160 	movw	r1, #60000	; 0xea60
 8010fd6:	6878      	ldr	r0, [r7, #4]
 8010fd8:	f000 f88b 	bl	80110f2 <VL53LX_poll_for_range_completion>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	75fb      	strb	r3, [r7, #23]
 8010fe0:	e01b      	b.n	801101a <VL53LX_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 8010fe6:	e011      	b.n	801100c <VL53LX_wait_for_test_completion+0x58>
			status = VL53LX_is_new_data_ready(
 8010fe8:	f107 030f 	add.w	r3, r7, #15
 8010fec:	4619      	mov	r1, r3
 8010fee:	6878      	ldr	r0, [r7, #4]
 8010ff0:	f000 f819 	bl	8011026 <VL53LX_is_new_data_ready>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53LX_ERROR_NONE) {
 8010ff8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d105      	bne.n	801100c <VL53LX_wait_for_test_completion+0x58>
				status = VL53LX_WaitMs(
 8011000:	2101      	movs	r1, #1
 8011002:	6878      	ldr	r0, [r7, #4]
 8011004:	f000 fce6 	bl	80119d4 <VL53LX_WaitMs>
 8011008:	4603      	mov	r3, r0
 801100a:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 801100c:	7bfb      	ldrb	r3, [r7, #15]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d103      	bne.n	801101a <VL53LX_wait_for_test_completion+0x66>
 8011012:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d0e6      	beq.n	8010fe8 <VL53LX_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 801101a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801101e:	4618      	mov	r0, r3
 8011020:	3718      	adds	r7, #24
 8011022:	46bd      	mov	sp, r7
 8011024:	bd80      	pop	{r7, pc}

08011026 <VL53LX_is_new_data_ready>:


VL53LX_Error VL53LX_is_new_data_ready(
	VL53LX_DEV     Dev,
	uint8_t       *pready)
{
 8011026:	b580      	push	{r7, lr}
 8011028:	b086      	sub	sp, #24
 801102a:	af00      	add	r7, sp, #0
 801102c:	6078      	str	r0, [r7, #4]
 801102e:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8011030:	2300      	movs	r3, #0
 8011032:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	3318      	adds	r3, #24
 8011038:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 801103a:	2300      	movs	r3, #0
 801103c:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 801103e:	2300      	movs	r3, #0
 8011040:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 8011042:	2300      	movs	r3, #0
 8011044:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8011046:	693b      	ldr	r3, [r7, #16]
 8011048:	f893 330a 	ldrb.w	r3, [r3, #778]	; 0x30a
	gpio__mux_active_high_hv =
 801104c:	f003 0310 	and.w	r3, r3, #16
 8011050:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8011052:	7bfb      	ldrb	r3, [r7, #15]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d102      	bne.n	801105e <VL53LX_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 8011058:	2301      	movs	r3, #1
 801105a:	75fb      	strb	r3, [r7, #23]
 801105c:	e001      	b.n	8011062 <VL53LX_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 801105e:	2300      	movs	r3, #0
 8011060:	75fb      	strb	r3, [r7, #23]



	status = VL53LX_RdByte(
 8011062:	f107 030e 	add.w	r3, r7, #14
 8011066:	461a      	mov	r2, r3
 8011068:	2131      	movs	r1, #49	; 0x31
 801106a:	6878      	ldr	r0, [r7, #4]
 801106c:	f000 fc2a 	bl	80118c4 <VL53LX_RdByte>
 8011070:	4603      	mov	r3, r0
 8011072:	75bb      	strb	r3, [r7, #22]
					VL53LX_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8011074:	7bbb      	ldrb	r3, [r7, #14]
 8011076:	f003 0201 	and.w	r2, r3, #1
 801107a:	7dfb      	ldrb	r3, [r7, #23]
 801107c:	429a      	cmp	r2, r3
 801107e:	d103      	bne.n	8011088 <VL53LX_is_new_data_ready+0x62>
		*pready = 0x01;
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	2201      	movs	r2, #1
 8011084:	701a      	strb	r2, [r3, #0]
 8011086:	e002      	b.n	801108e <VL53LX_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 8011088:	683b      	ldr	r3, [r7, #0]
 801108a:	2200      	movs	r2, #0
 801108c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 801108e:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8011092:	4618      	mov	r0, r3
 8011094:	3718      	adds	r7, #24
 8011096:	46bd      	mov	sp, r7
 8011098:	bd80      	pop	{r7, pc}

0801109a <VL53LX_poll_for_boot_completion>:


VL53LX_Error VL53LX_poll_for_boot_completion(
	VL53LX_DEV    Dev,
	uint32_t      timeout_ms)
{
 801109a:	b580      	push	{r7, lr}
 801109c:	b086      	sub	sp, #24
 801109e:	af02      	add	r7, sp, #8
 80110a0:	6078      	str	r0, [r7, #4]
 80110a2:	6039      	str	r1, [r7, #0]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80110a4:	2300      	movs	r3, #0
 80110a6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53LX_WaitUs(
 80110a8:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80110ac:	6878      	ldr	r0, [r7, #4]
 80110ae:	f000 fca1 	bl	80119f4 <VL53LX_WaitUs>
 80110b2:	4603      	mov	r3, r0
 80110b4:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_FIRMWARE_BOOT_TIME_US);

	if (status == VL53LX_ERROR_NONE)
 80110b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d10b      	bne.n	80110d6 <VL53LX_poll_for_boot_completion+0x3c>
		status =
			VL53LX_WaitValueMaskEx(
 80110be:	2301      	movs	r3, #1
 80110c0:	9301      	str	r3, [sp, #4]
 80110c2:	2301      	movs	r3, #1
 80110c4:	9300      	str	r3, [sp, #0]
 80110c6:	2301      	movs	r3, #1
 80110c8:	22e5      	movs	r2, #229	; 0xe5
 80110ca:	6839      	ldr	r1, [r7, #0]
 80110cc:	6878      	ldr	r0, [r7, #4]
 80110ce:	f000 fca9 	bl	8011a24 <VL53LX_WaitValueMaskEx>
 80110d2:	4603      	mov	r3, r0
 80110d4:	73fb      	strb	r3, [r7, #15]
				VL53LX_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53LX_POLLING_DELAY_MS);

	if (status == VL53LX_ERROR_NONE)
 80110d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d103      	bne.n	80110e6 <VL53LX_poll_for_boot_completion+0x4c>
		VL53LX_init_ll_driver_state(Dev, VL53LX_DEVICESTATE_SW_STANDBY);
 80110de:	2103      	movs	r1, #3
 80110e0:	6878      	ldr	r0, [r7, #4]
 80110e2:	f7f7 f815 	bl	8008110 <VL53LX_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 80110e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80110ea:	4618      	mov	r0, r3
 80110ec:	3710      	adds	r7, #16
 80110ee:	46bd      	mov	sp, r7
 80110f0:	bd80      	pop	{r7, pc}

080110f2 <VL53LX_poll_for_range_completion>:


VL53LX_Error VL53LX_poll_for_range_completion(
	VL53LX_DEV     Dev,
	uint32_t       timeout_ms)
{
 80110f2:	b580      	push	{r7, lr}
 80110f4:	b088      	sub	sp, #32
 80110f6:	af02      	add	r7, sp, #8
 80110f8:	6078      	str	r0, [r7, #4]
 80110fa:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80110fc:	2300      	movs	r3, #0
 80110fe:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	3318      	adds	r3, #24
 8011104:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8011106:	2300      	movs	r3, #0
 8011108:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 801110a:	2300      	movs	r3, #0
 801110c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 801110e:	693b      	ldr	r3, [r7, #16]
 8011110:	f893 330a 	ldrb.w	r3, [r3, #778]	; 0x30a
	gpio__mux_active_high_hv =
 8011114:	f003 0310 	and.w	r3, r3, #16
 8011118:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 801111a:	7bfb      	ldrb	r3, [r7, #15]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d102      	bne.n	8011126 <VL53LX_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 8011120:	2301      	movs	r3, #1
 8011122:	75fb      	strb	r3, [r7, #23]
 8011124:	e001      	b.n	801112a <VL53LX_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 8011126:	2300      	movs	r3, #0
 8011128:	75fb      	strb	r3, [r7, #23]

	status =
		VL53LX_WaitValueMaskEx(
 801112a:	7dfb      	ldrb	r3, [r7, #23]
 801112c:	2201      	movs	r2, #1
 801112e:	9201      	str	r2, [sp, #4]
 8011130:	2201      	movs	r2, #1
 8011132:	9200      	str	r2, [sp, #0]
 8011134:	2231      	movs	r2, #49	; 0x31
 8011136:	6839      	ldr	r1, [r7, #0]
 8011138:	6878      	ldr	r0, [r7, #4]
 801113a:	f000 fc73 	bl	8011a24 <VL53LX_WaitValueMaskEx>
 801113e:	4603      	mov	r3, r0
 8011140:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53LX_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8011142:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8011146:	4618      	mov	r0, r3
 8011148:	3718      	adds	r7, #24
 801114a:	46bd      	mov	sp, r7
 801114c:	bd80      	pop	{r7, pc}

0801114e <VL53LX_f_032>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 801114e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011152:	b0a2      	sub	sp, #136	; 0x88
 8011154:	af00      	add	r7, sp, #0
 8011156:	65f8      	str	r0, [r7, #92]	; 0x5c
 8011158:	4618      	mov	r0, r3
 801115a:	460b      	mov	r3, r1
 801115c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8011160:	4613      	mov	r3, r2
 8011162:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8011166:	4603      	mov	r3, r0
 8011168:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57



	VL53LX_Error status = VL53LX_ERROR_NONE;
 801116c:	2300      	movs	r3, #0
 801116e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	uint8_t row = 0;
 8011172:	2300      	movs	r3, #0
 8011174:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t col = 0;
 8011178:	2300      	movs	r3, #0
 801117a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65



	int16_t  bound_l_x = 0;
 801117e:	2300      	movs	r3, #0
 8011180:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	int16_t  bound_r_x = 0;
 8011184:	2300      	movs	r3, #0
 8011186:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	int16_t  bound_u_y = 0;
 801118a:	2300      	movs	r3, #0
 801118c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	int16_t  bound_d_y = 0;
 8011190:	2300      	movs	r3, #0
 8011192:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

	int64_t xtalk_rate_ll = 0;
 8011196:	f04f 0200 	mov.w	r2, #0
 801119a:	f04f 0300 	mov.w	r3, #0
 801119e:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	int64_t xtalk_rate_ur = 0;
 80111a2:	f04f 0200 	mov.w	r2, #0
 80111a6:	f04f 0300 	mov.w	r3, #0
 80111aa:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

	int64_t xtalk_avg = 0;
 80111ae:	f04f 0200 	mov.w	r2, #0
 80111b2:	f04f 0300 	mov.w	r3, #0
 80111b6:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68





	if (status == VL53LX_ERROR_NONE) {
 80111ba:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d108      	bne.n	80111d4 <VL53LX_f_032+0x86>
		VL53LX_decode_row_col(
 80111c2:	f107 0265 	add.w	r2, r7, #101	; 0x65
 80111c6:	f107 0166 	add.w	r1, r7, #102	; 0x66
 80111ca:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 80111ce:	4618      	mov	r0, r3
 80111d0:	f7fb fad4 	bl	800c77c <VL53LX_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53LX_ERROR_NONE) {
 80111d4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d165      	bne.n	80112a8 <VL53LX_f_032+0x15a>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 80111dc:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80111e0:	091b      	lsrs	r3, r3, #4
 80111e2:	b2db      	uxtb	r3, r3
 80111e4:	f003 0301 	and.w	r3, r3, #1
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d00e      	beq.n	801120a <VL53LX_f_032+0xbc>
			bound_l_x = (int16_t) col -
 80111ec:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80111f0:	b29a      	uxth	r2, r3
 80111f2:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80111f6:	095b      	lsrs	r3, r3, #5
 80111f8:	b2db      	uxtb	r3, r3
 80111fa:	b29b      	uxth	r3, r3
 80111fc:	1ad3      	subs	r3, r2, r3
 80111fe:	b29b      	uxth	r3, r3
 8011200:	3b01      	subs	r3, #1
 8011202:	b29b      	uxth	r3, r3
 8011204:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8011208:	e00b      	b.n	8011222 <VL53LX_f_032+0xd4>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 801120a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 801120e:	b29a      	uxth	r2, r3
 8011210:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8011214:	095b      	lsrs	r3, r3, #5
 8011216:	b2db      	uxtb	r3, r3
 8011218:	b29b      	uxth	r3, r3
 801121a:	1ad3      	subs	r3, r2, r3
 801121c:	b29b      	uxth	r3, r3
 801121e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8011222:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8011226:	b29a      	uxth	r2, r3
 8011228:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 801122c:	095b      	lsrs	r3, r3, #5
 801122e:	b2db      	uxtb	r3, r3
 8011230:	b29b      	uxth	r3, r3
 8011232:	4413      	add	r3, r2
 8011234:	b29b      	uxth	r3, r3
 8011236:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 801123a:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 801123e:	f003 0301 	and.w	r3, r3, #1
 8011242:	2b00      	cmp	r3, #0
 8011244:	d011      	beq.n	801126a <VL53LX_f_032+0x11c>
			bound_d_y = (int16_t) row -
 8011246:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 801124a:	b299      	uxth	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 801124c:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8011250:	f003 020f 	and.w	r2, r3, #15
 8011254:	0fd3      	lsrs	r3, r2, #31
 8011256:	4413      	add	r3, r2
 8011258:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 801125a:	b29b      	uxth	r3, r3
 801125c:	1acb      	subs	r3, r1, r3
 801125e:	b29b      	uxth	r3, r3
 8011260:	3b01      	subs	r3, #1
 8011262:	b29b      	uxth	r3, r3
 8011264:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 8011268:	e00f      	b.n	801128a <VL53LX_f_032+0x13c>
		else
			bound_d_y = (int16_t) row -
 801126a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 801126e:	b299      	uxth	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 8011270:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8011274:	f003 020f 	and.w	r2, r3, #15
 8011278:	0fd3      	lsrs	r3, r2, #31
 801127a:	4413      	add	r3, r2
 801127c:	105b      	asrs	r3, r3, #1
 801127e:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 8011280:	b29b      	uxth	r3, r3
 8011282:	440b      	add	r3, r1
 8011284:	b29b      	uxth	r3, r3
 8011286:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

		bound_u_y = (int16_t) row +
 801128a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 801128e:	b299      	uxth	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 8011290:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8011294:	f003 020f 	and.w	r2, r3, #15
 8011298:	0fd3      	lsrs	r3, r2, #31
 801129a:	4413      	add	r3, r2
 801129c:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 801129e:	b29b      	uxth	r3, r3
 80112a0:	440b      	add	r3, r1
 80112a2:	b29b      	uxth	r3, r3
 80112a4:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
			"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 80112a8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d133      	bne.n	8011318 <VL53LX_f_032+0x1ca>
		bound_l_x =  (2 * bound_l_x) - 15 +
 80112b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80112b4:	b29a      	uxth	r2, r3
 80112b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80112ba:	4413      	add	r3, r2
 80112bc:	b29b      	uxth	r3, r3
 80112be:	005b      	lsls	r3, r3, #1
 80112c0:	b29b      	uxth	r3, r3
 80112c2:	3b0f      	subs	r3, #15
 80112c4:	b29b      	uxth	r3, r3
 80112c6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 80112ca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80112ce:	b29a      	uxth	r2, r3
 80112d0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80112d4:	4413      	add	r3, r2
 80112d6:	b29b      	uxth	r3, r3
 80112d8:	005b      	lsls	r3, r3, #1
 80112da:	b29b      	uxth	r3, r3
 80112dc:	3b0f      	subs	r3, #15
 80112de:	b29b      	uxth	r3, r3
 80112e0:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 80112e4:	f997 30a8 	ldrsb.w	r3, [r7, #168]	; 0xa8
 80112e8:	b29a      	uxth	r2, r3
 80112ea:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80112ee:	4413      	add	r3, r2
 80112f0:	b29b      	uxth	r3, r3
 80112f2:	005b      	lsls	r3, r3, #1
 80112f4:	b29b      	uxth	r3, r3
 80112f6:	3b0f      	subs	r3, #15
 80112f8:	b29b      	uxth	r3, r3
 80112fa:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 80112fe:	f997 30a8 	ldrsb.w	r3, [r7, #168]	; 0xa8
 8011302:	b29a      	uxth	r2, r3
 8011304:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8011308:	4413      	add	r3, r2
 801130a:	b29b      	uxth	r3, r3
 801130c:	005b      	lsls	r3, r3, #1
 801130e:	b29b      	uxth	r3, r3
 8011310:	3b0f      	subs	r3, #15
 8011312:	b29b      	uxth	r3, r3
 8011314:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 8011318:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 801131c:	2b00      	cmp	r3, #0
 801131e:	f040 80cb 	bne.w	80114b8 <VL53LX_f_032+0x36a>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8011322:	f9b7 0086 	ldrsh.w	r0, [r7, #134]	; 0x86
 8011326:	ea4f 71e0 	mov.w	r1, r0, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 801132a:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 801132e:	ea4f 73e2 	mov.w	r3, r2, asr #31
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8011332:	fb02 f501 	mul.w	r5, r2, r1
 8011336:	fb00 f403 	mul.w	r4, r0, r3
 801133a:	442c      	add	r4, r5
 801133c:	fba0 8902 	umull	r8, r9, r0, r2
 8011340:	eb04 0309 	add.w	r3, r4, r9
 8011344:	4699      	mov	r9, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8011346:	f9b7 0080 	ldrsh.w	r0, [r7, #128]	; 0x80
 801134a:	ea4f 71e0 	mov.w	r1, r0, asr #31
					((int64_t)ygradient));
 801134e:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8011352:	ea4f 73e2 	mov.w	r3, r2, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8011356:	fb02 f501 	mul.w	r5, r2, r1
 801135a:	fb00 f403 	mul.w	r4, r0, r3
 801135e:	442c      	add	r4, r5
 8011360:	fba0 2302 	umull	r2, r3, r0, r2
 8011364:	18e1      	adds	r1, r4, r3
 8011366:	460b      	mov	r3, r1
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8011368:	eb18 0102 	adds.w	r1, r8, r2
 801136c:	6339      	str	r1, [r7, #48]	; 0x30
 801136e:	eb49 0303 	adc.w	r3, r9, r3
 8011372:	637b      	str	r3, [r7, #52]	; 0x34
 8011374:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8011378:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 801137c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8011380:	f112 0a01 	adds.w	sl, r2, #1
 8011384:	f143 0b00 	adc.w	fp, r3, #0
 8011388:	ea4f 73db 	mov.w	r3, fp, lsr #31
 801138c:	461a      	mov	r2, r3
 801138e:	f04f 0300 	mov.w	r3, #0
 8011392:	eb12 010a 	adds.w	r1, r2, sl
 8011396:	62b9      	str	r1, [r7, #40]	; 0x28
 8011398:	eb43 030b 	adc.w	r3, r3, fp
 801139c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801139e:	f04f 0200 	mov.w	r2, #0
 80113a2:	f04f 0300 	mov.w	r3, #0
 80113a6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80113aa:	4621      	mov	r1, r4
 80113ac:	084a      	lsrs	r2, r1, #1
 80113ae:	4629      	mov	r1, r5
 80113b0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80113b4:	4629      	mov	r1, r5
 80113b6:	104b      	asrs	r3, r1, #1
 80113b8:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 80113bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80113be:	461a      	mov	r2, r3
 80113c0:	f04f 0300 	mov.w	r3, #0
 80113c4:	f04f 0000 	mov.w	r0, #0
 80113c8:	f04f 0100 	mov.w	r1, #0
 80113cc:	0099      	lsls	r1, r3, #2
 80113ce:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80113d2:	0090      	lsls	r0, r2, #2
 80113d4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80113d8:	1814      	adds	r4, r2, r0
 80113da:	623c      	str	r4, [r7, #32]
 80113dc:	414b      	adcs	r3, r1
 80113de:	627b      	str	r3, [r7, #36]	; 0x24
 80113e0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80113e4:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 80113e8:	f9b7 0084 	ldrsh.w	r0, [r7, #132]	; 0x84
 80113ec:	ea4f 71e0 	mov.w	r1, r0, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80113f0:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 80113f4:	ea4f 73e2 	mov.w	r3, r2, asr #31
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 80113f8:	fb02 f501 	mul.w	r5, r2, r1
 80113fc:	fb00 f403 	mul.w	r4, r0, r3
 8011400:	442c      	add	r4, r5
 8011402:	fba0 8902 	umull	r8, r9, r0, r2
 8011406:	eb04 0309 	add.w	r3, r4, r9
 801140a:	4699      	mov	r9, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 801140c:	f9b7 0082 	ldrsh.w	r0, [r7, #130]	; 0x82
 8011410:	ea4f 71e0 	mov.w	r1, r0, asr #31
			((int64_t)ygradient));
 8011414:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8011418:	ea4f 73e2 	mov.w	r3, r2, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 801141c:	fb02 f501 	mul.w	r5, r2, r1
 8011420:	fb00 f403 	mul.w	r4, r0, r3
 8011424:	442c      	add	r4, r5
 8011426:	fba0 2302 	umull	r2, r3, r0, r2
 801142a:	18e1      	adds	r1, r4, r3
 801142c:	460b      	mov	r3, r1
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 801142e:	eb18 0102 	adds.w	r1, r8, r2
 8011432:	61b9      	str	r1, [r7, #24]
 8011434:	eb49 0303 	adc.w	r3, r9, r3
 8011438:	61fb      	str	r3, [r7, #28]
 801143a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801143e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8011442:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8011446:	1c51      	adds	r1, r2, #1
 8011448:	64b9      	str	r1, [r7, #72]	; 0x48
 801144a:	f143 0300 	adc.w	r3, r3, #0
 801144e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011450:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8011454:	462b      	mov	r3, r5
 8011456:	0fdb      	lsrs	r3, r3, #31
 8011458:	461a      	mov	r2, r3
 801145a:	f04f 0300 	mov.w	r3, #0
 801145e:	4621      	mov	r1, r4
 8011460:	1851      	adds	r1, r2, r1
 8011462:	6139      	str	r1, [r7, #16]
 8011464:	4629      	mov	r1, r5
 8011466:	eb43 0101 	adc.w	r1, r3, r1
 801146a:	6179      	str	r1, [r7, #20]
 801146c:	f04f 0200 	mov.w	r2, #0
 8011470:	f04f 0300 	mov.w	r3, #0
 8011474:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8011478:	4621      	mov	r1, r4
 801147a:	084a      	lsrs	r2, r1, #1
 801147c:	4629      	mov	r1, r5
 801147e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8011482:	4629      	mov	r1, r5
 8011484:	104b      	asrs	r3, r1, #1
 8011486:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 801148a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801148c:	4618      	mov	r0, r3
 801148e:	f04f 0100 	mov.w	r1, #0
 8011492:	f04f 0200 	mov.w	r2, #0
 8011496:	f04f 0300 	mov.w	r3, #0
 801149a:	008b      	lsls	r3, r1, #2
 801149c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80114a0:	0082      	lsls	r2, r0, #2
 80114a2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80114a6:	1884      	adds	r4, r0, r2
 80114a8:	60bc      	str	r4, [r7, #8]
 80114aa:	eb41 0303 	adc.w	r3, r1, r3
 80114ae:	60fb      	str	r3, [r7, #12]
 80114b0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80114b4:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53LX_ERROR_NONE)
 80114b8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d12e      	bne.n	801151e <VL53LX_f_032+0x3d0>
		xtalk_avg = do_division_s(
 80114c0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80114c4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80114c8:	1884      	adds	r4, r0, r2
 80114ca:	643c      	str	r4, [r7, #64]	; 0x40
 80114cc:	eb41 0303 	adc.w	r3, r1, r3
 80114d0:	647b      	str	r3, [r7, #68]	; 0x44
 80114d2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80114d6:	460b      	mov	r3, r1
 80114d8:	3301      	adds	r3, #1
 80114da:	63bb      	str	r3, [r7, #56]	; 0x38
 80114dc:	4613      	mov	r3, r2
 80114de:	f143 0300 	adc.w	r3, r3, #0
 80114e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80114e4:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80114e8:	462b      	mov	r3, r5
 80114ea:	0fdb      	lsrs	r3, r3, #31
 80114ec:	461a      	mov	r2, r3
 80114ee:	f04f 0300 	mov.w	r3, #0
 80114f2:	4621      	mov	r1, r4
 80114f4:	1851      	adds	r1, r2, r1
 80114f6:	6039      	str	r1, [r7, #0]
 80114f8:	4629      	mov	r1, r5
 80114fa:	eb43 0101 	adc.w	r1, r3, r1
 80114fe:	6079      	str	r1, [r7, #4]
 8011500:	f04f 0200 	mov.w	r2, #0
 8011504:	f04f 0300 	mov.w	r3, #0
 8011508:	e9d7 4500 	ldrd	r4, r5, [r7]
 801150c:	4621      	mov	r1, r4
 801150e:	084a      	lsrs	r2, r1, #1
 8011510:	4629      	mov	r1, r5
 8011512:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8011516:	4629      	mov	r1, r5
 8011518:	104b      	asrs	r3, r1, #1
 801151a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53LX_ERROR_NONE)
 801151e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8011522:	2b00      	cmp	r3, #0
 8011524:	d10b      	bne.n	801153e <VL53LX_f_032+0x3f0>
		if (xtalk_avg < 0)
 8011526:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801152a:	2a00      	cmp	r2, #0
 801152c:	f173 0300 	sbcs.w	r3, r3, #0
 8011530:	da05      	bge.n	801153e <VL53LX_f_032+0x3f0>
			xtalk_avg = 0;
 8011532:	f04f 0200 	mov.w	r2, #0
 8011536:	f04f 0300 	mov.w	r3, #0
 801153a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 801153e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011540:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011544:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 8011546:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 801154a:	4618      	mov	r0, r3
 801154c:	3788      	adds	r7, #136	; 0x88
 801154e:	46bd      	mov	sp, r7
 8011550:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011554 <VL53LX_f_033>:
	VL53LX_histogram_bin_data_t    *phist_data,
	VL53LX_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53LX_histogram_bin_data_t    *pxtalkcount_data
	)
{
 8011554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011558:	b08d      	sub	sp, #52	; 0x34
 801155a:	af00      	add	r7, sp, #0
 801155c:	60f8      	str	r0, [r7, #12]
 801155e:	60b9      	str	r1, [r7, #8]
 8011560:	607a      	str	r2, [r7, #4]
 8011562:	603b      	str	r3, [r7, #0]


	VL53LX_Error status              = VL53LX_ERROR_NONE;
 8011564:	2300      	movs	r3, #0
 8011566:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	uint64_t xtalk_events_per_spad = 0;
 801156a:	f04f 0200 	mov.w	r2, #0
 801156e:	f04f 0300 	mov.w	r3, #0
 8011572:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint64_t xtalk_total_events = 0;
 8011576:	f04f 0200 	mov.w	r2, #0
 801157a:	f04f 0300 	mov.w	r3, #0
 801157e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	uint64_t xtalk_temp_bin = 0;
 8011582:	f04f 0200 	mov.w	r2, #0
 8011586:	f04f 0300 	mov.w	r3, #0
 801158a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	uint8_t  i = 0;
 801158e:	2300      	movs	r3, #0
 8011590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	4618      	mov	r0, r3
 8011598:	f04f 0100 	mov.w	r1, #0
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80115a2:	461a      	mov	r2, r3
 80115a4:	f04f 0300 	mov.w	r3, #0
 80115a8:	fb02 fc01 	mul.w	ip, r2, r1
 80115ac:	fb00 f603 	mul.w	r6, r0, r3
 80115b0:	4466      	add	r6, ip
 80115b2:	fba0 2302 	umull	r2, r3, r0, r2
 80115b6:	18f1      	adds	r1, r6, r3
 80115b8:	460b      	mov	r3, r1
 80115ba:	f512 7afa 	adds.w	sl, r2, #500	; 0x1f4
 80115be:	f143 0b00 	adc.w	fp, r3, #0
 80115c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80115c6:	f04f 0300 	mov.w	r3, #0
 80115ca:	4650      	mov	r0, sl
 80115cc:	4659      	mov	r1, fp
 80115ce:	f7ef fa9d 	bl	8000b0c <__aeabi_uldivmod>
 80115d2:	4602      	mov	r2, r0
 80115d4:	460b      	mov	r3, r1
 80115d6:	e9c7 2306 	strd	r2, r3, [r7, #24]




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80115e0:	b29a      	uxth	r2, r3
 80115e2:	f04f 0300 	mov.w	r3, #0
	xtalk_total_events = xtalk_events_per_spad *
 80115e6:	69f9      	ldr	r1, [r7, #28]
 80115e8:	fb02 f001 	mul.w	r0, r2, r1
 80115ec:	69b9      	ldr	r1, [r7, #24]
 80115ee:	fb03 f101 	mul.w	r1, r3, r1
 80115f2:	4401      	add	r1, r0
 80115f4:	69b8      	ldr	r0, [r7, #24]
 80115f6:	fba0 2302 	umull	r2, r3, r0, r2
 80115fa:	4419      	add	r1, r3
 80115fc:	460b      	mov	r3, r1
 80115fe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8011602:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 8011606:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801160a:	f04f 0200 	mov.w	r2, #0
 801160e:	f04f 0300 	mov.w	r3, #0
 8011612:	0a02      	lsrs	r2, r0, #8
 8011614:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8011618:	0a0b      	lsrs	r3, r1, #8
 801161a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 801161e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8011622:	f512 6880 	adds.w	r8, r2, #1024	; 0x400
 8011626:	f143 0900 	adc.w	r9, r3, #0
 801162a:	f04f 0200 	mov.w	r2, #0
 801162e:	f04f 0300 	mov.w	r3, #0
 8011632:	ea4f 22d8 	mov.w	r2, r8, lsr #11
 8011636:	ea42 5249 	orr.w	r2, r2, r9, lsl #21
 801163a:	ea4f 23d9 	mov.w	r3, r9, lsr #11
 801163e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (xtalk_total_events > 0xFFFFFFFF)
 8011642:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8011646:	2b01      	cmp	r3, #1
 8011648:	bf08      	it	eq
 801164a:	2a00      	cmpeq	r2, #0
 801164c:	d305      	bcc.n	801165a <VL53LX_f_033+0x106>
		xtalk_total_events = 0xFFFFFFFF;
 801164e:	f04f 32ff 	mov.w	r2, #4294967295
 8011652:	f04f 0300 	mov.w	r3, #0
 8011656:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28





	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 801165a:	2300      	movs	r3, #0
 801165c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011660:	e035      	b.n	80116ce <VL53LX_f_033+0x17a>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 8011662:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011666:	68ba      	ldr	r2, [r7, #8]
 8011668:	3302      	adds	r3, #2
 801166a:	009b      	lsls	r3, r3, #2
 801166c:	4413      	add	r3, r2
 801166e:	685b      	ldr	r3, [r3, #4]
 8011670:	461a      	mov	r2, r3
 8011672:	f04f 0300 	mov.w	r3, #0
 8011676:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011678:	fb02 f001 	mul.w	r0, r2, r1
 801167c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801167e:	fb03 f101 	mul.w	r1, r3, r1
 8011682:	4401      	add	r1, r0
 8011684:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011686:	fba0 2302 	umull	r2, r3, r0, r2
 801168a:	4419      	add	r1, r3
 801168c:	460b      	mov	r3, r1
 801168e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8011692:	e9c7 2304 	strd	r2, r3, [r7, #16]
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 8011696:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801169a:	f512 7400 	adds.w	r4, r2, #512	; 0x200
 801169e:	f143 0500 	adc.w	r5, r3, #0
 80116a2:	f04f 0200 	mov.w	r2, #0
 80116a6:	f04f 0300 	mov.w	r3, #0
 80116aa:	0aa2      	lsrs	r2, r4, #10
 80116ac:	ea42 5285 	orr.w	r2, r2, r5, lsl #22
 80116b0:	0aab      	lsrs	r3, r5, #10
 80116b2:	e9c7 2304 	strd	r2, r3, [r7, #16]

		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 80116b6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80116ba:	6939      	ldr	r1, [r7, #16]
 80116bc:	683b      	ldr	r3, [r7, #0]
 80116be:	3206      	adds	r2, #6
 80116c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 80116c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80116c8:	3301      	adds	r3, #1
 80116ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80116ce:	68bb      	ldr	r3, [r7, #8]
 80116d0:	7a9b      	ldrb	r3, [r3, #10]
 80116d2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80116d6:	429a      	cmp	r2, r3
 80116d8:	d3c3      	bcc.n	8011662 <VL53LX_f_033+0x10e>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 80116da:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 80116de:	4618      	mov	r0, r3
 80116e0:	3734      	adds	r7, #52	; 0x34
 80116e2:	46bd      	mov	sp, r7
 80116e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080116e8 <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b084      	sub	sp, #16
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	60f8      	str	r0, [r7, #12]
 80116f0:	60b9      	str	r1, [r7, #8]
 80116f2:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	68db      	ldr	r3, [r3, #12]
 80116f8:	68fa      	ldr	r2, [r7, #12]
 80116fa:	8910      	ldrh	r0, [r2, #8]
 80116fc:	687a      	ldr	r2, [r7, #4]
 80116fe:	b292      	uxth	r2, r2
 8011700:	68b9      	ldr	r1, [r7, #8]
 8011702:	4798      	blx	r3
 8011704:	4603      	mov	r3, r0
}
 8011706:	4618      	mov	r0, r3
 8011708:	3710      	adds	r7, #16
 801170a:	46bd      	mov	sp, r7
 801170c:	bd80      	pop	{r7, pc}

0801170e <_I2CRead>:

int _I2CRead(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 801170e:	b580      	push	{r7, lr}
 8011710:	b084      	sub	sp, #16
 8011712:	af00      	add	r7, sp, #0
 8011714:	60f8      	str	r0, [r7, #12]
 8011716:	60b9      	str	r1, [r7, #8]
 8011718:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	691b      	ldr	r3, [r3, #16]
 801171e:	68fa      	ldr	r2, [r7, #12]
 8011720:	8910      	ldrh	r0, [r2, #8]
 8011722:	687a      	ldr	r2, [r7, #4]
 8011724:	b292      	uxth	r2, r2
 8011726:	68b9      	ldr	r1, [r7, #8]
 8011728:	4798      	blx	r3
 801172a:	4603      	mov	r3, r0
}
 801172c:	4618      	mov	r0, r3
 801172e:	3710      	adds	r7, #16
 8011730:	46bd      	mov	sp, r7
 8011732:	bd80      	pop	{r7, pc}

08011734 <VL53LX_WriteMulti>:

VL53LX_Error VL53LX_WriteMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8011734:	b580      	push	{r7, lr}
 8011736:	b086      	sub	sp, #24
 8011738:	af00      	add	r7, sp, #0
 801173a:	60f8      	str	r0, [r7, #12]
 801173c:	607a      	str	r2, [r7, #4]
 801173e:	603b      	str	r3, [r7, #0]
 8011740:	460b      	mov	r3, r1
 8011742:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8011744:	2300      	movs	r3, #0
 8011746:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	2bff      	cmp	r3, #255	; 0xff
 801174c:	d902      	bls.n	8011754 <VL53LX_WriteMulti+0x20>
        return VL53LX_ERROR_INVALID_PARAMS;
 801174e:	f06f 0303 	mvn.w	r3, #3
 8011752:	e01d      	b.n	8011790 <VL53LX_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8011754:	897b      	ldrh	r3, [r7, #10]
 8011756:	0a1b      	lsrs	r3, r3, #8
 8011758:	b29b      	uxth	r3, r3
 801175a:	b2da      	uxtb	r2, r3
 801175c:	4b0e      	ldr	r3, [pc, #56]	; (8011798 <VL53LX_WriteMulti+0x64>)
 801175e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8011760:	897b      	ldrh	r3, [r7, #10]
 8011762:	b2da      	uxtb	r2, r3
 8011764:	4b0c      	ldr	r3, [pc, #48]	; (8011798 <VL53LX_WriteMulti+0x64>)
 8011766:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8011768:	683a      	ldr	r2, [r7, #0]
 801176a:	6879      	ldr	r1, [r7, #4]
 801176c:	480b      	ldr	r0, [pc, #44]	; (801179c <VL53LX_WriteMulti+0x68>)
 801176e:	f003 fa39 	bl	8014be4 <memcpy>
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 8011772:	683b      	ldr	r3, [r7, #0]
 8011774:	3302      	adds	r3, #2
 8011776:	461a      	mov	r2, r3
 8011778:	4907      	ldr	r1, [pc, #28]	; (8011798 <VL53LX_WriteMulti+0x64>)
 801177a:	68f8      	ldr	r0, [r7, #12]
 801177c:	f7ff ffb4 	bl	80116e8 <_I2CWrite>
 8011780:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8011782:	693b      	ldr	r3, [r7, #16]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d001      	beq.n	801178c <VL53LX_WriteMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011788:	23f3      	movs	r3, #243	; 0xf3
 801178a:	75fb      	strb	r3, [r7, #23]
    }
    VL53LX_PutI2cBus();
    return Status;
 801178c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011790:	4618      	mov	r0, r3
 8011792:	3718      	adds	r7, #24
 8011794:	46bd      	mov	sp, r7
 8011796:	bd80      	pop	{r7, pc}
 8011798:	200071ec 	.word	0x200071ec
 801179c:	200071ee 	.word	0x200071ee

080117a0 <VL53LX_ReadMulti>:

VL53LX_Error VL53LX_ReadMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b086      	sub	sp, #24
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	60f8      	str	r0, [r7, #12]
 80117a8:	607a      	str	r2, [r7, #4]
 80117aa:	603b      	str	r3, [r7, #0]
 80117ac:	460b      	mov	r3, r1
 80117ae:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 80117b0:	2300      	movs	r3, #0
 80117b2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80117b4:	897b      	ldrh	r3, [r7, #10]
 80117b6:	0a1b      	lsrs	r3, r3, #8
 80117b8:	b29b      	uxth	r3, r3
 80117ba:	b2da      	uxtb	r2, r3
 80117bc:	4b12      	ldr	r3, [pc, #72]	; (8011808 <VL53LX_ReadMulti+0x68>)
 80117be:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80117c0:	897b      	ldrh	r3, [r7, #10]
 80117c2:	b2da      	uxtb	r2, r3
 80117c4:	4b10      	ldr	r3, [pc, #64]	; (8011808 <VL53LX_ReadMulti+0x68>)
 80117c6:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80117c8:	2202      	movs	r2, #2
 80117ca:	490f      	ldr	r1, [pc, #60]	; (8011808 <VL53LX_ReadMulti+0x68>)
 80117cc:	68f8      	ldr	r0, [r7, #12]
 80117ce:	f7ff ff8b 	bl	80116e8 <_I2CWrite>
 80117d2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80117d4:	693b      	ldr	r3, [r7, #16]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d002      	beq.n	80117e0 <VL53LX_ReadMulti+0x40>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80117da:	23f3      	movs	r3, #243	; 0xf3
 80117dc:	75fb      	strb	r3, [r7, #23]
        goto done;
 80117de:	e00c      	b.n	80117fa <VL53LX_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 80117e0:	683a      	ldr	r2, [r7, #0]
 80117e2:	6879      	ldr	r1, [r7, #4]
 80117e4:	68f8      	ldr	r0, [r7, #12]
 80117e6:	f7ff ff92 	bl	801170e <_I2CRead>
 80117ea:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80117ec:	693b      	ldr	r3, [r7, #16]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d002      	beq.n	80117f8 <VL53LX_ReadMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80117f2:	23f3      	movs	r3, #243	; 0xf3
 80117f4:	75fb      	strb	r3, [r7, #23]
 80117f6:	e000      	b.n	80117fa <VL53LX_ReadMulti+0x5a>
    }
done:
 80117f8:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 80117fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80117fe:	4618      	mov	r0, r3
 8011800:	3718      	adds	r7, #24
 8011802:	46bd      	mov	sp, r7
 8011804:	bd80      	pop	{r7, pc}
 8011806:	bf00      	nop
 8011808:	200071ec 	.word	0x200071ec

0801180c <VL53LX_WrByte>:

VL53LX_Error VL53LX_WrByte(VL53LX_DEV Dev, uint16_t index, uint8_t data) {
 801180c:	b580      	push	{r7, lr}
 801180e:	b084      	sub	sp, #16
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
 8011814:	460b      	mov	r3, r1
 8011816:	807b      	strh	r3, [r7, #2]
 8011818:	4613      	mov	r3, r2
 801181a:	707b      	strb	r3, [r7, #1]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 801181c:	2300      	movs	r3, #0
 801181e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8011820:	887b      	ldrh	r3, [r7, #2]
 8011822:	0a1b      	lsrs	r3, r3, #8
 8011824:	b29b      	uxth	r3, r3
 8011826:	b2da      	uxtb	r2, r3
 8011828:	4b0c      	ldr	r3, [pc, #48]	; (801185c <VL53LX_WrByte+0x50>)
 801182a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 801182c:	887b      	ldrh	r3, [r7, #2]
 801182e:	b2da      	uxtb	r2, r3
 8011830:	4b0a      	ldr	r3, [pc, #40]	; (801185c <VL53LX_WrByte+0x50>)
 8011832:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8011834:	4a09      	ldr	r2, [pc, #36]	; (801185c <VL53LX_WrByte+0x50>)
 8011836:	787b      	ldrb	r3, [r7, #1]
 8011838:	7093      	strb	r3, [r2, #2]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 801183a:	2203      	movs	r2, #3
 801183c:	4907      	ldr	r1, [pc, #28]	; (801185c <VL53LX_WrByte+0x50>)
 801183e:	6878      	ldr	r0, [r7, #4]
 8011840:	f7ff ff52 	bl	80116e8 <_I2CWrite>
 8011844:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8011846:	68bb      	ldr	r3, [r7, #8]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d001      	beq.n	8011850 <VL53LX_WrByte+0x44>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 801184c:	23f3      	movs	r3, #243	; 0xf3
 801184e:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 8011850:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011854:	4618      	mov	r0, r3
 8011856:	3710      	adds	r7, #16
 8011858:	46bd      	mov	sp, r7
 801185a:	bd80      	pop	{r7, pc}
 801185c:	200071ec 	.word	0x200071ec

08011860 <VL53LX_WrWord>:

VL53LX_Error VL53LX_WrWord(VL53LX_DEV Dev, uint16_t index, uint16_t data) {
 8011860:	b580      	push	{r7, lr}
 8011862:	b084      	sub	sp, #16
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
 8011868:	460b      	mov	r3, r1
 801186a:	807b      	strh	r3, [r7, #2]
 801186c:	4613      	mov	r3, r2
 801186e:	803b      	strh	r3, [r7, #0]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8011870:	2300      	movs	r3, #0
 8011872:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8011874:	887b      	ldrh	r3, [r7, #2]
 8011876:	0a1b      	lsrs	r3, r3, #8
 8011878:	b29b      	uxth	r3, r3
 801187a:	b2da      	uxtb	r2, r3
 801187c:	4b10      	ldr	r3, [pc, #64]	; (80118c0 <VL53LX_WrWord+0x60>)
 801187e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8011880:	887b      	ldrh	r3, [r7, #2]
 8011882:	b2da      	uxtb	r2, r3
 8011884:	4b0e      	ldr	r3, [pc, #56]	; (80118c0 <VL53LX_WrWord+0x60>)
 8011886:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 8011888:	883b      	ldrh	r3, [r7, #0]
 801188a:	0a1b      	lsrs	r3, r3, #8
 801188c:	b29b      	uxth	r3, r3
 801188e:	b2da      	uxtb	r2, r3
 8011890:	4b0b      	ldr	r3, [pc, #44]	; (80118c0 <VL53LX_WrWord+0x60>)
 8011892:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 8011894:	883b      	ldrh	r3, [r7, #0]
 8011896:	b2da      	uxtb	r2, r3
 8011898:	4b09      	ldr	r3, [pc, #36]	; (80118c0 <VL53LX_WrWord+0x60>)
 801189a:	70da      	strb	r2, [r3, #3]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 801189c:	2204      	movs	r2, #4
 801189e:	4908      	ldr	r1, [pc, #32]	; (80118c0 <VL53LX_WrWord+0x60>)
 80118a0:	6878      	ldr	r0, [r7, #4]
 80118a2:	f7ff ff21 	bl	80116e8 <_I2CWrite>
 80118a6:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80118a8:	68bb      	ldr	r3, [r7, #8]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d001      	beq.n	80118b2 <VL53LX_WrWord+0x52>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80118ae:	23f3      	movs	r3, #243	; 0xf3
 80118b0:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 80118b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80118b6:	4618      	mov	r0, r3
 80118b8:	3710      	adds	r7, #16
 80118ba:	46bd      	mov	sp, r7
 80118bc:	bd80      	pop	{r7, pc}
 80118be:	bf00      	nop
 80118c0:	200071ec 	.word	0x200071ec

080118c4 <VL53LX_RdByte>:
    Status = VL53LX_WrByte(Dev, index, data);
done:
    return Status;
}

VL53LX_Error VL53LX_RdByte(VL53LX_DEV Dev, uint16_t index, uint8_t *data) {
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b086      	sub	sp, #24
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	60f8      	str	r0, [r7, #12]
 80118cc:	460b      	mov	r3, r1
 80118ce:	607a      	str	r2, [r7, #4]
 80118d0:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 80118d2:	2300      	movs	r3, #0
 80118d4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 80118d6:	897b      	ldrh	r3, [r7, #10]
 80118d8:	0a1b      	lsrs	r3, r3, #8
 80118da:	b29b      	uxth	r3, r3
 80118dc:	b2da      	uxtb	r2, r3
 80118de:	4b12      	ldr	r3, [pc, #72]	; (8011928 <VL53LX_RdByte+0x64>)
 80118e0:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80118e2:	897b      	ldrh	r3, [r7, #10]
 80118e4:	b2da      	uxtb	r2, r3
 80118e6:	4b10      	ldr	r3, [pc, #64]	; (8011928 <VL53LX_RdByte+0x64>)
 80118e8:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80118ea:	2202      	movs	r2, #2
 80118ec:	490e      	ldr	r1, [pc, #56]	; (8011928 <VL53LX_RdByte+0x64>)
 80118ee:	68f8      	ldr	r0, [r7, #12]
 80118f0:	f7ff fefa 	bl	80116e8 <_I2CWrite>
 80118f4:	6138      	str	r0, [r7, #16]
    if( status_int ){
 80118f6:	693b      	ldr	r3, [r7, #16]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d002      	beq.n	8011902 <VL53LX_RdByte+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80118fc:	23f3      	movs	r3, #243	; 0xf3
 80118fe:	75fb      	strb	r3, [r7, #23]
        goto done;
 8011900:	e00c      	b.n	801191c <VL53LX_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8011902:	2201      	movs	r2, #1
 8011904:	6879      	ldr	r1, [r7, #4]
 8011906:	68f8      	ldr	r0, [r7, #12]
 8011908:	f7ff ff01 	bl	801170e <_I2CRead>
 801190c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801190e:	693b      	ldr	r3, [r7, #16]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d002      	beq.n	801191a <VL53LX_RdByte+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011914:	23f3      	movs	r3, #243	; 0xf3
 8011916:	75fb      	strb	r3, [r7, #23]
 8011918:	e000      	b.n	801191c <VL53LX_RdByte+0x58>
    }
done:
 801191a:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 801191c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011920:	4618      	mov	r0, r3
 8011922:	3718      	adds	r7, #24
 8011924:	46bd      	mov	sp, r7
 8011926:	bd80      	pop	{r7, pc}
 8011928:	200071ec 	.word	0x200071ec

0801192c <VL53LX_RdWord>:

VL53LX_Error VL53LX_RdWord(VL53LX_DEV Dev, uint16_t index, uint16_t *data) {
 801192c:	b580      	push	{r7, lr}
 801192e:	b086      	sub	sp, #24
 8011930:	af00      	add	r7, sp, #0
 8011932:	60f8      	str	r0, [r7, #12]
 8011934:	460b      	mov	r3, r1
 8011936:	607a      	str	r2, [r7, #4]
 8011938:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 801193a:	2300      	movs	r3, #0
 801193c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 801193e:	897b      	ldrh	r3, [r7, #10]
 8011940:	0a1b      	lsrs	r3, r3, #8
 8011942:	b29b      	uxth	r3, r3
 8011944:	b2da      	uxtb	r2, r3
 8011946:	4b18      	ldr	r3, [pc, #96]	; (80119a8 <VL53LX_RdWord+0x7c>)
 8011948:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 801194a:	897b      	ldrh	r3, [r7, #10]
 801194c:	b2da      	uxtb	r2, r3
 801194e:	4b16      	ldr	r3, [pc, #88]	; (80119a8 <VL53LX_RdWord+0x7c>)
 8011950:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8011952:	2202      	movs	r2, #2
 8011954:	4914      	ldr	r1, [pc, #80]	; (80119a8 <VL53LX_RdWord+0x7c>)
 8011956:	68f8      	ldr	r0, [r7, #12]
 8011958:	f7ff fec6 	bl	80116e8 <_I2CWrite>
 801195c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 801195e:	693b      	ldr	r3, [r7, #16]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d002      	beq.n	801196a <VL53LX_RdWord+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011964:	23f3      	movs	r3, #243	; 0xf3
 8011966:	75fb      	strb	r3, [r7, #23]
        goto done;
 8011968:	e017      	b.n	801199a <VL53LX_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 801196a:	2202      	movs	r2, #2
 801196c:	490e      	ldr	r1, [pc, #56]	; (80119a8 <VL53LX_RdWord+0x7c>)
 801196e:	68f8      	ldr	r0, [r7, #12]
 8011970:	f7ff fecd 	bl	801170e <_I2CRead>
 8011974:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8011976:	693b      	ldr	r3, [r7, #16]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d002      	beq.n	8011982 <VL53LX_RdWord+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 801197c:	23f3      	movs	r3, #243	; 0xf3
 801197e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8011980:	e00b      	b.n	801199a <VL53LX_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8011982:	4b09      	ldr	r3, [pc, #36]	; (80119a8 <VL53LX_RdWord+0x7c>)
 8011984:	781b      	ldrb	r3, [r3, #0]
 8011986:	b29b      	uxth	r3, r3
 8011988:	021b      	lsls	r3, r3, #8
 801198a:	b29a      	uxth	r2, r3
 801198c:	4b06      	ldr	r3, [pc, #24]	; (80119a8 <VL53LX_RdWord+0x7c>)
 801198e:	785b      	ldrb	r3, [r3, #1]
 8011990:	b29b      	uxth	r3, r3
 8011992:	4413      	add	r3, r2
 8011994:	b29a      	uxth	r2, r3
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	801a      	strh	r2, [r3, #0]
done:
    VL53LX_PutI2cBus();
    return Status;
 801199a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801199e:	4618      	mov	r0, r3
 80119a0:	3718      	adds	r7, #24
 80119a2:	46bd      	mov	sp, r7
 80119a4:	bd80      	pop	{r7, pc}
 80119a6:	bf00      	nop
 80119a8:	200071ec 	.word	0x200071ec

080119ac <VL53LX_GetTickCount>:
    VL53LX_PutI2cBus();
    return Status;
}

VL53LX_Error VL53LX_GetTickCount(VL53LX_DEV Dev, uint32_t *ptick_count_ms)
{
 80119ac:	b580      	push	{r7, lr}
 80119ae:	b084      	sub	sp, #16
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	6078      	str	r0, [r7, #4]
 80119b4:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53LX_Error status  = VL53LX_ERROR_NONE;
 80119b6:	2300      	movs	r3, #0
 80119b8:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	695b      	ldr	r3, [r3, #20]
 80119be:	4798      	blx	r3
 80119c0:	4603      	mov	r3, r0
 80119c2:	461a      	mov	r2, r3
 80119c4:	683b      	ldr	r3, [r7, #0]
 80119c6:	601a      	str	r2, [r3, #0]
		VL53LX_TRACE_LEVEL_DEBUG,
		"VL53LX_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 80119c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80119cc:	4618      	mov	r0, r3
 80119ce:	3710      	adds	r7, #16
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}

080119d4 <VL53LX_WaitMs>:
	
	trace_print(VL53LX_TRACE_LEVEL_INFO, "VL53LX_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53LX_ERROR_NONE;
}

VL53LX_Error VL53LX_WaitMs(VL53LX_DEV Dev, int32_t wait_ms){
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b082      	sub	sp, #8
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
 80119dc:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_ms);
 80119de:	683b      	ldr	r3, [r7, #0]
 80119e0:	4619      	mov	r1, r3
 80119e2:	6878      	ldr	r0, [r7, #4]
 80119e4:	f000 f8b8 	bl	8011b58 <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 80119e8:	2300      	movs	r3, #0
}
 80119ea:	4618      	mov	r0, r3
 80119ec:	3708      	adds	r7, #8
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd80      	pop	{r7, pc}
	...

080119f4 <VL53LX_WaitUs>:

VL53LX_Error VL53LX_WaitUs(VL53LX_DEV Dev, int32_t wait_us){
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b082      	sub	sp, #8
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
 80119fc:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_us/1000);
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	4a07      	ldr	r2, [pc, #28]	; (8011a20 <VL53LX_WaitUs+0x2c>)
 8011a02:	fb82 1203 	smull	r1, r2, r2, r3
 8011a06:	1192      	asrs	r2, r2, #6
 8011a08:	17db      	asrs	r3, r3, #31
 8011a0a:	1ad3      	subs	r3, r2, r3
 8011a0c:	4619      	mov	r1, r3
 8011a0e:	6878      	ldr	r0, [r7, #4]
 8011a10:	f000 f8a2 	bl	8011b58 <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 8011a14:	2300      	movs	r3, #0
}
 8011a16:	4618      	mov	r0, r3
 8011a18:	3708      	adds	r7, #8
 8011a1a:	46bd      	mov	sp, r7
 8011a1c:	bd80      	pop	{r7, pc}
 8011a1e:	bf00      	nop
 8011a20:	10624dd3 	.word	0x10624dd3

08011a24 <VL53LX_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8011a24:	b590      	push	{r4, r7, lr}
 8011a26:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8011a2a:	af00      	add	r7, sp, #0
 8011a2c:	f107 040c 	add.w	r4, r7, #12
 8011a30:	6020      	str	r0, [r4, #0]
 8011a32:	f107 0008 	add.w	r0, r7, #8
 8011a36:	6001      	str	r1, [r0, #0]
 8011a38:	4619      	mov	r1, r3
 8011a3a:	1dbb      	adds	r3, r7, #6
 8011a3c:	801a      	strh	r2, [r3, #0]
 8011a3e:	1d7b      	adds	r3, r7, #5
 8011a40:	460a      	mov	r2, r1
 8011a42:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53LX_Error status         = VL53LX_ERROR_NONE;
 8011a44:	2300      	movs	r3, #0
 8011a46:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 8011a50:	2300      	movs	r3, #0
 8011a52:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 8011a56:	2300      	movs	r3, #0
 8011a58:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 8011a62:	2300      	movs	r3, #0
 8011a64:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53LX_get_register_name(
			index,
			register_name);
#else
	VL53LX_COPYSTRING(register_name, "");
 8011a68:	f107 0310 	add.w	r3, r7, #16
 8011a6c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011a70:	4938      	ldr	r1, [pc, #224]	; (8011b54 <VL53LX_WaitValueMaskEx+0x130>)
 8011a72:	4618      	mov	r0, r3
 8011a74:	f003 f95a 	bl	8014d2c <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53LX_GetTickCount(Dev, &start_time_ms);
 8011a78:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8011a7c:	f107 030c 	add.w	r3, r7, #12
 8011a80:	4611      	mov	r1, r2
 8011a82:	6818      	ldr	r0, [r3, #0]
 8011a84:	f7ff ff92 	bl	80119ac <VL53LX_GetTickCount>
	VL53LX_set_trace_functions(VL53LX_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53LX_ERROR_NONE) &&
 8011a88:	e042      	b.n	8011b10 <VL53LX_WaitValueMaskEx+0xec>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53LX_ERROR_NONE)
 8011a8a:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d10b      	bne.n	8011aaa <VL53LX_WaitValueMaskEx+0x86>
			status = VL53LX_RdByte(
 8011a92:	f207 2213 	addw	r2, r7, #531	; 0x213
 8011a96:	1dbb      	adds	r3, r7, #6
 8011a98:	8819      	ldrh	r1, [r3, #0]
 8011a9a:	f107 030c 	add.w	r3, r7, #12
 8011a9e:	6818      	ldr	r0, [r3, #0]
 8011aa0:	f7ff ff10 	bl	80118c4 <VL53LX_RdByte>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8011aaa:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 8011aae:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 8011ab2:	4013      	ands	r3, r2
 8011ab4:	b2db      	uxtb	r3, r3
 8011ab6:	1d7a      	adds	r2, r7, #5
 8011ab8:	7812      	ldrb	r2, [r2, #0]
 8011aba:	429a      	cmp	r2, r3
 8011abc:	d102      	bne.n	8011ac4 <VL53LX_WaitValueMaskEx+0xa0>
			found = 1;
 8011abe:	2301      	movs	r3, #1
 8011ac0:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53LX_ERROR_NONE  &&
 8011ac4:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d112      	bne.n	8011af2 <VL53LX_WaitValueMaskEx+0xce>
 8011acc:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d10e      	bne.n	8011af2 <VL53LX_WaitValueMaskEx+0xce>
			found == 0 &&
 8011ad4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d00a      	beq.n	8011af2 <VL53LX_WaitValueMaskEx+0xce>
			poll_delay_ms > 0)
			status = VL53LX_WaitMs(
 8011adc:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8011ae0:	f107 030c 	add.w	r3, r7, #12
 8011ae4:	4611      	mov	r1, r2
 8011ae6:	6818      	ldr	r0, [r3, #0]
 8011ae8:	f7ff ff74 	bl	80119d4 <VL53LX_WaitMs>
 8011aec:	4603      	mov	r3, r0
 8011aee:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53LX_GetTickCount(Dev, &current_time_ms);
 8011af2:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8011af6:	f107 030c 	add.w	r3, r7, #12
 8011afa:	4611      	mov	r1, r2
 8011afc:	6818      	ldr	r0, [r3, #0]
 8011afe:	f7ff ff55 	bl	80119ac <VL53LX_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8011b02:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8011b06:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8011b0a:	1ad3      	subs	r3, r2, r3
 8011b0c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53LX_ERROR_NONE) &&
 8011b10:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d10a      	bne.n	8011b2e <VL53LX_WaitValueMaskEx+0x10a>
 8011b18:	f107 0308 	add.w	r3, r7, #8
 8011b1c:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	429a      	cmp	r2, r3
 8011b24:	d203      	bcs.n	8011b2e <VL53LX_WaitValueMaskEx+0x10a>
		   (polling_time_ms < timeout_ms) &&
 8011b26:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d0ad      	beq.n	8011a8a <VL53LX_WaitValueMaskEx+0x66>
#ifdef VL53LX_LOG_ENABLE
	/* Restore function logging */
	VL53LX_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53LX_ERROR_NONE)
 8011b2e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d106      	bne.n	8011b44 <VL53LX_WaitValueMaskEx+0x120>
 8011b36:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d102      	bne.n	8011b44 <VL53LX_WaitValueMaskEx+0x120>
		status = VL53LX_ERROR_TIME_OUT;
 8011b3e:	23f9      	movs	r3, #249	; 0xf9
 8011b40:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 8011b44:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd90      	pop	{r4, r7, pc}
 8011b52:	bf00      	nop
 8011b54:	08015d94 	.word	0x08015d94

08011b58 <VL53LX_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53LX_Error
  */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay)
{
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b084      	sub	sp, #16
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
 8011b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	695b      	ldr	r3, [r3, #20]
 8011b66:	4798      	blx	r3
 8011b68:	4603      	mov	r3, r0
 8011b6a:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 8011b6c:	bf00      	nop
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	695b      	ldr	r3, [r3, #20]
 8011b72:	4798      	blx	r3
 8011b74:	4603      	mov	r3, r0
 8011b76:	461a      	mov	r2, r3
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	1ad3      	subs	r3, r2, r3
 8011b7c:	683a      	ldr	r2, [r7, #0]
 8011b7e:	429a      	cmp	r2, r3
 8011b80:	d8f5      	bhi.n	8011b6e <VL53LX_Delay+0x16>
  {
  }

  return VL53LX_ERROR_NONE;
 8011b82:	2300      	movs	r3, #0
}
 8011b84:	4618      	mov	r0, r3
 8011b86:	3710      	adds	r7, #16
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	bd80      	pop	{r7, pc}

08011b8c <VL53LX_ipp_hist_process_data>:
	VL53LX_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53LX_range_results_t            *presults)
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b08c      	sub	sp, #48	; 0x30
 8011b90:	af06      	add	r7, sp, #24
 8011b92:	60f8      	str	r0, [r7, #12]
 8011b94:	60b9      	str	r1, [r7, #8]
 8011b96:	607a      	str	r2, [r7, #4]
 8011b98:	603b      	str	r3, [r7, #0]



	VL53LX_Error status         = VL53LX_ERROR_NONE;
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53LX_hist_process_data(
 8011b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ba0:	9304      	str	r3, [sp, #16]
 8011ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ba4:	9303      	str	r3, [sp, #12]
 8011ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ba8:	9302      	str	r3, [sp, #8]
 8011baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bac:	9301      	str	r3, [sp, #4]
 8011bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bb0:	9300      	str	r3, [sp, #0]
 8011bb2:	6a3b      	ldr	r3, [r7, #32]
 8011bb4:	683a      	ldr	r2, [r7, #0]
 8011bb6:	6879      	ldr	r1, [r7, #4]
 8011bb8:	68b8      	ldr	r0, [r7, #8]
 8011bba:	f7fd f98c 	bl	800eed6 <VL53LX_hist_process_data>
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 8011bc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	3718      	adds	r7, #24
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	bd80      	pop	{r7, pc}

08011bce <VL53L3CX_RegisterBusIO>:
  * @param pObj    vl53l3cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_RegisterBusIO(VL53L3CX_Object_t *pObj, VL53L3CX_IO_t *pIO)
{
 8011bce:	b580      	push	{r7, lr}
 8011bd0:	b084      	sub	sp, #16
 8011bd2:	af00      	add	r7, sp, #0
 8011bd4:	6078      	str	r0, [r7, #4]
 8011bd6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d103      	bne.n	8011be6 <VL53L3CX_RegisterBusIO+0x18>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011bde:	f06f 0301 	mvn.w	r3, #1
 8011be2:	60fb      	str	r3, [r7, #12]
 8011be4:	e023      	b.n	8011c2e <VL53L3CX_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8011be6:	683b      	ldr	r3, [r7, #0]
 8011be8:	681a      	ldr	r2, [r3, #0]
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8011bee:	683b      	ldr	r3, [r7, #0]
 8011bf0:	685a      	ldr	r2, [r3, #4]
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	891a      	ldrh	r2, [r3, #8]
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8011bfe:	683b      	ldr	r3, [r7, #0]
 8011c00:	68da      	ldr	r2, [r3, #12]
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	691a      	ldr	r2, [r3, #16]
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	695a      	ldr	r2, [r3, #20]
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d004      	beq.n	8011c28 <VL53L3CX_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	4798      	blx	r3
 8011c24:	60f8      	str	r0, [r7, #12]
 8011c26:	e002      	b.n	8011c2e <VL53L3CX_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L3CX_ERROR;
 8011c28:	f04f 33ff 	mov.w	r3, #4294967295
 8011c2c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8011c2e:	68fb      	ldr	r3, [r7, #12]
}
 8011c30:	4618      	mov	r0, r3
 8011c32:	3710      	adds	r7, #16
 8011c34:	46bd      	mov	sp, r7
 8011c36:	bd80      	pop	{r7, pc}

08011c38 <VL53L3CX_Init>:
  * @brief Initializes the vl53l3cx.
  * @param pObj    vl53l3cx context object.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_Init(VL53L3CX_Object_t *pObj)
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b084      	sub	sp, #16
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011c46:	3328      	adds	r3, #40	; 0x28
 8011c48:	781b      	ldrb	r3, [r3, #0]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d003      	beq.n	8011c56 <VL53L3CX_Init+0x1e>
  {
    ret =  VL53L3CX_ERROR;
 8011c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8011c52:	60fb      	str	r3, [r7, #12]
 8011c54:	e043      	b.n	8011cde <VL53L3CX_Init+0xa6>
  }
  else if (VL53LX_WaitDeviceBooted(pObj) != VL53LX_ERROR_NONE)
 8011c56:	6878      	ldr	r0, [r7, #4]
 8011c58:	f7f0 fcb8 	bl	80025cc <VL53LX_WaitDeviceBooted>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d003      	beq.n	8011c6a <VL53L3CX_Init+0x32>
  {
    ret =  VL53L3CX_ERROR;
 8011c62:	f04f 33ff 	mov.w	r3, #4294967295
 8011c66:	60fb      	str	r3, [r7, #12]
 8011c68:	e039      	b.n	8011cde <VL53L3CX_Init+0xa6>
  }
  else if (VL53LX_DataInit(pObj) != VL53LX_ERROR_NONE)
 8011c6a:	6878      	ldr	r0, [r7, #4]
 8011c6c:	f7f0 fc53 	bl	8002516 <VL53LX_DataInit>
 8011c70:	4603      	mov	r3, r0
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d003      	beq.n	8011c7e <VL53L3CX_Init+0x46>
  {
    ret = VL53L3CX_ERROR;
 8011c76:	f04f 33ff 	mov.w	r3, #4294967295
 8011c7a:	60fb      	str	r3, [r7, #12]
 8011c7c:	e02f      	b.n	8011cde <VL53L3CX_Init+0xa6>
  }
  else if (VL53LX_PerformRefSpadManagement(pObj) != VL53LX_ERROR_NONE)
 8011c7e:	6878      	ldr	r0, [r7, #4]
 8011c80:	f7f1 fb46 	bl	8003310 <VL53LX_PerformRefSpadManagement>
 8011c84:	4603      	mov	r3, r0
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d003      	beq.n	8011c92 <VL53L3CX_Init+0x5a>
  {
    ret = VL53L3CX_ERROR;
 8011c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8011c8e:	60fb      	str	r3, [r7, #12]
 8011c90:	e025      	b.n	8011cde <VL53L3CX_Init+0xa6>
  }
  else
  {
    pObj->IsRanging = 0;
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011c98:	3329      	adds	r3, #41	; 0x29
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	701a      	strb	r2, [r3, #0]
    pObj->IsBlocking = 0;
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011ca4:	332a      	adds	r3, #42	; 0x2a
 8011ca6:	2200      	movs	r2, #0
 8011ca8:	701a      	strb	r2, [r3, #0]
    pObj->IsContinuous = 0;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011cb0:	332b      	adds	r3, #43	; 0x2b
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	701a      	strb	r2, [r3, #0]
    pObj->IsAmbientEnabled = 0;
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011cbc:	332c      	adds	r3, #44	; 0x2c
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	701a      	strb	r2, [r3, #0]
    pObj->IsSignalEnabled = 0;
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011cc8:	332d      	adds	r3, #45	; 0x2d
 8011cca:	2200      	movs	r2, #0
 8011ccc:	701a      	strb	r2, [r3, #0]
    pObj->IsInitialized = 1;
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011cd4:	3328      	adds	r3, #40	; 0x28
 8011cd6:	2201      	movs	r2, #1
 8011cd8:	701a      	strb	r2, [r3, #0]
    ret = VL53L3CX_OK;
 8011cda:	2300      	movs	r3, #0
 8011cdc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011cde:	68fb      	ldr	r3, [r7, #12]
}
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	3710      	adds	r7, #16
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	bd80      	pop	{r7, pc}

08011ce8 <VL53L3CX_DeInit>:
  * @brief Deinitializes the vl53l3cx.
  * @param pObj    vl53l3cx context object.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_DeInit(VL53L3CX_Object_t *pObj)
{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b084      	sub	sp, #16
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
  int32_t ret = VL53L3CX_ERROR;
 8011cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8011cf4:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 1U)
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011cfc:	3328      	adds	r3, #40	; 0x28
 8011cfe:	781b      	ldrb	r3, [r3, #0]
 8011d00:	2b01      	cmp	r3, #1
 8011d02:	d111      	bne.n	8011d28 <VL53L3CX_DeInit+0x40>
  {
    /* De-initialize the vl53l3cx interface */
    if (pObj->IO.DeInit() != 0)
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	685b      	ldr	r3, [r3, #4]
 8011d08:	4798      	blx	r3
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d003      	beq.n	8011d18 <VL53L3CX_DeInit+0x30>
    {
      ret = VL53L3CX_ERROR;
 8011d10:	f04f 33ff 	mov.w	r3, #4294967295
 8011d14:	60fb      	str	r3, [r7, #12]
 8011d16:	e007      	b.n	8011d28 <VL53L3CX_DeInit+0x40>
    }
    else
    {
      ret = VL53L3CX_OK;
 8011d18:	2300      	movs	r3, #0
 8011d1a:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011d22:	3328      	adds	r3, #40	; 0x28
 8011d24:	2200      	movs	r2, #0
 8011d26:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8011d28:	68fb      	ldr	r3, [r7, #12]
}
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	3710      	adds	r7, #16
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	bd80      	pop	{r7, pc}

08011d32 <VL53L3CX_ReadID>:
  * @param pObj    vl53l3cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ReadID(VL53L3CX_Object_t *pObj, uint32_t *pId)
{
 8011d32:	b580      	push	{r7, lr}
 8011d34:	b084      	sub	sp, #16
 8011d36:	af00      	add	r7, sp, #0
 8011d38:	6078      	str	r0, [r7, #4]
 8011d3a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pId == NULL))
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d002      	beq.n	8011d48 <VL53L3CX_ReadID+0x16>
 8011d42:	683b      	ldr	r3, [r7, #0]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d103      	bne.n	8011d50 <VL53L3CX_ReadID+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011d48:	f06f 0301 	mvn.w	r3, #1
 8011d4c:	60fb      	str	r3, [r7, #12]
 8011d4e:	e00a      	b.n	8011d66 <VL53L3CX_ReadID+0x34>
  }
  else
  {
    *pId = 0;
 8011d50:	683b      	ldr	r3, [r7, #0]
 8011d52:	2200      	movs	r2, #0
 8011d54:	601a      	str	r2, [r3, #0]
    ret = VL53LX_RdWord(pObj, VL53L3CX_ID_REG, (uint16_t *) pId);
 8011d56:	683a      	ldr	r2, [r7, #0]
 8011d58:	f240 110f 	movw	r1, #271	; 0x10f
 8011d5c:	6878      	ldr	r0, [r7, #4]
 8011d5e:	f7ff fde5 	bl	801192c <VL53LX_RdWord>
 8011d62:	4603      	mov	r3, r0
 8011d64:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011d66:	68fb      	ldr	r3, [r7, #12]
}
 8011d68:	4618      	mov	r0, r3
 8011d6a:	3710      	adds	r7, #16
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	bd80      	pop	{r7, pc}

08011d70 <VL53L3CX_GetCapabilities>:
  * @param pObj    vl53l3cx context object.
  * @param pCap    Pointer to the vl53l3cx capabilities.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetCapabilities(VL53L3CX_Object_t *pObj, VL53L3CX_Capabilities_t *pCap)
{
 8011d70:	b480      	push	{r7}
 8011d72:	b085      	sub	sp, #20
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
 8011d78:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d002      	beq.n	8011d86 <VL53L3CX_GetCapabilities+0x16>
 8011d80:	683b      	ldr	r3, [r7, #0]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d103      	bne.n	8011d8e <VL53L3CX_GetCapabilities+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011d86:	f06f 0301 	mvn.w	r3, #1
 8011d8a:	60fb      	str	r3, [r7, #12]
 8011d8c:	e00d      	b.n	8011daa <VL53L3CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = 1;
 8011d8e:	683b      	ldr	r3, [r7, #0]
 8011d90:	2201      	movs	r2, #1
 8011d92:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L3CX_NB_TARGET_PER_ZONE;
 8011d94:	683b      	ldr	r3, [r7, #0]
 8011d96:	2204      	movs	r2, #4
 8011d98:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 1;
 8011d9a:	683b      	ldr	r3, [r7, #0]
 8011d9c:	2201      	movs	r2, #1
 8011d9e:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 0;
 8011da0:	683b      	ldr	r3, [r7, #0]
 8011da2:	2200      	movs	r2, #0
 8011da4:	60da      	str	r2, [r3, #12]

    ret = VL53L3CX_OK;
 8011da6:	2300      	movs	r3, #0
 8011da8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011daa:	68fb      	ldr	r3, [r7, #12]
}
 8011dac:	4618      	mov	r0, r3
 8011dae:	3714      	adds	r7, #20
 8011db0:	46bd      	mov	sp, r7
 8011db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db6:	4770      	bx	lr

08011db8 <VL53L3CX_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L3CX the profile corresponds to the distance modes.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ConfigProfile(VL53L3CX_Object_t *pObj, VL53L3CX_ProfileConfig_t *pConfig)
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b084      	sub	sp, #16
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
 8011dc0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d009      	beq.n	8011ddc <VL53L3CX_ConfigProfile+0x24>
 8011dc8:	683b      	ldr	r3, [r7, #0]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d006      	beq.n	8011ddc <VL53L3CX_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	781b      	ldrb	r3, [r3, #0]
 8011dd2:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L3CX_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L3CX_PROFILE_SHORT) &&
 8011dd4:	7afb      	ldrb	r3, [r7, #11]
 8011dd6:	2b01      	cmp	r3, #1
 8011dd8:	d103      	bne.n	8011de2 <VL53L3CX_ConfigProfile+0x2a>
 8011dda:	e00c      	b.n	8011df6 <VL53L3CX_ConfigProfile+0x3e>
    return VL53L3CX_INVALID_PARAM;
 8011ddc:	f06f 0301 	mvn.w	r3, #1
 8011de0:	e043      	b.n	8011e6a <VL53L3CX_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L3CX_PROFILE_SHORT) &&
 8011de2:	7afb      	ldrb	r3, [r7, #11]
 8011de4:	2b02      	cmp	r3, #2
 8011de6:	d006      	beq.n	8011df6 <VL53L3CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L3CX_PROFILE_MEDIUM) &&
 8011de8:	7afb      	ldrb	r3, [r7, #11]
 8011dea:	2b03      	cmp	r3, #3
 8011dec:	d003      	beq.n	8011df6 <VL53L3CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L3CX_PROFILE_LONG))
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011dee:	f06f 0301 	mvn.w	r3, #1
 8011df2:	60fb      	str	r3, [r7, #12]
 8011df4:	e038      	b.n	8011e68 <VL53L3CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetDistanceMode(pObj, ranging_profile) != VL53LX_ERROR_NONE)
 8011df6:	7afb      	ldrb	r3, [r7, #11]
 8011df8:	4619      	mov	r1, r3
 8011dfa:	6878      	ldr	r0, [r7, #4]
 8011dfc:	f7f0 fcc9 	bl	8002792 <VL53LX_SetDistanceMode>
 8011e00:	4603      	mov	r3, r0
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d003      	beq.n	8011e0e <VL53L3CX_ConfigProfile+0x56>
  {
    ret = VL53L3CX_ERROR;
 8011e06:	f04f 33ff 	mov.w	r3, #4294967295
 8011e0a:	60fb      	str	r3, [r7, #12]
 8011e0c:	e02c      	b.n	8011e68 <VL53L3CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53LX_ERROR_NONE)
 8011e0e:	683b      	ldr	r3, [r7, #0]
 8011e10:	685b      	ldr	r3, [r3, #4]
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
 8011e12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011e16:	fb02 f303 	mul.w	r3, r2, r3
 8011e1a:	4619      	mov	r1, r3
 8011e1c:	6878      	ldr	r0, [r7, #4]
 8011e1e:	f7f0 fd1f 	bl	8002860 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 8011e22:	4603      	mov	r3, r0
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d003      	beq.n	8011e30 <VL53L3CX_ConfigProfile+0x78>
  {
    ret = VL53L3CX_ERROR;
 8011e28:	f04f 33ff 	mov.w	r3, #4294967295
 8011e2c:	60fb      	str	r3, [r7, #12]
 8011e2e:	e01b      	b.n	8011e68 <VL53L3CX_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8011e30:	683b      	ldr	r3, [r7, #0]
 8011e32:	68db      	ldr	r3, [r3, #12]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	bf14      	ite	ne
 8011e38:	2301      	movne	r3, #1
 8011e3a:	2300      	moveq	r3, #0
 8011e3c:	b2db      	uxtb	r3, r3
 8011e3e:	461a      	mov	r2, r3
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011e46:	332c      	adds	r3, #44	; 0x2c
 8011e48:	701a      	strb	r2, [r3, #0]
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8011e4a:	683b      	ldr	r3, [r7, #0]
 8011e4c:	691b      	ldr	r3, [r3, #16]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	bf14      	ite	ne
 8011e52:	2301      	movne	r3, #1
 8011e54:	2300      	moveq	r3, #0
 8011e56:	b2db      	uxtb	r3, r3
 8011e58:	461a      	mov	r2, r3
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011e60:	332d      	adds	r3, #45	; 0x2d
 8011e62:	701a      	strb	r2, [r3, #0]

    ret = VL53L3CX_OK;
 8011e64:	2300      	movs	r3, #0
 8011e66:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011e68:	68fb      	ldr	r3, [r7, #12]
}
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	3710      	adds	r7, #16
 8011e6e:	46bd      	mov	sp, r7
 8011e70:	bd80      	pop	{r7, pc}

08011e72 <VL53L3CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ConfigROI(VL53L3CX_Object_t *pObj, VL53L3CX_ROIConfig_t *pROIConfig)
{
 8011e72:	b580      	push	{r7, lr}
 8011e74:	b084      	sub	sp, #16
 8011e76:	af00      	add	r7, sp, #0
 8011e78:	6078      	str	r0, [r7, #4]
 8011e7a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53LX_UserRoi_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d002      	beq.n	8011e88 <VL53L3CX_ConfigROI+0x16>
 8011e82:	683b      	ldr	r3, [r7, #0]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d103      	bne.n	8011e90 <VL53L3CX_ConfigROI+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011e88:	f06f 0301 	mvn.w	r3, #1
 8011e8c:	60fb      	str	r3, [r7, #12]
 8011e8e:	e01a      	b.n	8011ec6 <VL53L3CX_ConfigROI+0x54>
  }
  else
  {
    roi_settings.BotRightX = pROIConfig->BotRightX;
 8011e90:	683b      	ldr	r3, [r7, #0]
 8011e92:	789b      	ldrb	r3, [r3, #2]
 8011e94:	72bb      	strb	r3, [r7, #10]
    roi_settings.BotRightY = pROIConfig->BotRightY;
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	78db      	ldrb	r3, [r3, #3]
 8011e9a:	72fb      	strb	r3, [r7, #11]
    roi_settings.TopLeftX = pROIConfig->TopLeftX;
 8011e9c:	683b      	ldr	r3, [r7, #0]
 8011e9e:	781b      	ldrb	r3, [r3, #0]
 8011ea0:	723b      	strb	r3, [r7, #8]
    roi_settings.TopLeftY = pROIConfig->TopLeftY;
 8011ea2:	683b      	ldr	r3, [r7, #0]
 8011ea4:	785b      	ldrb	r3, [r3, #1]
 8011ea6:	727b      	strb	r3, [r7, #9]

    if (VL53LX_SetUserROI(pObj, &roi_settings) != VL53LX_ERROR_NONE)
 8011ea8:	f107 0308 	add.w	r3, r7, #8
 8011eac:	4619      	mov	r1, r3
 8011eae:	6878      	ldr	r0, [r7, #4]
 8011eb0:	f7f0 fd4e 	bl	8002950 <VL53LX_SetUserROI>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d003      	beq.n	8011ec2 <VL53L3CX_ConfigROI+0x50>
    {
      ret = VL53L3CX_ERROR;
 8011eba:	f04f 33ff 	mov.w	r3, #4294967295
 8011ebe:	60fb      	str	r3, [r7, #12]
 8011ec0:	e001      	b.n	8011ec6 <VL53L3CX_ConfigROI+0x54>
    }
    else
    {
      ret = VL53L3CX_OK;
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8011ec6:	68fb      	ldr	r3, [r7, #12]
}
 8011ec8:	4618      	mov	r0, r3
 8011eca:	3710      	adds	r7, #16
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	bd80      	pop	{r7, pc}

08011ed0 <VL53L3CX_ConfigIT>:
  * @param pITConfig    Pointer to the IT configuration struct.
  * @warning This device does not support this feature.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ConfigIT(VL53L3CX_Object_t *pObj, VL53L3CX_ITConfig_t *pITConfig)
{
 8011ed0:	b480      	push	{r7}
 8011ed2:	b083      	sub	sp, #12
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6078      	str	r0, [r7, #4]
 8011ed8:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L3CX_NOT_IMPLEMENTED;
 8011eda:	f06f 0303 	mvn.w	r3, #3
}
 8011ede:	4618      	mov	r0, r3
 8011ee0:	370c      	adds	r7, #12
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee8:	4770      	bx	lr

08011eea <VL53L3CX_GetDistance>:
  * @param pObj    vl53l3cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetDistance(VL53L3CX_Object_t *pObj, VL53L3CX_Result_t *pResult)
{
 8011eea:	b580      	push	{r7, lr}
 8011eec:	b084      	sub	sp, #16
 8011eee:	af00      	add	r7, sp, #0
 8011ef0:	6078      	str	r0, [r7, #4]
 8011ef2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d002      	beq.n	8011f00 <VL53L3CX_GetDistance+0x16>
 8011efa:	683b      	ldr	r3, [r7, #0]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d103      	bne.n	8011f08 <VL53L3CX_GetDistance+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011f00:	f06f 0301 	mvn.w	r3, #1
 8011f04:	60fb      	str	r3, [r7, #12]
 8011f06:	e01d      	b.n	8011f44 <VL53L3CX_GetDistance+0x5a>
  }
  else if (pObj->IsRanging == 0U)
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011f0e:	3329      	adds	r3, #41	; 0x29
 8011f10:	781b      	ldrb	r3, [r3, #0]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d103      	bne.n	8011f1e <VL53L3CX_GetDistance+0x34>
  {
    ret = VL53L3CX_ERROR;
 8011f16:	f04f 33ff 	mov.w	r3, #4294967295
 8011f1a:	60fb      	str	r3, [r7, #12]
 8011f1c:	e012      	b.n	8011f44 <VL53L3CX_GetDistance+0x5a>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011f24:	332a      	adds	r3, #42	; 0x2a
 8011f26:	781b      	ldrb	r3, [r3, #0]
 8011f28:	2b01      	cmp	r3, #1
 8011f2a:	d106      	bne.n	8011f3a <VL53L3CX_GetDistance+0x50>
    {
      ret = vl53l3cx_poll_for_measurement(pObj, V53L3CX_POLL_TIMEOUT);
 8011f2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011f30:	6878      	ldr	r0, [r7, #4]
 8011f32:	f000 f92b 	bl	801218c <vl53l3cx_poll_for_measurement>
 8011f36:	60f8      	str	r0, [r7, #12]
 8011f38:	e004      	b.n	8011f44 <VL53L3CX_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l3cx_poll_for_measurement(pObj, 0U);
 8011f3a:	2100      	movs	r1, #0
 8011f3c:	6878      	ldr	r0, [r7, #4]
 8011f3e:	f000 f925 	bl	801218c <vl53l3cx_poll_for_measurement>
 8011f42:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L3CX_OK)
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d119      	bne.n	8011f7e <VL53L3CX_GetDistance+0x94>
  {
    /* retrieve measurements and fill result structure */
    if (vl53l3cx_get_result(pObj, pResult) != VL53L3CX_OK)
 8011f4a:	6839      	ldr	r1, [r7, #0]
 8011f4c:	6878      	ldr	r0, [r7, #4]
 8011f4e:	f000 f94b 	bl	80121e8 <vl53l3cx_get_result>
 8011f52:	4603      	mov	r3, r0
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d003      	beq.n	8011f60 <VL53L3CX_GetDistance+0x76>
    {
      ret = VL53L3CX_ERROR;
 8011f58:	f04f 33ff 	mov.w	r3, #4294967295
 8011f5c:	60fb      	str	r3, [r7, #12]
 8011f5e:	e00e      	b.n	8011f7e <VL53L3CX_GetDistance+0x94>
    }
    else if (pObj->IsContinuous == 1U)
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011f66:	332b      	adds	r3, #43	; 0x2b
 8011f68:	781b      	ldrb	r3, [r3, #0]
 8011f6a:	2b01      	cmp	r3, #1
 8011f6c:	d105      	bne.n	8011f7a <VL53L3CX_GetDistance+0x90>
    {
      /* trigger new measurement if device configured in continuous mode */
      ret = (int32_t)VL53LX_ClearInterruptAndStartMeasurement(pObj);
 8011f6e:	6878      	ldr	r0, [r7, #4]
 8011f70:	f7f0 fdbe 	bl	8002af0 <VL53LX_ClearInterruptAndStartMeasurement>
 8011f74:	4603      	mov	r3, r0
 8011f76:	60fb      	str	r3, [r7, #12]
 8011f78:	e001      	b.n	8011f7e <VL53L3CX_GetDistance+0x94>
    }
    else
    {
      ret = VL53L3CX_OK;
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8011f7e:	68fb      	ldr	r3, [r7, #12]
}
 8011f80:	4618      	mov	r0, r3
 8011f82:	3710      	adds	r7, #16
 8011f84:	46bd      	mov	sp, r7
 8011f86:	bd80      	pop	{r7, pc}

08011f88 <VL53L3CX_Start>:
  * @param pObj    vl53l3cx context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_Start(VL53L3CX_Object_t *pObj, uint32_t Mode)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b084      	sub	sp, #16
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
 8011f90:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d103      	bne.n	8011fa0 <VL53L3CX_Start+0x18>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011f98:	f06f 0301 	mvn.w	r3, #1
 8011f9c:	60fb      	str	r3, [r7, #12]
 8011f9e:	e068      	b.n	8012072 <VL53L3CX_Start+0xea>
  }
  else if (pObj->IsRanging == 1U)
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011fa6:	3329      	adds	r3, #41	; 0x29
 8011fa8:	781b      	ldrb	r3, [r3, #0]
 8011faa:	2b01      	cmp	r3, #1
 8011fac:	d103      	bne.n	8011fb6 <VL53L3CX_Start+0x2e>
  {
    ret = VL53L3CX_ERROR;
 8011fae:	f04f 33ff 	mov.w	r3, #4294967295
 8011fb2:	60fb      	str	r3, [r7, #12]
 8011fb4:	e05d      	b.n	8012072 <VL53L3CX_Start+0xea>
  }
  else if (VL53LX_StartMeasurement(pObj) == VL53LX_ERROR_NONE)
 8011fb6:	6878      	ldr	r0, [r7, #4]
 8011fb8:	f7f0 fd38 	bl	8002a2c <VL53LX_StartMeasurement>
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d154      	bne.n	801206c <VL53L3CX_Start+0xe4>
  {
    pObj->IsRanging = 1;
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011fc8:	3329      	adds	r3, #41	; 0x29
 8011fca:	2201      	movs	r2, #1
 8011fcc:	701a      	strb	r2, [r3, #0]
    ret = VL53L3CX_OK;
 8011fce:	2300      	movs	r3, #0
 8011fd0:	60fb      	str	r3, [r7, #12]
 8011fd2:	683b      	ldr	r3, [r7, #0]
 8011fd4:	3b01      	subs	r3, #1
 8011fd6:	2b03      	cmp	r3, #3
 8011fd8:	d83e      	bhi.n	8012058 <VL53L3CX_Start+0xd0>
 8011fda:	a201      	add	r2, pc, #4	; (adr r2, 8011fe0 <VL53L3CX_Start+0x58>)
 8011fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fe0:	08011ff1 	.word	0x08011ff1
 8011fe4:	0801200b 	.word	0x0801200b
 8011fe8:	08012025 	.word	0x08012025
 8011fec:	0801203f 	.word	0x0801203f

    switch (Mode)
    {
    case VL53L3CX_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011ff6:	332b      	adds	r3, #43	; 0x2b
 8011ff8:	2201      	movs	r2, #1
 8011ffa:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 1U;
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8012002:	332a      	adds	r3, #42	; 0x2a
 8012004:	2201      	movs	r2, #1
 8012006:	701a      	strb	r2, [r3, #0]
      break;
 8012008:	e033      	b.n	8012072 <VL53L3CX_Start+0xea>

    case VL53L3CX_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8012010:	332b      	adds	r3, #43	; 0x2b
 8012012:	2200      	movs	r2, #0
 8012014:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 1U;
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801201c:	332a      	adds	r3, #42	; 0x2a
 801201e:	2201      	movs	r2, #1
 8012020:	701a      	strb	r2, [r3, #0]
      break;
 8012022:	e026      	b.n	8012072 <VL53L3CX_Start+0xea>

    case VL53L3CX_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801202a:	332b      	adds	r3, #43	; 0x2b
 801202c:	2201      	movs	r2, #1
 801202e:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 0U;
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8012036:	332a      	adds	r3, #42	; 0x2a
 8012038:	2200      	movs	r2, #0
 801203a:	701a      	strb	r2, [r3, #0]
      break;
 801203c:	e019      	b.n	8012072 <VL53L3CX_Start+0xea>

    case VL53L3CX_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8012044:	332b      	adds	r3, #43	; 0x2b
 8012046:	2200      	movs	r2, #0
 8012048:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 0U;
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8012050:	332a      	adds	r3, #42	; 0x2a
 8012052:	2200      	movs	r2, #0
 8012054:	701a      	strb	r2, [r3, #0]
      break;
 8012056:	e00c      	b.n	8012072 <VL53L3CX_Start+0xea>

    default:
      pObj->IsRanging = 0U;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801205e:	3329      	adds	r3, #41	; 0x29
 8012060:	2200      	movs	r2, #0
 8012062:	701a      	strb	r2, [r3, #0]
      ret = VL53L3CX_INVALID_PARAM;
 8012064:	f06f 0301 	mvn.w	r3, #1
 8012068:	60fb      	str	r3, [r7, #12]
      break;
 801206a:	e002      	b.n	8012072 <VL53L3CX_Start+0xea>
    }
  }
  else
  {
    ret = VL53L3CX_ERROR;
 801206c:	f04f 33ff 	mov.w	r3, #4294967295
 8012070:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8012072:	68fb      	ldr	r3, [r7, #12]
}
 8012074:	4618      	mov	r0, r3
 8012076:	3710      	adds	r7, #16
 8012078:	46bd      	mov	sp, r7
 801207a:	bd80      	pop	{r7, pc}

0801207c <VL53L3CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l3cx context object.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_Stop(VL53L3CX_Object_t *pObj)
{
 801207c:	b580      	push	{r7, lr}
 801207e:	b084      	sub	sp, #16
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d103      	bne.n	8012092 <VL53L3CX_Stop+0x16>
  {
    ret = VL53L3CX_INVALID_PARAM;
 801208a:	f06f 0301 	mvn.w	r3, #1
 801208e:	60fb      	str	r3, [r7, #12]
 8012090:	e01c      	b.n	80120cc <VL53L3CX_Stop+0x50>
  }
  else if (pObj->IsRanging == 0U)
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8012098:	3329      	adds	r3, #41	; 0x29
 801209a:	781b      	ldrb	r3, [r3, #0]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d103      	bne.n	80120a8 <VL53L3CX_Stop+0x2c>
  {
	  /* ranging not started */
	  ret = VL53L3CX_ERROR;
 80120a0:	f04f 33ff 	mov.w	r3, #4294967295
 80120a4:	60fb      	str	r3, [r7, #12]
 80120a6:	e011      	b.n	80120cc <VL53L3CX_Stop+0x50>
  }
  else if (VL53LX_StopMeasurement(pObj) == VL53LX_ERROR_NONE)
 80120a8:	6878      	ldr	r0, [r7, #4]
 80120aa:	f7f0 fd0d 	bl	8002ac8 <VL53LX_StopMeasurement>
 80120ae:	4603      	mov	r3, r0
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d108      	bne.n	80120c6 <VL53L3CX_Stop+0x4a>
  {
    pObj->IsRanging = 0U;
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80120ba:	3329      	adds	r3, #41	; 0x29
 80120bc:	2200      	movs	r2, #0
 80120be:	701a      	strb	r2, [r3, #0]
    ret = VL53L3CX_OK;
 80120c0:	2300      	movs	r3, #0
 80120c2:	60fb      	str	r3, [r7, #12]
 80120c4:	e002      	b.n	80120cc <VL53L3CX_Stop+0x50>
  }
  else
  {
    ret = VL53L3CX_ERROR;
 80120c6:	f04f 33ff 	mov.w	r3, #4294967295
 80120ca:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80120cc:	68fb      	ldr	r3, [r7, #12]
}
 80120ce:	4618      	mov	r0, r3
 80120d0:	3710      	adds	r7, #16
 80120d2:	46bd      	mov	sp, r7
 80120d4:	bd80      	pop	{r7, pc}

080120d6 <VL53L3CX_SetAddress>:
  * @param pObj    vl53l3cx context object.
  * @param Address     New I2C address.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_SetAddress(VL53L3CX_Object_t *pObj, uint32_t Address)
{
 80120d6:	b580      	push	{r7, lr}
 80120d8:	b084      	sub	sp, #16
 80120da:	af00      	add	r7, sp, #0
 80120dc:	6078      	str	r0, [r7, #4]
 80120de:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d103      	bne.n	80120ee <VL53L3CX_SetAddress+0x18>
  {
    ret = VL53L3CX_INVALID_PARAM;
 80120e6:	f06f 0301 	mvn.w	r3, #1
 80120ea:	60fb      	str	r3, [r7, #12]
 80120ec:	e012      	b.n	8012114 <VL53L3CX_SetAddress+0x3e>
  }
  else if (VL53LX_SetDeviceAddress(pObj, (uint8_t)Address) != VL53LX_ERROR_NONE)
 80120ee:	683b      	ldr	r3, [r7, #0]
 80120f0:	b2db      	uxtb	r3, r3
 80120f2:	4619      	mov	r1, r3
 80120f4:	6878      	ldr	r0, [r7, #4]
 80120f6:	f7f0 f9e7 	bl	80024c8 <VL53LX_SetDeviceAddress>
 80120fa:	4603      	mov	r3, r0
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d003      	beq.n	8012108 <VL53L3CX_SetAddress+0x32>
  {
    ret = VL53L3CX_ERROR;
 8012100:	f04f 33ff 	mov.w	r3, #4294967295
 8012104:	60fb      	str	r3, [r7, #12]
 8012106:	e005      	b.n	8012114 <VL53L3CX_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 8012108:	683b      	ldr	r3, [r7, #0]
 801210a:	b29a      	uxth	r2, r3
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	811a      	strh	r2, [r3, #8]
    ret = VL53L3CX_OK;
 8012110:	2300      	movs	r3, #0
 8012112:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8012114:	68fb      	ldr	r3, [r7, #12]
}
 8012116:	4618      	mov	r0, r3
 8012118:	3710      	adds	r7, #16
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}

0801211e <VL53L3CX_GetAddress>:
  * @param pObj    vl53l3cx context object.
  * @param pAddress     Pointer to the current I2C address.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetAddress(VL53L3CX_Object_t *pObj, uint32_t *pAddress)
{
 801211e:	b480      	push	{r7}
 8012120:	b085      	sub	sp, #20
 8012122:	af00      	add	r7, sp, #0
 8012124:	6078      	str	r0, [r7, #4]
 8012126:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d002      	beq.n	8012134 <VL53L3CX_GetAddress+0x16>
 801212e:	683b      	ldr	r3, [r7, #0]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d103      	bne.n	801213c <VL53L3CX_GetAddress+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8012134:	f06f 0301 	mvn.w	r3, #1
 8012138:	60fb      	str	r3, [r7, #12]
 801213a:	e006      	b.n	801214a <VL53L3CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	891b      	ldrh	r3, [r3, #8]
 8012140:	461a      	mov	r2, r3
 8012142:	683b      	ldr	r3, [r7, #0]
 8012144:	601a      	str	r2, [r3, #0]
    ret = VL53L3CX_OK;
 8012146:	2300      	movs	r3, #0
 8012148:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801214a:	68fb      	ldr	r3, [r7, #12]
}
 801214c:	4618      	mov	r0, r3
 801214e:	3714      	adds	r7, #20
 8012150:	46bd      	mov	sp, r7
 8012152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012156:	4770      	bx	lr

08012158 <VL53L3CX_SetPowerMode>:
  * @param PowerMode    New power mode to be entered.
  * @note Not implemented for this device
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_SetPowerMode(VL53L3CX_Object_t *pObj, uint32_t PowerMode)
{
 8012158:	b480      	push	{r7}
 801215a:	b083      	sub	sp, #12
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
 8012160:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L3CX_NOT_IMPLEMENTED;
 8012162:	f06f 0303 	mvn.w	r3, #3
}
 8012166:	4618      	mov	r0, r3
 8012168:	370c      	adds	r7, #12
 801216a:	46bd      	mov	sp, r7
 801216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012170:	4770      	bx	lr

08012172 <VL53L3CX_GetPowerMode>:
  * @param pPowerMode    Pointer to the current power mode.
  * @note Not implemented for this device
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetPowerMode(VL53L3CX_Object_t *pObj, uint32_t *pPowerMode)
{
 8012172:	b480      	push	{r7}
 8012174:	b083      	sub	sp, #12
 8012176:	af00      	add	r7, sp, #0
 8012178:	6078      	str	r0, [r7, #4]
 801217a:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L3CX_NOT_IMPLEMENTED;
 801217c:	f06f 0303 	mvn.w	r3, #3
}
 8012180:	4618      	mov	r0, r3
 8012182:	370c      	adds	r7, #12
 8012184:	46bd      	mov	sp, r7
 8012186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218a:	4770      	bx	lr

0801218c <vl53l3cx_poll_for_measurement>:
/** @defgroup VL53L3CX_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l3cx_poll_for_measurement(VL53L3CX_Object_t *pObj, uint32_t Timeout)
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b084      	sub	sp, #16
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]
 8012194:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 8012196:	2300      	movs	r3, #0
 8012198:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d102      	bne.n	80121a6 <vl53l3cx_poll_for_measurement+0x1a>
  {
    return VL53L3CX_INVALID_PARAM;
 80121a0:	f06f 0301 	mvn.w	r3, #1
 80121a4:	e01b      	b.n	80121de <vl53l3cx_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	695b      	ldr	r3, [r3, #20]
 80121aa:	4798      	blx	r3
 80121ac:	4603      	mov	r3, r0
 80121ae:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53LX_GetMeasurementDataReady(pObj, &NewDataReady);
 80121b0:	f107 030b 	add.w	r3, r7, #11
 80121b4:	4619      	mov	r1, r3
 80121b6:	6878      	ldr	r0, [r7, #4]
 80121b8:	f7f0 fcb0 	bl	8002b1c <VL53LX_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 80121bc:	7afb      	ldrb	r3, [r7, #11]
 80121be:	2b01      	cmp	r3, #1
 80121c0:	d101      	bne.n	80121c6 <vl53l3cx_poll_for_measurement+0x3a>
    {
      return VL53L3CX_OK;
 80121c2:	2300      	movs	r3, #0
 80121c4:	e00b      	b.n	80121de <vl53l3cx_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	695b      	ldr	r3, [r3, #20]
 80121ca:	4798      	blx	r3
 80121cc:	4603      	mov	r3, r0
 80121ce:	461a      	mov	r2, r3
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	1ad3      	subs	r3, r2, r3
 80121d4:	683a      	ldr	r2, [r7, #0]
 80121d6:	429a      	cmp	r2, r3
 80121d8:	d8ea      	bhi.n	80121b0 <vl53l3cx_poll_for_measurement+0x24>

  return VL53L3CX_TIMEOUT;
 80121da:	f06f 0302 	mvn.w	r3, #2
}
 80121de:	4618      	mov	r0, r3
 80121e0:	3710      	adds	r7, #16
 80121e2:	46bd      	mov	sp, r7
 80121e4:	bd80      	pop	{r7, pc}
	...

080121e8 <vl53l3cx_get_result>:

static int32_t vl53l3cx_get_result(VL53L3CX_Object_t *pObj, VL53L3CX_Result_t *pResult)
{
 80121e8:	b590      	push	{r4, r7, lr}
 80121ea:	b09f      	sub	sp, #124	; 0x7c
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
 80121f0:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  VL53LX_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d002      	beq.n	80121fe <vl53l3cx_get_result+0x16>
 80121f8:	683b      	ldr	r3, [r7, #0]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d103      	bne.n	8012206 <vl53l3cx_get_result+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 80121fe:	f06f 0301 	mvn.w	r3, #1
 8012202:	677b      	str	r3, [r7, #116]	; 0x74
 8012204:	e126      	b.n	8012454 <vl53l3cx_get_result+0x26c>
  }
  else if (VL53LX_GetMultiRangingData(pObj, &data) != VL53LX_ERROR_NONE)
 8012206:	f107 0308 	add.w	r3, r7, #8
 801220a:	4619      	mov	r1, r3
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f7f1 f858 	bl	80032c2 <VL53LX_GetMultiRangingData>
 8012212:	4603      	mov	r3, r0
 8012214:	2b00      	cmp	r3, #0
 8012216:	d003      	beq.n	8012220 <vl53l3cx_get_result+0x38>
  {
    ret = VL53L3CX_ERROR;
 8012218:	f04f 33ff 	mov.w	r3, #4294967295
 801221c:	677b      	str	r3, [r7, #116]	; 0x74
 801221e:	e119      	b.n	8012454 <vl53l3cx_get_result+0x26c>
  }
  else
  {
    for (i = 0; i < VL53L3CX_MAX_NB_ZONES; i++)
 8012220:	2300      	movs	r3, #0
 8012222:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8012226:	e10b      	b.n	8012440 <vl53l3cx_get_result+0x258>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 8012228:	7b7b      	ldrb	r3, [r7, #13]
 801222a:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 801222e:	4618      	mov	r0, r3
 8012230:	6839      	ldr	r1, [r7, #0]
 8012232:	4613      	mov	r3, r2
 8012234:	011b      	lsls	r3, r3, #4
 8012236:	4413      	add	r3, r2
 8012238:	009b      	lsls	r3, r3, #2
 801223a:	440b      	add	r3, r1
 801223c:	3304      	adds	r3, #4
 801223e:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8012240:	2300      	movs	r3, #0
 8012242:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8012246:	e0f0      	b.n	801242a <vl53l3cx_get_result+0x242>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 8012248:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 801224c:	4613      	mov	r3, r2
 801224e:	009b      	lsls	r3, r3, #2
 8012250:	4413      	add	r3, r2
 8012252:	009b      	lsls	r3, r3, #2
 8012254:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8012258:	4413      	add	r3, r2
 801225a:	3b58      	subs	r3, #88	; 0x58
 801225c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012260:	2b00      	cmp	r3, #0
 8012262:	da0d      	bge.n	8012280 <vl53l3cx_get_result+0x98>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 8012264:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8012268:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 801226c:	6839      	ldr	r1, [r7, #0]
 801226e:	4613      	mov	r3, r2
 8012270:	011b      	lsls	r3, r3, #4
 8012272:	4413      	add	r3, r2
 8012274:	4403      	add	r3, r0
 8012276:	009b      	lsls	r3, r3, #2
 8012278:	440b      	add	r3, r1
 801227a:	2200      	movs	r2, #0
 801227c:	609a      	str	r2, [r3, #8]
 801227e:	e018      	b.n	80122b2 <vl53l3cx_get_result+0xca>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 8012280:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8012284:	4613      	mov	r3, r2
 8012286:	009b      	lsls	r3, r3, #2
 8012288:	4413      	add	r3, r2
 801228a:	009b      	lsls	r3, r3, #2
 801228c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8012290:	4413      	add	r3, r2
 8012292:	3b58      	subs	r3, #88	; 0x58
 8012294:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012298:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 801229c:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 80122a0:	461c      	mov	r4, r3
 80122a2:	6839      	ldr	r1, [r7, #0]
 80122a4:	4613      	mov	r3, r2
 80122a6:	011b      	lsls	r3, r3, #4
 80122a8:	4413      	add	r3, r2
 80122aa:	4403      	add	r3, r0
 80122ac:	009b      	lsls	r3, r3, #2
 80122ae:	440b      	add	r3, r1
 80122b0:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80122b8:	332c      	adds	r3, #44	; 0x2c
 80122ba:	781b      	ldrb	r3, [r3, #0]
 80122bc:	2b01      	cmp	r3, #1
 80122be:	d137      	bne.n	8012330 <vl53l3cx_get_result+0x148>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 80122c0:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80122c4:	4613      	mov	r3, r2
 80122c6:	009b      	lsls	r3, r3, #2
 80122c8:	4413      	add	r3, r2
 80122ca:	009b      	lsls	r3, r3, #2
 80122cc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80122d0:	4413      	add	r3, r2
 80122d2:	3b60      	subs	r3, #96	; 0x60
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	ee07 3a90 	vmov	s15, r3
 80122da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80122de:	eddf 6a60 	vldr	s13, [pc, #384]	; 8012460 <vl53l3cx_get_result+0x278>
 80122e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80122e6:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8012464 <vl53l3cx_get_result+0x27c>
 80122ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80122ee:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
          spad_count = data.EffectiveSpadRtnCount >> 8;
 80122f2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80122f6:	0a1b      	lsrs	r3, r3, #8
 80122f8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 80122fc:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8012300:	ee07 3a90 	vmov	s15, r3
 8012304:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012308:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 801230c:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8012310:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8012314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012318:	6839      	ldr	r1, [r7, #0]
 801231a:	4613      	mov	r3, r2
 801231c:	011b      	lsls	r3, r3, #4
 801231e:	4413      	add	r3, r2
 8012320:	4403      	add	r3, r0
 8012322:	3308      	adds	r3, #8
 8012324:	009b      	lsls	r3, r3, #2
 8012326:	440b      	add	r3, r1
 8012328:	3308      	adds	r3, #8
 801232a:	edc3 7a00 	vstr	s15, [r3]
 801232e:	e00f      	b.n	8012350 <vl53l3cx_get_result+0x168>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8012330:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8012334:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8012338:	6839      	ldr	r1, [r7, #0]
 801233a:	4613      	mov	r3, r2
 801233c:	011b      	lsls	r3, r3, #4
 801233e:	4413      	add	r3, r2
 8012340:	4403      	add	r3, r0
 8012342:	3308      	adds	r3, #8
 8012344:	009b      	lsls	r3, r3, #2
 8012346:	440b      	add	r3, r1
 8012348:	3308      	adds	r3, #8
 801234a:	f04f 0200 	mov.w	r2, #0
 801234e:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8012356:	332d      	adds	r3, #45	; 0x2d
 8012358:	781b      	ldrb	r3, [r3, #0]
 801235a:	2b01      	cmp	r3, #1
 801235c:	d137      	bne.n	80123ce <vl53l3cx_get_result+0x1e6>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 801235e:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8012362:	4613      	mov	r3, r2
 8012364:	009b      	lsls	r3, r3, #2
 8012366:	4413      	add	r3, r2
 8012368:	009b      	lsls	r3, r3, #2
 801236a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801236e:	4413      	add	r3, r2
 8012370:	3b64      	subs	r3, #100	; 0x64
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	ee07 3a90 	vmov	s15, r3
 8012378:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801237c:	eddf 6a38 	vldr	s13, [pc, #224]	; 8012460 <vl53l3cx_get_result+0x278>
 8012380:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012384:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8012464 <vl53l3cx_get_result+0x27c>
 8012388:	ee67 7a87 	vmul.f32	s15, s15, s14
 801238c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8012390:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8012394:	0a1b      	lsrs	r3, r3, #8
 8012396:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 801239a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 801239e:	ee07 3a90 	vmov	s15, r3
 80123a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80123a6:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80123aa:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 80123ae:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80123b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80123b6:	6839      	ldr	r1, [r7, #0]
 80123b8:	4613      	mov	r3, r2
 80123ba:	011b      	lsls	r3, r3, #4
 80123bc:	4413      	add	r3, r2
 80123be:	4403      	add	r3, r0
 80123c0:	330c      	adds	r3, #12
 80123c2:	009b      	lsls	r3, r3, #2
 80123c4:	440b      	add	r3, r1
 80123c6:	3308      	adds	r3, #8
 80123c8:	edc3 7a00 	vstr	s15, [r3]
 80123cc:	e00f      	b.n	80123ee <vl53l3cx_get_result+0x206>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 80123ce:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80123d2:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 80123d6:	6839      	ldr	r1, [r7, #0]
 80123d8:	4613      	mov	r3, r2
 80123da:	011b      	lsls	r3, r3, #4
 80123dc:	4413      	add	r3, r2
 80123de:	4403      	add	r3, r0
 80123e0:	330c      	adds	r3, #12
 80123e2:	009b      	lsls	r3, r3, #2
 80123e4:	440b      	add	r3, r1
 80123e6:	3308      	adds	r3, #8
 80123e8:	f04f 0200 	mov.w	r2, #0
 80123ec:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 80123ee:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80123f2:	4613      	mov	r3, r2
 80123f4:	009b      	lsls	r3, r3, #2
 80123f6:	4413      	add	r3, r2
 80123f8:	009b      	lsls	r3, r3, #2
 80123fa:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80123fe:	4413      	add	r3, r2
 8012400:	3b56      	subs	r3, #86	; 0x56
 8012402:	781b      	ldrb	r3, [r3, #0]
 8012404:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8012408:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 801240c:	461c      	mov	r4, r3
 801240e:	6839      	ldr	r1, [r7, #0]
 8012410:	4613      	mov	r3, r2
 8012412:	011b      	lsls	r3, r3, #4
 8012414:	4413      	add	r3, r2
 8012416:	4403      	add	r3, r0
 8012418:	3304      	adds	r3, #4
 801241a:	009b      	lsls	r3, r3, #2
 801241c:	440b      	add	r3, r1
 801241e:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8012420:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8012424:	3301      	adds	r3, #1
 8012426:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 801242a:	7b7b      	ldrb	r3, [r7, #13]
 801242c:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8012430:	429a      	cmp	r2, r3
 8012432:	f4ff af09 	bcc.w	8012248 <vl53l3cx_get_result+0x60>
    for (i = 0; i < VL53L3CX_MAX_NB_ZONES; i++)
 8012436:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801243a:	3301      	adds	r3, #1
 801243c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8012440:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8012444:	2b00      	cmp	r3, #0
 8012446:	f43f aeef 	beq.w	8012228 <vl53l3cx_get_result+0x40>
      }
    }

    pResult->NumberOfZones = VL53L3CX_MAX_NB_ZONES;
 801244a:	683b      	ldr	r3, [r7, #0]
 801244c:	2201      	movs	r2, #1
 801244e:	601a      	str	r2, [r3, #0]

    ret = VL53L3CX_OK;
 8012450:	2300      	movs	r3, #0
 8012452:	677b      	str	r3, [r7, #116]	; 0x74
  }

  return ret;
 8012454:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8012456:	4618      	mov	r0, r3
 8012458:	377c      	adds	r7, #124	; 0x7c
 801245a:	46bd      	mov	sp, r7
 801245c:	bd90      	pop	{r4, r7, pc}
 801245e:	bf00      	nop
 8012460:	47800000 	.word	0x47800000
 8012464:	447a0000 	.word	0x447a0000

08012468 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8012468:	b580      	push	{r7, lr}
 801246a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801246c:	4b0e      	ldr	r3, [pc, #56]	; (80124a8 <HAL_Init+0x40>)
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	4a0d      	ldr	r2, [pc, #52]	; (80124a8 <HAL_Init+0x40>)
 8012472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012476:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8012478:	4b0b      	ldr	r3, [pc, #44]	; (80124a8 <HAL_Init+0x40>)
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	4a0a      	ldr	r2, [pc, #40]	; (80124a8 <HAL_Init+0x40>)
 801247e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012482:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8012484:	4b08      	ldr	r3, [pc, #32]	; (80124a8 <HAL_Init+0x40>)
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	4a07      	ldr	r2, [pc, #28]	; (80124a8 <HAL_Init+0x40>)
 801248a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801248e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8012490:	2003      	movs	r0, #3
 8012492:	f000 f931 	bl	80126f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8012496:	2000      	movs	r0, #0
 8012498:	f000 f808 	bl	80124ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801249c:	f7ef f8bc 	bl	8001618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80124a0:	2300      	movs	r3, #0
}
 80124a2:	4618      	mov	r0, r3
 80124a4:	bd80      	pop	{r7, pc}
 80124a6:	bf00      	nop
 80124a8:	40023c00 	.word	0x40023c00

080124ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b082      	sub	sp, #8
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80124b4:	4b12      	ldr	r3, [pc, #72]	; (8012500 <HAL_InitTick+0x54>)
 80124b6:	681a      	ldr	r2, [r3, #0]
 80124b8:	4b12      	ldr	r3, [pc, #72]	; (8012504 <HAL_InitTick+0x58>)
 80124ba:	781b      	ldrb	r3, [r3, #0]
 80124bc:	4619      	mov	r1, r3
 80124be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80124c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80124c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80124ca:	4618      	mov	r0, r3
 80124cc:	f000 f93b 	bl	8012746 <HAL_SYSTICK_Config>
 80124d0:	4603      	mov	r3, r0
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d001      	beq.n	80124da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80124d6:	2301      	movs	r3, #1
 80124d8:	e00e      	b.n	80124f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	2b0f      	cmp	r3, #15
 80124de:	d80a      	bhi.n	80124f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80124e0:	2200      	movs	r2, #0
 80124e2:	6879      	ldr	r1, [r7, #4]
 80124e4:	f04f 30ff 	mov.w	r0, #4294967295
 80124e8:	f000 f911 	bl	801270e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80124ec:	4a06      	ldr	r2, [pc, #24]	; (8012508 <HAL_InitTick+0x5c>)
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80124f2:	2300      	movs	r3, #0
 80124f4:	e000      	b.n	80124f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80124f6:	2301      	movs	r3, #1
}
 80124f8:	4618      	mov	r0, r3
 80124fa:	3708      	adds	r7, #8
 80124fc:	46bd      	mov	sp, r7
 80124fe:	bd80      	pop	{r7, pc}
 8012500:	20000018 	.word	0x20000018
 8012504:	20000084 	.word	0x20000084
 8012508:	20000080 	.word	0x20000080

0801250c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801250c:	b480      	push	{r7}
 801250e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8012510:	4b06      	ldr	r3, [pc, #24]	; (801252c <HAL_IncTick+0x20>)
 8012512:	781b      	ldrb	r3, [r3, #0]
 8012514:	461a      	mov	r2, r3
 8012516:	4b06      	ldr	r3, [pc, #24]	; (8012530 <HAL_IncTick+0x24>)
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	4413      	add	r3, r2
 801251c:	4a04      	ldr	r2, [pc, #16]	; (8012530 <HAL_IncTick+0x24>)
 801251e:	6013      	str	r3, [r2, #0]
}
 8012520:	bf00      	nop
 8012522:	46bd      	mov	sp, r7
 8012524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012528:	4770      	bx	lr
 801252a:	bf00      	nop
 801252c:	20000084 	.word	0x20000084
 8012530:	200073ec 	.word	0x200073ec

08012534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8012534:	b480      	push	{r7}
 8012536:	af00      	add	r7, sp, #0
  return uwTick;
 8012538:	4b03      	ldr	r3, [pc, #12]	; (8012548 <HAL_GetTick+0x14>)
 801253a:	681b      	ldr	r3, [r3, #0]
}
 801253c:	4618      	mov	r0, r3
 801253e:	46bd      	mov	sp, r7
 8012540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012544:	4770      	bx	lr
 8012546:	bf00      	nop
 8012548:	200073ec 	.word	0x200073ec

0801254c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801254c:	b580      	push	{r7, lr}
 801254e:	b084      	sub	sp, #16
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8012554:	f7ff ffee 	bl	8012534 <HAL_GetTick>
 8012558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012564:	d005      	beq.n	8012572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8012566:	4b0a      	ldr	r3, [pc, #40]	; (8012590 <HAL_Delay+0x44>)
 8012568:	781b      	ldrb	r3, [r3, #0]
 801256a:	461a      	mov	r2, r3
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	4413      	add	r3, r2
 8012570:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8012572:	bf00      	nop
 8012574:	f7ff ffde 	bl	8012534 <HAL_GetTick>
 8012578:	4602      	mov	r2, r0
 801257a:	68bb      	ldr	r3, [r7, #8]
 801257c:	1ad3      	subs	r3, r2, r3
 801257e:	68fa      	ldr	r2, [r7, #12]
 8012580:	429a      	cmp	r2, r3
 8012582:	d8f7      	bhi.n	8012574 <HAL_Delay+0x28>
  {
  }
}
 8012584:	bf00      	nop
 8012586:	bf00      	nop
 8012588:	3710      	adds	r7, #16
 801258a:	46bd      	mov	sp, r7
 801258c:	bd80      	pop	{r7, pc}
 801258e:	bf00      	nop
 8012590:	20000084 	.word	0x20000084

08012594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012594:	b480      	push	{r7}
 8012596:	b085      	sub	sp, #20
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	f003 0307 	and.w	r3, r3, #7
 80125a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80125a4:	4b0c      	ldr	r3, [pc, #48]	; (80125d8 <__NVIC_SetPriorityGrouping+0x44>)
 80125a6:	68db      	ldr	r3, [r3, #12]
 80125a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80125aa:	68ba      	ldr	r2, [r7, #8]
 80125ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80125b0:	4013      	ands	r3, r2
 80125b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80125b8:	68bb      	ldr	r3, [r7, #8]
 80125ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80125bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80125c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80125c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80125c6:	4a04      	ldr	r2, [pc, #16]	; (80125d8 <__NVIC_SetPriorityGrouping+0x44>)
 80125c8:	68bb      	ldr	r3, [r7, #8]
 80125ca:	60d3      	str	r3, [r2, #12]
}
 80125cc:	bf00      	nop
 80125ce:	3714      	adds	r7, #20
 80125d0:	46bd      	mov	sp, r7
 80125d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d6:	4770      	bx	lr
 80125d8:	e000ed00 	.word	0xe000ed00

080125dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80125dc:	b480      	push	{r7}
 80125de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80125e0:	4b04      	ldr	r3, [pc, #16]	; (80125f4 <__NVIC_GetPriorityGrouping+0x18>)
 80125e2:	68db      	ldr	r3, [r3, #12]
 80125e4:	0a1b      	lsrs	r3, r3, #8
 80125e6:	f003 0307 	and.w	r3, r3, #7
}
 80125ea:	4618      	mov	r0, r3
 80125ec:	46bd      	mov	sp, r7
 80125ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f2:	4770      	bx	lr
 80125f4:	e000ed00 	.word	0xe000ed00

080125f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80125f8:	b480      	push	{r7}
 80125fa:	b083      	sub	sp, #12
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	4603      	mov	r3, r0
 8012600:	6039      	str	r1, [r7, #0]
 8012602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012608:	2b00      	cmp	r3, #0
 801260a:	db0a      	blt.n	8012622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801260c:	683b      	ldr	r3, [r7, #0]
 801260e:	b2da      	uxtb	r2, r3
 8012610:	490c      	ldr	r1, [pc, #48]	; (8012644 <__NVIC_SetPriority+0x4c>)
 8012612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012616:	0112      	lsls	r2, r2, #4
 8012618:	b2d2      	uxtb	r2, r2
 801261a:	440b      	add	r3, r1
 801261c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8012620:	e00a      	b.n	8012638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012622:	683b      	ldr	r3, [r7, #0]
 8012624:	b2da      	uxtb	r2, r3
 8012626:	4908      	ldr	r1, [pc, #32]	; (8012648 <__NVIC_SetPriority+0x50>)
 8012628:	79fb      	ldrb	r3, [r7, #7]
 801262a:	f003 030f 	and.w	r3, r3, #15
 801262e:	3b04      	subs	r3, #4
 8012630:	0112      	lsls	r2, r2, #4
 8012632:	b2d2      	uxtb	r2, r2
 8012634:	440b      	add	r3, r1
 8012636:	761a      	strb	r2, [r3, #24]
}
 8012638:	bf00      	nop
 801263a:	370c      	adds	r7, #12
 801263c:	46bd      	mov	sp, r7
 801263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012642:	4770      	bx	lr
 8012644:	e000e100 	.word	0xe000e100
 8012648:	e000ed00 	.word	0xe000ed00

0801264c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801264c:	b480      	push	{r7}
 801264e:	b089      	sub	sp, #36	; 0x24
 8012650:	af00      	add	r7, sp, #0
 8012652:	60f8      	str	r0, [r7, #12]
 8012654:	60b9      	str	r1, [r7, #8]
 8012656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	f003 0307 	and.w	r3, r3, #7
 801265e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012660:	69fb      	ldr	r3, [r7, #28]
 8012662:	f1c3 0307 	rsb	r3, r3, #7
 8012666:	2b04      	cmp	r3, #4
 8012668:	bf28      	it	cs
 801266a:	2304      	movcs	r3, #4
 801266c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801266e:	69fb      	ldr	r3, [r7, #28]
 8012670:	3304      	adds	r3, #4
 8012672:	2b06      	cmp	r3, #6
 8012674:	d902      	bls.n	801267c <NVIC_EncodePriority+0x30>
 8012676:	69fb      	ldr	r3, [r7, #28]
 8012678:	3b03      	subs	r3, #3
 801267a:	e000      	b.n	801267e <NVIC_EncodePriority+0x32>
 801267c:	2300      	movs	r3, #0
 801267e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012680:	f04f 32ff 	mov.w	r2, #4294967295
 8012684:	69bb      	ldr	r3, [r7, #24]
 8012686:	fa02 f303 	lsl.w	r3, r2, r3
 801268a:	43da      	mvns	r2, r3
 801268c:	68bb      	ldr	r3, [r7, #8]
 801268e:	401a      	ands	r2, r3
 8012690:	697b      	ldr	r3, [r7, #20]
 8012692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8012694:	f04f 31ff 	mov.w	r1, #4294967295
 8012698:	697b      	ldr	r3, [r7, #20]
 801269a:	fa01 f303 	lsl.w	r3, r1, r3
 801269e:	43d9      	mvns	r1, r3
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80126a4:	4313      	orrs	r3, r2
         );
}
 80126a6:	4618      	mov	r0, r3
 80126a8:	3724      	adds	r7, #36	; 0x24
 80126aa:	46bd      	mov	sp, r7
 80126ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b0:	4770      	bx	lr
	...

080126b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80126b4:	b580      	push	{r7, lr}
 80126b6:	b082      	sub	sp, #8
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	3b01      	subs	r3, #1
 80126c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80126c4:	d301      	bcc.n	80126ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80126c6:	2301      	movs	r3, #1
 80126c8:	e00f      	b.n	80126ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80126ca:	4a0a      	ldr	r2, [pc, #40]	; (80126f4 <SysTick_Config+0x40>)
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	3b01      	subs	r3, #1
 80126d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80126d2:	210f      	movs	r1, #15
 80126d4:	f04f 30ff 	mov.w	r0, #4294967295
 80126d8:	f7ff ff8e 	bl	80125f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80126dc:	4b05      	ldr	r3, [pc, #20]	; (80126f4 <SysTick_Config+0x40>)
 80126de:	2200      	movs	r2, #0
 80126e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80126e2:	4b04      	ldr	r3, [pc, #16]	; (80126f4 <SysTick_Config+0x40>)
 80126e4:	2207      	movs	r2, #7
 80126e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80126e8:	2300      	movs	r3, #0
}
 80126ea:	4618      	mov	r0, r3
 80126ec:	3708      	adds	r7, #8
 80126ee:	46bd      	mov	sp, r7
 80126f0:	bd80      	pop	{r7, pc}
 80126f2:	bf00      	nop
 80126f4:	e000e010 	.word	0xe000e010

080126f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b082      	sub	sp, #8
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8012700:	6878      	ldr	r0, [r7, #4]
 8012702:	f7ff ff47 	bl	8012594 <__NVIC_SetPriorityGrouping>
}
 8012706:	bf00      	nop
 8012708:	3708      	adds	r7, #8
 801270a:	46bd      	mov	sp, r7
 801270c:	bd80      	pop	{r7, pc}

0801270e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801270e:	b580      	push	{r7, lr}
 8012710:	b086      	sub	sp, #24
 8012712:	af00      	add	r7, sp, #0
 8012714:	4603      	mov	r3, r0
 8012716:	60b9      	str	r1, [r7, #8]
 8012718:	607a      	str	r2, [r7, #4]
 801271a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801271c:	2300      	movs	r3, #0
 801271e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8012720:	f7ff ff5c 	bl	80125dc <__NVIC_GetPriorityGrouping>
 8012724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8012726:	687a      	ldr	r2, [r7, #4]
 8012728:	68b9      	ldr	r1, [r7, #8]
 801272a:	6978      	ldr	r0, [r7, #20]
 801272c:	f7ff ff8e 	bl	801264c <NVIC_EncodePriority>
 8012730:	4602      	mov	r2, r0
 8012732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012736:	4611      	mov	r1, r2
 8012738:	4618      	mov	r0, r3
 801273a:	f7ff ff5d 	bl	80125f8 <__NVIC_SetPriority>
}
 801273e:	bf00      	nop
 8012740:	3718      	adds	r7, #24
 8012742:	46bd      	mov	sp, r7
 8012744:	bd80      	pop	{r7, pc}

08012746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8012746:	b580      	push	{r7, lr}
 8012748:	b082      	sub	sp, #8
 801274a:	af00      	add	r7, sp, #0
 801274c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801274e:	6878      	ldr	r0, [r7, #4]
 8012750:	f7ff ffb0 	bl	80126b4 <SysTick_Config>
 8012754:	4603      	mov	r3, r0
}
 8012756:	4618      	mov	r0, r3
 8012758:	3708      	adds	r7, #8
 801275a:	46bd      	mov	sp, r7
 801275c:	bd80      	pop	{r7, pc}
	...

08012760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8012760:	b480      	push	{r7}
 8012762:	b089      	sub	sp, #36	; 0x24
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
 8012768:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801276a:	2300      	movs	r3, #0
 801276c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801276e:	2300      	movs	r3, #0
 8012770:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8012772:	2300      	movs	r3, #0
 8012774:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012776:	2300      	movs	r3, #0
 8012778:	61fb      	str	r3, [r7, #28]
 801277a:	e159      	b.n	8012a30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801277c:	2201      	movs	r2, #1
 801277e:	69fb      	ldr	r3, [r7, #28]
 8012780:	fa02 f303 	lsl.w	r3, r2, r3
 8012784:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8012786:	683b      	ldr	r3, [r7, #0]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	697a      	ldr	r2, [r7, #20]
 801278c:	4013      	ands	r3, r2
 801278e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8012790:	693a      	ldr	r2, [r7, #16]
 8012792:	697b      	ldr	r3, [r7, #20]
 8012794:	429a      	cmp	r2, r3
 8012796:	f040 8148 	bne.w	8012a2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801279a:	683b      	ldr	r3, [r7, #0]
 801279c:	685b      	ldr	r3, [r3, #4]
 801279e:	f003 0303 	and.w	r3, r3, #3
 80127a2:	2b01      	cmp	r3, #1
 80127a4:	d005      	beq.n	80127b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80127a6:	683b      	ldr	r3, [r7, #0]
 80127a8:	685b      	ldr	r3, [r3, #4]
 80127aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80127ae:	2b02      	cmp	r3, #2
 80127b0:	d130      	bne.n	8012814 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	689b      	ldr	r3, [r3, #8]
 80127b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80127b8:	69fb      	ldr	r3, [r7, #28]
 80127ba:	005b      	lsls	r3, r3, #1
 80127bc:	2203      	movs	r2, #3
 80127be:	fa02 f303 	lsl.w	r3, r2, r3
 80127c2:	43db      	mvns	r3, r3
 80127c4:	69ba      	ldr	r2, [r7, #24]
 80127c6:	4013      	ands	r3, r2
 80127c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80127ca:	683b      	ldr	r3, [r7, #0]
 80127cc:	68da      	ldr	r2, [r3, #12]
 80127ce:	69fb      	ldr	r3, [r7, #28]
 80127d0:	005b      	lsls	r3, r3, #1
 80127d2:	fa02 f303 	lsl.w	r3, r2, r3
 80127d6:	69ba      	ldr	r2, [r7, #24]
 80127d8:	4313      	orrs	r3, r2
 80127da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	69ba      	ldr	r2, [r7, #24]
 80127e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	685b      	ldr	r3, [r3, #4]
 80127e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80127e8:	2201      	movs	r2, #1
 80127ea:	69fb      	ldr	r3, [r7, #28]
 80127ec:	fa02 f303 	lsl.w	r3, r2, r3
 80127f0:	43db      	mvns	r3, r3
 80127f2:	69ba      	ldr	r2, [r7, #24]
 80127f4:	4013      	ands	r3, r2
 80127f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80127f8:	683b      	ldr	r3, [r7, #0]
 80127fa:	685b      	ldr	r3, [r3, #4]
 80127fc:	091b      	lsrs	r3, r3, #4
 80127fe:	f003 0201 	and.w	r2, r3, #1
 8012802:	69fb      	ldr	r3, [r7, #28]
 8012804:	fa02 f303 	lsl.w	r3, r2, r3
 8012808:	69ba      	ldr	r2, [r7, #24]
 801280a:	4313      	orrs	r3, r2
 801280c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	69ba      	ldr	r2, [r7, #24]
 8012812:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8012814:	683b      	ldr	r3, [r7, #0]
 8012816:	685b      	ldr	r3, [r3, #4]
 8012818:	f003 0303 	and.w	r3, r3, #3
 801281c:	2b03      	cmp	r3, #3
 801281e:	d017      	beq.n	8012850 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	68db      	ldr	r3, [r3, #12]
 8012824:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8012826:	69fb      	ldr	r3, [r7, #28]
 8012828:	005b      	lsls	r3, r3, #1
 801282a:	2203      	movs	r2, #3
 801282c:	fa02 f303 	lsl.w	r3, r2, r3
 8012830:	43db      	mvns	r3, r3
 8012832:	69ba      	ldr	r2, [r7, #24]
 8012834:	4013      	ands	r3, r2
 8012836:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8012838:	683b      	ldr	r3, [r7, #0]
 801283a:	689a      	ldr	r2, [r3, #8]
 801283c:	69fb      	ldr	r3, [r7, #28]
 801283e:	005b      	lsls	r3, r3, #1
 8012840:	fa02 f303 	lsl.w	r3, r2, r3
 8012844:	69ba      	ldr	r2, [r7, #24]
 8012846:	4313      	orrs	r3, r2
 8012848:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	69ba      	ldr	r2, [r7, #24]
 801284e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8012850:	683b      	ldr	r3, [r7, #0]
 8012852:	685b      	ldr	r3, [r3, #4]
 8012854:	f003 0303 	and.w	r3, r3, #3
 8012858:	2b02      	cmp	r3, #2
 801285a:	d123      	bne.n	80128a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801285c:	69fb      	ldr	r3, [r7, #28]
 801285e:	08da      	lsrs	r2, r3, #3
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	3208      	adds	r2, #8
 8012864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012868:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801286a:	69fb      	ldr	r3, [r7, #28]
 801286c:	f003 0307 	and.w	r3, r3, #7
 8012870:	009b      	lsls	r3, r3, #2
 8012872:	220f      	movs	r2, #15
 8012874:	fa02 f303 	lsl.w	r3, r2, r3
 8012878:	43db      	mvns	r3, r3
 801287a:	69ba      	ldr	r2, [r7, #24]
 801287c:	4013      	ands	r3, r2
 801287e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8012880:	683b      	ldr	r3, [r7, #0]
 8012882:	691a      	ldr	r2, [r3, #16]
 8012884:	69fb      	ldr	r3, [r7, #28]
 8012886:	f003 0307 	and.w	r3, r3, #7
 801288a:	009b      	lsls	r3, r3, #2
 801288c:	fa02 f303 	lsl.w	r3, r2, r3
 8012890:	69ba      	ldr	r2, [r7, #24]
 8012892:	4313      	orrs	r3, r2
 8012894:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8012896:	69fb      	ldr	r3, [r7, #28]
 8012898:	08da      	lsrs	r2, r3, #3
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	3208      	adds	r2, #8
 801289e:	69b9      	ldr	r1, [r7, #24]
 80128a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80128aa:	69fb      	ldr	r3, [r7, #28]
 80128ac:	005b      	lsls	r3, r3, #1
 80128ae:	2203      	movs	r2, #3
 80128b0:	fa02 f303 	lsl.w	r3, r2, r3
 80128b4:	43db      	mvns	r3, r3
 80128b6:	69ba      	ldr	r2, [r7, #24]
 80128b8:	4013      	ands	r3, r2
 80128ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80128bc:	683b      	ldr	r3, [r7, #0]
 80128be:	685b      	ldr	r3, [r3, #4]
 80128c0:	f003 0203 	and.w	r2, r3, #3
 80128c4:	69fb      	ldr	r3, [r7, #28]
 80128c6:	005b      	lsls	r3, r3, #1
 80128c8:	fa02 f303 	lsl.w	r3, r2, r3
 80128cc:	69ba      	ldr	r2, [r7, #24]
 80128ce:	4313      	orrs	r3, r2
 80128d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	69ba      	ldr	r2, [r7, #24]
 80128d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80128d8:	683b      	ldr	r3, [r7, #0]
 80128da:	685b      	ldr	r3, [r3, #4]
 80128dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	f000 80a2 	beq.w	8012a2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80128e6:	2300      	movs	r3, #0
 80128e8:	60fb      	str	r3, [r7, #12]
 80128ea:	4b57      	ldr	r3, [pc, #348]	; (8012a48 <HAL_GPIO_Init+0x2e8>)
 80128ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128ee:	4a56      	ldr	r2, [pc, #344]	; (8012a48 <HAL_GPIO_Init+0x2e8>)
 80128f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80128f4:	6453      	str	r3, [r2, #68]	; 0x44
 80128f6:	4b54      	ldr	r3, [pc, #336]	; (8012a48 <HAL_GPIO_Init+0x2e8>)
 80128f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80128fe:	60fb      	str	r3, [r7, #12]
 8012900:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8012902:	4a52      	ldr	r2, [pc, #328]	; (8012a4c <HAL_GPIO_Init+0x2ec>)
 8012904:	69fb      	ldr	r3, [r7, #28]
 8012906:	089b      	lsrs	r3, r3, #2
 8012908:	3302      	adds	r3, #2
 801290a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801290e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8012910:	69fb      	ldr	r3, [r7, #28]
 8012912:	f003 0303 	and.w	r3, r3, #3
 8012916:	009b      	lsls	r3, r3, #2
 8012918:	220f      	movs	r2, #15
 801291a:	fa02 f303 	lsl.w	r3, r2, r3
 801291e:	43db      	mvns	r3, r3
 8012920:	69ba      	ldr	r2, [r7, #24]
 8012922:	4013      	ands	r3, r2
 8012924:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	4a49      	ldr	r2, [pc, #292]	; (8012a50 <HAL_GPIO_Init+0x2f0>)
 801292a:	4293      	cmp	r3, r2
 801292c:	d019      	beq.n	8012962 <HAL_GPIO_Init+0x202>
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	4a48      	ldr	r2, [pc, #288]	; (8012a54 <HAL_GPIO_Init+0x2f4>)
 8012932:	4293      	cmp	r3, r2
 8012934:	d013      	beq.n	801295e <HAL_GPIO_Init+0x1fe>
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	4a47      	ldr	r2, [pc, #284]	; (8012a58 <HAL_GPIO_Init+0x2f8>)
 801293a:	4293      	cmp	r3, r2
 801293c:	d00d      	beq.n	801295a <HAL_GPIO_Init+0x1fa>
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	4a46      	ldr	r2, [pc, #280]	; (8012a5c <HAL_GPIO_Init+0x2fc>)
 8012942:	4293      	cmp	r3, r2
 8012944:	d007      	beq.n	8012956 <HAL_GPIO_Init+0x1f6>
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	4a45      	ldr	r2, [pc, #276]	; (8012a60 <HAL_GPIO_Init+0x300>)
 801294a:	4293      	cmp	r3, r2
 801294c:	d101      	bne.n	8012952 <HAL_GPIO_Init+0x1f2>
 801294e:	2304      	movs	r3, #4
 8012950:	e008      	b.n	8012964 <HAL_GPIO_Init+0x204>
 8012952:	2307      	movs	r3, #7
 8012954:	e006      	b.n	8012964 <HAL_GPIO_Init+0x204>
 8012956:	2303      	movs	r3, #3
 8012958:	e004      	b.n	8012964 <HAL_GPIO_Init+0x204>
 801295a:	2302      	movs	r3, #2
 801295c:	e002      	b.n	8012964 <HAL_GPIO_Init+0x204>
 801295e:	2301      	movs	r3, #1
 8012960:	e000      	b.n	8012964 <HAL_GPIO_Init+0x204>
 8012962:	2300      	movs	r3, #0
 8012964:	69fa      	ldr	r2, [r7, #28]
 8012966:	f002 0203 	and.w	r2, r2, #3
 801296a:	0092      	lsls	r2, r2, #2
 801296c:	4093      	lsls	r3, r2
 801296e:	69ba      	ldr	r2, [r7, #24]
 8012970:	4313      	orrs	r3, r2
 8012972:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8012974:	4935      	ldr	r1, [pc, #212]	; (8012a4c <HAL_GPIO_Init+0x2ec>)
 8012976:	69fb      	ldr	r3, [r7, #28]
 8012978:	089b      	lsrs	r3, r3, #2
 801297a:	3302      	adds	r3, #2
 801297c:	69ba      	ldr	r2, [r7, #24]
 801297e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8012982:	4b38      	ldr	r3, [pc, #224]	; (8012a64 <HAL_GPIO_Init+0x304>)
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012988:	693b      	ldr	r3, [r7, #16]
 801298a:	43db      	mvns	r3, r3
 801298c:	69ba      	ldr	r2, [r7, #24]
 801298e:	4013      	ands	r3, r2
 8012990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8012992:	683b      	ldr	r3, [r7, #0]
 8012994:	685b      	ldr	r3, [r3, #4]
 8012996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801299a:	2b00      	cmp	r3, #0
 801299c:	d003      	beq.n	80129a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 801299e:	69ba      	ldr	r2, [r7, #24]
 80129a0:	693b      	ldr	r3, [r7, #16]
 80129a2:	4313      	orrs	r3, r2
 80129a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80129a6:	4a2f      	ldr	r2, [pc, #188]	; (8012a64 <HAL_GPIO_Init+0x304>)
 80129a8:	69bb      	ldr	r3, [r7, #24]
 80129aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80129ac:	4b2d      	ldr	r3, [pc, #180]	; (8012a64 <HAL_GPIO_Init+0x304>)
 80129ae:	685b      	ldr	r3, [r3, #4]
 80129b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80129b2:	693b      	ldr	r3, [r7, #16]
 80129b4:	43db      	mvns	r3, r3
 80129b6:	69ba      	ldr	r2, [r7, #24]
 80129b8:	4013      	ands	r3, r2
 80129ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80129bc:	683b      	ldr	r3, [r7, #0]
 80129be:	685b      	ldr	r3, [r3, #4]
 80129c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d003      	beq.n	80129d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80129c8:	69ba      	ldr	r2, [r7, #24]
 80129ca:	693b      	ldr	r3, [r7, #16]
 80129cc:	4313      	orrs	r3, r2
 80129ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80129d0:	4a24      	ldr	r2, [pc, #144]	; (8012a64 <HAL_GPIO_Init+0x304>)
 80129d2:	69bb      	ldr	r3, [r7, #24]
 80129d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80129d6:	4b23      	ldr	r3, [pc, #140]	; (8012a64 <HAL_GPIO_Init+0x304>)
 80129d8:	689b      	ldr	r3, [r3, #8]
 80129da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80129dc:	693b      	ldr	r3, [r7, #16]
 80129de:	43db      	mvns	r3, r3
 80129e0:	69ba      	ldr	r2, [r7, #24]
 80129e2:	4013      	ands	r3, r2
 80129e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80129e6:	683b      	ldr	r3, [r7, #0]
 80129e8:	685b      	ldr	r3, [r3, #4]
 80129ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d003      	beq.n	80129fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80129f2:	69ba      	ldr	r2, [r7, #24]
 80129f4:	693b      	ldr	r3, [r7, #16]
 80129f6:	4313      	orrs	r3, r2
 80129f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80129fa:	4a1a      	ldr	r2, [pc, #104]	; (8012a64 <HAL_GPIO_Init+0x304>)
 80129fc:	69bb      	ldr	r3, [r7, #24]
 80129fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8012a00:	4b18      	ldr	r3, [pc, #96]	; (8012a64 <HAL_GPIO_Init+0x304>)
 8012a02:	68db      	ldr	r3, [r3, #12]
 8012a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012a06:	693b      	ldr	r3, [r7, #16]
 8012a08:	43db      	mvns	r3, r3
 8012a0a:	69ba      	ldr	r2, [r7, #24]
 8012a0c:	4013      	ands	r3, r2
 8012a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8012a10:	683b      	ldr	r3, [r7, #0]
 8012a12:	685b      	ldr	r3, [r3, #4]
 8012a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d003      	beq.n	8012a24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8012a1c:	69ba      	ldr	r2, [r7, #24]
 8012a1e:	693b      	ldr	r3, [r7, #16]
 8012a20:	4313      	orrs	r3, r2
 8012a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8012a24:	4a0f      	ldr	r2, [pc, #60]	; (8012a64 <HAL_GPIO_Init+0x304>)
 8012a26:	69bb      	ldr	r3, [r7, #24]
 8012a28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012a2a:	69fb      	ldr	r3, [r7, #28]
 8012a2c:	3301      	adds	r3, #1
 8012a2e:	61fb      	str	r3, [r7, #28]
 8012a30:	69fb      	ldr	r3, [r7, #28]
 8012a32:	2b0f      	cmp	r3, #15
 8012a34:	f67f aea2 	bls.w	801277c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8012a38:	bf00      	nop
 8012a3a:	bf00      	nop
 8012a3c:	3724      	adds	r7, #36	; 0x24
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a44:	4770      	bx	lr
 8012a46:	bf00      	nop
 8012a48:	40023800 	.word	0x40023800
 8012a4c:	40013800 	.word	0x40013800
 8012a50:	40020000 	.word	0x40020000
 8012a54:	40020400 	.word	0x40020400
 8012a58:	40020800 	.word	0x40020800
 8012a5c:	40020c00 	.word	0x40020c00
 8012a60:	40021000 	.word	0x40021000
 8012a64:	40013c00 	.word	0x40013c00

08012a68 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8012a68:	b480      	push	{r7}
 8012a6a:	b087      	sub	sp, #28
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	6078      	str	r0, [r7, #4]
 8012a70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8012a72:	2300      	movs	r3, #0
 8012a74:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8012a76:	2300      	movs	r3, #0
 8012a78:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012a7e:	2300      	movs	r3, #0
 8012a80:	617b      	str	r3, [r7, #20]
 8012a82:	e0bb      	b.n	8012bfc <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8012a84:	2201      	movs	r2, #1
 8012a86:	697b      	ldr	r3, [r7, #20]
 8012a88:	fa02 f303 	lsl.w	r3, r2, r3
 8012a8c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8012a8e:	683a      	ldr	r2, [r7, #0]
 8012a90:	693b      	ldr	r3, [r7, #16]
 8012a92:	4013      	ands	r3, r2
 8012a94:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8012a96:	68fa      	ldr	r2, [r7, #12]
 8012a98:	693b      	ldr	r3, [r7, #16]
 8012a9a:	429a      	cmp	r2, r3
 8012a9c:	f040 80ab 	bne.w	8012bf6 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8012aa0:	4a5c      	ldr	r2, [pc, #368]	; (8012c14 <HAL_GPIO_DeInit+0x1ac>)
 8012aa2:	697b      	ldr	r3, [r7, #20]
 8012aa4:	089b      	lsrs	r3, r3, #2
 8012aa6:	3302      	adds	r3, #2
 8012aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012aac:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8012aae:	697b      	ldr	r3, [r7, #20]
 8012ab0:	f003 0303 	and.w	r3, r3, #3
 8012ab4:	009b      	lsls	r3, r3, #2
 8012ab6:	220f      	movs	r2, #15
 8012ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8012abc:	68ba      	ldr	r2, [r7, #8]
 8012abe:	4013      	ands	r3, r2
 8012ac0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	4a54      	ldr	r2, [pc, #336]	; (8012c18 <HAL_GPIO_DeInit+0x1b0>)
 8012ac6:	4293      	cmp	r3, r2
 8012ac8:	d019      	beq.n	8012afe <HAL_GPIO_DeInit+0x96>
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	4a53      	ldr	r2, [pc, #332]	; (8012c1c <HAL_GPIO_DeInit+0x1b4>)
 8012ace:	4293      	cmp	r3, r2
 8012ad0:	d013      	beq.n	8012afa <HAL_GPIO_DeInit+0x92>
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	4a52      	ldr	r2, [pc, #328]	; (8012c20 <HAL_GPIO_DeInit+0x1b8>)
 8012ad6:	4293      	cmp	r3, r2
 8012ad8:	d00d      	beq.n	8012af6 <HAL_GPIO_DeInit+0x8e>
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	4a51      	ldr	r2, [pc, #324]	; (8012c24 <HAL_GPIO_DeInit+0x1bc>)
 8012ade:	4293      	cmp	r3, r2
 8012ae0:	d007      	beq.n	8012af2 <HAL_GPIO_DeInit+0x8a>
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	4a50      	ldr	r2, [pc, #320]	; (8012c28 <HAL_GPIO_DeInit+0x1c0>)
 8012ae6:	4293      	cmp	r3, r2
 8012ae8:	d101      	bne.n	8012aee <HAL_GPIO_DeInit+0x86>
 8012aea:	2304      	movs	r3, #4
 8012aec:	e008      	b.n	8012b00 <HAL_GPIO_DeInit+0x98>
 8012aee:	2307      	movs	r3, #7
 8012af0:	e006      	b.n	8012b00 <HAL_GPIO_DeInit+0x98>
 8012af2:	2303      	movs	r3, #3
 8012af4:	e004      	b.n	8012b00 <HAL_GPIO_DeInit+0x98>
 8012af6:	2302      	movs	r3, #2
 8012af8:	e002      	b.n	8012b00 <HAL_GPIO_DeInit+0x98>
 8012afa:	2301      	movs	r3, #1
 8012afc:	e000      	b.n	8012b00 <HAL_GPIO_DeInit+0x98>
 8012afe:	2300      	movs	r3, #0
 8012b00:	697a      	ldr	r2, [r7, #20]
 8012b02:	f002 0203 	and.w	r2, r2, #3
 8012b06:	0092      	lsls	r2, r2, #2
 8012b08:	4093      	lsls	r3, r2
 8012b0a:	68ba      	ldr	r2, [r7, #8]
 8012b0c:	429a      	cmp	r2, r3
 8012b0e:	d132      	bne.n	8012b76 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8012b10:	4b46      	ldr	r3, [pc, #280]	; (8012c2c <HAL_GPIO_DeInit+0x1c4>)
 8012b12:	681a      	ldr	r2, [r3, #0]
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	43db      	mvns	r3, r3
 8012b18:	4944      	ldr	r1, [pc, #272]	; (8012c2c <HAL_GPIO_DeInit+0x1c4>)
 8012b1a:	4013      	ands	r3, r2
 8012b1c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8012b1e:	4b43      	ldr	r3, [pc, #268]	; (8012c2c <HAL_GPIO_DeInit+0x1c4>)
 8012b20:	685a      	ldr	r2, [r3, #4]
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	43db      	mvns	r3, r3
 8012b26:	4941      	ldr	r1, [pc, #260]	; (8012c2c <HAL_GPIO_DeInit+0x1c4>)
 8012b28:	4013      	ands	r3, r2
 8012b2a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8012b2c:	4b3f      	ldr	r3, [pc, #252]	; (8012c2c <HAL_GPIO_DeInit+0x1c4>)
 8012b2e:	689a      	ldr	r2, [r3, #8]
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	43db      	mvns	r3, r3
 8012b34:	493d      	ldr	r1, [pc, #244]	; (8012c2c <HAL_GPIO_DeInit+0x1c4>)
 8012b36:	4013      	ands	r3, r2
 8012b38:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8012b3a:	4b3c      	ldr	r3, [pc, #240]	; (8012c2c <HAL_GPIO_DeInit+0x1c4>)
 8012b3c:	68da      	ldr	r2, [r3, #12]
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	43db      	mvns	r3, r3
 8012b42:	493a      	ldr	r1, [pc, #232]	; (8012c2c <HAL_GPIO_DeInit+0x1c4>)
 8012b44:	4013      	ands	r3, r2
 8012b46:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8012b48:	697b      	ldr	r3, [r7, #20]
 8012b4a:	f003 0303 	and.w	r3, r3, #3
 8012b4e:	009b      	lsls	r3, r3, #2
 8012b50:	220f      	movs	r2, #15
 8012b52:	fa02 f303 	lsl.w	r3, r2, r3
 8012b56:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8012b58:	4a2e      	ldr	r2, [pc, #184]	; (8012c14 <HAL_GPIO_DeInit+0x1ac>)
 8012b5a:	697b      	ldr	r3, [r7, #20]
 8012b5c:	089b      	lsrs	r3, r3, #2
 8012b5e:	3302      	adds	r3, #2
 8012b60:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8012b64:	68bb      	ldr	r3, [r7, #8]
 8012b66:	43da      	mvns	r2, r3
 8012b68:	482a      	ldr	r0, [pc, #168]	; (8012c14 <HAL_GPIO_DeInit+0x1ac>)
 8012b6a:	697b      	ldr	r3, [r7, #20]
 8012b6c:	089b      	lsrs	r3, r3, #2
 8012b6e:	400a      	ands	r2, r1
 8012b70:	3302      	adds	r3, #2
 8012b72:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	681a      	ldr	r2, [r3, #0]
 8012b7a:	697b      	ldr	r3, [r7, #20]
 8012b7c:	005b      	lsls	r3, r3, #1
 8012b7e:	2103      	movs	r1, #3
 8012b80:	fa01 f303 	lsl.w	r3, r1, r3
 8012b84:	43db      	mvns	r3, r3
 8012b86:	401a      	ands	r2, r3
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8012b8c:	697b      	ldr	r3, [r7, #20]
 8012b8e:	08da      	lsrs	r2, r3, #3
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	3208      	adds	r2, #8
 8012b94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012b98:	697b      	ldr	r3, [r7, #20]
 8012b9a:	f003 0307 	and.w	r3, r3, #7
 8012b9e:	009b      	lsls	r3, r3, #2
 8012ba0:	220f      	movs	r2, #15
 8012ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8012ba6:	43db      	mvns	r3, r3
 8012ba8:	697a      	ldr	r2, [r7, #20]
 8012baa:	08d2      	lsrs	r2, r2, #3
 8012bac:	4019      	ands	r1, r3
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	3208      	adds	r2, #8
 8012bb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	68da      	ldr	r2, [r3, #12]
 8012bba:	697b      	ldr	r3, [r7, #20]
 8012bbc:	005b      	lsls	r3, r3, #1
 8012bbe:	2103      	movs	r1, #3
 8012bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8012bc4:	43db      	mvns	r3, r3
 8012bc6:	401a      	ands	r2, r3
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	685a      	ldr	r2, [r3, #4]
 8012bd0:	2101      	movs	r1, #1
 8012bd2:	697b      	ldr	r3, [r7, #20]
 8012bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8012bd8:	43db      	mvns	r3, r3
 8012bda:	401a      	ands	r2, r3
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	689a      	ldr	r2, [r3, #8]
 8012be4:	697b      	ldr	r3, [r7, #20]
 8012be6:	005b      	lsls	r3, r3, #1
 8012be8:	2103      	movs	r1, #3
 8012bea:	fa01 f303 	lsl.w	r3, r1, r3
 8012bee:	43db      	mvns	r3, r3
 8012bf0:	401a      	ands	r2, r3
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012bf6:	697b      	ldr	r3, [r7, #20]
 8012bf8:	3301      	adds	r3, #1
 8012bfa:	617b      	str	r3, [r7, #20]
 8012bfc:	697b      	ldr	r3, [r7, #20]
 8012bfe:	2b0f      	cmp	r3, #15
 8012c00:	f67f af40 	bls.w	8012a84 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8012c04:	bf00      	nop
 8012c06:	bf00      	nop
 8012c08:	371c      	adds	r7, #28
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c10:	4770      	bx	lr
 8012c12:	bf00      	nop
 8012c14:	40013800 	.word	0x40013800
 8012c18:	40020000 	.word	0x40020000
 8012c1c:	40020400 	.word	0x40020400
 8012c20:	40020800 	.word	0x40020800
 8012c24:	40020c00 	.word	0x40020c00
 8012c28:	40021000 	.word	0x40021000
 8012c2c:	40013c00 	.word	0x40013c00

08012c30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8012c30:	b480      	push	{r7}
 8012c32:	b085      	sub	sp, #20
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	6078      	str	r0, [r7, #4]
 8012c38:	460b      	mov	r3, r1
 8012c3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	691a      	ldr	r2, [r3, #16]
 8012c40:	887b      	ldrh	r3, [r7, #2]
 8012c42:	4013      	ands	r3, r2
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d002      	beq.n	8012c4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8012c48:	2301      	movs	r3, #1
 8012c4a:	73fb      	strb	r3, [r7, #15]
 8012c4c:	e001      	b.n	8012c52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8012c4e:	2300      	movs	r3, #0
 8012c50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8012c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c54:	4618      	mov	r0, r3
 8012c56:	3714      	adds	r7, #20
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c5e:	4770      	bx	lr

08012c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8012c60:	b480      	push	{r7}
 8012c62:	b083      	sub	sp, #12
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	6078      	str	r0, [r7, #4]
 8012c68:	460b      	mov	r3, r1
 8012c6a:	807b      	strh	r3, [r7, #2]
 8012c6c:	4613      	mov	r3, r2
 8012c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8012c70:	787b      	ldrb	r3, [r7, #1]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d003      	beq.n	8012c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8012c76:	887a      	ldrh	r2, [r7, #2]
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8012c7c:	e003      	b.n	8012c86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8012c7e:	887b      	ldrh	r3, [r7, #2]
 8012c80:	041a      	lsls	r2, r3, #16
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	619a      	str	r2, [r3, #24]
}
 8012c86:	bf00      	nop
 8012c88:	370c      	adds	r7, #12
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c90:	4770      	bx	lr
	...

08012c94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b084      	sub	sp, #16
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d101      	bne.n	8012ca6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8012ca2:	2301      	movs	r3, #1
 8012ca4:	e12b      	b.n	8012efe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012cac:	b2db      	uxtb	r3, r3
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d106      	bne.n	8012cc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8012cba:	6878      	ldr	r0, [r7, #4]
 8012cbc:	f000 f95d 	bl	8012f7a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	2224      	movs	r2, #36	; 0x24
 8012cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	681a      	ldr	r2, [r3, #0]
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	f022 0201 	bic.w	r2, r2, #1
 8012cd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	681a      	ldr	r2, [r3, #0]
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012ce6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	681a      	ldr	r2, [r3, #0]
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012cf6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8012cf8:	f001 fc0c 	bl	8014514 <HAL_RCC_GetPCLK1Freq>
 8012cfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	685b      	ldr	r3, [r3, #4]
 8012d02:	4a81      	ldr	r2, [pc, #516]	; (8012f08 <HAL_I2C_Init+0x274>)
 8012d04:	4293      	cmp	r3, r2
 8012d06:	d807      	bhi.n	8012d18 <HAL_I2C_Init+0x84>
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	4a80      	ldr	r2, [pc, #512]	; (8012f0c <HAL_I2C_Init+0x278>)
 8012d0c:	4293      	cmp	r3, r2
 8012d0e:	bf94      	ite	ls
 8012d10:	2301      	movls	r3, #1
 8012d12:	2300      	movhi	r3, #0
 8012d14:	b2db      	uxtb	r3, r3
 8012d16:	e006      	b.n	8012d26 <HAL_I2C_Init+0x92>
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	4a7d      	ldr	r2, [pc, #500]	; (8012f10 <HAL_I2C_Init+0x27c>)
 8012d1c:	4293      	cmp	r3, r2
 8012d1e:	bf94      	ite	ls
 8012d20:	2301      	movls	r3, #1
 8012d22:	2300      	movhi	r3, #0
 8012d24:	b2db      	uxtb	r3, r3
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d001      	beq.n	8012d2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8012d2a:	2301      	movs	r3, #1
 8012d2c:	e0e7      	b.n	8012efe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	4a78      	ldr	r2, [pc, #480]	; (8012f14 <HAL_I2C_Init+0x280>)
 8012d32:	fba2 2303 	umull	r2, r3, r2, r3
 8012d36:	0c9b      	lsrs	r3, r3, #18
 8012d38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	685b      	ldr	r3, [r3, #4]
 8012d40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	68ba      	ldr	r2, [r7, #8]
 8012d4a:	430a      	orrs	r2, r1
 8012d4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	6a1b      	ldr	r3, [r3, #32]
 8012d54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	685b      	ldr	r3, [r3, #4]
 8012d5c:	4a6a      	ldr	r2, [pc, #424]	; (8012f08 <HAL_I2C_Init+0x274>)
 8012d5e:	4293      	cmp	r3, r2
 8012d60:	d802      	bhi.n	8012d68 <HAL_I2C_Init+0xd4>
 8012d62:	68bb      	ldr	r3, [r7, #8]
 8012d64:	3301      	adds	r3, #1
 8012d66:	e009      	b.n	8012d7c <HAL_I2C_Init+0xe8>
 8012d68:	68bb      	ldr	r3, [r7, #8]
 8012d6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8012d6e:	fb02 f303 	mul.w	r3, r2, r3
 8012d72:	4a69      	ldr	r2, [pc, #420]	; (8012f18 <HAL_I2C_Init+0x284>)
 8012d74:	fba2 2303 	umull	r2, r3, r2, r3
 8012d78:	099b      	lsrs	r3, r3, #6
 8012d7a:	3301      	adds	r3, #1
 8012d7c:	687a      	ldr	r2, [r7, #4]
 8012d7e:	6812      	ldr	r2, [r2, #0]
 8012d80:	430b      	orrs	r3, r1
 8012d82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	69db      	ldr	r3, [r3, #28]
 8012d8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8012d8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	685b      	ldr	r3, [r3, #4]
 8012d96:	495c      	ldr	r1, [pc, #368]	; (8012f08 <HAL_I2C_Init+0x274>)
 8012d98:	428b      	cmp	r3, r1
 8012d9a:	d819      	bhi.n	8012dd0 <HAL_I2C_Init+0x13c>
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	1e59      	subs	r1, r3, #1
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	685b      	ldr	r3, [r3, #4]
 8012da4:	005b      	lsls	r3, r3, #1
 8012da6:	fbb1 f3f3 	udiv	r3, r1, r3
 8012daa:	1c59      	adds	r1, r3, #1
 8012dac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8012db0:	400b      	ands	r3, r1
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d00a      	beq.n	8012dcc <HAL_I2C_Init+0x138>
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	1e59      	subs	r1, r3, #1
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	685b      	ldr	r3, [r3, #4]
 8012dbe:	005b      	lsls	r3, r3, #1
 8012dc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8012dc4:	3301      	adds	r3, #1
 8012dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012dca:	e051      	b.n	8012e70 <HAL_I2C_Init+0x1dc>
 8012dcc:	2304      	movs	r3, #4
 8012dce:	e04f      	b.n	8012e70 <HAL_I2C_Init+0x1dc>
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	689b      	ldr	r3, [r3, #8]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d111      	bne.n	8012dfc <HAL_I2C_Init+0x168>
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	1e58      	subs	r0, r3, #1
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	6859      	ldr	r1, [r3, #4]
 8012de0:	460b      	mov	r3, r1
 8012de2:	005b      	lsls	r3, r3, #1
 8012de4:	440b      	add	r3, r1
 8012de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8012dea:	3301      	adds	r3, #1
 8012dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	bf0c      	ite	eq
 8012df4:	2301      	moveq	r3, #1
 8012df6:	2300      	movne	r3, #0
 8012df8:	b2db      	uxtb	r3, r3
 8012dfa:	e012      	b.n	8012e22 <HAL_I2C_Init+0x18e>
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	1e58      	subs	r0, r3, #1
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	6859      	ldr	r1, [r3, #4]
 8012e04:	460b      	mov	r3, r1
 8012e06:	009b      	lsls	r3, r3, #2
 8012e08:	440b      	add	r3, r1
 8012e0a:	0099      	lsls	r1, r3, #2
 8012e0c:	440b      	add	r3, r1
 8012e0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8012e12:	3301      	adds	r3, #1
 8012e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	bf0c      	ite	eq
 8012e1c:	2301      	moveq	r3, #1
 8012e1e:	2300      	movne	r3, #0
 8012e20:	b2db      	uxtb	r3, r3
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d001      	beq.n	8012e2a <HAL_I2C_Init+0x196>
 8012e26:	2301      	movs	r3, #1
 8012e28:	e022      	b.n	8012e70 <HAL_I2C_Init+0x1dc>
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	689b      	ldr	r3, [r3, #8]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d10e      	bne.n	8012e50 <HAL_I2C_Init+0x1bc>
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	1e58      	subs	r0, r3, #1
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	6859      	ldr	r1, [r3, #4]
 8012e3a:	460b      	mov	r3, r1
 8012e3c:	005b      	lsls	r3, r3, #1
 8012e3e:	440b      	add	r3, r1
 8012e40:	fbb0 f3f3 	udiv	r3, r0, r3
 8012e44:	3301      	adds	r3, #1
 8012e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012e4e:	e00f      	b.n	8012e70 <HAL_I2C_Init+0x1dc>
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	1e58      	subs	r0, r3, #1
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	6859      	ldr	r1, [r3, #4]
 8012e58:	460b      	mov	r3, r1
 8012e5a:	009b      	lsls	r3, r3, #2
 8012e5c:	440b      	add	r3, r1
 8012e5e:	0099      	lsls	r1, r3, #2
 8012e60:	440b      	add	r3, r1
 8012e62:	fbb0 f3f3 	udiv	r3, r0, r3
 8012e66:	3301      	adds	r3, #1
 8012e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012e6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012e70:	6879      	ldr	r1, [r7, #4]
 8012e72:	6809      	ldr	r1, [r1, #0]
 8012e74:	4313      	orrs	r3, r2
 8012e76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	69da      	ldr	r2, [r3, #28]
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	6a1b      	ldr	r3, [r3, #32]
 8012e8a:	431a      	orrs	r2, r3
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	430a      	orrs	r2, r1
 8012e92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	689b      	ldr	r3, [r3, #8]
 8012e9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8012e9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8012ea2:	687a      	ldr	r2, [r7, #4]
 8012ea4:	6911      	ldr	r1, [r2, #16]
 8012ea6:	687a      	ldr	r2, [r7, #4]
 8012ea8:	68d2      	ldr	r2, [r2, #12]
 8012eaa:	4311      	orrs	r1, r2
 8012eac:	687a      	ldr	r2, [r7, #4]
 8012eae:	6812      	ldr	r2, [r2, #0]
 8012eb0:	430b      	orrs	r3, r1
 8012eb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	68db      	ldr	r3, [r3, #12]
 8012eba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	695a      	ldr	r2, [r3, #20]
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	699b      	ldr	r3, [r3, #24]
 8012ec6:	431a      	orrs	r2, r3
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	430a      	orrs	r2, r1
 8012ece:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	681a      	ldr	r2, [r3, #0]
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	f042 0201 	orr.w	r2, r2, #1
 8012ede:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	2220      	movs	r2, #32
 8012eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8012efc:	2300      	movs	r3, #0
}
 8012efe:	4618      	mov	r0, r3
 8012f00:	3710      	adds	r7, #16
 8012f02:	46bd      	mov	sp, r7
 8012f04:	bd80      	pop	{r7, pc}
 8012f06:	bf00      	nop
 8012f08:	000186a0 	.word	0x000186a0
 8012f0c:	001e847f 	.word	0x001e847f
 8012f10:	003d08ff 	.word	0x003d08ff
 8012f14:	431bde83 	.word	0x431bde83
 8012f18:	10624dd3 	.word	0x10624dd3

08012f1c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b082      	sub	sp, #8
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d101      	bne.n	8012f2e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8012f2a:	2301      	movs	r3, #1
 8012f2c:	e021      	b.n	8012f72 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	2224      	movs	r2, #36	; 0x24
 8012f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	681a      	ldr	r2, [r3, #0]
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	f022 0201 	bic.w	r2, r2, #1
 8012f44:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8012f46:	6878      	ldr	r0, [r7, #4]
 8012f48:	f000 f821 	bl	8012f8e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	2200      	movs	r2, #0
 8012f50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	2200      	movs	r2, #0
 8012f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	2200      	movs	r2, #0
 8012f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012f70:	2300      	movs	r3, #0
}
 8012f72:	4618      	mov	r0, r3
 8012f74:	3708      	adds	r7, #8
 8012f76:	46bd      	mov	sp, r7
 8012f78:	bd80      	pop	{r7, pc}

08012f7a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8012f7a:	b480      	push	{r7}
 8012f7c:	b083      	sub	sp, #12
 8012f7e:	af00      	add	r7, sp, #0
 8012f80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8012f82:	bf00      	nop
 8012f84:	370c      	adds	r7, #12
 8012f86:	46bd      	mov	sp, r7
 8012f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8c:	4770      	bx	lr

08012f8e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8012f8e:	b480      	push	{r7}
 8012f90:	b083      	sub	sp, #12
 8012f92:	af00      	add	r7, sp, #0
 8012f94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8012f96:	bf00      	nop
 8012f98:	370c      	adds	r7, #12
 8012f9a:	46bd      	mov	sp, r7
 8012f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa0:	4770      	bx	lr
	...

08012fa4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012fa4:	b580      	push	{r7, lr}
 8012fa6:	b088      	sub	sp, #32
 8012fa8:	af02      	add	r7, sp, #8
 8012faa:	60f8      	str	r0, [r7, #12]
 8012fac:	607a      	str	r2, [r7, #4]
 8012fae:	461a      	mov	r2, r3
 8012fb0:	460b      	mov	r3, r1
 8012fb2:	817b      	strh	r3, [r7, #10]
 8012fb4:	4613      	mov	r3, r2
 8012fb6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8012fb8:	f7ff fabc 	bl	8012534 <HAL_GetTick>
 8012fbc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012fc4:	b2db      	uxtb	r3, r3
 8012fc6:	2b20      	cmp	r3, #32
 8012fc8:	f040 80e0 	bne.w	801318c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8012fcc:	697b      	ldr	r3, [r7, #20]
 8012fce:	9300      	str	r3, [sp, #0]
 8012fd0:	2319      	movs	r3, #25
 8012fd2:	2201      	movs	r2, #1
 8012fd4:	4970      	ldr	r1, [pc, #448]	; (8013198 <HAL_I2C_Master_Transmit+0x1f4>)
 8012fd6:	68f8      	ldr	r0, [r7, #12]
 8012fd8:	f000 fc72 	bl	80138c0 <I2C_WaitOnFlagUntilTimeout>
 8012fdc:	4603      	mov	r3, r0
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d001      	beq.n	8012fe6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8012fe2:	2302      	movs	r3, #2
 8012fe4:	e0d3      	b.n	801318e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012fec:	2b01      	cmp	r3, #1
 8012fee:	d101      	bne.n	8012ff4 <HAL_I2C_Master_Transmit+0x50>
 8012ff0:	2302      	movs	r3, #2
 8012ff2:	e0cc      	b.n	801318e <HAL_I2C_Master_Transmit+0x1ea>
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	2201      	movs	r2, #1
 8012ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	f003 0301 	and.w	r3, r3, #1
 8013006:	2b01      	cmp	r3, #1
 8013008:	d007      	beq.n	801301a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	681a      	ldr	r2, [r3, #0]
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	f042 0201 	orr.w	r2, r2, #1
 8013018:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	681a      	ldr	r2, [r3, #0]
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013028:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	2221      	movs	r2, #33	; 0x21
 801302e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	2210      	movs	r2, #16
 8013036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	2200      	movs	r2, #0
 801303e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	687a      	ldr	r2, [r7, #4]
 8013044:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	893a      	ldrh	r2, [r7, #8]
 801304a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013050:	b29a      	uxth	r2, r3
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	4a50      	ldr	r2, [pc, #320]	; (801319c <HAL_I2C_Master_Transmit+0x1f8>)
 801305a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 801305c:	8979      	ldrh	r1, [r7, #10]
 801305e:	697b      	ldr	r3, [r7, #20]
 8013060:	6a3a      	ldr	r2, [r7, #32]
 8013062:	68f8      	ldr	r0, [r7, #12]
 8013064:	f000 fadc 	bl	8013620 <I2C_MasterRequestWrite>
 8013068:	4603      	mov	r3, r0
 801306a:	2b00      	cmp	r3, #0
 801306c:	d001      	beq.n	8013072 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 801306e:	2301      	movs	r3, #1
 8013070:	e08d      	b.n	801318e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013072:	2300      	movs	r3, #0
 8013074:	613b      	str	r3, [r7, #16]
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	695b      	ldr	r3, [r3, #20]
 801307c:	613b      	str	r3, [r7, #16]
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	699b      	ldr	r3, [r3, #24]
 8013084:	613b      	str	r3, [r7, #16]
 8013086:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8013088:	e066      	b.n	8013158 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801308a:	697a      	ldr	r2, [r7, #20]
 801308c:	6a39      	ldr	r1, [r7, #32]
 801308e:	68f8      	ldr	r0, [r7, #12]
 8013090:	f000 fcec 	bl	8013a6c <I2C_WaitOnTXEFlagUntilTimeout>
 8013094:	4603      	mov	r3, r0
 8013096:	2b00      	cmp	r3, #0
 8013098:	d00d      	beq.n	80130b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801309e:	2b04      	cmp	r3, #4
 80130a0:	d107      	bne.n	80130b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	681a      	ldr	r2, [r3, #0]
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80130b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80130b2:	2301      	movs	r3, #1
 80130b4:	e06b      	b.n	801318e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130ba:	781a      	ldrb	r2, [r3, #0]
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130c6:	1c5a      	adds	r2, r3, #1
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80130d0:	b29b      	uxth	r3, r3
 80130d2:	3b01      	subs	r3, #1
 80130d4:	b29a      	uxth	r2, r3
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80130de:	3b01      	subs	r3, #1
 80130e0:	b29a      	uxth	r2, r3
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	695b      	ldr	r3, [r3, #20]
 80130ec:	f003 0304 	and.w	r3, r3, #4
 80130f0:	2b04      	cmp	r3, #4
 80130f2:	d11b      	bne.n	801312c <HAL_I2C_Master_Transmit+0x188>
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d017      	beq.n	801312c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013100:	781a      	ldrb	r2, [r3, #0]
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801310c:	1c5a      	adds	r2, r3, #1
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013116:	b29b      	uxth	r3, r3
 8013118:	3b01      	subs	r3, #1
 801311a:	b29a      	uxth	r2, r3
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013124:	3b01      	subs	r3, #1
 8013126:	b29a      	uxth	r2, r3
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801312c:	697a      	ldr	r2, [r7, #20]
 801312e:	6a39      	ldr	r1, [r7, #32]
 8013130:	68f8      	ldr	r0, [r7, #12]
 8013132:	f000 fcdc 	bl	8013aee <I2C_WaitOnBTFFlagUntilTimeout>
 8013136:	4603      	mov	r3, r0
 8013138:	2b00      	cmp	r3, #0
 801313a:	d00d      	beq.n	8013158 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013140:	2b04      	cmp	r3, #4
 8013142:	d107      	bne.n	8013154 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	681a      	ldr	r2, [r3, #0]
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013152:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8013154:	2301      	movs	r3, #1
 8013156:	e01a      	b.n	801318e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801315c:	2b00      	cmp	r3, #0
 801315e:	d194      	bne.n	801308a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	681a      	ldr	r2, [r3, #0]
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801316e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	2220      	movs	r2, #32
 8013174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	2200      	movs	r2, #0
 801317c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	2200      	movs	r2, #0
 8013184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8013188:	2300      	movs	r3, #0
 801318a:	e000      	b.n	801318e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 801318c:	2302      	movs	r3, #2
  }
}
 801318e:	4618      	mov	r0, r3
 8013190:	3718      	adds	r7, #24
 8013192:	46bd      	mov	sp, r7
 8013194:	bd80      	pop	{r7, pc}
 8013196:	bf00      	nop
 8013198:	00100002 	.word	0x00100002
 801319c:	ffff0000 	.word	0xffff0000

080131a0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80131a0:	b580      	push	{r7, lr}
 80131a2:	b08c      	sub	sp, #48	; 0x30
 80131a4:	af02      	add	r7, sp, #8
 80131a6:	60f8      	str	r0, [r7, #12]
 80131a8:	607a      	str	r2, [r7, #4]
 80131aa:	461a      	mov	r2, r3
 80131ac:	460b      	mov	r3, r1
 80131ae:	817b      	strh	r3, [r7, #10]
 80131b0:	4613      	mov	r3, r2
 80131b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80131b4:	f7ff f9be 	bl	8012534 <HAL_GetTick>
 80131b8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80131c0:	b2db      	uxtb	r3, r3
 80131c2:	2b20      	cmp	r3, #32
 80131c4:	f040 820b 	bne.w	80135de <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80131c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ca:	9300      	str	r3, [sp, #0]
 80131cc:	2319      	movs	r3, #25
 80131ce:	2201      	movs	r2, #1
 80131d0:	497c      	ldr	r1, [pc, #496]	; (80133c4 <HAL_I2C_Master_Receive+0x224>)
 80131d2:	68f8      	ldr	r0, [r7, #12]
 80131d4:	f000 fb74 	bl	80138c0 <I2C_WaitOnFlagUntilTimeout>
 80131d8:	4603      	mov	r3, r0
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d001      	beq.n	80131e2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80131de:	2302      	movs	r3, #2
 80131e0:	e1fe      	b.n	80135e0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80131e8:	2b01      	cmp	r3, #1
 80131ea:	d101      	bne.n	80131f0 <HAL_I2C_Master_Receive+0x50>
 80131ec:	2302      	movs	r3, #2
 80131ee:	e1f7      	b.n	80135e0 <HAL_I2C_Master_Receive+0x440>
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	2201      	movs	r2, #1
 80131f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	f003 0301 	and.w	r3, r3, #1
 8013202:	2b01      	cmp	r3, #1
 8013204:	d007      	beq.n	8013216 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	681a      	ldr	r2, [r3, #0]
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	f042 0201 	orr.w	r2, r2, #1
 8013214:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	681a      	ldr	r2, [r3, #0]
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013224:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	2222      	movs	r2, #34	; 0x22
 801322a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	2210      	movs	r2, #16
 8013232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	2200      	movs	r2, #0
 801323a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	687a      	ldr	r2, [r7, #4]
 8013240:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	893a      	ldrh	r2, [r7, #8]
 8013246:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801324c:	b29a      	uxth	r2, r3
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	4a5c      	ldr	r2, [pc, #368]	; (80133c8 <HAL_I2C_Master_Receive+0x228>)
 8013256:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8013258:	8979      	ldrh	r1, [r7, #10]
 801325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801325c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801325e:	68f8      	ldr	r0, [r7, #12]
 8013260:	f000 fa60 	bl	8013724 <I2C_MasterRequestRead>
 8013264:	4603      	mov	r3, r0
 8013266:	2b00      	cmp	r3, #0
 8013268:	d001      	beq.n	801326e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 801326a:	2301      	movs	r3, #1
 801326c:	e1b8      	b.n	80135e0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013272:	2b00      	cmp	r3, #0
 8013274:	d113      	bne.n	801329e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013276:	2300      	movs	r3, #0
 8013278:	623b      	str	r3, [r7, #32]
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	695b      	ldr	r3, [r3, #20]
 8013280:	623b      	str	r3, [r7, #32]
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	699b      	ldr	r3, [r3, #24]
 8013288:	623b      	str	r3, [r7, #32]
 801328a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	681a      	ldr	r2, [r3, #0]
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801329a:	601a      	str	r2, [r3, #0]
 801329c:	e18c      	b.n	80135b8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80132a2:	2b01      	cmp	r3, #1
 80132a4:	d11b      	bne.n	80132de <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	681a      	ldr	r2, [r3, #0]
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80132b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80132b6:	2300      	movs	r3, #0
 80132b8:	61fb      	str	r3, [r7, #28]
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	695b      	ldr	r3, [r3, #20]
 80132c0:	61fb      	str	r3, [r7, #28]
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	699b      	ldr	r3, [r3, #24]
 80132c8:	61fb      	str	r3, [r7, #28]
 80132ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	681a      	ldr	r2, [r3, #0]
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80132da:	601a      	str	r2, [r3, #0]
 80132dc:	e16c      	b.n	80135b8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80132e2:	2b02      	cmp	r3, #2
 80132e4:	d11b      	bne.n	801331e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	681a      	ldr	r2, [r3, #0]
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80132f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	681a      	ldr	r2, [r3, #0]
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013304:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013306:	2300      	movs	r3, #0
 8013308:	61bb      	str	r3, [r7, #24]
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	695b      	ldr	r3, [r3, #20]
 8013310:	61bb      	str	r3, [r7, #24]
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	699b      	ldr	r3, [r3, #24]
 8013318:	61bb      	str	r3, [r7, #24]
 801331a:	69bb      	ldr	r3, [r7, #24]
 801331c:	e14c      	b.n	80135b8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	681a      	ldr	r2, [r3, #0]
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801332c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801332e:	2300      	movs	r3, #0
 8013330:	617b      	str	r3, [r7, #20]
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	695b      	ldr	r3, [r3, #20]
 8013338:	617b      	str	r3, [r7, #20]
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	699b      	ldr	r3, [r3, #24]
 8013340:	617b      	str	r3, [r7, #20]
 8013342:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8013344:	e138      	b.n	80135b8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801334a:	2b03      	cmp	r3, #3
 801334c:	f200 80f1 	bhi.w	8013532 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013354:	2b01      	cmp	r3, #1
 8013356:	d123      	bne.n	80133a0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8013358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801335a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801335c:	68f8      	ldr	r0, [r7, #12]
 801335e:	f000 fc07 	bl	8013b70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8013362:	4603      	mov	r3, r0
 8013364:	2b00      	cmp	r3, #0
 8013366:	d001      	beq.n	801336c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8013368:	2301      	movs	r3, #1
 801336a:	e139      	b.n	80135e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	691a      	ldr	r2, [r3, #16]
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013376:	b2d2      	uxtb	r2, r2
 8013378:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801337e:	1c5a      	adds	r2, r3, #1
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013388:	3b01      	subs	r3, #1
 801338a:	b29a      	uxth	r2, r3
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013394:	b29b      	uxth	r3, r3
 8013396:	3b01      	subs	r3, #1
 8013398:	b29a      	uxth	r2, r3
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801339e:	e10b      	b.n	80135b8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80133a4:	2b02      	cmp	r3, #2
 80133a6:	d14e      	bne.n	8013446 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80133a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133aa:	9300      	str	r3, [sp, #0]
 80133ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ae:	2200      	movs	r2, #0
 80133b0:	4906      	ldr	r1, [pc, #24]	; (80133cc <HAL_I2C_Master_Receive+0x22c>)
 80133b2:	68f8      	ldr	r0, [r7, #12]
 80133b4:	f000 fa84 	bl	80138c0 <I2C_WaitOnFlagUntilTimeout>
 80133b8:	4603      	mov	r3, r0
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d008      	beq.n	80133d0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80133be:	2301      	movs	r3, #1
 80133c0:	e10e      	b.n	80135e0 <HAL_I2C_Master_Receive+0x440>
 80133c2:	bf00      	nop
 80133c4:	00100002 	.word	0x00100002
 80133c8:	ffff0000 	.word	0xffff0000
 80133cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	681a      	ldr	r2, [r3, #0]
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80133de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	691a      	ldr	r2, [r3, #16]
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133ea:	b2d2      	uxtb	r2, r2
 80133ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133f2:	1c5a      	adds	r2, r3, #1
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80133fc:	3b01      	subs	r3, #1
 80133fe:	b29a      	uxth	r2, r3
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013408:	b29b      	uxth	r3, r3
 801340a:	3b01      	subs	r3, #1
 801340c:	b29a      	uxth	r2, r3
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	691a      	ldr	r2, [r3, #16]
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801341c:	b2d2      	uxtb	r2, r2
 801341e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013424:	1c5a      	adds	r2, r3, #1
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801342e:	3b01      	subs	r3, #1
 8013430:	b29a      	uxth	r2, r3
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801343a:	b29b      	uxth	r3, r3
 801343c:	3b01      	subs	r3, #1
 801343e:	b29a      	uxth	r2, r3
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013444:	e0b8      	b.n	80135b8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8013446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013448:	9300      	str	r3, [sp, #0]
 801344a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801344c:	2200      	movs	r2, #0
 801344e:	4966      	ldr	r1, [pc, #408]	; (80135e8 <HAL_I2C_Master_Receive+0x448>)
 8013450:	68f8      	ldr	r0, [r7, #12]
 8013452:	f000 fa35 	bl	80138c0 <I2C_WaitOnFlagUntilTimeout>
 8013456:	4603      	mov	r3, r0
 8013458:	2b00      	cmp	r3, #0
 801345a:	d001      	beq.n	8013460 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 801345c:	2301      	movs	r3, #1
 801345e:	e0bf      	b.n	80135e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	681a      	ldr	r2, [r3, #0]
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801346e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	691a      	ldr	r2, [r3, #16]
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801347a:	b2d2      	uxtb	r2, r2
 801347c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013482:	1c5a      	adds	r2, r3, #1
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801348c:	3b01      	subs	r3, #1
 801348e:	b29a      	uxth	r2, r3
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013498:	b29b      	uxth	r3, r3
 801349a:	3b01      	subs	r3, #1
 801349c:	b29a      	uxth	r2, r3
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80134a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134a4:	9300      	str	r3, [sp, #0]
 80134a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134a8:	2200      	movs	r2, #0
 80134aa:	494f      	ldr	r1, [pc, #316]	; (80135e8 <HAL_I2C_Master_Receive+0x448>)
 80134ac:	68f8      	ldr	r0, [r7, #12]
 80134ae:	f000 fa07 	bl	80138c0 <I2C_WaitOnFlagUntilTimeout>
 80134b2:	4603      	mov	r3, r0
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d001      	beq.n	80134bc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80134b8:	2301      	movs	r3, #1
 80134ba:	e091      	b.n	80135e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	681a      	ldr	r2, [r3, #0]
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80134ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	691a      	ldr	r2, [r3, #16]
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134d6:	b2d2      	uxtb	r2, r2
 80134d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134de:	1c5a      	adds	r2, r3, #1
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80134e8:	3b01      	subs	r3, #1
 80134ea:	b29a      	uxth	r2, r3
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80134f4:	b29b      	uxth	r3, r3
 80134f6:	3b01      	subs	r3, #1
 80134f8:	b29a      	uxth	r2, r3
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	691a      	ldr	r2, [r3, #16]
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013508:	b2d2      	uxtb	r2, r2
 801350a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013510:	1c5a      	adds	r2, r3, #1
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801351a:	3b01      	subs	r3, #1
 801351c:	b29a      	uxth	r2, r3
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013526:	b29b      	uxth	r3, r3
 8013528:	3b01      	subs	r3, #1
 801352a:	b29a      	uxth	r2, r3
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013530:	e042      	b.n	80135b8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8013532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013534:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013536:	68f8      	ldr	r0, [r7, #12]
 8013538:	f000 fb1a 	bl	8013b70 <I2C_WaitOnRXNEFlagUntilTimeout>
 801353c:	4603      	mov	r3, r0
 801353e:	2b00      	cmp	r3, #0
 8013540:	d001      	beq.n	8013546 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8013542:	2301      	movs	r3, #1
 8013544:	e04c      	b.n	80135e0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	691a      	ldr	r2, [r3, #16]
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013550:	b2d2      	uxtb	r2, r2
 8013552:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013558:	1c5a      	adds	r2, r3, #1
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013562:	3b01      	subs	r3, #1
 8013564:	b29a      	uxth	r2, r3
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801356e:	b29b      	uxth	r3, r3
 8013570:	3b01      	subs	r3, #1
 8013572:	b29a      	uxth	r2, r3
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	695b      	ldr	r3, [r3, #20]
 801357e:	f003 0304 	and.w	r3, r3, #4
 8013582:	2b04      	cmp	r3, #4
 8013584:	d118      	bne.n	80135b8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	691a      	ldr	r2, [r3, #16]
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013590:	b2d2      	uxtb	r2, r2
 8013592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013598:	1c5a      	adds	r2, r3, #1
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80135a2:	3b01      	subs	r3, #1
 80135a4:	b29a      	uxth	r2, r3
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80135ae:	b29b      	uxth	r3, r3
 80135b0:	3b01      	subs	r3, #1
 80135b2:	b29a      	uxth	r2, r3
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80135bc:	2b00      	cmp	r3, #0
 80135be:	f47f aec2 	bne.w	8013346 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	2220      	movs	r2, #32
 80135c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	2200      	movs	r2, #0
 80135ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	2200      	movs	r2, #0
 80135d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80135da:	2300      	movs	r3, #0
 80135dc:	e000      	b.n	80135e0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80135de:	2302      	movs	r3, #2
  }
}
 80135e0:	4618      	mov	r0, r3
 80135e2:	3728      	adds	r7, #40	; 0x28
 80135e4:	46bd      	mov	sp, r7
 80135e6:	bd80      	pop	{r7, pc}
 80135e8:	00010004 	.word	0x00010004

080135ec <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80135ec:	b480      	push	{r7}
 80135ee:	b083      	sub	sp, #12
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80135fa:	b2db      	uxtb	r3, r3
}
 80135fc:	4618      	mov	r0, r3
 80135fe:	370c      	adds	r7, #12
 8013600:	46bd      	mov	sp, r7
 8013602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013606:	4770      	bx	lr

08013608 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8013608:	b480      	push	{r7}
 801360a:	b083      	sub	sp, #12
 801360c:	af00      	add	r7, sp, #0
 801360e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8013614:	4618      	mov	r0, r3
 8013616:	370c      	adds	r7, #12
 8013618:	46bd      	mov	sp, r7
 801361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801361e:	4770      	bx	lr

08013620 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b088      	sub	sp, #32
 8013624:	af02      	add	r7, sp, #8
 8013626:	60f8      	str	r0, [r7, #12]
 8013628:	607a      	str	r2, [r7, #4]
 801362a:	603b      	str	r3, [r7, #0]
 801362c:	460b      	mov	r3, r1
 801362e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013634:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8013636:	697b      	ldr	r3, [r7, #20]
 8013638:	2b08      	cmp	r3, #8
 801363a:	d006      	beq.n	801364a <I2C_MasterRequestWrite+0x2a>
 801363c:	697b      	ldr	r3, [r7, #20]
 801363e:	2b01      	cmp	r3, #1
 8013640:	d003      	beq.n	801364a <I2C_MasterRequestWrite+0x2a>
 8013642:	697b      	ldr	r3, [r7, #20]
 8013644:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8013648:	d108      	bne.n	801365c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	681a      	ldr	r2, [r3, #0]
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013658:	601a      	str	r2, [r3, #0]
 801365a:	e00b      	b.n	8013674 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013660:	2b12      	cmp	r3, #18
 8013662:	d107      	bne.n	8013674 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	681a      	ldr	r2, [r3, #0]
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013672:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8013674:	683b      	ldr	r3, [r7, #0]
 8013676:	9300      	str	r3, [sp, #0]
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	2200      	movs	r2, #0
 801367c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8013680:	68f8      	ldr	r0, [r7, #12]
 8013682:	f000 f91d 	bl	80138c0 <I2C_WaitOnFlagUntilTimeout>
 8013686:	4603      	mov	r3, r0
 8013688:	2b00      	cmp	r3, #0
 801368a:	d00d      	beq.n	80136a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801369a:	d103      	bne.n	80136a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80136a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80136a4:	2303      	movs	r3, #3
 80136a6:	e035      	b.n	8013714 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	691b      	ldr	r3, [r3, #16]
 80136ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80136b0:	d108      	bne.n	80136c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80136b2:	897b      	ldrh	r3, [r7, #10]
 80136b4:	b2db      	uxtb	r3, r3
 80136b6:	461a      	mov	r2, r3
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80136c0:	611a      	str	r2, [r3, #16]
 80136c2:	e01b      	b.n	80136fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80136c4:	897b      	ldrh	r3, [r7, #10]
 80136c6:	11db      	asrs	r3, r3, #7
 80136c8:	b2db      	uxtb	r3, r3
 80136ca:	f003 0306 	and.w	r3, r3, #6
 80136ce:	b2db      	uxtb	r3, r3
 80136d0:	f063 030f 	orn	r3, r3, #15
 80136d4:	b2da      	uxtb	r2, r3
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80136dc:	683b      	ldr	r3, [r7, #0]
 80136de:	687a      	ldr	r2, [r7, #4]
 80136e0:	490e      	ldr	r1, [pc, #56]	; (801371c <I2C_MasterRequestWrite+0xfc>)
 80136e2:	68f8      	ldr	r0, [r7, #12]
 80136e4:	f000 f943 	bl	801396e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80136e8:	4603      	mov	r3, r0
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d001      	beq.n	80136f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80136ee:	2301      	movs	r3, #1
 80136f0:	e010      	b.n	8013714 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80136f2:	897b      	ldrh	r3, [r7, #10]
 80136f4:	b2da      	uxtb	r2, r3
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80136fc:	683b      	ldr	r3, [r7, #0]
 80136fe:	687a      	ldr	r2, [r7, #4]
 8013700:	4907      	ldr	r1, [pc, #28]	; (8013720 <I2C_MasterRequestWrite+0x100>)
 8013702:	68f8      	ldr	r0, [r7, #12]
 8013704:	f000 f933 	bl	801396e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8013708:	4603      	mov	r3, r0
 801370a:	2b00      	cmp	r3, #0
 801370c:	d001      	beq.n	8013712 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 801370e:	2301      	movs	r3, #1
 8013710:	e000      	b.n	8013714 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8013712:	2300      	movs	r3, #0
}
 8013714:	4618      	mov	r0, r3
 8013716:	3718      	adds	r7, #24
 8013718:	46bd      	mov	sp, r7
 801371a:	bd80      	pop	{r7, pc}
 801371c:	00010008 	.word	0x00010008
 8013720:	00010002 	.word	0x00010002

08013724 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8013724:	b580      	push	{r7, lr}
 8013726:	b088      	sub	sp, #32
 8013728:	af02      	add	r7, sp, #8
 801372a:	60f8      	str	r0, [r7, #12]
 801372c:	607a      	str	r2, [r7, #4]
 801372e:	603b      	str	r3, [r7, #0]
 8013730:	460b      	mov	r3, r1
 8013732:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013738:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	681a      	ldr	r2, [r3, #0]
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013748:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 801374a:	697b      	ldr	r3, [r7, #20]
 801374c:	2b08      	cmp	r3, #8
 801374e:	d006      	beq.n	801375e <I2C_MasterRequestRead+0x3a>
 8013750:	697b      	ldr	r3, [r7, #20]
 8013752:	2b01      	cmp	r3, #1
 8013754:	d003      	beq.n	801375e <I2C_MasterRequestRead+0x3a>
 8013756:	697b      	ldr	r3, [r7, #20]
 8013758:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801375c:	d108      	bne.n	8013770 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	681a      	ldr	r2, [r3, #0]
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801376c:	601a      	str	r2, [r3, #0]
 801376e:	e00b      	b.n	8013788 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013774:	2b11      	cmp	r3, #17
 8013776:	d107      	bne.n	8013788 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	681a      	ldr	r2, [r3, #0]
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013786:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	9300      	str	r3, [sp, #0]
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	2200      	movs	r2, #0
 8013790:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8013794:	68f8      	ldr	r0, [r7, #12]
 8013796:	f000 f893 	bl	80138c0 <I2C_WaitOnFlagUntilTimeout>
 801379a:	4603      	mov	r3, r0
 801379c:	2b00      	cmp	r3, #0
 801379e:	d00d      	beq.n	80137bc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80137aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80137ae:	d103      	bne.n	80137b8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80137b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80137b8:	2303      	movs	r3, #3
 80137ba:	e079      	b.n	80138b0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	691b      	ldr	r3, [r3, #16]
 80137c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80137c4:	d108      	bne.n	80137d8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80137c6:	897b      	ldrh	r3, [r7, #10]
 80137c8:	b2db      	uxtb	r3, r3
 80137ca:	f043 0301 	orr.w	r3, r3, #1
 80137ce:	b2da      	uxtb	r2, r3
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	611a      	str	r2, [r3, #16]
 80137d6:	e05f      	b.n	8013898 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80137d8:	897b      	ldrh	r3, [r7, #10]
 80137da:	11db      	asrs	r3, r3, #7
 80137dc:	b2db      	uxtb	r3, r3
 80137de:	f003 0306 	and.w	r3, r3, #6
 80137e2:	b2db      	uxtb	r3, r3
 80137e4:	f063 030f 	orn	r3, r3, #15
 80137e8:	b2da      	uxtb	r2, r3
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80137f0:	683b      	ldr	r3, [r7, #0]
 80137f2:	687a      	ldr	r2, [r7, #4]
 80137f4:	4930      	ldr	r1, [pc, #192]	; (80138b8 <I2C_MasterRequestRead+0x194>)
 80137f6:	68f8      	ldr	r0, [r7, #12]
 80137f8:	f000 f8b9 	bl	801396e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80137fc:	4603      	mov	r3, r0
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d001      	beq.n	8013806 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8013802:	2301      	movs	r3, #1
 8013804:	e054      	b.n	80138b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8013806:	897b      	ldrh	r3, [r7, #10]
 8013808:	b2da      	uxtb	r2, r3
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8013810:	683b      	ldr	r3, [r7, #0]
 8013812:	687a      	ldr	r2, [r7, #4]
 8013814:	4929      	ldr	r1, [pc, #164]	; (80138bc <I2C_MasterRequestRead+0x198>)
 8013816:	68f8      	ldr	r0, [r7, #12]
 8013818:	f000 f8a9 	bl	801396e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801381c:	4603      	mov	r3, r0
 801381e:	2b00      	cmp	r3, #0
 8013820:	d001      	beq.n	8013826 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8013822:	2301      	movs	r3, #1
 8013824:	e044      	b.n	80138b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013826:	2300      	movs	r3, #0
 8013828:	613b      	str	r3, [r7, #16]
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	695b      	ldr	r3, [r3, #20]
 8013830:	613b      	str	r3, [r7, #16]
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	699b      	ldr	r3, [r3, #24]
 8013838:	613b      	str	r3, [r7, #16]
 801383a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	681a      	ldr	r2, [r3, #0]
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801384a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801384c:	683b      	ldr	r3, [r7, #0]
 801384e:	9300      	str	r3, [sp, #0]
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	2200      	movs	r2, #0
 8013854:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8013858:	68f8      	ldr	r0, [r7, #12]
 801385a:	f000 f831 	bl	80138c0 <I2C_WaitOnFlagUntilTimeout>
 801385e:	4603      	mov	r3, r0
 8013860:	2b00      	cmp	r3, #0
 8013862:	d00d      	beq.n	8013880 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801386e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013872:	d103      	bne.n	801387c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	f44f 7200 	mov.w	r2, #512	; 0x200
 801387a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 801387c:	2303      	movs	r3, #3
 801387e:	e017      	b.n	80138b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8013880:	897b      	ldrh	r3, [r7, #10]
 8013882:	11db      	asrs	r3, r3, #7
 8013884:	b2db      	uxtb	r3, r3
 8013886:	f003 0306 	and.w	r3, r3, #6
 801388a:	b2db      	uxtb	r3, r3
 801388c:	f063 030e 	orn	r3, r3, #14
 8013890:	b2da      	uxtb	r2, r3
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8013898:	683b      	ldr	r3, [r7, #0]
 801389a:	687a      	ldr	r2, [r7, #4]
 801389c:	4907      	ldr	r1, [pc, #28]	; (80138bc <I2C_MasterRequestRead+0x198>)
 801389e:	68f8      	ldr	r0, [r7, #12]
 80138a0:	f000 f865 	bl	801396e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80138a4:	4603      	mov	r3, r0
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d001      	beq.n	80138ae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80138aa:	2301      	movs	r3, #1
 80138ac:	e000      	b.n	80138b0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80138ae:	2300      	movs	r3, #0
}
 80138b0:	4618      	mov	r0, r3
 80138b2:	3718      	adds	r7, #24
 80138b4:	46bd      	mov	sp, r7
 80138b6:	bd80      	pop	{r7, pc}
 80138b8:	00010008 	.word	0x00010008
 80138bc:	00010002 	.word	0x00010002

080138c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b084      	sub	sp, #16
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	60f8      	str	r0, [r7, #12]
 80138c8:	60b9      	str	r1, [r7, #8]
 80138ca:	603b      	str	r3, [r7, #0]
 80138cc:	4613      	mov	r3, r2
 80138ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80138d0:	e025      	b.n	801391e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80138d2:	683b      	ldr	r3, [r7, #0]
 80138d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138d8:	d021      	beq.n	801391e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80138da:	f7fe fe2b 	bl	8012534 <HAL_GetTick>
 80138de:	4602      	mov	r2, r0
 80138e0:	69bb      	ldr	r3, [r7, #24]
 80138e2:	1ad3      	subs	r3, r2, r3
 80138e4:	683a      	ldr	r2, [r7, #0]
 80138e6:	429a      	cmp	r2, r3
 80138e8:	d302      	bcc.n	80138f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80138ea:	683b      	ldr	r3, [r7, #0]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d116      	bne.n	801391e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	2200      	movs	r2, #0
 80138f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	2220      	movs	r2, #32
 80138fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	2200      	movs	r2, #0
 8013902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801390a:	f043 0220 	orr.w	r2, r3, #32
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	2200      	movs	r2, #0
 8013916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801391a:	2301      	movs	r3, #1
 801391c:	e023      	b.n	8013966 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801391e:	68bb      	ldr	r3, [r7, #8]
 8013920:	0c1b      	lsrs	r3, r3, #16
 8013922:	b2db      	uxtb	r3, r3
 8013924:	2b01      	cmp	r3, #1
 8013926:	d10d      	bne.n	8013944 <I2C_WaitOnFlagUntilTimeout+0x84>
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	695b      	ldr	r3, [r3, #20]
 801392e:	43da      	mvns	r2, r3
 8013930:	68bb      	ldr	r3, [r7, #8]
 8013932:	4013      	ands	r3, r2
 8013934:	b29b      	uxth	r3, r3
 8013936:	2b00      	cmp	r3, #0
 8013938:	bf0c      	ite	eq
 801393a:	2301      	moveq	r3, #1
 801393c:	2300      	movne	r3, #0
 801393e:	b2db      	uxtb	r3, r3
 8013940:	461a      	mov	r2, r3
 8013942:	e00c      	b.n	801395e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	699b      	ldr	r3, [r3, #24]
 801394a:	43da      	mvns	r2, r3
 801394c:	68bb      	ldr	r3, [r7, #8]
 801394e:	4013      	ands	r3, r2
 8013950:	b29b      	uxth	r3, r3
 8013952:	2b00      	cmp	r3, #0
 8013954:	bf0c      	ite	eq
 8013956:	2301      	moveq	r3, #1
 8013958:	2300      	movne	r3, #0
 801395a:	b2db      	uxtb	r3, r3
 801395c:	461a      	mov	r2, r3
 801395e:	79fb      	ldrb	r3, [r7, #7]
 8013960:	429a      	cmp	r2, r3
 8013962:	d0b6      	beq.n	80138d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8013964:	2300      	movs	r3, #0
}
 8013966:	4618      	mov	r0, r3
 8013968:	3710      	adds	r7, #16
 801396a:	46bd      	mov	sp, r7
 801396c:	bd80      	pop	{r7, pc}

0801396e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 801396e:	b580      	push	{r7, lr}
 8013970:	b084      	sub	sp, #16
 8013972:	af00      	add	r7, sp, #0
 8013974:	60f8      	str	r0, [r7, #12]
 8013976:	60b9      	str	r1, [r7, #8]
 8013978:	607a      	str	r2, [r7, #4]
 801397a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801397c:	e051      	b.n	8013a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	695b      	ldr	r3, [r3, #20]
 8013984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801398c:	d123      	bne.n	80139d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	681a      	ldr	r2, [r3, #0]
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801399c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80139a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	2200      	movs	r2, #0
 80139ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	2220      	movs	r2, #32
 80139b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	2200      	movs	r2, #0
 80139ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139c2:	f043 0204 	orr.w	r2, r3, #4
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	2200      	movs	r2, #0
 80139ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80139d2:	2301      	movs	r3, #1
 80139d4:	e046      	b.n	8013a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139dc:	d021      	beq.n	8013a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80139de:	f7fe fda9 	bl	8012534 <HAL_GetTick>
 80139e2:	4602      	mov	r2, r0
 80139e4:	683b      	ldr	r3, [r7, #0]
 80139e6:	1ad3      	subs	r3, r2, r3
 80139e8:	687a      	ldr	r2, [r7, #4]
 80139ea:	429a      	cmp	r2, r3
 80139ec:	d302      	bcc.n	80139f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d116      	bne.n	8013a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	2200      	movs	r2, #0
 80139f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	2220      	movs	r2, #32
 80139fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	2200      	movs	r2, #0
 8013a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a0e:	f043 0220 	orr.w	r2, r3, #32
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	2200      	movs	r2, #0
 8013a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8013a1e:	2301      	movs	r3, #1
 8013a20:	e020      	b.n	8013a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8013a22:	68bb      	ldr	r3, [r7, #8]
 8013a24:	0c1b      	lsrs	r3, r3, #16
 8013a26:	b2db      	uxtb	r3, r3
 8013a28:	2b01      	cmp	r3, #1
 8013a2a:	d10c      	bne.n	8013a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	695b      	ldr	r3, [r3, #20]
 8013a32:	43da      	mvns	r2, r3
 8013a34:	68bb      	ldr	r3, [r7, #8]
 8013a36:	4013      	ands	r3, r2
 8013a38:	b29b      	uxth	r3, r3
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	bf14      	ite	ne
 8013a3e:	2301      	movne	r3, #1
 8013a40:	2300      	moveq	r3, #0
 8013a42:	b2db      	uxtb	r3, r3
 8013a44:	e00b      	b.n	8013a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	699b      	ldr	r3, [r3, #24]
 8013a4c:	43da      	mvns	r2, r3
 8013a4e:	68bb      	ldr	r3, [r7, #8]
 8013a50:	4013      	ands	r3, r2
 8013a52:	b29b      	uxth	r3, r3
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	bf14      	ite	ne
 8013a58:	2301      	movne	r3, #1
 8013a5a:	2300      	moveq	r3, #0
 8013a5c:	b2db      	uxtb	r3, r3
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d18d      	bne.n	801397e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8013a62:	2300      	movs	r3, #0
}
 8013a64:	4618      	mov	r0, r3
 8013a66:	3710      	adds	r7, #16
 8013a68:	46bd      	mov	sp, r7
 8013a6a:	bd80      	pop	{r7, pc}

08013a6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	b084      	sub	sp, #16
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	60f8      	str	r0, [r7, #12]
 8013a74:	60b9      	str	r1, [r7, #8]
 8013a76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8013a78:	e02d      	b.n	8013ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8013a7a:	68f8      	ldr	r0, [r7, #12]
 8013a7c:	f000 f8ce 	bl	8013c1c <I2C_IsAcknowledgeFailed>
 8013a80:	4603      	mov	r3, r0
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d001      	beq.n	8013a8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8013a86:	2301      	movs	r3, #1
 8013a88:	e02d      	b.n	8013ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013a8a:	68bb      	ldr	r3, [r7, #8]
 8013a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a90:	d021      	beq.n	8013ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013a92:	f7fe fd4f 	bl	8012534 <HAL_GetTick>
 8013a96:	4602      	mov	r2, r0
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	1ad3      	subs	r3, r2, r3
 8013a9c:	68ba      	ldr	r2, [r7, #8]
 8013a9e:	429a      	cmp	r2, r3
 8013aa0:	d302      	bcc.n	8013aa8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8013aa2:	68bb      	ldr	r3, [r7, #8]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d116      	bne.n	8013ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	2200      	movs	r2, #0
 8013aac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	2220      	movs	r2, #32
 8013ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	2200      	movs	r2, #0
 8013aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ac2:	f043 0220 	orr.w	r2, r3, #32
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	2200      	movs	r2, #0
 8013ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8013ad2:	2301      	movs	r3, #1
 8013ad4:	e007      	b.n	8013ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	695b      	ldr	r3, [r3, #20]
 8013adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013ae0:	2b80      	cmp	r3, #128	; 0x80
 8013ae2:	d1ca      	bne.n	8013a7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8013ae4:	2300      	movs	r3, #0
}
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	3710      	adds	r7, #16
 8013aea:	46bd      	mov	sp, r7
 8013aec:	bd80      	pop	{r7, pc}

08013aee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8013aee:	b580      	push	{r7, lr}
 8013af0:	b084      	sub	sp, #16
 8013af2:	af00      	add	r7, sp, #0
 8013af4:	60f8      	str	r0, [r7, #12]
 8013af6:	60b9      	str	r1, [r7, #8]
 8013af8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8013afa:	e02d      	b.n	8013b58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8013afc:	68f8      	ldr	r0, [r7, #12]
 8013afe:	f000 f88d 	bl	8013c1c <I2C_IsAcknowledgeFailed>
 8013b02:	4603      	mov	r3, r0
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d001      	beq.n	8013b0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8013b08:	2301      	movs	r3, #1
 8013b0a:	e02d      	b.n	8013b68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013b0c:	68bb      	ldr	r3, [r7, #8]
 8013b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b12:	d021      	beq.n	8013b58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013b14:	f7fe fd0e 	bl	8012534 <HAL_GetTick>
 8013b18:	4602      	mov	r2, r0
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	1ad3      	subs	r3, r2, r3
 8013b1e:	68ba      	ldr	r2, [r7, #8]
 8013b20:	429a      	cmp	r2, r3
 8013b22:	d302      	bcc.n	8013b2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8013b24:	68bb      	ldr	r3, [r7, #8]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d116      	bne.n	8013b58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	2220      	movs	r2, #32
 8013b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	2200      	movs	r2, #0
 8013b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b44:	f043 0220 	orr.w	r2, r3, #32
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	2200      	movs	r2, #0
 8013b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8013b54:	2301      	movs	r3, #1
 8013b56:	e007      	b.n	8013b68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	695b      	ldr	r3, [r3, #20]
 8013b5e:	f003 0304 	and.w	r3, r3, #4
 8013b62:	2b04      	cmp	r3, #4
 8013b64:	d1ca      	bne.n	8013afc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8013b66:	2300      	movs	r3, #0
}
 8013b68:	4618      	mov	r0, r3
 8013b6a:	3710      	adds	r7, #16
 8013b6c:	46bd      	mov	sp, r7
 8013b6e:	bd80      	pop	{r7, pc}

08013b70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8013b70:	b580      	push	{r7, lr}
 8013b72:	b084      	sub	sp, #16
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	60f8      	str	r0, [r7, #12]
 8013b78:	60b9      	str	r1, [r7, #8]
 8013b7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8013b7c:	e042      	b.n	8013c04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	695b      	ldr	r3, [r3, #20]
 8013b84:	f003 0310 	and.w	r3, r3, #16
 8013b88:	2b10      	cmp	r3, #16
 8013b8a:	d119      	bne.n	8013bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	f06f 0210 	mvn.w	r2, #16
 8013b94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	2200      	movs	r2, #0
 8013b9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	2220      	movs	r2, #32
 8013ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8013bbc:	2301      	movs	r3, #1
 8013bbe:	e029      	b.n	8013c14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013bc0:	f7fe fcb8 	bl	8012534 <HAL_GetTick>
 8013bc4:	4602      	mov	r2, r0
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	1ad3      	subs	r3, r2, r3
 8013bca:	68ba      	ldr	r2, [r7, #8]
 8013bcc:	429a      	cmp	r2, r3
 8013bce:	d302      	bcc.n	8013bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8013bd0:	68bb      	ldr	r3, [r7, #8]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d116      	bne.n	8013c04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	2200      	movs	r2, #0
 8013bda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	2220      	movs	r2, #32
 8013be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	2200      	movs	r2, #0
 8013be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bf0:	f043 0220 	orr.w	r2, r3, #32
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	2200      	movs	r2, #0
 8013bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8013c00:	2301      	movs	r3, #1
 8013c02:	e007      	b.n	8013c14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	695b      	ldr	r3, [r3, #20]
 8013c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c0e:	2b40      	cmp	r3, #64	; 0x40
 8013c10:	d1b5      	bne.n	8013b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8013c12:	2300      	movs	r3, #0
}
 8013c14:	4618      	mov	r0, r3
 8013c16:	3710      	adds	r7, #16
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	bd80      	pop	{r7, pc}

08013c1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8013c1c:	b480      	push	{r7}
 8013c1e:	b083      	sub	sp, #12
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	695b      	ldr	r3, [r3, #20]
 8013c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013c32:	d11b      	bne.n	8013c6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8013c3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	2200      	movs	r2, #0
 8013c42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	2220      	movs	r2, #32
 8013c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	2200      	movs	r2, #0
 8013c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c58:	f043 0204 	orr.w	r2, r3, #4
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	2200      	movs	r2, #0
 8013c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8013c68:	2301      	movs	r3, #1
 8013c6a:	e000      	b.n	8013c6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8013c6c:	2300      	movs	r3, #0
}
 8013c6e:	4618      	mov	r0, r3
 8013c70:	370c      	adds	r7, #12
 8013c72:	46bd      	mov	sp, r7
 8013c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c78:	4770      	bx	lr
	...

08013c7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b086      	sub	sp, #24
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d101      	bne.n	8013c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8013c8a:	2301      	movs	r3, #1
 8013c8c:	e264      	b.n	8014158 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	f003 0301 	and.w	r3, r3, #1
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d075      	beq.n	8013d86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8013c9a:	4ba3      	ldr	r3, [pc, #652]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013c9c:	689b      	ldr	r3, [r3, #8]
 8013c9e:	f003 030c 	and.w	r3, r3, #12
 8013ca2:	2b04      	cmp	r3, #4
 8013ca4:	d00c      	beq.n	8013cc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8013ca6:	4ba0      	ldr	r3, [pc, #640]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013ca8:	689b      	ldr	r3, [r3, #8]
 8013caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8013cae:	2b08      	cmp	r3, #8
 8013cb0:	d112      	bne.n	8013cd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8013cb2:	4b9d      	ldr	r3, [pc, #628]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013cb4:	685b      	ldr	r3, [r3, #4]
 8013cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013cba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8013cbe:	d10b      	bne.n	8013cd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013cc0:	4b99      	ldr	r3, [pc, #612]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d05b      	beq.n	8013d84 <HAL_RCC_OscConfig+0x108>
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	685b      	ldr	r3, [r3, #4]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d157      	bne.n	8013d84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8013cd4:	2301      	movs	r3, #1
 8013cd6:	e23f      	b.n	8014158 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	685b      	ldr	r3, [r3, #4]
 8013cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013ce0:	d106      	bne.n	8013cf0 <HAL_RCC_OscConfig+0x74>
 8013ce2:	4b91      	ldr	r3, [pc, #580]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	4a90      	ldr	r2, [pc, #576]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013cec:	6013      	str	r3, [r2, #0]
 8013cee:	e01d      	b.n	8013d2c <HAL_RCC_OscConfig+0xb0>
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	685b      	ldr	r3, [r3, #4]
 8013cf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013cf8:	d10c      	bne.n	8013d14 <HAL_RCC_OscConfig+0x98>
 8013cfa:	4b8b      	ldr	r3, [pc, #556]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	4a8a      	ldr	r2, [pc, #552]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013d04:	6013      	str	r3, [r2, #0]
 8013d06:	4b88      	ldr	r3, [pc, #544]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	4a87      	ldr	r2, [pc, #540]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013d10:	6013      	str	r3, [r2, #0]
 8013d12:	e00b      	b.n	8013d2c <HAL_RCC_OscConfig+0xb0>
 8013d14:	4b84      	ldr	r3, [pc, #528]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	4a83      	ldr	r2, [pc, #524]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013d1e:	6013      	str	r3, [r2, #0]
 8013d20:	4b81      	ldr	r3, [pc, #516]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	4a80      	ldr	r2, [pc, #512]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013d2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	685b      	ldr	r3, [r3, #4]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d013      	beq.n	8013d5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013d34:	f7fe fbfe 	bl	8012534 <HAL_GetTick>
 8013d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013d3a:	e008      	b.n	8013d4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013d3c:	f7fe fbfa 	bl	8012534 <HAL_GetTick>
 8013d40:	4602      	mov	r2, r0
 8013d42:	693b      	ldr	r3, [r7, #16]
 8013d44:	1ad3      	subs	r3, r2, r3
 8013d46:	2b64      	cmp	r3, #100	; 0x64
 8013d48:	d901      	bls.n	8013d4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8013d4a:	2303      	movs	r3, #3
 8013d4c:	e204      	b.n	8014158 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013d4e:	4b76      	ldr	r3, [pc, #472]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d0f0      	beq.n	8013d3c <HAL_RCC_OscConfig+0xc0>
 8013d5a:	e014      	b.n	8013d86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013d5c:	f7fe fbea 	bl	8012534 <HAL_GetTick>
 8013d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013d62:	e008      	b.n	8013d76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013d64:	f7fe fbe6 	bl	8012534 <HAL_GetTick>
 8013d68:	4602      	mov	r2, r0
 8013d6a:	693b      	ldr	r3, [r7, #16]
 8013d6c:	1ad3      	subs	r3, r2, r3
 8013d6e:	2b64      	cmp	r3, #100	; 0x64
 8013d70:	d901      	bls.n	8013d76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8013d72:	2303      	movs	r3, #3
 8013d74:	e1f0      	b.n	8014158 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013d76:	4b6c      	ldr	r3, [pc, #432]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d1f0      	bne.n	8013d64 <HAL_RCC_OscConfig+0xe8>
 8013d82:	e000      	b.n	8013d86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	f003 0302 	and.w	r3, r3, #2
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d063      	beq.n	8013e5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8013d92:	4b65      	ldr	r3, [pc, #404]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013d94:	689b      	ldr	r3, [r3, #8]
 8013d96:	f003 030c 	and.w	r3, r3, #12
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d00b      	beq.n	8013db6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013d9e:	4b62      	ldr	r3, [pc, #392]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013da0:	689b      	ldr	r3, [r3, #8]
 8013da2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8013da6:	2b08      	cmp	r3, #8
 8013da8:	d11c      	bne.n	8013de4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013daa:	4b5f      	ldr	r3, [pc, #380]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013dac:	685b      	ldr	r3, [r3, #4]
 8013dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d116      	bne.n	8013de4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8013db6:	4b5c      	ldr	r3, [pc, #368]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	f003 0302 	and.w	r3, r3, #2
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d005      	beq.n	8013dce <HAL_RCC_OscConfig+0x152>
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	68db      	ldr	r3, [r3, #12]
 8013dc6:	2b01      	cmp	r3, #1
 8013dc8:	d001      	beq.n	8013dce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8013dca:	2301      	movs	r3, #1
 8013dcc:	e1c4      	b.n	8014158 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013dce:	4b56      	ldr	r3, [pc, #344]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	691b      	ldr	r3, [r3, #16]
 8013dda:	00db      	lsls	r3, r3, #3
 8013ddc:	4952      	ldr	r1, [pc, #328]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013dde:	4313      	orrs	r3, r2
 8013de0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8013de2:	e03a      	b.n	8013e5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	68db      	ldr	r3, [r3, #12]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d020      	beq.n	8013e2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8013dec:	4b4f      	ldr	r3, [pc, #316]	; (8013f2c <HAL_RCC_OscConfig+0x2b0>)
 8013dee:	2201      	movs	r2, #1
 8013df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013df2:	f7fe fb9f 	bl	8012534 <HAL_GetTick>
 8013df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013df8:	e008      	b.n	8013e0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013dfa:	f7fe fb9b 	bl	8012534 <HAL_GetTick>
 8013dfe:	4602      	mov	r2, r0
 8013e00:	693b      	ldr	r3, [r7, #16]
 8013e02:	1ad3      	subs	r3, r2, r3
 8013e04:	2b02      	cmp	r3, #2
 8013e06:	d901      	bls.n	8013e0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8013e08:	2303      	movs	r3, #3
 8013e0a:	e1a5      	b.n	8014158 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013e0c:	4b46      	ldr	r3, [pc, #280]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	f003 0302 	and.w	r3, r3, #2
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d0f0      	beq.n	8013dfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013e18:	4b43      	ldr	r3, [pc, #268]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	691b      	ldr	r3, [r3, #16]
 8013e24:	00db      	lsls	r3, r3, #3
 8013e26:	4940      	ldr	r1, [pc, #256]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013e28:	4313      	orrs	r3, r2
 8013e2a:	600b      	str	r3, [r1, #0]
 8013e2c:	e015      	b.n	8013e5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8013e2e:	4b3f      	ldr	r3, [pc, #252]	; (8013f2c <HAL_RCC_OscConfig+0x2b0>)
 8013e30:	2200      	movs	r2, #0
 8013e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013e34:	f7fe fb7e 	bl	8012534 <HAL_GetTick>
 8013e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013e3a:	e008      	b.n	8013e4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013e3c:	f7fe fb7a 	bl	8012534 <HAL_GetTick>
 8013e40:	4602      	mov	r2, r0
 8013e42:	693b      	ldr	r3, [r7, #16]
 8013e44:	1ad3      	subs	r3, r2, r3
 8013e46:	2b02      	cmp	r3, #2
 8013e48:	d901      	bls.n	8013e4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8013e4a:	2303      	movs	r3, #3
 8013e4c:	e184      	b.n	8014158 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013e4e:	4b36      	ldr	r3, [pc, #216]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	f003 0302 	and.w	r3, r3, #2
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d1f0      	bne.n	8013e3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	f003 0308 	and.w	r3, r3, #8
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d030      	beq.n	8013ec8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	695b      	ldr	r3, [r3, #20]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d016      	beq.n	8013e9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8013e6e:	4b30      	ldr	r3, [pc, #192]	; (8013f30 <HAL_RCC_OscConfig+0x2b4>)
 8013e70:	2201      	movs	r2, #1
 8013e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013e74:	f7fe fb5e 	bl	8012534 <HAL_GetTick>
 8013e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013e7a:	e008      	b.n	8013e8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013e7c:	f7fe fb5a 	bl	8012534 <HAL_GetTick>
 8013e80:	4602      	mov	r2, r0
 8013e82:	693b      	ldr	r3, [r7, #16]
 8013e84:	1ad3      	subs	r3, r2, r3
 8013e86:	2b02      	cmp	r3, #2
 8013e88:	d901      	bls.n	8013e8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8013e8a:	2303      	movs	r3, #3
 8013e8c:	e164      	b.n	8014158 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013e8e:	4b26      	ldr	r3, [pc, #152]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013e92:	f003 0302 	and.w	r3, r3, #2
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d0f0      	beq.n	8013e7c <HAL_RCC_OscConfig+0x200>
 8013e9a:	e015      	b.n	8013ec8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013e9c:	4b24      	ldr	r3, [pc, #144]	; (8013f30 <HAL_RCC_OscConfig+0x2b4>)
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013ea2:	f7fe fb47 	bl	8012534 <HAL_GetTick>
 8013ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013ea8:	e008      	b.n	8013ebc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013eaa:	f7fe fb43 	bl	8012534 <HAL_GetTick>
 8013eae:	4602      	mov	r2, r0
 8013eb0:	693b      	ldr	r3, [r7, #16]
 8013eb2:	1ad3      	subs	r3, r2, r3
 8013eb4:	2b02      	cmp	r3, #2
 8013eb6:	d901      	bls.n	8013ebc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8013eb8:	2303      	movs	r3, #3
 8013eba:	e14d      	b.n	8014158 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013ebc:	4b1a      	ldr	r3, [pc, #104]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013ebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ec0:	f003 0302 	and.w	r3, r3, #2
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d1f0      	bne.n	8013eaa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	f003 0304 	and.w	r3, r3, #4
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	f000 80a0 	beq.w	8014016 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8013eda:	4b13      	ldr	r3, [pc, #76]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d10f      	bne.n	8013f06 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	60bb      	str	r3, [r7, #8]
 8013eea:	4b0f      	ldr	r3, [pc, #60]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013eee:	4a0e      	ldr	r2, [pc, #56]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8013ef6:	4b0c      	ldr	r3, [pc, #48]	; (8013f28 <HAL_RCC_OscConfig+0x2ac>)
 8013ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013efe:	60bb      	str	r3, [r7, #8]
 8013f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8013f02:	2301      	movs	r3, #1
 8013f04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013f06:	4b0b      	ldr	r3, [pc, #44]	; (8013f34 <HAL_RCC_OscConfig+0x2b8>)
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d121      	bne.n	8013f56 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8013f12:	4b08      	ldr	r3, [pc, #32]	; (8013f34 <HAL_RCC_OscConfig+0x2b8>)
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	4a07      	ldr	r2, [pc, #28]	; (8013f34 <HAL_RCC_OscConfig+0x2b8>)
 8013f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8013f1e:	f7fe fb09 	bl	8012534 <HAL_GetTick>
 8013f22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013f24:	e011      	b.n	8013f4a <HAL_RCC_OscConfig+0x2ce>
 8013f26:	bf00      	nop
 8013f28:	40023800 	.word	0x40023800
 8013f2c:	42470000 	.word	0x42470000
 8013f30:	42470e80 	.word	0x42470e80
 8013f34:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013f38:	f7fe fafc 	bl	8012534 <HAL_GetTick>
 8013f3c:	4602      	mov	r2, r0
 8013f3e:	693b      	ldr	r3, [r7, #16]
 8013f40:	1ad3      	subs	r3, r2, r3
 8013f42:	2b02      	cmp	r3, #2
 8013f44:	d901      	bls.n	8013f4a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8013f46:	2303      	movs	r3, #3
 8013f48:	e106      	b.n	8014158 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013f4a:	4b85      	ldr	r3, [pc, #532]	; (8014160 <HAL_RCC_OscConfig+0x4e4>)
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d0f0      	beq.n	8013f38 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	689b      	ldr	r3, [r3, #8]
 8013f5a:	2b01      	cmp	r3, #1
 8013f5c:	d106      	bne.n	8013f6c <HAL_RCC_OscConfig+0x2f0>
 8013f5e:	4b81      	ldr	r3, [pc, #516]	; (8014164 <HAL_RCC_OscConfig+0x4e8>)
 8013f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f62:	4a80      	ldr	r2, [pc, #512]	; (8014164 <HAL_RCC_OscConfig+0x4e8>)
 8013f64:	f043 0301 	orr.w	r3, r3, #1
 8013f68:	6713      	str	r3, [r2, #112]	; 0x70
 8013f6a:	e01c      	b.n	8013fa6 <HAL_RCC_OscConfig+0x32a>
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	689b      	ldr	r3, [r3, #8]
 8013f70:	2b05      	cmp	r3, #5
 8013f72:	d10c      	bne.n	8013f8e <HAL_RCC_OscConfig+0x312>
 8013f74:	4b7b      	ldr	r3, [pc, #492]	; (8014164 <HAL_RCC_OscConfig+0x4e8>)
 8013f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f78:	4a7a      	ldr	r2, [pc, #488]	; (8014164 <HAL_RCC_OscConfig+0x4e8>)
 8013f7a:	f043 0304 	orr.w	r3, r3, #4
 8013f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8013f80:	4b78      	ldr	r3, [pc, #480]	; (8014164 <HAL_RCC_OscConfig+0x4e8>)
 8013f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f84:	4a77      	ldr	r2, [pc, #476]	; (8014164 <HAL_RCC_OscConfig+0x4e8>)
 8013f86:	f043 0301 	orr.w	r3, r3, #1
 8013f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8013f8c:	e00b      	b.n	8013fa6 <HAL_RCC_OscConfig+0x32a>
 8013f8e:	4b75      	ldr	r3, [pc, #468]	; (8014164 <HAL_RCC_OscConfig+0x4e8>)
 8013f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f92:	4a74      	ldr	r2, [pc, #464]	; (8014164 <HAL_RCC_OscConfig+0x4e8>)
 8013f94:	f023 0301 	bic.w	r3, r3, #1
 8013f98:	6713      	str	r3, [r2, #112]	; 0x70
 8013f9a:	4b72      	ldr	r3, [pc, #456]	; (8014164 <HAL_RCC_OscConfig+0x4e8>)
 8013f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f9e:	4a71      	ldr	r2, [pc, #452]	; (8014164 <HAL_RCC_OscConfig+0x4e8>)
 8013fa0:	f023 0304 	bic.w	r3, r3, #4
 8013fa4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	689b      	ldr	r3, [r3, #8]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d015      	beq.n	8013fda <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013fae:	f7fe fac1 	bl	8012534 <HAL_GetTick>
 8013fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013fb4:	e00a      	b.n	8013fcc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013fb6:	f7fe fabd 	bl	8012534 <HAL_GetTick>
 8013fba:	4602      	mov	r2, r0
 8013fbc:	693b      	ldr	r3, [r7, #16]
 8013fbe:	1ad3      	subs	r3, r2, r3
 8013fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8013fc4:	4293      	cmp	r3, r2
 8013fc6:	d901      	bls.n	8013fcc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8013fc8:	2303      	movs	r3, #3
 8013fca:	e0c5      	b.n	8014158 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013fcc:	4b65      	ldr	r3, [pc, #404]	; (8014164 <HAL_RCC_OscConfig+0x4e8>)
 8013fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fd0:	f003 0302 	and.w	r3, r3, #2
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d0ee      	beq.n	8013fb6 <HAL_RCC_OscConfig+0x33a>
 8013fd8:	e014      	b.n	8014004 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013fda:	f7fe faab 	bl	8012534 <HAL_GetTick>
 8013fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013fe0:	e00a      	b.n	8013ff8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013fe2:	f7fe faa7 	bl	8012534 <HAL_GetTick>
 8013fe6:	4602      	mov	r2, r0
 8013fe8:	693b      	ldr	r3, [r7, #16]
 8013fea:	1ad3      	subs	r3, r2, r3
 8013fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8013ff0:	4293      	cmp	r3, r2
 8013ff2:	d901      	bls.n	8013ff8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8013ff4:	2303      	movs	r3, #3
 8013ff6:	e0af      	b.n	8014158 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013ff8:	4b5a      	ldr	r3, [pc, #360]	; (8014164 <HAL_RCC_OscConfig+0x4e8>)
 8013ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ffc:	f003 0302 	and.w	r3, r3, #2
 8014000:	2b00      	cmp	r3, #0
 8014002:	d1ee      	bne.n	8013fe2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8014004:	7dfb      	ldrb	r3, [r7, #23]
 8014006:	2b01      	cmp	r3, #1
 8014008:	d105      	bne.n	8014016 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801400a:	4b56      	ldr	r3, [pc, #344]	; (8014164 <HAL_RCC_OscConfig+0x4e8>)
 801400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801400e:	4a55      	ldr	r2, [pc, #340]	; (8014164 <HAL_RCC_OscConfig+0x4e8>)
 8014010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014014:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	699b      	ldr	r3, [r3, #24]
 801401a:	2b00      	cmp	r3, #0
 801401c:	f000 809b 	beq.w	8014156 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8014020:	4b50      	ldr	r3, [pc, #320]	; (8014164 <HAL_RCC_OscConfig+0x4e8>)
 8014022:	689b      	ldr	r3, [r3, #8]
 8014024:	f003 030c 	and.w	r3, r3, #12
 8014028:	2b08      	cmp	r3, #8
 801402a:	d05c      	beq.n	80140e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	699b      	ldr	r3, [r3, #24]
 8014030:	2b02      	cmp	r3, #2
 8014032:	d141      	bne.n	80140b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014034:	4b4c      	ldr	r3, [pc, #304]	; (8014168 <HAL_RCC_OscConfig+0x4ec>)
 8014036:	2200      	movs	r2, #0
 8014038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801403a:	f7fe fa7b 	bl	8012534 <HAL_GetTick>
 801403e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014040:	e008      	b.n	8014054 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014042:	f7fe fa77 	bl	8012534 <HAL_GetTick>
 8014046:	4602      	mov	r2, r0
 8014048:	693b      	ldr	r3, [r7, #16]
 801404a:	1ad3      	subs	r3, r2, r3
 801404c:	2b02      	cmp	r3, #2
 801404e:	d901      	bls.n	8014054 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8014050:	2303      	movs	r3, #3
 8014052:	e081      	b.n	8014158 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014054:	4b43      	ldr	r3, [pc, #268]	; (8014164 <HAL_RCC_OscConfig+0x4e8>)
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801405c:	2b00      	cmp	r3, #0
 801405e:	d1f0      	bne.n	8014042 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	69da      	ldr	r2, [r3, #28]
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	6a1b      	ldr	r3, [r3, #32]
 8014068:	431a      	orrs	r2, r3
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801406e:	019b      	lsls	r3, r3, #6
 8014070:	431a      	orrs	r2, r3
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014076:	085b      	lsrs	r3, r3, #1
 8014078:	3b01      	subs	r3, #1
 801407a:	041b      	lsls	r3, r3, #16
 801407c:	431a      	orrs	r2, r3
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014082:	061b      	lsls	r3, r3, #24
 8014084:	4937      	ldr	r1, [pc, #220]	; (8014164 <HAL_RCC_OscConfig+0x4e8>)
 8014086:	4313      	orrs	r3, r2
 8014088:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801408a:	4b37      	ldr	r3, [pc, #220]	; (8014168 <HAL_RCC_OscConfig+0x4ec>)
 801408c:	2201      	movs	r2, #1
 801408e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014090:	f7fe fa50 	bl	8012534 <HAL_GetTick>
 8014094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8014096:	e008      	b.n	80140aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014098:	f7fe fa4c 	bl	8012534 <HAL_GetTick>
 801409c:	4602      	mov	r2, r0
 801409e:	693b      	ldr	r3, [r7, #16]
 80140a0:	1ad3      	subs	r3, r2, r3
 80140a2:	2b02      	cmp	r3, #2
 80140a4:	d901      	bls.n	80140aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80140a6:	2303      	movs	r3, #3
 80140a8:	e056      	b.n	8014158 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80140aa:	4b2e      	ldr	r3, [pc, #184]	; (8014164 <HAL_RCC_OscConfig+0x4e8>)
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d0f0      	beq.n	8014098 <HAL_RCC_OscConfig+0x41c>
 80140b6:	e04e      	b.n	8014156 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80140b8:	4b2b      	ldr	r3, [pc, #172]	; (8014168 <HAL_RCC_OscConfig+0x4ec>)
 80140ba:	2200      	movs	r2, #0
 80140bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80140be:	f7fe fa39 	bl	8012534 <HAL_GetTick>
 80140c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80140c4:	e008      	b.n	80140d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80140c6:	f7fe fa35 	bl	8012534 <HAL_GetTick>
 80140ca:	4602      	mov	r2, r0
 80140cc:	693b      	ldr	r3, [r7, #16]
 80140ce:	1ad3      	subs	r3, r2, r3
 80140d0:	2b02      	cmp	r3, #2
 80140d2:	d901      	bls.n	80140d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80140d4:	2303      	movs	r3, #3
 80140d6:	e03f      	b.n	8014158 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80140d8:	4b22      	ldr	r3, [pc, #136]	; (8014164 <HAL_RCC_OscConfig+0x4e8>)
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d1f0      	bne.n	80140c6 <HAL_RCC_OscConfig+0x44a>
 80140e4:	e037      	b.n	8014156 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	699b      	ldr	r3, [r3, #24]
 80140ea:	2b01      	cmp	r3, #1
 80140ec:	d101      	bne.n	80140f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80140ee:	2301      	movs	r3, #1
 80140f0:	e032      	b.n	8014158 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80140f2:	4b1c      	ldr	r3, [pc, #112]	; (8014164 <HAL_RCC_OscConfig+0x4e8>)
 80140f4:	685b      	ldr	r3, [r3, #4]
 80140f6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	699b      	ldr	r3, [r3, #24]
 80140fc:	2b01      	cmp	r3, #1
 80140fe:	d028      	beq.n	8014152 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801410a:	429a      	cmp	r2, r3
 801410c:	d121      	bne.n	8014152 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014118:	429a      	cmp	r2, r3
 801411a:	d11a      	bne.n	8014152 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801411c:	68fa      	ldr	r2, [r7, #12]
 801411e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8014122:	4013      	ands	r3, r2
 8014124:	687a      	ldr	r2, [r7, #4]
 8014126:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8014128:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801412a:	4293      	cmp	r3, r2
 801412c:	d111      	bne.n	8014152 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014138:	085b      	lsrs	r3, r3, #1
 801413a:	3b01      	subs	r3, #1
 801413c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801413e:	429a      	cmp	r2, r3
 8014140:	d107      	bne.n	8014152 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801414c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801414e:	429a      	cmp	r2, r3
 8014150:	d001      	beq.n	8014156 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8014152:	2301      	movs	r3, #1
 8014154:	e000      	b.n	8014158 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8014156:	2300      	movs	r3, #0
}
 8014158:	4618      	mov	r0, r3
 801415a:	3718      	adds	r7, #24
 801415c:	46bd      	mov	sp, r7
 801415e:	bd80      	pop	{r7, pc}
 8014160:	40007000 	.word	0x40007000
 8014164:	40023800 	.word	0x40023800
 8014168:	42470060 	.word	0x42470060

0801416c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801416c:	b580      	push	{r7, lr}
 801416e:	b084      	sub	sp, #16
 8014170:	af00      	add	r7, sp, #0
 8014172:	6078      	str	r0, [r7, #4]
 8014174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	2b00      	cmp	r3, #0
 801417a:	d101      	bne.n	8014180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801417c:	2301      	movs	r3, #1
 801417e:	e0cc      	b.n	801431a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8014180:	4b68      	ldr	r3, [pc, #416]	; (8014324 <HAL_RCC_ClockConfig+0x1b8>)
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	f003 0307 	and.w	r3, r3, #7
 8014188:	683a      	ldr	r2, [r7, #0]
 801418a:	429a      	cmp	r2, r3
 801418c:	d90c      	bls.n	80141a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801418e:	4b65      	ldr	r3, [pc, #404]	; (8014324 <HAL_RCC_ClockConfig+0x1b8>)
 8014190:	683a      	ldr	r2, [r7, #0]
 8014192:	b2d2      	uxtb	r2, r2
 8014194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8014196:	4b63      	ldr	r3, [pc, #396]	; (8014324 <HAL_RCC_ClockConfig+0x1b8>)
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	f003 0307 	and.w	r3, r3, #7
 801419e:	683a      	ldr	r2, [r7, #0]
 80141a0:	429a      	cmp	r2, r3
 80141a2:	d001      	beq.n	80141a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80141a4:	2301      	movs	r3, #1
 80141a6:	e0b8      	b.n	801431a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	f003 0302 	and.w	r3, r3, #2
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d020      	beq.n	80141f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	f003 0304 	and.w	r3, r3, #4
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d005      	beq.n	80141cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80141c0:	4b59      	ldr	r3, [pc, #356]	; (8014328 <HAL_RCC_ClockConfig+0x1bc>)
 80141c2:	689b      	ldr	r3, [r3, #8]
 80141c4:	4a58      	ldr	r2, [pc, #352]	; (8014328 <HAL_RCC_ClockConfig+0x1bc>)
 80141c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80141ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	f003 0308 	and.w	r3, r3, #8
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d005      	beq.n	80141e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80141d8:	4b53      	ldr	r3, [pc, #332]	; (8014328 <HAL_RCC_ClockConfig+0x1bc>)
 80141da:	689b      	ldr	r3, [r3, #8]
 80141dc:	4a52      	ldr	r2, [pc, #328]	; (8014328 <HAL_RCC_ClockConfig+0x1bc>)
 80141de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80141e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80141e4:	4b50      	ldr	r3, [pc, #320]	; (8014328 <HAL_RCC_ClockConfig+0x1bc>)
 80141e6:	689b      	ldr	r3, [r3, #8]
 80141e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	689b      	ldr	r3, [r3, #8]
 80141f0:	494d      	ldr	r1, [pc, #308]	; (8014328 <HAL_RCC_ClockConfig+0x1bc>)
 80141f2:	4313      	orrs	r3, r2
 80141f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	f003 0301 	and.w	r3, r3, #1
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d044      	beq.n	801428c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	685b      	ldr	r3, [r3, #4]
 8014206:	2b01      	cmp	r3, #1
 8014208:	d107      	bne.n	801421a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801420a:	4b47      	ldr	r3, [pc, #284]	; (8014328 <HAL_RCC_ClockConfig+0x1bc>)
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014212:	2b00      	cmp	r3, #0
 8014214:	d119      	bne.n	801424a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8014216:	2301      	movs	r3, #1
 8014218:	e07f      	b.n	801431a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	685b      	ldr	r3, [r3, #4]
 801421e:	2b02      	cmp	r3, #2
 8014220:	d003      	beq.n	801422a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8014226:	2b03      	cmp	r3, #3
 8014228:	d107      	bne.n	801423a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801422a:	4b3f      	ldr	r3, [pc, #252]	; (8014328 <HAL_RCC_ClockConfig+0x1bc>)
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014232:	2b00      	cmp	r3, #0
 8014234:	d109      	bne.n	801424a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8014236:	2301      	movs	r3, #1
 8014238:	e06f      	b.n	801431a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801423a:	4b3b      	ldr	r3, [pc, #236]	; (8014328 <HAL_RCC_ClockConfig+0x1bc>)
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	f003 0302 	and.w	r3, r3, #2
 8014242:	2b00      	cmp	r3, #0
 8014244:	d101      	bne.n	801424a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8014246:	2301      	movs	r3, #1
 8014248:	e067      	b.n	801431a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801424a:	4b37      	ldr	r3, [pc, #220]	; (8014328 <HAL_RCC_ClockConfig+0x1bc>)
 801424c:	689b      	ldr	r3, [r3, #8]
 801424e:	f023 0203 	bic.w	r2, r3, #3
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	685b      	ldr	r3, [r3, #4]
 8014256:	4934      	ldr	r1, [pc, #208]	; (8014328 <HAL_RCC_ClockConfig+0x1bc>)
 8014258:	4313      	orrs	r3, r2
 801425a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801425c:	f7fe f96a 	bl	8012534 <HAL_GetTick>
 8014260:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014262:	e00a      	b.n	801427a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014264:	f7fe f966 	bl	8012534 <HAL_GetTick>
 8014268:	4602      	mov	r2, r0
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	1ad3      	subs	r3, r2, r3
 801426e:	f241 3288 	movw	r2, #5000	; 0x1388
 8014272:	4293      	cmp	r3, r2
 8014274:	d901      	bls.n	801427a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8014276:	2303      	movs	r3, #3
 8014278:	e04f      	b.n	801431a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801427a:	4b2b      	ldr	r3, [pc, #172]	; (8014328 <HAL_RCC_ClockConfig+0x1bc>)
 801427c:	689b      	ldr	r3, [r3, #8]
 801427e:	f003 020c 	and.w	r2, r3, #12
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	685b      	ldr	r3, [r3, #4]
 8014286:	009b      	lsls	r3, r3, #2
 8014288:	429a      	cmp	r2, r3
 801428a:	d1eb      	bne.n	8014264 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801428c:	4b25      	ldr	r3, [pc, #148]	; (8014324 <HAL_RCC_ClockConfig+0x1b8>)
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	f003 0307 	and.w	r3, r3, #7
 8014294:	683a      	ldr	r2, [r7, #0]
 8014296:	429a      	cmp	r2, r3
 8014298:	d20c      	bcs.n	80142b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801429a:	4b22      	ldr	r3, [pc, #136]	; (8014324 <HAL_RCC_ClockConfig+0x1b8>)
 801429c:	683a      	ldr	r2, [r7, #0]
 801429e:	b2d2      	uxtb	r2, r2
 80142a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80142a2:	4b20      	ldr	r3, [pc, #128]	; (8014324 <HAL_RCC_ClockConfig+0x1b8>)
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	f003 0307 	and.w	r3, r3, #7
 80142aa:	683a      	ldr	r2, [r7, #0]
 80142ac:	429a      	cmp	r2, r3
 80142ae:	d001      	beq.n	80142b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80142b0:	2301      	movs	r3, #1
 80142b2:	e032      	b.n	801431a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	f003 0304 	and.w	r3, r3, #4
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d008      	beq.n	80142d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80142c0:	4b19      	ldr	r3, [pc, #100]	; (8014328 <HAL_RCC_ClockConfig+0x1bc>)
 80142c2:	689b      	ldr	r3, [r3, #8]
 80142c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	68db      	ldr	r3, [r3, #12]
 80142cc:	4916      	ldr	r1, [pc, #88]	; (8014328 <HAL_RCC_ClockConfig+0x1bc>)
 80142ce:	4313      	orrs	r3, r2
 80142d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	f003 0308 	and.w	r3, r3, #8
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d009      	beq.n	80142f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80142de:	4b12      	ldr	r3, [pc, #72]	; (8014328 <HAL_RCC_ClockConfig+0x1bc>)
 80142e0:	689b      	ldr	r3, [r3, #8]
 80142e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	691b      	ldr	r3, [r3, #16]
 80142ea:	00db      	lsls	r3, r3, #3
 80142ec:	490e      	ldr	r1, [pc, #56]	; (8014328 <HAL_RCC_ClockConfig+0x1bc>)
 80142ee:	4313      	orrs	r3, r2
 80142f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80142f2:	f000 f821 	bl	8014338 <HAL_RCC_GetSysClockFreq>
 80142f6:	4602      	mov	r2, r0
 80142f8:	4b0b      	ldr	r3, [pc, #44]	; (8014328 <HAL_RCC_ClockConfig+0x1bc>)
 80142fa:	689b      	ldr	r3, [r3, #8]
 80142fc:	091b      	lsrs	r3, r3, #4
 80142fe:	f003 030f 	and.w	r3, r3, #15
 8014302:	490a      	ldr	r1, [pc, #40]	; (801432c <HAL_RCC_ClockConfig+0x1c0>)
 8014304:	5ccb      	ldrb	r3, [r1, r3]
 8014306:	fa22 f303 	lsr.w	r3, r2, r3
 801430a:	4a09      	ldr	r2, [pc, #36]	; (8014330 <HAL_RCC_ClockConfig+0x1c4>)
 801430c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801430e:	4b09      	ldr	r3, [pc, #36]	; (8014334 <HAL_RCC_ClockConfig+0x1c8>)
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	4618      	mov	r0, r3
 8014314:	f7fe f8ca 	bl	80124ac <HAL_InitTick>

  return HAL_OK;
 8014318:	2300      	movs	r3, #0
}
 801431a:	4618      	mov	r0, r3
 801431c:	3710      	adds	r7, #16
 801431e:	46bd      	mov	sp, r7
 8014320:	bd80      	pop	{r7, pc}
 8014322:	bf00      	nop
 8014324:	40023c00 	.word	0x40023c00
 8014328:	40023800 	.word	0x40023800
 801432c:	08015d98 	.word	0x08015d98
 8014330:	20000018 	.word	0x20000018
 8014334:	20000080 	.word	0x20000080

08014338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8014338:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801433c:	b084      	sub	sp, #16
 801433e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8014340:	2300      	movs	r3, #0
 8014342:	607b      	str	r3, [r7, #4]
 8014344:	2300      	movs	r3, #0
 8014346:	60fb      	str	r3, [r7, #12]
 8014348:	2300      	movs	r3, #0
 801434a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 801434c:	2300      	movs	r3, #0
 801434e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8014350:	4b67      	ldr	r3, [pc, #412]	; (80144f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8014352:	689b      	ldr	r3, [r3, #8]
 8014354:	f003 030c 	and.w	r3, r3, #12
 8014358:	2b08      	cmp	r3, #8
 801435a:	d00d      	beq.n	8014378 <HAL_RCC_GetSysClockFreq+0x40>
 801435c:	2b08      	cmp	r3, #8
 801435e:	f200 80bd 	bhi.w	80144dc <HAL_RCC_GetSysClockFreq+0x1a4>
 8014362:	2b00      	cmp	r3, #0
 8014364:	d002      	beq.n	801436c <HAL_RCC_GetSysClockFreq+0x34>
 8014366:	2b04      	cmp	r3, #4
 8014368:	d003      	beq.n	8014372 <HAL_RCC_GetSysClockFreq+0x3a>
 801436a:	e0b7      	b.n	80144dc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801436c:	4b61      	ldr	r3, [pc, #388]	; (80144f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 801436e:	60bb      	str	r3, [r7, #8]
       break;
 8014370:	e0b7      	b.n	80144e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8014372:	4b61      	ldr	r3, [pc, #388]	; (80144f8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8014374:	60bb      	str	r3, [r7, #8]
      break;
 8014376:	e0b4      	b.n	80144e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8014378:	4b5d      	ldr	r3, [pc, #372]	; (80144f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801437a:	685b      	ldr	r3, [r3, #4]
 801437c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014380:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8014382:	4b5b      	ldr	r3, [pc, #364]	; (80144f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8014384:	685b      	ldr	r3, [r3, #4]
 8014386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801438a:	2b00      	cmp	r3, #0
 801438c:	d04d      	beq.n	801442a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801438e:	4b58      	ldr	r3, [pc, #352]	; (80144f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8014390:	685b      	ldr	r3, [r3, #4]
 8014392:	099b      	lsrs	r3, r3, #6
 8014394:	461a      	mov	r2, r3
 8014396:	f04f 0300 	mov.w	r3, #0
 801439a:	f240 10ff 	movw	r0, #511	; 0x1ff
 801439e:	f04f 0100 	mov.w	r1, #0
 80143a2:	ea02 0800 	and.w	r8, r2, r0
 80143a6:	ea03 0901 	and.w	r9, r3, r1
 80143aa:	4640      	mov	r0, r8
 80143ac:	4649      	mov	r1, r9
 80143ae:	f04f 0200 	mov.w	r2, #0
 80143b2:	f04f 0300 	mov.w	r3, #0
 80143b6:	014b      	lsls	r3, r1, #5
 80143b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80143bc:	0142      	lsls	r2, r0, #5
 80143be:	4610      	mov	r0, r2
 80143c0:	4619      	mov	r1, r3
 80143c2:	ebb0 0008 	subs.w	r0, r0, r8
 80143c6:	eb61 0109 	sbc.w	r1, r1, r9
 80143ca:	f04f 0200 	mov.w	r2, #0
 80143ce:	f04f 0300 	mov.w	r3, #0
 80143d2:	018b      	lsls	r3, r1, #6
 80143d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80143d8:	0182      	lsls	r2, r0, #6
 80143da:	1a12      	subs	r2, r2, r0
 80143dc:	eb63 0301 	sbc.w	r3, r3, r1
 80143e0:	f04f 0000 	mov.w	r0, #0
 80143e4:	f04f 0100 	mov.w	r1, #0
 80143e8:	00d9      	lsls	r1, r3, #3
 80143ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80143ee:	00d0      	lsls	r0, r2, #3
 80143f0:	4602      	mov	r2, r0
 80143f2:	460b      	mov	r3, r1
 80143f4:	eb12 0208 	adds.w	r2, r2, r8
 80143f8:	eb43 0309 	adc.w	r3, r3, r9
 80143fc:	f04f 0000 	mov.w	r0, #0
 8014400:	f04f 0100 	mov.w	r1, #0
 8014404:	0259      	lsls	r1, r3, #9
 8014406:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 801440a:	0250      	lsls	r0, r2, #9
 801440c:	4602      	mov	r2, r0
 801440e:	460b      	mov	r3, r1
 8014410:	4610      	mov	r0, r2
 8014412:	4619      	mov	r1, r3
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	461a      	mov	r2, r3
 8014418:	f04f 0300 	mov.w	r3, #0
 801441c:	f7ec fb76 	bl	8000b0c <__aeabi_uldivmod>
 8014420:	4602      	mov	r2, r0
 8014422:	460b      	mov	r3, r1
 8014424:	4613      	mov	r3, r2
 8014426:	60fb      	str	r3, [r7, #12]
 8014428:	e04a      	b.n	80144c0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801442a:	4b31      	ldr	r3, [pc, #196]	; (80144f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801442c:	685b      	ldr	r3, [r3, #4]
 801442e:	099b      	lsrs	r3, r3, #6
 8014430:	461a      	mov	r2, r3
 8014432:	f04f 0300 	mov.w	r3, #0
 8014436:	f240 10ff 	movw	r0, #511	; 0x1ff
 801443a:	f04f 0100 	mov.w	r1, #0
 801443e:	ea02 0400 	and.w	r4, r2, r0
 8014442:	ea03 0501 	and.w	r5, r3, r1
 8014446:	4620      	mov	r0, r4
 8014448:	4629      	mov	r1, r5
 801444a:	f04f 0200 	mov.w	r2, #0
 801444e:	f04f 0300 	mov.w	r3, #0
 8014452:	014b      	lsls	r3, r1, #5
 8014454:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8014458:	0142      	lsls	r2, r0, #5
 801445a:	4610      	mov	r0, r2
 801445c:	4619      	mov	r1, r3
 801445e:	1b00      	subs	r0, r0, r4
 8014460:	eb61 0105 	sbc.w	r1, r1, r5
 8014464:	f04f 0200 	mov.w	r2, #0
 8014468:	f04f 0300 	mov.w	r3, #0
 801446c:	018b      	lsls	r3, r1, #6
 801446e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8014472:	0182      	lsls	r2, r0, #6
 8014474:	1a12      	subs	r2, r2, r0
 8014476:	eb63 0301 	sbc.w	r3, r3, r1
 801447a:	f04f 0000 	mov.w	r0, #0
 801447e:	f04f 0100 	mov.w	r1, #0
 8014482:	00d9      	lsls	r1, r3, #3
 8014484:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014488:	00d0      	lsls	r0, r2, #3
 801448a:	4602      	mov	r2, r0
 801448c:	460b      	mov	r3, r1
 801448e:	1912      	adds	r2, r2, r4
 8014490:	eb45 0303 	adc.w	r3, r5, r3
 8014494:	f04f 0000 	mov.w	r0, #0
 8014498:	f04f 0100 	mov.w	r1, #0
 801449c:	0299      	lsls	r1, r3, #10
 801449e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80144a2:	0290      	lsls	r0, r2, #10
 80144a4:	4602      	mov	r2, r0
 80144a6:	460b      	mov	r3, r1
 80144a8:	4610      	mov	r0, r2
 80144aa:	4619      	mov	r1, r3
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	461a      	mov	r2, r3
 80144b0:	f04f 0300 	mov.w	r3, #0
 80144b4:	f7ec fb2a 	bl	8000b0c <__aeabi_uldivmod>
 80144b8:	4602      	mov	r2, r0
 80144ba:	460b      	mov	r3, r1
 80144bc:	4613      	mov	r3, r2
 80144be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80144c0:	4b0b      	ldr	r3, [pc, #44]	; (80144f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80144c2:	685b      	ldr	r3, [r3, #4]
 80144c4:	0c1b      	lsrs	r3, r3, #16
 80144c6:	f003 0303 	and.w	r3, r3, #3
 80144ca:	3301      	adds	r3, #1
 80144cc:	005b      	lsls	r3, r3, #1
 80144ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80144d0:	68fa      	ldr	r2, [r7, #12]
 80144d2:	683b      	ldr	r3, [r7, #0]
 80144d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80144d8:	60bb      	str	r3, [r7, #8]
      break;
 80144da:	e002      	b.n	80144e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80144dc:	4b05      	ldr	r3, [pc, #20]	; (80144f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80144de:	60bb      	str	r3, [r7, #8]
      break;
 80144e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80144e2:	68bb      	ldr	r3, [r7, #8]
}
 80144e4:	4618      	mov	r0, r3
 80144e6:	3710      	adds	r7, #16
 80144e8:	46bd      	mov	sp, r7
 80144ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80144ee:	bf00      	nop
 80144f0:	40023800 	.word	0x40023800
 80144f4:	00f42400 	.word	0x00f42400
 80144f8:	007a1200 	.word	0x007a1200

080144fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80144fc:	b480      	push	{r7}
 80144fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8014500:	4b03      	ldr	r3, [pc, #12]	; (8014510 <HAL_RCC_GetHCLKFreq+0x14>)
 8014502:	681b      	ldr	r3, [r3, #0]
}
 8014504:	4618      	mov	r0, r3
 8014506:	46bd      	mov	sp, r7
 8014508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801450c:	4770      	bx	lr
 801450e:	bf00      	nop
 8014510:	20000018 	.word	0x20000018

08014514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8014514:	b580      	push	{r7, lr}
 8014516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8014518:	f7ff fff0 	bl	80144fc <HAL_RCC_GetHCLKFreq>
 801451c:	4602      	mov	r2, r0
 801451e:	4b05      	ldr	r3, [pc, #20]	; (8014534 <HAL_RCC_GetPCLK1Freq+0x20>)
 8014520:	689b      	ldr	r3, [r3, #8]
 8014522:	0a9b      	lsrs	r3, r3, #10
 8014524:	f003 0307 	and.w	r3, r3, #7
 8014528:	4903      	ldr	r1, [pc, #12]	; (8014538 <HAL_RCC_GetPCLK1Freq+0x24>)
 801452a:	5ccb      	ldrb	r3, [r1, r3]
 801452c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014530:	4618      	mov	r0, r3
 8014532:	bd80      	pop	{r7, pc}
 8014534:	40023800 	.word	0x40023800
 8014538:	08015da8 	.word	0x08015da8

0801453c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801453c:	b580      	push	{r7, lr}
 801453e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8014540:	f7ff ffdc 	bl	80144fc <HAL_RCC_GetHCLKFreq>
 8014544:	4602      	mov	r2, r0
 8014546:	4b05      	ldr	r3, [pc, #20]	; (801455c <HAL_RCC_GetPCLK2Freq+0x20>)
 8014548:	689b      	ldr	r3, [r3, #8]
 801454a:	0b5b      	lsrs	r3, r3, #13
 801454c:	f003 0307 	and.w	r3, r3, #7
 8014550:	4903      	ldr	r1, [pc, #12]	; (8014560 <HAL_RCC_GetPCLK2Freq+0x24>)
 8014552:	5ccb      	ldrb	r3, [r1, r3]
 8014554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014558:	4618      	mov	r0, r3
 801455a:	bd80      	pop	{r7, pc}
 801455c:	40023800 	.word	0x40023800
 8014560:	08015da8 	.word	0x08015da8

08014564 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014564:	b580      	push	{r7, lr}
 8014566:	b082      	sub	sp, #8
 8014568:	af00      	add	r7, sp, #0
 801456a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d101      	bne.n	8014576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8014572:	2301      	movs	r3, #1
 8014574:	e03f      	b.n	80145f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801457c:	b2db      	uxtb	r3, r3
 801457e:	2b00      	cmp	r3, #0
 8014580:	d106      	bne.n	8014590 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	2200      	movs	r2, #0
 8014586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801458a:	6878      	ldr	r0, [r7, #4]
 801458c:	f7ed f86c 	bl	8001668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	2224      	movs	r2, #36	; 0x24
 8014594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	68da      	ldr	r2, [r3, #12]
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80145a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80145a8:	6878      	ldr	r0, [r7, #4]
 80145aa:	f000 f929 	bl	8014800 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	691a      	ldr	r2, [r3, #16]
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80145bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	695a      	ldr	r2, [r3, #20]
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80145cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	68da      	ldr	r2, [r3, #12]
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80145dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	2200      	movs	r2, #0
 80145e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	2220      	movs	r2, #32
 80145e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	2220      	movs	r2, #32
 80145f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80145f4:	2300      	movs	r3, #0
}
 80145f6:	4618      	mov	r0, r3
 80145f8:	3708      	adds	r7, #8
 80145fa:	46bd      	mov	sp, r7
 80145fc:	bd80      	pop	{r7, pc}

080145fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80145fe:	b580      	push	{r7, lr}
 8014600:	b08a      	sub	sp, #40	; 0x28
 8014602:	af02      	add	r7, sp, #8
 8014604:	60f8      	str	r0, [r7, #12]
 8014606:	60b9      	str	r1, [r7, #8]
 8014608:	603b      	str	r3, [r7, #0]
 801460a:	4613      	mov	r3, r2
 801460c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 801460e:	2300      	movs	r3, #0
 8014610:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014618:	b2db      	uxtb	r3, r3
 801461a:	2b20      	cmp	r3, #32
 801461c:	d17c      	bne.n	8014718 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 801461e:	68bb      	ldr	r3, [r7, #8]
 8014620:	2b00      	cmp	r3, #0
 8014622:	d002      	beq.n	801462a <HAL_UART_Transmit+0x2c>
 8014624:	88fb      	ldrh	r3, [r7, #6]
 8014626:	2b00      	cmp	r3, #0
 8014628:	d101      	bne.n	801462e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801462a:	2301      	movs	r3, #1
 801462c:	e075      	b.n	801471a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014634:	2b01      	cmp	r3, #1
 8014636:	d101      	bne.n	801463c <HAL_UART_Transmit+0x3e>
 8014638:	2302      	movs	r3, #2
 801463a:	e06e      	b.n	801471a <HAL_UART_Transmit+0x11c>
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	2201      	movs	r2, #1
 8014640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	2200      	movs	r2, #0
 8014648:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	2221      	movs	r2, #33	; 0x21
 801464e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014652:	f7fd ff6f 	bl	8012534 <HAL_GetTick>
 8014656:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	88fa      	ldrh	r2, [r7, #6]
 801465c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	88fa      	ldrh	r2, [r7, #6]
 8014662:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	689b      	ldr	r3, [r3, #8]
 8014668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801466c:	d108      	bne.n	8014680 <HAL_UART_Transmit+0x82>
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	691b      	ldr	r3, [r3, #16]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d104      	bne.n	8014680 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8014676:	2300      	movs	r3, #0
 8014678:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801467a:	68bb      	ldr	r3, [r7, #8]
 801467c:	61bb      	str	r3, [r7, #24]
 801467e:	e003      	b.n	8014688 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8014680:	68bb      	ldr	r3, [r7, #8]
 8014682:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014684:	2300      	movs	r3, #0
 8014686:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	2200      	movs	r2, #0
 801468c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8014690:	e02a      	b.n	80146e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8014692:	683b      	ldr	r3, [r7, #0]
 8014694:	9300      	str	r3, [sp, #0]
 8014696:	697b      	ldr	r3, [r7, #20]
 8014698:	2200      	movs	r2, #0
 801469a:	2180      	movs	r1, #128	; 0x80
 801469c:	68f8      	ldr	r0, [r7, #12]
 801469e:	f000 f840 	bl	8014722 <UART_WaitOnFlagUntilTimeout>
 80146a2:	4603      	mov	r3, r0
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d001      	beq.n	80146ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80146a8:	2303      	movs	r3, #3
 80146aa:	e036      	b.n	801471a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80146ac:	69fb      	ldr	r3, [r7, #28]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d10b      	bne.n	80146ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80146b2:	69bb      	ldr	r3, [r7, #24]
 80146b4:	881b      	ldrh	r3, [r3, #0]
 80146b6:	461a      	mov	r2, r3
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80146c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80146c2:	69bb      	ldr	r3, [r7, #24]
 80146c4:	3302      	adds	r3, #2
 80146c6:	61bb      	str	r3, [r7, #24]
 80146c8:	e007      	b.n	80146da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80146ca:	69fb      	ldr	r3, [r7, #28]
 80146cc:	781a      	ldrb	r2, [r3, #0]
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80146d4:	69fb      	ldr	r3, [r7, #28]
 80146d6:	3301      	adds	r3, #1
 80146d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80146de:	b29b      	uxth	r3, r3
 80146e0:	3b01      	subs	r3, #1
 80146e2:	b29a      	uxth	r2, r3
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80146ec:	b29b      	uxth	r3, r3
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d1cf      	bne.n	8014692 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80146f2:	683b      	ldr	r3, [r7, #0]
 80146f4:	9300      	str	r3, [sp, #0]
 80146f6:	697b      	ldr	r3, [r7, #20]
 80146f8:	2200      	movs	r2, #0
 80146fa:	2140      	movs	r1, #64	; 0x40
 80146fc:	68f8      	ldr	r0, [r7, #12]
 80146fe:	f000 f810 	bl	8014722 <UART_WaitOnFlagUntilTimeout>
 8014702:	4603      	mov	r3, r0
 8014704:	2b00      	cmp	r3, #0
 8014706:	d001      	beq.n	801470c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8014708:	2303      	movs	r3, #3
 801470a:	e006      	b.n	801471a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	2220      	movs	r2, #32
 8014710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8014714:	2300      	movs	r3, #0
 8014716:	e000      	b.n	801471a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8014718:	2302      	movs	r3, #2
  }
}
 801471a:	4618      	mov	r0, r3
 801471c:	3720      	adds	r7, #32
 801471e:	46bd      	mov	sp, r7
 8014720:	bd80      	pop	{r7, pc}

08014722 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8014722:	b580      	push	{r7, lr}
 8014724:	b090      	sub	sp, #64	; 0x40
 8014726:	af00      	add	r7, sp, #0
 8014728:	60f8      	str	r0, [r7, #12]
 801472a:	60b9      	str	r1, [r7, #8]
 801472c:	603b      	str	r3, [r7, #0]
 801472e:	4613      	mov	r3, r2
 8014730:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014732:	e050      	b.n	80147d6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014736:	f1b3 3fff 	cmp.w	r3, #4294967295
 801473a:	d04c      	beq.n	80147d6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801473c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801473e:	2b00      	cmp	r3, #0
 8014740:	d007      	beq.n	8014752 <UART_WaitOnFlagUntilTimeout+0x30>
 8014742:	f7fd fef7 	bl	8012534 <HAL_GetTick>
 8014746:	4602      	mov	r2, r0
 8014748:	683b      	ldr	r3, [r7, #0]
 801474a:	1ad3      	subs	r3, r2, r3
 801474c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801474e:	429a      	cmp	r2, r3
 8014750:	d241      	bcs.n	80147d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	330c      	adds	r3, #12
 8014758:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801475a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801475c:	e853 3f00 	ldrex	r3, [r3]
 8014760:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014764:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8014768:	63fb      	str	r3, [r7, #60]	; 0x3c
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	330c      	adds	r3, #12
 8014770:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014772:	637a      	str	r2, [r7, #52]	; 0x34
 8014774:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014776:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014778:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801477a:	e841 2300 	strex	r3, r2, [r1]
 801477e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8014780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014782:	2b00      	cmp	r3, #0
 8014784:	d1e5      	bne.n	8014752 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	3314      	adds	r3, #20
 801478c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801478e:	697b      	ldr	r3, [r7, #20]
 8014790:	e853 3f00 	ldrex	r3, [r3]
 8014794:	613b      	str	r3, [r7, #16]
   return(result);
 8014796:	693b      	ldr	r3, [r7, #16]
 8014798:	f023 0301 	bic.w	r3, r3, #1
 801479c:	63bb      	str	r3, [r7, #56]	; 0x38
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	3314      	adds	r3, #20
 80147a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80147a6:	623a      	str	r2, [r7, #32]
 80147a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80147aa:	69f9      	ldr	r1, [r7, #28]
 80147ac:	6a3a      	ldr	r2, [r7, #32]
 80147ae:	e841 2300 	strex	r3, r2, [r1]
 80147b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80147b4:	69bb      	ldr	r3, [r7, #24]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d1e5      	bne.n	8014786 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	2220      	movs	r2, #32
 80147be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	2220      	movs	r2, #32
 80147c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	2200      	movs	r2, #0
 80147ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80147d2:	2303      	movs	r3, #3
 80147d4:	e00f      	b.n	80147f6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	681a      	ldr	r2, [r3, #0]
 80147dc:	68bb      	ldr	r3, [r7, #8]
 80147de:	4013      	ands	r3, r2
 80147e0:	68ba      	ldr	r2, [r7, #8]
 80147e2:	429a      	cmp	r2, r3
 80147e4:	bf0c      	ite	eq
 80147e6:	2301      	moveq	r3, #1
 80147e8:	2300      	movne	r3, #0
 80147ea:	b2db      	uxtb	r3, r3
 80147ec:	461a      	mov	r2, r3
 80147ee:	79fb      	ldrb	r3, [r7, #7]
 80147f0:	429a      	cmp	r2, r3
 80147f2:	d09f      	beq.n	8014734 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80147f4:	2300      	movs	r3, #0
}
 80147f6:	4618      	mov	r0, r3
 80147f8:	3740      	adds	r7, #64	; 0x40
 80147fa:	46bd      	mov	sp, r7
 80147fc:	bd80      	pop	{r7, pc}
	...

08014800 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014804:	b09f      	sub	sp, #124	; 0x7c
 8014806:	af00      	add	r7, sp, #0
 8014808:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801480a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	691b      	ldr	r3, [r3, #16]
 8014810:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8014814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014816:	68d9      	ldr	r1, [r3, #12]
 8014818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801481a:	681a      	ldr	r2, [r3, #0]
 801481c:	ea40 0301 	orr.w	r3, r0, r1
 8014820:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8014822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014824:	689a      	ldr	r2, [r3, #8]
 8014826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014828:	691b      	ldr	r3, [r3, #16]
 801482a:	431a      	orrs	r2, r3
 801482c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801482e:	695b      	ldr	r3, [r3, #20]
 8014830:	431a      	orrs	r2, r3
 8014832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014834:	69db      	ldr	r3, [r3, #28]
 8014836:	4313      	orrs	r3, r2
 8014838:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 801483a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	68db      	ldr	r3, [r3, #12]
 8014840:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8014844:	f021 010c 	bic.w	r1, r1, #12
 8014848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801484a:	681a      	ldr	r2, [r3, #0]
 801484c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801484e:	430b      	orrs	r3, r1
 8014850:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8014852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	695b      	ldr	r3, [r3, #20]
 8014858:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801485c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801485e:	6999      	ldr	r1, [r3, #24]
 8014860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014862:	681a      	ldr	r2, [r3, #0]
 8014864:	ea40 0301 	orr.w	r3, r0, r1
 8014868:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801486a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801486c:	681a      	ldr	r2, [r3, #0]
 801486e:	4bc5      	ldr	r3, [pc, #788]	; (8014b84 <UART_SetConfig+0x384>)
 8014870:	429a      	cmp	r2, r3
 8014872:	d004      	beq.n	801487e <UART_SetConfig+0x7e>
 8014874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014876:	681a      	ldr	r2, [r3, #0]
 8014878:	4bc3      	ldr	r3, [pc, #780]	; (8014b88 <UART_SetConfig+0x388>)
 801487a:	429a      	cmp	r2, r3
 801487c:	d103      	bne.n	8014886 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801487e:	f7ff fe5d 	bl	801453c <HAL_RCC_GetPCLK2Freq>
 8014882:	6778      	str	r0, [r7, #116]	; 0x74
 8014884:	e002      	b.n	801488c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8014886:	f7ff fe45 	bl	8014514 <HAL_RCC_GetPCLK1Freq>
 801488a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801488c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801488e:	69db      	ldr	r3, [r3, #28]
 8014890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014894:	f040 80b6 	bne.w	8014a04 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8014898:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801489a:	461c      	mov	r4, r3
 801489c:	f04f 0500 	mov.w	r5, #0
 80148a0:	4622      	mov	r2, r4
 80148a2:	462b      	mov	r3, r5
 80148a4:	1891      	adds	r1, r2, r2
 80148a6:	6439      	str	r1, [r7, #64]	; 0x40
 80148a8:	415b      	adcs	r3, r3
 80148aa:	647b      	str	r3, [r7, #68]	; 0x44
 80148ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80148b0:	1912      	adds	r2, r2, r4
 80148b2:	eb45 0303 	adc.w	r3, r5, r3
 80148b6:	f04f 0000 	mov.w	r0, #0
 80148ba:	f04f 0100 	mov.w	r1, #0
 80148be:	00d9      	lsls	r1, r3, #3
 80148c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80148c4:	00d0      	lsls	r0, r2, #3
 80148c6:	4602      	mov	r2, r0
 80148c8:	460b      	mov	r3, r1
 80148ca:	1911      	adds	r1, r2, r4
 80148cc:	6639      	str	r1, [r7, #96]	; 0x60
 80148ce:	416b      	adcs	r3, r5
 80148d0:	667b      	str	r3, [r7, #100]	; 0x64
 80148d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80148d4:	685b      	ldr	r3, [r3, #4]
 80148d6:	461a      	mov	r2, r3
 80148d8:	f04f 0300 	mov.w	r3, #0
 80148dc:	1891      	adds	r1, r2, r2
 80148de:	63b9      	str	r1, [r7, #56]	; 0x38
 80148e0:	415b      	adcs	r3, r3
 80148e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80148e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80148e8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80148ec:	f7ec f90e 	bl	8000b0c <__aeabi_uldivmod>
 80148f0:	4602      	mov	r2, r0
 80148f2:	460b      	mov	r3, r1
 80148f4:	4ba5      	ldr	r3, [pc, #660]	; (8014b8c <UART_SetConfig+0x38c>)
 80148f6:	fba3 2302 	umull	r2, r3, r3, r2
 80148fa:	095b      	lsrs	r3, r3, #5
 80148fc:	011e      	lsls	r6, r3, #4
 80148fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014900:	461c      	mov	r4, r3
 8014902:	f04f 0500 	mov.w	r5, #0
 8014906:	4622      	mov	r2, r4
 8014908:	462b      	mov	r3, r5
 801490a:	1891      	adds	r1, r2, r2
 801490c:	6339      	str	r1, [r7, #48]	; 0x30
 801490e:	415b      	adcs	r3, r3
 8014910:	637b      	str	r3, [r7, #52]	; 0x34
 8014912:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8014916:	1912      	adds	r2, r2, r4
 8014918:	eb45 0303 	adc.w	r3, r5, r3
 801491c:	f04f 0000 	mov.w	r0, #0
 8014920:	f04f 0100 	mov.w	r1, #0
 8014924:	00d9      	lsls	r1, r3, #3
 8014926:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801492a:	00d0      	lsls	r0, r2, #3
 801492c:	4602      	mov	r2, r0
 801492e:	460b      	mov	r3, r1
 8014930:	1911      	adds	r1, r2, r4
 8014932:	65b9      	str	r1, [r7, #88]	; 0x58
 8014934:	416b      	adcs	r3, r5
 8014936:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801493a:	685b      	ldr	r3, [r3, #4]
 801493c:	461a      	mov	r2, r3
 801493e:	f04f 0300 	mov.w	r3, #0
 8014942:	1891      	adds	r1, r2, r2
 8014944:	62b9      	str	r1, [r7, #40]	; 0x28
 8014946:	415b      	adcs	r3, r3
 8014948:	62fb      	str	r3, [r7, #44]	; 0x2c
 801494a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801494e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8014952:	f7ec f8db 	bl	8000b0c <__aeabi_uldivmod>
 8014956:	4602      	mov	r2, r0
 8014958:	460b      	mov	r3, r1
 801495a:	4b8c      	ldr	r3, [pc, #560]	; (8014b8c <UART_SetConfig+0x38c>)
 801495c:	fba3 1302 	umull	r1, r3, r3, r2
 8014960:	095b      	lsrs	r3, r3, #5
 8014962:	2164      	movs	r1, #100	; 0x64
 8014964:	fb01 f303 	mul.w	r3, r1, r3
 8014968:	1ad3      	subs	r3, r2, r3
 801496a:	00db      	lsls	r3, r3, #3
 801496c:	3332      	adds	r3, #50	; 0x32
 801496e:	4a87      	ldr	r2, [pc, #540]	; (8014b8c <UART_SetConfig+0x38c>)
 8014970:	fba2 2303 	umull	r2, r3, r2, r3
 8014974:	095b      	lsrs	r3, r3, #5
 8014976:	005b      	lsls	r3, r3, #1
 8014978:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801497c:	441e      	add	r6, r3
 801497e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014980:	4618      	mov	r0, r3
 8014982:	f04f 0100 	mov.w	r1, #0
 8014986:	4602      	mov	r2, r0
 8014988:	460b      	mov	r3, r1
 801498a:	1894      	adds	r4, r2, r2
 801498c:	623c      	str	r4, [r7, #32]
 801498e:	415b      	adcs	r3, r3
 8014990:	627b      	str	r3, [r7, #36]	; 0x24
 8014992:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8014996:	1812      	adds	r2, r2, r0
 8014998:	eb41 0303 	adc.w	r3, r1, r3
 801499c:	f04f 0400 	mov.w	r4, #0
 80149a0:	f04f 0500 	mov.w	r5, #0
 80149a4:	00dd      	lsls	r5, r3, #3
 80149a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80149aa:	00d4      	lsls	r4, r2, #3
 80149ac:	4622      	mov	r2, r4
 80149ae:	462b      	mov	r3, r5
 80149b0:	1814      	adds	r4, r2, r0
 80149b2:	653c      	str	r4, [r7, #80]	; 0x50
 80149b4:	414b      	adcs	r3, r1
 80149b6:	657b      	str	r3, [r7, #84]	; 0x54
 80149b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80149ba:	685b      	ldr	r3, [r3, #4]
 80149bc:	461a      	mov	r2, r3
 80149be:	f04f 0300 	mov.w	r3, #0
 80149c2:	1891      	adds	r1, r2, r2
 80149c4:	61b9      	str	r1, [r7, #24]
 80149c6:	415b      	adcs	r3, r3
 80149c8:	61fb      	str	r3, [r7, #28]
 80149ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80149ce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80149d2:	f7ec f89b 	bl	8000b0c <__aeabi_uldivmod>
 80149d6:	4602      	mov	r2, r0
 80149d8:	460b      	mov	r3, r1
 80149da:	4b6c      	ldr	r3, [pc, #432]	; (8014b8c <UART_SetConfig+0x38c>)
 80149dc:	fba3 1302 	umull	r1, r3, r3, r2
 80149e0:	095b      	lsrs	r3, r3, #5
 80149e2:	2164      	movs	r1, #100	; 0x64
 80149e4:	fb01 f303 	mul.w	r3, r1, r3
 80149e8:	1ad3      	subs	r3, r2, r3
 80149ea:	00db      	lsls	r3, r3, #3
 80149ec:	3332      	adds	r3, #50	; 0x32
 80149ee:	4a67      	ldr	r2, [pc, #412]	; (8014b8c <UART_SetConfig+0x38c>)
 80149f0:	fba2 2303 	umull	r2, r3, r2, r3
 80149f4:	095b      	lsrs	r3, r3, #5
 80149f6:	f003 0207 	and.w	r2, r3, #7
 80149fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	4432      	add	r2, r6
 8014a00:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8014a02:	e0b9      	b.n	8014b78 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8014a04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014a06:	461c      	mov	r4, r3
 8014a08:	f04f 0500 	mov.w	r5, #0
 8014a0c:	4622      	mov	r2, r4
 8014a0e:	462b      	mov	r3, r5
 8014a10:	1891      	adds	r1, r2, r2
 8014a12:	6139      	str	r1, [r7, #16]
 8014a14:	415b      	adcs	r3, r3
 8014a16:	617b      	str	r3, [r7, #20]
 8014a18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8014a1c:	1912      	adds	r2, r2, r4
 8014a1e:	eb45 0303 	adc.w	r3, r5, r3
 8014a22:	f04f 0000 	mov.w	r0, #0
 8014a26:	f04f 0100 	mov.w	r1, #0
 8014a2a:	00d9      	lsls	r1, r3, #3
 8014a2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014a30:	00d0      	lsls	r0, r2, #3
 8014a32:	4602      	mov	r2, r0
 8014a34:	460b      	mov	r3, r1
 8014a36:	eb12 0804 	adds.w	r8, r2, r4
 8014a3a:	eb43 0905 	adc.w	r9, r3, r5
 8014a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014a40:	685b      	ldr	r3, [r3, #4]
 8014a42:	4618      	mov	r0, r3
 8014a44:	f04f 0100 	mov.w	r1, #0
 8014a48:	f04f 0200 	mov.w	r2, #0
 8014a4c:	f04f 0300 	mov.w	r3, #0
 8014a50:	008b      	lsls	r3, r1, #2
 8014a52:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8014a56:	0082      	lsls	r2, r0, #2
 8014a58:	4640      	mov	r0, r8
 8014a5a:	4649      	mov	r1, r9
 8014a5c:	f7ec f856 	bl	8000b0c <__aeabi_uldivmod>
 8014a60:	4602      	mov	r2, r0
 8014a62:	460b      	mov	r3, r1
 8014a64:	4b49      	ldr	r3, [pc, #292]	; (8014b8c <UART_SetConfig+0x38c>)
 8014a66:	fba3 2302 	umull	r2, r3, r3, r2
 8014a6a:	095b      	lsrs	r3, r3, #5
 8014a6c:	011e      	lsls	r6, r3, #4
 8014a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014a70:	4618      	mov	r0, r3
 8014a72:	f04f 0100 	mov.w	r1, #0
 8014a76:	4602      	mov	r2, r0
 8014a78:	460b      	mov	r3, r1
 8014a7a:	1894      	adds	r4, r2, r2
 8014a7c:	60bc      	str	r4, [r7, #8]
 8014a7e:	415b      	adcs	r3, r3
 8014a80:	60fb      	str	r3, [r7, #12]
 8014a82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014a86:	1812      	adds	r2, r2, r0
 8014a88:	eb41 0303 	adc.w	r3, r1, r3
 8014a8c:	f04f 0400 	mov.w	r4, #0
 8014a90:	f04f 0500 	mov.w	r5, #0
 8014a94:	00dd      	lsls	r5, r3, #3
 8014a96:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8014a9a:	00d4      	lsls	r4, r2, #3
 8014a9c:	4622      	mov	r2, r4
 8014a9e:	462b      	mov	r3, r5
 8014aa0:	1814      	adds	r4, r2, r0
 8014aa2:	64bc      	str	r4, [r7, #72]	; 0x48
 8014aa4:	414b      	adcs	r3, r1
 8014aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014aaa:	685b      	ldr	r3, [r3, #4]
 8014aac:	4618      	mov	r0, r3
 8014aae:	f04f 0100 	mov.w	r1, #0
 8014ab2:	f04f 0200 	mov.w	r2, #0
 8014ab6:	f04f 0300 	mov.w	r3, #0
 8014aba:	008b      	lsls	r3, r1, #2
 8014abc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8014ac0:	0082      	lsls	r2, r0, #2
 8014ac2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8014ac6:	f7ec f821 	bl	8000b0c <__aeabi_uldivmod>
 8014aca:	4602      	mov	r2, r0
 8014acc:	460b      	mov	r3, r1
 8014ace:	4b2f      	ldr	r3, [pc, #188]	; (8014b8c <UART_SetConfig+0x38c>)
 8014ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8014ad4:	095b      	lsrs	r3, r3, #5
 8014ad6:	2164      	movs	r1, #100	; 0x64
 8014ad8:	fb01 f303 	mul.w	r3, r1, r3
 8014adc:	1ad3      	subs	r3, r2, r3
 8014ade:	011b      	lsls	r3, r3, #4
 8014ae0:	3332      	adds	r3, #50	; 0x32
 8014ae2:	4a2a      	ldr	r2, [pc, #168]	; (8014b8c <UART_SetConfig+0x38c>)
 8014ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8014ae8:	095b      	lsrs	r3, r3, #5
 8014aea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014aee:	441e      	add	r6, r3
 8014af0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014af2:	4618      	mov	r0, r3
 8014af4:	f04f 0100 	mov.w	r1, #0
 8014af8:	4602      	mov	r2, r0
 8014afa:	460b      	mov	r3, r1
 8014afc:	1894      	adds	r4, r2, r2
 8014afe:	603c      	str	r4, [r7, #0]
 8014b00:	415b      	adcs	r3, r3
 8014b02:	607b      	str	r3, [r7, #4]
 8014b04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014b08:	1812      	adds	r2, r2, r0
 8014b0a:	eb41 0303 	adc.w	r3, r1, r3
 8014b0e:	f04f 0400 	mov.w	r4, #0
 8014b12:	f04f 0500 	mov.w	r5, #0
 8014b16:	00dd      	lsls	r5, r3, #3
 8014b18:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8014b1c:	00d4      	lsls	r4, r2, #3
 8014b1e:	4622      	mov	r2, r4
 8014b20:	462b      	mov	r3, r5
 8014b22:	eb12 0a00 	adds.w	sl, r2, r0
 8014b26:	eb43 0b01 	adc.w	fp, r3, r1
 8014b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014b2c:	685b      	ldr	r3, [r3, #4]
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f04f 0100 	mov.w	r1, #0
 8014b34:	f04f 0200 	mov.w	r2, #0
 8014b38:	f04f 0300 	mov.w	r3, #0
 8014b3c:	008b      	lsls	r3, r1, #2
 8014b3e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8014b42:	0082      	lsls	r2, r0, #2
 8014b44:	4650      	mov	r0, sl
 8014b46:	4659      	mov	r1, fp
 8014b48:	f7eb ffe0 	bl	8000b0c <__aeabi_uldivmod>
 8014b4c:	4602      	mov	r2, r0
 8014b4e:	460b      	mov	r3, r1
 8014b50:	4b0e      	ldr	r3, [pc, #56]	; (8014b8c <UART_SetConfig+0x38c>)
 8014b52:	fba3 1302 	umull	r1, r3, r3, r2
 8014b56:	095b      	lsrs	r3, r3, #5
 8014b58:	2164      	movs	r1, #100	; 0x64
 8014b5a:	fb01 f303 	mul.w	r3, r1, r3
 8014b5e:	1ad3      	subs	r3, r2, r3
 8014b60:	011b      	lsls	r3, r3, #4
 8014b62:	3332      	adds	r3, #50	; 0x32
 8014b64:	4a09      	ldr	r2, [pc, #36]	; (8014b8c <UART_SetConfig+0x38c>)
 8014b66:	fba2 2303 	umull	r2, r3, r2, r3
 8014b6a:	095b      	lsrs	r3, r3, #5
 8014b6c:	f003 020f 	and.w	r2, r3, #15
 8014b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	4432      	add	r2, r6
 8014b76:	609a      	str	r2, [r3, #8]
}
 8014b78:	bf00      	nop
 8014b7a:	377c      	adds	r7, #124	; 0x7c
 8014b7c:	46bd      	mov	sp, r7
 8014b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b82:	bf00      	nop
 8014b84:	40011000 	.word	0x40011000
 8014b88:	40011400 	.word	0x40011400
 8014b8c:	51eb851f 	.word	0x51eb851f

08014b90 <__errno>:
 8014b90:	4b01      	ldr	r3, [pc, #4]	; (8014b98 <__errno+0x8>)
 8014b92:	6818      	ldr	r0, [r3, #0]
 8014b94:	4770      	bx	lr
 8014b96:	bf00      	nop
 8014b98:	20000088 	.word	0x20000088

08014b9c <__libc_init_array>:
 8014b9c:	b570      	push	{r4, r5, r6, lr}
 8014b9e:	4d0d      	ldr	r5, [pc, #52]	; (8014bd4 <__libc_init_array+0x38>)
 8014ba0:	4c0d      	ldr	r4, [pc, #52]	; (8014bd8 <__libc_init_array+0x3c>)
 8014ba2:	1b64      	subs	r4, r4, r5
 8014ba4:	10a4      	asrs	r4, r4, #2
 8014ba6:	2600      	movs	r6, #0
 8014ba8:	42a6      	cmp	r6, r4
 8014baa:	d109      	bne.n	8014bc0 <__libc_init_array+0x24>
 8014bac:	4d0b      	ldr	r5, [pc, #44]	; (8014bdc <__libc_init_array+0x40>)
 8014bae:	4c0c      	ldr	r4, [pc, #48]	; (8014be0 <__libc_init_array+0x44>)
 8014bb0:	f001 f80e 	bl	8015bd0 <_init>
 8014bb4:	1b64      	subs	r4, r4, r5
 8014bb6:	10a4      	asrs	r4, r4, #2
 8014bb8:	2600      	movs	r6, #0
 8014bba:	42a6      	cmp	r6, r4
 8014bbc:	d105      	bne.n	8014bca <__libc_init_array+0x2e>
 8014bbe:	bd70      	pop	{r4, r5, r6, pc}
 8014bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8014bc4:	4798      	blx	r3
 8014bc6:	3601      	adds	r6, #1
 8014bc8:	e7ee      	b.n	8014ba8 <__libc_init_array+0xc>
 8014bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8014bce:	4798      	blx	r3
 8014bd0:	3601      	adds	r6, #1
 8014bd2:	e7f2      	b.n	8014bba <__libc_init_array+0x1e>
 8014bd4:	08015e50 	.word	0x08015e50
 8014bd8:	08015e50 	.word	0x08015e50
 8014bdc:	08015e50 	.word	0x08015e50
 8014be0:	08015e54 	.word	0x08015e54

08014be4 <memcpy>:
 8014be4:	440a      	add	r2, r1
 8014be6:	4291      	cmp	r1, r2
 8014be8:	f100 33ff 	add.w	r3, r0, #4294967295
 8014bec:	d100      	bne.n	8014bf0 <memcpy+0xc>
 8014bee:	4770      	bx	lr
 8014bf0:	b510      	push	{r4, lr}
 8014bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014bf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014bfa:	4291      	cmp	r1, r2
 8014bfc:	d1f9      	bne.n	8014bf2 <memcpy+0xe>
 8014bfe:	bd10      	pop	{r4, pc}

08014c00 <memset>:
 8014c00:	4402      	add	r2, r0
 8014c02:	4603      	mov	r3, r0
 8014c04:	4293      	cmp	r3, r2
 8014c06:	d100      	bne.n	8014c0a <memset+0xa>
 8014c08:	4770      	bx	lr
 8014c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8014c0e:	e7f9      	b.n	8014c04 <memset+0x4>

08014c10 <iprintf>:
 8014c10:	b40f      	push	{r0, r1, r2, r3}
 8014c12:	4b0a      	ldr	r3, [pc, #40]	; (8014c3c <iprintf+0x2c>)
 8014c14:	b513      	push	{r0, r1, r4, lr}
 8014c16:	681c      	ldr	r4, [r3, #0]
 8014c18:	b124      	cbz	r4, 8014c24 <iprintf+0x14>
 8014c1a:	69a3      	ldr	r3, [r4, #24]
 8014c1c:	b913      	cbnz	r3, 8014c24 <iprintf+0x14>
 8014c1e:	4620      	mov	r0, r4
 8014c20:	f000 fa72 	bl	8015108 <__sinit>
 8014c24:	ab05      	add	r3, sp, #20
 8014c26:	9a04      	ldr	r2, [sp, #16]
 8014c28:	68a1      	ldr	r1, [r4, #8]
 8014c2a:	9301      	str	r3, [sp, #4]
 8014c2c:	4620      	mov	r0, r4
 8014c2e:	f000 fc43 	bl	80154b8 <_vfiprintf_r>
 8014c32:	b002      	add	sp, #8
 8014c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c38:	b004      	add	sp, #16
 8014c3a:	4770      	bx	lr
 8014c3c:	20000088 	.word	0x20000088

08014c40 <_puts_r>:
 8014c40:	b570      	push	{r4, r5, r6, lr}
 8014c42:	460e      	mov	r6, r1
 8014c44:	4605      	mov	r5, r0
 8014c46:	b118      	cbz	r0, 8014c50 <_puts_r+0x10>
 8014c48:	6983      	ldr	r3, [r0, #24]
 8014c4a:	b90b      	cbnz	r3, 8014c50 <_puts_r+0x10>
 8014c4c:	f000 fa5c 	bl	8015108 <__sinit>
 8014c50:	69ab      	ldr	r3, [r5, #24]
 8014c52:	68ac      	ldr	r4, [r5, #8]
 8014c54:	b913      	cbnz	r3, 8014c5c <_puts_r+0x1c>
 8014c56:	4628      	mov	r0, r5
 8014c58:	f000 fa56 	bl	8015108 <__sinit>
 8014c5c:	4b2c      	ldr	r3, [pc, #176]	; (8014d10 <_puts_r+0xd0>)
 8014c5e:	429c      	cmp	r4, r3
 8014c60:	d120      	bne.n	8014ca4 <_puts_r+0x64>
 8014c62:	686c      	ldr	r4, [r5, #4]
 8014c64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014c66:	07db      	lsls	r3, r3, #31
 8014c68:	d405      	bmi.n	8014c76 <_puts_r+0x36>
 8014c6a:	89a3      	ldrh	r3, [r4, #12]
 8014c6c:	0598      	lsls	r0, r3, #22
 8014c6e:	d402      	bmi.n	8014c76 <_puts_r+0x36>
 8014c70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014c72:	f000 fae7 	bl	8015244 <__retarget_lock_acquire_recursive>
 8014c76:	89a3      	ldrh	r3, [r4, #12]
 8014c78:	0719      	lsls	r1, r3, #28
 8014c7a:	d51d      	bpl.n	8014cb8 <_puts_r+0x78>
 8014c7c:	6923      	ldr	r3, [r4, #16]
 8014c7e:	b1db      	cbz	r3, 8014cb8 <_puts_r+0x78>
 8014c80:	3e01      	subs	r6, #1
 8014c82:	68a3      	ldr	r3, [r4, #8]
 8014c84:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014c88:	3b01      	subs	r3, #1
 8014c8a:	60a3      	str	r3, [r4, #8]
 8014c8c:	bb39      	cbnz	r1, 8014cde <_puts_r+0x9e>
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	da38      	bge.n	8014d04 <_puts_r+0xc4>
 8014c92:	4622      	mov	r2, r4
 8014c94:	210a      	movs	r1, #10
 8014c96:	4628      	mov	r0, r5
 8014c98:	f000 f85c 	bl	8014d54 <__swbuf_r>
 8014c9c:	3001      	adds	r0, #1
 8014c9e:	d011      	beq.n	8014cc4 <_puts_r+0x84>
 8014ca0:	250a      	movs	r5, #10
 8014ca2:	e011      	b.n	8014cc8 <_puts_r+0x88>
 8014ca4:	4b1b      	ldr	r3, [pc, #108]	; (8014d14 <_puts_r+0xd4>)
 8014ca6:	429c      	cmp	r4, r3
 8014ca8:	d101      	bne.n	8014cae <_puts_r+0x6e>
 8014caa:	68ac      	ldr	r4, [r5, #8]
 8014cac:	e7da      	b.n	8014c64 <_puts_r+0x24>
 8014cae:	4b1a      	ldr	r3, [pc, #104]	; (8014d18 <_puts_r+0xd8>)
 8014cb0:	429c      	cmp	r4, r3
 8014cb2:	bf08      	it	eq
 8014cb4:	68ec      	ldreq	r4, [r5, #12]
 8014cb6:	e7d5      	b.n	8014c64 <_puts_r+0x24>
 8014cb8:	4621      	mov	r1, r4
 8014cba:	4628      	mov	r0, r5
 8014cbc:	f000 f89c 	bl	8014df8 <__swsetup_r>
 8014cc0:	2800      	cmp	r0, #0
 8014cc2:	d0dd      	beq.n	8014c80 <_puts_r+0x40>
 8014cc4:	f04f 35ff 	mov.w	r5, #4294967295
 8014cc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014cca:	07da      	lsls	r2, r3, #31
 8014ccc:	d405      	bmi.n	8014cda <_puts_r+0x9a>
 8014cce:	89a3      	ldrh	r3, [r4, #12]
 8014cd0:	059b      	lsls	r3, r3, #22
 8014cd2:	d402      	bmi.n	8014cda <_puts_r+0x9a>
 8014cd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014cd6:	f000 fab6 	bl	8015246 <__retarget_lock_release_recursive>
 8014cda:	4628      	mov	r0, r5
 8014cdc:	bd70      	pop	{r4, r5, r6, pc}
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	da04      	bge.n	8014cec <_puts_r+0xac>
 8014ce2:	69a2      	ldr	r2, [r4, #24]
 8014ce4:	429a      	cmp	r2, r3
 8014ce6:	dc06      	bgt.n	8014cf6 <_puts_r+0xb6>
 8014ce8:	290a      	cmp	r1, #10
 8014cea:	d004      	beq.n	8014cf6 <_puts_r+0xb6>
 8014cec:	6823      	ldr	r3, [r4, #0]
 8014cee:	1c5a      	adds	r2, r3, #1
 8014cf0:	6022      	str	r2, [r4, #0]
 8014cf2:	7019      	strb	r1, [r3, #0]
 8014cf4:	e7c5      	b.n	8014c82 <_puts_r+0x42>
 8014cf6:	4622      	mov	r2, r4
 8014cf8:	4628      	mov	r0, r5
 8014cfa:	f000 f82b 	bl	8014d54 <__swbuf_r>
 8014cfe:	3001      	adds	r0, #1
 8014d00:	d1bf      	bne.n	8014c82 <_puts_r+0x42>
 8014d02:	e7df      	b.n	8014cc4 <_puts_r+0x84>
 8014d04:	6823      	ldr	r3, [r4, #0]
 8014d06:	250a      	movs	r5, #10
 8014d08:	1c5a      	adds	r2, r3, #1
 8014d0a:	6022      	str	r2, [r4, #0]
 8014d0c:	701d      	strb	r5, [r3, #0]
 8014d0e:	e7db      	b.n	8014cc8 <_puts_r+0x88>
 8014d10:	08015dd4 	.word	0x08015dd4
 8014d14:	08015df4 	.word	0x08015df4
 8014d18:	08015db4 	.word	0x08015db4

08014d1c <puts>:
 8014d1c:	4b02      	ldr	r3, [pc, #8]	; (8014d28 <puts+0xc>)
 8014d1e:	4601      	mov	r1, r0
 8014d20:	6818      	ldr	r0, [r3, #0]
 8014d22:	f7ff bf8d 	b.w	8014c40 <_puts_r>
 8014d26:	bf00      	nop
 8014d28:	20000088 	.word	0x20000088

08014d2c <strncpy>:
 8014d2c:	b510      	push	{r4, lr}
 8014d2e:	3901      	subs	r1, #1
 8014d30:	4603      	mov	r3, r0
 8014d32:	b132      	cbz	r2, 8014d42 <strncpy+0x16>
 8014d34:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014d38:	f803 4b01 	strb.w	r4, [r3], #1
 8014d3c:	3a01      	subs	r2, #1
 8014d3e:	2c00      	cmp	r4, #0
 8014d40:	d1f7      	bne.n	8014d32 <strncpy+0x6>
 8014d42:	441a      	add	r2, r3
 8014d44:	2100      	movs	r1, #0
 8014d46:	4293      	cmp	r3, r2
 8014d48:	d100      	bne.n	8014d4c <strncpy+0x20>
 8014d4a:	bd10      	pop	{r4, pc}
 8014d4c:	f803 1b01 	strb.w	r1, [r3], #1
 8014d50:	e7f9      	b.n	8014d46 <strncpy+0x1a>
	...

08014d54 <__swbuf_r>:
 8014d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d56:	460e      	mov	r6, r1
 8014d58:	4614      	mov	r4, r2
 8014d5a:	4605      	mov	r5, r0
 8014d5c:	b118      	cbz	r0, 8014d66 <__swbuf_r+0x12>
 8014d5e:	6983      	ldr	r3, [r0, #24]
 8014d60:	b90b      	cbnz	r3, 8014d66 <__swbuf_r+0x12>
 8014d62:	f000 f9d1 	bl	8015108 <__sinit>
 8014d66:	4b21      	ldr	r3, [pc, #132]	; (8014dec <__swbuf_r+0x98>)
 8014d68:	429c      	cmp	r4, r3
 8014d6a:	d12b      	bne.n	8014dc4 <__swbuf_r+0x70>
 8014d6c:	686c      	ldr	r4, [r5, #4]
 8014d6e:	69a3      	ldr	r3, [r4, #24]
 8014d70:	60a3      	str	r3, [r4, #8]
 8014d72:	89a3      	ldrh	r3, [r4, #12]
 8014d74:	071a      	lsls	r2, r3, #28
 8014d76:	d52f      	bpl.n	8014dd8 <__swbuf_r+0x84>
 8014d78:	6923      	ldr	r3, [r4, #16]
 8014d7a:	b36b      	cbz	r3, 8014dd8 <__swbuf_r+0x84>
 8014d7c:	6923      	ldr	r3, [r4, #16]
 8014d7e:	6820      	ldr	r0, [r4, #0]
 8014d80:	1ac0      	subs	r0, r0, r3
 8014d82:	6963      	ldr	r3, [r4, #20]
 8014d84:	b2f6      	uxtb	r6, r6
 8014d86:	4283      	cmp	r3, r0
 8014d88:	4637      	mov	r7, r6
 8014d8a:	dc04      	bgt.n	8014d96 <__swbuf_r+0x42>
 8014d8c:	4621      	mov	r1, r4
 8014d8e:	4628      	mov	r0, r5
 8014d90:	f000 f926 	bl	8014fe0 <_fflush_r>
 8014d94:	bb30      	cbnz	r0, 8014de4 <__swbuf_r+0x90>
 8014d96:	68a3      	ldr	r3, [r4, #8]
 8014d98:	3b01      	subs	r3, #1
 8014d9a:	60a3      	str	r3, [r4, #8]
 8014d9c:	6823      	ldr	r3, [r4, #0]
 8014d9e:	1c5a      	adds	r2, r3, #1
 8014da0:	6022      	str	r2, [r4, #0]
 8014da2:	701e      	strb	r6, [r3, #0]
 8014da4:	6963      	ldr	r3, [r4, #20]
 8014da6:	3001      	adds	r0, #1
 8014da8:	4283      	cmp	r3, r0
 8014daa:	d004      	beq.n	8014db6 <__swbuf_r+0x62>
 8014dac:	89a3      	ldrh	r3, [r4, #12]
 8014dae:	07db      	lsls	r3, r3, #31
 8014db0:	d506      	bpl.n	8014dc0 <__swbuf_r+0x6c>
 8014db2:	2e0a      	cmp	r6, #10
 8014db4:	d104      	bne.n	8014dc0 <__swbuf_r+0x6c>
 8014db6:	4621      	mov	r1, r4
 8014db8:	4628      	mov	r0, r5
 8014dba:	f000 f911 	bl	8014fe0 <_fflush_r>
 8014dbe:	b988      	cbnz	r0, 8014de4 <__swbuf_r+0x90>
 8014dc0:	4638      	mov	r0, r7
 8014dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014dc4:	4b0a      	ldr	r3, [pc, #40]	; (8014df0 <__swbuf_r+0x9c>)
 8014dc6:	429c      	cmp	r4, r3
 8014dc8:	d101      	bne.n	8014dce <__swbuf_r+0x7a>
 8014dca:	68ac      	ldr	r4, [r5, #8]
 8014dcc:	e7cf      	b.n	8014d6e <__swbuf_r+0x1a>
 8014dce:	4b09      	ldr	r3, [pc, #36]	; (8014df4 <__swbuf_r+0xa0>)
 8014dd0:	429c      	cmp	r4, r3
 8014dd2:	bf08      	it	eq
 8014dd4:	68ec      	ldreq	r4, [r5, #12]
 8014dd6:	e7ca      	b.n	8014d6e <__swbuf_r+0x1a>
 8014dd8:	4621      	mov	r1, r4
 8014dda:	4628      	mov	r0, r5
 8014ddc:	f000 f80c 	bl	8014df8 <__swsetup_r>
 8014de0:	2800      	cmp	r0, #0
 8014de2:	d0cb      	beq.n	8014d7c <__swbuf_r+0x28>
 8014de4:	f04f 37ff 	mov.w	r7, #4294967295
 8014de8:	e7ea      	b.n	8014dc0 <__swbuf_r+0x6c>
 8014dea:	bf00      	nop
 8014dec:	08015dd4 	.word	0x08015dd4
 8014df0:	08015df4 	.word	0x08015df4
 8014df4:	08015db4 	.word	0x08015db4

08014df8 <__swsetup_r>:
 8014df8:	4b32      	ldr	r3, [pc, #200]	; (8014ec4 <__swsetup_r+0xcc>)
 8014dfa:	b570      	push	{r4, r5, r6, lr}
 8014dfc:	681d      	ldr	r5, [r3, #0]
 8014dfe:	4606      	mov	r6, r0
 8014e00:	460c      	mov	r4, r1
 8014e02:	b125      	cbz	r5, 8014e0e <__swsetup_r+0x16>
 8014e04:	69ab      	ldr	r3, [r5, #24]
 8014e06:	b913      	cbnz	r3, 8014e0e <__swsetup_r+0x16>
 8014e08:	4628      	mov	r0, r5
 8014e0a:	f000 f97d 	bl	8015108 <__sinit>
 8014e0e:	4b2e      	ldr	r3, [pc, #184]	; (8014ec8 <__swsetup_r+0xd0>)
 8014e10:	429c      	cmp	r4, r3
 8014e12:	d10f      	bne.n	8014e34 <__swsetup_r+0x3c>
 8014e14:	686c      	ldr	r4, [r5, #4]
 8014e16:	89a3      	ldrh	r3, [r4, #12]
 8014e18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014e1c:	0719      	lsls	r1, r3, #28
 8014e1e:	d42c      	bmi.n	8014e7a <__swsetup_r+0x82>
 8014e20:	06dd      	lsls	r5, r3, #27
 8014e22:	d411      	bmi.n	8014e48 <__swsetup_r+0x50>
 8014e24:	2309      	movs	r3, #9
 8014e26:	6033      	str	r3, [r6, #0]
 8014e28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014e2c:	81a3      	strh	r3, [r4, #12]
 8014e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8014e32:	e03e      	b.n	8014eb2 <__swsetup_r+0xba>
 8014e34:	4b25      	ldr	r3, [pc, #148]	; (8014ecc <__swsetup_r+0xd4>)
 8014e36:	429c      	cmp	r4, r3
 8014e38:	d101      	bne.n	8014e3e <__swsetup_r+0x46>
 8014e3a:	68ac      	ldr	r4, [r5, #8]
 8014e3c:	e7eb      	b.n	8014e16 <__swsetup_r+0x1e>
 8014e3e:	4b24      	ldr	r3, [pc, #144]	; (8014ed0 <__swsetup_r+0xd8>)
 8014e40:	429c      	cmp	r4, r3
 8014e42:	bf08      	it	eq
 8014e44:	68ec      	ldreq	r4, [r5, #12]
 8014e46:	e7e6      	b.n	8014e16 <__swsetup_r+0x1e>
 8014e48:	0758      	lsls	r0, r3, #29
 8014e4a:	d512      	bpl.n	8014e72 <__swsetup_r+0x7a>
 8014e4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014e4e:	b141      	cbz	r1, 8014e62 <__swsetup_r+0x6a>
 8014e50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014e54:	4299      	cmp	r1, r3
 8014e56:	d002      	beq.n	8014e5e <__swsetup_r+0x66>
 8014e58:	4630      	mov	r0, r6
 8014e5a:	f000 fa59 	bl	8015310 <_free_r>
 8014e5e:	2300      	movs	r3, #0
 8014e60:	6363      	str	r3, [r4, #52]	; 0x34
 8014e62:	89a3      	ldrh	r3, [r4, #12]
 8014e64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014e68:	81a3      	strh	r3, [r4, #12]
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	6063      	str	r3, [r4, #4]
 8014e6e:	6923      	ldr	r3, [r4, #16]
 8014e70:	6023      	str	r3, [r4, #0]
 8014e72:	89a3      	ldrh	r3, [r4, #12]
 8014e74:	f043 0308 	orr.w	r3, r3, #8
 8014e78:	81a3      	strh	r3, [r4, #12]
 8014e7a:	6923      	ldr	r3, [r4, #16]
 8014e7c:	b94b      	cbnz	r3, 8014e92 <__swsetup_r+0x9a>
 8014e7e:	89a3      	ldrh	r3, [r4, #12]
 8014e80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014e88:	d003      	beq.n	8014e92 <__swsetup_r+0x9a>
 8014e8a:	4621      	mov	r1, r4
 8014e8c:	4630      	mov	r0, r6
 8014e8e:	f000 f9ff 	bl	8015290 <__smakebuf_r>
 8014e92:	89a0      	ldrh	r0, [r4, #12]
 8014e94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014e98:	f010 0301 	ands.w	r3, r0, #1
 8014e9c:	d00a      	beq.n	8014eb4 <__swsetup_r+0xbc>
 8014e9e:	2300      	movs	r3, #0
 8014ea0:	60a3      	str	r3, [r4, #8]
 8014ea2:	6963      	ldr	r3, [r4, #20]
 8014ea4:	425b      	negs	r3, r3
 8014ea6:	61a3      	str	r3, [r4, #24]
 8014ea8:	6923      	ldr	r3, [r4, #16]
 8014eaa:	b943      	cbnz	r3, 8014ebe <__swsetup_r+0xc6>
 8014eac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014eb0:	d1ba      	bne.n	8014e28 <__swsetup_r+0x30>
 8014eb2:	bd70      	pop	{r4, r5, r6, pc}
 8014eb4:	0781      	lsls	r1, r0, #30
 8014eb6:	bf58      	it	pl
 8014eb8:	6963      	ldrpl	r3, [r4, #20]
 8014eba:	60a3      	str	r3, [r4, #8]
 8014ebc:	e7f4      	b.n	8014ea8 <__swsetup_r+0xb0>
 8014ebe:	2000      	movs	r0, #0
 8014ec0:	e7f7      	b.n	8014eb2 <__swsetup_r+0xba>
 8014ec2:	bf00      	nop
 8014ec4:	20000088 	.word	0x20000088
 8014ec8:	08015dd4 	.word	0x08015dd4
 8014ecc:	08015df4 	.word	0x08015df4
 8014ed0:	08015db4 	.word	0x08015db4

08014ed4 <__sflush_r>:
 8014ed4:	898a      	ldrh	r2, [r1, #12]
 8014ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014eda:	4605      	mov	r5, r0
 8014edc:	0710      	lsls	r0, r2, #28
 8014ede:	460c      	mov	r4, r1
 8014ee0:	d458      	bmi.n	8014f94 <__sflush_r+0xc0>
 8014ee2:	684b      	ldr	r3, [r1, #4]
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	dc05      	bgt.n	8014ef4 <__sflush_r+0x20>
 8014ee8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	dc02      	bgt.n	8014ef4 <__sflush_r+0x20>
 8014eee:	2000      	movs	r0, #0
 8014ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ef4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014ef6:	2e00      	cmp	r6, #0
 8014ef8:	d0f9      	beq.n	8014eee <__sflush_r+0x1a>
 8014efa:	2300      	movs	r3, #0
 8014efc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014f00:	682f      	ldr	r7, [r5, #0]
 8014f02:	602b      	str	r3, [r5, #0]
 8014f04:	d032      	beq.n	8014f6c <__sflush_r+0x98>
 8014f06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014f08:	89a3      	ldrh	r3, [r4, #12]
 8014f0a:	075a      	lsls	r2, r3, #29
 8014f0c:	d505      	bpl.n	8014f1a <__sflush_r+0x46>
 8014f0e:	6863      	ldr	r3, [r4, #4]
 8014f10:	1ac0      	subs	r0, r0, r3
 8014f12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014f14:	b10b      	cbz	r3, 8014f1a <__sflush_r+0x46>
 8014f16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014f18:	1ac0      	subs	r0, r0, r3
 8014f1a:	2300      	movs	r3, #0
 8014f1c:	4602      	mov	r2, r0
 8014f1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014f20:	6a21      	ldr	r1, [r4, #32]
 8014f22:	4628      	mov	r0, r5
 8014f24:	47b0      	blx	r6
 8014f26:	1c43      	adds	r3, r0, #1
 8014f28:	89a3      	ldrh	r3, [r4, #12]
 8014f2a:	d106      	bne.n	8014f3a <__sflush_r+0x66>
 8014f2c:	6829      	ldr	r1, [r5, #0]
 8014f2e:	291d      	cmp	r1, #29
 8014f30:	d82c      	bhi.n	8014f8c <__sflush_r+0xb8>
 8014f32:	4a2a      	ldr	r2, [pc, #168]	; (8014fdc <__sflush_r+0x108>)
 8014f34:	40ca      	lsrs	r2, r1
 8014f36:	07d6      	lsls	r6, r2, #31
 8014f38:	d528      	bpl.n	8014f8c <__sflush_r+0xb8>
 8014f3a:	2200      	movs	r2, #0
 8014f3c:	6062      	str	r2, [r4, #4]
 8014f3e:	04d9      	lsls	r1, r3, #19
 8014f40:	6922      	ldr	r2, [r4, #16]
 8014f42:	6022      	str	r2, [r4, #0]
 8014f44:	d504      	bpl.n	8014f50 <__sflush_r+0x7c>
 8014f46:	1c42      	adds	r2, r0, #1
 8014f48:	d101      	bne.n	8014f4e <__sflush_r+0x7a>
 8014f4a:	682b      	ldr	r3, [r5, #0]
 8014f4c:	b903      	cbnz	r3, 8014f50 <__sflush_r+0x7c>
 8014f4e:	6560      	str	r0, [r4, #84]	; 0x54
 8014f50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014f52:	602f      	str	r7, [r5, #0]
 8014f54:	2900      	cmp	r1, #0
 8014f56:	d0ca      	beq.n	8014eee <__sflush_r+0x1a>
 8014f58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014f5c:	4299      	cmp	r1, r3
 8014f5e:	d002      	beq.n	8014f66 <__sflush_r+0x92>
 8014f60:	4628      	mov	r0, r5
 8014f62:	f000 f9d5 	bl	8015310 <_free_r>
 8014f66:	2000      	movs	r0, #0
 8014f68:	6360      	str	r0, [r4, #52]	; 0x34
 8014f6a:	e7c1      	b.n	8014ef0 <__sflush_r+0x1c>
 8014f6c:	6a21      	ldr	r1, [r4, #32]
 8014f6e:	2301      	movs	r3, #1
 8014f70:	4628      	mov	r0, r5
 8014f72:	47b0      	blx	r6
 8014f74:	1c41      	adds	r1, r0, #1
 8014f76:	d1c7      	bne.n	8014f08 <__sflush_r+0x34>
 8014f78:	682b      	ldr	r3, [r5, #0]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d0c4      	beq.n	8014f08 <__sflush_r+0x34>
 8014f7e:	2b1d      	cmp	r3, #29
 8014f80:	d001      	beq.n	8014f86 <__sflush_r+0xb2>
 8014f82:	2b16      	cmp	r3, #22
 8014f84:	d101      	bne.n	8014f8a <__sflush_r+0xb6>
 8014f86:	602f      	str	r7, [r5, #0]
 8014f88:	e7b1      	b.n	8014eee <__sflush_r+0x1a>
 8014f8a:	89a3      	ldrh	r3, [r4, #12]
 8014f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f90:	81a3      	strh	r3, [r4, #12]
 8014f92:	e7ad      	b.n	8014ef0 <__sflush_r+0x1c>
 8014f94:	690f      	ldr	r7, [r1, #16]
 8014f96:	2f00      	cmp	r7, #0
 8014f98:	d0a9      	beq.n	8014eee <__sflush_r+0x1a>
 8014f9a:	0793      	lsls	r3, r2, #30
 8014f9c:	680e      	ldr	r6, [r1, #0]
 8014f9e:	bf08      	it	eq
 8014fa0:	694b      	ldreq	r3, [r1, #20]
 8014fa2:	600f      	str	r7, [r1, #0]
 8014fa4:	bf18      	it	ne
 8014fa6:	2300      	movne	r3, #0
 8014fa8:	eba6 0807 	sub.w	r8, r6, r7
 8014fac:	608b      	str	r3, [r1, #8]
 8014fae:	f1b8 0f00 	cmp.w	r8, #0
 8014fb2:	dd9c      	ble.n	8014eee <__sflush_r+0x1a>
 8014fb4:	6a21      	ldr	r1, [r4, #32]
 8014fb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014fb8:	4643      	mov	r3, r8
 8014fba:	463a      	mov	r2, r7
 8014fbc:	4628      	mov	r0, r5
 8014fbe:	47b0      	blx	r6
 8014fc0:	2800      	cmp	r0, #0
 8014fc2:	dc06      	bgt.n	8014fd2 <__sflush_r+0xfe>
 8014fc4:	89a3      	ldrh	r3, [r4, #12]
 8014fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014fca:	81a3      	strh	r3, [r4, #12]
 8014fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8014fd0:	e78e      	b.n	8014ef0 <__sflush_r+0x1c>
 8014fd2:	4407      	add	r7, r0
 8014fd4:	eba8 0800 	sub.w	r8, r8, r0
 8014fd8:	e7e9      	b.n	8014fae <__sflush_r+0xda>
 8014fda:	bf00      	nop
 8014fdc:	20400001 	.word	0x20400001

08014fe0 <_fflush_r>:
 8014fe0:	b538      	push	{r3, r4, r5, lr}
 8014fe2:	690b      	ldr	r3, [r1, #16]
 8014fe4:	4605      	mov	r5, r0
 8014fe6:	460c      	mov	r4, r1
 8014fe8:	b913      	cbnz	r3, 8014ff0 <_fflush_r+0x10>
 8014fea:	2500      	movs	r5, #0
 8014fec:	4628      	mov	r0, r5
 8014fee:	bd38      	pop	{r3, r4, r5, pc}
 8014ff0:	b118      	cbz	r0, 8014ffa <_fflush_r+0x1a>
 8014ff2:	6983      	ldr	r3, [r0, #24]
 8014ff4:	b90b      	cbnz	r3, 8014ffa <_fflush_r+0x1a>
 8014ff6:	f000 f887 	bl	8015108 <__sinit>
 8014ffa:	4b14      	ldr	r3, [pc, #80]	; (801504c <_fflush_r+0x6c>)
 8014ffc:	429c      	cmp	r4, r3
 8014ffe:	d11b      	bne.n	8015038 <_fflush_r+0x58>
 8015000:	686c      	ldr	r4, [r5, #4]
 8015002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d0ef      	beq.n	8014fea <_fflush_r+0xa>
 801500a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801500c:	07d0      	lsls	r0, r2, #31
 801500e:	d404      	bmi.n	801501a <_fflush_r+0x3a>
 8015010:	0599      	lsls	r1, r3, #22
 8015012:	d402      	bmi.n	801501a <_fflush_r+0x3a>
 8015014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015016:	f000 f915 	bl	8015244 <__retarget_lock_acquire_recursive>
 801501a:	4628      	mov	r0, r5
 801501c:	4621      	mov	r1, r4
 801501e:	f7ff ff59 	bl	8014ed4 <__sflush_r>
 8015022:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015024:	07da      	lsls	r2, r3, #31
 8015026:	4605      	mov	r5, r0
 8015028:	d4e0      	bmi.n	8014fec <_fflush_r+0xc>
 801502a:	89a3      	ldrh	r3, [r4, #12]
 801502c:	059b      	lsls	r3, r3, #22
 801502e:	d4dd      	bmi.n	8014fec <_fflush_r+0xc>
 8015030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015032:	f000 f908 	bl	8015246 <__retarget_lock_release_recursive>
 8015036:	e7d9      	b.n	8014fec <_fflush_r+0xc>
 8015038:	4b05      	ldr	r3, [pc, #20]	; (8015050 <_fflush_r+0x70>)
 801503a:	429c      	cmp	r4, r3
 801503c:	d101      	bne.n	8015042 <_fflush_r+0x62>
 801503e:	68ac      	ldr	r4, [r5, #8]
 8015040:	e7df      	b.n	8015002 <_fflush_r+0x22>
 8015042:	4b04      	ldr	r3, [pc, #16]	; (8015054 <_fflush_r+0x74>)
 8015044:	429c      	cmp	r4, r3
 8015046:	bf08      	it	eq
 8015048:	68ec      	ldreq	r4, [r5, #12]
 801504a:	e7da      	b.n	8015002 <_fflush_r+0x22>
 801504c:	08015dd4 	.word	0x08015dd4
 8015050:	08015df4 	.word	0x08015df4
 8015054:	08015db4 	.word	0x08015db4

08015058 <std>:
 8015058:	2300      	movs	r3, #0
 801505a:	b510      	push	{r4, lr}
 801505c:	4604      	mov	r4, r0
 801505e:	e9c0 3300 	strd	r3, r3, [r0]
 8015062:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015066:	6083      	str	r3, [r0, #8]
 8015068:	8181      	strh	r1, [r0, #12]
 801506a:	6643      	str	r3, [r0, #100]	; 0x64
 801506c:	81c2      	strh	r2, [r0, #14]
 801506e:	6183      	str	r3, [r0, #24]
 8015070:	4619      	mov	r1, r3
 8015072:	2208      	movs	r2, #8
 8015074:	305c      	adds	r0, #92	; 0x5c
 8015076:	f7ff fdc3 	bl	8014c00 <memset>
 801507a:	4b05      	ldr	r3, [pc, #20]	; (8015090 <std+0x38>)
 801507c:	6263      	str	r3, [r4, #36]	; 0x24
 801507e:	4b05      	ldr	r3, [pc, #20]	; (8015094 <std+0x3c>)
 8015080:	62a3      	str	r3, [r4, #40]	; 0x28
 8015082:	4b05      	ldr	r3, [pc, #20]	; (8015098 <std+0x40>)
 8015084:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015086:	4b05      	ldr	r3, [pc, #20]	; (801509c <std+0x44>)
 8015088:	6224      	str	r4, [r4, #32]
 801508a:	6323      	str	r3, [r4, #48]	; 0x30
 801508c:	bd10      	pop	{r4, pc}
 801508e:	bf00      	nop
 8015090:	08015a61 	.word	0x08015a61
 8015094:	08015a83 	.word	0x08015a83
 8015098:	08015abb 	.word	0x08015abb
 801509c:	08015adf 	.word	0x08015adf

080150a0 <_cleanup_r>:
 80150a0:	4901      	ldr	r1, [pc, #4]	; (80150a8 <_cleanup_r+0x8>)
 80150a2:	f000 b8af 	b.w	8015204 <_fwalk_reent>
 80150a6:	bf00      	nop
 80150a8:	08014fe1 	.word	0x08014fe1

080150ac <__sfmoreglue>:
 80150ac:	b570      	push	{r4, r5, r6, lr}
 80150ae:	1e4a      	subs	r2, r1, #1
 80150b0:	2568      	movs	r5, #104	; 0x68
 80150b2:	4355      	muls	r5, r2
 80150b4:	460e      	mov	r6, r1
 80150b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80150ba:	f000 f979 	bl	80153b0 <_malloc_r>
 80150be:	4604      	mov	r4, r0
 80150c0:	b140      	cbz	r0, 80150d4 <__sfmoreglue+0x28>
 80150c2:	2100      	movs	r1, #0
 80150c4:	e9c0 1600 	strd	r1, r6, [r0]
 80150c8:	300c      	adds	r0, #12
 80150ca:	60a0      	str	r0, [r4, #8]
 80150cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80150d0:	f7ff fd96 	bl	8014c00 <memset>
 80150d4:	4620      	mov	r0, r4
 80150d6:	bd70      	pop	{r4, r5, r6, pc}

080150d8 <__sfp_lock_acquire>:
 80150d8:	4801      	ldr	r0, [pc, #4]	; (80150e0 <__sfp_lock_acquire+0x8>)
 80150da:	f000 b8b3 	b.w	8015244 <__retarget_lock_acquire_recursive>
 80150de:	bf00      	nop
 80150e0:	200073f8 	.word	0x200073f8

080150e4 <__sfp_lock_release>:
 80150e4:	4801      	ldr	r0, [pc, #4]	; (80150ec <__sfp_lock_release+0x8>)
 80150e6:	f000 b8ae 	b.w	8015246 <__retarget_lock_release_recursive>
 80150ea:	bf00      	nop
 80150ec:	200073f8 	.word	0x200073f8

080150f0 <__sinit_lock_acquire>:
 80150f0:	4801      	ldr	r0, [pc, #4]	; (80150f8 <__sinit_lock_acquire+0x8>)
 80150f2:	f000 b8a7 	b.w	8015244 <__retarget_lock_acquire_recursive>
 80150f6:	bf00      	nop
 80150f8:	200073f3 	.word	0x200073f3

080150fc <__sinit_lock_release>:
 80150fc:	4801      	ldr	r0, [pc, #4]	; (8015104 <__sinit_lock_release+0x8>)
 80150fe:	f000 b8a2 	b.w	8015246 <__retarget_lock_release_recursive>
 8015102:	bf00      	nop
 8015104:	200073f3 	.word	0x200073f3

08015108 <__sinit>:
 8015108:	b510      	push	{r4, lr}
 801510a:	4604      	mov	r4, r0
 801510c:	f7ff fff0 	bl	80150f0 <__sinit_lock_acquire>
 8015110:	69a3      	ldr	r3, [r4, #24]
 8015112:	b11b      	cbz	r3, 801511c <__sinit+0x14>
 8015114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015118:	f7ff bff0 	b.w	80150fc <__sinit_lock_release>
 801511c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015120:	6523      	str	r3, [r4, #80]	; 0x50
 8015122:	4b13      	ldr	r3, [pc, #76]	; (8015170 <__sinit+0x68>)
 8015124:	4a13      	ldr	r2, [pc, #76]	; (8015174 <__sinit+0x6c>)
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	62a2      	str	r2, [r4, #40]	; 0x28
 801512a:	42a3      	cmp	r3, r4
 801512c:	bf04      	itt	eq
 801512e:	2301      	moveq	r3, #1
 8015130:	61a3      	streq	r3, [r4, #24]
 8015132:	4620      	mov	r0, r4
 8015134:	f000 f820 	bl	8015178 <__sfp>
 8015138:	6060      	str	r0, [r4, #4]
 801513a:	4620      	mov	r0, r4
 801513c:	f000 f81c 	bl	8015178 <__sfp>
 8015140:	60a0      	str	r0, [r4, #8]
 8015142:	4620      	mov	r0, r4
 8015144:	f000 f818 	bl	8015178 <__sfp>
 8015148:	2200      	movs	r2, #0
 801514a:	60e0      	str	r0, [r4, #12]
 801514c:	2104      	movs	r1, #4
 801514e:	6860      	ldr	r0, [r4, #4]
 8015150:	f7ff ff82 	bl	8015058 <std>
 8015154:	68a0      	ldr	r0, [r4, #8]
 8015156:	2201      	movs	r2, #1
 8015158:	2109      	movs	r1, #9
 801515a:	f7ff ff7d 	bl	8015058 <std>
 801515e:	68e0      	ldr	r0, [r4, #12]
 8015160:	2202      	movs	r2, #2
 8015162:	2112      	movs	r1, #18
 8015164:	f7ff ff78 	bl	8015058 <std>
 8015168:	2301      	movs	r3, #1
 801516a:	61a3      	str	r3, [r4, #24]
 801516c:	e7d2      	b.n	8015114 <__sinit+0xc>
 801516e:	bf00      	nop
 8015170:	08015db0 	.word	0x08015db0
 8015174:	080150a1 	.word	0x080150a1

08015178 <__sfp>:
 8015178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801517a:	4607      	mov	r7, r0
 801517c:	f7ff ffac 	bl	80150d8 <__sfp_lock_acquire>
 8015180:	4b1e      	ldr	r3, [pc, #120]	; (80151fc <__sfp+0x84>)
 8015182:	681e      	ldr	r6, [r3, #0]
 8015184:	69b3      	ldr	r3, [r6, #24]
 8015186:	b913      	cbnz	r3, 801518e <__sfp+0x16>
 8015188:	4630      	mov	r0, r6
 801518a:	f7ff ffbd 	bl	8015108 <__sinit>
 801518e:	3648      	adds	r6, #72	; 0x48
 8015190:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015194:	3b01      	subs	r3, #1
 8015196:	d503      	bpl.n	80151a0 <__sfp+0x28>
 8015198:	6833      	ldr	r3, [r6, #0]
 801519a:	b30b      	cbz	r3, 80151e0 <__sfp+0x68>
 801519c:	6836      	ldr	r6, [r6, #0]
 801519e:	e7f7      	b.n	8015190 <__sfp+0x18>
 80151a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80151a4:	b9d5      	cbnz	r5, 80151dc <__sfp+0x64>
 80151a6:	4b16      	ldr	r3, [pc, #88]	; (8015200 <__sfp+0x88>)
 80151a8:	60e3      	str	r3, [r4, #12]
 80151aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80151ae:	6665      	str	r5, [r4, #100]	; 0x64
 80151b0:	f000 f847 	bl	8015242 <__retarget_lock_init_recursive>
 80151b4:	f7ff ff96 	bl	80150e4 <__sfp_lock_release>
 80151b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80151bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80151c0:	6025      	str	r5, [r4, #0]
 80151c2:	61a5      	str	r5, [r4, #24]
 80151c4:	2208      	movs	r2, #8
 80151c6:	4629      	mov	r1, r5
 80151c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80151cc:	f7ff fd18 	bl	8014c00 <memset>
 80151d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80151d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80151d8:	4620      	mov	r0, r4
 80151da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151dc:	3468      	adds	r4, #104	; 0x68
 80151de:	e7d9      	b.n	8015194 <__sfp+0x1c>
 80151e0:	2104      	movs	r1, #4
 80151e2:	4638      	mov	r0, r7
 80151e4:	f7ff ff62 	bl	80150ac <__sfmoreglue>
 80151e8:	4604      	mov	r4, r0
 80151ea:	6030      	str	r0, [r6, #0]
 80151ec:	2800      	cmp	r0, #0
 80151ee:	d1d5      	bne.n	801519c <__sfp+0x24>
 80151f0:	f7ff ff78 	bl	80150e4 <__sfp_lock_release>
 80151f4:	230c      	movs	r3, #12
 80151f6:	603b      	str	r3, [r7, #0]
 80151f8:	e7ee      	b.n	80151d8 <__sfp+0x60>
 80151fa:	bf00      	nop
 80151fc:	08015db0 	.word	0x08015db0
 8015200:	ffff0001 	.word	0xffff0001

08015204 <_fwalk_reent>:
 8015204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015208:	4606      	mov	r6, r0
 801520a:	4688      	mov	r8, r1
 801520c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015210:	2700      	movs	r7, #0
 8015212:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015216:	f1b9 0901 	subs.w	r9, r9, #1
 801521a:	d505      	bpl.n	8015228 <_fwalk_reent+0x24>
 801521c:	6824      	ldr	r4, [r4, #0]
 801521e:	2c00      	cmp	r4, #0
 8015220:	d1f7      	bne.n	8015212 <_fwalk_reent+0xe>
 8015222:	4638      	mov	r0, r7
 8015224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015228:	89ab      	ldrh	r3, [r5, #12]
 801522a:	2b01      	cmp	r3, #1
 801522c:	d907      	bls.n	801523e <_fwalk_reent+0x3a>
 801522e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015232:	3301      	adds	r3, #1
 8015234:	d003      	beq.n	801523e <_fwalk_reent+0x3a>
 8015236:	4629      	mov	r1, r5
 8015238:	4630      	mov	r0, r6
 801523a:	47c0      	blx	r8
 801523c:	4307      	orrs	r7, r0
 801523e:	3568      	adds	r5, #104	; 0x68
 8015240:	e7e9      	b.n	8015216 <_fwalk_reent+0x12>

08015242 <__retarget_lock_init_recursive>:
 8015242:	4770      	bx	lr

08015244 <__retarget_lock_acquire_recursive>:
 8015244:	4770      	bx	lr

08015246 <__retarget_lock_release_recursive>:
 8015246:	4770      	bx	lr

08015248 <__swhatbuf_r>:
 8015248:	b570      	push	{r4, r5, r6, lr}
 801524a:	460e      	mov	r6, r1
 801524c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015250:	2900      	cmp	r1, #0
 8015252:	b096      	sub	sp, #88	; 0x58
 8015254:	4614      	mov	r4, r2
 8015256:	461d      	mov	r5, r3
 8015258:	da07      	bge.n	801526a <__swhatbuf_r+0x22>
 801525a:	2300      	movs	r3, #0
 801525c:	602b      	str	r3, [r5, #0]
 801525e:	89b3      	ldrh	r3, [r6, #12]
 8015260:	061a      	lsls	r2, r3, #24
 8015262:	d410      	bmi.n	8015286 <__swhatbuf_r+0x3e>
 8015264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015268:	e00e      	b.n	8015288 <__swhatbuf_r+0x40>
 801526a:	466a      	mov	r2, sp
 801526c:	f000 fc5e 	bl	8015b2c <_fstat_r>
 8015270:	2800      	cmp	r0, #0
 8015272:	dbf2      	blt.n	801525a <__swhatbuf_r+0x12>
 8015274:	9a01      	ldr	r2, [sp, #4]
 8015276:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801527a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801527e:	425a      	negs	r2, r3
 8015280:	415a      	adcs	r2, r3
 8015282:	602a      	str	r2, [r5, #0]
 8015284:	e7ee      	b.n	8015264 <__swhatbuf_r+0x1c>
 8015286:	2340      	movs	r3, #64	; 0x40
 8015288:	2000      	movs	r0, #0
 801528a:	6023      	str	r3, [r4, #0]
 801528c:	b016      	add	sp, #88	; 0x58
 801528e:	bd70      	pop	{r4, r5, r6, pc}

08015290 <__smakebuf_r>:
 8015290:	898b      	ldrh	r3, [r1, #12]
 8015292:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015294:	079d      	lsls	r5, r3, #30
 8015296:	4606      	mov	r6, r0
 8015298:	460c      	mov	r4, r1
 801529a:	d507      	bpl.n	80152ac <__smakebuf_r+0x1c>
 801529c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80152a0:	6023      	str	r3, [r4, #0]
 80152a2:	6123      	str	r3, [r4, #16]
 80152a4:	2301      	movs	r3, #1
 80152a6:	6163      	str	r3, [r4, #20]
 80152a8:	b002      	add	sp, #8
 80152aa:	bd70      	pop	{r4, r5, r6, pc}
 80152ac:	ab01      	add	r3, sp, #4
 80152ae:	466a      	mov	r2, sp
 80152b0:	f7ff ffca 	bl	8015248 <__swhatbuf_r>
 80152b4:	9900      	ldr	r1, [sp, #0]
 80152b6:	4605      	mov	r5, r0
 80152b8:	4630      	mov	r0, r6
 80152ba:	f000 f879 	bl	80153b0 <_malloc_r>
 80152be:	b948      	cbnz	r0, 80152d4 <__smakebuf_r+0x44>
 80152c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80152c4:	059a      	lsls	r2, r3, #22
 80152c6:	d4ef      	bmi.n	80152a8 <__smakebuf_r+0x18>
 80152c8:	f023 0303 	bic.w	r3, r3, #3
 80152cc:	f043 0302 	orr.w	r3, r3, #2
 80152d0:	81a3      	strh	r3, [r4, #12]
 80152d2:	e7e3      	b.n	801529c <__smakebuf_r+0xc>
 80152d4:	4b0d      	ldr	r3, [pc, #52]	; (801530c <__smakebuf_r+0x7c>)
 80152d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80152d8:	89a3      	ldrh	r3, [r4, #12]
 80152da:	6020      	str	r0, [r4, #0]
 80152dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80152e0:	81a3      	strh	r3, [r4, #12]
 80152e2:	9b00      	ldr	r3, [sp, #0]
 80152e4:	6163      	str	r3, [r4, #20]
 80152e6:	9b01      	ldr	r3, [sp, #4]
 80152e8:	6120      	str	r0, [r4, #16]
 80152ea:	b15b      	cbz	r3, 8015304 <__smakebuf_r+0x74>
 80152ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80152f0:	4630      	mov	r0, r6
 80152f2:	f000 fc2d 	bl	8015b50 <_isatty_r>
 80152f6:	b128      	cbz	r0, 8015304 <__smakebuf_r+0x74>
 80152f8:	89a3      	ldrh	r3, [r4, #12]
 80152fa:	f023 0303 	bic.w	r3, r3, #3
 80152fe:	f043 0301 	orr.w	r3, r3, #1
 8015302:	81a3      	strh	r3, [r4, #12]
 8015304:	89a0      	ldrh	r0, [r4, #12]
 8015306:	4305      	orrs	r5, r0
 8015308:	81a5      	strh	r5, [r4, #12]
 801530a:	e7cd      	b.n	80152a8 <__smakebuf_r+0x18>
 801530c:	080150a1 	.word	0x080150a1

08015310 <_free_r>:
 8015310:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015312:	2900      	cmp	r1, #0
 8015314:	d048      	beq.n	80153a8 <_free_r+0x98>
 8015316:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801531a:	9001      	str	r0, [sp, #4]
 801531c:	2b00      	cmp	r3, #0
 801531e:	f1a1 0404 	sub.w	r4, r1, #4
 8015322:	bfb8      	it	lt
 8015324:	18e4      	addlt	r4, r4, r3
 8015326:	f000 fc35 	bl	8015b94 <__malloc_lock>
 801532a:	4a20      	ldr	r2, [pc, #128]	; (80153ac <_free_r+0x9c>)
 801532c:	9801      	ldr	r0, [sp, #4]
 801532e:	6813      	ldr	r3, [r2, #0]
 8015330:	4615      	mov	r5, r2
 8015332:	b933      	cbnz	r3, 8015342 <_free_r+0x32>
 8015334:	6063      	str	r3, [r4, #4]
 8015336:	6014      	str	r4, [r2, #0]
 8015338:	b003      	add	sp, #12
 801533a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801533e:	f000 bc2f 	b.w	8015ba0 <__malloc_unlock>
 8015342:	42a3      	cmp	r3, r4
 8015344:	d90b      	bls.n	801535e <_free_r+0x4e>
 8015346:	6821      	ldr	r1, [r4, #0]
 8015348:	1862      	adds	r2, r4, r1
 801534a:	4293      	cmp	r3, r2
 801534c:	bf04      	itt	eq
 801534e:	681a      	ldreq	r2, [r3, #0]
 8015350:	685b      	ldreq	r3, [r3, #4]
 8015352:	6063      	str	r3, [r4, #4]
 8015354:	bf04      	itt	eq
 8015356:	1852      	addeq	r2, r2, r1
 8015358:	6022      	streq	r2, [r4, #0]
 801535a:	602c      	str	r4, [r5, #0]
 801535c:	e7ec      	b.n	8015338 <_free_r+0x28>
 801535e:	461a      	mov	r2, r3
 8015360:	685b      	ldr	r3, [r3, #4]
 8015362:	b10b      	cbz	r3, 8015368 <_free_r+0x58>
 8015364:	42a3      	cmp	r3, r4
 8015366:	d9fa      	bls.n	801535e <_free_r+0x4e>
 8015368:	6811      	ldr	r1, [r2, #0]
 801536a:	1855      	adds	r5, r2, r1
 801536c:	42a5      	cmp	r5, r4
 801536e:	d10b      	bne.n	8015388 <_free_r+0x78>
 8015370:	6824      	ldr	r4, [r4, #0]
 8015372:	4421      	add	r1, r4
 8015374:	1854      	adds	r4, r2, r1
 8015376:	42a3      	cmp	r3, r4
 8015378:	6011      	str	r1, [r2, #0]
 801537a:	d1dd      	bne.n	8015338 <_free_r+0x28>
 801537c:	681c      	ldr	r4, [r3, #0]
 801537e:	685b      	ldr	r3, [r3, #4]
 8015380:	6053      	str	r3, [r2, #4]
 8015382:	4421      	add	r1, r4
 8015384:	6011      	str	r1, [r2, #0]
 8015386:	e7d7      	b.n	8015338 <_free_r+0x28>
 8015388:	d902      	bls.n	8015390 <_free_r+0x80>
 801538a:	230c      	movs	r3, #12
 801538c:	6003      	str	r3, [r0, #0]
 801538e:	e7d3      	b.n	8015338 <_free_r+0x28>
 8015390:	6825      	ldr	r5, [r4, #0]
 8015392:	1961      	adds	r1, r4, r5
 8015394:	428b      	cmp	r3, r1
 8015396:	bf04      	itt	eq
 8015398:	6819      	ldreq	r1, [r3, #0]
 801539a:	685b      	ldreq	r3, [r3, #4]
 801539c:	6063      	str	r3, [r4, #4]
 801539e:	bf04      	itt	eq
 80153a0:	1949      	addeq	r1, r1, r5
 80153a2:	6021      	streq	r1, [r4, #0]
 80153a4:	6054      	str	r4, [r2, #4]
 80153a6:	e7c7      	b.n	8015338 <_free_r+0x28>
 80153a8:	b003      	add	sp, #12
 80153aa:	bd30      	pop	{r4, r5, pc}
 80153ac:	20007030 	.word	0x20007030

080153b0 <_malloc_r>:
 80153b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153b2:	1ccd      	adds	r5, r1, #3
 80153b4:	f025 0503 	bic.w	r5, r5, #3
 80153b8:	3508      	adds	r5, #8
 80153ba:	2d0c      	cmp	r5, #12
 80153bc:	bf38      	it	cc
 80153be:	250c      	movcc	r5, #12
 80153c0:	2d00      	cmp	r5, #0
 80153c2:	4606      	mov	r6, r0
 80153c4:	db01      	blt.n	80153ca <_malloc_r+0x1a>
 80153c6:	42a9      	cmp	r1, r5
 80153c8:	d903      	bls.n	80153d2 <_malloc_r+0x22>
 80153ca:	230c      	movs	r3, #12
 80153cc:	6033      	str	r3, [r6, #0]
 80153ce:	2000      	movs	r0, #0
 80153d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153d2:	f000 fbdf 	bl	8015b94 <__malloc_lock>
 80153d6:	4921      	ldr	r1, [pc, #132]	; (801545c <_malloc_r+0xac>)
 80153d8:	680a      	ldr	r2, [r1, #0]
 80153da:	4614      	mov	r4, r2
 80153dc:	b99c      	cbnz	r4, 8015406 <_malloc_r+0x56>
 80153de:	4f20      	ldr	r7, [pc, #128]	; (8015460 <_malloc_r+0xb0>)
 80153e0:	683b      	ldr	r3, [r7, #0]
 80153e2:	b923      	cbnz	r3, 80153ee <_malloc_r+0x3e>
 80153e4:	4621      	mov	r1, r4
 80153e6:	4630      	mov	r0, r6
 80153e8:	f000 fb2a 	bl	8015a40 <_sbrk_r>
 80153ec:	6038      	str	r0, [r7, #0]
 80153ee:	4629      	mov	r1, r5
 80153f0:	4630      	mov	r0, r6
 80153f2:	f000 fb25 	bl	8015a40 <_sbrk_r>
 80153f6:	1c43      	adds	r3, r0, #1
 80153f8:	d123      	bne.n	8015442 <_malloc_r+0x92>
 80153fa:	230c      	movs	r3, #12
 80153fc:	6033      	str	r3, [r6, #0]
 80153fe:	4630      	mov	r0, r6
 8015400:	f000 fbce 	bl	8015ba0 <__malloc_unlock>
 8015404:	e7e3      	b.n	80153ce <_malloc_r+0x1e>
 8015406:	6823      	ldr	r3, [r4, #0]
 8015408:	1b5b      	subs	r3, r3, r5
 801540a:	d417      	bmi.n	801543c <_malloc_r+0x8c>
 801540c:	2b0b      	cmp	r3, #11
 801540e:	d903      	bls.n	8015418 <_malloc_r+0x68>
 8015410:	6023      	str	r3, [r4, #0]
 8015412:	441c      	add	r4, r3
 8015414:	6025      	str	r5, [r4, #0]
 8015416:	e004      	b.n	8015422 <_malloc_r+0x72>
 8015418:	6863      	ldr	r3, [r4, #4]
 801541a:	42a2      	cmp	r2, r4
 801541c:	bf0c      	ite	eq
 801541e:	600b      	streq	r3, [r1, #0]
 8015420:	6053      	strne	r3, [r2, #4]
 8015422:	4630      	mov	r0, r6
 8015424:	f000 fbbc 	bl	8015ba0 <__malloc_unlock>
 8015428:	f104 000b 	add.w	r0, r4, #11
 801542c:	1d23      	adds	r3, r4, #4
 801542e:	f020 0007 	bic.w	r0, r0, #7
 8015432:	1ac2      	subs	r2, r0, r3
 8015434:	d0cc      	beq.n	80153d0 <_malloc_r+0x20>
 8015436:	1a1b      	subs	r3, r3, r0
 8015438:	50a3      	str	r3, [r4, r2]
 801543a:	e7c9      	b.n	80153d0 <_malloc_r+0x20>
 801543c:	4622      	mov	r2, r4
 801543e:	6864      	ldr	r4, [r4, #4]
 8015440:	e7cc      	b.n	80153dc <_malloc_r+0x2c>
 8015442:	1cc4      	adds	r4, r0, #3
 8015444:	f024 0403 	bic.w	r4, r4, #3
 8015448:	42a0      	cmp	r0, r4
 801544a:	d0e3      	beq.n	8015414 <_malloc_r+0x64>
 801544c:	1a21      	subs	r1, r4, r0
 801544e:	4630      	mov	r0, r6
 8015450:	f000 faf6 	bl	8015a40 <_sbrk_r>
 8015454:	3001      	adds	r0, #1
 8015456:	d1dd      	bne.n	8015414 <_malloc_r+0x64>
 8015458:	e7cf      	b.n	80153fa <_malloc_r+0x4a>
 801545a:	bf00      	nop
 801545c:	20007030 	.word	0x20007030
 8015460:	20007034 	.word	0x20007034

08015464 <__sfputc_r>:
 8015464:	6893      	ldr	r3, [r2, #8]
 8015466:	3b01      	subs	r3, #1
 8015468:	2b00      	cmp	r3, #0
 801546a:	b410      	push	{r4}
 801546c:	6093      	str	r3, [r2, #8]
 801546e:	da08      	bge.n	8015482 <__sfputc_r+0x1e>
 8015470:	6994      	ldr	r4, [r2, #24]
 8015472:	42a3      	cmp	r3, r4
 8015474:	db01      	blt.n	801547a <__sfputc_r+0x16>
 8015476:	290a      	cmp	r1, #10
 8015478:	d103      	bne.n	8015482 <__sfputc_r+0x1e>
 801547a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801547e:	f7ff bc69 	b.w	8014d54 <__swbuf_r>
 8015482:	6813      	ldr	r3, [r2, #0]
 8015484:	1c58      	adds	r0, r3, #1
 8015486:	6010      	str	r0, [r2, #0]
 8015488:	7019      	strb	r1, [r3, #0]
 801548a:	4608      	mov	r0, r1
 801548c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015490:	4770      	bx	lr

08015492 <__sfputs_r>:
 8015492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015494:	4606      	mov	r6, r0
 8015496:	460f      	mov	r7, r1
 8015498:	4614      	mov	r4, r2
 801549a:	18d5      	adds	r5, r2, r3
 801549c:	42ac      	cmp	r4, r5
 801549e:	d101      	bne.n	80154a4 <__sfputs_r+0x12>
 80154a0:	2000      	movs	r0, #0
 80154a2:	e007      	b.n	80154b4 <__sfputs_r+0x22>
 80154a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80154a8:	463a      	mov	r2, r7
 80154aa:	4630      	mov	r0, r6
 80154ac:	f7ff ffda 	bl	8015464 <__sfputc_r>
 80154b0:	1c43      	adds	r3, r0, #1
 80154b2:	d1f3      	bne.n	801549c <__sfputs_r+0xa>
 80154b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080154b8 <_vfiprintf_r>:
 80154b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154bc:	460d      	mov	r5, r1
 80154be:	b09d      	sub	sp, #116	; 0x74
 80154c0:	4614      	mov	r4, r2
 80154c2:	4698      	mov	r8, r3
 80154c4:	4606      	mov	r6, r0
 80154c6:	b118      	cbz	r0, 80154d0 <_vfiprintf_r+0x18>
 80154c8:	6983      	ldr	r3, [r0, #24]
 80154ca:	b90b      	cbnz	r3, 80154d0 <_vfiprintf_r+0x18>
 80154cc:	f7ff fe1c 	bl	8015108 <__sinit>
 80154d0:	4b89      	ldr	r3, [pc, #548]	; (80156f8 <_vfiprintf_r+0x240>)
 80154d2:	429d      	cmp	r5, r3
 80154d4:	d11b      	bne.n	801550e <_vfiprintf_r+0x56>
 80154d6:	6875      	ldr	r5, [r6, #4]
 80154d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80154da:	07d9      	lsls	r1, r3, #31
 80154dc:	d405      	bmi.n	80154ea <_vfiprintf_r+0x32>
 80154de:	89ab      	ldrh	r3, [r5, #12]
 80154e0:	059a      	lsls	r2, r3, #22
 80154e2:	d402      	bmi.n	80154ea <_vfiprintf_r+0x32>
 80154e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80154e6:	f7ff fead 	bl	8015244 <__retarget_lock_acquire_recursive>
 80154ea:	89ab      	ldrh	r3, [r5, #12]
 80154ec:	071b      	lsls	r3, r3, #28
 80154ee:	d501      	bpl.n	80154f4 <_vfiprintf_r+0x3c>
 80154f0:	692b      	ldr	r3, [r5, #16]
 80154f2:	b9eb      	cbnz	r3, 8015530 <_vfiprintf_r+0x78>
 80154f4:	4629      	mov	r1, r5
 80154f6:	4630      	mov	r0, r6
 80154f8:	f7ff fc7e 	bl	8014df8 <__swsetup_r>
 80154fc:	b1c0      	cbz	r0, 8015530 <_vfiprintf_r+0x78>
 80154fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015500:	07dc      	lsls	r4, r3, #31
 8015502:	d50e      	bpl.n	8015522 <_vfiprintf_r+0x6a>
 8015504:	f04f 30ff 	mov.w	r0, #4294967295
 8015508:	b01d      	add	sp, #116	; 0x74
 801550a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801550e:	4b7b      	ldr	r3, [pc, #492]	; (80156fc <_vfiprintf_r+0x244>)
 8015510:	429d      	cmp	r5, r3
 8015512:	d101      	bne.n	8015518 <_vfiprintf_r+0x60>
 8015514:	68b5      	ldr	r5, [r6, #8]
 8015516:	e7df      	b.n	80154d8 <_vfiprintf_r+0x20>
 8015518:	4b79      	ldr	r3, [pc, #484]	; (8015700 <_vfiprintf_r+0x248>)
 801551a:	429d      	cmp	r5, r3
 801551c:	bf08      	it	eq
 801551e:	68f5      	ldreq	r5, [r6, #12]
 8015520:	e7da      	b.n	80154d8 <_vfiprintf_r+0x20>
 8015522:	89ab      	ldrh	r3, [r5, #12]
 8015524:	0598      	lsls	r0, r3, #22
 8015526:	d4ed      	bmi.n	8015504 <_vfiprintf_r+0x4c>
 8015528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801552a:	f7ff fe8c 	bl	8015246 <__retarget_lock_release_recursive>
 801552e:	e7e9      	b.n	8015504 <_vfiprintf_r+0x4c>
 8015530:	2300      	movs	r3, #0
 8015532:	9309      	str	r3, [sp, #36]	; 0x24
 8015534:	2320      	movs	r3, #32
 8015536:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801553a:	f8cd 800c 	str.w	r8, [sp, #12]
 801553e:	2330      	movs	r3, #48	; 0x30
 8015540:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015704 <_vfiprintf_r+0x24c>
 8015544:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015548:	f04f 0901 	mov.w	r9, #1
 801554c:	4623      	mov	r3, r4
 801554e:	469a      	mov	sl, r3
 8015550:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015554:	b10a      	cbz	r2, 801555a <_vfiprintf_r+0xa2>
 8015556:	2a25      	cmp	r2, #37	; 0x25
 8015558:	d1f9      	bne.n	801554e <_vfiprintf_r+0x96>
 801555a:	ebba 0b04 	subs.w	fp, sl, r4
 801555e:	d00b      	beq.n	8015578 <_vfiprintf_r+0xc0>
 8015560:	465b      	mov	r3, fp
 8015562:	4622      	mov	r2, r4
 8015564:	4629      	mov	r1, r5
 8015566:	4630      	mov	r0, r6
 8015568:	f7ff ff93 	bl	8015492 <__sfputs_r>
 801556c:	3001      	adds	r0, #1
 801556e:	f000 80aa 	beq.w	80156c6 <_vfiprintf_r+0x20e>
 8015572:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015574:	445a      	add	r2, fp
 8015576:	9209      	str	r2, [sp, #36]	; 0x24
 8015578:	f89a 3000 	ldrb.w	r3, [sl]
 801557c:	2b00      	cmp	r3, #0
 801557e:	f000 80a2 	beq.w	80156c6 <_vfiprintf_r+0x20e>
 8015582:	2300      	movs	r3, #0
 8015584:	f04f 32ff 	mov.w	r2, #4294967295
 8015588:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801558c:	f10a 0a01 	add.w	sl, sl, #1
 8015590:	9304      	str	r3, [sp, #16]
 8015592:	9307      	str	r3, [sp, #28]
 8015594:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015598:	931a      	str	r3, [sp, #104]	; 0x68
 801559a:	4654      	mov	r4, sl
 801559c:	2205      	movs	r2, #5
 801559e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155a2:	4858      	ldr	r0, [pc, #352]	; (8015704 <_vfiprintf_r+0x24c>)
 80155a4:	f7ea fe1c 	bl	80001e0 <memchr>
 80155a8:	9a04      	ldr	r2, [sp, #16]
 80155aa:	b9d8      	cbnz	r0, 80155e4 <_vfiprintf_r+0x12c>
 80155ac:	06d1      	lsls	r1, r2, #27
 80155ae:	bf44      	itt	mi
 80155b0:	2320      	movmi	r3, #32
 80155b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80155b6:	0713      	lsls	r3, r2, #28
 80155b8:	bf44      	itt	mi
 80155ba:	232b      	movmi	r3, #43	; 0x2b
 80155bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80155c0:	f89a 3000 	ldrb.w	r3, [sl]
 80155c4:	2b2a      	cmp	r3, #42	; 0x2a
 80155c6:	d015      	beq.n	80155f4 <_vfiprintf_r+0x13c>
 80155c8:	9a07      	ldr	r2, [sp, #28]
 80155ca:	4654      	mov	r4, sl
 80155cc:	2000      	movs	r0, #0
 80155ce:	f04f 0c0a 	mov.w	ip, #10
 80155d2:	4621      	mov	r1, r4
 80155d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80155d8:	3b30      	subs	r3, #48	; 0x30
 80155da:	2b09      	cmp	r3, #9
 80155dc:	d94e      	bls.n	801567c <_vfiprintf_r+0x1c4>
 80155de:	b1b0      	cbz	r0, 801560e <_vfiprintf_r+0x156>
 80155e0:	9207      	str	r2, [sp, #28]
 80155e2:	e014      	b.n	801560e <_vfiprintf_r+0x156>
 80155e4:	eba0 0308 	sub.w	r3, r0, r8
 80155e8:	fa09 f303 	lsl.w	r3, r9, r3
 80155ec:	4313      	orrs	r3, r2
 80155ee:	9304      	str	r3, [sp, #16]
 80155f0:	46a2      	mov	sl, r4
 80155f2:	e7d2      	b.n	801559a <_vfiprintf_r+0xe2>
 80155f4:	9b03      	ldr	r3, [sp, #12]
 80155f6:	1d19      	adds	r1, r3, #4
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	9103      	str	r1, [sp, #12]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	bfbb      	ittet	lt
 8015600:	425b      	neglt	r3, r3
 8015602:	f042 0202 	orrlt.w	r2, r2, #2
 8015606:	9307      	strge	r3, [sp, #28]
 8015608:	9307      	strlt	r3, [sp, #28]
 801560a:	bfb8      	it	lt
 801560c:	9204      	strlt	r2, [sp, #16]
 801560e:	7823      	ldrb	r3, [r4, #0]
 8015610:	2b2e      	cmp	r3, #46	; 0x2e
 8015612:	d10c      	bne.n	801562e <_vfiprintf_r+0x176>
 8015614:	7863      	ldrb	r3, [r4, #1]
 8015616:	2b2a      	cmp	r3, #42	; 0x2a
 8015618:	d135      	bne.n	8015686 <_vfiprintf_r+0x1ce>
 801561a:	9b03      	ldr	r3, [sp, #12]
 801561c:	1d1a      	adds	r2, r3, #4
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	9203      	str	r2, [sp, #12]
 8015622:	2b00      	cmp	r3, #0
 8015624:	bfb8      	it	lt
 8015626:	f04f 33ff 	movlt.w	r3, #4294967295
 801562a:	3402      	adds	r4, #2
 801562c:	9305      	str	r3, [sp, #20]
 801562e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015714 <_vfiprintf_r+0x25c>
 8015632:	7821      	ldrb	r1, [r4, #0]
 8015634:	2203      	movs	r2, #3
 8015636:	4650      	mov	r0, sl
 8015638:	f7ea fdd2 	bl	80001e0 <memchr>
 801563c:	b140      	cbz	r0, 8015650 <_vfiprintf_r+0x198>
 801563e:	2340      	movs	r3, #64	; 0x40
 8015640:	eba0 000a 	sub.w	r0, r0, sl
 8015644:	fa03 f000 	lsl.w	r0, r3, r0
 8015648:	9b04      	ldr	r3, [sp, #16]
 801564a:	4303      	orrs	r3, r0
 801564c:	3401      	adds	r4, #1
 801564e:	9304      	str	r3, [sp, #16]
 8015650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015654:	482c      	ldr	r0, [pc, #176]	; (8015708 <_vfiprintf_r+0x250>)
 8015656:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801565a:	2206      	movs	r2, #6
 801565c:	f7ea fdc0 	bl	80001e0 <memchr>
 8015660:	2800      	cmp	r0, #0
 8015662:	d03f      	beq.n	80156e4 <_vfiprintf_r+0x22c>
 8015664:	4b29      	ldr	r3, [pc, #164]	; (801570c <_vfiprintf_r+0x254>)
 8015666:	bb1b      	cbnz	r3, 80156b0 <_vfiprintf_r+0x1f8>
 8015668:	9b03      	ldr	r3, [sp, #12]
 801566a:	3307      	adds	r3, #7
 801566c:	f023 0307 	bic.w	r3, r3, #7
 8015670:	3308      	adds	r3, #8
 8015672:	9303      	str	r3, [sp, #12]
 8015674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015676:	443b      	add	r3, r7
 8015678:	9309      	str	r3, [sp, #36]	; 0x24
 801567a:	e767      	b.n	801554c <_vfiprintf_r+0x94>
 801567c:	fb0c 3202 	mla	r2, ip, r2, r3
 8015680:	460c      	mov	r4, r1
 8015682:	2001      	movs	r0, #1
 8015684:	e7a5      	b.n	80155d2 <_vfiprintf_r+0x11a>
 8015686:	2300      	movs	r3, #0
 8015688:	3401      	adds	r4, #1
 801568a:	9305      	str	r3, [sp, #20]
 801568c:	4619      	mov	r1, r3
 801568e:	f04f 0c0a 	mov.w	ip, #10
 8015692:	4620      	mov	r0, r4
 8015694:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015698:	3a30      	subs	r2, #48	; 0x30
 801569a:	2a09      	cmp	r2, #9
 801569c:	d903      	bls.n	80156a6 <_vfiprintf_r+0x1ee>
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d0c5      	beq.n	801562e <_vfiprintf_r+0x176>
 80156a2:	9105      	str	r1, [sp, #20]
 80156a4:	e7c3      	b.n	801562e <_vfiprintf_r+0x176>
 80156a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80156aa:	4604      	mov	r4, r0
 80156ac:	2301      	movs	r3, #1
 80156ae:	e7f0      	b.n	8015692 <_vfiprintf_r+0x1da>
 80156b0:	ab03      	add	r3, sp, #12
 80156b2:	9300      	str	r3, [sp, #0]
 80156b4:	462a      	mov	r2, r5
 80156b6:	4b16      	ldr	r3, [pc, #88]	; (8015710 <_vfiprintf_r+0x258>)
 80156b8:	a904      	add	r1, sp, #16
 80156ba:	4630      	mov	r0, r6
 80156bc:	f3af 8000 	nop.w
 80156c0:	4607      	mov	r7, r0
 80156c2:	1c78      	adds	r0, r7, #1
 80156c4:	d1d6      	bne.n	8015674 <_vfiprintf_r+0x1bc>
 80156c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80156c8:	07d9      	lsls	r1, r3, #31
 80156ca:	d405      	bmi.n	80156d8 <_vfiprintf_r+0x220>
 80156cc:	89ab      	ldrh	r3, [r5, #12]
 80156ce:	059a      	lsls	r2, r3, #22
 80156d0:	d402      	bmi.n	80156d8 <_vfiprintf_r+0x220>
 80156d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80156d4:	f7ff fdb7 	bl	8015246 <__retarget_lock_release_recursive>
 80156d8:	89ab      	ldrh	r3, [r5, #12]
 80156da:	065b      	lsls	r3, r3, #25
 80156dc:	f53f af12 	bmi.w	8015504 <_vfiprintf_r+0x4c>
 80156e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80156e2:	e711      	b.n	8015508 <_vfiprintf_r+0x50>
 80156e4:	ab03      	add	r3, sp, #12
 80156e6:	9300      	str	r3, [sp, #0]
 80156e8:	462a      	mov	r2, r5
 80156ea:	4b09      	ldr	r3, [pc, #36]	; (8015710 <_vfiprintf_r+0x258>)
 80156ec:	a904      	add	r1, sp, #16
 80156ee:	4630      	mov	r0, r6
 80156f0:	f000 f880 	bl	80157f4 <_printf_i>
 80156f4:	e7e4      	b.n	80156c0 <_vfiprintf_r+0x208>
 80156f6:	bf00      	nop
 80156f8:	08015dd4 	.word	0x08015dd4
 80156fc:	08015df4 	.word	0x08015df4
 8015700:	08015db4 	.word	0x08015db4
 8015704:	08015e14 	.word	0x08015e14
 8015708:	08015e1e 	.word	0x08015e1e
 801570c:	00000000 	.word	0x00000000
 8015710:	08015493 	.word	0x08015493
 8015714:	08015e1a 	.word	0x08015e1a

08015718 <_printf_common>:
 8015718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801571c:	4616      	mov	r6, r2
 801571e:	4699      	mov	r9, r3
 8015720:	688a      	ldr	r2, [r1, #8]
 8015722:	690b      	ldr	r3, [r1, #16]
 8015724:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015728:	4293      	cmp	r3, r2
 801572a:	bfb8      	it	lt
 801572c:	4613      	movlt	r3, r2
 801572e:	6033      	str	r3, [r6, #0]
 8015730:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015734:	4607      	mov	r7, r0
 8015736:	460c      	mov	r4, r1
 8015738:	b10a      	cbz	r2, 801573e <_printf_common+0x26>
 801573a:	3301      	adds	r3, #1
 801573c:	6033      	str	r3, [r6, #0]
 801573e:	6823      	ldr	r3, [r4, #0]
 8015740:	0699      	lsls	r1, r3, #26
 8015742:	bf42      	ittt	mi
 8015744:	6833      	ldrmi	r3, [r6, #0]
 8015746:	3302      	addmi	r3, #2
 8015748:	6033      	strmi	r3, [r6, #0]
 801574a:	6825      	ldr	r5, [r4, #0]
 801574c:	f015 0506 	ands.w	r5, r5, #6
 8015750:	d106      	bne.n	8015760 <_printf_common+0x48>
 8015752:	f104 0a19 	add.w	sl, r4, #25
 8015756:	68e3      	ldr	r3, [r4, #12]
 8015758:	6832      	ldr	r2, [r6, #0]
 801575a:	1a9b      	subs	r3, r3, r2
 801575c:	42ab      	cmp	r3, r5
 801575e:	dc26      	bgt.n	80157ae <_printf_common+0x96>
 8015760:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015764:	1e13      	subs	r3, r2, #0
 8015766:	6822      	ldr	r2, [r4, #0]
 8015768:	bf18      	it	ne
 801576a:	2301      	movne	r3, #1
 801576c:	0692      	lsls	r2, r2, #26
 801576e:	d42b      	bmi.n	80157c8 <_printf_common+0xb0>
 8015770:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015774:	4649      	mov	r1, r9
 8015776:	4638      	mov	r0, r7
 8015778:	47c0      	blx	r8
 801577a:	3001      	adds	r0, #1
 801577c:	d01e      	beq.n	80157bc <_printf_common+0xa4>
 801577e:	6823      	ldr	r3, [r4, #0]
 8015780:	68e5      	ldr	r5, [r4, #12]
 8015782:	6832      	ldr	r2, [r6, #0]
 8015784:	f003 0306 	and.w	r3, r3, #6
 8015788:	2b04      	cmp	r3, #4
 801578a:	bf08      	it	eq
 801578c:	1aad      	subeq	r5, r5, r2
 801578e:	68a3      	ldr	r3, [r4, #8]
 8015790:	6922      	ldr	r2, [r4, #16]
 8015792:	bf0c      	ite	eq
 8015794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015798:	2500      	movne	r5, #0
 801579a:	4293      	cmp	r3, r2
 801579c:	bfc4      	itt	gt
 801579e:	1a9b      	subgt	r3, r3, r2
 80157a0:	18ed      	addgt	r5, r5, r3
 80157a2:	2600      	movs	r6, #0
 80157a4:	341a      	adds	r4, #26
 80157a6:	42b5      	cmp	r5, r6
 80157a8:	d11a      	bne.n	80157e0 <_printf_common+0xc8>
 80157aa:	2000      	movs	r0, #0
 80157ac:	e008      	b.n	80157c0 <_printf_common+0xa8>
 80157ae:	2301      	movs	r3, #1
 80157b0:	4652      	mov	r2, sl
 80157b2:	4649      	mov	r1, r9
 80157b4:	4638      	mov	r0, r7
 80157b6:	47c0      	blx	r8
 80157b8:	3001      	adds	r0, #1
 80157ba:	d103      	bne.n	80157c4 <_printf_common+0xac>
 80157bc:	f04f 30ff 	mov.w	r0, #4294967295
 80157c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80157c4:	3501      	adds	r5, #1
 80157c6:	e7c6      	b.n	8015756 <_printf_common+0x3e>
 80157c8:	18e1      	adds	r1, r4, r3
 80157ca:	1c5a      	adds	r2, r3, #1
 80157cc:	2030      	movs	r0, #48	; 0x30
 80157ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80157d2:	4422      	add	r2, r4
 80157d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80157d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80157dc:	3302      	adds	r3, #2
 80157de:	e7c7      	b.n	8015770 <_printf_common+0x58>
 80157e0:	2301      	movs	r3, #1
 80157e2:	4622      	mov	r2, r4
 80157e4:	4649      	mov	r1, r9
 80157e6:	4638      	mov	r0, r7
 80157e8:	47c0      	blx	r8
 80157ea:	3001      	adds	r0, #1
 80157ec:	d0e6      	beq.n	80157bc <_printf_common+0xa4>
 80157ee:	3601      	adds	r6, #1
 80157f0:	e7d9      	b.n	80157a6 <_printf_common+0x8e>
	...

080157f4 <_printf_i>:
 80157f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80157f8:	460c      	mov	r4, r1
 80157fa:	4691      	mov	r9, r2
 80157fc:	7e27      	ldrb	r7, [r4, #24]
 80157fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015800:	2f78      	cmp	r7, #120	; 0x78
 8015802:	4680      	mov	r8, r0
 8015804:	469a      	mov	sl, r3
 8015806:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801580a:	d807      	bhi.n	801581c <_printf_i+0x28>
 801580c:	2f62      	cmp	r7, #98	; 0x62
 801580e:	d80a      	bhi.n	8015826 <_printf_i+0x32>
 8015810:	2f00      	cmp	r7, #0
 8015812:	f000 80d8 	beq.w	80159c6 <_printf_i+0x1d2>
 8015816:	2f58      	cmp	r7, #88	; 0x58
 8015818:	f000 80a3 	beq.w	8015962 <_printf_i+0x16e>
 801581c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015820:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015824:	e03a      	b.n	801589c <_printf_i+0xa8>
 8015826:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801582a:	2b15      	cmp	r3, #21
 801582c:	d8f6      	bhi.n	801581c <_printf_i+0x28>
 801582e:	a001      	add	r0, pc, #4	; (adr r0, 8015834 <_printf_i+0x40>)
 8015830:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8015834:	0801588d 	.word	0x0801588d
 8015838:	080158a1 	.word	0x080158a1
 801583c:	0801581d 	.word	0x0801581d
 8015840:	0801581d 	.word	0x0801581d
 8015844:	0801581d 	.word	0x0801581d
 8015848:	0801581d 	.word	0x0801581d
 801584c:	080158a1 	.word	0x080158a1
 8015850:	0801581d 	.word	0x0801581d
 8015854:	0801581d 	.word	0x0801581d
 8015858:	0801581d 	.word	0x0801581d
 801585c:	0801581d 	.word	0x0801581d
 8015860:	080159ad 	.word	0x080159ad
 8015864:	080158d1 	.word	0x080158d1
 8015868:	0801598f 	.word	0x0801598f
 801586c:	0801581d 	.word	0x0801581d
 8015870:	0801581d 	.word	0x0801581d
 8015874:	080159cf 	.word	0x080159cf
 8015878:	0801581d 	.word	0x0801581d
 801587c:	080158d1 	.word	0x080158d1
 8015880:	0801581d 	.word	0x0801581d
 8015884:	0801581d 	.word	0x0801581d
 8015888:	08015997 	.word	0x08015997
 801588c:	680b      	ldr	r3, [r1, #0]
 801588e:	1d1a      	adds	r2, r3, #4
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	600a      	str	r2, [r1, #0]
 8015894:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015898:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801589c:	2301      	movs	r3, #1
 801589e:	e0a3      	b.n	80159e8 <_printf_i+0x1f4>
 80158a0:	6825      	ldr	r5, [r4, #0]
 80158a2:	6808      	ldr	r0, [r1, #0]
 80158a4:	062e      	lsls	r6, r5, #24
 80158a6:	f100 0304 	add.w	r3, r0, #4
 80158aa:	d50a      	bpl.n	80158c2 <_printf_i+0xce>
 80158ac:	6805      	ldr	r5, [r0, #0]
 80158ae:	600b      	str	r3, [r1, #0]
 80158b0:	2d00      	cmp	r5, #0
 80158b2:	da03      	bge.n	80158bc <_printf_i+0xc8>
 80158b4:	232d      	movs	r3, #45	; 0x2d
 80158b6:	426d      	negs	r5, r5
 80158b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80158bc:	485e      	ldr	r0, [pc, #376]	; (8015a38 <_printf_i+0x244>)
 80158be:	230a      	movs	r3, #10
 80158c0:	e019      	b.n	80158f6 <_printf_i+0x102>
 80158c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80158c6:	6805      	ldr	r5, [r0, #0]
 80158c8:	600b      	str	r3, [r1, #0]
 80158ca:	bf18      	it	ne
 80158cc:	b22d      	sxthne	r5, r5
 80158ce:	e7ef      	b.n	80158b0 <_printf_i+0xbc>
 80158d0:	680b      	ldr	r3, [r1, #0]
 80158d2:	6825      	ldr	r5, [r4, #0]
 80158d4:	1d18      	adds	r0, r3, #4
 80158d6:	6008      	str	r0, [r1, #0]
 80158d8:	0628      	lsls	r0, r5, #24
 80158da:	d501      	bpl.n	80158e0 <_printf_i+0xec>
 80158dc:	681d      	ldr	r5, [r3, #0]
 80158de:	e002      	b.n	80158e6 <_printf_i+0xf2>
 80158e0:	0669      	lsls	r1, r5, #25
 80158e2:	d5fb      	bpl.n	80158dc <_printf_i+0xe8>
 80158e4:	881d      	ldrh	r5, [r3, #0]
 80158e6:	4854      	ldr	r0, [pc, #336]	; (8015a38 <_printf_i+0x244>)
 80158e8:	2f6f      	cmp	r7, #111	; 0x6f
 80158ea:	bf0c      	ite	eq
 80158ec:	2308      	moveq	r3, #8
 80158ee:	230a      	movne	r3, #10
 80158f0:	2100      	movs	r1, #0
 80158f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80158f6:	6866      	ldr	r6, [r4, #4]
 80158f8:	60a6      	str	r6, [r4, #8]
 80158fa:	2e00      	cmp	r6, #0
 80158fc:	bfa2      	ittt	ge
 80158fe:	6821      	ldrge	r1, [r4, #0]
 8015900:	f021 0104 	bicge.w	r1, r1, #4
 8015904:	6021      	strge	r1, [r4, #0]
 8015906:	b90d      	cbnz	r5, 801590c <_printf_i+0x118>
 8015908:	2e00      	cmp	r6, #0
 801590a:	d04d      	beq.n	80159a8 <_printf_i+0x1b4>
 801590c:	4616      	mov	r6, r2
 801590e:	fbb5 f1f3 	udiv	r1, r5, r3
 8015912:	fb03 5711 	mls	r7, r3, r1, r5
 8015916:	5dc7      	ldrb	r7, [r0, r7]
 8015918:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801591c:	462f      	mov	r7, r5
 801591e:	42bb      	cmp	r3, r7
 8015920:	460d      	mov	r5, r1
 8015922:	d9f4      	bls.n	801590e <_printf_i+0x11a>
 8015924:	2b08      	cmp	r3, #8
 8015926:	d10b      	bne.n	8015940 <_printf_i+0x14c>
 8015928:	6823      	ldr	r3, [r4, #0]
 801592a:	07df      	lsls	r7, r3, #31
 801592c:	d508      	bpl.n	8015940 <_printf_i+0x14c>
 801592e:	6923      	ldr	r3, [r4, #16]
 8015930:	6861      	ldr	r1, [r4, #4]
 8015932:	4299      	cmp	r1, r3
 8015934:	bfde      	ittt	le
 8015936:	2330      	movle	r3, #48	; 0x30
 8015938:	f806 3c01 	strble.w	r3, [r6, #-1]
 801593c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015940:	1b92      	subs	r2, r2, r6
 8015942:	6122      	str	r2, [r4, #16]
 8015944:	f8cd a000 	str.w	sl, [sp]
 8015948:	464b      	mov	r3, r9
 801594a:	aa03      	add	r2, sp, #12
 801594c:	4621      	mov	r1, r4
 801594e:	4640      	mov	r0, r8
 8015950:	f7ff fee2 	bl	8015718 <_printf_common>
 8015954:	3001      	adds	r0, #1
 8015956:	d14c      	bne.n	80159f2 <_printf_i+0x1fe>
 8015958:	f04f 30ff 	mov.w	r0, #4294967295
 801595c:	b004      	add	sp, #16
 801595e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015962:	4835      	ldr	r0, [pc, #212]	; (8015a38 <_printf_i+0x244>)
 8015964:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015968:	6823      	ldr	r3, [r4, #0]
 801596a:	680e      	ldr	r6, [r1, #0]
 801596c:	061f      	lsls	r7, r3, #24
 801596e:	f856 5b04 	ldr.w	r5, [r6], #4
 8015972:	600e      	str	r6, [r1, #0]
 8015974:	d514      	bpl.n	80159a0 <_printf_i+0x1ac>
 8015976:	07d9      	lsls	r1, r3, #31
 8015978:	bf44      	itt	mi
 801597a:	f043 0320 	orrmi.w	r3, r3, #32
 801597e:	6023      	strmi	r3, [r4, #0]
 8015980:	b91d      	cbnz	r5, 801598a <_printf_i+0x196>
 8015982:	6823      	ldr	r3, [r4, #0]
 8015984:	f023 0320 	bic.w	r3, r3, #32
 8015988:	6023      	str	r3, [r4, #0]
 801598a:	2310      	movs	r3, #16
 801598c:	e7b0      	b.n	80158f0 <_printf_i+0xfc>
 801598e:	6823      	ldr	r3, [r4, #0]
 8015990:	f043 0320 	orr.w	r3, r3, #32
 8015994:	6023      	str	r3, [r4, #0]
 8015996:	2378      	movs	r3, #120	; 0x78
 8015998:	4828      	ldr	r0, [pc, #160]	; (8015a3c <_printf_i+0x248>)
 801599a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801599e:	e7e3      	b.n	8015968 <_printf_i+0x174>
 80159a0:	065e      	lsls	r6, r3, #25
 80159a2:	bf48      	it	mi
 80159a4:	b2ad      	uxthmi	r5, r5
 80159a6:	e7e6      	b.n	8015976 <_printf_i+0x182>
 80159a8:	4616      	mov	r6, r2
 80159aa:	e7bb      	b.n	8015924 <_printf_i+0x130>
 80159ac:	680b      	ldr	r3, [r1, #0]
 80159ae:	6826      	ldr	r6, [r4, #0]
 80159b0:	6960      	ldr	r0, [r4, #20]
 80159b2:	1d1d      	adds	r5, r3, #4
 80159b4:	600d      	str	r5, [r1, #0]
 80159b6:	0635      	lsls	r5, r6, #24
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	d501      	bpl.n	80159c0 <_printf_i+0x1cc>
 80159bc:	6018      	str	r0, [r3, #0]
 80159be:	e002      	b.n	80159c6 <_printf_i+0x1d2>
 80159c0:	0671      	lsls	r1, r6, #25
 80159c2:	d5fb      	bpl.n	80159bc <_printf_i+0x1c8>
 80159c4:	8018      	strh	r0, [r3, #0]
 80159c6:	2300      	movs	r3, #0
 80159c8:	6123      	str	r3, [r4, #16]
 80159ca:	4616      	mov	r6, r2
 80159cc:	e7ba      	b.n	8015944 <_printf_i+0x150>
 80159ce:	680b      	ldr	r3, [r1, #0]
 80159d0:	1d1a      	adds	r2, r3, #4
 80159d2:	600a      	str	r2, [r1, #0]
 80159d4:	681e      	ldr	r6, [r3, #0]
 80159d6:	6862      	ldr	r2, [r4, #4]
 80159d8:	2100      	movs	r1, #0
 80159da:	4630      	mov	r0, r6
 80159dc:	f7ea fc00 	bl	80001e0 <memchr>
 80159e0:	b108      	cbz	r0, 80159e6 <_printf_i+0x1f2>
 80159e2:	1b80      	subs	r0, r0, r6
 80159e4:	6060      	str	r0, [r4, #4]
 80159e6:	6863      	ldr	r3, [r4, #4]
 80159e8:	6123      	str	r3, [r4, #16]
 80159ea:	2300      	movs	r3, #0
 80159ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80159f0:	e7a8      	b.n	8015944 <_printf_i+0x150>
 80159f2:	6923      	ldr	r3, [r4, #16]
 80159f4:	4632      	mov	r2, r6
 80159f6:	4649      	mov	r1, r9
 80159f8:	4640      	mov	r0, r8
 80159fa:	47d0      	blx	sl
 80159fc:	3001      	adds	r0, #1
 80159fe:	d0ab      	beq.n	8015958 <_printf_i+0x164>
 8015a00:	6823      	ldr	r3, [r4, #0]
 8015a02:	079b      	lsls	r3, r3, #30
 8015a04:	d413      	bmi.n	8015a2e <_printf_i+0x23a>
 8015a06:	68e0      	ldr	r0, [r4, #12]
 8015a08:	9b03      	ldr	r3, [sp, #12]
 8015a0a:	4298      	cmp	r0, r3
 8015a0c:	bfb8      	it	lt
 8015a0e:	4618      	movlt	r0, r3
 8015a10:	e7a4      	b.n	801595c <_printf_i+0x168>
 8015a12:	2301      	movs	r3, #1
 8015a14:	4632      	mov	r2, r6
 8015a16:	4649      	mov	r1, r9
 8015a18:	4640      	mov	r0, r8
 8015a1a:	47d0      	blx	sl
 8015a1c:	3001      	adds	r0, #1
 8015a1e:	d09b      	beq.n	8015958 <_printf_i+0x164>
 8015a20:	3501      	adds	r5, #1
 8015a22:	68e3      	ldr	r3, [r4, #12]
 8015a24:	9903      	ldr	r1, [sp, #12]
 8015a26:	1a5b      	subs	r3, r3, r1
 8015a28:	42ab      	cmp	r3, r5
 8015a2a:	dcf2      	bgt.n	8015a12 <_printf_i+0x21e>
 8015a2c:	e7eb      	b.n	8015a06 <_printf_i+0x212>
 8015a2e:	2500      	movs	r5, #0
 8015a30:	f104 0619 	add.w	r6, r4, #25
 8015a34:	e7f5      	b.n	8015a22 <_printf_i+0x22e>
 8015a36:	bf00      	nop
 8015a38:	08015e25 	.word	0x08015e25
 8015a3c:	08015e36 	.word	0x08015e36

08015a40 <_sbrk_r>:
 8015a40:	b538      	push	{r3, r4, r5, lr}
 8015a42:	4d06      	ldr	r5, [pc, #24]	; (8015a5c <_sbrk_r+0x1c>)
 8015a44:	2300      	movs	r3, #0
 8015a46:	4604      	mov	r4, r0
 8015a48:	4608      	mov	r0, r1
 8015a4a:	602b      	str	r3, [r5, #0]
 8015a4c:	f7ec f90c 	bl	8001c68 <_sbrk>
 8015a50:	1c43      	adds	r3, r0, #1
 8015a52:	d102      	bne.n	8015a5a <_sbrk_r+0x1a>
 8015a54:	682b      	ldr	r3, [r5, #0]
 8015a56:	b103      	cbz	r3, 8015a5a <_sbrk_r+0x1a>
 8015a58:	6023      	str	r3, [r4, #0]
 8015a5a:	bd38      	pop	{r3, r4, r5, pc}
 8015a5c:	200073fc 	.word	0x200073fc

08015a60 <__sread>:
 8015a60:	b510      	push	{r4, lr}
 8015a62:	460c      	mov	r4, r1
 8015a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a68:	f000 f8a0 	bl	8015bac <_read_r>
 8015a6c:	2800      	cmp	r0, #0
 8015a6e:	bfab      	itete	ge
 8015a70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015a72:	89a3      	ldrhlt	r3, [r4, #12]
 8015a74:	181b      	addge	r3, r3, r0
 8015a76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015a7a:	bfac      	ite	ge
 8015a7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8015a7e:	81a3      	strhlt	r3, [r4, #12]
 8015a80:	bd10      	pop	{r4, pc}

08015a82 <__swrite>:
 8015a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a86:	461f      	mov	r7, r3
 8015a88:	898b      	ldrh	r3, [r1, #12]
 8015a8a:	05db      	lsls	r3, r3, #23
 8015a8c:	4605      	mov	r5, r0
 8015a8e:	460c      	mov	r4, r1
 8015a90:	4616      	mov	r6, r2
 8015a92:	d505      	bpl.n	8015aa0 <__swrite+0x1e>
 8015a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a98:	2302      	movs	r3, #2
 8015a9a:	2200      	movs	r2, #0
 8015a9c:	f000 f868 	bl	8015b70 <_lseek_r>
 8015aa0:	89a3      	ldrh	r3, [r4, #12]
 8015aa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015aa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015aaa:	81a3      	strh	r3, [r4, #12]
 8015aac:	4632      	mov	r2, r6
 8015aae:	463b      	mov	r3, r7
 8015ab0:	4628      	mov	r0, r5
 8015ab2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ab6:	f000 b817 	b.w	8015ae8 <_write_r>

08015aba <__sseek>:
 8015aba:	b510      	push	{r4, lr}
 8015abc:	460c      	mov	r4, r1
 8015abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ac2:	f000 f855 	bl	8015b70 <_lseek_r>
 8015ac6:	1c43      	adds	r3, r0, #1
 8015ac8:	89a3      	ldrh	r3, [r4, #12]
 8015aca:	bf15      	itete	ne
 8015acc:	6560      	strne	r0, [r4, #84]	; 0x54
 8015ace:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015ad2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015ad6:	81a3      	strheq	r3, [r4, #12]
 8015ad8:	bf18      	it	ne
 8015ada:	81a3      	strhne	r3, [r4, #12]
 8015adc:	bd10      	pop	{r4, pc}

08015ade <__sclose>:
 8015ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ae2:	f000 b813 	b.w	8015b0c <_close_r>
	...

08015ae8 <_write_r>:
 8015ae8:	b538      	push	{r3, r4, r5, lr}
 8015aea:	4d07      	ldr	r5, [pc, #28]	; (8015b08 <_write_r+0x20>)
 8015aec:	4604      	mov	r4, r0
 8015aee:	4608      	mov	r0, r1
 8015af0:	4611      	mov	r1, r2
 8015af2:	2200      	movs	r2, #0
 8015af4:	602a      	str	r2, [r5, #0]
 8015af6:	461a      	mov	r2, r3
 8015af8:	f7ec f865 	bl	8001bc6 <_write>
 8015afc:	1c43      	adds	r3, r0, #1
 8015afe:	d102      	bne.n	8015b06 <_write_r+0x1e>
 8015b00:	682b      	ldr	r3, [r5, #0]
 8015b02:	b103      	cbz	r3, 8015b06 <_write_r+0x1e>
 8015b04:	6023      	str	r3, [r4, #0]
 8015b06:	bd38      	pop	{r3, r4, r5, pc}
 8015b08:	200073fc 	.word	0x200073fc

08015b0c <_close_r>:
 8015b0c:	b538      	push	{r3, r4, r5, lr}
 8015b0e:	4d06      	ldr	r5, [pc, #24]	; (8015b28 <_close_r+0x1c>)
 8015b10:	2300      	movs	r3, #0
 8015b12:	4604      	mov	r4, r0
 8015b14:	4608      	mov	r0, r1
 8015b16:	602b      	str	r3, [r5, #0]
 8015b18:	f7ec f871 	bl	8001bfe <_close>
 8015b1c:	1c43      	adds	r3, r0, #1
 8015b1e:	d102      	bne.n	8015b26 <_close_r+0x1a>
 8015b20:	682b      	ldr	r3, [r5, #0]
 8015b22:	b103      	cbz	r3, 8015b26 <_close_r+0x1a>
 8015b24:	6023      	str	r3, [r4, #0]
 8015b26:	bd38      	pop	{r3, r4, r5, pc}
 8015b28:	200073fc 	.word	0x200073fc

08015b2c <_fstat_r>:
 8015b2c:	b538      	push	{r3, r4, r5, lr}
 8015b2e:	4d07      	ldr	r5, [pc, #28]	; (8015b4c <_fstat_r+0x20>)
 8015b30:	2300      	movs	r3, #0
 8015b32:	4604      	mov	r4, r0
 8015b34:	4608      	mov	r0, r1
 8015b36:	4611      	mov	r1, r2
 8015b38:	602b      	str	r3, [r5, #0]
 8015b3a:	f7ec f86c 	bl	8001c16 <_fstat>
 8015b3e:	1c43      	adds	r3, r0, #1
 8015b40:	d102      	bne.n	8015b48 <_fstat_r+0x1c>
 8015b42:	682b      	ldr	r3, [r5, #0]
 8015b44:	b103      	cbz	r3, 8015b48 <_fstat_r+0x1c>
 8015b46:	6023      	str	r3, [r4, #0]
 8015b48:	bd38      	pop	{r3, r4, r5, pc}
 8015b4a:	bf00      	nop
 8015b4c:	200073fc 	.word	0x200073fc

08015b50 <_isatty_r>:
 8015b50:	b538      	push	{r3, r4, r5, lr}
 8015b52:	4d06      	ldr	r5, [pc, #24]	; (8015b6c <_isatty_r+0x1c>)
 8015b54:	2300      	movs	r3, #0
 8015b56:	4604      	mov	r4, r0
 8015b58:	4608      	mov	r0, r1
 8015b5a:	602b      	str	r3, [r5, #0]
 8015b5c:	f7ec f86b 	bl	8001c36 <_isatty>
 8015b60:	1c43      	adds	r3, r0, #1
 8015b62:	d102      	bne.n	8015b6a <_isatty_r+0x1a>
 8015b64:	682b      	ldr	r3, [r5, #0]
 8015b66:	b103      	cbz	r3, 8015b6a <_isatty_r+0x1a>
 8015b68:	6023      	str	r3, [r4, #0]
 8015b6a:	bd38      	pop	{r3, r4, r5, pc}
 8015b6c:	200073fc 	.word	0x200073fc

08015b70 <_lseek_r>:
 8015b70:	b538      	push	{r3, r4, r5, lr}
 8015b72:	4d07      	ldr	r5, [pc, #28]	; (8015b90 <_lseek_r+0x20>)
 8015b74:	4604      	mov	r4, r0
 8015b76:	4608      	mov	r0, r1
 8015b78:	4611      	mov	r1, r2
 8015b7a:	2200      	movs	r2, #0
 8015b7c:	602a      	str	r2, [r5, #0]
 8015b7e:	461a      	mov	r2, r3
 8015b80:	f7ec f864 	bl	8001c4c <_lseek>
 8015b84:	1c43      	adds	r3, r0, #1
 8015b86:	d102      	bne.n	8015b8e <_lseek_r+0x1e>
 8015b88:	682b      	ldr	r3, [r5, #0]
 8015b8a:	b103      	cbz	r3, 8015b8e <_lseek_r+0x1e>
 8015b8c:	6023      	str	r3, [r4, #0]
 8015b8e:	bd38      	pop	{r3, r4, r5, pc}
 8015b90:	200073fc 	.word	0x200073fc

08015b94 <__malloc_lock>:
 8015b94:	4801      	ldr	r0, [pc, #4]	; (8015b9c <__malloc_lock+0x8>)
 8015b96:	f7ff bb55 	b.w	8015244 <__retarget_lock_acquire_recursive>
 8015b9a:	bf00      	nop
 8015b9c:	200073f4 	.word	0x200073f4

08015ba0 <__malloc_unlock>:
 8015ba0:	4801      	ldr	r0, [pc, #4]	; (8015ba8 <__malloc_unlock+0x8>)
 8015ba2:	f7ff bb50 	b.w	8015246 <__retarget_lock_release_recursive>
 8015ba6:	bf00      	nop
 8015ba8:	200073f4 	.word	0x200073f4

08015bac <_read_r>:
 8015bac:	b538      	push	{r3, r4, r5, lr}
 8015bae:	4d07      	ldr	r5, [pc, #28]	; (8015bcc <_read_r+0x20>)
 8015bb0:	4604      	mov	r4, r0
 8015bb2:	4608      	mov	r0, r1
 8015bb4:	4611      	mov	r1, r2
 8015bb6:	2200      	movs	r2, #0
 8015bb8:	602a      	str	r2, [r5, #0]
 8015bba:	461a      	mov	r2, r3
 8015bbc:	f7eb ffe6 	bl	8001b8c <_read>
 8015bc0:	1c43      	adds	r3, r0, #1
 8015bc2:	d102      	bne.n	8015bca <_read_r+0x1e>
 8015bc4:	682b      	ldr	r3, [r5, #0]
 8015bc6:	b103      	cbz	r3, 8015bca <_read_r+0x1e>
 8015bc8:	6023      	str	r3, [r4, #0]
 8015bca:	bd38      	pop	{r3, r4, r5, pc}
 8015bcc:	200073fc 	.word	0x200073fc

08015bd0 <_init>:
 8015bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bd2:	bf00      	nop
 8015bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015bd6:	bc08      	pop	{r3}
 8015bd8:	469e      	mov	lr, r3
 8015bda:	4770      	bx	lr

08015bdc <_fini>:
 8015bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bde:	bf00      	nop
 8015be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015be2:	bc08      	pop	{r3}
 8015be4:	469e      	mov	lr, r3
 8015be6:	4770      	bx	lr
