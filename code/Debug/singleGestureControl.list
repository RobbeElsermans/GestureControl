
singleGestureControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015f98  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08016138  08016138  00026138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080163b8  080163b8  000300ec  2**0
                  CONTENTS
  4 .ARM          00000008  080163b8  080163b8  000263b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080163c0  080163c0  000300ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080163c0  080163c0  000263c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080163c4  080163c4  000263c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  080163c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000073f0  200000f0  080164b4  000300f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200074e0  080164b4  000374e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006b6db  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006243  00000000  00000000  0009b7f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb8  00000000  00000000  000a1a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001da8  00000000  00000000  000a39f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002171c  00000000  00000000  000a57a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b2b5  00000000  00000000  000c6ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0252  00000000  00000000  000f2171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b23c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f98  00000000  00000000  001b2418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f0 	.word	0x200000f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08016120 	.word	0x08016120

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f4 	.word	0x200000f4
 80001dc:	08016120 	.word	0x08016120

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_ldivmod>:
 8000280:	b97b      	cbnz	r3, 80002a2 <__aeabi_ldivmod+0x22>
 8000282:	b972      	cbnz	r2, 80002a2 <__aeabi_ldivmod+0x22>
 8000284:	2900      	cmp	r1, #0
 8000286:	bfbe      	ittt	lt
 8000288:	2000      	movlt	r0, #0
 800028a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800028e:	e006      	blt.n	800029e <__aeabi_ldivmod+0x1e>
 8000290:	bf08      	it	eq
 8000292:	2800      	cmpeq	r0, #0
 8000294:	bf1c      	itt	ne
 8000296:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800029a:	f04f 30ff 	movne.w	r0, #4294967295
 800029e:	f000 b9b9 	b.w	8000614 <__aeabi_idiv0>
 80002a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002aa:	2900      	cmp	r1, #0
 80002ac:	db09      	blt.n	80002c2 <__aeabi_ldivmod+0x42>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db1a      	blt.n	80002e8 <__aeabi_ldivmod+0x68>
 80002b2:	f000 f84d 	bl	8000350 <__udivmoddi4>
 80002b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002be:	b004      	add	sp, #16
 80002c0:	4770      	bx	lr
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db1b      	blt.n	8000304 <__aeabi_ldivmod+0x84>
 80002cc:	f000 f840 	bl	8000350 <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	4252      	negs	r2, r2
 80002e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e6:	4770      	bx	lr
 80002e8:	4252      	negs	r2, r2
 80002ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ee:	f000 f82f 	bl	8000350 <__udivmoddi4>
 80002f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fa:	b004      	add	sp, #16
 80002fc:	4240      	negs	r0, r0
 80002fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000302:	4770      	bx	lr
 8000304:	4252      	negs	r2, r2
 8000306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030a:	f000 f821 	bl	8000350 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b96e 	b.w	8000614 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468c      	mov	ip, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8083 	bne.w	8000466 <__udivmoddi4+0x116>
 8000360:	428a      	cmp	r2, r1
 8000362:	4617      	mov	r7, r2
 8000364:	d947      	bls.n	80003f6 <__udivmoddi4+0xa6>
 8000366:	fab2 f282 	clz	r2, r2
 800036a:	b142      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036c:	f1c2 0020 	rsb	r0, r2, #32
 8000370:	fa24 f000 	lsr.w	r0, r4, r0
 8000374:	4091      	lsls	r1, r2
 8000376:	4097      	lsls	r7, r2
 8000378:	ea40 0c01 	orr.w	ip, r0, r1
 800037c:	4094      	lsls	r4, r2
 800037e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	fbbc f6f8 	udiv	r6, ip, r8
 8000388:	fa1f fe87 	uxth.w	lr, r7
 800038c:	fb08 c116 	mls	r1, r8, r6, ip
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f10e 	mul.w	r1, r6, lr
 8000398:	4299      	cmp	r1, r3
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x60>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a2:	f080 8119 	bcs.w	80005d8 <__udivmoddi4+0x288>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 8116 	bls.w	80005d8 <__udivmoddi4+0x288>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	443b      	add	r3, r7
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ce:	f080 8105 	bcs.w	80005dc <__udivmoddi4+0x28c>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	f240 8102 	bls.w	80005dc <__udivmoddi4+0x28c>
 80003d8:	3802      	subs	r0, #2
 80003da:	443c      	add	r4, r7
 80003dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	2600      	movs	r6, #0
 80003e6:	b11d      	cbz	r5, 80003f0 <__udivmoddi4+0xa0>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c5 4300 	strd	r4, r3, [r5]
 80003f0:	4631      	mov	r1, r6
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	b902      	cbnz	r2, 80003fa <__udivmoddi4+0xaa>
 80003f8:	deff      	udf	#255	; 0xff
 80003fa:	fab2 f282 	clz	r2, r2
 80003fe:	2a00      	cmp	r2, #0
 8000400:	d150      	bne.n	80004a4 <__udivmoddi4+0x154>
 8000402:	1bcb      	subs	r3, r1, r7
 8000404:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000408:	fa1f f887 	uxth.w	r8, r7
 800040c:	2601      	movs	r6, #1
 800040e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000412:	0c21      	lsrs	r1, r4, #16
 8000414:	fb0e 331c 	mls	r3, lr, ip, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb08 f30c 	mul.w	r3, r8, ip
 8000420:	428b      	cmp	r3, r1
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0xe4>
 8000424:	1879      	adds	r1, r7, r1
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0xe2>
 800042c:	428b      	cmp	r3, r1
 800042e:	f200 80e9 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 8000432:	4684      	mov	ip, r0
 8000434:	1ac9      	subs	r1, r1, r3
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000440:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x10c>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x10a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80d9 	bhi.w	800060c <__udivmoddi4+0x2bc>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e7bf      	b.n	80003e6 <__udivmoddi4+0x96>
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x12e>
 800046a:	2d00      	cmp	r5, #0
 800046c:	f000 80b1 	beq.w	80005d2 <__udivmoddi4+0x282>
 8000470:	2600      	movs	r6, #0
 8000472:	e9c5 0100 	strd	r0, r1, [r5]
 8000476:	4630      	mov	r0, r6
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f683 	clz	r6, r3
 8000482:	2e00      	cmp	r6, #0
 8000484:	d14a      	bne.n	800051c <__udivmoddi4+0x1cc>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0x140>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80b8 	bhi.w	8000600 <__udivmoddi4+0x2b0>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0103 	sbc.w	r1, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	468c      	mov	ip, r1
 800049a:	2d00      	cmp	r5, #0
 800049c:	d0a8      	beq.n	80003f0 <__udivmoddi4+0xa0>
 800049e:	e9c5 4c00 	strd	r4, ip, [r5]
 80004a2:	e7a5      	b.n	80003f0 <__udivmoddi4+0xa0>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f603 	lsr.w	r6, r0, r3
 80004ac:	4097      	lsls	r7, r2
 80004ae:	fa01 f002 	lsl.w	r0, r1, r2
 80004b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b6:	40d9      	lsrs	r1, r3
 80004b8:	4330      	orrs	r0, r6
 80004ba:	0c03      	lsrs	r3, r0, #16
 80004bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80004c0:	fa1f f887 	uxth.w	r8, r7
 80004c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb06 f108 	mul.w	r1, r6, r8
 80004d0:	4299      	cmp	r1, r3
 80004d2:	fa04 f402 	lsl.w	r4, r4, r2
 80004d6:	d909      	bls.n	80004ec <__udivmoddi4+0x19c>
 80004d8:	18fb      	adds	r3, r7, r3
 80004da:	f106 3cff 	add.w	ip, r6, #4294967295
 80004de:	f080 808d 	bcs.w	80005fc <__udivmoddi4+0x2ac>
 80004e2:	4299      	cmp	r1, r3
 80004e4:	f240 808a 	bls.w	80005fc <__udivmoddi4+0x2ac>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	443b      	add	r3, r7
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b281      	uxth	r1, r0
 80004f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fc:	fb00 f308 	mul.w	r3, r0, r8
 8000500:	428b      	cmp	r3, r1
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x1c4>
 8000504:	1879      	adds	r1, r7, r1
 8000506:	f100 3cff 	add.w	ip, r0, #4294967295
 800050a:	d273      	bcs.n	80005f4 <__udivmoddi4+0x2a4>
 800050c:	428b      	cmp	r3, r1
 800050e:	d971      	bls.n	80005f4 <__udivmoddi4+0x2a4>
 8000510:	3802      	subs	r0, #2
 8000512:	4439      	add	r1, r7
 8000514:	1acb      	subs	r3, r1, r3
 8000516:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800051a:	e778      	b.n	800040e <__udivmoddi4+0xbe>
 800051c:	f1c6 0c20 	rsb	ip, r6, #32
 8000520:	fa03 f406 	lsl.w	r4, r3, r6
 8000524:	fa22 f30c 	lsr.w	r3, r2, ip
 8000528:	431c      	orrs	r4, r3
 800052a:	fa20 f70c 	lsr.w	r7, r0, ip
 800052e:	fa01 f306 	lsl.w	r3, r1, r6
 8000532:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000536:	fa21 f10c 	lsr.w	r1, r1, ip
 800053a:	431f      	orrs	r7, r3
 800053c:	0c3b      	lsrs	r3, r7, #16
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fa1f f884 	uxth.w	r8, r4
 8000546:	fb0e 1119 	mls	r1, lr, r9, r1
 800054a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800054e:	fb09 fa08 	mul.w	sl, r9, r8
 8000552:	458a      	cmp	sl, r1
 8000554:	fa02 f206 	lsl.w	r2, r2, r6
 8000558:	fa00 f306 	lsl.w	r3, r0, r6
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x220>
 800055e:	1861      	adds	r1, r4, r1
 8000560:	f109 30ff 	add.w	r0, r9, #4294967295
 8000564:	d248      	bcs.n	80005f8 <__udivmoddi4+0x2a8>
 8000566:	458a      	cmp	sl, r1
 8000568:	d946      	bls.n	80005f8 <__udivmoddi4+0x2a8>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4421      	add	r1, r4
 8000570:	eba1 010a 	sub.w	r1, r1, sl
 8000574:	b2bf      	uxth	r7, r7
 8000576:	fbb1 f0fe 	udiv	r0, r1, lr
 800057a:	fb0e 1110 	mls	r1, lr, r0, r1
 800057e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000582:	fb00 f808 	mul.w	r8, r0, r8
 8000586:	45b8      	cmp	r8, r7
 8000588:	d907      	bls.n	800059a <__udivmoddi4+0x24a>
 800058a:	19e7      	adds	r7, r4, r7
 800058c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000590:	d22e      	bcs.n	80005f0 <__udivmoddi4+0x2a0>
 8000592:	45b8      	cmp	r8, r7
 8000594:	d92c      	bls.n	80005f0 <__udivmoddi4+0x2a0>
 8000596:	3802      	subs	r0, #2
 8000598:	4427      	add	r7, r4
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	eba7 0708 	sub.w	r7, r7, r8
 80005a2:	fba0 8902 	umull	r8, r9, r0, r2
 80005a6:	454f      	cmp	r7, r9
 80005a8:	46c6      	mov	lr, r8
 80005aa:	4649      	mov	r1, r9
 80005ac:	d31a      	bcc.n	80005e4 <__udivmoddi4+0x294>
 80005ae:	d017      	beq.n	80005e0 <__udivmoddi4+0x290>
 80005b0:	b15d      	cbz	r5, 80005ca <__udivmoddi4+0x27a>
 80005b2:	ebb3 020e 	subs.w	r2, r3, lr
 80005b6:	eb67 0701 	sbc.w	r7, r7, r1
 80005ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005be:	40f2      	lsrs	r2, r6
 80005c0:	ea4c 0202 	orr.w	r2, ip, r2
 80005c4:	40f7      	lsrs	r7, r6
 80005c6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ca:	2600      	movs	r6, #0
 80005cc:	4631      	mov	r1, r6
 80005ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e70b      	b.n	80003f0 <__udivmoddi4+0xa0>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0x60>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6fd      	b.n	80003dc <__udivmoddi4+0x8c>
 80005e0:	4543      	cmp	r3, r8
 80005e2:	d2e5      	bcs.n	80005b0 <__udivmoddi4+0x260>
 80005e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005e8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7df      	b.n	80005b0 <__udivmoddi4+0x260>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e7d2      	b.n	800059a <__udivmoddi4+0x24a>
 80005f4:	4660      	mov	r0, ip
 80005f6:	e78d      	b.n	8000514 <__udivmoddi4+0x1c4>
 80005f8:	4681      	mov	r9, r0
 80005fa:	e7b9      	b.n	8000570 <__udivmoddi4+0x220>
 80005fc:	4666      	mov	r6, ip
 80005fe:	e775      	b.n	80004ec <__udivmoddi4+0x19c>
 8000600:	4630      	mov	r0, r6
 8000602:	e74a      	b.n	800049a <__udivmoddi4+0x14a>
 8000604:	f1ac 0c02 	sub.w	ip, ip, #2
 8000608:	4439      	add	r1, r7
 800060a:	e713      	b.n	8000434 <__udivmoddi4+0xe4>
 800060c:	3802      	subs	r0, #2
 800060e:	443c      	add	r4, r7
 8000610:	e724      	b.n	800045c <__udivmoddi4+0x10c>
 8000612:	bf00      	nop

08000614 <__aeabi_idiv0>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <MX_TOF_Init>:
static void getResult(uint8_t sensor, RANGING_SENSOR_Result_t * result);
static long getDistance(uint8_t sensor, RANGING_SENSOR_Result_t * result);
static void objectPresent();

void MX_TOF_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_53L3A2_MultiSensorRanging_Init();
 800061c:	f000 f9e0 	bl	80009e0 <MX_53L3A2_MultiSensorRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}

08000624 <MX_TOF_Process>:

/*
 * LM background task
 */
void MX_TOF_Process(void* _htim3)
{
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	b08b      	sub	sp, #44	; 0x2c
 8000628:	af06      	add	r7, sp, #24
 800062a:	6078      	str	r0, [r7, #4]
	htim3 = *(TIM_HandleTypeDef*)_htim3;
 800062c:	4a5c      	ldr	r2, [pc, #368]	; (80007a0 <MX_TOF_Process+0x17c>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4610      	mov	r0, r2
 8000632:	4619      	mov	r1, r3
 8000634:	2348      	movs	r3, #72	; 0x48
 8000636:	461a      	mov	r2, r3
 8000638:	f014 fd7c 	bl	8015134 <memcpy>
	  //Enkel de 1ste sensor (Center) opstarten
	  /*	Hier zeggen we welk profiel we willen gebruiken
	   * 	bv.
	   *
	   */
	start_sensor(VL53L3A2_DEV_CENTER);
 800063c:	2001      	movs	r0, #1
 800063e:	f000 fa33 	bl	8000aa8 <start_sensor>

  //MX_53L3A2_MultiSensorRanging_Process();

  /* USER CODE BEGIN TOF_Process_PostTreatment */
	while(1){
		HAL_Delay(5);
 8000642:	2005      	movs	r0, #5
 8000644:	f011 fd08 	bl	8012058 <HAL_Delay>
		getResult(VL53L3A2_DEV_CENTER, Result);
 8000648:	4956      	ldr	r1, [pc, #344]	; (80007a4 <MX_TOF_Process+0x180>)
 800064a:	2001      	movs	r0, #1
 800064c:	f000 fa94 	bl	8000b78 <getResult>
		dis1 = getDistance(VL53L3A2_DEV_CENTER, Result);
 8000650:	4954      	ldr	r1, [pc, #336]	; (80007a4 <MX_TOF_Process+0x180>)
 8000652:	2001      	movs	r0, #1
 8000654:	f000 faa6 	bl	8000ba4 <getDistance>
 8000658:	4603      	mov	r3, r0
 800065a:	4a53      	ldr	r2, [pc, #332]	; (80007a8 <MX_TOF_Process+0x184>)
 800065c:	6013      	str	r3, [r2, #0]

		//Het meten van de afstand van 2 buitenste sensoren.
		if(ObjectPresent)
 800065e:	4b53      	ldr	r3, [pc, #332]	; (80007ac <MX_TOF_Process+0x188>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d015      	beq.n	8000692 <MX_TOF_Process+0x6e>
		{
			getResult(VL53L3A2_DEV_LEFT, Result);
 8000666:	494f      	ldr	r1, [pc, #316]	; (80007a4 <MX_TOF_Process+0x180>)
 8000668:	2000      	movs	r0, #0
 800066a:	f000 fa85 	bl	8000b78 <getResult>
			dis0 = getDistance(VL53L3A2_DEV_LEFT, Result);
 800066e:	494d      	ldr	r1, [pc, #308]	; (80007a4 <MX_TOF_Process+0x180>)
 8000670:	2000      	movs	r0, #0
 8000672:	f000 fa97 	bl	8000ba4 <getDistance>
 8000676:	4603      	mov	r3, r0
 8000678:	4a4d      	ldr	r2, [pc, #308]	; (80007b0 <MX_TOF_Process+0x18c>)
 800067a:	6013      	str	r3, [r2, #0]

			getResult(VL53L3A2_DEV_RIGHT, Result);
 800067c:	4949      	ldr	r1, [pc, #292]	; (80007a4 <MX_TOF_Process+0x180>)
 800067e:	2002      	movs	r0, #2
 8000680:	f000 fa7a 	bl	8000b78 <getResult>
			dis2 = getDistance(VL53L3A2_DEV_RIGHT, Result);
 8000684:	4947      	ldr	r1, [pc, #284]	; (80007a4 <MX_TOF_Process+0x180>)
 8000686:	2002      	movs	r0, #2
 8000688:	f000 fa8c 	bl	8000ba4 <getDistance>
 800068c:	4603      	mov	r3, r0
 800068e:	4a49      	ldr	r2, [pc, #292]	; (80007b4 <MX_TOF_Process+0x190>)
 8000690:	6013      	str	r3, [r2, #0]
		}
		//Bug van 1ste meeting dat deze fout is (Een te hoge waarden)
		if(dis1 >= 17760520)
 8000692:	4b45      	ldr	r3, [pc, #276]	; (80007a8 <MX_TOF_Process+0x184>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a48      	ldr	r2, [pc, #288]	; (80007b8 <MX_TOF_Process+0x194>)
 8000698:	4293      	cmp	r3, r2
 800069a:	dd0b      	ble.n	80006b4 <MX_TOF_Process+0x90>
		{
			HAL_Delay(4);
 800069c:	2004      	movs	r0, #4
 800069e:	f011 fcdb 	bl	8012058 <HAL_Delay>
			getResult(VL53L3A2_DEV_CENTER, Result);
 80006a2:	4940      	ldr	r1, [pc, #256]	; (80007a4 <MX_TOF_Process+0x180>)
 80006a4:	2001      	movs	r0, #1
 80006a6:	f000 fa67 	bl	8000b78 <getResult>
			dis1 = (long)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].Distance[0];
 80006aa:	4b3e      	ldr	r3, [pc, #248]	; (80007a4 <MX_TOF_Process+0x180>)
 80006ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b3d      	ldr	r3, [pc, #244]	; (80007a8 <MX_TOF_Process+0x184>)
 80006b2:	601a      	str	r2, [r3, #0]
		}

		//Met afstand een led laten dimmen
		//Op voorwaarde dat de afstand kleiner is dan 500
		if(ObjectPresent && dis0 <=500){
 80006b4:	4b3d      	ldr	r3, [pc, #244]	; (80007ac <MX_TOF_Process+0x188>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d00c      	beq.n	80006d6 <MX_TOF_Process+0xb2>
 80006bc:	4b3c      	ldr	r3, [pc, #240]	; (80007b0 <MX_TOF_Process+0x18c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80006c4:	dc07      	bgt.n	80006d6 <MX_TOF_Process+0xb2>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (dis0*2) + 23);
 80006c6:	4b3a      	ldr	r3, [pc, #232]	; (80007b0 <MX_TOF_Process+0x18c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	f103 0217 	add.w	r2, r3, #23
 80006d0:	4b33      	ldr	r3, [pc, #204]	; (80007a0 <MX_TOF_Process+0x17c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	639a      	str	r2, [r3, #56]	; 0x38
		}

		//ObjectPresent();
		objectPresent();
 80006d6:	f000 f879 	bl	80007cc <objectPresent>

		  //Ticks
		  // long x = HAL_GetTick();
		  //printf("Ticks: %ld ", x);

		if(!ObjectPresent){
 80006da:	4b34      	ldr	r3, [pc, #208]	; (80007ac <MX_TOF_Process+0x188>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	f083 0301 	eor.w	r3, r3, #1
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d010      	beq.n	800070a <MX_TOF_Process+0xe6>
			uint8_t obj1 = (uint8_t)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].NumberOfTargets;
 80006e8:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <MX_TOF_Process+0x180>)
 80006ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ec:	727b      	strb	r3, [r7, #9]
			uint8_t sta1 = (uint8_t)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].Status[0];
 80006ee:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <MX_TOF_Process+0x180>)
 80006f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006f2:	723b      	strb	r3, [r7, #8]
#if DEBUGGING
			printf("center: %5d obj: %1d sta: %2d",dis1,obj1,sta1);
 80006f4:	4b2c      	ldr	r3, [pc, #176]	; (80007a8 <MX_TOF_Process+0x184>)
 80006f6:	6819      	ldr	r1, [r3, #0]
 80006f8:	7a7a      	ldrb	r2, [r7, #9]
 80006fa:	7a3b      	ldrb	r3, [r7, #8]
 80006fc:	482f      	ldr	r0, [pc, #188]	; (80007bc <MX_TOF_Process+0x198>)
 80006fe:	f014 fd2f 	bl	8015160 <iprintf>
			printf("\r\n");
 8000702:	482f      	ldr	r0, [pc, #188]	; (80007c0 <MX_TOF_Process+0x19c>)
 8000704:	f014 fdb2 	bl	801526c <puts>
 8000708:	e03b      	b.n	8000782 <MX_TOF_Process+0x15e>
#endif
		}
		else{
			uint8_t obj0 = (uint8_t)Result[VL53L3A2_DEV_LEFT].ZoneResult[0].NumberOfTargets;
 800070a:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <MX_TOF_Process+0x180>)
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	73fb      	strb	r3, [r7, #15]
			uint8_t obj1 = (uint8_t)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].NumberOfTargets;
 8000710:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <MX_TOF_Process+0x180>)
 8000712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000714:	73bb      	strb	r3, [r7, #14]
			uint8_t obj2 = (uint8_t)Result[VL53L3A2_DEV_RIGHT].ZoneResult[0].NumberOfTargets;
 8000716:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <MX_TOF_Process+0x180>)
 8000718:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800071c:	737b      	strb	r3, [r7, #13]

			uint8_t sta0 = (uint8_t)Result[VL53L3A2_DEV_LEFT].ZoneResult[0].Status[0];
 800071e:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <MX_TOF_Process+0x180>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	733b      	strb	r3, [r7, #12]
			uint8_t sta1 = (uint8_t)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].Status[0];
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_TOF_Process+0x180>)
 8000726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000728:	72fb      	strb	r3, [r7, #11]
			uint8_t sta2 = (uint8_t)Result[VL53L3A2_DEV_RIGHT].ZoneResult[0].Status[0];
 800072a:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <MX_TOF_Process+0x180>)
 800072c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000730:	72bb      	strb	r3, [r7, #10]

#if DEBUGGING
			if(sta0 == sta1 == sta2 == 0){
 8000732:	7b3a      	ldrb	r2, [r7, #12]
 8000734:	7afb      	ldrb	r3, [r7, #11]
 8000736:	429a      	cmp	r2, r3
 8000738:	bf0c      	ite	eq
 800073a:	2301      	moveq	r3, #1
 800073c:	2300      	movne	r3, #0
 800073e:	b2db      	uxtb	r3, r3
 8000740:	461a      	mov	r2, r3
 8000742:	7abb      	ldrb	r3, [r7, #10]
 8000744:	429a      	cmp	r2, r3
 8000746:	d01c      	beq.n	8000782 <MX_TOF_Process+0x15e>
			printf("left: %5d obj: %1d sta: %2d \t center: %5d obj: %1d sta: %2d \t right: %5d obj: %d sta: %2d",dis0,obj0,sta0,dis1,obj1,sta1,dis2,obj2,sta2);
 8000748:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <MX_TOF_Process+0x18c>)
 800074a:	681e      	ldr	r6, [r3, #0]
 800074c:	f897 c00f 	ldrb.w	ip, [r7, #15]
 8000750:	f897 e00c 	ldrb.w	lr, [r7, #12]
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_TOF_Process+0x184>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	7bba      	ldrb	r2, [r7, #14]
 800075a:	7af9      	ldrb	r1, [r7, #11]
 800075c:	4815      	ldr	r0, [pc, #84]	; (80007b4 <MX_TOF_Process+0x190>)
 800075e:	6800      	ldr	r0, [r0, #0]
 8000760:	7b7c      	ldrb	r4, [r7, #13]
 8000762:	7abd      	ldrb	r5, [r7, #10]
 8000764:	9505      	str	r5, [sp, #20]
 8000766:	9404      	str	r4, [sp, #16]
 8000768:	9003      	str	r0, [sp, #12]
 800076a:	9102      	str	r1, [sp, #8]
 800076c:	9201      	str	r2, [sp, #4]
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	4673      	mov	r3, lr
 8000772:	4662      	mov	r2, ip
 8000774:	4631      	mov	r1, r6
 8000776:	4813      	ldr	r0, [pc, #76]	; (80007c4 <MX_TOF_Process+0x1a0>)
 8000778:	f014 fcf2 	bl	8015160 <iprintf>
			printf("\r\n");
 800077c:	4810      	ldr	r0, [pc, #64]	; (80007c0 <MX_TOF_Process+0x19c>)
 800077e:	f014 fd75 	bl	801526c <puts>
			}
#endif
		}

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, ObjectPresent);
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <MX_TOF_Process+0x188>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	461a      	mov	r2, r3
 8000788:	2120      	movs	r1, #32
 800078a:	480f      	ldr	r0, [pc, #60]	; (80007c8 <MX_TOF_Process+0x1a4>)
 800078c:	f011 ffee 	bl	801276c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L_Y_GPIO_Port, L_Y_Pin, ObjectPresent);
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_TOF_Process+0x188>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	461a      	mov	r2, r3
 8000796:	2180      	movs	r1, #128	; 0x80
 8000798:	480b      	ldr	r0, [pc, #44]	; (80007c8 <MX_TOF_Process+0x1a4>)
 800079a:	f011 ffe7 	bl	801276c <HAL_GPIO_WritePin>
		HAL_Delay(5);
 800079e:	e750      	b.n	8000642 <MX_TOF_Process+0x1e>
 80007a0:	20007110 	.word	0x20007110
 80007a4:	20007038 	.word	0x20007038
 80007a8:	20000118 	.word	0x20000118
 80007ac:	20000125 	.word	0x20000125
 80007b0:	20000114 	.word	0x20000114
 80007b4:	2000011c 	.word	0x2000011c
 80007b8:	010f0107 	.word	0x010f0107
 80007bc:	08016150 	.word	0x08016150
 80007c0:	08016170 	.word	0x08016170
 80007c4:	08016174 	.word	0x08016174
 80007c8:	40020000 	.word	0x40020000

080007cc <objectPresent>:
	  }
  /* USER CODE END TOF_Process_PostTreatment */
}

void objectPresent(){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	  /*	als dist1 onder de 1000 mm komt voor 3 seconden, dan is er een object.
			   * 	+ er mag geen foutcode 12 zijn
			   */
			if((dis1 <= maxDistanceObject) && (uint8_t)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].Status[0] == 0	 && !ObjectPresent){
 80007d0:	4b75      	ldr	r3, [pc, #468]	; (80009a8 <objectPresent+0x1dc>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b75      	ldr	r3, [pc, #468]	; (80009ac <objectPresent+0x1e0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	429a      	cmp	r2, r3
 80007da:	dc5a      	bgt.n	8000892 <objectPresent+0xc6>
 80007dc:	4b74      	ldr	r3, [pc, #464]	; (80009b0 <objectPresent+0x1e4>)
 80007de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d155      	bne.n	8000892 <objectPresent+0xc6>
 80007e6:	4b73      	ldr	r3, [pc, #460]	; (80009b4 <objectPresent+0x1e8>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	f083 0301 	eor.w	r3, r3, #1
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d04e      	beq.n	8000892 <objectPresent+0xc6>
				if(!timerMeasurementSet){
 80007f4:	4b70      	ldr	r3, [pc, #448]	; (80009b8 <objectPresent+0x1ec>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	f083 0301 	eor.w	r3, r3, #1
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d017      	beq.n	8000832 <objectPresent+0x66>
					timerMeasurementSet = true;
 8000802:	4b6d      	ldr	r3, [pc, #436]	; (80009b8 <objectPresent+0x1ec>)
 8000804:	2201      	movs	r2, #1
 8000806:	701a      	strb	r2, [r3, #0]
					timerMeasurment = HAL_GetTick();
 8000808:	f011 fc1a 	bl	8012040 <HAL_GetTick>
 800080c:	ee07 0a90 	vmov	s15, r0
 8000810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000814:	4b69      	ldr	r3, [pc, #420]	; (80009bc <objectPresent+0x1f0>)
 8000816:	edc3 7a00 	vstr	s15, [r3]

#if DEBUGGING
					printf("Timer object %d ", timerMeasurementSet);
 800081a:	4b67      	ldr	r3, [pc, #412]	; (80009b8 <objectPresent+0x1ec>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	4619      	mov	r1, r3
 8000820:	4867      	ldr	r0, [pc, #412]	; (80009c0 <objectPresent+0x1f4>)
 8000822:	f014 fc9d 	bl	8015160 <iprintf>
					printf("Timer object is set");
 8000826:	4867      	ldr	r0, [pc, #412]	; (80009c4 <objectPresent+0x1f8>)
 8000828:	f014 fc9a 	bl	8015160 <iprintf>
					printf("\r\n");
 800082c:	4866      	ldr	r0, [pc, #408]	; (80009c8 <objectPresent+0x1fc>)
 800082e:	f014 fd1d 	bl	801526c <puts>
#endif
				}
				if((HAL_GetTick() - timerMeasurment) >= timerMeasurmentTimeout)
 8000832:	f011 fc05 	bl	8012040 <HAL_GetTick>
 8000836:	ee07 0a90 	vmov	s15, r0
 800083a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800083e:	4b5f      	ldr	r3, [pc, #380]	; (80009bc <objectPresent+0x1f0>)
 8000840:	edd3 7a00 	vldr	s15, [r3]
 8000844:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000848:	4b60      	ldr	r3, [pc, #384]	; (80009cc <objectPresent+0x200>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	ee07 3a90 	vmov	s15, r3
 8000850:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000854:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800085c:	db30      	blt.n	80008c0 <objectPresent+0xf4>
				{
					timerMeasurementSet = false;
 800085e:	4b56      	ldr	r3, [pc, #344]	; (80009b8 <objectPresent+0x1ec>)
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]

					//Persoon naderd en staat dicht genoeg
					//Start andere sensoren ook op
					ObjectPresent = true;
 8000864:	4b53      	ldr	r3, [pc, #332]	; (80009b4 <objectPresent+0x1e8>)
 8000866:	2201      	movs	r2, #1
 8000868:	701a      	strb	r2, [r3, #0]
					start_sensor(VL53L3A2_DEV_LEFT);
 800086a:	2000      	movs	r0, #0
 800086c:	f000 f91c 	bl	8000aa8 <start_sensor>
					start_sensor(VL53L3A2_DEV_RIGHT);
 8000870:	2002      	movs	r0, #2
 8000872:	f000 f919 	bl	8000aa8 <start_sensor>

					//PWM timer starten
					HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000876:	2104      	movs	r1, #4
 8000878:	4855      	ldr	r0, [pc, #340]	; (80009d0 <objectPresent+0x204>)
 800087a:	f013 fc35 	bl	80140e8 <HAL_TIM_PWM_Start>

#if DEBUGGING
					printf("Object %d", ObjectPresent);
 800087e:	4b4d      	ldr	r3, [pc, #308]	; (80009b4 <objectPresent+0x1e8>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	4619      	mov	r1, r3
 8000884:	4853      	ldr	r0, [pc, #332]	; (80009d4 <objectPresent+0x208>)
 8000886:	f014 fc6b 	bl	8015160 <iprintf>
					printf("\r\n");
 800088a:	484f      	ldr	r0, [pc, #316]	; (80009c8 <objectPresent+0x1fc>)
 800088c:	f014 fcee 	bl	801526c <puts>
				if((HAL_GetTick() - timerMeasurment) >= timerMeasurmentTimeout)
 8000890:	e016      	b.n	80008c0 <objectPresent+0xf4>
#endif
				}
			}
			else
			{
				if(timerMeasurementSet && !ObjectPresent){
 8000892:	4b49      	ldr	r3, [pc, #292]	; (80009b8 <objectPresent+0x1ec>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d012      	beq.n	80008c0 <objectPresent+0xf4>
 800089a:	4b46      	ldr	r3, [pc, #280]	; (80009b4 <objectPresent+0x1e8>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	f083 0301 	eor.w	r3, r3, #1
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d00b      	beq.n	80008c0 <objectPresent+0xf4>
					timerMeasurementSet = false;
 80008a8:	4b43      	ldr	r3, [pc, #268]	; (80009b8 <objectPresent+0x1ec>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
#if DEBUGGING
					printf("Timer object %d ", timerMeasurementSet);
 80008ae:	4b42      	ldr	r3, [pc, #264]	; (80009b8 <objectPresent+0x1ec>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	4619      	mov	r1, r3
 80008b4:	4842      	ldr	r0, [pc, #264]	; (80009c0 <objectPresent+0x1f4>)
 80008b6:	f014 fc53 	bl	8015160 <iprintf>
					printf("\r\n");
 80008ba:	4843      	ldr	r0, [pc, #268]	; (80009c8 <objectPresent+0x1fc>)
 80008bc:	f014 fcd6 	bl	801526c <puts>
#endif
				}
			}

			if( (dis1 >= maxDistanceObject) && ObjectPresent){
 80008c0:	4b39      	ldr	r3, [pc, #228]	; (80009a8 <objectPresent+0x1dc>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b39      	ldr	r3, [pc, #228]	; (80009ac <objectPresent+0x1e0>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	db55      	blt.n	8000978 <objectPresent+0x1ac>
 80008cc:	4b39      	ldr	r3, [pc, #228]	; (80009b4 <objectPresent+0x1e8>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d051      	beq.n	8000978 <objectPresent+0x1ac>
				if(timerMeasurementSet == false){
 80008d4:	4b38      	ldr	r3, [pc, #224]	; (80009b8 <objectPresent+0x1ec>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	f083 0301 	eor.w	r3, r3, #1
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d017      	beq.n	8000912 <objectPresent+0x146>
					timerMeasurementSet = true;
 80008e2:	4b35      	ldr	r3, [pc, #212]	; (80009b8 <objectPresent+0x1ec>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	701a      	strb	r2, [r3, #0]
					timerMeasurment = HAL_GetTick();
 80008e8:	f011 fbaa 	bl	8012040 <HAL_GetTick>
 80008ec:	ee07 0a90 	vmov	s15, r0
 80008f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008f4:	4b31      	ldr	r3, [pc, #196]	; (80009bc <objectPresent+0x1f0>)
 80008f6:	edc3 7a00 	vstr	s15, [r3]
#if DEBUGGING
					printf("Timer no object %d ", timerMeasurementSet);
 80008fa:	4b2f      	ldr	r3, [pc, #188]	; (80009b8 <objectPresent+0x1ec>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	4619      	mov	r1, r3
 8000900:	4835      	ldr	r0, [pc, #212]	; (80009d8 <objectPresent+0x20c>)
 8000902:	f014 fc2d 	bl	8015160 <iprintf>
					printf("Timer no object is set");
 8000906:	4835      	ldr	r0, [pc, #212]	; (80009dc <objectPresent+0x210>)
 8000908:	f014 fc2a 	bl	8015160 <iprintf>
					printf("\r\n");
 800090c:	482e      	ldr	r0, [pc, #184]	; (80009c8 <objectPresent+0x1fc>)
 800090e:	f014 fcad 	bl	801526c <puts>
#endif
				}

				if((HAL_GetTick() - timerMeasurment) >= timerMeasurmentTimeout)
 8000912:	f011 fb95 	bl	8012040 <HAL_GetTick>
 8000916:	ee07 0a90 	vmov	s15, r0
 800091a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800091e:	4b27      	ldr	r3, [pc, #156]	; (80009bc <objectPresent+0x1f0>)
 8000920:	edd3 7a00 	vldr	s15, [r3]
 8000924:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000928:	4b28      	ldr	r3, [pc, #160]	; (80009cc <objectPresent+0x200>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	ee07 3a90 	vmov	s15, r3
 8000930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000934:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800093c:	db31      	blt.n	80009a2 <objectPresent+0x1d6>
				{
					timerMeasurementSet = false;
 800093e:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <objectPresent+0x1ec>)
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]

					ObjectPresent = false;
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <objectPresent+0x1e8>)
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]
					stop_sensor(VL53L3A2_DEV_LEFT);
 800094a:	2000      	movs	r0, #0
 800094c:	f000 f8ec 	bl	8000b28 <stop_sensor>
					stop_sensor(VL53L3A2_DEV_RIGHT);
 8000950:	2002      	movs	r0, #2
 8000952:	f000 f8e9 	bl	8000b28 <stop_sensor>

					//PWM timer starten
					HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8000956:	2104      	movs	r1, #4
 8000958:	481d      	ldr	r0, [pc, #116]	; (80009d0 <objectPresent+0x204>)
 800095a:	f013 fc75 	bl	8014248 <HAL_TIM_PWM_Stop>

					HAL_Delay(2);
 800095e:	2002      	movs	r0, #2
 8000960:	f011 fb7a 	bl	8012058 <HAL_Delay>
#if DEBUGGING
					printf("Object %d", ObjectPresent);
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <objectPresent+0x1e8>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	481a      	ldr	r0, [pc, #104]	; (80009d4 <objectPresent+0x208>)
 800096c:	f014 fbf8 	bl	8015160 <iprintf>
					printf("\r\n");
 8000970:	4815      	ldr	r0, [pc, #84]	; (80009c8 <objectPresent+0x1fc>)
 8000972:	f014 fc7b 	bl	801526c <puts>
				if((HAL_GetTick() - timerMeasurment) >= timerMeasurmentTimeout)
 8000976:	e014      	b.n	80009a2 <objectPresent+0x1d6>
#endif
				}
			}
			else
			{
				if(timerMeasurementSet && ObjectPresent){
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <objectPresent+0x1ec>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d010      	beq.n	80009a2 <objectPresent+0x1d6>
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <objectPresent+0x1e8>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d00c      	beq.n	80009a2 <objectPresent+0x1d6>
					timerMeasurementSet = false;
 8000988:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <objectPresent+0x1ec>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
#if DEBUGGING
					printf("Timer no object %d ", timerMeasurementSet);
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <objectPresent+0x1ec>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	4619      	mov	r1, r3
 8000994:	4810      	ldr	r0, [pc, #64]	; (80009d8 <objectPresent+0x20c>)
 8000996:	f014 fbe3 	bl	8015160 <iprintf>
					printf("\r\n");
 800099a:	480b      	ldr	r0, [pc, #44]	; (80009c8 <objectPresent+0x1fc>)
 800099c:	f014 fc66 	bl	801526c <puts>
#endif
				}
			}
}
 80009a0:	e7ff      	b.n	80009a2 <objectPresent+0x1d6>
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000118 	.word	0x20000118
 80009ac:	20000000 	.word	0x20000000
 80009b0:	20007038 	.word	0x20007038
 80009b4:	20000125 	.word	0x20000125
 80009b8:	20000124 	.word	0x20000124
 80009bc:	20000120 	.word	0x20000120
 80009c0:	080161d0 	.word	0x080161d0
 80009c4:	080161e4 	.word	0x080161e4
 80009c8:	08016170 	.word	0x08016170
 80009cc:	20000004 	.word	0x20000004
 80009d0:	20007110 	.word	0x20007110
 80009d4:	080161f8 	.word	0x080161f8
 80009d8:	08016204 	.word	0x08016204
 80009dc:	08016218 	.word	0x08016218

080009e0 <MX_53L3A2_MultiSensorRanging_Init>:

static void MX_53L3A2_MultiSensorRanging_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
  uint8_t device;
  uint16_t i2c_addr;
  uint32_t id;

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 80009e6:	2000      	movs	r0, #0
 80009e8:	f000 fc36 	bl	8001258 <BSP_COM_Init>

  printf("53L3A2 Gesture Control\r\n");
 80009ec:	482a      	ldr	r0, [pc, #168]	; (8000a98 <MX_53L3A2_MultiSensorRanging_Init+0xb8>)
 80009ee:	f014 fc3d 	bl	801526c <puts>

  /* put all the devices in shutdown mode */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 80009f2:	2300      	movs	r3, #0
 80009f4:	71fb      	strb	r3, [r7, #7]
 80009f6:	e007      	b.n	8000a08 <MX_53L3A2_MultiSensorRanging_Init+0x28>
  {
    VL53L3A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_OFF);
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	2101      	movs	r1, #1
 80009fc:	4618      	mov	r0, r3
 80009fe:	f001 fa1d 	bl	8001e3c <VL53L3A2_RANGING_SENSOR_SetPowerMode>
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	3301      	adds	r3, #1
 8000a06:	71fb      	strb	r3, [r7, #7]
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	d9f4      	bls.n	80009f8 <MX_53L3A2_MultiSensorRanging_Init+0x18>

  /* power on the devices one at a time, initialize them and change their address.
   * once the address is updated, the communication with the devices is checked
   * reading its ID.
   */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	71fb      	strb	r3, [r7, #7]
 8000a12:	e039      	b.n	8000a88 <MX_53L3A2_MultiSensorRanging_Init+0xa8>
  {
    VL53L3A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_ON);
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	2100      	movs	r1, #0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f001 fa0f 	bl	8001e3c <VL53L3A2_RANGING_SENSOR_SetPowerMode>
    status = VL53L3A2_RANGING_SENSOR_Init(device);
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f001 f8f7 	bl	8001c14 <VL53L3A2_RANGING_SENSOR_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	4a1c      	ldr	r2, [pc, #112]	; (8000a9c <MX_53L3A2_MultiSensorRanging_Init+0xbc>)
 8000a2a:	6013      	str	r3, [r2, #0]

    /* 0: not detected, 1: detected */
    ToF_Present[device] = (status != BSP_ERROR_NONE) ? 0 : 1;
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <MX_53L3A2_MultiSensorRanging_Init+0xbc>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	bf0c      	ite	eq
 8000a34:	2301      	moveq	r3, #1
 8000a36:	2300      	movne	r3, #0
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4a18      	ldr	r2, [pc, #96]	; (8000aa0 <MX_53L3A2_MultiSensorRanging_Init+0xc0>)
 8000a40:	54d1      	strb	r1, [r2, r3]

    /* skip this device if init not successful */
    if (ToF_Present[device] == 0) continue;
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	4a16      	ldr	r2, [pc, #88]	; (8000aa0 <MX_53L3A2_MultiSensorRanging_Init+0xc0>)
 8000a46:	5cd3      	ldrb	r3, [r2, r3]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d019      	beq.n	8000a80 <MX_53L3A2_MultiSensorRanging_Init+0xa0>

    /* left: 0x54, center: 0x56, right: 0x58 */
    i2c_addr = (RANGING_SENSOR_VL53L3CX_ADDRESS + (device + 1) * 2);
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	3329      	adds	r3, #41	; 0x29
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	80bb      	strh	r3, [r7, #4]
    VL53L3A2_RANGING_SENSOR_SetAddress(device, i2c_addr);
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	88ba      	ldrh	r2, [r7, #4]
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f001 f9c3 	bl	8001dec <VL53L3A2_RANGING_SENSOR_SetAddress>

    /* check the communication with the device reading the ID */
    VL53L3A2_RANGING_SENSOR_ReadID(device, &id);
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	463a      	mov	r2, r7
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f001 f8f7 	bl	8001c60 <VL53L3A2_RANGING_SENSOR_ReadID>
#if DEBUGGING
    printf("ToF sensor %d - ID: %04lX\r\n", device, (unsigned long)id);
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	683a      	ldr	r2, [r7, #0]
 8000a76:	4619      	mov	r1, r3
 8000a78:	480a      	ldr	r0, [pc, #40]	; (8000aa4 <MX_53L3A2_MultiSensorRanging_Init+0xc4>)
 8000a7a:	f014 fb71 	bl	8015160 <iprintf>
 8000a7e:	e000      	b.n	8000a82 <MX_53L3A2_MultiSensorRanging_Init+0xa2>
    if (ToF_Present[device] == 0) continue;
 8000a80:	bf00      	nop
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	3301      	adds	r3, #1
 8000a86:	71fb      	strb	r3, [r7, #7]
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	2b02      	cmp	r3, #2
 8000a8c:	d9c2      	bls.n	8000a14 <MX_53L3A2_MultiSensorRanging_Init+0x34>
#endif
  }
}
 8000a8e:	bf00      	nop
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	08016230 	.word	0x08016230
 8000a9c:	2000010c 	.word	0x2000010c
 8000aa0:	20000110 	.word	0x20000110
 8000aa4:	08016248 	.word	0x08016248

08000aa8 <start_sensor>:
  }
  printf ("\r\n");
}
*/

static void start_sensor(uint8_t sensor){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
	RANGING_SENSOR_ProfileConfig_t Profile;

	Profile.RangingProfile = RS_MULTI_TARGET_MEDIUM_RANGE;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	60fb      	str	r3, [r7, #12]
	Profile.TimingBudget = 30; /* 16 ms < TimingBudget < 500 ms */
 8000ab6:	231e      	movs	r3, #30
 8000ab8:	613b      	str	r3, [r7, #16]
	Profile.Frequency = 0; /* not necessary in simple ranging */
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
	Profile.EnableAmbient = 1; /* Enable: 1, Disable: 0 */
 8000abe:	2301      	movs	r3, #1
 8000ac0:	61bb      	str	r3, [r7, #24]
	Profile.EnableSignal = 1; /* Enable: 1, Disable: 0 */
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	61fb      	str	r3, [r7, #28]

	VL53L3A2_RANGING_SENSOR_ConfigProfile(sensor, &Profile);
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	f107 020c 	add.w	r2, r7, #12
 8000acc:	4611      	mov	r1, r2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 f8ee 	bl	8001cb0 <VL53L3A2_RANGING_SENSOR_ConfigProfile>
	status = VL53L3A2_RANGING_SENSOR_Start(sensor, RS_MODE_BLOCKING_CONTINUOUS);
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f001 f939 	bl	8001d50 <VL53L3A2_RANGING_SENSOR_Start>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <start_sensor+0x70>)
 8000ae2:	6013      	str	r3, [r2, #0]
    if (status != BSP_ERROR_NONE)
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <start_sensor+0x70>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d008      	beq.n	8000afe <start_sensor+0x56>
    {
#if DEBUGGING
    	printf("VL53L3A2_RANGING_SENSOR_Start failed for sensor %s \r\n", TofDevStr[sensor]);
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	4a0b      	ldr	r2, [pc, #44]	; (8000b1c <start_sensor+0x74>)
 8000af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af4:	4619      	mov	r1, r3
 8000af6:	480a      	ldr	r0, [pc, #40]	; (8000b20 <start_sensor+0x78>)
 8000af8:	f014 fb32 	bl	8015160 <iprintf>
#endif
		while(1);
 8000afc:	e7fe      	b.n	8000afc <start_sensor+0x54>
    }
    else
	{
#if DEBUGGING
    	printf("sensor %s\t opgestart \r\n", TofDevStr[sensor]);
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	4a06      	ldr	r2, [pc, #24]	; (8000b1c <start_sensor+0x74>)
 8000b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b06:	4619      	mov	r1, r3
 8000b08:	4806      	ldr	r0, [pc, #24]	; (8000b24 <start_sensor+0x7c>)
 8000b0a:	f014 fb29 	bl	8015160 <iprintf>
#endif
	}
}
 8000b0e:	bf00      	nop
 8000b10:	3720      	adds	r7, #32
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	2000010c 	.word	0x2000010c
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	08016264 	.word	0x08016264
 8000b24:	0801629c 	.word	0x0801629c

08000b28 <stop_sensor>:

static void stop_sensor(uint8_t sensor){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
	status = VL53L3A2_RANGING_SENSOR_Stop(sensor);
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f001 f933 	bl	8001da0 <VL53L3A2_RANGING_SENSOR_Stop>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <stop_sensor+0x40>)
 8000b3e:	6013      	str	r3, [r2, #0]
    if (status != BSP_ERROR_NONE)
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <stop_sensor+0x40>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d003      	beq.n	8000b50 <stop_sensor+0x28>
    {
#if DEBUGGING
    	printf("VL53L3A2_RANGING_SENSOR_Stop failed\r\n");
 8000b48:	4808      	ldr	r0, [pc, #32]	; (8000b6c <stop_sensor+0x44>)
 8000b4a:	f014 fb8f 	bl	801526c <puts>
#endif
		while(1);
 8000b4e:	e7fe      	b.n	8000b4e <stop_sensor+0x26>
    }
    else
	{
#if DEBUGGING
    	printf("sensor %s\t afgezet \r\n", TofDevStr[sensor]);
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <stop_sensor+0x48>)
 8000b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4806      	ldr	r0, [pc, #24]	; (8000b74 <stop_sensor+0x4c>)
 8000b5c:	f014 fb00 	bl	8015160 <iprintf>
#endif
	}
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	2000010c 	.word	0x2000010c
 8000b6c:	080162b4 	.word	0x080162b4
 8000b70:	20000008 	.word	0x20000008
 8000b74:	080162dc 	.word	0x080162dc

08000b78 <getResult>:

static void getResult(uint8_t sensor, RANGING_SENSOR_Result_t *result){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	71fb      	strb	r3, [r7, #7]
	VL53L3A2_RANGING_SENSOR_GetDistance(sensor, &result[sensor]);
 8000b84:	79f8      	ldrb	r0, [r7, #7]
 8000b86:	79fa      	ldrb	r2, [r7, #7]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	00db      	lsls	r3, r3, #3
 8000b8c:	4413      	add	r3, r2
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	461a      	mov	r2, r3
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	4413      	add	r3, r2
 8000b96:	4619      	mov	r1, r3
 8000b98:	f001 f8b2 	bl	8001d00 <VL53L3A2_RANGING_SENSOR_GetDistance>
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <getDistance>:

static long getDistance(uint8_t sensor, RANGING_SENSOR_Result_t * result){
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	71fb      	strb	r3, [r7, #7]
	long distance = (long)result[sensor].ZoneResult[0].Distance[0];
 8000bb0:	79fa      	ldrb	r2, [r7, #7]
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	00db      	lsls	r3, r3, #3
 8000bb6:	4413      	add	r3, r2
 8000bb8:	00db      	lsls	r3, r3, #3
 8000bba:	461a      	mov	r2, r3
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	60fb      	str	r3, [r7, #12]
	return distance;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd8:	f011 f9cc 	bl	8011f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bdc:	f000 f816 	bl	8000c0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be0:	f000 f934 	bl	8000e4c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000be4:	f000 f906 	bl	8000df4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000be8:	f000 f8aa 	bl	8000d40 <MX_TIM3_Init>
  MX_I2C3_Init();
 8000bec:	f000 f87a 	bl	8000ce4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  MX_TOF_Init();
 8000bf0:	f7ff fd12 	bl	8000618 <MX_TOF_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Hallo \r\n");
 8000bf4:	4803      	ldr	r0, [pc, #12]	; (8000c04 <main+0x30>)
 8000bf6:	f014 fb39 	bl	801526c <puts>
	  MX_TOF_Process(&htim3);
 8000bfa:	4803      	ldr	r0, [pc, #12]	; (8000c08 <main+0x34>)
 8000bfc:	f7ff fd12 	bl	8000624 <MX_TOF_Process>
	  printf("Hallo \r\n");
 8000c00:	e7f8      	b.n	8000bf4 <main+0x20>
 8000c02:	bf00      	nop
 8000c04:	080162f4 	.word	0x080162f4
 8000c08:	20007110 	.word	0x20007110

08000c0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b094      	sub	sp, #80	; 0x50
 8000c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c12:	f107 0320 	add.w	r3, r7, #32
 8000c16:	2230      	movs	r2, #48	; 0x30
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f014 fa98 	bl	8015150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c30:	2300      	movs	r3, #0
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	4b29      	ldr	r3, [pc, #164]	; (8000cdc <SystemClock_Config+0xd0>)
 8000c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c38:	4a28      	ldr	r2, [pc, #160]	; (8000cdc <SystemClock_Config+0xd0>)
 8000c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c40:	4b26      	ldr	r3, [pc, #152]	; (8000cdc <SystemClock_Config+0xd0>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	4b23      	ldr	r3, [pc, #140]	; (8000ce0 <SystemClock_Config+0xd4>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c58:	4a21      	ldr	r2, [pc, #132]	; (8000ce0 <SystemClock_Config+0xd4>)
 8000c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c5e:	6013      	str	r3, [r2, #0]
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <SystemClock_Config+0xd4>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c70:	2301      	movs	r3, #1
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c74:	2310      	movs	r3, #16
 8000c76:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c80:	2310      	movs	r3, #16
 8000c82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c84:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c88:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c8e:	2307      	movs	r3, #7
 8000c90:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c92:	f107 0320 	add.w	r3, r7, #32
 8000c96:	4618      	mov	r0, r3
 8000c98:	f012 fd62 	bl	8013760 <HAL_RCC_OscConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ca2:	f000 f94d 	bl	8000f40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca6:	230f      	movs	r3, #15
 8000ca8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000caa:	2302      	movs	r3, #2
 8000cac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	2102      	movs	r1, #2
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f012 ffc4 	bl	8013c50 <HAL_RCC_ClockConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000cce:	f000 f937 	bl	8000f40 <Error_Handler>
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	3750      	adds	r7, #80	; 0x50
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40007000 	.word	0x40007000

08000ce4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <MX_I2C3_Init+0x50>)
 8000cea:	4a13      	ldr	r2, [pc, #76]	; (8000d38 <MX_I2C3_Init+0x54>)
 8000cec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <MX_I2C3_Init+0x50>)
 8000cf0:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <MX_I2C3_Init+0x58>)
 8000cf2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_I2C3_Init+0x50>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 36;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <MX_I2C3_Init+0x50>)
 8000cfc:	2224      	movs	r2, #36	; 0x24
 8000cfe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <MX_I2C3_Init+0x50>)
 8000d02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d06:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d08:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <MX_I2C3_Init+0x50>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <MX_I2C3_Init+0x50>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <MX_I2C3_Init+0x50>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <MX_I2C3_Init+0x50>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000d20:	4804      	ldr	r0, [pc, #16]	; (8000d34 <MX_I2C3_Init+0x50>)
 8000d22:	f011 fd3d 	bl	80127a0 <HAL_I2C_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000d2c:	f000 f908 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20007158 	.word	0x20007158
 8000d38:	40005c00 	.word	0x40005c00
 8000d3c:	000186a0 	.word	0x000186a0

08000d40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	; 0x28
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d46:	f107 0320 	add.w	r3, r7, #32
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
 8000d5c:	611a      	str	r2, [r3, #16]
 8000d5e:	615a      	str	r2, [r3, #20]
 8000d60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d62:	4b22      	ldr	r3, [pc, #136]	; (8000dec <MX_TIM3_Init+0xac>)
 8000d64:	4a22      	ldr	r2, [pc, #136]	; (8000df0 <MX_TIM3_Init+0xb0>)
 8000d66:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d68:	4b20      	ldr	r3, [pc, #128]	; (8000dec <MX_TIM3_Init+0xac>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6e:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <MX_TIM3_Init+0xac>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1023;
 8000d74:	4b1d      	ldr	r3, [pc, #116]	; (8000dec <MX_TIM3_Init+0xac>)
 8000d76:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000d7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <MX_TIM3_Init+0xac>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d82:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <MX_TIM3_Init+0xac>)
 8000d84:	2280      	movs	r2, #128	; 0x80
 8000d86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d88:	4818      	ldr	r0, [pc, #96]	; (8000dec <MX_TIM3_Init+0xac>)
 8000d8a:	f013 f95d 	bl	8014048 <HAL_TIM_PWM_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000d94:	f000 f8d4 	bl	8000f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000da0:	f107 0320 	add.w	r3, r7, #32
 8000da4:	4619      	mov	r1, r3
 8000da6:	4811      	ldr	r0, [pc, #68]	; (8000dec <MX_TIM3_Init+0xac>)
 8000da8:	f013 fda6 	bl	80148f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000db2:	f000 f8c5 	bl	8000f40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000db6:	2360      	movs	r3, #96	; 0x60
 8000db8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	2204      	movs	r2, #4
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4807      	ldr	r0, [pc, #28]	; (8000dec <MX_TIM3_Init+0xac>)
 8000dce:	f013 fa9f 	bl	8014310 <HAL_TIM_PWM_ConfigChannel>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000dd8:	f000 f8b2 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ddc:	4803      	ldr	r0, [pc, #12]	; (8000dec <MX_TIM3_Init+0xac>)
 8000dde:	f000 f98f 	bl	8001100 <HAL_TIM_MspPostInit>

}
 8000de2:	bf00      	nop
 8000de4:	3728      	adds	r7, #40	; 0x28
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20007110 	.word	0x20007110
 8000df0:	40000400 	.word	0x40000400

08000df4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <MX_USART2_UART_Init+0x50>)
 8000dfa:	4a13      	ldr	r2, [pc, #76]	; (8000e48 <MX_USART2_UART_Init+0x54>)
 8000dfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <MX_USART2_UART_Init+0x50>)
 8000e00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e06:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <MX_USART2_UART_Init+0x50>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e0c:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <MX_USART2_UART_Init+0x50>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <MX_USART2_UART_Init+0x50>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e18:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <MX_USART2_UART_Init+0x50>)
 8000e1a:	220c      	movs	r2, #12
 8000e1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <MX_USART2_UART_Init+0x50>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e24:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <MX_USART2_UART_Init+0x50>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
  if (HAL_MultiProcessor_Init(&huart2, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4805      	ldr	r0, [pc, #20]	; (8000e44 <MX_USART2_UART_Init+0x50>)
 8000e30:	f013 fe1d 	bl	8014a6e <HAL_MultiProcessor_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8000e3a:	f000 f881 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20007244 	.word	0x20007244
 8000e48:	40004400 	.word	0x40004400

08000e4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	; 0x28
 8000e50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	4b33      	ldr	r3, [pc, #204]	; (8000f34 <MX_GPIO_Init+0xe8>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a32      	ldr	r2, [pc, #200]	; (8000f34 <MX_GPIO_Init+0xe8>)
 8000e6c:	f043 0304 	orr.w	r3, r3, #4
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b30      	ldr	r3, [pc, #192]	; (8000f34 <MX_GPIO_Init+0xe8>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0304 	and.w	r3, r3, #4
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	4b2c      	ldr	r3, [pc, #176]	; (8000f34 <MX_GPIO_Init+0xe8>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a2b      	ldr	r2, [pc, #172]	; (8000f34 <MX_GPIO_Init+0xe8>)
 8000e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b29      	ldr	r3, [pc, #164]	; (8000f34 <MX_GPIO_Init+0xe8>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	4b25      	ldr	r3, [pc, #148]	; (8000f34 <MX_GPIO_Init+0xe8>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a24      	ldr	r2, [pc, #144]	; (8000f34 <MX_GPIO_Init+0xe8>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <MX_GPIO_Init+0xe8>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <MX_GPIO_Init+0xe8>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a1d      	ldr	r2, [pc, #116]	; (8000f34 <MX_GPIO_Init+0xe8>)
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <MX_GPIO_Init+0xe8>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2120      	movs	r1, #32
 8000ed6:	4818      	ldr	r0, [pc, #96]	; (8000f38 <MX_GPIO_Init+0xec>)
 8000ed8:	f011 fc48 	bl	801276c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000edc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ee0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ee2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ee6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4812      	ldr	r0, [pc, #72]	; (8000f3c <MX_GPIO_Init+0xf0>)
 8000ef4:	f011 f9ba 	bl	801226c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ef8:	2320      	movs	r3, #32
 8000efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	480a      	ldr	r0, [pc, #40]	; (8000f38 <MX_GPIO_Init+0xec>)
 8000f10:	f011 f9ac 	bl	801226c <HAL_GPIO_Init>

  /*Configure GPIO pin : L_Y_Pin */
  GPIO_InitStruct.Pin = L_Y_Pin;
 8000f14:	2380      	movs	r3, #128	; 0x80
 8000f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L_Y_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	4619      	mov	r1, r3
 8000f26:	4804      	ldr	r0, [pc, #16]	; (8000f38 <MX_GPIO_Init+0xec>)
 8000f28:	f011 f9a0 	bl	801226c <HAL_GPIO_Init>

}
 8000f2c:	bf00      	nop
 8000f2e:	3728      	adds	r7, #40	; 0x28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40020000 	.word	0x40020000
 8000f3c:	40020800 	.word	0x40020800

08000f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f44:	b672      	cpsid	i
}
 8000f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <Error_Handler+0x8>
	...

08000f4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	4a0f      	ldr	r2, [pc, #60]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f60:	6453      	str	r3, [r2, #68]	; 0x44
 8000f62:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	603b      	str	r3, [r7, #0]
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	4a08      	ldr	r2, [pc, #32]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f8a:	2007      	movs	r0, #7
 8000f8c:	f011 f93a 	bl	8012204 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40023800 	.word	0x40023800

08000f9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a29      	ldr	r2, [pc, #164]	; (8001060 <HAL_I2C_MspInit+0xc4>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d14b      	bne.n	8001056 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	4b28      	ldr	r3, [pc, #160]	; (8001064 <HAL_I2C_MspInit+0xc8>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a27      	ldr	r2, [pc, #156]	; (8001064 <HAL_I2C_MspInit+0xc8>)
 8000fc8:	f043 0304 	orr.w	r3, r3, #4
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b25      	ldr	r3, [pc, #148]	; (8001064 <HAL_I2C_MspInit+0xc8>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0304 	and.w	r3, r3, #4
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b21      	ldr	r3, [pc, #132]	; (8001064 <HAL_I2C_MspInit+0xc8>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a20      	ldr	r2, [pc, #128]	; (8001064 <HAL_I2C_MspInit+0xc8>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <HAL_I2C_MspInit+0xc8>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ff6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ffc:	2312      	movs	r3, #18
 8000ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001008:	2304      	movs	r3, #4
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4619      	mov	r1, r3
 8001012:	4815      	ldr	r0, [pc, #84]	; (8001068 <HAL_I2C_MspInit+0xcc>)
 8001014:	f011 f92a 	bl	801226c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001018:	f44f 7380 	mov.w	r3, #256	; 0x100
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800101e:	2312      	movs	r3, #18
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800102a:	2304      	movs	r3, #4
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	480d      	ldr	r0, [pc, #52]	; (800106c <HAL_I2C_MspInit+0xd0>)
 8001036:	f011 f919 	bl	801226c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <HAL_I2C_MspInit+0xc8>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	4a08      	ldr	r2, [pc, #32]	; (8001064 <HAL_I2C_MspInit+0xc8>)
 8001044:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001048:	6413      	str	r3, [r2, #64]	; 0x40
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_I2C_MspInit+0xc8>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001056:	bf00      	nop
 8001058:	3728      	adds	r7, #40	; 0x28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40005c00 	.word	0x40005c00
 8001064:	40023800 	.word	0x40023800
 8001068:	40020800 	.word	0x40020800
 800106c:	40020000 	.word	0x40020000

08001070 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <HAL_I2C_MspDeInit+0x3c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d10f      	bne.n	80010a2 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_I2C_MspDeInit+0x40>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <HAL_I2C_MspDeInit+0x40>)
 8001088:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800108c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 800108e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001092:	4808      	ldr	r0, [pc, #32]	; (80010b4 <HAL_I2C_MspDeInit+0x44>)
 8001094:	f011 fa6e 	bl	8012574 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8001098:	f44f 7180 	mov.w	r1, #256	; 0x100
 800109c:	4806      	ldr	r0, [pc, #24]	; (80010b8 <HAL_I2C_MspDeInit+0x48>)
 800109e:	f011 fa69 	bl	8012574 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40005c00 	.word	0x40005c00
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40020800 	.word	0x40020800
 80010b8:	40020000 	.word	0x40020000

080010bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d10d      	bne.n	80010ea <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_TIM_PWM_MspInit+0x40>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	4a09      	ldr	r2, [pc, #36]	; (80010fc <HAL_TIM_PWM_MspInit+0x40>)
 80010d8:	f043 0302 	orr.w	r3, r3, #2
 80010dc:	6413      	str	r3, [r2, #64]	; 0x40
 80010de:	4b07      	ldr	r3, [pc, #28]	; (80010fc <HAL_TIM_PWM_MspInit+0x40>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010ea:	bf00      	nop
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40000400 	.word	0x40000400
 80010fc:	40023800 	.word	0x40023800

08001100 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a12      	ldr	r2, [pc, #72]	; (8001168 <HAL_TIM_MspPostInit+0x68>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d11d      	bne.n	800115e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <HAL_TIM_MspPostInit+0x6c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a10      	ldr	r2, [pc, #64]	; (800116c <HAL_TIM_MspPostInit+0x6c>)
 800112c:	f043 0304 	orr.w	r3, r3, #4
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <HAL_TIM_MspPostInit+0x6c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800113e:	2380      	movs	r3, #128	; 0x80
 8001140:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800114e:	2302      	movs	r3, #2
 8001150:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	4619      	mov	r1, r3
 8001158:	4805      	ldr	r0, [pc, #20]	; (8001170 <HAL_TIM_MspPostInit+0x70>)
 800115a:	f011 f887 	bl	801226c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800115e:	bf00      	nop
 8001160:	3720      	adds	r7, #32
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40000400 	.word	0x40000400
 800116c:	40023800 	.word	0x40023800
 8001170:	40020800 	.word	0x40020800

08001174 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	; 0x28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a19      	ldr	r2, [pc, #100]	; (80011f8 <HAL_UART_MspInit+0x84>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d12b      	bne.n	80011ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <HAL_UART_MspInit+0x88>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	4a17      	ldr	r2, [pc, #92]	; (80011fc <HAL_UART_MspInit+0x88>)
 80011a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a4:	6413      	str	r3, [r2, #64]	; 0x40
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_UART_MspInit+0x88>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <HAL_UART_MspInit+0x88>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a10      	ldr	r2, [pc, #64]	; (80011fc <HAL_UART_MspInit+0x88>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <HAL_UART_MspInit+0x88>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011ce:	230c      	movs	r3, #12
 80011d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011de:	2307      	movs	r3, #7
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	; (8001200 <HAL_UART_MspInit+0x8c>)
 80011ea:	f011 f83f 	bl	801226c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011ee:	bf00      	nop
 80011f0:	3728      	adds	r7, #40	; 0x28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40004400 	.word	0x40004400
 80011fc:	40023800 	.word	0x40023800
 8001200:	40020000 	.word	0x40020000

08001204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <NMI_Handler+0x4>

0800120a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120e:	e7fe      	b.n	800120e <HardFault_Handler+0x4>

08001210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <MemManage_Handler+0x4>

08001216 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <BusFault_Handler+0x4>

0800121c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <UsageFault_Handler+0x4>

08001222 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001250:	f010 fee2 	bl	8012018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}

08001258 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d903      	bls.n	8001274 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800126c:	f06f 0301 	mvn.w	r3, #1
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	e025      	b.n	80012c0 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	79fa      	ldrb	r2, [r7, #7]
 8001278:	4914      	ldr	r1, [pc, #80]	; (80012cc <BSP_COM_Init+0x74>)
 800127a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800127e:	4814      	ldr	r0, [pc, #80]	; (80012d0 <BSP_COM_Init+0x78>)
 8001280:	4613      	mov	r3, r2
 8001282:	011b      	lsls	r3, r3, #4
 8001284:	4413      	add	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4403      	add	r3, r0
 800128a:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 800128c:	79fa      	ldrb	r2, [r7, #7]
 800128e:	4613      	mov	r3, r2
 8001290:	011b      	lsls	r3, r3, #4
 8001292:	4413      	add	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4a0e      	ldr	r2, [pc, #56]	; (80012d0 <BSP_COM_Init+0x78>)
 8001298:	4413      	add	r3, r2
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f864 	bl	8001368 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 80012a0:	79fa      	ldrb	r2, [r7, #7]
 80012a2:	4613      	mov	r3, r2
 80012a4:	011b      	lsls	r3, r3, #4
 80012a6:	4413      	add	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4a09      	ldr	r2, [pc, #36]	; (80012d0 <BSP_COM_Init+0x78>)
 80012ac:	4413      	add	r3, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f810 	bl	80012d4 <MX_USART2_UART_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d002      	beq.n	80012c0 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80012ba:	f06f 0303 	mvn.w	r3, #3
 80012be:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80012c0:	68fb      	ldr	r3, [r7, #12]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000014 	.word	0x20000014
 80012d0:	20007288 	.word	0x20007288

080012d4 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80012dc:	2300      	movs	r3, #0
 80012de:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a12      	ldr	r2, [pc, #72]	; (800132c <MX_USART2_UART_Init+0x58>)
 80012e4:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012ec:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	220c      	movs	r2, #12
 8001304:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f013 fb5e 	bl	80149d4 <HAL_UART_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001322:	7bfb      	ldrb	r3, [r7, #15]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40004400 	.word	0x40004400

08001330 <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) || (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)) /* For IAR and ARM Compiler 5 and 6*/
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* For IAR and ARM Compiler 5 and 6 */
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <__io_putchar+0x30>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	4613      	mov	r3, r2
 8001340:	011b      	lsls	r3, r3, #4
 8001342:	4413      	add	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4a07      	ldr	r2, [pc, #28]	; (8001364 <__io_putchar+0x34>)
 8001348:	1898      	adds	r0, r3, r2
 800134a:	1d39      	adds	r1, r7, #4
 800134c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001350:	2201      	movs	r2, #1
 8001352:	f013 fbfc 	bl	8014b4e <HAL_UART_Transmit>
  return ch;
 8001356:	687b      	ldr	r3, [r7, #4]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000126 	.word	0x20000126
 8001364:	20007288 	.word	0x20007288

08001368 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08a      	sub	sp, #40	; 0x28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001370:	2300      	movs	r3, #0
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <USART2_MspInit+0x88>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <USART2_MspInit+0x88>)
 800137a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800137e:	6413      	str	r3, [r2, #64]	; 0x40
 8001380:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <USART2_MspInit+0x88>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <USART2_MspInit+0x88>)
 8001392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001394:	4a16      	ldr	r2, [pc, #88]	; (80013f0 <USART2_MspInit+0x88>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	6313      	str	r3, [r2, #48]	; 0x30
 800139c:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <USART2_MspInit+0x88>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 80013a8:	2304      	movs	r3, #4
 80013aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 80013b8:	2307      	movs	r3, #7
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4619      	mov	r1, r3
 80013c2:	480c      	ldr	r0, [pc, #48]	; (80013f4 <USART2_MspInit+0x8c>)
 80013c4:	f010 ff52 	bl	801226c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 80013c8:	2308      	movs	r3, #8
 80013ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 80013d8:	2307      	movs	r3, #7
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4619      	mov	r1, r3
 80013e2:	4804      	ldr	r0, [pc, #16]	; (80013f4 <USART2_MspInit+0x8c>)
 80013e4:	f010 ff42 	bl	801226c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 80013e8:	bf00      	nop
 80013ea:	3728      	adds	r7, #40	; 0x28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40020000 	.word	0x40020000

080013f8 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001402:	4b13      	ldr	r3, [pc, #76]	; (8001450 <BSP_I2C1_Init+0x58>)
 8001404:	4a13      	ldr	r2, [pc, #76]	; (8001454 <BSP_I2C1_Init+0x5c>)
 8001406:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001408:	4b13      	ldr	r3, [pc, #76]	; (8001458 <BSP_I2C1_Init+0x60>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	1c5a      	adds	r2, r3, #1
 800140e:	4912      	ldr	r1, [pc, #72]	; (8001458 <BSP_I2C1_Init+0x60>)
 8001410:	600a      	str	r2, [r1, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d117      	bne.n	8001446 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001416:	480e      	ldr	r0, [pc, #56]	; (8001450 <BSP_I2C1_Init+0x58>)
 8001418:	f011 fe5a 	bl	80130d0 <HAL_I2C_GetState>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d111      	bne.n	8001446 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001422:	480b      	ldr	r0, [pc, #44]	; (8001450 <BSP_I2C1_Init+0x58>)
 8001424:	f000 f8d2 	bl	80015cc <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10b      	bne.n	8001446 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800142e:	4808      	ldr	r0, [pc, #32]	; (8001450 <BSP_I2C1_Init+0x58>)
 8001430:	f000 f898 	bl	8001564 <MX_I2C1_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800143a:	f06f 0307 	mvn.w	r3, #7
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	e001      	b.n	8001446 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001446:	687b      	ldr	r3, [r7, #4]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200071f0 	.word	0x200071f0
 8001454:	40005400 	.word	0x40005400
 8001458:	20000128 	.word	0x20000128

0800145c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001466:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <BSP_I2C1_DeInit+0x48>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d014      	beq.n	8001498 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800146e:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <BSP_I2C1_DeInit+0x48>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	3b01      	subs	r3, #1
 8001474:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <BSP_I2C1_DeInit+0x48>)
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <BSP_I2C1_DeInit+0x48>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d10b      	bne.n	8001498 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001480:	4809      	ldr	r0, [pc, #36]	; (80014a8 <BSP_I2C1_DeInit+0x4c>)
 8001482:	f000 f8ed 	bl	8001660 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001486:	4808      	ldr	r0, [pc, #32]	; (80014a8 <BSP_I2C1_DeInit+0x4c>)
 8001488:	f011 face 	bl	8012a28 <HAL_I2C_DeInit>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d002      	beq.n	8001498 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001492:	f06f 0307 	mvn.w	r3, #7
 8001496:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001498:	687b      	ldr	r3, [r7, #4]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000128 	.word	0x20000128
 80014a8:	200071f0 	.word	0x200071f0

080014ac <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af02      	add	r7, sp, #8
 80014b2:	4603      	mov	r3, r0
 80014b4:	6039      	str	r1, [r7, #0]
 80014b6:	80fb      	strh	r3, [r7, #6]
 80014b8:	4613      	mov	r3, r2
 80014ba:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80014c0:	88bb      	ldrh	r3, [r7, #4]
 80014c2:	88f9      	ldrh	r1, [r7, #6]
 80014c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014c8:	9200      	str	r2, [sp, #0]
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	480b      	ldr	r0, [pc, #44]	; (80014fc <BSP_I2C1_Send+0x50>)
 80014ce:	f011 fadb 	bl	8012a88 <HAL_I2C_Master_Transmit>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00c      	beq.n	80014f2 <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80014d8:	4808      	ldr	r0, [pc, #32]	; (80014fc <BSP_I2C1_Send+0x50>)
 80014da:	f011 fe07 	bl	80130ec <HAL_I2C_GetError>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	d003      	beq.n	80014ec <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80014e4:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	e002      	b.n	80014f2 <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80014ec:	f06f 0303 	mvn.w	r3, #3
 80014f0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80014f2:	68fb      	ldr	r3, [r7, #12]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	200071f0 	.word	0x200071f0

08001500 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af02      	add	r7, sp, #8
 8001506:	4603      	mov	r3, r0
 8001508:	6039      	str	r1, [r7, #0]
 800150a:	80fb      	strh	r3, [r7, #6]
 800150c:	4613      	mov	r3, r2
 800150e:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001514:	88bb      	ldrh	r3, [r7, #4]
 8001516:	88f9      	ldrh	r1, [r7, #6]
 8001518:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800151c:	9200      	str	r2, [sp, #0]
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	480b      	ldr	r0, [pc, #44]	; (8001550 <BSP_I2C1_Recv+0x50>)
 8001522:	f011 fbaf 	bl	8012c84 <HAL_I2C_Master_Receive>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d00c      	beq.n	8001546 <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 800152c:	4808      	ldr	r0, [pc, #32]	; (8001550 <BSP_I2C1_Recv+0x50>)
 800152e:	f011 fddd 	bl	80130ec <HAL_I2C_GetError>
 8001532:	4603      	mov	r3, r0
 8001534:	2b04      	cmp	r3, #4
 8001536:	d003      	beq.n	8001540 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001538:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	e002      	b.n	8001546 <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001540:	f06f 0303 	mvn.w	r3, #3
 8001544:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8001546:	68fb      	ldr	r3, [r7, #12]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	200071f0 	.word	0x200071f0

08001554 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001558:	f010 fd72 	bl	8012040 <HAL_GetTick>
 800155c:	4603      	mov	r3, r0
}
 800155e:	4618      	mov	r0, r3
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a14      	ldr	r2, [pc, #80]	; (80015c4 <MX_I2C1_Init+0x60>)
 8001574:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <MX_I2C1_Init+0x64>)
 800157a:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800158e:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f011 f8f9 	bl	80127a0 <HAL_I2C_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40005400 	.word	0x40005400
 80015c8:	000186a0 	.word	0x000186a0

080015cc <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	; 0x28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d4:	2300      	movs	r3, #0
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <I2C1_MspInit+0x8c>)
 80015da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015dc:	4a1e      	ldr	r2, [pc, #120]	; (8001658 <I2C1_MspInit+0x8c>)
 80015de:	f043 0302 	orr.w	r3, r3, #2
 80015e2:	6313      	str	r3, [r2, #48]	; 0x30
 80015e4:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <I2C1_MspInit+0x8c>)
 80015e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80015f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015f6:	2312      	movs	r3, #18
 80015f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fe:	2303      	movs	r3, #3
 8001600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001602:	2304      	movs	r3, #4
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	4813      	ldr	r0, [pc, #76]	; (800165c <I2C1_MspInit+0x90>)
 800160e:	f010 fe2d 	bl	801226c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001612:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001618:	2312      	movs	r3, #18
 800161a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001620:	2303      	movs	r3, #3
 8001622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001624:	2304      	movs	r3, #4
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4619      	mov	r1, r3
 800162e:	480b      	ldr	r0, [pc, #44]	; (800165c <I2C1_MspInit+0x90>)
 8001630:	f010 fe1c 	bl	801226c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <I2C1_MspInit+0x8c>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	4a06      	ldr	r2, [pc, #24]	; (8001658 <I2C1_MspInit+0x8c>)
 800163e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001642:	6413      	str	r3, [r2, #64]	; 0x40
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <I2C1_MspInit+0x8c>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001650:	bf00      	nop
 8001652:	3728      	adds	r7, #40	; 0x28
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40023800 	.word	0x40023800
 800165c:	40020400 	.word	0x40020400

08001660 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <I2C1_MspDeInit+0x30>)
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	4a08      	ldr	r2, [pc, #32]	; (8001690 <I2C1_MspDeInit+0x30>)
 800166e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001672:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001674:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001678:	4806      	ldr	r0, [pc, #24]	; (8001694 <I2C1_MspDeInit+0x34>)
 800167a:	f010 ff7b 	bl	8012574 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800167e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001682:	4804      	ldr	r0, [pc, #16]	; (8001694 <I2C1_MspDeInit+0x34>)
 8001684:	f010 ff76 	bl	8012574 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40023800 	.word	0x40023800
 8001694:	40020400 	.word	0x40020400

08001698 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	e00a      	b.n	80016c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016aa:	f3af 8000 	nop.w
 80016ae:	4601      	mov	r1, r0
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	1c5a      	adds	r2, r3, #1
 80016b4:	60ba      	str	r2, [r7, #8]
 80016b6:	b2ca      	uxtb	r2, r1
 80016b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3301      	adds	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	dbf0      	blt.n	80016aa <_read+0x12>
	}

return len;
 80016c8:	687b      	ldr	r3, [r7, #4]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	e009      	b.n	80016f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	1c5a      	adds	r2, r3, #1
 80016e8:	60ba      	str	r2, [r7, #8]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fe1f 	bl	8001330 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	3301      	adds	r3, #1
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	dbf1      	blt.n	80016e4 <_write+0x12>
	}
	return len;
 8001700:	687b      	ldr	r3, [r7, #4]
}
 8001702:	4618      	mov	r0, r3
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <_close>:

int _close(int file)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
	return -1;
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001716:	4618      	mov	r0, r3
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001732:	605a      	str	r2, [r3, #4]
	return 0;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <_isatty>:

int _isatty(int file)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
	return 1;
 800174a:	2301      	movs	r3, #1
}
 800174c:	4618      	mov	r0, r3
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
	return 0;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800177c:	4a14      	ldr	r2, [pc, #80]	; (80017d0 <_sbrk+0x5c>)
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <_sbrk+0x60>)
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001788:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <_sbrk+0x64>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d102      	bne.n	8001796 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <_sbrk+0x64>)
 8001792:	4a12      	ldr	r2, [pc, #72]	; (80017dc <_sbrk+0x68>)
 8001794:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <_sbrk+0x64>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d207      	bcs.n	80017b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a4:	f013 fc9c 	bl	80150e0 <__errno>
 80017a8:	4603      	mov	r3, r0
 80017aa:	220c      	movs	r2, #12
 80017ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ae:	f04f 33ff 	mov.w	r3, #4294967295
 80017b2:	e009      	b.n	80017c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <_sbrk+0x64>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <_sbrk+0x64>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	4a05      	ldr	r2, [pc, #20]	; (80017d8 <_sbrk+0x64>)
 80017c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017c6:	68fb      	ldr	r3, [r7, #12]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20018000 	.word	0x20018000
 80017d4:	00000400 	.word	0x00000400
 80017d8:	2000012c 	.word	0x2000012c
 80017dc:	200074e0 	.word	0x200074e0

080017e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <SystemInit+0x20>)
 80017e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ea:	4a05      	ldr	r2, [pc, #20]	; (8001800 <SystemInit+0x20>)
 80017ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001804:	f8df d034 	ldr.w	sp, [pc, #52]	; 800183c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001808:	480d      	ldr	r0, [pc, #52]	; (8001840 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800180a:	490e      	ldr	r1, [pc, #56]	; (8001844 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800180c:	4a0e      	ldr	r2, [pc, #56]	; (8001848 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001810:	e002      	b.n	8001818 <LoopCopyDataInit>

08001812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001816:	3304      	adds	r3, #4

08001818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800181a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800181c:	d3f9      	bcc.n	8001812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800181e:	4a0b      	ldr	r2, [pc, #44]	; (800184c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001820:	4c0b      	ldr	r4, [pc, #44]	; (8001850 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001824:	e001      	b.n	800182a <LoopFillZerobss>

08001826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001828:	3204      	adds	r2, #4

0800182a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800182a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800182c:	d3fb      	bcc.n	8001826 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800182e:	f7ff ffd7 	bl	80017e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001832:	f013 fc5b 	bl	80150ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001836:	f7ff f9cd 	bl	8000bd4 <main>
  bx  lr    
 800183a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800183c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001844:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8001848:	080163c8 	.word	0x080163c8
  ldr r2, =_sbss
 800184c:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8001850:	200074e0 	.word	0x200074e0

08001854 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001854:	e7fe      	b.n	8001854 <ADC_IRQHandler>
	...

08001858 <VL53L3A2_Init>:
  * @brief Initialize X-NUCLEO-53L3A2 STM32 expansion board
  * @note All devices XSDN are asserted and display is turned off
  * @return 0 on success
  */
int32_t VL53L3A2_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
  int32_t status = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
  uint8_t ExpanderData[2];

  if (InitCounter++ == 0U)
 8001862:	4b36      	ldr	r3, [pc, #216]	; (800193c <VL53L3A2_Init+0xe4>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	4934      	ldr	r1, [pc, #208]	; (800193c <VL53L3A2_Init+0xe4>)
 800186a:	600a      	str	r2, [r1, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d154      	bne.n	800191a <VL53L3A2_Init+0xc2>
  {
    status |= _I2cFailRecover();
 8001870:	f000 f8d4 	bl	8001a1c <_I2cFailRecover>
 8001874:	4602      	mov	r2, r0
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4313      	orrs	r3, r2
 800187a:	607b      	str	r3, [r7, #4]
    status |= VL53L3A2_I2C_Init();
 800187c:	f7ff fdbc 	bl	80013f8 <BSP_I2C1_Init>
 8001880:	4602      	mov	r2, r0
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4313      	orrs	r3, r2
 8001886:	607b      	str	r3, [r7, #4]

    if (status != BSP_ERROR_NONE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d147      	bne.n	800191e <VL53L3A2_Init+0xc6>
    {
      goto done_err;
    }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR0, 0, ExpanderData, 2);
 800188e:	463a      	mov	r2, r7
 8001890:	2302      	movs	r3, #2
 8001892:	2100      	movs	r1, #0
 8001894:	2086      	movs	r0, #134	; 0x86
 8001896:	f000 f963 	bl	8001b60 <_ExpanderRd>
 800189a:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d13f      	bne.n	8001922 <VL53L3A2_Init+0xca>
 80018a2:	783b      	ldrb	r3, [r7, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d13c      	bne.n	8001922 <VL53L3A2_Init+0xca>
 80018a8:	787b      	ldrb	r3, [r7, #1]
 80018aa:	2b16      	cmp	r3, #22
 80018ac:	d139      	bne.n	8001922 <VL53L3A2_Init+0xca>
	  {
      VL53L3A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR0);
      goto done_err;
	  }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR1, 0, ExpanderData, 2);
 80018ae:	463a      	mov	r2, r7
 80018b0:	2302      	movs	r3, #2
 80018b2:	2100      	movs	r1, #0
 80018b4:	2084      	movs	r0, #132	; 0x84
 80018b6:	f000 f953 	bl	8001b60 <_ExpanderRd>
 80018ba:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d131      	bne.n	8001926 <VL53L3A2_Init+0xce>
 80018c2:	783b      	ldrb	r3, [r7, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d12e      	bne.n	8001926 <VL53L3A2_Init+0xce>
 80018c8:	787b      	ldrb	r3, [r7, #1]
 80018ca:	2b16      	cmp	r3, #22
 80018cc:	d12b      	bne.n	8001926 <VL53L3A2_Init+0xce>
	  {
		  VL53L3A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR1);
		  goto done_err;
	  }

	  CurIOVal.u32 = 0x0U;
 80018ce:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <VL53L3A2_Init+0xe8>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]

	  /* setup expander   i/o direction  all output but exp1 bit 14*/
	  ExpanderData[0] = 0xFFU;
 80018d4:	23ff      	movs	r3, #255	; 0xff
 80018d6:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xFFU;
 80018d8:	23ff      	movs	r3, #255	; 0xff
 80018da:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPDR, ExpanderData, 2);
 80018dc:	463a      	mov	r2, r7
 80018de:	2302      	movs	r3, #2
 80018e0:	2114      	movs	r1, #20
 80018e2:	2086      	movs	r0, #134	; 0x86
 80018e4:	f000 f96e 	bl	8001bc4 <_ExpanderWR>
 80018e8:	6078      	str	r0, [r7, #4]

	  if (status)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d11c      	bne.n	800192a <VL53L3A2_Init+0xd2>
	  {
		VL53L3A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR0);
		goto done_err;
	  }

	  ExpanderData[0] = 0xFFU;
 80018f0:	23ff      	movs	r3, #255	; 0xff
 80018f2:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xBFU; /* all but bit 14-15 that is pb1 and xhurt */
 80018f4:	23bf      	movs	r3, #191	; 0xbf
 80018f6:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPDR, ExpanderData, 2);
 80018f8:	463a      	mov	r2, r7
 80018fa:	2302      	movs	r3, #2
 80018fc:	2114      	movs	r1, #20
 80018fe:	2084      	movs	r0, #132	; 0x84
 8001900:	f000 f960 	bl	8001bc4 <_ExpanderWR>
 8001904:	6078      	str	r0, [r7, #4]

	  if (status)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d110      	bne.n	800192e <VL53L3A2_Init+0xd6>
		VL53L3A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR1);
		goto done_err;
	  }

	  /* shut down all segment and all device */
	  CurIOVal.u32 = 0x7FU + (0x7FU << 7) + (0x7FU << 16) + (0x7FU << (16 + 7));
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <VL53L3A2_Init+0xe8>)
 800190e:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 8001912:	601a      	str	r2, [r3, #0]

	  status = _ExpandersSetAllIO();
 8001914:	f000 f904 	bl	8001b20 <_ExpandersSetAllIO>
 8001918:	6078      	str	r0, [r7, #4]
	  {
		VL53L3A2_ErrLog("Set initial i/o ");
	  }
  }

done_err:
 800191a:	bf00      	nop
 800191c:	e008      	b.n	8001930 <VL53L3A2_Init+0xd8>
      goto done_err;
 800191e:	bf00      	nop
 8001920:	e006      	b.n	8001930 <VL53L3A2_Init+0xd8>
      goto done_err;
 8001922:	bf00      	nop
 8001924:	e004      	b.n	8001930 <VL53L3A2_Init+0xd8>
		  goto done_err;
 8001926:	bf00      	nop
 8001928:	e002      	b.n	8001930 <VL53L3A2_Init+0xd8>
		goto done_err;
 800192a:	bf00      	nop
 800192c:	e000      	b.n	8001930 <VL53L3A2_Init+0xd8>
		goto done_err;
 800192e:	bf00      	nop
  return status;
 8001930:	687b      	ldr	r3, [r7, #4]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000130 	.word	0x20000130
 8001940:	20000134 	.word	0x20000134

08001944 <VL53L3A2_ResetId>:
  * @param  DevNo The device number, use @ref VL53L3A2_dev_e.
  * @param  state  State of the device reset (xsdn) pin @warning reset pin is active low
  * @return 0 on success
  */
int32_t VL53L3A2_ResetId(uint8_t DevNo, uint8_t state)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	460a      	mov	r2, r1
 800194e:	71fb      	strb	r3, [r7, #7]
 8001950:	4613      	mov	r3, r2
 8001952:	71bb      	strb	r3, [r7, #6]
  int32_t status;

  switch (DevNo)
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d037      	beq.n	80019ca <VL53L3A2_ResetId+0x86>
 800195a:	2b02      	cmp	r3, #2
 800195c:	dc4e      	bgt.n	80019fc <VL53L3A2_ResetId+0xb8>
 800195e:	2b00      	cmp	r3, #0
 8001960:	d01a      	beq.n	8001998 <VL53L3A2_ResetId+0x54>
 8001962:	2b01      	cmp	r3, #1
 8001964:	d14a      	bne.n	80019fc <VL53L3A2_ResetId+0xb8>
  {
    case VL53L3A2_DEV_CENTER :
      CurIOVal.bytes[3] &= ~0x80U; /* bit 15 expander 1  => byte #3 */
 8001966:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <VL53L3A2_ResetId+0xcc>)
 8001968:	78db      	ldrb	r3, [r3, #3]
 800196a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800196e:	b2da      	uxtb	r2, r3
 8001970:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <VL53L3A2_ResetId+0xcc>)
 8001972:	70da      	strb	r2, [r3, #3]

      if (state)
 8001974:	79bb      	ldrb	r3, [r7, #6]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d006      	beq.n	8001988 <VL53L3A2_ResetId+0x44>
      {
        CurIOVal.bytes[3] |= 0x80U;  /* bit 15 expander 1  => byte #3 */
 800197a:	4b25      	ldr	r3, [pc, #148]	; (8001a10 <VL53L3A2_ResetId+0xcc>)
 800197c:	78db      	ldrb	r3, [r3, #3]
 800197e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001982:	b2da      	uxtb	r2, r3
 8001984:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <VL53L3A2_ResetId+0xcc>)
 8001986:	70da      	strb	r2, [r3, #3]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR + 1, &CurIOVal.bytes[3], 1);
 8001988:	2301      	movs	r3, #1
 800198a:	4a22      	ldr	r2, [pc, #136]	; (8001a14 <VL53L3A2_ResetId+0xd0>)
 800198c:	2113      	movs	r1, #19
 800198e:	2084      	movs	r0, #132	; 0x84
 8001990:	f000 f918 	bl	8001bc4 <_ExpanderWR>
 8001994:	60f8      	str	r0, [r7, #12]
      break;
 8001996:	e035      	b.n	8001a04 <VL53L3A2_ResetId+0xc0>

    case VL53L3A2_DEV_LEFT :
      CurIOVal.bytes[1] &= ~0x40U; /* bit 14 expander 0 => byte #1*/
 8001998:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <VL53L3A2_ResetId+0xcc>)
 800199a:	785b      	ldrb	r3, [r3, #1]
 800199c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <VL53L3A2_ResetId+0xcc>)
 80019a4:	705a      	strb	r2, [r3, #1]

      if (state)
 80019a6:	79bb      	ldrb	r3, [r7, #6]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d006      	beq.n	80019ba <VL53L3A2_ResetId+0x76>
      {
        CurIOVal.bytes[1] |= 0x40U;  /* bit 14 expander 0 => byte #1*/
 80019ac:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <VL53L3A2_ResetId+0xcc>)
 80019ae:	785b      	ldrb	r3, [r3, #1]
 80019b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <VL53L3A2_ResetId+0xcc>)
 80019b8:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 80019ba:	2301      	movs	r3, #1
 80019bc:	4a16      	ldr	r2, [pc, #88]	; (8001a18 <VL53L3A2_ResetId+0xd4>)
 80019be:	2113      	movs	r1, #19
 80019c0:	2086      	movs	r0, #134	; 0x86
 80019c2:	f000 f8ff 	bl	8001bc4 <_ExpanderWR>
 80019c6:	60f8      	str	r0, [r7, #12]
      break;
 80019c8:	e01c      	b.n	8001a04 <VL53L3A2_ResetId+0xc0>

    case VL53L3A2_DEV_RIGHT :
      CurIOVal.bytes[1] &= ~0x80U; /* bit 15 expander 0  => byte #1 */
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <VL53L3A2_ResetId+0xcc>)
 80019cc:	785b      	ldrb	r3, [r3, #1]
 80019ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <VL53L3A2_ResetId+0xcc>)
 80019d6:	705a      	strb	r2, [r3, #1]

      if (state)
 80019d8:	79bb      	ldrb	r3, [r7, #6]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d006      	beq.n	80019ec <VL53L3A2_ResetId+0xa8>
      {
        CurIOVal.bytes[1] |= 0x80U;  /* bit 15 expander 0 => byte #1*/
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <VL53L3A2_ResetId+0xcc>)
 80019e0:	785b      	ldrb	r3, [r3, #1]
 80019e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <VL53L3A2_ResetId+0xcc>)
 80019ea:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 80019ec:	2301      	movs	r3, #1
 80019ee:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <VL53L3A2_ResetId+0xd4>)
 80019f0:	2113      	movs	r1, #19
 80019f2:	2086      	movs	r0, #134	; 0x86
 80019f4:	f000 f8e6 	bl	8001bc4 <_ExpanderWR>
 80019f8:	60f8      	str	r0, [r7, #12]
      break;
 80019fa:	e003      	b.n	8001a04 <VL53L3A2_ResetId+0xc0>

    default:
      VL53L3A2_ErrLog("Invalid DevNo %d", DevNo);
      status = -1;
 80019fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001a00:	60fb      	str	r3, [r7, #12]
      goto done;
 8001a02:	e000      	b.n	8001a06 <VL53L3A2_ResetId+0xc2>
  if (status)
  {
    VL53L3A2_ErrLog("expander i/o error for DevNo %d state %d ", DevNo, state);
  }

done:
 8001a04:	bf00      	nop
  return status;
 8001a06:	68fb      	ldr	r3, [r7, #12]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000134 	.word	0x20000134
 8001a14:	20000137 	.word	0x20000137
 8001a18:	20000135 	.word	0x20000135

08001a1c <_I2cFailRecover>:
  * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
  * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
  * this routine does use gpio to manipulate and recover i2c bus line in all cases.
  */
static int32_t _I2cFailRecover(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af00      	add	r7, sp, #0
  /* We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
  * by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
  * all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state */

  uint8_t i;
  uint8_t retry_cnt = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	77bb      	strb	r3, [r7, #30]
  static uint8_t is_already_init = 0U;
  GPIO_InitTypeDef GPIO_InitStruct;

  if (is_already_init == 1U)
 8001a26:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <_I2cFailRecover+0xf8>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d101      	bne.n	8001a32 <_I2cFailRecover+0x16>
  {
    return BSP_ERROR_NONE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	e06b      	b.n	8001b0a <_I2cFailRecover+0xee>
  }

  /* Enable I/O */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	4b38      	ldr	r3, [pc, #224]	; (8001b18 <_I2cFailRecover+0xfc>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a37      	ldr	r2, [pc, #220]	; (8001b18 <_I2cFailRecover+0xfc>)
 8001a3c:	f043 0302 	orr.w	r3, r3, #2
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b35      	ldr	r3, [pc, #212]	; (8001b18 <_I2cFailRecover+0xfc>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin = VL53L3A2_I2C_SCL_GPIO_PIN;
 8001a4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a54:	2311      	movs	r3, #17
 8001a56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L3A2_I2C_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001a5c:	f107 0308 	add.w	r3, r7, #8
 8001a60:	4619      	mov	r1, r3
 8001a62:	482e      	ldr	r0, [pc, #184]	; (8001b1c <_I2cFailRecover+0x100>)
 8001a64:	f010 fc02 	bl	801226c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = VL53L3A2_I2C_SDA_GPIO_PIN;
 8001a68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a6e:	2311      	movs	r3, #17
 8001a70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a72:	2301      	movs	r3, #1
 8001a74:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L3A2_I2C_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001a76:	f107 0308 	add.w	r3, r7, #8
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4827      	ldr	r0, [pc, #156]	; (8001b1c <_I2cFailRecover+0x100>)
 8001a7e:	f010 fbf5 	bl	801226c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 8001a82:	2201      	movs	r2, #1
 8001a84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a88:	4824      	ldr	r0, [pc, #144]	; (8001b1c <_I2cFailRecover+0x100>)
 8001a8a:	f010 fe6f 	bl	801276c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VL53L3A2_I2C_SDA_GPIO_PORT, VL53L3A2_I2C_SDA_GPIO_PIN, GPIO_PIN_SET);
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a94:	4821      	ldr	r0, [pc, #132]	; (8001b1c <_I2cFailRecover+0x100>)
 8001a96:	f010 fe69 	bl	801276c <HAL_GPIO_WritePin>

  do
  {
    for (i = 0; i < 10U; i++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	77fb      	strb	r3, [r7, #31]
 8001a9e:	e014      	b.n	8001aca <_I2cFailRecover+0xae>
    {
      HAL_GPIO_WritePin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SCL_GPIO_PIN, GPIO_PIN_RESET);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aa6:	481d      	ldr	r0, [pc, #116]	; (8001b1c <_I2cFailRecover+0x100>)
 8001aa8:	f010 fe60 	bl	801276c <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8001aac:	2001      	movs	r0, #1
 8001aae:	f010 fad3 	bl	8012058 <HAL_Delay>
      HAL_GPIO_WritePin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ab8:	4818      	ldr	r0, [pc, #96]	; (8001b1c <_I2cFailRecover+0x100>)
 8001aba:	f010 fe57 	bl	801276c <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8001abe:	2001      	movs	r0, #1
 8001ac0:	f010 faca 	bl	8012058 <HAL_Delay>
    for (i = 0; i < 10U; i++)
 8001ac4:	7ffb      	ldrb	r3, [r7, #31]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	77fb      	strb	r3, [r7, #31]
 8001aca:	7ffb      	ldrb	r3, [r7, #31]
 8001acc:	2b09      	cmp	r3, #9
 8001ace:	d9e7      	bls.n	8001aa0 <_I2cFailRecover+0x84>
    }
    retry_cnt++;
 8001ad0:	7fbb      	ldrb	r3, [r7, #30]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	77bb      	strb	r3, [r7, #30]
  } while ((HAL_GPIO_ReadPin(VL53L3A2_I2C_SDA_GPIO_PORT, VL53L3A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET) && (retry_cnt < 7U));
 8001ad6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ada:	4810      	ldr	r0, [pc, #64]	; (8001b1c <_I2cFailRecover+0x100>)
 8001adc:	f010 fe2e 	bl	801273c <HAL_GPIO_ReadPin>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d102      	bne.n	8001aec <_I2cFailRecover+0xd0>
 8001ae6:	7fbb      	ldrb	r3, [r7, #30]
 8001ae8:	2b06      	cmp	r3, #6
 8001aea:	d9d6      	bls.n	8001a9a <_I2cFailRecover+0x7e>

  if (HAL_GPIO_ReadPin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET)
 8001aec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001af0:	480a      	ldr	r0, [pc, #40]	; (8001b1c <_I2cFailRecover+0x100>)
 8001af2:	f010 fe23 	bl	801273c <HAL_GPIO_ReadPin>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d102      	bne.n	8001b02 <_I2cFailRecover+0xe6>
  {
    /* We are still in a bad i2c state, return error */
    return BSP_ERROR_COMPONENT_FAILURE;
 8001afc:	f06f 0304 	mvn.w	r3, #4
 8001b00:	e003      	b.n	8001b0a <_I2cFailRecover+0xee>
  }

  is_already_init = 1U;
 8001b02:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <_I2cFailRecover+0xf8>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3720      	adds	r7, #32
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000138 	.word	0x20000138
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40020400 	.word	0x40020400

08001b20 <_ExpandersSetAllIO>:
/**
  * @brief Set all i2c expended gpio in one go
  * @return i/o operation status
  */
static int32_t _ExpandersSetAllIO(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
  int32_t status;

  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR, &CurIOVal.bytes[0], 2);
 8001b26:	2302      	movs	r3, #2
 8001b28:	4a0b      	ldr	r2, [pc, #44]	; (8001b58 <_ExpandersSetAllIO+0x38>)
 8001b2a:	2112      	movs	r1, #18
 8001b2c:	2086      	movs	r0, #134	; 0x86
 8001b2e:	f000 f849 	bl	8001bc4 <_ExpanderWR>
 8001b32:	6078      	str	r0, [r7, #4]

  if (status)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d107      	bne.n	8001b4a <_ExpandersSetAllIO+0x2a>
  {
    goto done_err;
  }

  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR, &CurIOVal.bytes[2], 2);
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <_ExpandersSetAllIO+0x3c>)
 8001b3e:	2112      	movs	r1, #18
 8001b40:	2084      	movs	r0, #132	; 0x84
 8001b42:	f000 f83f 	bl	8001bc4 <_ExpanderWR>
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	e000      	b.n	8001b4c <_ExpandersSetAllIO+0x2c>
    goto done_err;
 8001b4a:	bf00      	nop

done_err:
  return status;
 8001b4c:	687b      	ldr	r3, [r7, #4]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000134 	.word	0x20000134
 8001b5c:	20000136 	.word	0x20000136

08001b60 <_ExpanderRd>:
  * @param data       read data buffer
  * @param n_data     number of byte to read
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderRd(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af02      	add	r7, sp, #8
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
 8001b6c:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr;

  RegAddr = index;
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	74fb      	strb	r3, [r7, #19]
  VL53L3A2_GetI2cBus();

  do
  {
    status = HAL_I2C_Master_Transmit(&VL53L3A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	b299      	uxth	r1, r3
 8001b78:	f107 0213 	add.w	r2, r7, #19
 8001b7c:	2364      	movs	r3, #100	; 0x64
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	2301      	movs	r3, #1
 8001b82:	480f      	ldr	r0, [pc, #60]	; (8001bc0 <_ExpanderRd+0x60>)
 8001b84:	f010 ff80 	bl	8012a88 <HAL_I2C_Master_Transmit>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	617b      	str	r3, [r7, #20]

    if (status)
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d110      	bne.n	8001bb4 <_ExpanderRd+0x54>
    {
      break;
    }

    status = HAL_I2C_Master_Receive(&VL53L3A2_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	b299      	uxth	r1, r3
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	2064      	movs	r0, #100	; 0x64
 8001b9e:	fb00 f303 	mul.w	r3, r0, r3
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <_ExpanderRd+0x60>)
 8001baa:	f011 f86b 	bl	8012c84 <HAL_I2C_Master_Receive>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	e000      	b.n	8001bb6 <_ExpanderRd+0x56>
      break;
 8001bb4:	bf00      	nop
  } while (0);

  VL53L3A2_PutI2cBus();

  return status;
 8001bb6:	697b      	ldr	r3, [r7, #20]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	200071f0 	.word	0x200071f0

08001bc4 <_ExpanderWR>:
  * @param data       data buffer
  * @param n_data     number of byte to write
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderWR(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08c      	sub	sp, #48	; 0x30
 8001bc8:	af02      	add	r7, sp, #8
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
 8001bd0:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr[0x10];

  RegAddr[0] = index;
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	753b      	strb	r3, [r7, #20]
  memcpy(RegAddr + 1, data, n_data);
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	3301      	adds	r3, #1
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f013 faa6 	bl	8015134 <memcpy>

  VL53L3A2_GetI2cBus();
  status = HAL_I2C_Master_Transmit(&VL53L3A2_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	b299      	uxth	r1, r3
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	f107 0214 	add.w	r2, r7, #20
 8001bf8:	2064      	movs	r0, #100	; 0x64
 8001bfa:	9000      	str	r0, [sp, #0]
 8001bfc:	4804      	ldr	r0, [pc, #16]	; (8001c10 <_ExpanderWR+0x4c>)
 8001bfe:	f010 ff43 	bl	8012a88 <HAL_I2C_Master_Transmit>
 8001c02:	4603      	mov	r3, r0
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
  VL53L3A2_PutI2cBus();

  return status;
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3728      	adds	r7, #40	; 0x28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	200071f0 	.word	0x200071f0

08001c14 <VL53L3A2_RANGING_SENSOR_Init>:
  * @brief Initialize the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_Init(uint32_t Instance)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d903      	bls.n	8001c2a <VL53L3A2_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c22:	f06f 0301 	mvn.w	r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	e014      	b.n	8001c54 <VL53L3A2_RANGING_SENSOR_Init+0x40>
  }
  else if (VL53L3A2_Init() != 0)
 8001c2a:	f7ff fe15 	bl	8001858 <VL53L3A2_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <VL53L3A2_RANGING_SENSOR_Init+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8001c34:	f06f 0303 	mvn.w	r3, #3
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	e00b      	b.n	8001c54 <VL53L3A2_RANGING_SENSOR_Init+0x40>
  }
  else
  {
    /* reset XSHUT (XSDN) pin */
    (void)VL53L3A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_OFF);
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f8fc 	bl	8001e3c <VL53L3A2_RANGING_SENSOR_SetPowerMode>
    (void)VL53L3A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_ON);
 8001c44:	2100      	movs	r1, #0
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f8f8 	bl	8001e3c <VL53L3A2_RANGING_SENSOR_SetPowerMode>

    ret = VL53L3CX_Probe(Instance);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f935 	bl	8001ebc <VL53L3CX_Probe>
 8001c52:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001c54:	68fb      	ldr	r3, [r7, #12]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <VL53L3A2_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d903      	bls.n	8001c78 <VL53L3A2_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c70:	f06f 0301 	mvn.w	r3, #1
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	e012      	b.n	8001c9e <VL53L3A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->ReadID(VL53L3A2_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <VL53L3A2_RANGING_SENSOR_ReadID+0x48>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	490b      	ldr	r1, [pc, #44]	; (8001cac <VL53L3A2_RANGING_SENSOR_ReadID+0x4c>)
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001c86:	6839      	ldr	r1, [r7, #0]
 8001c88:	4610      	mov	r0, r2
 8001c8a:	4798      	blx	r3
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	da03      	bge.n	8001c9a <VL53L3A2_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001c92:	f06f 0304 	mvn.w	r3, #4
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	e001      	b.n	8001c9e <VL53L3A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000148 	.word	0x20000148
 8001cac:	2000013c 	.word	0x2000013c

08001cb0 <VL53L3A2_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d903      	bls.n	8001cc8 <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001cc0:	f06f 0301 	mvn.w	r3, #1
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	e012      	b.n	8001cee <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->ConfigProfile(VL53L3A2_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x48>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	490b      	ldr	r1, [pc, #44]	; (8001cfc <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x4c>)
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001cd6:	6839      	ldr	r1, [r7, #0]
 8001cd8:	4610      	mov	r0, r2
 8001cda:	4798      	blx	r3
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	da03      	bge.n	8001cea <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001ce2:	f06f 0304 	mvn.w	r3, #4
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	e001      	b.n	8001cee <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001cee:	68fb      	ldr	r3, [r7, #12]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000148 	.word	0x20000148
 8001cfc:	2000013c 	.word	0x2000013c

08001d00 <VL53L3A2_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d903      	bls.n	8001d18 <VL53L3A2_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001d10:	f06f 0301 	mvn.w	r3, #1
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	e012      	b.n	8001d3e <VL53L3A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->GetDistance(VL53L3A2_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 8001d18:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <VL53L3A2_RANGING_SENSOR_GetDistance+0x48>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	490b      	ldr	r1, [pc, #44]	; (8001d4c <VL53L3A2_RANGING_SENSOR_GetDistance+0x4c>)
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001d26:	6839      	ldr	r1, [r7, #0]
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4798      	blx	r3
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	da03      	bge.n	8001d3a <VL53L3A2_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001d32:	f06f 0304 	mvn.w	r3, #4
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	e001      	b.n	8001d3e <VL53L3A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000148 	.word	0x20000148
 8001d4c:	2000013c 	.word	0x2000013c

08001d50 <VL53L3A2_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired RANGING_SENSOR_Mode_t
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d903      	bls.n	8001d68 <VL53L3A2_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001d60:	f06f 0301 	mvn.w	r3, #1
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	e012      	b.n	8001d8e <VL53L3A2_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->Start(VL53L3A2_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8001d68:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <VL53L3A2_RANGING_SENSOR_Start+0x48>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	490b      	ldr	r1, [pc, #44]	; (8001d9c <VL53L3A2_RANGING_SENSOR_Start+0x4c>)
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001d76:	6839      	ldr	r1, [r7, #0]
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4798      	blx	r3
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	da03      	bge.n	8001d8a <VL53L3A2_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001d82:	f06f 0304 	mvn.w	r3, #4
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	e001      	b.n	8001d8e <VL53L3A2_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000148 	.word	0x20000148
 8001d9c:	2000013c 	.word	0x2000013c

08001da0 <VL53L3A2_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_Stop(uint32_t Instance)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d903      	bls.n	8001db6 <VL53L3A2_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001dae:	f06f 0301 	mvn.w	r3, #1
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	e011      	b.n	8001dda <VL53L3A2_RANGING_SENSOR_Stop+0x3a>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->Stop(VL53L3A2_RANGING_SENSOR_CompObj[Instance]) < 0)
 8001db6:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <VL53L3A2_RANGING_SENSOR_Stop+0x44>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	490a      	ldr	r1, [pc, #40]	; (8001de8 <VL53L3A2_RANGING_SENSOR_Stop+0x48>)
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4798      	blx	r3
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	da03      	bge.n	8001dd6 <VL53L3A2_RANGING_SENSOR_Stop+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001dce:	f06f 0304 	mvn.w	r3, #4
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	e001      	b.n	8001dda <VL53L3A2_RANGING_SENSOR_Stop+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001dda:	68fb      	ldr	r3, [r7, #12]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000148 	.word	0x20000148
 8001de8:	2000013c 	.word	0x2000013c

08001dec <VL53L3A2_RANGING_SENSOR_SetAddress>:
  * @param Instance    Ranging sensor instance.
  * @param Address     New I2C address.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_SetAddress(uint32_t Instance, uint32_t Address)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d903      	bls.n	8001e04 <VL53L3A2_RANGING_SENSOR_SetAddress+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001dfc:	f06f 0301 	mvn.w	r3, #1
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	e012      	b.n	8001e2a <VL53L3A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->SetAddress(VL53L3A2_RANGING_SENSOR_CompObj[Instance], Address) < 0)
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <VL53L3A2_RANGING_SENSOR_SetAddress+0x48>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0a:	490b      	ldr	r1, [pc, #44]	; (8001e38 <VL53L3A2_RANGING_SENSOR_SetAddress+0x4c>)
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001e12:	6839      	ldr	r1, [r7, #0]
 8001e14:	4610      	mov	r0, r2
 8001e16:	4798      	blx	r3
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	da03      	bge.n	8001e26 <VL53L3A2_RANGING_SENSOR_SetAddress+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001e1e:	f06f 0304 	mvn.w	r3, #4
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	e001      	b.n	8001e2a <VL53L3A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000148 	.word	0x20000148
 8001e38:	2000013c 	.word	0x2000013c

08001e3c <VL53L3A2_RANGING_SENSOR_SetPowerMode>:
  * @param Instance    Ranging sensor instance.
  * @param PowerMode    New power mode to be entered.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_SetPowerMode(uint32_t Instance, uint32_t PowerMode)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d903      	bls.n	8001e54 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001e4c:	f06f 0301 	mvn.w	r3, #1
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	e02e      	b.n	8001eb2 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_ON)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d112      	bne.n	8001e80 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x44>
  {
    if (VL53L3A2_ResetId((uint8_t)Instance, 1) < 0)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2101      	movs	r1, #1
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fd6f 	bl	8001944 <VL53L3A2_ResetId>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	da03      	bge.n	8001e74 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001e6c:	f06f 0303 	mvn.w	r3, #3
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	e01e      	b.n	8001eb2 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8001e74:	2002      	movs	r0, #2
 8001e76:	f010 f8ef 	bl	8012058 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	e018      	b.n	8001eb2 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_OFF)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d112      	bne.n	8001eac <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x70>
  {
    if (VL53L3A2_ResetId((uint8_t)Instance, 0) < 0)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fd59 	bl	8001944 <VL53L3A2_ResetId>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	da03      	bge.n	8001ea0 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x64>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001e98:	f06f 0303 	mvn.w	r3, #3
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	e008      	b.n	8001eb2 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8001ea0:	2002      	movs	r0, #2
 8001ea2:	f010 f8d9 	bl	8012058 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	e002      	b.n	8001eb2 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001eac:	f06f 0301 	mvn.w	r3, #1
 8001eb0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <VL53L3CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L3CX_Probe(uint32_t Instance)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	; 0x28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  VL53L3CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L3CX_Object_t   VL53L3CXObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L3CX_ADDRESS;
 8001ec4:	2352      	movs	r3, #82	; 0x52
 8001ec6:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L3A2_I2C_Init;
 8001ec8:	4b38      	ldr	r3, [pc, #224]	; (8001fac <VL53L3CX_Probe+0xf0>)
 8001eca:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L3A2_I2C_DeInit;
 8001ecc:	4b38      	ldr	r3, [pc, #224]	; (8001fb0 <VL53L3CX_Probe+0xf4>)
 8001ece:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L3A2_I2C_WriteReg;
 8001ed0:	4b38      	ldr	r3, [pc, #224]	; (8001fb4 <VL53L3CX_Probe+0xf8>)
 8001ed2:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L3A2_I2C_ReadReg;
 8001ed4:	4b38      	ldr	r3, [pc, #224]	; (8001fb8 <VL53L3CX_Probe+0xfc>)
 8001ed6:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L3A2_GetTick;
 8001ed8:	4b38      	ldr	r3, [pc, #224]	; (8001fbc <VL53L3CX_Probe+0x100>)
 8001eda:	623b      	str	r3, [r7, #32]

  if (VL53L3CX_RegisterBusIO(&(VL53L3CXObj[Instance]), &IOCtx) != VL53L3CX_OK)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f242 42f0 	movw	r2, #9456	; 0x24f0
 8001ee2:	fb02 f303 	mul.w	r3, r2, r3
 8001ee6:	4a36      	ldr	r2, [pc, #216]	; (8001fc0 <VL53L3CX_Probe+0x104>)
 8001ee8:	4413      	add	r3, r2
 8001eea:	f107 020c 	add.w	r2, r7, #12
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f00f fbf2 	bl	80116da <VL53L3CX_RegisterBusIO>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <VL53L3CX_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001efc:	f06f 0304 	mvn.w	r3, #4
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
 8001f02:	e04d      	b.n	8001fa0 <VL53L3CX_Probe+0xe4>
  }
  else if (VL53L3CX_ReadID(&(VL53L3CXObj[Instance]), &id) != VL53L3CX_OK)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f242 42f0 	movw	r2, #9456	; 0x24f0
 8001f0a:	fb02 f303 	mul.w	r3, r2, r3
 8001f0e:	4a2c      	ldr	r2, [pc, #176]	; (8001fc0 <VL53L3CX_Probe+0x104>)
 8001f10:	4413      	add	r3, r2
 8001f12:	f107 0208 	add.w	r2, r7, #8
 8001f16:	4611      	mov	r1, r2
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f00f fc90 	bl	801183e <VL53L3CX_ReadID>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <VL53L3CX_Probe+0x70>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001f24:	f06f 0304 	mvn.w	r3, #4
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
 8001f2a:	e039      	b.n	8001fa0 <VL53L3CX_Probe+0xe4>
  }
  else
  {
    if (id != VL53L3CX_ID)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	f64e 22aa 	movw	r2, #60074	; 0xeaaa
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d003      	beq.n	8001f3e <VL53L3CX_Probe+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001f36:	f06f 0306 	mvn.w	r3, #6
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f3c:	e030      	b.n	8001fa0 <VL53L3CX_Probe+0xe4>
    }
    else
    {
      VL53L3A2_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L3CX_RANGING_SENSOR_Driver;
 8001f3e:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <VL53L3CX_Probe+0x108>)
 8001f40:	4a21      	ldr	r2, [pc, #132]	; (8001fc8 <VL53L3CX_Probe+0x10c>)
 8001f42:	601a      	str	r2, [r3, #0]
      VL53L3A2_RANGING_SENSOR_CompObj[Instance] = &(VL53L3CXObj[Instance]);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f242 42f0 	movw	r2, #9456	; 0x24f0
 8001f4a:	fb02 f303 	mul.w	r3, r2, r3
 8001f4e:	4a1c      	ldr	r2, [pc, #112]	; (8001fc0 <VL53L3CX_Probe+0x104>)
 8001f50:	441a      	add	r2, r3
 8001f52:	491e      	ldr	r1, [pc, #120]	; (8001fcc <VL53L3CX_Probe+0x110>)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (VL53L3A2_RANGING_SENSOR_Drv->Init(VL53L3A2_RANGING_SENSOR_CompObj[Instance]) != VL53L3CX_OK)
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <VL53L3CX_Probe+0x108>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	491a      	ldr	r1, [pc, #104]	; (8001fcc <VL53L3CX_Probe+0x110>)
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001f68:	4610      	mov	r0, r2
 8001f6a:	4798      	blx	r3
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <VL53L3CX_Probe+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001f72:	f06f 0304 	mvn.w	r3, #4
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
 8001f78:	e012      	b.n	8001fa0 <VL53L3CX_Probe+0xe4>
      }
      else if (VL53L3A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L3A2_RANGING_SENSOR_CompObj[Instance], &VL53L3A2_RANGING_SENSOR_Cap) != VL53L3CX_OK)
 8001f7a:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <VL53L3CX_Probe+0x108>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	4912      	ldr	r1, [pc, #72]	; (8001fcc <VL53L3CX_Probe+0x110>)
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001f88:	4911      	ldr	r1, [pc, #68]	; (8001fd0 <VL53L3CX_Probe+0x114>)
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	4798      	blx	r3
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <VL53L3CX_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001f94:	f06f 0304 	mvn.w	r3, #4
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
 8001f9a:	e001      	b.n	8001fa0 <VL53L3CX_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3728      	adds	r7, #40	; 0x28
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	080013f9 	.word	0x080013f9
 8001fb0:	0800145d 	.word	0x0800145d
 8001fb4:	080014ad 	.word	0x080014ad
 8001fb8:	08001501 	.word	0x08001501
 8001fbc:	08001555 	.word	0x08001555
 8001fc0:	20000160 	.word	0x20000160
 8001fc4:	20000148 	.word	0x20000148
 8001fc8:	20000048 	.word	0x20000048
 8001fcc:	2000013c 	.word	0x2000013c
 8001fd0:	2000014c 	.word	0x2000014c

08001fd4 <VL53LX_SetDeviceAddress>:
}



VL53LX_Error VL53LX_SetDeviceAddress(VL53LX_DEV Dev, uint8_t DeviceAddress)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3318      	adds	r3, #24
 8001fe8:	613b      	str	r3, [r7, #16]
	VL53LX_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8001ff0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53LX_WrByte(Dev, VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
 8001ff2:	78fb      	ldrb	r3, [r7, #3]
 8001ff4:	085b      	lsrs	r3, r3, #1
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f00f f98b 	bl	8011318 <VL53LX_WrByte>
 8002002:	4603      	mov	r3, r0
 8002004:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 8002006:	78fb      	ldrb	r3, [r7, #3]
 8002008:	085b      	lsrs	r3, r3, #1
 800200a:	b2db      	uxtb	r3, r3
 800200c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002010:	b2da      	uxtb	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8002016:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <VL53LX_DataInit>:


VL53LX_Error VL53LX_DataInit(VL53LX_DEV Dev)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800202a:	2300      	movs	r3, #0
 800202c:	75fb      	strb	r3, [r7, #23]
		Status = VL53LX_WrByte(Dev, VL53LX_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53LX_ERROR_NONE)
 800202e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d105      	bne.n	8002042 <VL53LX_DataInit+0x20>
		Status = VL53LX_data_init(Dev, 1);
 8002036:	2101      	movs	r1, #1
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f001 fcba 	bl	80039b2 <VL53LX_data_init>
 800203e:	4603      	mov	r3, r0
 8002040:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53LX_ERROR_NONE)
 8002042:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d107      	bne.n	800205a <VL53LX_DataInit+0x38>
		Status = SetPresetModeL3CX(Dev,
 800204a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800204e:	2102      	movs	r1, #2
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f887 	bl	8002164 <SetPresetModeL3CX>
 8002056:	4603      	mov	r3, r0
 8002058:	75fb      	strb	r3, [r7, #23]
			VL53LX_DISTANCEMODE_MEDIUM,
			1000);


	if (Status == VL53LX_ERROR_NONE)
 800205a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d106      	bne.n	8002070 <VL53LX_DataInit+0x4e>
		Status = VL53LX_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8002062:	f248 2135 	movw	r1, #33333	; 0x8235
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f980 	bl	800236c <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 800206c:	4603      	mov	r3, r0
 800206e:	75fb      	strb	r3, [r7, #23]
				33333);

	if (Status == VL53LX_ERROR_NONE) {
 8002070:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10a      	bne.n	800208e <VL53LX_DataInit+0x6c>
		pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3318      	adds	r3, #24
 800207c:	613b      	str	r3, [r7, #16]
		memset(&pdev->per_vcsel_cal_data, 0,
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002084:	220c      	movs	r2, #12
 8002086:	2100      	movs	r1, #0
 8002088:	4618      	mov	r0, r3
 800208a:	f013 f861 	bl	8015150 <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53LX_ERROR_NONE) {
 800208e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d105      	bne.n	80020a2 <VL53LX_DataInit+0x80>
		Status = VL53LX_set_dmax_mode(Dev,
 8002096:	2102      	movs	r1, #2
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f003 fdb0 	bl	8005bfe <VL53LX_set_dmax_mode>
 800209e:	4603      	mov	r3, r0
 80020a0:	75fb      	strb	r3, [r7, #23]
			VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	if (Status == VL53LX_ERROR_NONE)
 80020a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d105      	bne.n	80020b6 <VL53LX_DataInit+0x94>
		Status = VL53LX_SmudgeCorrectionEnable(Dev,
 80020aa:	2100      	movs	r1, #0
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 ff41 	bl	8002f34 <VL53LX_SmudgeCorrectionEnable>
 80020b2:	4603      	mov	r3, r0
 80020b4:	75fb      	strb	r3, [r7, #23]
			VL53LX_SMUDGE_CORRECTION_NONE);

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80020b6:	2320      	movs	r3, #32
 80020b8:	73fb      	strb	r3, [r7, #15]
	VL53LXDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	7bfa      	ldrb	r2, [r7, #15]
 80020be:	76da      	strb	r2, [r3, #27]

	VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80020c6:	3320      	adds	r3, #32
 80020c8:	2202      	movs	r2, #2
 80020ca:	701a      	strb	r2, [r3, #0]
			VL53LX_DISTANCEMODE_MEDIUM);

	LOG_FUNCTION_END(Status);
	return Status;
 80020cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <VL53LX_WaitDeviceBooted>:


VL53LX_Error VL53LX_WaitDeviceBooted(VL53LX_DEV Dev)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_poll_for_boot_completion(Dev,
 80020e4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f00e fd5c 	bl	8010ba6 <VL53LX_poll_for_boot_completion>
 80020ee:	4603      	mov	r3, r0
 80020f0:	73fb      	strb	r3, [r7, #15]
			VL53LX_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 80020f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <ComputeDevicePresetMode>:


static VL53LX_Error ComputeDevicePresetMode(
		VL53LX_DistanceModes DistanceMode,
		VL53LX_DevicePresetModes *pDevicePresetMode)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	6039      	str	r1, [r7, #0]
 800210a:	71fb      	strb	r3, [r7, #7]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800210c:	2300      	movs	r3, #0
 800210e:	73bb      	strb	r3, [r7, #14]

	uint8_t DistIdx;
	VL53LX_DevicePresetModes RangingModes[3] = {
 8002110:	4a13      	ldr	r2, [pc, #76]	; (8002160 <ComputeDevicePresetMode+0x60>)
 8002112:	f107 0308 	add.w	r3, r7, #8
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	4611      	mov	r1, r2
 800211a:	8019      	strh	r1, [r3, #0]
 800211c:	3302      	adds	r3, #2
 800211e:	0c12      	lsrs	r2, r2, #16
 8002120:	701a      	strb	r2, [r3, #0]
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	switch (DistanceMode) {
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d002      	beq.n	800212e <ComputeDevicePresetMode+0x2e>
 8002128:	2b02      	cmp	r3, #2
 800212a:	d003      	beq.n	8002134 <ComputeDevicePresetMode+0x34>
 800212c:	e005      	b.n	800213a <ComputeDevicePresetMode+0x3a>
	case VL53LX_DISTANCEMODE_SHORT:
		DistIdx = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	73fb      	strb	r3, [r7, #15]
		break;
 8002132:	e004      	b.n	800213e <ComputeDevicePresetMode+0x3e>
	case VL53LX_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
		break;
 8002138:	e001      	b.n	800213e <ComputeDevicePresetMode+0x3e>
	default:
		DistIdx = 2;
 800213a:	2302      	movs	r3, #2
 800213c:	73fb      	strb	r3, [r7, #15]
	}

	*pDevicePresetMode = RangingModes[DistIdx];
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	f107 0210 	add.w	r2, r7, #16
 8002144:	4413      	add	r3, r2
 8002146:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	701a      	strb	r2, [r3, #0]

	return Status;
 800214e:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8002152:	4618      	mov	r0, r3
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	080162fc 	.word	0x080162fc

08002164 <SetPresetModeL3CX>:

static VL53LX_Error SetPresetModeL3CX(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8002164:	b5b0      	push	{r4, r5, r7, lr}
 8002166:	b08e      	sub	sp, #56	; 0x38
 8002168:	af04      	add	r7, sp, #16
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	460b      	mov	r3, r1
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002172:	2300      	movs	r3, #0
 8002174:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8002188:	2320      	movs	r3, #32
 800218a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	Status = ComputeDevicePresetMode(DistanceMode,
 800218e:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8002192:	7afb      	ldrb	r3, [r7, #11]
 8002194:	4611      	mov	r1, r2
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff ffb2 	bl	8002100 <ComputeDevicePresetMode>
 800219c:	4603      	mov	r3, r0
 800219e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53LX_ERROR_NONE)
 80021a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d112      	bne.n	80021d0 <SetPresetModeL3CX+0x6c>
		Status =  VL53LX_get_preset_mode_timing_cfg(Dev,
 80021aa:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80021ae:	f107 001c 	add.w	r0, r7, #28
 80021b2:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80021b6:	f107 0314 	add.w	r3, r7, #20
 80021ba:	9301      	str	r3, [sp, #4]
 80021bc:	f107 0318 	add.w	r3, r7, #24
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	4603      	mov	r3, r0
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f002 f859 	bl	800427c <VL53LX_get_preset_mode_timing_cfg>
 80021ca:	4603      	mov	r3, r0
 80021cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53LX_ERROR_NONE)
 80021d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d112      	bne.n	80021fe <SetPresetModeL3CX+0x9a>
		Status = VL53LX_set_preset_mode(
 80021d8:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 80021dc:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 80021de:	69fd      	ldr	r5, [r7, #28]
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	9102      	str	r1, [sp, #8]
 80021e8:	9201      	str	r2, [sp, #4]
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	462b      	mov	r3, r5
 80021ee:	4622      	mov	r2, r4
 80021f0:	4601      	mov	r1, r0
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f002 f8a3 	bl	800433e <VL53LX_set_preset_mode>
 80021f8:	4603      	mov	r3, r0
 80021fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 80021fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002202:	2b00      	cmp	r3, #0
 8002204:	d103      	bne.n	800220e <SetPresetModeL3CX+0xaa>
		VL53LXDevDataSet(Dev, LLData.measurement_mode,
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800220c:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	LOG_FUNCTION_END(Status);
	return Status;
 800220e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002212:	4618      	mov	r0, r3
 8002214:	3728      	adds	r7, #40	; 0x28
 8002216:	46bd      	mov	sp, r7
 8002218:	bdb0      	pop	{r4, r5, r7, pc}

0800221a <IsL4>:

static int IsL4(VL53LX_DEV Dev)
{
 800221a:	b480      	push	{r7}
 800221c:	b085      	sub	sp, #20
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
	int devL4 = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
	VL53LX_LLDriverData_t *pDev;
	pDev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3318      	adds	r3, #24
 800222a:	60bb      	str	r3, [r7, #8]

	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f893 3393 	ldrb.w	r3, [r3, #915]	; 0x393
 8002232:	2baa      	cmp	r3, #170	; 0xaa
 8002234:	d106      	bne.n	8002244 <IsL4+0x2a>
		(pDev->nvm_copy_data.identification__model_id == 0xEB))
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	f893 3392 	ldrb.w	r3, [r3, #914]	; 0x392
	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 800223c:	2beb      	cmp	r3, #235	; 0xeb
 800223e:	d101      	bne.n	8002244 <IsL4+0x2a>
		devL4 = 1;
 8002240:	2301      	movs	r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
	return devL4;
 8002244:	68fb      	ldr	r3, [r7, #12]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <CheckValidRectRoi>:

static VL53LX_Error CheckValidRectRoi(VL53LX_UserRoi_t ROI)
{
 8002252:	b480      	push	{r7}
 8002254:	b085      	sub	sp, #20
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800225a:	2300      	movs	r3, #0
 800225c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 800225e:	793b      	ldrb	r3, [r7, #4]
 8002260:	2b0f      	cmp	r3, #15
 8002262:	d808      	bhi.n	8002276 <CheckValidRectRoi+0x24>
 8002264:	797b      	ldrb	r3, [r7, #5]
 8002266:	2b0f      	cmp	r3, #15
 8002268:	d805      	bhi.n	8002276 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 800226a:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 800226c:	2b0f      	cmp	r3, #15
 800226e:	d802      	bhi.n	8002276 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	2b0f      	cmp	r3, #15
 8002274:	d901      	bls.n	800227a <CheckValidRectRoi+0x28>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8002276:	23fc      	movs	r3, #252	; 0xfc
 8002278:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 800227a:	793a      	ldrb	r2, [r7, #4]
 800227c:	79bb      	ldrb	r3, [r7, #6]
 800227e:	429a      	cmp	r2, r3
 8002280:	d803      	bhi.n	800228a <CheckValidRectRoi+0x38>
 8002282:	797a      	ldrb	r2, [r7, #5]
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	429a      	cmp	r2, r3
 8002288:	d201      	bcs.n	800228e <CheckValidRectRoi+0x3c>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 800228a:	23fc      	movs	r3, #252	; 0xfc
 800228c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800228e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <VL53LX_SetDistanceMode>:


VL53LX_Error VL53LX_SetDistanceMode(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b088      	sub	sp, #32
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	460b      	mov	r3, r1
 80022a8:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80022aa:	2300      	movs	r3, #0
 80022ac:	77fb      	strb	r3, [r7, #31]
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("%d", (int)DistanceMode);



	if ((DistanceMode != VL53LX_DISTANCEMODE_SHORT) &&
 80022ba:	78fb      	ldrb	r3, [r7, #3]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d008      	beq.n	80022d2 <VL53LX_SetDistanceMode+0x34>
 80022c0:	78fb      	ldrb	r3, [r7, #3]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d005      	beq.n	80022d2 <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_MEDIUM) &&
 80022c6:	78fb      	ldrb	r3, [r7, #3]
 80022c8:	2b03      	cmp	r3, #3
 80022ca:	d002      	beq.n	80022d2 <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_LONG))
		return VL53LX_ERROR_INVALID_PARAMS;
 80022cc:	f06f 0303 	mvn.w	r3, #3
 80022d0:	e048      	b.n	8002364 <VL53LX_SetDistanceMode+0xc6>

	if (IsL4(Dev) && (DistanceMode == VL53LX_DISTANCEMODE_SHORT))
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff ffa1 	bl	800221a <IsL4>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d005      	beq.n	80022ea <VL53LX_SetDistanceMode+0x4c>
 80022de:	78fb      	ldrb	r3, [r7, #3]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d102      	bne.n	80022ea <VL53LX_SetDistanceMode+0x4c>
		return VL53LX_ERROR_INVALID_PARAMS;
 80022e4:	f06f 0303 	mvn.w	r3, #3
 80022e8:	e03c      	b.n	8002364 <VL53LX_SetDistanceMode+0xc6>

	inter_measurement_period_ms =  VL53LXDevDataGet(Dev,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ee:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 80022f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10a      	bne.n	800230e <VL53LX_SetDistanceMode+0x70>
		Status = VL53LX_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	f107 0210 	add.w	r2, r7, #16
 8002300:	f107 010c 	add.w	r1, r7, #12
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f001 fe92 	bl	800402e <VL53LX_get_timeouts_us>
 800230a:	4603      	mov	r3, r0
 800230c:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53LX_ERROR_NONE)
 800230e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d107      	bne.n	8002326 <VL53LX_SetDistanceMode+0x88>
		Status = SetPresetModeL3CX(Dev,
 8002316:	78fb      	ldrb	r3, [r7, #3]
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4619      	mov	r1, r3
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff ff21 	bl	8002164 <SetPresetModeL3CX>
 8002322:	4603      	mov	r3, r0
 8002324:	77fb      	strb	r3, [r7, #31]
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE) {
 8002326:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d105      	bne.n	800233a <VL53LX_SetDistanceMode+0x9c>
		VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8002334:	3320      	adds	r3, #32
 8002336:	78fa      	ldrb	r2, [r7, #3]
 8002338:	701a      	strb	r2, [r3, #0]
				DistanceMode);
	}

	if (Status == VL53LX_ERROR_NONE) {
 800233a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10e      	bne.n	8002360 <VL53LX_SetDistanceMode+0xc2>
		Status = VL53LX_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8002342:	68f9      	ldr	r1, [r7, #12]
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f001 fe37 	bl	8003fbc <VL53LX_set_timeouts_us>
 800234e:	4603      	mov	r3, r0
 8002350:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53LX_ERROR_NONE)
 8002352:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d102      	bne.n	8002360 <VL53LX_SetDistanceMode+0xc2>
			VL53LXDevDataSet(Dev, LLData.range_config_timeout_us,
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	629a      	str	r2, [r3, #40]	; 0x28
				TimingBudget);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002360:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3720      	adds	r7, #32
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <VL53LX_SetMeasurementTimingBudgetMicroSeconds>:
}


VL53LX_Error VL53LX_SetMeasurementTimingBudgetMicroSeconds(VL53LX_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	; 0x28
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002376:	2300      	movs	r3, #0
 8002378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8002380:	2300      	movs	r3, #0
 8002382:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	60fb      	str	r3, [r7, #12]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8002388:	4b31      	ldr	r3, [pc, #196]	; (8002450 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe4>)
 800238a:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	4a31      	ldr	r2, [pc, #196]	; (8002454 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe8>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d902      	bls.n	800239a <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x2e>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8002394:	23fc      	movs	r3, #252	; 0xfc
 8002396:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53LX_ERROR_NONE)
 800239a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10b      	bne.n	80023ba <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x4e>
		Status = VL53LX_get_timeouts_us(Dev,
 80023a2:	f107 0314 	add.w	r3, r7, #20
 80023a6:	f107 0210 	add.w	r2, r7, #16
 80023aa:	f107 010c 	add.w	r1, r7, #12
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f001 fe3d 	bl	800402e <VL53LX_get_timeouts_us>
 80023b4:	4603      	mov	r3, r0
 80023b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	TimingGuard = 1700;
 80023ba:	f240 63a4 	movw	r3, #1700	; 0x6a4
 80023be:	61fb      	str	r3, [r7, #28]
	divisor = 6;
 80023c0:	2306      	movs	r3, #6
 80023c2:	61bb      	str	r3, [r7, #24]

	if (IsL4(Dev))
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff ff28 	bl	800221a <IsL4>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x68>
		FDAMaxTimingBudgetUs = L4_FDA_MAX_TIMING_BUDGET_US;
 80023d0:	4b21      	ldr	r3, [pc, #132]	; (8002458 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xec>)
 80023d2:	623b      	str	r3, [r7, #32]

	if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d803      	bhi.n	80023e4 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x78>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 80023dc:	23fc      	movs	r3, #252	; 0xfc
 80023de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80023e2:	e003      	b.n	80023ec <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x80>
	else {
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
				- TimingGuard);
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	1ad3      	subs	r3, r2, r3
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
 80023ea:	617b      	str	r3, [r7, #20]
	}

	if (Status == VL53LX_ERROR_NONE) {
 80023ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d11c      	bne.n	800242e <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
		if (TimingBudget > FDAMaxTimingBudgetUs)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	6a3a      	ldr	r2, [r7, #32]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d203      	bcs.n	8002404 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x98>
			Status = VL53LX_ERROR_INVALID_PARAMS;
 80023fc:	23fc      	movs	r3, #252	; 0xfc
 80023fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002402:	e00d      	b.n	8002420 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xb4>
		else {
			TimingBudget /= divisor;
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	fbb2 f3f3 	udiv	r3, r2, r3
 800240c:	617b      	str	r3, [r7, #20]
			Status = VL53LX_set_timeouts_us(
 800240e:	68f9      	ldr	r1, [r7, #12]
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f001 fdd1 	bl	8003fbc <VL53LX_set_timeouts_us>
 800241a:	4603      	mov	r3, r0
 800241c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				PhaseCalTimeoutUs,
				MmTimeoutUs,
				TimingBudget);
		}

		if (Status == VL53LX_ERROR_NONE)
 8002420:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002424:	2b00      	cmp	r3, #0
 8002426:	d102      	bne.n	800242e <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
			VL53LXDevDataSet(Dev,
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	629a      	str	r2, [r3, #40]	; 0x28
				LLData.range_config_timeout_us,
				TimingBudget);
	}

	if (Status == VL53LX_ERROR_NONE) {
 800242e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002432:	2b00      	cmp	r3, #0
 8002434:	d105      	bne.n	8002442 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xd6>
		VL53LXDevDataSet(Dev,
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 800243c:	3324      	adds	r3, #36	; 0x24
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	601a      	str	r2, [r3, #0]
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002442:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002446:	4618      	mov	r0, r3
 8002448:	3728      	adds	r7, #40	; 0x28
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	00086470 	.word	0x00086470
 8002454:	00989680 	.word	0x00989680
 8002458:	00030d40 	.word	0x00030d40

0800245c <VL53LX_SetUserROI>:



VL53LX_Error VL53LX_SetUserROI(VL53LX_DEV Dev,
		VL53LX_UserRoi_t *pRoi)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b092      	sub	sp, #72	; 0x48
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002466:	2300      	movs	r3, #0
 8002468:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	VL53LX_zone_config_t  zone_cfg;
	uint8_t x_centre, y_centre, width, height;

	Status = CheckValidRectRoi(*pRoi);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	2300      	movs	r3, #0
 8002472:	4613      	mov	r3, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff feec 	bl	8002252 <CheckValidRectRoi>
 800247a:	4603      	mov	r3, r0
 800247c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (Status != VL53LX_ERROR_NONE)
 8002480:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002484:	2b00      	cmp	r3, #0
 8002486:	d002      	beq.n	800248e <VL53LX_SetUserROI+0x32>
		return VL53LX_ERROR_INVALID_PARAMS;
 8002488:	f06f 0303 	mvn.w	r3, #3
 800248c:	e050      	b.n	8002530 <VL53LX_SetUserROI+0xd4>

	x_centre = (pRoi->BotRightX + pRoi->TopLeftX  + 1) / 2;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	789b      	ldrb	r3, [r3, #2]
 8002492:	461a      	mov	r2, r3
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	4413      	add	r3, r2
 800249a:	3301      	adds	r3, #1
 800249c:	0fda      	lsrs	r2, r3, #31
 800249e:	4413      	add	r3, r2
 80024a0:	105b      	asrs	r3, r3, #1
 80024a2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	y_centre = (pRoi->TopLeftY  + pRoi->BotRightY + 1) / 2;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	785b      	ldrb	r3, [r3, #1]
 80024aa:	461a      	mov	r2, r3
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	78db      	ldrb	r3, [r3, #3]
 80024b0:	4413      	add	r3, r2
 80024b2:	3301      	adds	r3, #1
 80024b4:	0fda      	lsrs	r2, r3, #31
 80024b6:	4413      	add	r3, r2
 80024b8:	105b      	asrs	r3, r3, #1
 80024ba:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	width =    (pRoi->BotRightX - pRoi->TopLeftX);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	789a      	ldrb	r2, [r3, #2]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	height =   (pRoi->TopLeftY  - pRoi->BotRightY);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	785a      	ldrb	r2, [r3, #1]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	78db      	ldrb	r3, [r3, #3]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	zone_cfg.max_zones = 1;
 80024da:	2301      	movs	r3, #1
 80024dc:	733b      	strb	r3, [r7, #12]
	zone_cfg.active_zones = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	737b      	strb	r3, [r7, #13]
	zone_cfg.user_zones[0].x_centre = x_centre;
 80024e2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80024e6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	zone_cfg.user_zones[0].y_centre = y_centre;
 80024ea:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80024ee:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	zone_cfg.user_zones[0].width = width;
 80024f2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80024f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	zone_cfg.user_zones[0].height = height;
 80024fa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80024fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if ((width < 3) || (height < 3))
 8002502:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002506:	2b02      	cmp	r3, #2
 8002508:	d903      	bls.n	8002512 <VL53LX_SetUserROI+0xb6>
 800250a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800250e:	2b02      	cmp	r3, #2
 8002510:	d803      	bhi.n	800251a <VL53LX_SetUserROI+0xbe>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8002512:	23fc      	movs	r3, #252	; 0xfc
 8002514:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002518:	e008      	b.n	800252c <VL53LX_SetUserROI+0xd0>
	else
		Status =  VL53LX_set_zone_config(Dev, &zone_cfg);
 800251a:	f107 030c 	add.w	r3, r7, #12
 800251e:	4619      	mov	r1, r3
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f001 fe68 	bl	80041f6 <VL53LX_set_zone_config>
 8002526:	4603      	mov	r3, r0
 8002528:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	LOG_FUNCTION_END(Status);
	return Status;
 800252c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8002530:	4618      	mov	r0, r3
 8002532:	3748      	adds	r7, #72	; 0x48
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <VL53LX_StartMeasurement>:




VL53LX_Error VL53LX_StartMeasurement(VL53LX_DEV Dev)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002540:	2300      	movs	r3, #0
 8002542:	75fb      	strb	r3, [r7, #23]
	uint8_t DeviceMeasurementMode;
	uint8_t i;
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3318      	adds	r3, #24
 8002548:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	VL53LX_load_patch(Dev);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f001 f90c 	bl	8003768 <VL53LX_load_patch>
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8002550:	2300      	movs	r3, #0
 8002552:	75bb      	strb	r3, [r7, #22]
 8002554:	e01a      	b.n	800258c <VL53LX_StartMeasurement+0x54>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8002556:	7dbb      	ldrb	r3, [r7, #22]
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800255e:	3308      	adds	r3, #8
 8002560:	2100      	movs	r1, #0
 8002562:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8002566:	7dbb      	ldrb	r3, [r7, #22]
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4413      	add	r3, r2
 800256c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002570:	3318      	adds	r3, #24
 8002572:	22ff      	movs	r2, #255	; 0xff
 8002574:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8002576:	7dbb      	ldrb	r3, [r7, #22]
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4413      	add	r3, r2
 800257c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002580:	331c      	adds	r3, #28
 8002582:	2200      	movs	r2, #0
 8002584:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8002586:	7dbb      	ldrb	r3, [r7, #22]
 8002588:	3301      	adds	r3, #1
 800258a:	75bb      	strb	r3, [r7, #22]
 800258c:	7dbb      	ldrb	r3, [r7, #22]
 800258e:	2b03      	cmp	r3, #3
 8002590:	d9e1      	bls.n	8002556 <VL53LX_StartMeasurement+0x1e>
	}
	pdev->PreviousStreamCount = 0;
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002598:	3321      	adds	r3, #33	; 0x21
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = 0;
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80025a4:	3320      	adds	r3, #32
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	7edb      	ldrb	r3, [r3, #27]
 80025ae:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53LX_ERROR_NONE)
 80025b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d107      	bne.n	80025c8 <VL53LX_StartMeasurement+0x90>
		Status = VL53LX_init_and_start_range(
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	2206      	movs	r2, #6
 80025bc:	4619      	mov	r1, r3
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f001 ff80 	bl	80044c4 <VL53LX_init_and_start_range>
 80025c4:	4603      	mov	r3, r0
 80025c6:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53LX_DEVICECONFIGLEVEL_FULL);

	LOG_FUNCTION_END(Status);
	return Status;
 80025c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <VL53LX_StopMeasurement>:

VL53LX_Error VL53LX_StopMeasurement(VL53LX_DEV Dev)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80025dc:	2300      	movs	r3, #0
 80025de:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_stop_range(Dev);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f002 f9f9 	bl	80049d8 <VL53LX_stop_range>
 80025e6:	4603      	mov	r3, r0
 80025e8:	73fb      	strb	r3, [r7, #15]

	VL53LX_unload_patch(Dev);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f001 f9ac 	bl	8003948 <VL53LX_unload_patch>

	LOG_FUNCTION_END(Status);
	return Status;
 80025f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <VL53LX_ClearInterruptAndStartMeasurement>:


VL53LX_Error VL53LX_ClearInterruptAndStartMeasurement(VL53LX_DEV Dev)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002604:	2300      	movs	r3, #0
 8002606:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	7edb      	ldrb	r3, [r3, #27]
 800260c:	73bb      	strb	r3, [r7, #14]

	Status = VL53LX_clear_interrupt_and_enable_next_range(Dev,
 800260e:	7bbb      	ldrb	r3, [r7, #14]
 8002610:	4619      	mov	r1, r3
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f002 fedc 	bl	80053d0 <VL53LX_clear_interrupt_and_enable_next_range>
 8002618:	4603      	mov	r3, r0
 800261a:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 800261c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <VL53LX_GetMeasurementDataReady>:


VL53LX_Error VL53LX_GetMeasurementDataReady(VL53LX_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002632:	2300      	movs	r3, #0
 8002634:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_is_new_data_ready(Dev, pMeasurementDataReady);
 8002636:	6839      	ldr	r1, [r7, #0]
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f00e fa7a 	bl	8010b32 <VL53LX_is_new_data_ready>
 800263e:	4603      	mov	r3, r0
 8002640:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8002642:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <ConvertStatusHisto>:
	LOG_FUNCTION_END(Status);
	return Status;
}

static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	3b05      	subs	r3, #5
 800265e:	2b12      	cmp	r3, #18
 8002660:	d840      	bhi.n	80026e4 <ConvertStatusHisto+0x94>
 8002662:	a201      	add	r2, pc, #4	; (adr r2, 8002668 <ConvertStatusHisto+0x18>)
 8002664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002668:	080026b5 	.word	0x080026b5
 800266c:	080026bb 	.word	0x080026bb
 8002670:	080026c7 	.word	0x080026c7
 8002674:	080026e5 	.word	0x080026e5
 8002678:	080026df 	.word	0x080026df
 800267c:	080026e5 	.word	0x080026e5
 8002680:	080026e5 	.word	0x080026e5
 8002684:	080026e5 	.word	0x080026e5
 8002688:	080026e5 	.word	0x080026e5
 800268c:	080026e5 	.word	0x080026e5
 8002690:	080026e5 	.word	0x080026e5
 8002694:	080026e5 	.word	0x080026e5
 8002698:	080026e5 	.word	0x080026e5
 800269c:	080026e5 	.word	0x080026e5
 80026a0:	080026c1 	.word	0x080026c1
 80026a4:	080026d3 	.word	0x080026d3
 80026a8:	080026e5 	.word	0x080026e5
 80026ac:	080026d9 	.word	0x080026d9
 80026b0:	080026cd 	.word	0x080026cd
	case VL53LX_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL;
 80026b4:	2304      	movs	r3, #4
 80026b6:	73fb      	strb	r3, [r7, #15]
		break;
 80026b8:	e016      	b.n	80026e8 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53LX_RANGESTATUS_SIGMA_FAIL;
 80026ba:	2301      	movs	r3, #1
 80026bc:	73fb      	strb	r3, [r7, #15]
		break;
 80026be:	e013      	b.n	80026e8 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus =
 80026c0:	2306      	movs	r3, #6
 80026c2:	73fb      	strb	r3, [r7, #15]
			VL53LX_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
		break;
 80026c4:	e010      	b.n	80026e8 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 80026c6:	2307      	movs	r3, #7
 80026c8:	73fb      	strb	r3, [r7, #15]
		break;
 80026ca:	e00d      	b.n	80026e8 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53LX_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 80026cc:	230c      	movs	r3, #12
 80026ce:	73fb      	strb	r3, [r7, #15]
		break;
 80026d0:	e00a      	b.n	80026e8 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 80026d2:	2307      	movs	r3, #7
 80026d4:	73fb      	strb	r3, [r7, #15]
		break;
 80026d6:	e007      	b.n	80026e8 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 80026d8:	230b      	movs	r3, #11
 80026da:	73fb      	strb	r3, [r7, #15]
		break;
 80026dc:	e004      	b.n	80026e8 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID;
 80026de:	2300      	movs	r3, #0
 80026e0:	73fb      	strb	r3, [r7, #15]
		break;
 80026e2:	e001      	b.n	80026e8 <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53LX_RANGESTATUS_NONE;
 80026e4:	23ff      	movs	r3, #255	; 0xff
 80026e6:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop

080026f8 <SetTargetData>:

static VL53LX_Error SetTargetData(VL53LX_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53LX_range_data_t *presults_data,
	VL53LX_TargetRangeData_t *pRangeData)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08e      	sub	sp, #56	; 0x38
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	4608      	mov	r0, r1
 8002702:	4611      	mov	r1, r2
 8002704:	461a      	mov	r2, r3
 8002706:	4603      	mov	r3, r0
 8002708:	70fb      	strb	r3, [r7, #3]
 800270a:	460b      	mov	r3, r1
 800270c:	70bb      	strb	r3, [r7, #2]
 800270e:	4613      	mov	r3, r2
 8002710:	707b      	strb	r3, [r7, #1]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002712:	2300      	movs	r3, #0
 8002714:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	VL53LX_LLDriverData_t *pdev =
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3318      	adds	r3, #24
 800271c:	62fb      	str	r3, [r7, #44]	; 0x2c
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_tuning_parm_storage_t *tp =
 800271e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002720:	33f8      	adds	r3, #248	; 0xf8
 8002722:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t FilteredRangeStatus;
	FixPoint1616_t AmbientRate;
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	60fb      	str	r3, [r7, #12]
	uint8_t uwr_status;
	int16_t AddOffset;

	SUPPRESS_UNUSED_WARNING(Dev);

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8002728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800272a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800272e:	f003 031f 	and.w	r3, r3, #31
 8002732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	SignalRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8002736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002738:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800273a:	025b      	lsls	r3, r3, #9
 800273c:	623b      	str	r3, [r7, #32]
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 800273e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002740:	6a3a      	ldr	r2, [r7, #32]
 8002742:	605a      	str	r2, [r3, #4]

	AmbientRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8002744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002746:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002748:	025b      	lsls	r3, r3, #9
 800274a:	61fb      	str	r3, [r7, #28]
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 800274c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800274e:	69fa      	ldr	r2, [r7, #28]
 8002750:	609a      	str	r2, [r3, #8]

	TempFix1616 = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8002752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002754:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002756:	025b      	lsls	r3, r3, #9
 8002758:	61bb      	str	r3, [r7, #24]
			presults_data->VL53LX_p_002);

	pRangeData->SigmaMilliMeter = TempFix1616;
 800275a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	60da      	str	r2, [r3, #12]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8002760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002762:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8002766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002768:	821a      	strh	r2, [r3, #16]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 800276a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800276c:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8002770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002772:	801a      	strh	r2, [r3, #0]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 8002774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002776:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 800277a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800277c:	805a      	strh	r2, [r3, #2]


	switch (device_status) {
 800277e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002782:	2b11      	cmp	r3, #17
 8002784:	d009      	beq.n	800279a <SetTargetData+0xa2>
 8002786:	2b11      	cmp	r3, #17
 8002788:	dc0f      	bgt.n	80027aa <SetTargetData+0xb2>
 800278a:	2b03      	cmp	r3, #3
 800278c:	dc02      	bgt.n	8002794 <SetTargetData+0x9c>
 800278e:	2b00      	cmp	r3, #0
 8002790:	dc03      	bgt.n	800279a <SetTargetData+0xa2>
 8002792:	e00a      	b.n	80027aa <SetTargetData+0xb2>
 8002794:	2b0d      	cmp	r3, #13
 8002796:	d004      	beq.n	80027a2 <SetTargetData+0xaa>
 8002798:	e007      	b.n	80027aa <SetTargetData+0xb2>
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_HARDWARE_FAIL;
 800279a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800279c:	2205      	movs	r2, #5
 800279e:	749a      	strb	r2, [r3, #18]
		break;
 80027a0:	e006      	b.n	80027b0 <SetTargetData+0xb8>
	case VL53LX_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_MIN_RANGE_FAIL;
 80027a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027a4:	220d      	movs	r2, #13
 80027a6:	749a      	strb	r2, [r3, #18]
		break;
 80027a8:	e002      	b.n	80027b0 <SetTargetData+0xb8>
	default:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_RANGE_VALID;
 80027aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ac:	2200      	movs	r2, #0
 80027ae:	749a      	strb	r2, [r3, #18]
	}


	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 80027b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027b2:	7c9b      	ldrb	r3, [r3, #18]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d117      	bne.n	80027e8 <SetTargetData+0xf0>
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d114      	bne.n	80027e8 <SetTargetData+0xf0>
		(active_results == 0)) {
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_NONE;
 80027be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027c0:	22ff      	movs	r2, #255	; 0xff
 80027c2:	749a      	strb	r2, [r3, #18]
		pRangeData->SignalRateRtnMegaCps = 0;
 80027c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027c6:	2200      	movs	r2, #0
 80027c8:	605a      	str	r2, [r3, #4]
		pRangeData->SigmaMilliMeter = 0;
 80027ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027cc:	2200      	movs	r2, #0
 80027ce:	60da      	str	r2, [r3, #12]
		pRangeData->RangeMilliMeter = 8191;
 80027d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027d2:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80027d6:	821a      	strh	r2, [r3, #16]
		pRangeData->RangeMaxMilliMeter = 8191;
 80027d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027da:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80027de:	801a      	strh	r2, [r3, #0]
		pRangeData->RangeMinMilliMeter = 8191;
 80027e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027e2:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80027e6:	805a      	strh	r2, [r3, #2]
	}


	if (pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID)
 80027e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ea:	7c9b      	ldrb	r3, [r3, #18]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d108      	bne.n	8002802 <SetTargetData+0x10a>
		pRangeData->RangeStatus =
			ConvertStatusHisto(FilteredRangeStatus);
 80027f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff ff2b 	bl	8002650 <ConvertStatusHisto>
 80027fa:	4603      	mov	r3, r0
 80027fc:	461a      	mov	r2, r3
		pRangeData->RangeStatus =
 80027fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002800:	749a      	strb	r2, [r3, #18]



	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_UWR_ENABLE,
 8002802:	f107 030c 	add.w	r3, r7, #12
 8002806:	461a      	mov	r2, r3
 8002808:	f248 0191 	movw	r1, #32913	; 0x8091
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f003 fa37 	bl	8005c80 <VL53LX_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 8002812:	78bb      	ldrb	r3, [r7, #2]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	75fb      	strb	r3, [r7, #23]
	uwr_status = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 8002820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002822:	8a1b      	ldrh	r3, [r3, #16]
 8002824:	82bb      	strh	r3, [r7, #20]
	AddOffset = 0;
 8002826:	2300      	movs	r3, #0
 8002828:	86bb      	strh	r3, [r7, #52]	; 0x34

	pRangeData->ExtendedRange = 0;
 800282a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800282c:	2200      	movs	r2, #0
 800282e:	74da      	strb	r2, [r3, #19]

	if ((active_results != 1) ||
 8002830:	78fb      	ldrb	r3, [r7, #3]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d106      	bne.n	8002844 <SetTargetData+0x14c>
		(pdev->PreviousRangeActiveResults != 1))
 8002836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002838:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800283c:	3320      	adds	r3, #32
 800283e:	781b      	ldrb	r3, [r3, #0]
	if ((active_results != 1) ||
 8002840:	2b01      	cmp	r3, #1
 8002842:	d001      	beq.n	8002848 <SetTargetData+0x150>
		ExtendedRangeEnabled = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 81dc 	beq.w	8002c08 <SetTargetData+0x510>
		(pRangeData->RangeStatus ==
 8002850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002852:	7c9b      	ldrb	r3, [r3, #18]
	if (ExtendedRangeEnabled &&
 8002854:	2b07      	cmp	r3, #7
 8002856:	d004      	beq.n	8002862 <SetTargetData+0x16a>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 8002858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800285a:	7c9b      	ldrb	r3, [r3, #18]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 800285c:	2b04      	cmp	r3, #4
 800285e:	f040 81d3 	bne.w	8002c08 <SetTargetData+0x510>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 8002862:	787b      	ldrb	r3, [r7, #1]
 8002864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002866:	4413      	add	r3, r2
 8002868:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800286c:	3318      	adds	r3, #24
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b07      	cmp	r3, #7
 8002872:	d01c      	beq.n	80028ae <SetTargetData+0x1b6>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 8002874:	787b      	ldrb	r3, [r7, #1]
 8002876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002878:	4413      	add	r3, r2
 800287a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800287e:	3318      	adds	r3, #24
 8002880:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 8002882:	2b04      	cmp	r3, #4
 8002884:	d013      	beq.n	80028ae <SetTargetData+0x1b6>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 8002886:	787b      	ldrb	r3, [r7, #1]
 8002888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800288a:	4413      	add	r3, r2
 800288c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002890:	3318      	adds	r3, #24
 8002892:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 8002894:	2b00      	cmp	r3, #0
 8002896:	f040 81b7 	bne.w	8002c08 <SetTargetData+0x510>
			VL53LX_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 800289a:	787b      	ldrb	r3, [r7, #1]
 800289c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800289e:	4413      	add	r3, r2
 80028a0:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80028a4:	331c      	adds	r3, #28
 80028a6:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_RANGE_VALID &&
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	f040 81ad 	bne.w	8002c08 <SetTargetData+0x510>
	{
		if (((pdev->PreviousStreamCount) ==
 80028ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b0:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80028b4:	3321      	adds	r3, #33	; 0x21
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 80028ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028bc:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 80028c0:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d00c      	beq.n	80028e0 <SetTargetData+0x1e8>
		|| ((pdev->PreviousStreamCount) ==
 80028c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c8:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80028cc:	3321      	adds	r3, #33	; 0x21
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 80028d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d4:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 80028d8:	337f      	adds	r3, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 80028da:	429a      	cmp	r2, r3
 80028dc:	f040 816b 	bne.w	8002bb6 <SetTargetData+0x4be>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 80028e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028e2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80028e6:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 80028e8:	787b      	ldrb	r3, [r7, #1]
 80028ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80028ec:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80028f0:	3308      	adds	r3, #8
 80028f2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80028f6:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	827b      	strh	r3, [r7, #18]

		uwr_status = 1;
 80028fe:	2301      	movs	r3, #1
 8002900:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		switch (pdev->preset_mode) {
 8002904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002906:	785b      	ldrb	r3, [r3, #1]
 8002908:	2b21      	cmp	r3, #33	; 0x21
 800290a:	d008      	beq.n	800291e <SetTargetData+0x226>
 800290c:	2b21      	cmp	r3, #33	; 0x21
 800290e:	f300 814e 	bgt.w	8002bae <SetTargetData+0x4b6>
 8002912:	2b1b      	cmp	r3, #27
 8002914:	f000 80d7 	beq.w	8002ac6 <SetTargetData+0x3ce>
 8002918:	2b1e      	cmp	r3, #30
 800291a:	d004      	beq.n	8002926 <SetTargetData+0x22e>
 800291c:	e147      	b.n	8002bae <SetTargetData+0x4b6>
			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 800291e:	2300      	movs	r3, #0
 8002920:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8002924:	e148      	b.n	8002bb8 <SetTargetData+0x4c0>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8002926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002928:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 800292c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002930:	429a      	cmp	r2, r3
 8002932:	dd0e      	ble.n	8002952 <SetTargetData+0x25a>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8002934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002936:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 800293a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800293e:	429a      	cmp	r2, r3
 8002940:	da07      	bge.n	8002952 <SetTargetData+0x25a>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8002942:	7dfb      	ldrb	r3, [r7, #23]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d104      	bne.n	8002952 <SetTargetData+0x25a>
					sequency == 1) {
					AddOffset =
 8002948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294a:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800294e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002950:	e0b8      	b.n	8002ac4 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8002952:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002958:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 800295c:	425b      	negs	r3, r3
 800295e:	429a      	cmp	r2, r3
 8002960:	da0f      	bge.n	8002982 <SetTargetData+0x28a>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8002962:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002968:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 800296c:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 800296e:	429a      	cmp	r2, r3
 8002970:	dd07      	ble.n	8002982 <SetTargetData+0x28a>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8002972:	7dfb      	ldrb	r3, [r7, #23]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d104      	bne.n	8002982 <SetTargetData+0x28a>
					sequency == 0) {
					AddOffset =
 8002978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297a:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 800297e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002980:	e0a0      	b.n	8002ac4 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8002982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002984:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8002988:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800298c:	429a      	cmp	r2, r3
 800298e:	dd0e      	ble.n	80029ae <SetTargetData+0x2b6>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8002990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002992:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8002996:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800299a:	429a      	cmp	r2, r3
 800299c:	da07      	bge.n	80029ae <SetTargetData+0x2b6>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 800299e:	7dfb      	ldrb	r3, [r7, #23]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d104      	bne.n	80029ae <SetTargetData+0x2b6>
					sequency == 0) {
					AddOffset =
 80029a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a6:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 80029aa:	86bb      	strh	r3, [r7, #52]	; 0x34
 80029ac:	e08a      	b.n	8002ac4 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 80029ae:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80029b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b4:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 80029b8:	425b      	negs	r3, r3
 80029ba:	429a      	cmp	r2, r3
 80029bc:	da0f      	bge.n	80029de <SetTargetData+0x2e6>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 80029be:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80029c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c4:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 80029c8:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 80029ca:	429a      	cmp	r2, r3
 80029cc:	dd07      	ble.n	80029de <SetTargetData+0x2e6>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 80029ce:	7dfb      	ldrb	r3, [r7, #23]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d104      	bne.n	80029de <SetTargetData+0x2e6>
					sequency == 1) {
					AddOffset =
 80029d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d6:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80029da:	86bb      	strh	r3, [r7, #52]	; 0x34
 80029dc:	e072      	b.n	8002ac4 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 80029de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e0:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 80029e4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	dd0e      	ble.n	8002a0a <SetTargetData+0x312>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 80029ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ee:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 80029f2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	da07      	bge.n	8002a0a <SetTargetData+0x312>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 80029fa:	7dfb      	ldrb	r3, [r7, #23]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d104      	bne.n	8002a0a <SetTargetData+0x312>
					sequency == 1) {
					AddOffset =
 8002a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a02:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8002a06:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002a08:	e05c      	b.n	8002ac4 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8002a0a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a10:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8002a14:	425b      	negs	r3, r3
 8002a16:	429a      	cmp	r2, r3
 8002a18:	da0f      	bge.n	8002a3a <SetTargetData+0x342>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8002a1a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a20:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 8002a24:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8002a26:	429a      	cmp	r2, r3
 8002a28:	dd07      	ble.n	8002a3a <SetTargetData+0x342>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8002a2a:	7dfb      	ldrb	r3, [r7, #23]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d104      	bne.n	8002a3a <SetTargetData+0x342>
					sequency == 0) {
					AddOffset =
 8002a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a32:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8002a36:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002a38:	e044      	b.n	8002ac4 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8002a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3c:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8002a40:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	dd0e      	ble.n	8002a66 <SetTargetData+0x36e>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8002a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4a:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8002a4e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	da07      	bge.n	8002a66 <SetTargetData+0x36e>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8002a56:	7dfb      	ldrb	r3, [r7, #23]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d104      	bne.n	8002a66 <SetTargetData+0x36e>
					sequency == 0) {
					AddOffset =
 8002a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8002a62:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002a64:	e02e      	b.n	8002ac4 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8002a66:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6c:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8002a70:	425b      	negs	r3, r3
 8002a72:	429a      	cmp	r2, r3
 8002a74:	da0f      	bge.n	8002a96 <SetTargetData+0x39e>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8002a76:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7c:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 8002a80:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8002a82:	429a      	cmp	r2, r3
 8002a84:	dd07      	ble.n	8002a96 <SetTargetData+0x39e>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8002a86:	7dfb      	ldrb	r3, [r7, #23]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d104      	bne.n	8002a96 <SetTargetData+0x39e>
					sequency == 1) {
					AddOffset =
 8002a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8e:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8002a92:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002a94:	e016      	b.n	8002ac4 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8002a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a98:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 8002a9c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	da0b      	bge.n	8002abc <SetTargetData+0x3c4>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 8002aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa6:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8002aaa:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	dd04      	ble.n	8002abc <SetTargetData+0x3c4>
					AddOffset =
 8002ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab4:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8002ab8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002aba:	e003      	b.n	8002ac4 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_5_rangea;
				} else
					uwr_status = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8002ac2:	e079      	b.n	8002bb8 <SetTargetData+0x4c0>
 8002ac4:	e078      	b.n	8002bb8 <SetTargetData+0x4c0>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8002ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac8:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 8002acc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	dd0e      	ble.n	8002af2 <SetTargetData+0x3fa>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8002ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad6:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8002ada:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	da07      	bge.n	8002af2 <SetTargetData+0x3fa>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8002ae2:	7dfb      	ldrb	r3, [r7, #23]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d104      	bne.n	8002af2 <SetTargetData+0x3fa>
					sequency == 0) {
					AddOffset =
 8002ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aea:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 8002aee:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002af0:	e05c      	b.n	8002bac <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8002af2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af8:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 8002afc:	425b      	negs	r3, r3
 8002afe:	429a      	cmp	r2, r3
 8002b00:	da0f      	bge.n	8002b22 <SetTargetData+0x42a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8002b02:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b08:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
 8002b0c:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	dd07      	ble.n	8002b22 <SetTargetData+0x42a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8002b12:	7dfb      	ldrb	r3, [r7, #23]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d104      	bne.n	8002b22 <SetTargetData+0x42a>
					sequency == 1) {
					AddOffset =
 8002b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1a:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8002b1e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002b20:	e044      	b.n	8002bac <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8002b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b24:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 8002b28:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	dd0e      	ble.n	8002b4e <SetTargetData+0x456>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8002b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b32:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8002b36:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	da07      	bge.n	8002b4e <SetTargetData+0x456>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8002b3e:	7dfb      	ldrb	r3, [r7, #23]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d104      	bne.n	8002b4e <SetTargetData+0x456>
					sequency == 1) {
					AddOffset =
 8002b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b46:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 8002b4a:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002b4c:	e02e      	b.n	8002bac <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8002b4e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b54:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 8002b58:	425b      	negs	r3, r3
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	da0f      	bge.n	8002b7e <SetTargetData+0x486>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8002b5e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b64:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
 8002b68:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	dd07      	ble.n	8002b7e <SetTargetData+0x486>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8002b6e:	7dfb      	ldrb	r3, [r7, #23]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d104      	bne.n	8002b7e <SetTargetData+0x486>
					sequency == 0) {
					AddOffset =
 8002b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b76:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	; 0xce
 8002b7a:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002b7c:	e016      	b.n	8002bac <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8002b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b80:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8002b84:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	da0b      	bge.n	8002ba4 <SetTargetData+0x4ac>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 8002b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8e:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8002b92:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	dd04      	ble.n	8002ba4 <SetTargetData+0x4ac>
					AddOffset =
 8002b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9c:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8002ba0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002ba2:	e003      	b.n	8002bac <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
					uwr_status = 0;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8002baa:	e005      	b.n	8002bb8 <SetTargetData+0x4c0>
 8002bac:	e004      	b.n	8002bb8 <SetTargetData+0x4c0>

			default:
				uwr_status = 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8002bb4:	e000      	b.n	8002bb8 <SetTargetData+0x4c0>
			}
		}
 8002bb6:	bf00      	nop

		if (uwr_status) {
 8002bb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d023      	beq.n	8002c08 <SetTargetData+0x510>
			pRangeData->RangeMilliMeter += AddOffset;
 8002bc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bc2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002bca:	4413      	add	r3, r2
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	b21a      	sxth	r2, r3
 8002bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bd2:	821a      	strh	r2, [r3, #16]
			pRangeData->RangeMinMilliMeter += AddOffset;
 8002bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bd6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002bde:	4413      	add	r3, r2
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	b21a      	sxth	r2, r3
 8002be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002be6:	805a      	strh	r2, [r3, #2]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 8002be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002bf2:	4413      	add	r3, r2
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	b21a      	sxth	r2, r3
 8002bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bfa:	801a      	strh	r2, [r3, #0]
			pRangeData->ExtendedRange = 1;
 8002bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bfe:	2201      	movs	r2, #1
 8002c00:	74da      	strb	r2, [r3, #19]
			pRangeData->RangeStatus = 0;
 8002c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c04:	2200      	movs	r2, #0
 8002c06:	749a      	strb	r2, [r3, #18]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 8002c08:	787b      	ldrb	r3, [r7, #1]
 8002c0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c0c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8002c10:	3308      	adds	r3, #8
 8002c12:	8ab9      	ldrh	r1, [r7, #20]
 8002c14:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 8002c18:	787b      	ldrb	r3, [r7, #1]
 8002c1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c1c:	7c91      	ldrb	r1, [r2, #18]
 8002c1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002c26:	3318      	adds	r3, #24
 8002c28:	460a      	mov	r2, r1
 8002c2a:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 8002c2c:	787b      	ldrb	r3, [r7, #1]
 8002c2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c30:	7cd1      	ldrb	r1, [r2, #19]
 8002c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002c3a:	331c      	adds	r3, #28
 8002c3c:	460a      	mov	r2, r1
 8002c3e:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 8002c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c42:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002c46:	3320      	adds	r3, #32
 8002c48:	78fa      	ldrb	r2, [r7, #3]
 8002c4a:	701a      	strb	r2, [r3, #0]

	Range = pRangeData->RangeMilliMeter;
 8002c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c4e:	8a1b      	ldrh	r3, [r3, #16]
 8002c50:	823b      	strh	r3, [r7, #16]
	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8002c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c54:	7c9b      	ldrb	r3, [r3, #18]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d110      	bne.n	8002c7c <SetTargetData+0x584>
 8002c5a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	da0c      	bge.n	8002c7c <SetTargetData+0x584>
		(Range < 0)) {
		if (Range < BDTable[VL53LX_TUNING_PROXY_MIN])
 8002c62:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002c66:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <SetTargetData+0x590>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	da03      	bge.n	8002c76 <SetTargetData+0x57e>
			pRangeData->RangeStatus =
 8002c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c70:	220e      	movs	r2, #14
 8002c72:	749a      	strb	r2, [r3, #18]
 8002c74:	e002      	b.n	8002c7c <SetTargetData+0x584>
					 VL53LX_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8002c76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c78:	2200      	movs	r2, #0
 8002c7a:	821a      	strh	r2, [r3, #16]
	}

	return Status;
 8002c7c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3738      	adds	r7, #56	; 0x38
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	2000001c 	.word	0x2000001c

08002c8c <SetMeasurementData>:


static VL53LX_Error SetMeasurementData(VL53LX_DEV Dev,
	VL53LX_range_results_t *presults,
	VL53LX_MultiRangingData_t *pMultiRangingData)
{
 8002c8c:	b590      	push	{r4, r7, lr}
 8002c8e:	b08f      	sub	sp, #60	; 0x3c
 8002c90:	af04      	add	r7, sp, #16
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	3318      	adds	r3, #24
 8002c9c:	623b      	str	r3, [r7, #32]
	uint8_t i;
	uint8_t iteration;
	VL53LX_TargetRangeData_t *pRangeData;
	VL53LX_range_data_t *presults_data;
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t ActiveResults;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	7c9a      	ldrb	r2, [r3, #18]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
	pMultiRangingData->HasXtalkValueChanged =
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58


	pMultiRangingData->TimeStamp = 0;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	78da      	ldrb	r2, [r3, #3]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	711a      	strb	r2, [r3, #4]

	ActiveResults = presults->active_results;
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	7c9b      	ldrb	r3, [r3, #18]
 8002cca:	77fb      	strb	r3, [r7, #31]
	if (ActiveResults < 1)
 8002ccc:	7ffb      	ldrb	r3, [r7, #31]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d103      	bne.n	8002cda <SetMeasurementData+0x4e>

		iteration = 1;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002cd8:	e002      	b.n	8002ce0 <SetMeasurementData+0x54>
	else
		iteration = ActiveResults;
 8002cda:	7ffb      	ldrb	r3, [r7, #31]
 8002cdc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for (i = 0; i < iteration; i++) {
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002ce6:	e035      	b.n	8002d54 <SetMeasurementData+0xc8>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 8002ce8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	3308      	adds	r3, #8
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]

		presults_data = &(presults->VL53LX_p_003[i]);
 8002cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d00:	224c      	movs	r2, #76	; 0x4c
 8002d02:	fb02 f303 	mul.w	r3, r2, r3
 8002d06:	3310      	adds	r3, #16
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	617b      	str	r3, [r7, #20]
		if (Status == VL53LX_ERROR_NONE)
 8002d10:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d113      	bne.n	8002d40 <SetMeasurementData+0xb4>
			Status = SetTargetData(Dev, ActiveResults,
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	7918      	ldrb	r0, [r3, #4]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	7c1b      	ldrb	r3, [r3, #16]
 8002d20:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8002d24:	7ff9      	ldrb	r1, [r7, #31]
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	9202      	str	r2, [sp, #8]
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	9201      	str	r2, [sp, #4]
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	4623      	mov	r3, r4
 8002d32:	4602      	mov	r2, r0
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f7ff fcdf 	bl	80026f8 <SetTargetData>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53LX_p_004;
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	for (i = 0; i < iteration; i++) {
 8002d4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d4e:	3301      	adds	r3, #1
 8002d50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002d54:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002d58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d3c3      	bcc.n	8002ce8 <SetMeasurementData+0x5c>

	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	f893 243f 	ldrb.w	r2, [r3, #1087]	; 0x43f
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002d6c:	3321      	adds	r3, #33	; 0x21
 8002d6e:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8002d70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002d74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002d78:	e01f      	b.n	8002dba <SetMeasurementData+0x12e>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8002d7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d7e:	6a3a      	ldr	r2, [r7, #32]
 8002d80:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8002d84:	3308      	adds	r3, #8
 8002d86:	2100      	movs	r1, #0
 8002d88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8002d8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d90:	6a3a      	ldr	r2, [r7, #32]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002d98:	3318      	adds	r3, #24
 8002d9a:	22ff      	movs	r2, #255	; 0xff
 8002d9c:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8002d9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002da2:	6a3a      	ldr	r2, [r7, #32]
 8002da4:	4413      	add	r3, r2
 8002da6:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002daa:	331c      	adds	r3, #28
 8002dac:	2200      	movs	r2, #0
 8002dae:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8002db0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002db4:	3301      	adds	r3, #1
 8002db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002dba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d9db      	bls.n	8002d7a <SetMeasurementData+0xee>
	}

	return Status;
 8002dc2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	372c      	adds	r7, #44	; 0x2c
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd90      	pop	{r4, r7, pc}

08002dce <VL53LX_GetMultiRangingData>:


VL53LX_Error VL53LX_GetMultiRangingData(VL53LX_DEV Dev,
		VL53LX_MultiRangingData_t *pMultiRangingData)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b086      	sub	sp, #24
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3318      	adds	r3, #24
 8002de0:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_range_results_t *presults =
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8002de8:	60fb      	str	r3, [r7, #12]
			(VL53LX_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 8002dea:	225c      	movs	r2, #92	; 0x5c
 8002dec:	21ff      	movs	r1, #255	; 0xff
 8002dee:	6838      	ldr	r0, [r7, #0]
 8002df0:	f012 f9ae 	bl	8015150 <memset>
		sizeof(VL53LX_MultiRangingData_t));


	Status = VL53LX_get_device_results(
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	2102      	movs	r1, #2
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f001 fee7 	bl	8004bcc <VL53LX_get_device_results>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_DEVICERESULTSLEVEL_FULL,
				presults);

	Status = SetMeasurementData(Dev,
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	68f9      	ldr	r1, [r7, #12]
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7ff ff40 	bl	8002c8c <SetMeasurementData>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	75fb      	strb	r3, [r7, #23]
					presults,
					pMultiRangingData);

	LOG_FUNCTION_END(Status);
	return Status;
 8002e10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <VL53LX_PerformRefSpadManagement>:
	return Status;
}


VL53LX_Error VL53LX_PerformRefSpadManagement(VL53LX_DEV Dev)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b090      	sub	sp, #64	; 0x40
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53LX_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 8002e2a:	f240 3305 	movw	r3, #773	; 0x305
 8002e2e:	81bb      	strh	r3, [r7, #12]
	VL53LX_customer_nvm_managed_t *pc;
	VL53LX_DistanceModes DistanceMode;

	LOG_FUNCTION_START("");

	pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3318      	adds	r3, #24
 8002e34:	63bb      	str	r3, [r7, #56]	; 0x38
	pc = &pdev->customer;
 8002e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e38:	3348      	adds	r3, #72	; 0x48
 8002e3a:	637b      	str	r3, [r7, #52]	; 0x34

	if (Status == VL53LX_ERROR_NONE) {
 8002e3c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d11c      	bne.n	8002e7e <VL53LX_PerformRefSpadManagement+0x62>
		DistanceMode = VL53LXDevDataGet(Dev,
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8002e4a:	3320      	adds	r3, #32
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				CurrentParameters.DistanceMode);
		Status = VL53LX_run_ref_spad_char(Dev, &RawStatus);
 8002e52:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8002e56:	4619      	mov	r1, r3
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f8e3 	bl	8003024 <VL53LX_run_ref_spad_char>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53LX_ERROR_NONE)
 8002e64:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d108      	bne.n	8002e7e <VL53LX_PerformRefSpadManagement+0x62>
			Status = VL53LX_SetDistanceMode(Dev, DistanceMode);
 8002e6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e70:	4619      	mov	r1, r3
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff fa13 	bl	800229e <VL53LX_SetDistanceMode>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	if (Status == VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 8002e7e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002e82:	f113 0f1d 	cmn.w	r3, #29
 8002e86:	d14e      	bne.n	8002f26 <VL53LX_PerformRefSpadManagement+0x10a>

		Status = VL53LX_read_nvm_raw_data(Dev,
 8002e88:	f107 0310 	add.w	r3, r7, #16
 8002e8c:	2206      	movs	r2, #6
 8002e8e:	2128      	movs	r1, #40	; 0x28
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f00c f991 	bl	800f1b8 <VL53LX_read_nvm_raw_data>
 8002e96:	4603      	mov	r3, r0
 8002e98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53LX_ERROR_NONE)
 8002e9c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d109      	bne.n	8002eb8 <VL53LX_PerformRefSpadManagement+0x9c>
			Status = VL53LX_WriteMulti(Dev,
 8002ea4:	f107 020c 	add.w	r2, r7, #12
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	2114      	movs	r1, #20
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f00e f9c7 	bl	8011240 <VL53LX_WriteMulti>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53LX_ERROR_NONE) {
 8002eb8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d105      	bne.n	8002ecc <VL53LX_PerformRefSpadManagement+0xb0>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 8002ec0:	7b3a      	ldrb	r2, [r7, #12]
 8002ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec4:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 8002ec6:	7b7a      	ldrb	r2, [r7, #13]
 8002ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eca:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 8002ecc:	f107 0310 	add.w	r3, r7, #16
 8002ed0:	3310      	adds	r3, #16
 8002ed2:	62fb      	str	r3, [r7, #44]	; 0x2c



		if (Status == VL53LX_ERROR_NONE)
 8002ed4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d108      	bne.n	8002eee <VL53LX_PerformRefSpadManagement+0xd2>
			Status = VL53LX_WriteMulti(Dev,
 8002edc:	2306      	movs	r3, #6
 8002ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ee0:	210d      	movs	r1, #13
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f00e f9ac 	bl	8011240 <VL53LX_WriteMulti>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53LX_ERROR_NONE) {
 8002eee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d117      	bne.n	8002f26 <VL53LX_PerformRefSpadManagement+0x10a>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 8002ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef8:	781a      	ldrb	r2, [r3, #0]
 8002efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002efc:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 8002efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f00:	785a      	ldrb	r2, [r3, #1]
 8002f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f04:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 8002f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f08:	789a      	ldrb	r2, [r3, #2]
 8002f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f0c:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 8002f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f10:	78da      	ldrb	r2, [r3, #3]
 8002f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f14:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 8002f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f18:	791a      	ldrb	r2, [r3, #4]
 8002f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f1c:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 8002f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f20:	795a      	ldrb	r2, [r3, #5]
 8002f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f24:	715a      	strb	r2, [r3, #5]
		}

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002f26:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3740      	adds	r7, #64	; 0x40
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <VL53LX_SmudgeCorrectionEnable>:


VL53LX_Error VL53LX_SmudgeCorrectionEnable(VL53LX_DEV Dev,
		VL53LX_SmudgeCorrectionModes Mode)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002f40:	2300      	movs	r3, #0
 8002f42:	73fb      	strb	r3, [r7, #15]
	VL53LX_Error s1 = VL53LX_ERROR_NONE;
 8002f44:	2300      	movs	r3, #0
 8002f46:	73bb      	strb	r3, [r7, #14]
	VL53LX_Error s2 = VL53LX_ERROR_NONE;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	737b      	strb	r3, [r7, #13]
	VL53LX_Error s3 = VL53LX_ERROR_NONE;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d84a      	bhi.n	8002fec <VL53LX_SmudgeCorrectionEnable+0xb8>
 8002f56:	a201      	add	r2, pc, #4	; (adr r2, 8002f5c <VL53LX_SmudgeCorrectionEnable+0x28>)
 8002f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5c:	08002f6d 	.word	0x08002f6d
 8002f60:	08002f8d 	.word	0x08002f8d
 8002f64:	08002fad 	.word	0x08002fad
 8002f68:	08002fcd 	.word	0x08002fcd
	case VL53LX_SMUDGE_CORRECTION_NONE:
		s1 = VL53LX_dynamic_xtalk_correction_disable(Dev);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f003 fd92 	bl	8006a96 <VL53LX_dynamic_xtalk_correction_disable>
 8002f72:	4603      	mov	r3, r0
 8002f74:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f003 fda4 	bl	8006ac4 <VL53LX_dynamic_xtalk_correction_apply_disable>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f003 fdcd 	bl	8006b20 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8002f86:	4603      	mov	r3, r0
 8002f88:	733b      	strb	r3, [r7, #12]
		break;
 8002f8a:	e032      	b.n	8002ff2 <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f003 fd6b 	bl	8006a68 <VL53LX_dynamic_xtalk_correction_enable>
 8002f92:	4603      	mov	r3, r0
 8002f94:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f003 fdd9 	bl	8006b4e <VL53LX_dynamic_xtalk_correction_apply_enable>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f003 fdbd 	bl	8006b20 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	733b      	strb	r3, [r7, #12]
		break;
 8002faa:	e022      	b.n	8002ff2 <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f003 fd5b 	bl	8006a68 <VL53LX_dynamic_xtalk_correction_enable>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f003 fdc9 	bl	8006b4e <VL53LX_dynamic_xtalk_correction_apply_enable>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_enable(Dev);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f003 fd96 	bl	8006af2 <VL53LX_dynamic_xtalk_correction_single_apply_enable>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	733b      	strb	r3, [r7, #12]
		break;
 8002fca:	e012      	b.n	8002ff2 <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f003 fd4b 	bl	8006a68 <VL53LX_dynamic_xtalk_correction_enable>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f003 fd74 	bl	8006ac4 <VL53LX_dynamic_xtalk_correction_apply_disable>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f003 fd9d 	bl	8006b20 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	733b      	strb	r3, [r7, #12]
		break;
 8002fea:	e002      	b.n	8002ff2 <VL53LX_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8002fec:	23fc      	movs	r3, #252	; 0xfc
 8002fee:	73fb      	strb	r3, [r7, #15]
		break;
 8002ff0:	bf00      	nop
	}

	if (Status == VL53LX_ERROR_NONE) {
 8002ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10d      	bne.n	8003016 <VL53LX_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 8002ffa:	7bbb      	ldrb	r3, [r7, #14]
 8002ffc:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 8002ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <VL53LX_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 8003006:	7b7b      	ldrb	r3, [r7, #13]
 8003008:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 800300a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <VL53LX_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 8003012:	7b3b      	ldrb	r3, [r7, #12]
 8003014:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003016:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop

08003024 <VL53LX_run_ref_spad_char>:


VL53LX_Error VL53LX_run_ref_spad_char(
	VL53LX_DEV        Dev,
	VL53LX_Error     *pcal_status)
{
 8003024:	b5b0      	push	{r4, r5, r7, lr}
 8003026:	b08c      	sub	sp, #48	; 0x30
 8003028:	af04      	add	r7, sp, #16
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800302e:	2300      	movs	r3, #0
 8003030:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3318      	adds	r3, #24
 8003036:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53LX_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800303e:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8003040:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d104      	bne.n	8003052 <VL53LX_run_ref_spad_char+0x2e>
		status = VL53LX_enable_powerforce(Dev);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f005 fd62 	bl	8008b12 <VL53LX_enable_powerforce>
 800304e:	4603      	mov	r3, r0
 8003050:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 8003052:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d117      	bne.n	800308a <VL53LX_run_ref_spad_char+0x66>
		status =
		VL53LX_set_ref_spad_char_config(
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	7858      	ldrb	r0, [r3, #1]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	685c      	ldr	r4, [r3, #4]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	891d      	ldrh	r5, [r3, #8]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	899b      	ldrh	r3, [r3, #12]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	8952      	ldrh	r2, [r2, #10]
 800306e:	69b9      	ldr	r1, [r7, #24]
 8003070:	f8b1 12de 	ldrh.w	r1, [r1, #734]	; 0x2de
 8003074:	9102      	str	r1, [sp, #8]
 8003076:	9201      	str	r2, [sp, #4]
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	462b      	mov	r3, r5
 800307c:	4622      	mov	r2, r4
 800307e:	4601      	mov	r1, r0
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f007 fb71 	bl	800a768 <VL53LX_set_ref_spad_char_config>
 8003086:	4603      	mov	r3, r0
 8003088:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53LX_ERROR_NONE)
 800308a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d107      	bne.n	80030a2 <VL53LX_run_ref_spad_char+0x7e>
		status = VL53LX_run_device_test(
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	4619      	mov	r1, r3
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 f890 	bl	80031be <VL53LX_run_device_test>
 800309e:	4603      	mov	r3, r0
 80030a0:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53LX_ERROR_NONE)
 80030a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d108      	bne.n	80030bc <VL53LX_run_ref_spad_char+0x98>
		status =
		VL53LX_ReadMulti(
 80030aa:	f107 020c 	add.w	r2, r7, #12
 80030ae:	2302      	movs	r3, #2
 80030b0:	21d9      	movs	r1, #217	; 0xd9
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f00e f8fa 	bl	80112ac <VL53LX_ReadMulti>
 80030b8:	4603      	mov	r3, r0
 80030ba:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53LX_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53LX_ERROR_NONE) {
 80030bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10a      	bne.n	80030da <VL53LX_run_ref_spad_char+0xb6>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 80030c4:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 80030cc:	331f      	adds	r3, #31
 80030ce:	701a      	strb	r2, [r3, #0]
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 80030d0:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 80030d8:	701a      	strb	r2, [r3, #0]
	}



	if (status == VL53LX_ERROR_NONE)
 80030da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d108      	bne.n	80030f4 <VL53LX_run_ref_spad_char+0xd0>
		status =
			VL53LX_WriteMulti(
 80030e2:	f107 020c 	add.w	r2, r7, #12
 80030e6:	2302      	movs	r3, #2
 80030e8:	2114      	movs	r1, #20
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f00e f8a8 	bl	8011240 <VL53LX_WriteMulti>
 80030f0:	4603      	mov	r3, r0
 80030f2:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 80030f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d107      	bne.n	800310c <VL53LX_run_ref_spad_char+0xe8>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 80030fc:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 8003104:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}



	if (status == VL53LX_ERROR_NONE)
 800310c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d108      	bne.n	8003126 <VL53LX_run_ref_spad_char+0x102>
		status =
			VL53LX_ReadMulti(
 8003114:	f107 020c 	add.w	r2, r7, #12
 8003118:	2306      	movs	r3, #6
 800311a:	21ac      	movs	r1, #172	; 0xac
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f00e f8c5 	bl	80112ac <VL53LX_ReadMulti>
 8003122:	4603      	mov	r3, r0
 8003124:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53LX_ERROR_NONE)
 8003126:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d108      	bne.n	8003140 <VL53LX_run_ref_spad_char+0x11c>
		status =
			VL53LX_WriteMulti(
 800312e:	f107 020c 	add.w	r2, r7, #12
 8003132:	2306      	movs	r3, #6
 8003134:	210d      	movs	r1, #13
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f00e f882 	bl	8011240 <VL53LX_WriteMulti>
 800313c:	4603      	mov	r3, r0
 800313e:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53LX_ERROR_NONE) {
 8003140:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d117      	bne.n	8003178 <VL53LX_run_ref_spad_char+0x154>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 8003148:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 8003150:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 8003158:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 8003160:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 8003168:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 8003170:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53LX_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53LX_ERROR_NONE) {
 8003178:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d114      	bne.n	80031aa <VL53LX_run_ref_spad_char+0x186>

		switch (pdev->sys_results.result__range_status) {
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	f893 3367 	ldrb.w	r3, [r3, #871]	; 0x367
 8003186:	2b10      	cmp	r3, #16
 8003188:	d00c      	beq.n	80031a4 <VL53LX_run_ref_spad_char+0x180>
 800318a:	2b10      	cmp	r3, #16
 800318c:	dc0e      	bgt.n	80031ac <VL53LX_run_ref_spad_char+0x188>
 800318e:	2b0e      	cmp	r3, #14
 8003190:	d002      	beq.n	8003198 <VL53LX_run_ref_spad_char+0x174>
 8003192:	2b0f      	cmp	r3, #15
 8003194:	d003      	beq.n	800319e <VL53LX_run_ref_spad_char+0x17a>
 8003196:	e009      	b.n	80031ac <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53LX_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 8003198:	23e4      	movs	r3, #228	; 0xe4
 800319a:	77fb      	strb	r3, [r7, #31]
			break;
 800319c:	e006      	b.n	80031ac <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 800319e:	23e3      	movs	r3, #227	; 0xe3
 80031a0:	77fb      	strb	r3, [r7, #31]
			break;
 80031a2:	e003      	b.n	80031ac <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 80031a4:	23e2      	movs	r3, #226	; 0xe2
 80031a6:	77fb      	strb	r3, [r7, #31]
			break;
 80031a8:	e000      	b.n	80031ac <VL53LX_run_ref_spad_char+0x188>
		}
	}
 80031aa:	bf00      	nop



	*pcal_status = status;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	7ffa      	ldrb	r2, [r7, #31]
 80031b0:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 80031b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3720      	adds	r7, #32
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bdb0      	pop	{r4, r5, r7, pc}

080031be <VL53LX_run_device_test>:


VL53LX_Error VL53LX_run_device_test(
	VL53LX_DEV             Dev,
	VL53LX_DeviceTestMode  device_test_mode)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b086      	sub	sp, #24
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	460b      	mov	r3, r1
 80031c8:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80031ca:	2300      	movs	r3, #0
 80031cc:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3318      	adds	r3, #24
 80031d2:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 80031d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d108      	bne.n	80031f2 <VL53LX_run_device_test+0x34>
		status =
			VL53LX_RdByte(
 80031e0:	f107 030b 	add.w	r3, r7, #11
 80031e4:	461a      	mov	r2, r3
 80031e6:	2130      	movs	r1, #48	; 0x30
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f00e f8f1 	bl	80113d0 <VL53LX_RdByte>
 80031ee:	4603      	mov	r3, r0
 80031f0:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53LX_ERROR_NONE)
 80031f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d103      	bne.n	8003202 <VL53LX_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 80031fa:	7afa      	ldrb	r2, [r7, #11]
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a


	if (status == VL53LX_ERROR_NONE)
 8003202:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d106      	bne.n	8003218 <VL53LX_run_device_test+0x5a>
		status = VL53LX_start_test(
 800320a:	78fb      	ldrb	r3, [r7, #3]
 800320c:	4619      	mov	r1, r3
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f005 fc03 	bl	8008a1a <VL53LX_start_test>
 8003214:	4603      	mov	r3, r0
 8003216:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53LX_ERROR_NONE)
 8003218:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d104      	bne.n	800322a <VL53LX_run_device_test+0x6c>
		status = VL53LX_wait_for_test_completion(Dev);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f00d fc4d 	bl	8010ac0 <VL53LX_wait_for_test_completion>
 8003226:	4603      	mov	r3, r0
 8003228:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 800322a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d108      	bne.n	8003244 <VL53LX_run_device_test+0x86>
		status =
			VL53LX_ReadMulti(
 8003232:	f107 020c 	add.w	r2, r7, #12
 8003236:	2302      	movs	r3, #2
 8003238:	2189      	movs	r1, #137	; 0x89
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f00e f836 	bl	80112ac <VL53LX_ReadMulti>
 8003240:	4603      	mov	r3, r0
 8003242:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 8003244:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d107      	bne.n	800325c <VL53LX_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 800324c:	7b3a      	ldrb	r2, [r7, #12]
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	f883 2367 	strb.w	r2, [r3, #871]	; 0x367
		pdev->sys_results.result__report_status = comms_buffer[1];
 8003254:	7b7a      	ldrb	r2, [r7, #13]
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
	}



	pdev->sys_results.result__range_status &=
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	f893 3367 	ldrb.w	r3, [r3, #871]	; 0x367
 8003262:	f003 031f 	and.w	r3, r3, #31
 8003266:	b2da      	uxtb	r2, r3
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f883 2367 	strb.w	r2, [r3, #871]	; 0x367
		VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53LX_ERROR_NONE) {
 800326e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d108      	bne.n	8003288 <VL53LX_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53LX_ERROR_NONE)
 8003276:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d104      	bne.n	8003288 <VL53LX_run_device_test+0xca>
			status = VL53LX_clear_interrupt(Dev);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f005 fc6b 	bl	8008b5a <VL53LX_clear_interrupt>
 8003284:	4603      	mov	r3, r0
 8003286:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53LX_ERROR_NONE)
 8003288:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d105      	bne.n	800329c <VL53LX_run_device_test+0xde>
		status =
			VL53LX_start_test(
 8003290:	2100      	movs	r1, #0
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f005 fbc1 	bl	8008a1a <VL53LX_start_test>
 8003298:	4603      	mov	r3, r0
 800329a:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 800329c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <select_offset_per_vcsel>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53LX_MAX_I2C_XFER_SIZE 256

static VL53LX_Error select_offset_per_vcsel(VL53LX_LLDriverData_t *pdev,
		int16_t *poffset) {
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 80032b2:	2300      	movs	r3, #0
 80032b4:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	785b      	ldrb	r3, [r3, #1]
 80032ba:	2b21      	cmp	r3, #33	; 0x21
 80032bc:	d006      	beq.n	80032cc <select_offset_per_vcsel+0x24>
 80032be:	2b21      	cmp	r3, #33	; 0x21
 80032c0:	dc2a      	bgt.n	8003318 <select_offset_per_vcsel+0x70>
 80032c2:	2b1b      	cmp	r3, #27
 80032c4:	d01b      	beq.n	80032fe <select_offset_per_vcsel+0x56>
 80032c6:	2b1e      	cmp	r3, #30
 80032c8:	d00c      	beq.n	80032e4 <select_offset_per_vcsel+0x3c>
 80032ca:	e025      	b.n	8003318 <select_offset_per_vcsel+0x70>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80032d2:	881b      	ldrh	r3, [r3, #0]
 80032d4:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80032dc:	3302      	adds	r3, #2
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	817b      	strh	r3, [r7, #10]
		break;
 80032e2:	e02b      	b.n	800333c <select_offset_per_vcsel+0x94>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80032ea:	3304      	adds	r3, #4
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80032f6:	3306      	adds	r3, #6
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	817b      	strh	r3, [r7, #10]
		break;
 80032fc:	e01e      	b.n	800333c <select_offset_per_vcsel+0x94>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003304:	3308      	adds	r3, #8
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003310:	330a      	adds	r3, #10
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	817b      	strh	r3, [r7, #10]
		break;
 8003316:	e011      	b.n	800333c <select_offset_per_vcsel+0x94>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800331e:	3308      	adds	r3, #8
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800332a:	330a      	adds	r3, #10
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	817b      	strh	r3, [r7, #10]
		status = VL53LX_ERROR_INVALID_PARAMS;
 8003330:	23fc      	movs	r3, #252	; 0xfc
 8003332:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	2200      	movs	r2, #0
 8003338:	801a      	strh	r2, [r3, #0]
		break;
 800333a:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003342:	727b      	strb	r3, [r7, #9]
	if (status == VL53LX_ERROR_NONE)
 8003344:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10b      	bne.n	8003364 <select_offset_per_vcsel+0xbc>
		*poffset = (isc & 0x01) ? tA : tB;
 800334c:	7a7b      	ldrb	r3, [r7, #9]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <select_offset_per_vcsel+0xb4>
 8003356:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800335a:	e001      	b.n	8003360 <select_offset_per_vcsel+0xb8>
 800335c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	8013      	strh	r3, [r2, #0]

	return status;
 8003364:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <vl53lx_diff_histo_stddev>:

static void vl53lx_diff_histo_stddev(VL53LX_LLDriverData_t *pdev,
	VL53LX_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8003374:	b490      	push	{r4, r7}
 8003376:	b08a      	sub	sp, #40	; 0x28
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	4611      	mov	r1, r2
 8003380:	461a      	mov	r2, r3
 8003382:	460b      	mov	r3, r1
 8003384:	71fb      	strb	r3, [r7, #7]
 8003386:	4613      	mov	r3, r2
 8003388:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 800338a:	2300      	movs	r3, #0
 800338c:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t    total_rate_pre = 0;
 800338e:	2300      	movs	r3, #0
 8003390:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 8003392:	2300      	movs	r3, #0
 8003394:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 8003396:	2300      	movs	r3, #0
 8003398:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 800339a:	2300      	movs	r3, #0
 800339c:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80033a6:	e021      	b.n	80033ec <vl53lx_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 80033a8:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	461a      	mov	r2, r3
 80033b4:	0052      	lsls	r2, r2, #1
 80033b6:	441a      	add	r2, r3
 80033b8:	00d3      	lsls	r3, r2, #3
 80033ba:	461a      	mov	r2, r3
 80033bc:	460b      	mov	r3, r1
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	440b      	add	r3, r1
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	4413      	add	r3, r2
 80033c6:	4423      	add	r3, r4
 80033c8:	f203 7304 	addw	r3, r3, #1796	; 0x704
 80033cc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 80033d0:	6a3a      	ldr	r2, [r7, #32]
 80033d2:	4413      	add	r3, r2
 80033d4:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 80033d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	3206      	adds	r2, #6
 80033dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e0:	69fa      	ldr	r2, [r7, #28]
 80033e2:	4413      	add	r3, r2
 80033e4:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 80033e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80033e8:	3301      	adds	r3, #1
 80033ea:	84fb      	strh	r3, [r7, #38]	; 0x26
 80033ec:	79bb      	ldrb	r3, [r7, #6]
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d3d8      	bcc.n	80033a8 <vl53lx_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d047      	beq.n	800348c <vl53lx_diff_histo_stddev+0x118>
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d044      	beq.n	800348c <vl53lx_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	b29b      	uxth	r3, r3
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	84fb      	strh	r3, [r7, #38]	; 0x26
 800340a:	e03a      	b.n	8003482 <vl53lx_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 800340c:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	461a      	mov	r2, r3
 8003418:	0052      	lsls	r2, r2, #1
 800341a:	441a      	add	r2, r3
 800341c:	00d3      	lsls	r3, r2, #3
 800341e:	461a      	mov	r2, r3
 8003420:	460b      	mov	r3, r1
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	440b      	add	r3, r1
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	4413      	add	r3, r2
 800342a:	4423      	add	r3, r4
 800342c:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8003430:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003434:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800343c:	fb02 f203 	mul.w	r2, r2, r3
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	fb92 f3f3 	sdiv	r3, r2, r3
 8003446:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 8003448:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	3206      	adds	r2, #6
 800344e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003452:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003456:	fb02 f203 	mul.w	r2, r2, r3
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003460:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8003462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	69b9      	ldr	r1, [r7, #24]
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 800346c:	69b8      	ldr	r0, [r7, #24]
 800346e:	6979      	ldr	r1, [r7, #20]
 8003470:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8003472:	fb01 f303 	mul.w	r3, r1, r3
 8003476:	441a      	add	r2, r3
 8003478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800347a:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 800347c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800347e:	3301      	adds	r3, #1
 8003480:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003482:	79bb      	ldrb	r3, [r7, #6]
 8003484:	b29b      	uxth	r3, r3
 8003486:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003488:	429a      	cmp	r2, r3
 800348a:	d3bf      	bcc.n	800340c <vl53lx_diff_histo_stddev+0x98>
	}
}
 800348c:	bf00      	nop
 800348e:	3728      	adds	r7, #40	; 0x28
 8003490:	46bd      	mov	sp, r7
 8003492:	bc90      	pop	{r4, r7}
 8003494:	4770      	bx	lr

08003496 <vl53lx_histo_merge>:

static void vl53lx_histo_merge(VL53LX_DEV Dev,
		VL53LX_histogram_bin_data_t *pdata) {
 8003496:	b5b0      	push	{r4, r5, r7, lr}
 8003498:	b08c      	sub	sp, #48	; 0x30
 800349a:	af02      	add	r7, sp, #8
 800349c:	6078      	str	r0, [r7, #4]
 800349e:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev =
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3318      	adds	r3, #24
 80034a4:	61fb      	str	r3, [r7, #28]
			VL53LXDevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 80034a6:	2300      	movs	r3, #0
 80034a8:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t    i                        = 0;
 80034aa:	2300      	movs	r3, #0
 80034ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int32_t    TuningBinRecSize		    = 0;
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t    timing					= 0;
 80034ba:	2300      	movs	r3, #0
 80034bc:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 80034be:	2300      	movs	r3, #0
 80034c0:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53LX_HISTOGRAM_BUFFER_SIZE;
 80034c6:	2318      	movs	r3, #24
 80034c8:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 80034ca:	f107 0314 	add.w	r3, r7, #20
 80034ce:	461a      	mov	r2, r3
 80034d0:	f248 018f 	movw	r1, #32911	; 0x808f
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f002 fbd3 	bl	8005c80 <VL53LX_get_tuning_parm>
			&TuningBinRecSize);

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD,
 80034da:	f107 0310 	add.w	r3, r7, #16
 80034de:	461a      	mov	r2, r3
 80034e0:	f248 018e 	movw	r1, #32910	; 0x808e
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f002 fbcb 	bl	8005c80 <VL53LX_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80034f0:	330d      	adds	r3, #13
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f040 811a 	bne.w	800372e <vl53lx_histo_merge+0x298>

		timing = 1 - pdata->result__stream_count % 2;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	bf0c      	ite	eq
 8003508:	2301      	moveq	r3, #1
 800350a:	2300      	movne	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 8003514:	7efb      	ldrb	r3, [r7, #27]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	b2db      	uxtb	r3, r3
 800351a:	7eba      	ldrb	r2, [r7, #26]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003526:	330c      	adds	r3, #12
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d008      	beq.n	8003540 <vl53lx_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003534:	330c      	adds	r3, #12
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	3b01      	subs	r3, #1
 800353a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800353e:	e004      	b.n	800354a <vl53lx_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	3b01      	subs	r3, #1
 8003546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 800354a:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 800354e:	7efb      	ldrb	r3, [r7, #27]
 8003550:	69f8      	ldr	r0, [r7, #28]
 8003552:	461a      	mov	r2, r3
 8003554:	0052      	lsls	r2, r2, #1
 8003556:	441a      	add	r2, r3
 8003558:	0153      	lsls	r3, r2, #5
 800355a:	461a      	mov	r2, r3
 800355c:	460b      	mov	r3, r1
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	440b      	add	r3, r1
 8003562:	019b      	lsls	r3, r3, #6
 8003564:	4413      	add	r3, r2
 8003566:	4403      	add	r3, r0
 8003568:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	dd0c      	ble.n	800358c <vl53lx_histo_merge+0xf6>
			vl53lx_diff_histo_stddev(pdev, pdata,
 8003572:	7e79      	ldrb	r1, [r7, #25]
 8003574:	7efa      	ldrb	r2, [r7, #27]
 8003576:	f107 030c 	add.w	r3, r7, #12
 800357a:	9301      	str	r3, [sp, #4]
 800357c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	460b      	mov	r3, r1
 8003584:	6839      	ldr	r1, [r7, #0]
 8003586:	69f8      	ldr	r0, [r7, #28]
 8003588:	f7ff fef4 	bl	8003374 <vl53lx_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	429a      	cmp	r2, r3
 8003592:	db23      	blt.n	80035dc <vl53lx_histo_merge+0x146>
			memset(pdev->multi_bins_rec, 0,
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800359a:	3310      	adds	r3, #16
 800359c:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80035a0:	2100      	movs	r1, #0
 80035a2:	4618      	mov	r0, r3
 80035a4:	f011 fdd4 	bl	8015150 <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80035ae:	330c      	adds	r3, #12
 80035b0:	2200      	movs	r2, #0
 80035b2:	701a      	strb	r2, [r3, #0]

			recom_been_reset = 1;
 80035b4:	2301      	movs	r3, #1
 80035b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if (timing == 0)
 80035ba:	7efb      	ldrb	r3, [r7, #27]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d106      	bne.n	80035ce <vl53lx_histo_merge+0x138>
				pdev->pos_before_next_recom =
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80035c6:	330d      	adds	r3, #13
 80035c8:	2206      	movs	r2, #6
 80035ca:	701a      	strb	r2, [r3, #0]
 80035cc:	e034      	b.n	8003638 <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80035d4:	330d      	adds	r3, #13
 80035d6:	2207      	movs	r2, #7
 80035d8:	701a      	strb	r2, [r3, #0]
 80035da:	e02d      	b.n	8003638 <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80035e2:	330c      	adds	r3, #12
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 80035e8:	2300      	movs	r3, #0
 80035ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80035ee:	e01e      	b.n	800362e <vl53lx_histo_merge+0x198>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 80035f0:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 80035f4:	7e39      	ldrb	r1, [r7, #24]
 80035f6:	7efb      	ldrb	r3, [r7, #27]
 80035f8:	f897 5025 	ldrb.w	r5, [r7, #37]	; 0x25
					pdata->bin_data[i];
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	3006      	adds	r0, #6
 8003600:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 8003604:	69f8      	ldr	r0, [r7, #28]
 8003606:	461a      	mov	r2, r3
 8003608:	0052      	lsls	r2, r2, #1
 800360a:	441a      	add	r2, r3
 800360c:	00d3      	lsls	r3, r2, #3
 800360e:	461a      	mov	r2, r3
 8003610:	460b      	mov	r3, r1
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	440b      	add	r3, r1
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	4413      	add	r3, r2
 800361a:	442b      	add	r3, r5
 800361c:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8003620:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 8003624:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003628:	3301      	adds	r3, #1
 800362a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800362e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003632:	7ebb      	ldrb	r3, [r7, #26]
 8003634:	429a      	cmp	r2, r3
 8003636:	d3db      	bcc.n	80035f0 <vl53lx_histo_merge+0x15a>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800363e:	330c      	adds	r3, #12
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	3b01      	subs	r3, #1
 8003648:	429a      	cmp	r2, r3
 800364a:	d109      	bne.n	8003660 <vl53lx_histo_merge+0x1ca>
 800364c:	7efb      	ldrb	r3, [r7, #27]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d106      	bne.n	8003660 <vl53lx_histo_merge+0x1ca>
			pdev->bin_rec_pos = 0;
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003658:	330c      	adds	r3, #12
 800365a:	2200      	movs	r2, #0
 800365c:	701a      	strb	r2, [r3, #0]
 800365e:	e00e      	b.n	800367e <vl53lx_histo_merge+0x1e8>
		else if (timing == 1)
 8003660:	7efb      	ldrb	r3, [r7, #27]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d10b      	bne.n	800367e <vl53lx_histo_merge+0x1e8>
			pdev->bin_rec_pos++;
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800366c:	330c      	adds	r3, #12
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	3301      	adds	r3, #1
 8003672:	b2da      	uxtb	r2, r3
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800367a:	330c      	adds	r3, #12
 800367c:	701a      	strb	r2, [r3, #0]

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 800367e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003682:	2b01      	cmp	r3, #1
 8003684:	d102      	bne.n	800368c <vl53lx_histo_merge+0x1f6>
 8003686:	7efb      	ldrb	r3, [r7, #27]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d069      	beq.n	8003760 <vl53lx_histo_merge+0x2ca>
			 (pdev->pos_before_next_recom == 0)) {
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003692:	330d      	adds	r3, #13
 8003694:	781b      	ldrb	r3, [r3, #0]
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8003696:	2b00      	cmp	r3, #0
 8003698:	d162      	bne.n	8003760 <vl53lx_histo_merge+0x2ca>

			for (bin = 0; bin < BuffSize; bin++)
 800369a:	2300      	movs	r3, #0
 800369c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800369e:	e008      	b.n	80036b2 <vl53lx_histo_merge+0x21c>
				pdata->bin_data[bin] = 0;
 80036a0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	3206      	adds	r2, #6
 80036a6:	2100      	movs	r1, #0
 80036a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 80036ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80036ae:	3301      	adds	r3, #1
 80036b0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80036b2:	7ebb      	ldrb	r3, [r7, #26]
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d3f1      	bcc.n	80036a0 <vl53lx_histo_merge+0x20a>

			for (bin = 0; bin < BuffSize; bin++)
 80036bc:	2300      	movs	r3, #0
 80036be:	84fb      	strh	r3, [r7, #38]	; 0x26
 80036c0:	e02f      	b.n	8003722 <vl53lx_histo_merge+0x28c>
				for (i = 0; i < TuningBinRecSize; i++)
 80036c2:	2300      	movs	r3, #0
 80036c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80036c8:	e023      	b.n	8003712 <vl53lx_histo_merge+0x27c>
					pdata->bin_data[bin] +=
 80036ca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	3206      	adds	r2, #6
 80036d0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 80036d4:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80036d8:	7efb      	ldrb	r3, [r7, #27]
 80036da:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
 80036dc:	69fc      	ldr	r4, [r7, #28]
 80036de:	461a      	mov	r2, r3
 80036e0:	0052      	lsls	r2, r2, #1
 80036e2:	441a      	add	r2, r3
 80036e4:	00d3      	lsls	r3, r2, #3
 80036e6:	461a      	mov	r2, r3
 80036e8:	460b      	mov	r3, r1
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	440b      	add	r3, r1
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	4413      	add	r3, r2
 80036f2:	442b      	add	r3, r5
 80036f4:	f203 7304 	addw	r3, r3, #1796	; 0x704
 80036f8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 80036fc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80036fe:	18c1      	adds	r1, r0, r3
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	3206      	adds	r2, #6
 8003704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 8003708:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800370c:	3301      	adds	r3, #1
 800370e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003712:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	429a      	cmp	r2, r3
 800371a:	dbd6      	blt.n	80036ca <vl53lx_histo_merge+0x234>
			for (bin = 0; bin < BuffSize; bin++)
 800371c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800371e:	3301      	adds	r3, #1
 8003720:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003722:	7ebb      	ldrb	r3, [r7, #26]
 8003724:	b29b      	uxth	r3, r3
 8003726:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003728:	429a      	cmp	r2, r3
 800372a:	d3ca      	bcc.n	80036c2 <vl53lx_histo_merge+0x22c>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 800372c:	e018      	b.n	8003760 <vl53lx_histo_merge+0x2ca>
		pdev->pos_before_next_recom--;
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003734:	330d      	adds	r3, #13
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	3b01      	subs	r3, #1
 800373a:	b2da      	uxtb	r2, r3
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003742:	330d      	adds	r3, #13
 8003744:	701a      	strb	r2, [r3, #0]
		if (pdev->pos_before_next_recom == 255)
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800374c:	330d      	adds	r3, #13
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2bff      	cmp	r3, #255	; 0xff
 8003752:	d105      	bne.n	8003760 <vl53lx_histo_merge+0x2ca>
			pdev->pos_before_next_recom = 0;
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800375a:	330d      	adds	r3, #13
 800375c:	2200      	movs	r2, #0
 800375e:	701a      	strb	r2, [r3, #0]
}
 8003760:	bf00      	nop
 8003762:	3728      	adds	r7, #40	; 0x28
 8003764:	46bd      	mov	sp, r7
 8003766:	bdb0      	pop	{r4, r5, r7, pc}

08003768 <VL53LX_load_patch>:

VL53LX_Error VL53LX_load_patch(VL53LX_DEV Dev)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b0c6      	sub	sp, #280	; 0x118
 800376c:	af00      	add	r7, sp, #0
 800376e:	1d3b      	adds	r3, r7, #4
 8003770:	6018      	str	r0, [r3, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003772:	2300      	movs	r3, #0
 8003774:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	int32_t patch_tuning = 0;
 8003778:	2300      	movs	r3, #0
 800377a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800377e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003782:	2b00      	cmp	r3, #0
 8003784:	d108      	bne.n	8003798 <VL53LX_load_patch+0x30>
		status = VL53LX_WrByte(Dev,
 8003786:	1d3b      	adds	r3, r7, #4
 8003788:	2200      	movs	r2, #0
 800378a:	2185      	movs	r1, #133	; 0x85
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	f00d fdc3 	bl	8011318 <VL53LX_WrByte>
 8003792:	4603      	mov	r3, r0
 8003794:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8003798:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800379c:	2b00      	cmp	r3, #0
 800379e:	d103      	bne.n	80037a8 <VL53LX_load_patch+0x40>
		VL53LX_enable_powerforce(Dev);
 80037a0:	1d3b      	adds	r3, r7, #4
 80037a2:	6818      	ldr	r0, [r3, #0]
 80037a4:	f005 f9b5 	bl	8008b12 <VL53LX_enable_powerforce>

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER,
 80037a8:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80037ac:	1d3b      	adds	r3, r7, #4
 80037ae:	f248 018c 	movw	r1, #32908	; 0x808c
 80037b2:	6818      	ldr	r0, [r3, #0]
 80037b4:	f002 fa64 	bl	8005c80 <VL53LX_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 80037b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037bc:	2b03      	cmp	r3, #3
 80037be:	d81b      	bhi.n	80037f8 <VL53LX_load_patch+0x90>
 80037c0:	a201      	add	r2, pc, #4	; (adr r2, 80037c8 <VL53LX_load_patch+0x60>)
 80037c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c6:	bf00      	nop
 80037c8:	080037d9 	.word	0x080037d9
 80037cc:	080037e1 	.word	0x080037e1
 80037d0:	080037e9 	.word	0x080037e9
 80037d4:	080037f1 	.word	0x080037f1
	case 0:
		patch_power = 0x00;
 80037d8:	2300      	movs	r3, #0
 80037da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80037de:	e00e      	b.n	80037fe <VL53LX_load_patch+0x96>
	case 1:
		patch_power = 0x10;
 80037e0:	2310      	movs	r3, #16
 80037e2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80037e6:	e00a      	b.n	80037fe <VL53LX_load_patch+0x96>
	case 2:
		patch_power = 0x20;
 80037e8:	2320      	movs	r3, #32
 80037ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80037ee:	e006      	b.n	80037fe <VL53LX_load_patch+0x96>
	case 3:
		patch_power = 0x40;
 80037f0:	2340      	movs	r3, #64	; 0x40
 80037f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80037f6:	e002      	b.n	80037fe <VL53LX_load_patch+0x96>
	default:
		patch_power = 0x00;
 80037f8:	2300      	movs	r3, #0
 80037fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}

	if (status == VL53LX_ERROR_NONE) {
 80037fe:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003802:	2b00      	cmp	r3, #0
 8003804:	d125      	bne.n	8003852 <VL53LX_load_patch+0xea>

		comms_buffer[0] = 0x29;
 8003806:	f107 030c 	add.w	r3, r7, #12
 800380a:	2229      	movs	r2, #41	; 0x29
 800380c:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 800380e:	f107 030c 	add.w	r3, r7, #12
 8003812:	22c9      	movs	r2, #201	; 0xc9
 8003814:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 8003816:	f107 030c 	add.w	r3, r7, #12
 800381a:	220e      	movs	r2, #14
 800381c:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 800381e:	f107 030c 	add.w	r3, r7, #12
 8003822:	2240      	movs	r2, #64	; 0x40
 8003824:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 8003826:	f107 030c 	add.w	r3, r7, #12
 800382a:	2228      	movs	r2, #40	; 0x28
 800382c:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 800382e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003832:	b2da      	uxtb	r2, r3
 8003834:	f107 030c 	add.w	r3, r7, #12
 8003838:	715a      	strb	r2, [r3, #5]

		status = VL53LX_WriteMulti(Dev,
 800383a:	f107 020c 	add.w	r2, r7, #12
 800383e:	1d38      	adds	r0, r7, #4
 8003840:	2306      	movs	r3, #6
 8003842:	f240 4176 	movw	r1, #1142	; 0x476
 8003846:	6800      	ldr	r0, [r0, #0]
 8003848:	f00d fcfa 	bl	8011240 <VL53LX_WriteMulti>
 800384c:	4603      	mov	r3, r0
 800384e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 8003852:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003856:	2b00      	cmp	r3, #0
 8003858:	d123      	bne.n	80038a2 <VL53LX_load_patch+0x13a>
		comms_buffer[0] = 0x03;
 800385a:	f107 030c 	add.w	r3, r7, #12
 800385e:	2203      	movs	r2, #3
 8003860:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8003862:	f107 030c 	add.w	r3, r7, #12
 8003866:	226d      	movs	r2, #109	; 0x6d
 8003868:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 800386a:	f107 030c 	add.w	r3, r7, #12
 800386e:	2203      	movs	r2, #3
 8003870:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 8003872:	f107 030c 	add.w	r3, r7, #12
 8003876:	226f      	movs	r2, #111	; 0x6f
 8003878:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 800387a:	f107 030c 	add.w	r3, r7, #12
 800387e:	2207      	movs	r2, #7
 8003880:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 8003882:	f107 030c 	add.w	r3, r7, #12
 8003886:	2229      	movs	r2, #41	; 0x29
 8003888:	715a      	strb	r2, [r3, #5]
		status = VL53LX_WriteMulti(Dev,
 800388a:	f107 020c 	add.w	r2, r7, #12
 800388e:	1d38      	adds	r0, r7, #4
 8003890:	2306      	movs	r3, #6
 8003892:	f240 4196 	movw	r1, #1174	; 0x496
 8003896:	6800      	ldr	r0, [r0, #0]
 8003898:	f00d fcd2 	bl	8011240 <VL53LX_WriteMulti>
 800389c:	4603      	mov	r3, r0
 800389e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 80038a2:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d113      	bne.n	80038d2 <VL53LX_load_patch+0x16a>
		comms_buffer[0] = 0x00;
 80038aa:	f107 030c 	add.w	r3, r7, #12
 80038ae:	2200      	movs	r2, #0
 80038b0:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80038b2:	f107 030c 	add.w	r3, r7, #12
 80038b6:	2207      	movs	r2, #7
 80038b8:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 80038ba:	f107 020c 	add.w	r2, r7, #12
 80038be:	1d38      	adds	r0, r7, #4
 80038c0:	2302      	movs	r3, #2
 80038c2:	f240 4172 	movw	r1, #1138	; 0x472
 80038c6:	6800      	ldr	r0, [r0, #0]
 80038c8:	f00d fcba 	bl	8011240 <VL53LX_WriteMulti>
 80038cc:	4603      	mov	r3, r0
 80038ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE) {
 80038d2:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d113      	bne.n	8003902 <VL53LX_load_patch+0x19a>
		comms_buffer[0] = 0x00;
 80038da:	f107 030c 	add.w	r3, r7, #12
 80038de:	2200      	movs	r2, #0
 80038e0:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80038e2:	f107 030c 	add.w	r3, r7, #12
 80038e6:	2207      	movs	r2, #7
 80038e8:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 80038ea:	f107 020c 	add.w	r2, r7, #12
 80038ee:	1d38      	adds	r0, r7, #4
 80038f0:	2302      	movs	r3, #2
 80038f2:	f240 4174 	movw	r1, #1140	; 0x474
 80038f6:	6800      	ldr	r0, [r0, #0]
 80038f8:	f00d fca2 	bl	8011240 <VL53LX_WriteMulti>
 80038fc:	4603      	mov	r3, r0
 80038fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE)
 8003902:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003906:	2b00      	cmp	r3, #0
 8003908:	d109      	bne.n	800391e <VL53LX_load_patch+0x1b6>
		status = VL53LX_WrByte(Dev,
 800390a:	1d3b      	adds	r3, r7, #4
 800390c:	2201      	movs	r2, #1
 800390e:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8003912:	6818      	ldr	r0, [r3, #0]
 8003914:	f00d fd00 	bl	8011318 <VL53LX_WrByte>
 8003918:	4603      	mov	r3, r0
 800391a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__CTRL, 0x01);

	if (status == VL53LX_ERROR_NONE)
 800391e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003922:	2b00      	cmp	r3, #0
 8003924:	d108      	bne.n	8003938 <VL53LX_load_patch+0x1d0>
		status = VL53LX_WrByte(Dev,
 8003926:	1d3b      	adds	r3, r7, #4
 8003928:	2201      	movs	r2, #1
 800392a:	2185      	movs	r1, #133	; 0x85
 800392c:	6818      	ldr	r0, [r3, #0]
 800392e:	f00d fcf3 	bl	8011318 <VL53LX_WrByte>
 8003932:	4603      	mov	r3, r0
 8003934:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 8003938:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 800393c:	4618      	mov	r0, r3
 800393e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop

08003948 <VL53LX_unload_patch>:

VL53LX_Error VL53LX_unload_patch(VL53LX_DEV Dev)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003950:	2300      	movs	r3, #0
 8003952:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE)
 8003954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d106      	bne.n	800396a <VL53LX_unload_patch+0x22>
		status = VL53LX_WrByte(Dev,
 800395c:	2200      	movs	r2, #0
 800395e:	2185      	movs	r1, #133	; 0x85
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f00d fcd9 	bl	8011318 <VL53LX_WrByte>
 8003966:	4603      	mov	r3, r0
 8003968:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 800396a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d102      	bne.n	8003978 <VL53LX_unload_patch+0x30>
		VL53LX_disable_powerforce(Dev);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f005 f8df 	bl	8008b36 <VL53LX_disable_powerforce>

	if (status == VL53LX_ERROR_NONE)
 8003978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d107      	bne.n	8003990 <VL53LX_unload_patch+0x48>
		status = VL53LX_WrByte(Dev,
 8003980:	2200      	movs	r2, #0
 8003982:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f00d fcc6 	bl	8011318 <VL53LX_WrByte>
 800398c:	4603      	mov	r3, r0
 800398e:	73fb      	strb	r3, [r7, #15]
		VL53LX_PATCH__CTRL, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8003990:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d106      	bne.n	80039a6 <VL53LX_unload_patch+0x5e>
		status = VL53LX_WrByte(Dev,
 8003998:	2201      	movs	r2, #1
 800399a:	2185      	movs	r1, #133	; 0x85
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f00d fcbb 	bl	8011318 <VL53LX_WrByte>
 80039a2:	4603      	mov	r3, r0
 80039a4:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 80039a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <VL53LX_data_init>:


VL53LX_Error VL53LX_data_init(
	VL53LX_DEV        Dev,
	uint8_t           read_p2p_data)
{
 80039b2:	b5b0      	push	{r4, r5, r7, lr}
 80039b4:	b08a      	sub	sp, #40	; 0x28
 80039b6:	af04      	add	r7, sp, #16
 80039b8:	6078      	str	r0, [r7, #4]
 80039ba:	460b      	mov	r3, r1
 80039bc:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80039be:	2300      	movs	r3, #0
 80039c0:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t    *pdev =
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	3318      	adds	r3, #24
 80039c6:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80039ce:	60fb      	str	r3, [r7, #12]



	VL53LX_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53LX_init_ll_driver_state(
 80039d4:	2162      	movs	r1, #98	; 0x62
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f004 f920 	bl	8007c1c <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53LX_MAX_RANGE_RESULTS;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2204      	movs	r2, #4
 80039e0:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53LX_MAX_USER_ZONES;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2205      	movs	r2, #5
 80039ec:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	pres->zone_results.active_zones    = 0;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5

	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80039f8:	2300      	movs	r3, #0
 80039fa:	75bb      	strb	r3, [r7, #22]
 80039fc:	e01b      	b.n	8003a36 <VL53LX_data_init+0x84>
		pobjects = &(pres->zone_results.VL53LX_p_003[i]);
 80039fe:	7dba      	ldrb	r2, [r7, #22]
 8003a00:	4613      	mov	r3, r2
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	4413      	add	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	4413      	add	r3, r2
 8003a10:	3308      	adds	r3, #8
 8003a12:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53LX_p_016 = 0;
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2200      	movs	r2, #0
 8003a18:	639a      	str	r2, [r3, #56]	; 0x38
		pobjects->xmonitor.VL53LX_p_017  = 0;
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	63da      	str	r2, [r3, #60]	; 0x3c
		pobjects->xmonitor.VL53LX_p_011          = 0;
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		pobjects->xmonitor.range_status =
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003a30:	7dbb      	ldrb	r3, [r7, #22]
 8003a32:	3301      	adds	r3, #1
 8003a34:	75bb      	strb	r3, [r7, #22]
 8003a36:	7dbb      	ldrb	r3, [r7, #22]
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d9e0      	bls.n	80039fe <VL53LX_data_init+0x4c>
				VL53LX_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53LX_MAX_USER_ZONES;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2205      	movs	r2, #5
 8003a40:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
	pres->zone_hists.active_zones      = 0;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d



	pres->zone_cal.max_zones           = VL53LX_MAX_USER_ZONES;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2205      	movs	r2, #5
 8003a50:	f883 238f 	strb.w	r2, [r3, #911]	; 0x38f
	pres->zone_cal.active_zones        = 0;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	75bb      	strb	r3, [r7, #22]
 8003a60:	e039      	b.n	8003ad6 <VL53LX_data_init+0x124>
		pres->zone_cal.VL53LX_p_003[i].no_of_samples   = 0;
 8003a62:	7dba      	ldrb	r2, [r7, #22]
 8003a64:	68f9      	ldr	r1, [r7, #12]
 8003a66:	4613      	mov	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	1a9b      	subs	r3, r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	f503 7365 	add.w	r3, r3, #916	; 0x394
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].effective_spads = 0;
 8003a78:	7dba      	ldrb	r2, [r7, #22]
 8003a7a:	68f9      	ldr	r1, [r7, #12]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	1a9b      	subs	r3, r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].peak_rate_mcps  = 0;
 8003a8e:	7dba      	ldrb	r2, [r7, #22]
 8003a90:	68f9      	ldr	r1, [r7, #12]
 8003a92:	4613      	mov	r3, r2
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].median_range_mm = 0;
 8003aa4:	7dba      	ldrb	r2, [r7, #22]
 8003aa6:	68f9      	ldr	r1, [r7, #12]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	1a9b      	subs	r3, r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].range_mm_offset = 0;
 8003aba:	7dba      	ldrb	r2, [r7, #22]
 8003abc:	68f9      	ldr	r1, [r7, #12]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003ad0:	7dbb      	ldrb	r3, [r7, #22]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	75bb      	strb	r3, [r7, #22]
 8003ad6:	7dbb      	ldrb	r3, [r7, #22]
 8003ad8:	2b04      	cmp	r3, #4
 8003ada:	d9c2      	bls.n	8003a62 <VL53LX_data_init+0xb0>
	}

	pdev->wait_method             = VL53LX_WAIT_METHOD_BLOCKING;
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE;
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	221e      	movs	r2, #30
 8003ae6:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = 0;
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	2200      	movs	r2, #0
 8003aec:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53LX_DEVICEMEASUREMENTMODE_STOP;
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	2200      	movs	r2, #0
 8003af2:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	2201      	movs	r2, #1
 8003af8:	711a      	strb	r2, [r3, #4]
		VL53LX_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	2201      	movs	r2, #1
 8003afe:	715a      	strb	r2, [r3, #5]
		VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	2201      	movs	r2, #1
 8003b04:	719a      	strb	r2, [r3, #6]
		VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b0c:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003b14:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8003b1c:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	2264      	movs	r2, #100	; 0x64
 8003b22:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8003b2a:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pdev->offset_results.max_results    = VL53LX_MAX_OFFSET_RANGE_RESULTS;
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8003b3a:	3302      	adds	r3, #2
 8003b3c:	2203      	movs	r2, #3
 8003b3e:	701a      	strb	r2, [r3, #0]
	pdev->offset_results.active_results = 0;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8003b46:	3303      	adds	r3, #3
 8003b48:	2200      	movs	r2, #0
 8003b4a:	701a      	strb	r2, [r3, #0]



	pdev->gain_cal.standard_ranging_gain_factor =
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	f240 72db 	movw	r2, #2011	; 0x7db
 8003b52:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
			VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f240 72c3 	movw	r2, #1987	; 0x7c3
 8003b5c:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53LX_init_version(Dev);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f004 f83f 	bl	8007be4 <VL53LX_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003b6c:	3310      	adds	r3, #16
 8003b6e:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8003b72:	2100      	movs	r1, #0
 8003b74:	4618      	mov	r0, r3
 8003b76:	f011 faeb 	bl	8015150 <memset>
	pdev->bin_rec_pos = 0;
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003b80:	330c      	adds	r3, #12
 8003b82:	2200      	movs	r2, #0
 8003b84:	701a      	strb	r2, [r3, #0]
	pdev->pos_before_next_recom = 0;
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003b8c:	330d      	adds	r3, #13
 8003b8e:	2200      	movs	r2, #0
 8003b90:	701a      	strb	r2, [r3, #0]



	if (read_p2p_data > 0 && status == VL53LX_ERROR_NONE)
 8003b92:	78fb      	ldrb	r3, [r7, #3]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <VL53LX_data_init+0x1f8>
 8003b98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d104      	bne.n	8003baa <VL53LX_data_init+0x1f8>
		status = VL53LX_read_p2p_data(Dev);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f8b7 	bl	8003d14 <VL53LX_read_p2p_data>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 8003baa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d107      	bne.n	8003bc2 <VL53LX_data_init+0x210>
		status = VL53LX_init_refspadchar_config_struct(
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f002 ffdf 	bl	8006b7c <VL53LX_init_refspadchar_config_struct>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53LX_ERROR_NONE)
 8003bc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d107      	bne.n	8003bda <VL53LX_data_init+0x228>
		status = VL53LX_init_ssc_config_struct(
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f002 fff7 	bl	8006bc4 <VL53LX_init_ssc_config_struct>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53LX_ERROR_NONE)
 8003bda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10b      	bne.n	8003bfa <VL53LX_data_init+0x248>
		status = VL53LX_init_xtalk_config_struct(
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	f003 f808 	bl	8006c06 <VL53LX_init_xtalk_config_struct>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53LX_ERROR_NONE)
 8003bfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d107      	bne.n	8003c12 <VL53LX_data_init+0x260>
		status = VL53LX_init_xtalk_extract_config_struct(
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f003 f86f 	bl	8006cec <VL53LX_init_xtalk_extract_config_struct>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53LX_ERROR_NONE)
 8003c12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d107      	bne.n	8003c2a <VL53LX_data_init+0x278>
		status = VL53LX_init_offset_cal_config_struct(
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003c20:	4618      	mov	r0, r3
 8003c22:	f003 f892 	bl	8006d4a <VL53LX_init_offset_cal_config_struct>
 8003c26:	4603      	mov	r3, r0
 8003c28:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53LX_ERROR_NONE)
 8003c2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d107      	bne.n	8003c42 <VL53LX_data_init+0x290>
		status = VL53LX_init_zone_cal_config_struct(
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f003 f8ad 	bl	8006d98 <VL53LX_init_zone_cal_config_struct>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53LX_ERROR_NONE)
 8003c42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10b      	bne.n	8003c62 <VL53LX_data_init+0x2b0>
		status = VL53LX_init_hist_post_process_config_struct(
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003c56:	4619      	mov	r1, r3
 8003c58:	4610      	mov	r0, r2
 8003c5a:	f003 f8c1 	bl	8006de0 <VL53LX_init_hist_post_process_config_struct>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53LX_ERROR_NONE)
 8003c62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d107      	bne.n	8003c7a <VL53LX_data_init+0x2c8>
		status = VL53LX_init_hist_gen3_dmax_config_struct(
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8003c70:	4618      	mov	r0, r3
 8003c72:	f003 fac0 	bl	80071f6 <VL53LX_init_hist_gen3_dmax_config_struct>
 8003c76:	4603      	mov	r3, r0
 8003c78:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53LX_ERROR_NONE)
 8003c7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d106      	bne.n	8003c90 <VL53LX_data_init+0x2de>
		status = VL53LX_init_tuning_parm_storage_struct(
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	33f8      	adds	r3, #248	; 0xf8
 8003c86:	4618      	mov	r0, r3
 8003c88:	f003 f919 	bl	8006ebe <VL53LX_init_tuning_parm_storage_struct>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53LX_ERROR_NONE)
 8003c90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d116      	bne.n	8003cc6 <VL53LX_data_init+0x314>
		status = VL53LX_set_preset_mode(
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	7858      	ldrb	r0, [r3, #1]
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	8b1c      	ldrh	r4, [r3, #24]
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	689d      	ldr	r5, [r3, #8]
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	6912      	ldr	r2, [r2, #16]
 8003cac:	6939      	ldr	r1, [r7, #16]
 8003cae:	6949      	ldr	r1, [r1, #20]
 8003cb0:	9102      	str	r1, [sp, #8]
 8003cb2:	9201      	str	r2, [sp, #4]
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	462b      	mov	r3, r5
 8003cb8:	4622      	mov	r2, r4
 8003cba:	4601      	mov	r1, r0
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 fb3e 	bl	800433e <VL53LX_set_preset_mode>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53LX_init_histogram_bin_data_struct(
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ccc:	461a      	mov	r2, r3
 8003cce:	2118      	movs	r1, #24
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	f008 fa30 	bl	800c136 <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53LX_init_histogram_bin_data_struct(
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8003cdc:	461a      	mov	r2, r3
 8003cde:	2118      	movs	r1, #24
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	f008 fa28 	bl	800c136 <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53LX_init_xtalk_bin_data_struct(
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 8003cec:	461a      	mov	r2, r3
 8003cee:	210c      	movs	r1, #12
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	f004 fd33 	bl	800875c <VL53LX_init_xtalk_bin_data_struct>
			VL53LX_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53LX_xtalk_cal_data_init(
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f007 fc24 	bl	800b544 <VL53LX_xtalk_cal_data_init>
			Dev
			);



	VL53LX_dynamic_xtalk_correction_data_init(
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f007 fb3b 	bl	800b378 <VL53LX_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53LX_low_power_auto_data_init(
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f007 fc47 	bl	800b596 <VL53LX_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8003d08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bdb0      	pop	{r4, r5, r7, pc}

08003d14 <VL53LX_read_p2p_data>:


VL53LX_Error VL53LX_read_p2p_data(
	VL53LX_DEV        Dev)
{
 8003d14:	b590      	push	{r4, r7, lr}
 8003d16:	b091      	sub	sp, #68	; 0x44
 8003d18:	af04      	add	r7, sp, #16
 8003d1a:	6078      	str	r0, [r7, #4]



	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3318      	adds	r3, #24
 8003d26:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8003d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003d2e:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8003d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d32:	3348      	adds	r3, #72	; 0x48
 8003d34:	623b      	str	r3, [r7, #32]
	VL53LX_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 8003d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d38:	339c      	adds	r3, #156	; 0x9c
 8003d3a:	61fb      	str	r3, [r7, #28]

	VL53LX_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8003d3c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d109      	bne.n	8003d58 <VL53LX_read_p2p_data+0x44>
		status = VL53LX_get_static_nvm_managed(
 8003d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d46:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f00b fbb0 	bl	800f4b2 <VL53LX_get_static_nvm_managed>
 8003d52:	4603      	mov	r3, r0
 8003d54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53LX_ERROR_NONE)
 8003d58:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d108      	bne.n	8003d72 <VL53LX_read_p2p_data+0x5e>
		status = VL53LX_get_customer_nvm_managed(
 8003d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d62:	3348      	adds	r3, #72	; 0x48
 8003d64:	4619      	mov	r1, r3
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f00b fce1 	bl	800f72e <VL53LX_get_customer_nvm_managed>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53LX_ERROR_NONE) {
 8003d72:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d117      	bne.n	8003daa <VL53LX_read_p2p_data+0x96>

		status = VL53LX_get_nvm_copy_data(
 8003d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7c:	f203 3392 	addw	r3, r3, #914	; 0x392
 8003d80:	4619      	mov	r1, r3
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f00c fbdd 	bl	8010542 <VL53LX_get_nvm_copy_data>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53LX_ERROR_NONE)
 8003d8e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d109      	bne.n	8003daa <VL53LX_read_p2p_data+0x96>
			VL53LX_copy_rtn_good_spads_to_buffer(
 8003d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d98:	f203 3292 	addw	r2, r3, #914	; 0x392
 8003d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8003da2:	4619      	mov	r1, r3
 8003da4:	4610      	mov	r0, r2
 8003da6:	f004 fa2f 	bl	8008208 <VL53LX_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53LX_ERROR_NONE) {
 8003daa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10e      	bne.n	8003dd0 <VL53LX_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	895b      	ldrh	r3, [r3, #10]
 8003db6:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	62da      	str	r2, [r3, #44]	; 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	865a      	strh	r2, [r3, #50]	; 0x32
	}


	if (status == VL53LX_ERROR_NONE)
 8003dd0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d108      	bne.n	8003dea <VL53LX_read_p2p_data+0xd6>
		status =
			VL53LX_read_nvm_optical_centre(
 8003dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dda:	33c0      	adds	r3, #192	; 0xc0
 8003ddc:	4619      	mov	r1, r3
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f00b fa1b 	bl	800f21a <VL53LX_read_nvm_optical_centre>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53LX_ERROR_NONE)
 8003dea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d108      	bne.n	8003e04 <VL53LX_read_p2p_data+0xf0>
		status =
			VL53LX_read_nvm_cal_peak_rate_map(
 8003df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df4:	3360      	adds	r3, #96	; 0x60
 8003df6:	4619      	mov	r1, r3
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f00b fa31 	bl	800f260 <VL53LX_read_nvm_cal_peak_rate_map>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53LX_ERROR_NONE) {
 8003e04:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d12d      	bne.n	8003e68 <VL53LX_read_p2p_data+0x154>

		status =
			VL53LX_read_nvm_additional_offset_cal_data(
 8003e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0e:	339c      	adds	r3, #156	; 0x9c
 8003e10:	4619      	mov	r1, r3
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f00b fa4a 	bl	800f2ac <VL53LX_read_nvm_additional_offset_cal_data>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	889b      	ldrh	r3, [r3, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d120      	bne.n	8003e68 <VL53LX_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d11c      	bne.n	8003e68 <VL53LX_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	2280      	movs	r2, #128	; 0x80
 8003e32:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003e3a:	80da      	strh	r2, [r3, #6]



			VL53LX_calc_mm_effective_spads(
 8003e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3e:	f893 03c2 	ldrb.w	r0, [r3, #962]	; 0x3c2
 8003e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e44:	f893 43c3 	ldrb.w	r4, [r3, #963]	; 0x3c3
 8003e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4a:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8003e4e:	69fa      	ldr	r2, [r7, #28]
 8003e50:	69f9      	ldr	r1, [r7, #28]
 8003e52:	3102      	adds	r1, #2
 8003e54:	9103      	str	r1, [sp, #12]
 8003e56:	9202      	str	r2, [sp, #8]
 8003e58:	2238      	movs	r2, #56	; 0x38
 8003e5a:	9201      	str	r2, [sp, #4]
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	23ff      	movs	r3, #255	; 0xff
 8003e60:	22c7      	movs	r2, #199	; 0xc7
 8003e62:	4621      	mov	r1, r4
 8003e64:	f006 f97a 	bl	800a15c <VL53LX_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53LX_ERROR_NONE) {
 8003e68:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d12f      	bne.n	8003ed0 <VL53LX_read_p2p_data+0x1bc>

		status =
			VL53LX_read_nvm_fmt_range_results_data(
 8003e70:	f107 030c 	add.w	r3, r7, #12
 8003e74:	461a      	mov	r2, r3
 8003e76:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f00b fa39 	bl	800f2f2 <VL53LX_read_nvm_fmt_range_results_data>
 8003e80:	4603      	mov	r3, r0
 8003e82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				VL53LX_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53LX_ERROR_NONE) {
 8003e86:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d120      	bne.n	8003ed0 <VL53LX_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 8003e8e:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 8003e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e92:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 8003e96:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 8003e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9a:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 8003e9e:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 8003ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea2:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 8003ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d006      	beq.n	8003ebe <VL53LX_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 8003eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 8003eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb8:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8003ebc:	e003      	b.n	8003ec6 <VL53LX_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 8003ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec0:	2214      	movs	r2, #20
 8003ec2:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 8003ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ecc:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		}
	}


	if (status == VL53LX_ERROR_NONE)
 8003ed0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10b      	bne.n	8003ef0 <VL53LX_read_p2p_data+0x1dc>
		status =
			VL53LX_RdWord(
 8003ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eda:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8003ede:	3304      	adds	r3, #4
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	21de      	movs	r1, #222	; 0xde
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f00d faa7 	bl	8011438 <VL53LX_RdWord>
 8003eea:	4603      	mov	r3, r0
 8003eec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53LX_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8003ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef2:	f8b3 32de 	ldrh.w	r3, [r3, #734]	; 0x2de
 8003ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003efa:	d204      	bcs.n	8003f06 <VL53LX_read_p2p_data+0x1f2>
			VL53LX_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8003efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efe:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 8003f02:	f8a3 22de 	strh.w	r2, [r3, #734]	; 0x2de
	}



	if (status == VL53LX_ERROR_NONE)
 8003f06:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d108      	bne.n	8003f20 <VL53LX_read_p2p_data+0x20c>
		status =
			VL53LX_get_mode_mitigation_roi(
 8003f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f10:	33bc      	adds	r3, #188	; 0xbc
 8003f12:	4619      	mov	r1, r3
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f91a 	bl	800414e <VL53LX_get_mode_mitigation_roi>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 8003f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f22:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d114      	bne.n	8003f54 <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 8003f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10f      	bne.n	8003f54 <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8003f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f36:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8003f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f40:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8003f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f46:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8003f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f50:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 8003f54:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3734      	adds	r7, #52	; 0x34
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd90      	pop	{r4, r7, pc}

08003f60 <VL53LX_set_inter_measurement_period_ms>:


VL53LX_Error VL53LX_set_inter_measurement_period_ms(
	VL53LX_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	3318      	adds	r3, #24
 8003f72:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <VL53LX_set_inter_measurement_period_ms+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8003f82:	23f1      	movs	r3, #241	; 0xf1
 8003f84:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE) {
 8003f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10e      	bne.n	8003fac <VL53LX_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8003f9a:	3304      	adds	r3, #4
 8003f9c:	881b      	ldrh	r3, [r3, #0]
 8003f9e:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
	}

	LOG_FUNCTION_END(status);

	return status;
 8003fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <VL53LX_set_timeouts_us>:
VL53LX_Error VL53LX_set_timeouts_us(
	VL53LX_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b088      	sub	sp, #32
 8003fc0:	af02      	add	r7, sp, #8
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
 8003fc8:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	3318      	adds	r3, #24
 8003fd2:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f8b3 32de 	ldrh.w	r3, [r3, #734]	; 0x2de
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <VL53LX_set_timeouts_us+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8003fde:	23f1      	movs	r3, #241	; 0xf1
 8003fe0:	75fb      	strb	r3, [r7, #23]

	if (status == VL53LX_ERROR_NONE) {
 8003fe2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d11b      	bne.n	8004022 <VL53LX_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	611a      	str	r2, [r3, #16]

		status =
		VL53LX_calc_timeout_register_values(
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	f8b3 12de 	ldrh.w	r1, [r3, #734]	; 0x2de
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f203 331e 	addw	r3, r3, #798	; 0x31e
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	f502 724d 	add.w	r2, r2, #820	; 0x334
 800400e:	9201      	str	r2, [sp, #4]
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	460b      	mov	r3, r1
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	68b8      	ldr	r0, [r7, #8]
 800401a:	f004 ff42 	bl	8008ea2 <VL53LX_calc_timeout_register_values>
 800401e:	4603      	mov	r3, r0
 8004020:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8004022:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <VL53LX_get_timeouts_us>:
VL53LX_Error VL53LX_get_timeouts_us(
	VL53LX_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b088      	sub	sp, #32
 8004032:	af00      	add	r7, sp, #0
 8004034:	60f8      	str	r0, [r7, #12]
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800403c:	2300      	movs	r3, #0
 800403e:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev =
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	3318      	adds	r3, #24
 8004044:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8004046:	2300      	movs	r3, #0
 8004048:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 800404a:	2300      	movs	r3, #0
 800404c:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	f8b3 32de 	ldrh.w	r3, [r3, #734]	; 0x2de
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <VL53LX_get_timeouts_us+0x2e>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8004058:	23f1      	movs	r3, #241	; 0xf1
 800405a:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 800405c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d14a      	bne.n	80040fa <VL53LX_get_timeouts_us+0xcc>


		macro_period_us =
			VL53LX_calc_macro_period_us(
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	f8b3 22de 	ldrh.w	r2, [r3, #734]	; 0x2de
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 8004070:	4619      	mov	r1, r3
 8004072:	4610      	mov	r0, r2
 8004074:	f004 fd8e 	bl	8008b94 <VL53LX_calc_macro_period_us>
 8004078:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53LX_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	f893 3325 	ldrb.w	r3, [r3, #805]	; 0x325
			VL53LX_calc_timeout_us(
 8004080:	6979      	ldr	r1, [r7, #20]
 8004082:	4618      	mov	r0, r3
 8004084:	f004 fe4d 	bl	8008d22 <VL53LX_calc_timeout_us>
 8004088:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
		timeout_encoded =
 8004094:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8004096:	8a7b      	ldrh	r3, [r7, #18]
 8004098:	021b      	lsls	r3, r3, #8
 800409a:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80040a2:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 80040a4:	4413      	add	r3, r2
 80040a6:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 80040a8:	8a7b      	ldrh	r3, [r7, #18]
 80040aa:	6979      	ldr	r1, [r7, #20]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f004 fe9d 	bl	8008dec <VL53LX_calc_decoded_timeout_us>
 80040b2:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
		timeout_encoded =
 80040be:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 80040c0:	8a7b      	ldrh	r3, [r7, #18]
 80040c2:	021b      	lsls	r3, r3, #8
 80040c4:	b29a      	uxth	r2, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 80040cc:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 80040ce:	4413      	add	r3, r2
 80040d0:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 80040d2:	8a7b      	ldrh	r3, [r7, #18]
 80040d4:	6979      	ldr	r1, [r7, #20]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f004 fe88 	bl	8008dec <VL53LX_calc_decoded_timeout_us>
 80040dc:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 80040fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3720      	adds	r7, #32
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <VL53LX_set_user_zone>:


VL53LX_Error VL53LX_set_user_zone(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *puser_zone)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b084      	sub	sp, #16
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
 800410e:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004110:	2300      	movs	r3, #0
 8004112:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3318      	adds	r3, #24
 8004118:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53LX_encode_row_col(
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	7858      	ldrb	r0, [r3, #1]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	7819      	ldrb	r1, [r3, #0]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	f203 335b 	addw	r3, r3, #859	; 0x35b
 8004128:	461a      	mov	r2, r3
 800412a:	f005 fe94 	bl	8009e56 <VL53LX_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53LX_encode_zone_size(
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	7898      	ldrb	r0, [r3, #2]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	78d9      	ldrb	r1, [r3, #3]
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 800413c:	461a      	mov	r2, r3
 800413e:	f005 fec9 	bl	8009ed4 <VL53LX_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8004142:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <VL53LX_get_mode_mitigation_roi>:


VL53LX_Error VL53LX_get_mode_mitigation_roi(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *pmm_roi)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b086      	sub	sp, #24
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
 8004156:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004158:	2300      	movs	r3, #0
 800415a:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3318      	adds	r3, #24
 8004160:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8004162:	2300      	movs	r3, #0
 8004164:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8004166:	2300      	movs	r3, #0
 8004168:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 800416a:	2300      	movs	r3, #0
 800416c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53LX_decode_row_col(
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	f893 33c2 	ldrb.w	r3, [r3, #962]	; 0x3c2
 8004174:	f107 020e 	add.w	r2, r7, #14
 8004178:	f107 010d 	add.w	r1, r7, #13
 800417c:	4618      	mov	r0, r3
 800417e:	f008 f883 	bl	800c288 <VL53LX_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8004182:	7bba      	ldrb	r2, [r7, #14]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8004188:	7b7a      	ldrb	r2, [r7, #13]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f893 33c3 	ldrb.w	r3, [r3, #963]	; 0x3c3
 8004194:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8004196:	7bfb      	ldrb	r3, [r7, #15]
 8004198:	091b      	lsrs	r3, r3, #4
 800419a:	b2da      	uxtb	r2, r3
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	b2da      	uxtb	r2, r3
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 80041ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <VL53LX_init_zone_config_histogram_bins>:

VL53LX_Error VL53LX_init_zone_config_histogram_bins(
	VL53LX_zone_config_t   *pdata)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80041c0:	2300      	movs	r3, #0
 80041c2:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 80041c4:	2300      	movs	r3, #0
 80041c6:	73fb      	strb	r3, [r7, #15]
 80041c8:	e008      	b.n	80041dc <VL53LX_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
 80041ca:	7bfb      	ldrb	r3, [r7, #15]
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	4413      	add	r3, r2
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	for (i = 0; i < pdata->max_zones; i++)
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
 80041d8:	3301      	adds	r3, #1
 80041da:	73fb      	strb	r3, [r7, #15]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	7bfa      	ldrb	r2, [r7, #15]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d3f1      	bcc.n	80041ca <VL53LX_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 80041e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <VL53LX_set_zone_config>:

VL53LX_Error VL53LX_set_zone_config(
	VL53LX_DEV                 Dev,
	VL53LX_zone_config_t      *pzone_cfg)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b084      	sub	sp, #16
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
 80041fe:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004200:	2300      	movs	r3, #0
 8004202:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3318      	adds	r3, #24
 8004208:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	f103 00de 	add.w	r0, r3, #222	; 0xde
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	331c      	adds	r3, #28
 8004214:	2214      	movs	r2, #20
 8004216:	4619      	mov	r1, r3
 8004218:	f010 ff8c 	bl	8015134 <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	781a      	ldrb	r2, [r3, #0]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	785a      	ldrb	r2, [r3, #1]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

	status = VL53LX_init_zone_config_histogram_bins(&pdev->zone_cfg);
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	33c2      	adds	r3, #194	; 0xc2
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff ffbf 	bl	80041b8 <VL53LX_init_zone_config_histogram_bins>
 800423a:	4603      	mov	r3, r0
 800423c:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	785b      	ldrb	r3, [r3, #1]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d104      	bne.n	8004250 <VL53LX_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
 800424e:	e00f      	b.n	8004270 <VL53LX_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53LX_MAX_USER_ZONES)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	785b      	ldrb	r3, [r3, #1]
 8004254:	2b04      	cmp	r3, #4
 8004256:	d807      	bhi.n	8004268 <VL53LX_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	785b      	ldrb	r3, [r3, #1]
 800425c:	3301      	adds	r3, #1
 800425e:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
 8004266:	e003      	b.n	8004270 <VL53LX_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2206      	movs	r2, #6
 800426c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
				VL53LX_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 8004270:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <VL53LX_get_preset_mode_timing_cfg>:
	VL53LX_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	607a      	str	r2, [r7, #4]
 8004286:	603b      	str	r3, [r7, #0]
 8004288:	460b      	mov	r3, r1
 800428a:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800428c:	2300      	movs	r3, #0
 800428e:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	3318      	adds	r3, #24
 8004294:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8004296:	7afb      	ldrb	r3, [r7, #11]
 8004298:	2b21      	cmp	r3, #33	; 0x21
 800429a:	d030      	beq.n	80042fe <VL53LX_get_preset_mode_timing_cfg+0x82>
 800429c:	2b21      	cmp	r3, #33	; 0x21
 800429e:	dc43      	bgt.n	8004328 <VL53LX_get_preset_mode_timing_cfg+0xac>
 80042a0:	2b1b      	cmp	r3, #27
 80042a2:	d002      	beq.n	80042aa <VL53LX_get_preset_mode_timing_cfg+0x2e>
 80042a4:	2b1e      	cmp	r3, #30
 80042a6:	d015      	beq.n	80042d4 <VL53LX_get_preset_mode_timing_cfg+0x58>
 80042a8:	e03e      	b.n	8004328 <VL53LX_get_preset_mode_timing_cfg+0xac>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
		*pdss_config__target_total_rate_mcps =
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
		*pphasecal_config_timeout_us =
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
		*pmm_config_timeout_us =
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*prange_config_timeout_us =
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	601a      	str	r2, [r3, #0]

	break;
 80042d2:	e02c      	b.n	800432e <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
		*pdss_config__target_total_rate_mcps =
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
		*pphasecal_config_timeout_us =
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
		*pmm_config_timeout_us =
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*prange_config_timeout_us =
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	601a      	str	r2, [r3, #0]
	break;
 80042fc:	e017      	b.n	800432e <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
		*pdss_config__target_total_rate_mcps =
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
		*pphasecal_config_timeout_us =
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
		*pmm_config_timeout_us =
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*prange_config_timeout_us =
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	601a      	str	r2, [r3, #0]
	break;
 8004326:	e002      	b.n	800432e <VL53LX_get_preset_mode_timing_cfg+0xb2>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8004328:	23fc      	movs	r3, #252	; 0xfc
 800432a:	75fb      	strb	r3, [r7, #23]
		break;
 800432c:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800432e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004332:	4618      	mov	r0, r3
 8004334:	371c      	adds	r7, #28
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <VL53LX_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b096      	sub	sp, #88	; 0x58
 8004342:	af06      	add	r7, sp, #24
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	607b      	str	r3, [r7, #4]
 8004348:	460b      	mov	r3, r1
 800434a:	72fb      	strb	r3, [r7, #11]
 800434c:	4613      	mov	r3, r2
 800434e:	813b      	strh	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004350:	2300      	movs	r3, #0
 8004352:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53LX_LLDriverData_t *pdev =
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	3318      	adds	r3, #24
 800435a:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004362:	637b      	str	r3, [r7, #52]	; 0x34
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_hist_post_process_config_t *phistpostprocess =
 8004364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004366:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800436a:	633b      	str	r3, [r7, #48]	; 0x30
			&(pdev->histpostprocess);

	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800436c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436e:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8004372:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53LX_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8004374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004376:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800437a:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800437c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437e:	f203 331e 	addw	r3, r3, #798	; 0x31e
 8004382:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8004384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004386:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800438a:	623b      	str	r3, [r7, #32]
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800438c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8004392:	61fb      	str	r3, [r7, #28]
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8004394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004396:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800439a:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 800439c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439e:	33c2      	adds	r3, #194	; 0xc2
 80043a0:	617b      	str	r3, [r7, #20]
	VL53LX_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 80043a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a4:	33f8      	adds	r3, #248	; 0xf8
 80043a6:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 80043a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043aa:	7afa      	ldrb	r2, [r7, #11]
 80043ac:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 80043ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043b2:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 80043b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043b8:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80043ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80043be:	615a      	str	r2, [r3, #20]



	VL53LX_init_ll_driver_state(
 80043c0:	2103      	movs	r1, #3
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f003 fc2a 	bl	8007c1c <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 80043c8:	7afb      	ldrb	r3, [r7, #11]
 80043ca:	2b21      	cmp	r3, #33	; 0x21
 80043cc:	d02e      	beq.n	800442c <VL53LX_set_preset_mode+0xee>
 80043ce:	2b21      	cmp	r3, #33	; 0x21
 80043d0:	dc40      	bgt.n	8004454 <VL53LX_set_preset_mode+0x116>
 80043d2:	2b1b      	cmp	r3, #27
 80043d4:	d002      	beq.n	80043dc <VL53LX_set_preset_mode+0x9e>
 80043d6:	2b1e      	cmp	r3, #30
 80043d8:	d014      	beq.n	8004404 <VL53LX_set_preset_mode+0xc6>
 80043da:	e03b      	b.n	8004454 <VL53LX_set_preset_mode+0x116>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:

		status = VL53LX_preset_mode_histogram_long_range(
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	9304      	str	r3, [sp, #16]
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	9303      	str	r3, [sp, #12]
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	9302      	str	r3, [sp, #8]
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	9301      	str	r3, [sp, #4]
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043f8:	f003 f941 	bl	800767e <VL53LX_preset_mode_histogram_long_range>
 80043fc:	4603      	mov	r3, r0
 80043fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004402:	e02b      	b.n	800445c <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53LX_preset_mode_histogram_medium_range(
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	9304      	str	r3, [sp, #16]
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	9303      	str	r3, [sp, #12]
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	9302      	str	r3, [sp, #8]
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	9301      	str	r3, [sp, #4]
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800441c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800441e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004420:	f003 f9cb 	bl	80077ba <VL53LX_preset_mode_histogram_medium_range>
 8004424:	4603      	mov	r3, r0
 8004426:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800442a:	e017      	b.n	800445c <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53LX_preset_mode_histogram_short_range(
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	9304      	str	r3, [sp, #16]
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	9303      	str	r3, [sp, #12]
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	9302      	str	r3, [sp, #8]
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	9301      	str	r3, [sp, #4]
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004444:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004446:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004448:	f003 fa55 	bl	80078f6 <VL53LX_preset_mode_histogram_short_range>
 800444c:	4603      	mov	r3, r0
 800444e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004452:	e003      	b.n	800445c <VL53LX_set_preset_mode+0x11e>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8004454:	23fc      	movs	r3, #252	; 0xfc
 8004456:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		break;
 800445a:	bf00      	nop

	}



	if (status == VL53LX_ERROR_NONE) {
 800445c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004460:	2b00      	cmp	r3, #0
 8004462:	d105      	bne.n	8004470 <VL53LX_set_preset_mode+0x132>

		pstatic->dss_config__target_total_rate_mcps =
 8004464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004466:	893a      	ldrh	r2, [r7, #8]
 8004468:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 800446a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446c:	893a      	ldrh	r2, [r7, #8]
 800446e:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53LX_ERROR_NONE)
 8004470:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004474:	2b00      	cmp	r3, #0
 8004476:	d108      	bne.n	800448a <VL53LX_set_preset_mode+0x14c>
		status =
			VL53LX_set_timeouts_us(
 8004478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800447a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f7ff fd9c 	bl	8003fbc <VL53LX_set_timeouts_us>
 8004484:	4603      	mov	r3, r0
 8004486:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53LX_ERROR_NONE)
 800448a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800448e:	2b00      	cmp	r3, #0
 8004490:	d106      	bne.n	80044a0 <VL53LX_set_preset_mode+0x162>
		status =
			VL53LX_set_inter_measurement_period_ms(
 8004492:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f7ff fd63 	bl	8003f60 <VL53LX_set_inter_measurement_period_ms>
 800449a:	4603      	mov	r3, r0
 800449c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 80044a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a2:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 80044a6:	3301      	adds	r3, #1
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ac:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 80044b0:	4619      	mov	r1, r3
 80044b2:	4610      	mov	r0, r2
 80044b4:	f003 ffc8 	bl	8008448 <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 80044b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3740      	adds	r7, #64	; 0x40
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <VL53LX_init_and_start_range>:

VL53LX_Error VL53LX_init_and_start_range(
	VL53LX_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53LX_DeviceConfigLevel       device_config_level)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b0d2      	sub	sp, #328	; 0x148
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	1d3b      	adds	r3, r7, #4
 80044cc:	6018      	str	r0, [r3, #0]
 80044ce:	4608      	mov	r0, r1
 80044d0:	4611      	mov	r1, r2
 80044d2:	1cfb      	adds	r3, r7, #3
 80044d4:	4602      	mov	r2, r0
 80044d6:	701a      	strb	r2, [r3, #0]
 80044d8:	1cbb      	adds	r3, r7, #2
 80044da:	460a      	mov	r2, r1
 80044dc:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80044de:	2300      	movs	r3, #0
 80044e0:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80044e4:	1d3b      	adds	r3, r7, #4
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3318      	adds	r3, #24
 80044ea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	VL53LX_LLDriverResults_t  *pres =
 80044ee:	1d3b      	adds	r3, r7, #4
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80044f6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53LXDevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 80044fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80044fe:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8004502:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	VL53LX_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8004506:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800450a:	3348      	adds	r3, #72	; 0x48
 800450c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8004510:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004514:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8004518:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800451c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004520:	f203 331e 	addw	r3, r3, #798	; 0x31e
 8004524:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8004528:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800452c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8004530:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8004534:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004538:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800453c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8004540:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004544:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004548:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	VL53LX_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 800454c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004550:	332c      	adds	r3, #44	; 0x2c
 8004552:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8004556:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800455a:	3348      	adds	r3, #72	; 0x48
 800455c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8004560:	f107 030c 	add.w	r3, r7, #12
 8004564:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint16_t i                          = 0;
 8004568:	2300      	movs	r3, #0
 800456a:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t i2c_index                  = 0;
 800456e:	2300      	movs	r3, #0
 8004570:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 8004574:	2300      	movs	r3, #0
 8004576:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 800457a:	2300      	movs	r3, #0
 800457c:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 8004580:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004584:	1cfa      	adds	r2, r7, #3
 8004586:	7812      	ldrb	r2, [r2, #0]
 8004588:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 800458a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800458e:	791b      	ldrb	r3, [r3, #4]
 8004590:	b25b      	sxtb	r3, r3
 8004592:	f003 030f 	and.w	r3, r3, #15
 8004596:	b25a      	sxtb	r2, r3
		VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8004598:	1cfb      	adds	r3, r7, #3
 800459a:	f993 3000 	ldrsb.w	r3, [r3]
 800459e:	4313      	orrs	r3, r2
 80045a0:	b25b      	sxtb	r3, r3
 80045a2:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 80045a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80045a8:	711a      	strb	r2, [r3, #4]


	status =
		VL53LX_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 80045aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80045ae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
		VL53LX_set_user_zone(
 80045b2:	3336      	adds	r3, #54	; 0x36
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80045ba:	4413      	add	r3, r2
 80045bc:	1d9a      	adds	r2, r3, #6
 80045be:	1d3b      	adds	r3, r7, #4
 80045c0:	4611      	mov	r1, r2
 80045c2:	6818      	ldr	r0, [r3, #0]
 80045c4:	f7ff fd9f 	bl	8004106 <VL53LX_set_user_zone>
 80045c8:	4603      	mov	r3, r0
 80045ca:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 80045ce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80045d2:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d016      	beq.n	8004608 <VL53LX_init_and_start_range+0x144>
		status =
		VL53LX_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id])
 80045da:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80045de:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80045e2:	461a      	mov	r2, r3
		VL53LX_set_zone_dss_config(
 80045e4:	4613      	mov	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80045f0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80045f4:	4413      	add	r3, r2
 80045f6:	1c9a      	adds	r2, r3, #2
 80045f8:	1d3b      	adds	r3, r7, #4
 80045fa:	4611      	mov	r1, r2
 80045fc:	6818      	ldr	r0, [r3, #0]
 80045fe:	f001 fad7 	bl	8005bb0 <VL53LX_set_zone_dss_config>
 8004602:	4603      	mov	r3, r0
 8004604:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 8004608:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800460c:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10d      	bne.n	8004634 <VL53LX_init_and_start_range+0x170>
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 8004618:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800461c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 8004620:	2b01      	cmp	r3, #1
 8004622:	d107      	bne.n	8004634 <VL53LX_init_and_start_range+0x170>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8004624:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004628:	f8b3 22a4 	ldrh.w	r2, [r3, #676]	; 0x2a4
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800462c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004630:	f8a3 2316 	strh.w	r2, [r3, #790]	; 0x316





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 8004634:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004638:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800463c:	3312      	adds	r3, #18
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	2bff      	cmp	r3, #255	; 0xff
 8004642:	d106      	bne.n	8004652 <VL53LX_init_and_start_range+0x18e>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8004644:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004648:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800464c:	3312      	adds	r3, #18
 800464e:	2200      	movs	r2, #0
 8004650:	701a      	strb	r2, [r3, #0]


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8004652:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004656:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800465a:	3311      	adds	r3, #17
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d133      	bne.n	80046ca <VL53LX_init_and_start_range+0x206>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8004662:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004666:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800466a:	3312      	adds	r3, #18
 800466c:	781b      	ldrb	r3, [r3, #0]
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800466e:	2b00      	cmp	r3, #0
 8004670:	d12b      	bne.n	80046ca <VL53LX_init_and_start_range+0x206>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8004672:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004676:	f893 2320 	ldrb.w	r2, [r3, #800]	; 0x320
		pdev->low_power_auto_data.saved_interrupt_config =
 800467a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800467e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004682:	3313      	adds	r3, #19
 8004684:	701a      	strb	r2, [r3, #0]

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8004686:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800468a:	2220      	movs	r2, #32
 800468c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

		if ((pdev->dyn_cfg.system__sequence_config & (
 8004690:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004694:	f893 335d 	ldrb.w	r3, [r3, #861]	; 0x35d
 8004698:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800469c:	2b00      	cmp	r3, #0
 800469e:	d109      	bne.n	80046b4 <VL53LX_init_and_start_range+0x1f0>
			VL53LX_SEQUENCE_MM1_EN | VL53LX_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 80046a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80046a4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80046a8:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 80046aa:	b21a      	sxth	r2, r3
 80046ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80046b0:	825a      	strh	r2, [r3, #18]
 80046b2:	e003      	b.n	80046bc <VL53LX_init_and_start_range+0x1f8>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 80046b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80046b8:	2200      	movs	r2, #0
 80046ba:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 80046bc:	1cbb      	adds	r3, r7, #2
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	2b04      	cmp	r3, #4
 80046c2:	d802      	bhi.n	80046ca <VL53LX_init_and_start_range+0x206>
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 80046c4:	1cbb      	adds	r3, r7, #2
 80046c6:	2205      	movs	r2, #5
 80046c8:	701a      	strb	r2, [r3, #0]
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80046ca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80046ce:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 80046d2:	3311      	adds	r3, #17
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d114      	bne.n	8004704 <VL53LX_init_and_start_range+0x240>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 80046da:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80046de:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 80046e2:	3312      	adds	r3, #18
 80046e4:	781b      	ldrb	r3, [r3, #0]
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d10c      	bne.n	8004704 <VL53LX_init_and_start_range+0x240>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 80046ea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80046ee:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 80046f2:	3313      	adds	r3, #19
 80046f4:	781a      	ldrb	r2, [r3, #0]
		pdev->gen_cfg.system__interrupt_config_gpio =
 80046f6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80046fa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


		device_config_level = VL53LX_DEVICECONFIGLEVEL_FULL;
 80046fe:	1cbb      	adds	r3, r7, #2
 8004700:	2206      	movs	r2, #6
 8004702:	701a      	strb	r2, [r3, #0]





	if (status == VL53LX_ERROR_NONE)
 8004704:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004708:	2b00      	cmp	r3, #0
 800470a:	d106      	bne.n	800471a <VL53LX_init_and_start_range+0x256>
		status = VL53LX_save_cfg_data(Dev);
 800470c:	1d3b      	adds	r3, r7, #4
 800470e:	6818      	ldr	r0, [r3, #0]
 8004710:	f005 fe8e 	bl	800a430 <VL53LX_save_cfg_data>
 8004714:	4603      	mov	r3, r0
 8004716:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147



	switch (device_config_level) {
 800471a:	1cbb      	adds	r3, r7, #2
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	3b01      	subs	r3, #1
 8004720:	2b05      	cmp	r3, #5
 8004722:	d827      	bhi.n	8004774 <VL53LX_init_and_start_range+0x2b0>
 8004724:	a201      	add	r2, pc, #4	; (adr r2, 800472c <VL53LX_init_and_start_range+0x268>)
 8004726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472a:	bf00      	nop
 800472c:	0800476d 	.word	0x0800476d
 8004730:	08004765 	.word	0x08004765
 8004734:	0800475d 	.word	0x0800475d
 8004738:	08004755 	.word	0x08004755
 800473c:	0800474d 	.word	0x0800474d
 8004740:	08004745 	.word	0x08004745
	case VL53LX_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53LX_STATIC_NVM_MANAGED_I2C_INDEX;
 8004744:	2301      	movs	r3, #1
 8004746:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800474a:	e017      	b.n	800477c <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53LX_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 800474c:	230d      	movs	r3, #13
 800474e:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8004752:	e013      	b.n	800477c <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53LX_STATIC_CONFIG_I2C_INDEX;
 8004754:	2324      	movs	r3, #36	; 0x24
 8004756:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800475a:	e00f      	b.n	800477c <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53LX_GENERAL_CONFIG_I2C_INDEX;
 800475c:	2344      	movs	r3, #68	; 0x44
 800475e:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8004762:	e00b      	b.n	800477c <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53LX_TIMING_CONFIG_I2C_INDEX;
 8004764:	235a      	movs	r3, #90	; 0x5a
 8004766:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800476a:	e007      	b.n	800477c <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53LX_DYNAMIC_CONFIG_I2C_INDEX;
 800476c:	2371      	movs	r3, #113	; 0x71
 800476e:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8004772:	e003      	b.n	800477c <VL53LX_init_and_start_range+0x2b8>
	default:
		i2c_index = VL53LX_SYSTEM_CONTROL_I2C_INDEX;
 8004774:	2383      	movs	r3, #131	; 0x83
 8004776:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800477a:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 800477c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004780:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 8004784:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 8004788:	f107 030c 	add.w	r3, r7, #12
 800478c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8004790:	2300      	movs	r3, #0
 8004792:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8004796:	e00b      	b.n	80047b0 <VL53LX_init_and_start_range+0x2ec>
		*pbuffer++ = 0;
 8004798:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800479c:	1c5a      	adds	r2, r3, #1
 800479e:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 80047a2:	2200      	movs	r2, #0
 80047a4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 80047a6:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 80047aa:	3301      	adds	r3, #1
 80047ac:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 80047b0:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 80047b4:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d3ed      	bcc.n	8004798 <VL53LX_init_and_start_range+0x2d4>



	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_FULL &&
 80047bc:	1cbb      	adds	r3, r7, #2
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2b05      	cmp	r3, #5
 80047c2:	d917      	bls.n	80047f4 <VL53LX_init_and_start_range+0x330>
 80047c4:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d113      	bne.n	80047f4 <VL53LX_init_and_start_range+0x330>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80047cc:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80047d0:	f1c3 0301 	rsb	r3, r3, #1
 80047d4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80047d8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_static_nvm_managed(
 80047dc:	f107 020c 	add.w	r2, r7, #12
 80047e0:	4413      	add	r3, r2
 80047e2:	461a      	mov	r2, r3
 80047e4:	210b      	movs	r1, #11
 80047e6:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80047ea:	f00a fdad 	bl	800f348 <VL53LX_i2c_encode_static_nvm_managed>
 80047ee:	4603      	mov	r3, r0
 80047f0:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 80047f4:	1cbb      	adds	r3, r7, #2
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d917      	bls.n	800482c <VL53LX_init_and_start_range+0x368>
 80047fc:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004800:	2b00      	cmp	r3, #0
 8004802:	d113      	bne.n	800482c <VL53LX_init_and_start_range+0x368>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004804:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004808:	f1c3 030d 	rsb	r3, r3, #13
 800480c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004810:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_customer_nvm_managed(
 8004814:	f107 020c 	add.w	r2, r7, #12
 8004818:	4413      	add	r3, r2
 800481a:	461a      	mov	r2, r3
 800481c:	2117      	movs	r1, #23
 800481e:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8004822:	f00a fe6d 	bl	800f500 <VL53LX_i2c_encode_customer_nvm_managed>
 8004826:	4603      	mov	r3, r0
 8004828:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800482c:	1cbb      	adds	r3, r7, #2
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	2b03      	cmp	r3, #3
 8004832:	d917      	bls.n	8004864 <VL53LX_init_and_start_range+0x3a0>
 8004834:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004838:	2b00      	cmp	r3, #0
 800483a:	d113      	bne.n	8004864 <VL53LX_init_and_start_range+0x3a0>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800483c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004840:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8004844:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_static_config(
				pstatic,
				VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004848:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_static_config(
 800484c:	f107 020c 	add.w	r2, r7, #12
 8004850:	4413      	add	r3, r2
 8004852:	461a      	mov	r2, r3
 8004854:	2120      	movs	r1, #32
 8004856:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800485a:	f00a ffb3 	bl	800f7c4 <VL53LX_i2c_encode_static_config>
 800485e:	4603      	mov	r3, r0
 8004860:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8004864:	1cbb      	adds	r3, r7, #2
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2b02      	cmp	r3, #2
 800486a:	d917      	bls.n	800489c <VL53LX_init_and_start_range+0x3d8>
 800486c:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004870:	2b00      	cmp	r3, #0
 8004872:	d113      	bne.n	800489c <VL53LX_init_and_start_range+0x3d8>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004874:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004878:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 800487c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_general_config(
				pgeneral,
				VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004880:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_general_config(
 8004884:	f107 020c 	add.w	r2, r7, #12
 8004888:	4413      	add	r3, r2
 800488a:	461a      	mov	r2, r3
 800488c:	2116      	movs	r1, #22
 800488e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8004892:	f00b f87a 	bl	800f98a <VL53LX_i2c_encode_general_config>
 8004896:	4603      	mov	r3, r0
 8004898:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 800489c:	1cbb      	adds	r3, r7, #2
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d917      	bls.n	80048d4 <VL53LX_init_and_start_range+0x410>
 80048a4:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d113      	bne.n	80048d4 <VL53LX_init_and_start_range+0x410>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80048ac:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80048b0:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80048b4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_timing_config(
				ptiming,
				VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80048b8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_timing_config(
 80048bc:	f107 020c 	add.w	r2, r7, #12
 80048c0:	4413      	add	r3, r2
 80048c2:	461a      	mov	r2, r3
 80048c4:	2117      	movs	r1, #23
 80048c6:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80048ca:	f00b f8e2 	bl	800fa92 <VL53LX_i2c_encode_timing_config>
 80048ce:	4603      	mov	r3, r0
 80048d0:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 80048d4:	1cbb      	adds	r3, r7, #2
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d036      	beq.n	800494a <VL53LX_init_and_start_range+0x486>
 80048dc:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d132      	bne.n	800494a <VL53LX_init_and_start_range+0x486>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80048e4:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80048e8:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 80048ec:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53LX_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 80048f0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80048f4:	791b      	ldrb	r3, [r3, #4]
 80048f6:	f003 0320 	and.w	r3, r3, #32
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d017      	beq.n	800492e <VL53LX_init_and_start_range+0x46a>
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 80048fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004902:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 8004904:	f043 0301 	orr.w	r3, r3, #1
 8004908:	b2da      	uxtb	r2, r3
 800490a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800490e:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 8004910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004914:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 8004916:	f043 0301 	orr.w	r3, r3, #1
 800491a:	b2da      	uxtb	r2, r3
 800491c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004920:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 8004922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004926:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 8004928:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800492c:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53LX_i2c_encode_dynamic_config(
				pdynamic,
				VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800492e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_dynamic_config(
 8004932:	f107 020c 	add.w	r2, r7, #12
 8004936:	4413      	add	r3, r2
 8004938:	461a      	mov	r2, r3
 800493a:	2112      	movs	r1, #18
 800493c:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8004940:	f00b f929 	bl	800fb96 <VL53LX_i2c_encode_dynamic_config>
 8004944:	4603      	mov	r3, r0
 8004946:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (status == VL53LX_ERROR_NONE) {
 800494a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800494e:	2b00      	cmp	r3, #0
 8004950:	d113      	bne.n	800497a <VL53LX_init_and_start_range+0x4b6>

		i2c_buffer_offset_bytes =
 8004952:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004956:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 800495a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_system_control(
				psystem,
				VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800495e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_system_control(
 8004962:	f107 020c 	add.w	r2, r7, #12
 8004966:	4413      	add	r3, r2
 8004968:	461a      	mov	r2, r3
 800496a:	2105      	movs	r1, #5
 800496c:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8004970:	f00b f996 	bl	800fca0 <VL53LX_i2c_encode_system_control>
 8004974:	4603      	mov	r3, r0
 8004976:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}



	if (status == VL53LX_ERROR_NONE) {
 800497a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10c      	bne.n	800499c <VL53LX_init_and_start_range+0x4d8>
		status =
			VL53LX_WriteMulti(
 8004982:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8004986:	f107 020c 	add.w	r2, r7, #12
 800498a:	f8b7 113c 	ldrh.w	r1, [r7, #316]	; 0x13c
 800498e:	1d38      	adds	r0, r7, #4
 8004990:	6800      	ldr	r0, [r0, #0]
 8004992:	f00c fc55 	bl	8011240 <VL53LX_WriteMulti>
 8004996:	4603      	mov	r3, r0
 8004998:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53LX_ERROR_NONE)
 800499c:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d106      	bne.n	80049b2 <VL53LX_init_and_start_range+0x4ee>
		status = VL53LX_update_ll_driver_rd_state(Dev);
 80049a4:	1d3b      	adds	r3, r7, #4
 80049a6:	6818      	ldr	r0, [r3, #0]
 80049a8:	f003 f968 	bl	8007c7c <VL53LX_update_ll_driver_rd_state>
 80049ac:	4603      	mov	r3, r0
 80049ae:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	if (status == VL53LX_ERROR_NONE)
 80049b2:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d106      	bne.n	80049c8 <VL53LX_init_and_start_range+0x504>
		status = VL53LX_update_ll_driver_cfg_state(Dev);
 80049ba:	1d3b      	adds	r3, r7, #4
 80049bc:	6818      	ldr	r0, [r3, #0]
 80049be:	f003 fafd 	bl	8007fbc <VL53LX_update_ll_driver_cfg_state>
 80049c2:	4603      	mov	r3, r0
 80049c4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	LOG_FUNCTION_END(status);

	return status;
 80049c8:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop

080049d8 <VL53LX_stop_range>:


VL53LX_Error VL53LX_stop_range(
	VL53LX_DEV     Dev)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80049e0:	2300      	movs	r3, #0
 80049e2:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev =
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	3318      	adds	r3, #24
 80049e8:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80049f0:	60fb      	str	r3, [r7, #12]
			VL53LXDevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 80049f8:	b25b      	sxtb	r3, r3
 80049fa:	f003 030f 	and.w	r3, r3, #15
 80049fe:	b25b      	sxtb	r3, r3
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8004a00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a04:	b25b      	sxtb	r3, r3
 8004a06:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364
			 VL53LX_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53LX_set_system_control(
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004a14:	4619      	mov	r1, r3
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f00b f97d 	bl	800fd16 <VL53LX_set_system_control>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53LX_init_ll_driver_state(
 8004a32:	2103      	movs	r1, #3
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f003 f8f1 	bl	8007c1c <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8004a40:	3301      	adds	r3, #1
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	f003 fcfb 	bl	8008448 <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f003 fd2d 	bl	80084b2 <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004a5e:	3311      	adds	r3, #17
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d102      	bne.n	8004a6c <VL53LX_stop_range+0x94>
		VL53LX_low_power_auto_data_stop_range(Dev);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f006 fddc 	bl	800b624 <VL53LX_low_power_auto_data_stop_range>

	return status;
 8004a6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3718      	adds	r7, #24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <VL53LX_get_measurement_results>:


VL53LX_Error VL53LX_get_measurement_results(
	VL53LX_DEV                     Dev,
	VL53LX_DeviceResultsLevel      device_results_level)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b0c8      	sub	sp, #288	; 0x120
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	1d3b      	adds	r3, r7, #4
 8004a80:	6018      	str	r0, [r3, #0]
 8004a82:	460a      	mov	r2, r1
 8004a84:	1cfb      	adds	r3, r7, #3
 8004a86:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004a8e:	1d3b      	adds	r3, r7, #4
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	3318      	adds	r3, #24
 8004a94:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_system_results_t   *psystem_results = &(pdev->sys_results);
 8004a98:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004a9c:	f203 3366 	addw	r3, r3, #870	; 0x366
 8004aa0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53LX_core_results_t     *pcore_results   = &(pdev->core_results);
 8004aa4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004aa8:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8004aac:	3318      	adds	r3, #24
 8004aae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53LX_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8004ab2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004ab6:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 8004aba:	331c      	adds	r3, #28
 8004abc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53LX_SYSTEM_RESULTS_I2C_INDEX;
 8004ac0:	2388      	movs	r3, #136	; 0x88
 8004ac2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8004acc:	2300      	movs	r3, #0
 8004ace:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 8004ad2:	1cfb      	adds	r3, r7, #3
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d008      	beq.n	8004aec <VL53LX_get_measurement_results+0x74>
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d10d      	bne.n	8004afa <VL53LX_get_measurement_results+0x82>
	case VL53LX_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8004ade:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8004ae2:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 8004ae6:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53LX_DEBUG_RESULTS_I2C_INDEX +
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8004aea:	e00a      	b.n	8004b02 <VL53LX_get_measurement_results+0x8a>
	case VL53LX_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 8004aec:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8004af0:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 8004af4:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53LX_CORE_RESULTS_I2C_INDEX +
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8004af8:	e003      	b.n	8004b02 <VL53LX_get_measurement_results+0x8a>
	default:
		i2c_buffer_size_bytes =
 8004afa:	232c      	movs	r3, #44	; 0x2c
 8004afc:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8004b00:	bf00      	nop
	}



	if (status == VL53LX_ERROR_NONE)
 8004b02:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10c      	bne.n	8004b24 <VL53LX_get_measurement_results+0xac>
		status =
			VL53LX_ReadMulti(
 8004b0a:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8004b0e:	f107 0208 	add.w	r2, r7, #8
 8004b12:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 8004b16:	1d38      	adds	r0, r7, #4
 8004b18:	6800      	ldr	r0, [r0, #0]
 8004b1a:	f00c fbc7 	bl	80112ac <VL53LX_ReadMulti>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_FULL &&
 8004b24:	1cfb      	adds	r3, r7, #3
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d917      	bls.n	8004b5c <VL53LX_get_measurement_results+0xe4>
 8004b2c:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d113      	bne.n	8004b5c <VL53LX_get_measurement_results+0xe4>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004b34:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8004b38:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 8004b3c:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53LX_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_debug_results(
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8004b40:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_debug_results(
 8004b44:	f107 0208 	add.w	r2, r7, #8
 8004b48:	4413      	add	r3, r2
 8004b4a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004b4e:	4619      	mov	r1, r3
 8004b50:	2038      	movs	r0, #56	; 0x38
 8004b52:	f00b fa5e 	bl	8010012 <VL53LX_i2c_decode_debug_results>
 8004b56:	4603      	mov	r3, r0
 8004b58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_UPTO_CORE &&
 8004b5c:	1cfb      	adds	r3, r7, #3
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d017      	beq.n	8004b94 <VL53LX_get_measurement_results+0x11c>
 8004b64:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d113      	bne.n	8004b94 <VL53LX_get_measurement_results+0x11c>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004b6c:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8004b70:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8004b74:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53LX_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_core_results(
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8004b78:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_core_results(
 8004b7c:	f107 0208 	add.w	r2, r7, #8
 8004b80:	4413      	add	r3, r2
 8004b82:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8004b86:	4619      	mov	r1, r3
 8004b88:	2021      	movs	r0, #33	; 0x21
 8004b8a:	f00b f9e1 	bl	800ff50 <VL53LX_i2c_decode_core_results>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53LX_ERROR_NONE) {
 8004b94:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d110      	bne.n	8004bbe <VL53LX_get_measurement_results+0x146>

		i2c_buffer_offset_bytes = 0;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53LX_i2c_decode_system_results(
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8004ba2:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_system_results(
 8004ba6:	f107 0208 	add.w	r2, r7, #8
 8004baa:	4413      	add	r3, r2
 8004bac:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	202c      	movs	r0, #44	; 0x2c
 8004bb4:	f00b f8d6 	bl	800fd64 <VL53LX_i2c_decode_system_results>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8004bbe:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <VL53LX_get_device_results>:

VL53LX_Error VL53LX_get_device_results(
	VL53LX_DEV                    Dev,
	VL53LX_DeviceResultsLevel     device_results_level,
	VL53LX_range_results_t       *prange_results)
{
 8004bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bd0:	b0a0      	sub	sp, #128	; 0x80
 8004bd2:	af06      	add	r7, sp, #24
 8004bd4:	60f8      	str	r0, [r7, #12]
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	607a      	str	r2, [r7, #4]
 8004bda:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	VL53LX_LLDriverData_t *pdev =
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	3318      	adds	r3, #24
 8004be6:	663b      	str	r3, [r7, #96]	; 0x60
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004bee:	65fb      	str	r3, [r7, #92]	; 0x5c
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_range_results_t   *presults =
 8004bf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bf2:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results);
	VL53LX_zone_objects_t    *pobjects =
 8004bf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bf6:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8004bfa:	657b      	str	r3, [r7, #84]	; 0x54
			&(pres->zone_results.VL53LX_p_003[0]);
	VL53LX_ll_driver_state_t *pstate   =
 8004bfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bfe:	332c      	adds	r3, #44	; 0x2c
 8004c00:	653b      	str	r3, [r7, #80]	; 0x50
			&(pdev->ll_state);
	VL53LX_zone_config_t     *pzone_cfg =
 8004c02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c04:	33c2      	adds	r3, #194	; 0xc2
 8004c06:	64fb      	str	r3, [r7, #76]	; 0x4c
			&(pdev->zone_cfg);
	VL53LX_zone_hist_info_t  *phist_info =
 8004c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c0a:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8004c0e:	64bb      	str	r3, [r7, #72]	; 0x48
			&(pres->zone_hists.VL53LX_p_003[0]);

	VL53LX_dmax_calibration_data_t   dmax_cal;
	VL53LX_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 8004c10:	f107 0314 	add.w	r3, r7, #20
 8004c14:	647b      	str	r3, [r7, #68]	; 0x44
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8004c16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c18:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004c1c:	643b      	str	r3, [r7, #64]	; 0x40
	VL53LX_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 8004c1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c20:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004c24:	63fb      	str	r3, [r7, #60]	; 0x3c
	VL53LX_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 8004c26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c28:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004c2c:	3310      	adds	r3, #16
 8004c2e:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53LX_histogram_bin_data_t *pHD = &(pdev->hist_data);
 8004c30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c32:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004c36:	637b      	str	r3, [r7, #52]	; 0x34
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8004c38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c3a:	3348      	adds	r3, #72	; 0x48
 8004c3c:	633b      	str	r3, [r7, #48]	; 0x30
	VL53LX_zone_histograms_t *pZH = &(pres->zone_hists);
 8004c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c40:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8004c44:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53LX_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 8004c46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c48:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8004c4c:	331c      	adds	r3, #28
 8004c4e:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_range_data_t *pdata;

	LOG_FUNCTION_START("");


	if ((pdev->sys_ctrl.system__mode_start &
 8004c50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c52:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 8290 	beq.w	8005180 <VL53LX_get_device_results+0x5b4>
		 VL53LX_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53LX_get_histogram_bin_data(
 8004c60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c62:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004c66:	4619      	mov	r1, r3
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 fbcb 	bl	8005404 <VL53LX_get_histogram_bin_data>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						&(pdev->hist_data));




		if (status == VL53LX_ERROR_NONE &&
 8004c74:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d118      	bne.n	8004cae <VL53LX_get_device_results+0xe2>
			pHD->number_of_ambient_bins == 0) {
 8004c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7e:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53LX_ERROR_NONE &&
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d114      	bne.n	8004cae <VL53LX_get_device_results+0xe2>
			zid = pdev->ll_state.rd_zone_id;
 8004c84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c86:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
			&(pZH->VL53LX_p_003[zid]),
 8004c8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c96:	4413      	add	r3, r2
 8004c98:	1d1a      	adds	r2, r3, #4
 8004c9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c9c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4610      	mov	r0, r2
 8004ca4:	f004 f976 	bl	8008f94 <VL53LX_hist_copy_and_scale_ambient_info>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(pdev->hist_data));
		}


		if (status != VL53LX_ERROR_NONE)
 8004cae:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f040 8206 	bne.w	80050c4 <VL53LX_get_device_results+0x4f8>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8004cb8:	f107 0313 	add.w	r3, r7, #19
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f006 fdd5 	bl	800b86e <VL53LX_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 8004cc4:	7cfb      	ldrb	r3, [r7, #19]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <VL53LX_get_device_results+0x102>
			histo_merge_nb = 1;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 8004cce:	7cfb      	ldrb	r3, [r7, #19]
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if (pdev->tuning_parms.tp_hist_merge == 1)
 8004cd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cd8:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d107      	bne.n	8004cf0 <VL53LX_get_device_results+0x124>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 8004ce0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce6:	3202      	adds	r2, #2
 8004ce8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8004cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cee:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 8004cf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cf2:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
		pHP->gain_factor =
 8004cf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cf8:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53LX_calc_crosstalk_plane_offset_with_margin(
 8004cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d00:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004d04:	4619      	mov	r1, r3
 8004d06:	4610      	mov	r0, r2
 8004d08:	f004 f84a 	bl	8008da0 <VL53LX_calc_crosstalk_plane_offset_with_margin>
 8004d0c:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8004d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d10:	62da      	str	r2, [r3, #44]	; 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8004d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d14:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8004d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d1a:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8004d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d1e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8004d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d24:	865a      	strh	r2, [r3, #50]	; 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 8004d26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d28:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 8004d2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d2c:	f883 2255 	strb.w	r2, [r3, #597]	; 0x255
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 8004d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d32:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 8004d34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d36:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 8004d3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d3c:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 8004d3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d40:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 8004d44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d46:	f8b3 22fe 	ldrh.w	r2, [r3, #766]	; 0x2fe
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 8004d4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d4c:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 8004d50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d52:	f893 2331 	ldrb.w	r2, [r3, #817]	; 0x331
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 8004d56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d58:	f883 226e 	strb.w	r2, [r3, #622]	; 0x26e

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 8004d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d5e:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 8004d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d64:	86da      	strh	r2, [r3, #54]	; 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 8004d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d68:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 8004d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d6e:	869a      	strh	r2, [r3, #52]	; 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 8004d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d72:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 8004d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d76:	871a      	strh	r2, [r3, #56]	; 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 8004d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d7a:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 8004d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d7e:	875a      	strh	r2, [r3, #58]	; 0x3a



		VL53LX_copy_rtn_good_spads_to_buffer(
 8004d80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d82:	f203 3292 	addw	r2, r3, #914	; 0x392
 8004d86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d88:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4610      	mov	r0, r2
 8004d90:	f003 fa3a 	bl	8008208 <VL53LX_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 8004d94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d96:	795b      	ldrb	r3, [r3, #5]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d002      	beq.n	8004da2 <VL53LX_get_device_results+0x1d6>
 8004d9c:	2b03      	cmp	r3, #3
 8004d9e:	d02e      	beq.n	8004dfe <VL53LX_get_device_results+0x232>
 8004da0:	e03d      	b.n	8004e1e <VL53LX_get_device_results+0x252>

		case VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 8004da2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004da4:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8004da8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

			VL53LX_hist_combine_mm1_mm2_offsets(
 8004dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dae:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 8004db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db4:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 8004db8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dba:	f893 e3c2 	ldrb.w	lr, [r3, #962]	; 0x3c2
 8004dbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dc0:	f893 83c3 	ldrb.w	r8, [r3, #963]	; 0x3c3
 8004dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc6:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004dca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dcc:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 8004dd0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004dd2:	319c      	adds	r1, #156	; 0x9c
 8004dd4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004dd6:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 8004dda:	f897 4025 	ldrb.w	r4, [r7, #37]	; 0x25
 8004dde:	b2a4      	uxth	r4, r4
 8004de0:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 8004de2:	351c      	adds	r5, #28
 8004de4:	9505      	str	r5, [sp, #20]
 8004de6:	9404      	str	r4, [sp, #16]
 8004de8:	9003      	str	r0, [sp, #12]
 8004dea:	9102      	str	r1, [sp, #8]
 8004dec:	9201      	str	r2, [sp, #4]
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	4643      	mov	r3, r8
 8004df2:	4672      	mov	r2, lr
 8004df4:	4661      	mov	r1, ip
 8004df6:	4630      	mov	r0, r6
 8004df8:	f004 ff7d 	bl	8009cf6 <VL53LX_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 8004dfc:	e013      	b.n	8004e26 <VL53LX_get_device_results+0x25a>
		case VL53LX_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 8004dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e00:	331c      	adds	r3, #28
 8004e02:	4619      	mov	r1, r3
 8004e04:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004e06:	f7fe fa4f 	bl	80032a8 <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 8004e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e0c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	b21a      	sxth	r2, r3
 8004e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e1a:	839a      	strh	r2, [r3, #28]
		break;
 8004e1c:	e003      	b.n	8004e26 <VL53LX_get_device_results+0x25a>
		default:
			pHP->range_offset_mm = 0;
 8004e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e20:	2200      	movs	r2, #0
 8004e22:	839a      	strh	r2, [r3, #28]
		break;
 8004e24:	bf00      	nop

		}



		if (status != VL53LX_ERROR_NONE)
 8004e26:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f040 814c 	bne.w	80050c8 <VL53LX_get_device_results+0x4fc>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53LX_calc_max_effective_spads(
 8004e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e32:	f893 00a8 	ldrb.w	r0, [r3, #168]	; 0xa8
 8004e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e38:	f893 10a9 	ldrb.w	r1, [r3, #169]	; 0xa9
 8004e3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e3e:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 8004e42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e44:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
		VL53LX_calc_max_effective_spads(
 8004e48:	b29c      	uxth	r4, r3
 8004e4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e4c:	f203 236a 	addw	r3, r3, #618	; 0x26a
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	4623      	mov	r3, r4
 8004e54:	f005 f8f4 	bl	800a040 <VL53LX_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53LX_get_dmax_calibration_data(
 8004e58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e5a:	799b      	ldrb	r3, [r3, #6]
 8004e5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e5e:	4619      	mov	r1, r3
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 fee2 	bl	8005c2a <VL53LX_get_dmax_calibration_data>
 8004e66:	4603      	mov	r3, r0
 8004e68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				Dev,
				pdev->dmax_mode,
				pdmax_cal);


		if (status != VL53LX_ERROR_NONE)
 8004e6c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f040 812b 	bne.w	80050cc <VL53LX_get_device_results+0x500>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_ipp_hist_process_data(
 8004e76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e78:	f503 7515 	add.w	r5, r3, #596	; 0x254
 8004e7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e7e:	f503 7605 	add.w	r6, r3, #532	; 0x214
 8004e82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e84:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e8a:	f202 521c 	addw	r2, r2, #1308	; 0x51c
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 8004e8e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004e90:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
				pdev->wArea2,
 8004e94:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004e96:	f500 50d0 	add.w	r0, r0, #6656	; 0x1a00
		status = VL53LX_ipp_hist_process_data(
 8004e9a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8004e9c:	9405      	str	r4, [sp, #20]
 8004e9e:	f107 0413 	add.w	r4, r7, #19
 8004ea2:	9404      	str	r4, [sp, #16]
 8004ea4:	9003      	str	r0, [sp, #12]
 8004ea6:	9102      	str	r1, [sp, #8]
 8004ea8:	9201      	str	r2, [sp, #4]
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	4633      	mov	r3, r6
 8004eae:	462a      	mov	r2, r5
 8004eb0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f00c fbf0 	bl	8011698 <VL53LX_ipp_hist_process_data>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&histo_merge_nb,
				presults);

		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 8004ebe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ec0:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d150      	bne.n	8004f6a <VL53LX_get_device_results+0x39e>
			(histo_merge_nb > 1))
 8004ec8:	7cfb      	ldrb	r3, [r7, #19]
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d94d      	bls.n	8004f6a <VL53LX_get_device_results+0x39e>
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8004ece:	2300      	movs	r3, #0
 8004ed0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004ed4:	e045      	b.n	8004f62 <VL53LX_get_device_results+0x396>
			pdata = &(presults->VL53LX_p_003[i]);
 8004ed6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004eda:	224c      	movs	r2, #76	; 0x4c
 8004edc:	fb02 f303 	mul.w	r3, r2, r3
 8004ee0:	3310      	adds	r3, #16
 8004ee2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ee4:	4413      	add	r3, r2
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	623b      	str	r3, [r7, #32]
			pdata->VL53LX_p_016 /= histo_merge_nb;
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	7cfa      	ldrb	r2, [r7, #19]
 8004ef0:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->VL53LX_p_017 /= histo_merge_nb;
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efc:	7cfa      	ldrb	r2, [r7, #19]
 8004efe:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 /= histo_merge_nb;
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0a:	7cfa      	ldrb	r2, [r7, #19]
 8004f0c:	fb93 f2f2 	sdiv	r2, r3, r2
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004f18:	461a      	mov	r2, r3
 8004f1a:	7cfb      	ldrb	r3, [r7, #19]
 8004f1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	7cfb      	ldrb	r3, [r7, #19]
 8004f2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 8004f38:	6a3b      	ldr	r3, [r7, #32]
 8004f3a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	7cfb      	ldrb	r3, [r7, #19]
 8004f40:	fb92 f3f3 	sdiv	r3, r2, r3
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53LX_p_009 /= histo_merge_nb;
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4e:	7cfa      	ldrb	r2, [r7, #19]
 8004f50:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8004f58:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004f62:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004f66:	2b03      	cmp	r3, #3
 8004f68:	d9b5      	bls.n	8004ed6 <VL53LX_get_device_results+0x30a>
		}


		if (status != VL53LX_ERROR_NONE)
 8004f6a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f040 80ae 	bne.w	80050d0 <VL53LX_get_device_results+0x504>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_hist_wrap_dmax(
 8004f74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f76:	f503 7005 	add.w	r0, r3, #532	; 0x214
 8004f7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f7c:	f503 7171 	add.w	r1, r3, #964	; 0x3c4
 8004f80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f82:	330e      	adds	r3, #14
 8004f84:	461a      	mov	r2, r3
 8004f86:	f004 fe80 	bl	8009c8a <VL53LX_hist_wrap_dmax>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53LX_ERROR_NONE)
 8004f90:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f040 809d 	bne.w	80050d4 <VL53LX_get_device_results+0x508>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8004f9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 8004fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fac:	4413      	add	r3, r2
 8004fae:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 8004fb0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	4413      	add	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8004fc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f103 0208 	add.w	r2, r3, #8
 8004fc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f004 fa10 	bl	80093f0 <VL53LX_hist_phase_consistency_check>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			presults);


		if (status != VL53LX_ERROR_NONE)
 8004fd6:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d17c      	bne.n	80050d8 <VL53LX_get_device_results+0x50c>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8004fde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fe0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004fe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 8004fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ff0:	4413      	add	r3, r2
 8004ff2:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 8004ff4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	011b      	lsls	r3, r3, #4
 8004ffc:	4413      	add	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8005004:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005006:	4413      	add	r3, r2
 8005008:	f103 0208 	add.w	r2, r3, #8
 800500c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800500e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f004 fde1 	bl	8009bda <VL53LX_hist_xmonitor_consistency_check>
 8005018:	4603      	mov	r3, r0
 800501a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(presults->xmonitor));


		if (status != VL53LX_ERROR_NONE)
 800501e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005022:	2b00      	cmp	r3, #0
 8005024:	d15a      	bne.n	80050dc <VL53LX_get_device_results+0x510>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 8005026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005028:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800502c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		pZH->max_zones    = VL53LX_MAX_USER_ZONES;
 8005030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005032:	2205      	movs	r2, #5
 8005034:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 8005036:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005038:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800503c:	3301      	adds	r3, #1
 800503e:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 8005040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005042:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 8005044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005046:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800504a:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 800504c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800504e:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
		if (zid <
 8005052:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005056:	429a      	cmp	r2, r3
 8005058:	d222      	bcs.n	80050a0 <VL53LX_get_device_results+0x4d4>

			phist_info =
			&(pZH->VL53LX_p_003[zid]);
 800505a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			phist_info =
 800505e:	011b      	lsls	r3, r3, #4
 8005060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005062:	4413      	add	r3, r2
 8005064:	3304      	adds	r3, #4
 8005066:	64bb      	str	r3, [r7, #72]	; 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 8005068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800506a:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 800506c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800506e:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 8005070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005072:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 8005074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005076:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 8005078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800507a:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
			phist_info->result__dss_actual_effective_spads =
 800507e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005080:	805a      	strh	r2, [r3, #2]

			phist_info->VL53LX_p_005 =
				pHD->VL53LX_p_005;
 8005082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005084:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
			phist_info->VL53LX_p_005 =
 8005088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800508a:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 800508c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
			phist_info->total_periods_elapsed =
 8005092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005094:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 8005096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005098:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			phist_info->ambient_events_sum =
 800509c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800509e:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53LX_ERROR_NONE)
 80050a0:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d11b      	bne.n	80050e0 <VL53LX_get_device_results+0x514>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_hist_copy_results_to_sys_and_core(
 80050a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050aa:	f503 7071 	add.w	r0, r3, #964	; 0x3c4
 80050ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050b0:	f203 3266 	addw	r2, r3, #870	; 0x366
 80050b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050b6:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80050ba:	3318      	adds	r3, #24
 80050bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80050be:	f005 f91c 	bl	800a2fa <VL53LX_hist_copy_results_to_sys_and_core>
 80050c2:	e00e      	b.n	80050e2 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80050c4:	bf00      	nop
 80050c6:	e00c      	b.n	80050e2 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80050c8:	bf00      	nop
 80050ca:	e00a      	b.n	80050e2 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80050cc:	bf00      	nop
 80050ce:	e008      	b.n	80050e2 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80050d0:	bf00      	nop
 80050d2:	e006      	b.n	80050e2 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80050d4:	bf00      	nop
 80050d6:	e004      	b.n	80050e2 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80050d8:	bf00      	nop
 80050da:	e002      	b.n	80050e2 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80050dc:	bf00      	nop
 80050de:	e000      	b.n	80050e2 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80050e0:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 80050e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e4:	785b      	ldrb	r3, [r3, #1]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d036      	beq.n	8005158 <VL53LX_get_device_results+0x58c>
			if (pstate->rd_device_state !=
 80050ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050ec:	79db      	ldrb	r3, [r3, #7]
 80050ee:	2b06      	cmp	r3, #6
 80050f0:	d00a      	beq.n	8005108 <VL53LX_get_device_results+0x53c>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53LX_ERROR_NONE) {
 80050f2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d106      	bne.n	8005108 <VL53LX_get_device_results+0x53c>
					status = VL53LX_dynamic_zone_update(
 80050fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f005 f9d0 	bl	800a4a2 <VL53LX_dynamic_zone_update>
 8005102:	4603      	mov	r3, r0
 8005104:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8005108:	2300      	movs	r3, #0
 800510a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800510e:	e015      	b.n	800513c <VL53LX_get_device_results+0x570>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 8005110:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005112:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
						& 0x01) ?
 8005116:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <VL53LX_get_device_results+0x556>
 800511e:	2103      	movs	r1, #3
 8005120:	e000      	b.n	8005124 <VL53LX_get_device_results+0x558>
 8005122:	2101      	movs	r1, #1
 8005124:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005128:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800512a:	4413      	add	r3, r2
 800512c:	460a      	mov	r2, r1
 800512e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8005132:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005136:	3301      	adds	r3, #1
 8005138:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800513c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005140:	2b04      	cmp	r3, #4
 8005142:	d9e5      	bls.n	8005110 <VL53LX_get_device_results+0x544>
					VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53LX_ERROR_NONE)
 8005144:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005148:	2b00      	cmp	r3, #0
 800514a:	d105      	bne.n	8005158 <VL53LX_get_device_results+0x58c>
				status = VL53LX_multizone_hist_bins_update(Dev);
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f005 fa22 	bl	800a596 <VL53LX_multizone_hist_bins_update>
 8005152:	4603      	mov	r3, r0
 8005154:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		}



		if (status == VL53LX_ERROR_NONE)
 8005158:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800515c:	2b00      	cmp	r3, #0
 800515e:	d105      	bne.n	800516c <VL53LX_get_device_results+0x5a0>
			status = VL53LX_dynamic_xtalk_correction_corrector(Dev);
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f005 fe79 	bl	800ae58 <VL53LX_dynamic_xtalk_correction_corrector>
 8005166:	4603      	mov	r3, r0
 8005168:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53LX_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if (pdev->tuning_parms.tp_hist_merge == 1)
 800516c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800516e:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8005172:	2b01      	cmp	r3, #1
 8005174:	d151      	bne.n	800521a <VL53LX_get_device_results+0x64e>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 8005176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005178:	689a      	ldr	r2, [r3, #8]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 800517a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	e04c      	b.n	800521a <VL53LX_get_device_results+0x64e>
	} else {

		if (status == VL53LX_ERROR_NONE)
 8005180:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005184:	2b00      	cmp	r3, #0
 8005186:	d107      	bne.n	8005198 <VL53LX_get_device_results+0x5cc>
			status = VL53LX_get_measurement_results(
 8005188:	7afb      	ldrb	r3, [r7, #11]
 800518a:	4619      	mov	r1, r3
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f7ff fc73 	bl	8004a78 <VL53LX_get_measurement_results>
 8005192:	4603      	mov	r3, r0
 8005194:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							Dev,
							device_results_level);

		if (status == VL53LX_ERROR_NONE)
 8005198:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10d      	bne.n	80051bc <VL53LX_get_device_results+0x5f0>
			VL53LX_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 80051a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051a2:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
			VL53LX_copy_sys_and_core_results_to_range_results(
 80051a6:	4618      	mov	r0, r3
 80051a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051aa:	f203 3166 	addw	r1, r3, #870	; 0x366
 80051ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051b0:	f503 5299 	add.w	r2, r3, #4896	; 0x1320
 80051b4:	3218      	adds	r2, #24
 80051b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051b8:	f000 fb86 	bl	80058c8 <VL53LX_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 80051bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051be:	785b      	ldrb	r3, [r3, #1]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d12a      	bne.n	800521a <VL53LX_get_device_results+0x64e>

			if ((status == VL53LX_ERROR_NONE) &&
 80051c4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10d      	bne.n	80051e8 <VL53LX_get_device_results+0x61c>
				(pL->low_power_auto_range_count == 0)) {
 80051cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ce:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53LX_ERROR_NONE) &&
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d109      	bne.n	80051e8 <VL53LX_get_device_results+0x61c>

				status =
				VL53LX_low_power_auto_setup_manual_calibration(
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f006 fa70 	bl	800b6ba <VL53LX_low_power_auto_setup_manual_calibration>
 80051da:	4603      	mov	r3, r0
 80051dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 80051e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e2:	2201      	movs	r2, #1
 80051e4:	709a      	strb	r2, [r3, #2]
 80051e6:	e00a      	b.n	80051fe <VL53LX_get_device_results+0x632>
			} else if ((status == VL53LX_ERROR_NONE) &&
 80051e8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d106      	bne.n	80051fe <VL53LX_get_device_results+0x632>
				(pL->low_power_auto_range_count == 1)) {
 80051f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f2:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53LX_ERROR_NONE) &&
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d102      	bne.n	80051fe <VL53LX_get_device_results+0x632>
				pL->low_power_auto_range_count = 2;
 80051f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fa:	2202      	movs	r2, #2
 80051fc:	709a      	strb	r2, [r3, #2]
			}


			if ((pL->low_power_auto_range_count != 0xFF) &&
 80051fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005200:	789b      	ldrb	r3, [r3, #2]
 8005202:	2bff      	cmp	r3, #255	; 0xff
 8005204:	d009      	beq.n	800521a <VL53LX_get_device_results+0x64e>
 8005206:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800520a:	2b00      	cmp	r3, #0
 800520c:	d105      	bne.n	800521a <VL53LX_get_device_results+0x64e>
				(status == VL53LX_ERROR_NONE)) {
				status = VL53LX_low_power_auto_update_DSS(
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f006 faa5 	bl	800b75e <VL53LX_low_power_auto_update_DSS>
 8005214:	4603      	mov	r3, r0
 8005216:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800521a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800521c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005220:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005222:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8005224:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005226:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 800522a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800522c:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 800522e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005230:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8005234:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005236:	709a      	strb	r2, [r3, #2]

	if (status == VL53LX_ERROR_NONE) {
 8005238:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800523c:	2b00      	cmp	r3, #0
 800523e:	f040 80b0 	bne.w	80053a2 <VL53LX_get_device_results+0x7d6>


		pres->zone_results.max_zones    = VL53LX_MAX_USER_ZONES;
 8005242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005244:	2205      	movs	r2, #5
 8005246:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 800524a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800524c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8005250:	3301      	adds	r3, #1
 8005252:	b2da      	uxtb	r2, r3
 8005254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005256:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
		zid = pdev->ll_state.rd_zone_id;
 800525a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800525c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (zid < pres->zone_results.max_zones) {
 8005264:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005266:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 800526a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800526e:	429a      	cmp	r2, r3
 8005270:	f080 8097 	bcs.w	80053a2 <VL53LX_get_device_results+0x7d6>

			pobjects =
			&(pres->zone_results.VL53LX_p_003[zid]);
 8005274:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
			pobjects =
 8005278:	4613      	mov	r3, r2
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	4413      	add	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8005284:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005286:	4413      	add	r3, r2
 8005288:	3308      	adds	r3, #8
 800528a:	657b      	str	r3, [r7, #84]	; 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 800528c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800528e:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 8005290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005292:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 8005294:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005296:	785a      	ldrb	r2, [r3, #1]
 8005298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800529a:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 800529c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800529e:	789a      	ldrb	r2, [r3, #2]
 80052a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052a2:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 80052a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052a6:	78da      	ldrb	r2, [r3, #3]
 80052a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052aa:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53LX_p_016 =
				presults->xmonitor.VL53LX_p_016;
 80052ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052ae:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
			pobjects->xmonitor.VL53LX_p_016 =
 80052b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052b4:	639a      	str	r2, [r3, #56]	; 0x38
			pobjects->xmonitor.VL53LX_p_017 =
				presults->xmonitor.VL53LX_p_017;
 80052b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052b8:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
			pobjects->xmonitor.VL53LX_p_017 =
 80052bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052be:	63da      	str	r2, [r3, #60]	; 0x3c
			pobjects->xmonitor.VL53LX_p_011 =
				presults->xmonitor.VL53LX_p_011;
 80052c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052c2:	f8b3 2184 	ldrh.w	r2, [r3, #388]	; 0x184
			pobjects->xmonitor.VL53LX_p_011 =
 80052c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 80052cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052ce:	f893 218e 	ldrb.w	r2, [r3, #398]	; 0x18e
			pobjects->xmonitor.range_status =
 80052d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

			pobjects->max_objects      = presults->max_results;
 80052d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052da:	7c5a      	ldrb	r2, [r3, #17]
 80052dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052de:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 80052e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052e2:	7c9a      	ldrb	r2, [r3, #18]
 80052e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052e6:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 80052e8:	2300      	movs	r3, #0
 80052ea:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80052ee:	e052      	b.n	8005396 <VL53LX_get_device_results+0x7ca>
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
					presults->VL53LX_p_003[i].VL53LX_p_016;
 80052f0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 80052f4:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_016;
 80052f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80052fa:	204c      	movs	r0, #76	; 0x4c
 80052fc:	fb00 f303 	mul.w	r3, r0, r3
 8005300:	440b      	add	r3, r1
 8005302:	3338      	adds	r3, #56	; 0x38
 8005304:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8005306:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005308:	4613      	mov	r3, r2
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	4413      	add	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4403      	add	r3, r0
 8005312:	3308      	adds	r3, #8
 8005314:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8005316:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 800531a:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_017;
 800531e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005320:	204c      	movs	r0, #76	; 0x4c
 8005322:	fb00 f303 	mul.w	r3, r0, r3
 8005326:	440b      	add	r3, r1
 8005328:	333c      	adds	r3, #60	; 0x3c
 800532a:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 800532c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800532e:	4613      	mov	r3, r2
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	4413      	add	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4403      	add	r3, r0
 8005338:	330c      	adds	r3, #12
 800533a:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
					presults->VL53LX_p_003[i].VL53LX_p_011;
 800533c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8005340:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8005344:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005346:	204c      	movs	r0, #76	; 0x4c
 8005348:	fb00 f303 	mul.w	r3, r0, r3
 800534c:	440b      	add	r3, r1
 800534e:	3354      	adds	r3, #84	; 0x54
 8005350:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8005352:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005354:	4613      	mov	r3, r2
 8005356:	005b      	lsls	r3, r3, #1
 8005358:	4413      	add	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	440b      	add	r3, r1
 800535e:	3310      	adds	r3, #16
 8005360:	4602      	mov	r2, r0
 8005362:	801a      	strh	r2, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
					presults->VL53LX_p_003[i].range_status;
 8005364:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].range_status =
 8005368:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].range_status;
 800536c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800536e:	204c      	movs	r0, #76	; 0x4c
 8005370:	fb00 f303 	mul.w	r3, r0, r3
 8005374:	440b      	add	r3, r1
 8005376:	335e      	adds	r3, #94	; 0x5e
 8005378:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
 800537a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800537c:	4613      	mov	r3, r2
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	4413      	add	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	440b      	add	r3, r1
 8005386:	3312      	adds	r3, #18
 8005388:	4602      	mov	r2, r0
 800538a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 800538c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005390:	3301      	adds	r3, #1
 8005392:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8005396:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005398:	7c9b      	ldrb	r3, [r3, #18]
 800539a:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800539e:	429a      	cmp	r2, r3
 80053a0:	d3a6      	bcc.n	80052f0 <VL53LX_get_device_results+0x724>
		}
	}



	memcpy(
 80053a2:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80053a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f00f fec3 	bl	8015134 <memcpy>
		presults,
		sizeof(VL53LX_range_results_t));



	if (status == VL53LX_ERROR_NONE)
 80053ae:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d105      	bne.n	80053c2 <VL53LX_get_device_results+0x7f6>
		status = VL53LX_check_ll_driver_rd_state(Dev);
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f002 fd4e 	bl	8007e58 <VL53LX_check_ll_driver_rd_state>
 80053bc:	4603      	mov	r3, r0
 80053be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53LX_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 80053c2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3768      	adds	r7, #104	; 0x68
 80053ca:	46bd      	mov	sp, r7
 80053cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080053d0 <VL53LX_clear_interrupt_and_enable_next_range>:


VL53LX_Error VL53LX_clear_interrupt_and_enable_next_range(
	VL53LX_DEV        Dev,
	uint8_t           measurement_mode)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	460b      	mov	r3, r1
 80053da:	70fb      	strb	r3, [r7, #3]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 80053dc:	2300      	movs	r3, #0
 80053de:	73fb      	strb	r3, [r7, #15]





	if (status == VL53LX_ERROR_NONE)
 80053e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d107      	bne.n	80053f8 <VL53LX_clear_interrupt_and_enable_next_range+0x28>
		status = VL53LX_init_and_start_range(
 80053e8:	78fb      	ldrb	r3, [r7, #3]
 80053ea:	2203      	movs	r2, #3
 80053ec:	4619      	mov	r1, r3
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7ff f868 	bl	80044c4 <VL53LX_init_and_start_range>
 80053f4:	4603      	mov	r3, r0
 80053f6:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 80053f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <VL53LX_get_histogram_bin_data>:


VL53LX_Error VL53LX_get_histogram_bin_data(
		VL53LX_DEV                   Dev,
		VL53LX_histogram_bin_data_t *pdata)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b0d2      	sub	sp, #328	; 0x148
 8005408:	af00      	add	r7, sp, #0
 800540a:	1d3b      	adds	r3, r7, #4
 800540c:	6018      	str	r0, [r3, #0]
 800540e:	463b      	mov	r3, r7
 8005410:	6019      	str	r1, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8005412:	2300      	movs	r3, #0
 8005414:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53LX_LLDriverData_t *pdev =
 8005418:	1d3b      	adds	r3, r7, #4
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	3318      	adds	r3, #24
 800541e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8005422:	1d3b      	adds	r3, r7, #4
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800542a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53LX_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 800542e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005432:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8005436:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53LX_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 800543a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800543e:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8005442:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53LX_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 8005446:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800544a:	f203 331e 	addw	r3, r3, #798	; 0x31e
 800544e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53LX_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 8005452:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005456:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800545a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53LX_range_results_t        *presults  = &(pres->range_results);
 800545e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005462:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint8_t    buffer[VL53LX_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 8005466:	f107 030c 	add.w	r3, r7, #12
 800546a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint8_t    bin_23_0 = 0x00;
 800546e:	2300      	movs	r3, #0
 8005470:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	uint16_t   bin                      = 0;
 8005474:	2300      	movs	r3, #0
 8005476:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 800547a:	2300      	movs	r3, #0
 800547c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint16_t   encoded_timeout          = 0;
 8005480:	2300      	movs	r3, #0
 8005482:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c

	uint32_t   pll_period_us            = 0;
 8005486:	2300      	movs	r3, #0
 8005488:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 800548c:	2300      	movs	r3, #0
 800548e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t    i                        = 0;
 8005492:	2300      	movs	r3, #0
 8005494:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b

	int32_t    hist_merge				= 0;
 8005498:	f107 0308 	add.w	r3, r7, #8
 800549c:	2200      	movs	r2, #0
 800549e:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 80054a0:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10a      	bne.n	80054be <VL53LX_get_histogram_bin_data+0xba>
		status = VL53LX_ReadMulti(
 80054a8:	1d38      	adds	r0, r7, #4
 80054aa:	2353      	movs	r3, #83	; 0x53
 80054ac:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80054b0:	2188      	movs	r1, #136	; 0x88
 80054b2:	6800      	ldr	r0, [r0, #0]
 80054b4:	f00b fefa 	bl	80112ac <VL53LX_ReadMulti>
 80054b8:	4603      	mov	r3, r0
 80054ba:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			pbuffer,
			VL53LX_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 80054be:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80054c2:	781a      	ldrb	r2, [r3, #0]
 80054c4:	463b      	mov	r3, r7
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 80054cc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80054d0:	785a      	ldrb	r2, [r3, #1]
 80054d2:	463b      	mov	r3, r7
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 80054da:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80054de:	789a      	ldrb	r2, [r3, #2]
 80054e0:	463b      	mov	r3, r7
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 80054e8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80054ec:	78da      	ldrb	r2, [r3, #3]
 80054ee:	463b      	mov	r3, r7
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53LX_i2c_decode_uint16_t(2, pbuffer +   4);
 80054f6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80054fa:	3304      	adds	r3, #4
 80054fc:	4619      	mov	r1, r3
 80054fe:	2002      	movs	r0, #2
 8005500:	f003 f9aa 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 8005504:	4603      	mov	r3, r0
 8005506:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 8005508:	463b      	mov	r3, r7
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c



	i2c_buffer_offset_bytes =
 8005510:	234e      	movs	r3, #78	; 0x4e
 8005512:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8005516:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800551a:	f107 020c 	add.w	r2, r7, #12
 800551e:	4413      	add	r3, r2
 8005520:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	pdata->phasecal_result__reference_phase =
			VL53LX_i2c_decode_uint16_t(2, pbuffer);
 8005524:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005528:	2002      	movs	r0, #2
 800552a:	f003 f995 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800552e:	4603      	mov	r3, r0
 8005530:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8005532:	463b      	mov	r3, r7
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	i2c_buffer_offset_bytes =
 800553a:	2350      	movs	r3, #80	; 0x50
 800553c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_PHASECAL_RESULT__VCSEL_START -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 8005540:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005544:	f107 020c 	add.w	r2, r7, #12
 8005548:	5cd2      	ldrb	r2, [r2, r3]
 800554a:	463b      	mov	r3, r7
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 8005552:	463b      	mov	r3, r7
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 800555a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800555e:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 8005562:	331c      	adds	r3, #28
 8005564:	801a      	strh	r2, [r3, #0]
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 8005566:	463b      	mov	r3, r7
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 800556e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005572:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 8005576:	331e      	adds	r3, #30
 8005578:	701a      	strb	r2, [r3, #0]



	i2c_buffer_offset_bytes =
 800557a:	2351      	movs	r3, #81	; 0x51
 800557c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 8005580:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005584:	f107 020c 	add.w	r2, r7, #12
 8005588:	5cd3      	ldrb	r3, [r2, r3]
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8005590:	2352      	movs	r3, #82	; 0x52
 8005592:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 8005596:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800559a:	f107 020c 	add.w	r2, r7, #12
 800559e:	5cd2      	ldrb	r2, [r2, r3]
 80055a0:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80055a4:	4413      	add	r3, r2
 80055a6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 80055aa:	234d      	movs	r3, #77	; 0x4d
 80055ac:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 80055b0:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80055b4:	f107 020c 	add.w	r2, r7, #12
 80055b8:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 80055bc:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 80055be:	2306      	movs	r3, #6
 80055c0:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_0_2 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 80055c4:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80055c8:	f107 020c 	add.w	r2, r7, #12
 80055cc:	4413      	add	r3, r2
 80055ce:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 80055d2:	2300      	movs	r3, #0
 80055d4:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 80055d8:	e017      	b.n	800560a <VL53LX_get_histogram_bin_data+0x206>
		pdata->bin_data[bin] =
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 80055da:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80055de:	2003      	movs	r0, #3
 80055e0:	f003 f9d9 	bl	8008996 <VL53LX_i2c_decode_uint32_t>
 80055e4:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 80055e6:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 80055ea:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 80055ec:	463b      	mov	r3, r7
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3206      	adds	r2, #6
 80055f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 80055f6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80055fa:	3303      	adds	r3, #3
 80055fc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8005600:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8005604:	3301      	adds	r3, #1
 8005606:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 800560a:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 800560e:	2b17      	cmp	r3, #23
 8005610:	d9e3      	bls.n	80055da <VL53LX_get_histogram_bin_data+0x1d6>
	}




	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE, &hist_merge);
 8005612:	f107 0208 	add.w	r2, r7, #8
 8005616:	1d3b      	adds	r3, r7, #4
 8005618:	f248 018d 	movw	r1, #32909	; 0x808d
 800561c:	6818      	ldr	r0, [r3, #0]
 800561e:	f000 fb2f 	bl	8005c80 <VL53LX_get_tuning_parm>

	if (pdata->result__stream_count == 0) {
 8005622:	463b      	mov	r3, r7
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800562a:	2b00      	cmp	r3, #0
 800562c:	d118      	bne.n	8005660 <VL53LX_get_histogram_bin_data+0x25c>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 800562e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005632:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8005636:	3310      	adds	r3, #16
 8005638:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800563c:	2100      	movs	r1, #0
 800563e:	4618      	mov	r0, r3
 8005640:	f00f fd86 	bl	8015150 <memset>
		pdev->bin_rec_pos = 0;
 8005644:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005648:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800564c:	330c      	adds	r3, #12
 800564e:	2200      	movs	r2, #0
 8005650:	701a      	strb	r2, [r3, #0]
		pdev->pos_before_next_recom = 0;
 8005652:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005656:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800565a:	330d      	adds	r3, #13
 800565c:	2200      	movs	r2, #0
 800565e:	701a      	strb	r2, [r3, #0]
	}

	if (hist_merge == 1)
 8005660:	f107 0308 	add.w	r3, r7, #8
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d105      	bne.n	8005676 <VL53LX_get_histogram_bin_data+0x272>
		vl53lx_histo_merge(Dev, pdata);
 800566a:	463a      	mov	r2, r7
 800566c:	1d3b      	adds	r3, r7, #4
 800566e:	6811      	ldr	r1, [r2, #0]
 8005670:	6818      	ldr	r0, [r3, #0]
 8005672:	f7fd ff10 	bl	8003496 <vl53lx_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 8005676:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800567a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800567e:	463b      	mov	r3, r7
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	709a      	strb	r2, [r3, #2]
	pdata->VL53LX_p_019               = 0;
 8005684:	463b      	mov	r3, r7
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2200      	movs	r2, #0
 800568a:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020             = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800568c:	463b      	mov	r3, r7
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2218      	movs	r2, #24
 8005692:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021          = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8005694:	463b      	mov	r3, r7
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2218      	movs	r2, #24
 800569a:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 800569c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80056a0:	78da      	ldrb	r2, [r3, #3]
 80056a2:	463b      	mov	r3, r7
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 80056aa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80056ae:	799b      	ldrb	r3, [r3, #6]
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	011b      	lsls	r3, r3, #4
 80056b4:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 80056b6:	463b      	mov	r3, r7
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->vcsel_width +=
 80056be:	463b      	mov	r3, r7
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 80056c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80056ca:	7c1b      	ldrb	r3, [r3, #16]
 80056cc:	b29b      	uxth	r3, r3
	pdata->vcsel_width +=
 80056ce:	4413      	add	r3, r2
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	463b      	mov	r3, r7
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82


	pdata->VL53LX_p_015 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 80056da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056de:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53LX_p_015 =
 80056e0:	463b      	mov	r3, r7
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86



	VL53LX_hist_get_bin_sequence_config(Dev, pdata);
 80056e8:	463a      	mov	r2, r7
 80056ea:	1d3b      	adds	r3, r7, #4
 80056ec:	6811      	ldr	r1, [r2, #0]
 80056ee:	6818      	ldr	r0, [r3, #0]
 80056f0:	f003 fd20 	bl	8009134 <VL53LX_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 80056f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80056f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d114      	bne.n	800572a <VL53LX_get_histogram_bin_data+0x326>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 8005700:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005704:	791b      	ldrb	r3, [r3, #4]
 8005706:	b29b      	uxth	r3, r3
 8005708:	021b      	lsls	r3, r3, #8
 800570a:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 800570c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005710:	795b      	ldrb	r3, [r3, #5]
 8005712:	b29b      	uxth	r3, r3
		encoded_timeout =
 8005714:	4413      	add	r3, r2
 8005716:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53LX_p_005 =  ptim_cfg->range_config__vcsel_period_a;
 800571a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800571e:	799a      	ldrb	r2, [r3, #6]
 8005720:	463b      	mov	r3, r7
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8005728:	e013      	b.n	8005752 <VL53LX_get_histogram_bin_data+0x34e>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 800572a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800572e:	79db      	ldrb	r3, [r3, #7]
 8005730:	b29b      	uxth	r3, r3
 8005732:	021b      	lsls	r3, r3, #8
 8005734:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 8005736:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800573a:	7a1b      	ldrb	r3, [r3, #8]
 800573c:	b29b      	uxth	r3, r3
		encoded_timeout =
 800573e:	4413      	add	r3, r2
 8005740:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53LX_p_005 = ptim_cfg->range_config__vcsel_period_b;
 8005744:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005748:	7a5a      	ldrb	r2, [r3, #9]
 800574a:	463b      	mov	r3, r7
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 8005752:	463b      	mov	r3, r7
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2200      	movs	r2, #0
 8005758:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 800575a:	2300      	movs	r3, #0
 800575c:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8005760:	e016      	b.n	8005790 <VL53LX_get_histogram_bin_data+0x38c>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 8005762:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8005766:	463a      	mov	r2, r7
 8005768:	6812      	ldr	r2, [r2, #0]
 800576a:	4413      	add	r3, r2
 800576c:	7b1b      	ldrb	r3, [r3, #12]
 800576e:	f003 0307 	and.w	r3, r3, #7
 8005772:	2b07      	cmp	r3, #7
 8005774:	d107      	bne.n	8005786 <VL53LX_get_histogram_bin_data+0x382>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 8005776:	463b      	mov	r3, r7
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	7adb      	ldrb	r3, [r3, #11]
 800577c:	3304      	adds	r3, #4
 800577e:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 8005780:	463b      	mov	r3, r7
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 8005786:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 800578a:	3301      	adds	r3, #1
 800578c:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8005790:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8005794:	2b05      	cmp	r3, #5
 8005796:	d9e4      	bls.n	8005762 <VL53LX_get_histogram_bin_data+0x35e>
	}

	pdata->total_periods_elapsed =
		VL53LX_decode_timeout(encoded_timeout);
 8005798:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800579c:	4618      	mov	r0, r3
 800579e:	f003 fb6a 	bl	8008e76 <VL53LX_decode_timeout>
 80057a2:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 80057a4:	463b      	mov	r3, r7
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88




	pll_period_us =
		VL53LX_calc_pll_period_us(pdata->VL53LX_p_015);
 80057ac:	463b      	mov	r3, r7
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80057b4:	4618      	mov	r0, r3
 80057b6:	f006 f89a 	bl	800b8ee <VL53LX_calc_pll_period_us>
 80057ba:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 80057be:	463b      	mov	r3, r7
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c6:	3301      	adds	r3, #1
 80057c8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


	pdata->peak_duration_us =
		VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 80057cc:	463b      	mov	r3, r7
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
		VL53LX_duration_maths(
 80057d4:	4619      	mov	r1, r3
 80057d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80057da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057de:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 80057e2:	f006 f89b 	bl	800b91c <VL53LX_duration_maths>
 80057e6:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 80057e8:	463b      	mov	r3, r7
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 80057f0:	463b      	mov	r3, r7
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90



	VL53LX_hist_calc_zero_distance_phase(pdata);
 80057fa:	463b      	mov	r3, r7
 80057fc:	6818      	ldr	r0, [r3, #0]
 80057fe:	f006 f9a4 	bl	800bb4a <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_ambient_bins(pdata);
 8005802:	463b      	mov	r3, r7
 8005804:	6818      	ldr	r0, [r3, #0]
 8005806:	f006 fdb0 	bl	800c36a <VL53LX_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 800580a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800580e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005812:	463b      	mov	r3, r7
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 8005818:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800581c:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8005820:	463b      	mov	r3, r7
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53LX_p_003[pdata->zone_id]);
 8005826:	463b      	mov	r3, r7
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	789b      	ldrb	r3, [r3, #2]
 800582c:	461a      	mov	r2, r3
 800582e:	4613      	mov	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4413      	add	r3, r2
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800583a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800583e:	4413      	add	r3, r2
 8005840:	3302      	adds	r3, #2
 8005842:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 8005846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800584a:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 800584c:	463b      	mov	r3, r7
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 8005854:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005858:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 800585a:	463b      	mov	r3, r7
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 8005862:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005866:	2200      	movs	r2, #0
 8005868:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 800586a:	463b      	mov	r3, r7
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8005872:	f003 031f 	and.w	r3, r3, #31
 8005876:	2b11      	cmp	r3, #17
 8005878:	bf8c      	ite	hi
 800587a:	2201      	movhi	r2, #1
 800587c:	2200      	movls	r2, #0
 800587e:	b2d2      	uxtb	r2, r2
 8005880:	2a00      	cmp	r2, #0
 8005882:	d118      	bne.n	80058b6 <VL53LX_get_histogram_bin_data+0x4b2>
 8005884:	2201      	movs	r2, #1
 8005886:	409a      	lsls	r2, r3
 8005888:	4b0e      	ldr	r3, [pc, #56]	; (80058c4 <VL53LX_get_histogram_bin_data+0x4c0>)
 800588a:	4013      	ands	r3, r2
 800588c:	2b00      	cmp	r3, #0
 800588e:	bf14      	ite	ne
 8005890:	2301      	movne	r3, #1
 8005892:	2300      	moveq	r3, #0
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00d      	beq.n	80058b6 <VL53LX_get_histogram_bin_data+0x4b2>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 800589a:	463b      	mov	r3, r7
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80058a2:	f003 031f 	and.w	r3, r3, #31
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80058ac:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53LX_ERROR_RANGE_ERROR;
 80058ae:	23fa      	movs	r3, #250	; 0xfa
 80058b0:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	break;
 80058b4:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80058b6:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	0002200e 	.word	0x0002200e

080058c8 <VL53LX_copy_sys_and_core_results_to_range_results>:
void VL53LX_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore,
	VL53LX_range_results_t           *presults)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b08b      	sub	sp, #44	; 0x2c
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
 80058d4:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 80058d6:	2300      	movs	r3, #0
 80058d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53LX_range_data_t *pdata;
	int32_t range_mm = 0;
 80058dc:	2300      	movs	r3, #0
 80058de:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 80058e0:	2300      	movs	r3, #0
 80058e2:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	2200      	movs	r2, #0
 80058e8:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	78da      	ldrb	r2, [r3, #3]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2200      	movs	r2, #0
 80058f6:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53LX_MAX_RANGE_RESULTS;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	2204      	movs	r2, #4
 80058fc:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2201      	movs	r2, #1
 8005902:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	8a1b      	ldrh	r3, [r3, #16]
 8005908:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	8a9b      	ldrh	r3, [r3, #20]
 800590e:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	8a5b      	ldrh	r3, [r3, #18]
 8005914:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 8005916:	2300      	movs	r3, #0
 8005918:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800591c:	e00b      	b.n	8005936 <VL53LX_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53LX_p_022[i] = 0;
 800591e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	4413      	add	r3, r2
 8005928:	2200      	movs	r2, #0
 800592a:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 800592c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005930:	3301      	adds	r3, #1
 8005932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005936:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800593a:	2b04      	cmp	r3, #4
 800593c:	d9ef      	bls.n	800591e <VL53LX_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53LX_p_003[0]);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	3314      	adds	r3, #20
 8005942:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 8005944:	2300      	movs	r3, #0
 8005946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800594a:	e0fe      	b.n	8005b4a <VL53LX_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005952:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	2200      	movs	r2, #0
 8005958:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	78db      	ldrb	r3, [r3, #3]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10a      	bne.n	8005978 <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	785b      	ldrb	r3, [r3, #1]
 8005966:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800596a:	2b09      	cmp	r3, #9
 800596c:	d104      	bne.n	8005978 <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53LX_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	2213      	movs	r2, #19
 8005972:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8005976:	e007      	b.n	8005988 <VL53LX_copy_sys_and_core_results_to_range_results+0xc0>
				VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	785b      	ldrb	r3, [r3, #1]
 800597c:	f003 031f 	and.w	r3, r3, #31
 8005980:	b2da      	uxtb	r2, r3
			pdata->range_status =
 8005982:	6a3b      	ldr	r3, [r7, #32]
 8005984:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53LX_p_012 = 0;
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	2200      	movs	r2, #0
 800598c:	721a      	strb	r2, [r3, #8]
		pdata->VL53LX_p_019    = 0;
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	2200      	movs	r2, #0
 8005992:	725a      	strb	r2, [r3, #9]
		pdata->VL53LX_p_023   = 0;
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	2200      	movs	r2, #0
 8005998:	729a      	strb	r2, [r3, #10]
		pdata->VL53LX_p_024     = 0;
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	2200      	movs	r2, #0
 800599e:	72da      	strb	r2, [r3, #11]
		pdata->VL53LX_p_013   = 0;
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	2200      	movs	r2, #0
 80059a4:	731a      	strb	r2, [r3, #12]
		pdata->VL53LX_p_025    = 0;
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	2200      	movs	r2, #0
 80059aa:	735a      	strb	r2, [r3, #13]

		switch (i) {
 80059ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d002      	beq.n	80059ba <VL53LX_copy_sys_and_core_results_to_range_results+0xf2>
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d05c      	beq.n	8005a72 <VL53LX_copy_sys_and_core_results_to_range_results+0x1aa>
 80059b8:	e0a8      	b.n	8005b0c <VL53LX_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	789b      	ldrb	r3, [r3, #2]
 80059be:	2b07      	cmp	r3, #7
 80059c0:	d103      	bne.n	80059ca <VL53LX_copy_sys_and_core_results_to_range_results+0x102>
				VL53LX_DEVICEREPORTSTATUS_MM1)
				pdata->VL53LX_p_004 =
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	8a7a      	ldrh	r2, [r7, #18]
 80059c6:	82da      	strh	r2, [r3, #22]
 80059c8:	e00b      	b.n	80059e2 <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	789b      	ldrb	r3, [r3, #2]
 80059ce:	2b08      	cmp	r3, #8
 80059d0:	d103      	bne.n	80059da <VL53LX_copy_sys_and_core_results_to_range_results+0x112>
					VL53LX_DEVICEREPORTSTATUS_MM2)
				pdata->VL53LX_p_004 =
 80059d2:	6a3b      	ldr	r3, [r7, #32]
 80059d4:	8aba      	ldrh	r2, [r7, #20]
 80059d6:	82da      	strh	r2, [r3, #22]
 80059d8:	e003      	b.n	80059e2 <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd0;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53LX_p_004 =
 80059de:	6a3b      	ldr	r3, [r7, #32]
 80059e0:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 80059e2:	6a3b      	ldr	r3, [r7, #32]
 80059e4:	8afa      	ldrh	r2, [r7, #22]
 80059e6:	861a      	strh	r2, [r3, #48]	; 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 80059ec:	6a3b      	ldr	r3, [r7, #32]
 80059ee:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	895b      	ldrh	r3, [r3, #10]
 80059fc:	015b      	lsls	r3, r3, #5
 80059fe:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a06:	d302      	bcc.n	8005a0e <VL53LX_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 8005a08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a0c:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd0;
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53LX_p_011 =
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 8005a24:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	fb02 f303 	mul.w	r3, r2, r3
 8005a2e:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a36:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	da01      	bge.n	8005a42 <VL53LX_copy_sys_and_core_results_to_range_results+0x17a>
 8005a3e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8005a42:	12db      	asrs	r3, r3, #11
 8005a44:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	b21a      	sxth	r2, r3
 8005a4a:	6a3b      	ldr	r3, [r7, #32]
 8005a4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd0;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685a      	ldr	r2, [r3, #4]
			pdata->VL53LX_p_017 =
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd0;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689a      	ldr	r2, [r3, #8]
			pdata->VL53LX_p_010 =
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8005a64:	6a3b      	ldr	r3, [r7, #32]
 8005a66:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd0;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681a      	ldr	r2, [r3, #0]
			pdata->VL53LX_p_016 =
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 8005a70:	e04c      	b.n	8005b0c <VL53LX_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd1;
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53LX_p_004 =
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps =
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a88:	865a      	strh	r2, [r3, #50]	; 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	8bdb      	ldrh	r3, [r3, #30]
 8005a96:	015b      	lsls	r3, r3, #5
 8005a98:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aa0:	d302      	bcc.n	8005aa8 <VL53LX_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 8005aa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005aa6:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	6a3b      	ldr	r3, [r7, #32]
 8005aae:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd1;
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53LX_p_011 =
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm = (int32_t)(
 8005abe:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	fb02 f303 	mul.w	r3, r2, r3
 8005ac8:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ad0:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	da01      	bge.n	8005adc <VL53LX_copy_sys_and_core_results_to_range_results+0x214>
 8005ad8:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8005adc:	12db      	asrs	r3, r3, #11
 8005ade:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	b21a      	sxth	r2, r3
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd1;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	695a      	ldr	r2, [r3, #20]
			pdata->VL53LX_p_017 =
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd1;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	699a      	ldr	r2, [r3, #24]
			pdata->VL53LX_p_010 =
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd1;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	691a      	ldr	r2, [r3, #16]
			pdata->VL53LX_p_016 =
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 8005b0a:	bf00      	nop
		}


		pdata->VL53LX_p_026    = pdata->VL53LX_p_011;
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	87da      	strh	r2, [r3, #62]	; 0x3e
		pdata->VL53LX_p_027    = pdata->VL53LX_p_011;
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
 8005b1e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8005b34:	6a3b      	ldr	r3, [r7, #32]
 8005b36:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

		pdata++;
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	334c      	adds	r3, #76	; 0x4c
 8005b3e:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 8005b40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b44:	3301      	adds	r3, #1
 8005b46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005b4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	f67f aefc 	bls.w	800594c <VL53LX_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	2200      	movs	r2, #0
 8005b58:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	785b      	ldrb	r3, [r3, #1]
 8005b5e:	f003 031f 	and.w	r3, r3, #31
 8005b62:	2b11      	cmp	r3, #17
 8005b64:	bf8c      	ite	hi
 8005b66:	2201      	movhi	r2, #1
 8005b68:	2200      	movls	r2, #0
 8005b6a:	b2d2      	uxtb	r2, r2
 8005b6c:	2a00      	cmp	r2, #0
 8005b6e:	d116      	bne.n	8005b9e <VL53LX_copy_sys_and_core_results_to_range_results+0x2d6>
 8005b70:	2201      	movs	r2, #1
 8005b72:	409a      	lsls	r2, r3
 8005b74:	4b0d      	ldr	r3, [pc, #52]	; (8005bac <VL53LX_copy_sys_and_core_results_to_range_results+0x2e4>)
 8005b76:	4013      	ands	r3, r2
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	bf14      	ite	ne
 8005b7c:	2301      	movne	r3, #1
 8005b7e:	2300      	moveq	r3, #0
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00b      	beq.n	8005b9e <VL53LX_copy_sys_and_core_results_to_range_results+0x2d6>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	785b      	ldrb	r3, [r3, #1]
 8005b8a:	f003 031f 	and.w	r3, r3, #31
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53LX_p_003[0].range_status =
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			VL53LX_DEVICEERROR_NOUPDATE;
	break;
 8005b9c:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8005b9e:	bf00      	nop
 8005ba0:	372c      	adds	r7, #44	; 0x2c
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	0002200e 	.word	0x0002200e

08005bb0 <VL53LX_set_zone_dss_config>:


VL53LX_Error VL53LX_set_zone_dss_config(
	VL53LX_DEV                      Dev,
	VL53LX_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	3318      	adds	r3, #24
 8005bc2:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	332c      	adds	r3, #44	; 0x2c
 8005bc8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	2b05      	cmp	r3, #5
 8005bd0:	d109      	bne.n	8005be6 <VL53LX_set_zone_dss_config+0x36>
		VL53LX_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
		VL53LX_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
 8005be4:	e003      	b.n	8005bee <VL53LX_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 8005bee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	371c      	adds	r7, #28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <VL53LX_set_dmax_mode>:


VL53LX_Error VL53LX_set_dmax_mode(
	VL53LX_DEV               Dev,
	VL53LX_DeviceDmaxMode    dmax_mode)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b085      	sub	sp, #20
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	460b      	mov	r3, r1
 8005c08:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	3318      	adds	r3, #24
 8005c12:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	78fa      	ldrb	r2, [r7, #3]
 8005c18:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 8005c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <VL53LX_get_dmax_calibration_data>:

VL53LX_Error VL53LX_get_dmax_calibration_data(
	VL53LX_DEV                      Dev,
	VL53LX_DeviceDmaxMode           dmax_mode,
	VL53LX_dmax_calibration_data_t *pdmax_cal)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b086      	sub	sp, #24
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	60f8      	str	r0, [r7, #12]
 8005c32:	460b      	mov	r3, r1
 8005c34:	607a      	str	r2, [r7, #4]
 8005c36:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t    *pdev =
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	3318      	adds	r3, #24
 8005c40:	613b      	str	r3, [r7, #16]
		VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 8005c42:	7afb      	ldrb	r3, [r7, #11]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d009      	beq.n	8005c5c <VL53LX_get_dmax_calibration_data+0x32>
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d10f      	bne.n	8005c6c <VL53LX_get_dmax_calibration_data+0x42>

	case VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	33ae      	adds	r3, #174	; 0xae
		memcpy(
 8005c50:	220a      	movs	r2, #10
 8005c52:	4619      	mov	r1, r3
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f00f fa6d 	bl	8015134 <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 8005c5a:	e00a      	b.n	8005c72 <VL53LX_get_dmax_calibration_data+0x48>

	case VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	33a4      	adds	r3, #164	; 0xa4
		memcpy(
 8005c60:	220a      	movs	r2, #10
 8005c62:	4619      	mov	r1, r3
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f00f fa65 	bl	8015134 <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 8005c6a:	e002      	b.n	8005c72 <VL53LX_get_dmax_calibration_data+0x48>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8005c6c:	23fc      	movs	r3, #252	; 0xfc
 8005c6e:	75fb      	strb	r3, [r7, #23]
	break;
 8005c70:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8005c72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
	...

08005c80 <VL53LX_get_tuning_parm>:

VL53LX_Error VL53LX_get_tuning_parm(
	VL53LX_DEV                     Dev,
	VL53LX_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b089      	sub	sp, #36	; 0x24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	460b      	mov	r3, r1
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	817b      	strh	r3, [r7, #10]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	3318      	adds	r3, #24
 8005c96:	61bb      	str	r3, [r7, #24]
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005c9e:	617b      	str	r3, [r7, #20]
	VL53LX_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8005ca6:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8005ca8:	897b      	ldrh	r3, [r7, #10]
 8005caa:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8005cae:	2bb9      	cmp	r3, #185	; 0xb9
 8005cb0:	f200 86ca 	bhi.w	8006a48 <VL53LX_get_tuning_parm+0xdc8>
 8005cb4:	a201      	add	r2, pc, #4	; (adr r2, 8005cbc <VL53LX_get_tuning_parm+0x3c>)
 8005cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cba:	bf00      	nop
 8005cbc:	08005fa5 	.word	0x08005fa5
 8005cc0:	08005fb5 	.word	0x08005fb5
 8005cc4:	08005fc5 	.word	0x08005fc5
 8005cc8:	08005fd5 	.word	0x08005fd5
 8005ccc:	08005fe3 	.word	0x08005fe3
 8005cd0:	08005ff1 	.word	0x08005ff1
 8005cd4:	08005fff 	.word	0x08005fff
 8005cd8:	0800600d 	.word	0x0800600d
 8005cdc:	0800601b 	.word	0x0800601b
 8005ce0:	08006029 	.word	0x08006029
 8005ce4:	08006037 	.word	0x08006037
 8005ce8:	08006043 	.word	0x08006043
 8005cec:	08006051 	.word	0x08006051
 8005cf0:	0800605f 	.word	0x0800605f
 8005cf4:	0800606b 	.word	0x0800606b
 8005cf8:	08006079 	.word	0x08006079
 8005cfc:	08006087 	.word	0x08006087
 8005d00:	08006097 	.word	0x08006097
 8005d04:	080060a7 	.word	0x080060a7
 8005d08:	080060b5 	.word	0x080060b5
 8005d0c:	080060c5 	.word	0x080060c5
 8005d10:	080060d3 	.word	0x080060d3
 8005d14:	080060e3 	.word	0x080060e3
 8005d18:	080060f3 	.word	0x080060f3
 8005d1c:	08006103 	.word	0x08006103
 8005d20:	08006113 	.word	0x08006113
 8005d24:	08006123 	.word	0x08006123
 8005d28:	08006133 	.word	0x08006133
 8005d2c:	08006143 	.word	0x08006143
 8005d30:	08006153 	.word	0x08006153
 8005d34:	08006163 	.word	0x08006163
 8005d38:	08006171 	.word	0x08006171
 8005d3c:	08006181 	.word	0x08006181
 8005d40:	08006191 	.word	0x08006191
 8005d44:	080061a1 	.word	0x080061a1
 8005d48:	080061b1 	.word	0x080061b1
 8005d4c:	080061c1 	.word	0x080061c1
 8005d50:	080061d1 	.word	0x080061d1
 8005d54:	080061e1 	.word	0x080061e1
 8005d58:	080061f1 	.word	0x080061f1
 8005d5c:	08006201 	.word	0x08006201
 8005d60:	08006211 	.word	0x08006211
 8005d64:	08006221 	.word	0x08006221
 8005d68:	08006231 	.word	0x08006231
 8005d6c:	08006241 	.word	0x08006241
 8005d70:	08006251 	.word	0x08006251
 8005d74:	0800625f 	.word	0x0800625f
 8005d78:	0800626d 	.word	0x0800626d
 8005d7c:	0800627b 	.word	0x0800627b
 8005d80:	08006289 	.word	0x08006289
 8005d84:	08006297 	.word	0x08006297
 8005d88:	080062a5 	.word	0x080062a5
 8005d8c:	080062b3 	.word	0x080062b3
 8005d90:	080062c1 	.word	0x080062c1
 8005d94:	080062cf 	.word	0x080062cf
 8005d98:	080062dd 	.word	0x080062dd
 8005d9c:	080062eb 	.word	0x080062eb
 8005da0:	080062f9 	.word	0x080062f9
 8005da4:	08006307 	.word	0x08006307
 8005da8:	08006315 	.word	0x08006315
 8005dac:	08006323 	.word	0x08006323
 8005db0:	08006331 	.word	0x08006331
 8005db4:	0800633f 	.word	0x0800633f
 8005db8:	0800634d 	.word	0x0800634d
 8005dbc:	0800635b 	.word	0x0800635b
 8005dc0:	08006369 	.word	0x08006369
 8005dc4:	08006377 	.word	0x08006377
 8005dc8:	08006385 	.word	0x08006385
 8005dcc:	08006393 	.word	0x08006393
 8005dd0:	080063a1 	.word	0x080063a1
 8005dd4:	080063af 	.word	0x080063af
 8005dd8:	080063bd 	.word	0x080063bd
 8005ddc:	080063cb 	.word	0x080063cb
 8005de0:	080063d9 	.word	0x080063d9
 8005de4:	080063e5 	.word	0x080063e5
 8005de8:	080063f3 	.word	0x080063f3
 8005dec:	08006401 	.word	0x08006401
 8005df0:	0800640d 	.word	0x0800640d
 8005df4:	08006419 	.word	0x08006419
 8005df8:	08006425 	.word	0x08006425
 8005dfc:	08006431 	.word	0x08006431
 8005e00:	0800643d 	.word	0x0800643d
 8005e04:	08006449 	.word	0x08006449
 8005e08:	08006457 	.word	0x08006457
 8005e0c:	08006465 	.word	0x08006465
 8005e10:	08006473 	.word	0x08006473
 8005e14:	08006481 	.word	0x08006481
 8005e18:	0800648f 	.word	0x0800648f
 8005e1c:	0800649d 	.word	0x0800649d
 8005e20:	080064ab 	.word	0x080064ab
 8005e24:	080064b9 	.word	0x080064b9
 8005e28:	080064c7 	.word	0x080064c7
 8005e2c:	080064d5 	.word	0x080064d5
 8005e30:	080064e3 	.word	0x080064e3
 8005e34:	080064f1 	.word	0x080064f1
 8005e38:	080064ff 	.word	0x080064ff
 8005e3c:	0800650d 	.word	0x0800650d
 8005e40:	0800651b 	.word	0x0800651b
 8005e44:	08006529 	.word	0x08006529
 8005e48:	08006537 	.word	0x08006537
 8005e4c:	08006545 	.word	0x08006545
 8005e50:	08006553 	.word	0x08006553
 8005e54:	08006561 	.word	0x08006561
 8005e58:	0800656f 	.word	0x0800656f
 8005e5c:	0800657d 	.word	0x0800657d
 8005e60:	0800658b 	.word	0x0800658b
 8005e64:	08006599 	.word	0x08006599
 8005e68:	080065a7 	.word	0x080065a7
 8005e6c:	080065b5 	.word	0x080065b5
 8005e70:	080065c3 	.word	0x080065c3
 8005e74:	080065d1 	.word	0x080065d1
 8005e78:	080065df 	.word	0x080065df
 8005e7c:	080065ed 	.word	0x080065ed
 8005e80:	080065fb 	.word	0x080065fb
 8005e84:	08006609 	.word	0x08006609
 8005e88:	08006617 	.word	0x08006617
 8005e8c:	08006625 	.word	0x08006625
 8005e90:	08006633 	.word	0x08006633
 8005e94:	08006641 	.word	0x08006641
 8005e98:	08006653 	.word	0x08006653
 8005e9c:	08006665 	.word	0x08006665
 8005ea0:	08006675 	.word	0x08006675
 8005ea4:	08006687 	.word	0x08006687
 8005ea8:	08006699 	.word	0x08006699
 8005eac:	080066ab 	.word	0x080066ab
 8005eb0:	080066bd 	.word	0x080066bd
 8005eb4:	080066cf 	.word	0x080066cf
 8005eb8:	080066e1 	.word	0x080066e1
 8005ebc:	080066f5 	.word	0x080066f5
 8005ec0:	08006707 	.word	0x08006707
 8005ec4:	08006719 	.word	0x08006719
 8005ec8:	0800672b 	.word	0x0800672b
 8005ecc:	0800673d 	.word	0x0800673d
 8005ed0:	0800674f 	.word	0x0800674f
 8005ed4:	08006761 	.word	0x08006761
 8005ed8:	08006773 	.word	0x08006773
 8005edc:	08006785 	.word	0x08006785
 8005ee0:	08006797 	.word	0x08006797
 8005ee4:	080067a5 	.word	0x080067a5
 8005ee8:	080067b3 	.word	0x080067b3
 8005eec:	080067c1 	.word	0x080067c1
 8005ef0:	080067cf 	.word	0x080067cf
 8005ef4:	080067dd 	.word	0x080067dd
 8005ef8:	080067eb 	.word	0x080067eb
 8005efc:	080067f9 	.word	0x080067f9
 8005f00:	0800680b 	.word	0x0800680b
 8005f04:	08006819 	.word	0x08006819
 8005f08:	08006827 	.word	0x08006827
 8005f0c:	08006835 	.word	0x08006835
 8005f10:	08006843 	.word	0x08006843
 8005f14:	08006851 	.word	0x08006851
 8005f18:	0800685f 	.word	0x0800685f
 8005f1c:	0800686d 	.word	0x0800686d
 8005f20:	0800687b 	.word	0x0800687b
 8005f24:	08006889 	.word	0x08006889
 8005f28:	08006897 	.word	0x08006897
 8005f2c:	080068a5 	.word	0x080068a5
 8005f30:	080068b3 	.word	0x080068b3
 8005f34:	080068c1 	.word	0x080068c1
 8005f38:	080068cf 	.word	0x080068cf
 8005f3c:	080068dd 	.word	0x080068dd
 8005f40:	080068eb 	.word	0x080068eb
 8005f44:	080068f9 	.word	0x080068f9
 8005f48:	08006907 	.word	0x08006907
 8005f4c:	08006915 	.word	0x08006915
 8005f50:	08006923 	.word	0x08006923
 8005f54:	08006931 	.word	0x08006931
 8005f58:	0800693f 	.word	0x0800693f
 8005f5c:	0800694d 	.word	0x0800694d
 8005f60:	0800695b 	.word	0x0800695b
 8005f64:	08006969 	.word	0x08006969
 8005f68:	08006977 	.word	0x08006977
 8005f6c:	08006985 	.word	0x08006985
 8005f70:	08006993 	.word	0x08006993
 8005f74:	080069a1 	.word	0x080069a1
 8005f78:	080069af 	.word	0x080069af
 8005f7c:	080069bd 	.word	0x080069bd
 8005f80:	080069cb 	.word	0x080069cb
 8005f84:	080069d9 	.word	0x080069d9
 8005f88:	080069e7 	.word	0x080069e7
 8005f8c:	080069f5 	.word	0x080069f5
 8005f90:	08006a03 	.word	0x08006a03
 8005f94:	08006a11 	.word	0x08006a11
 8005f98:	08006a1f 	.word	0x08006a1f
 8005f9c:	08006a2d 	.word	0x08006a2d
 8005fa0:	08006a3b 	.word	0x08006a3b

	case VL53LX_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005faa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	601a      	str	r2, [r3, #0]
	break;
 8005fb0:	f000 bd51 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 8005fba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	601a      	str	r2, [r3, #0]
	break;
 8005fc0:	f000 bd49 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 8005fca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	601a      	str	r2, [r3, #0]
	break;
 8005fd0:	f000 bd41 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	601a      	str	r2, [r3, #0]
	break;
 8005fde:	f000 bd3a 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	785b      	ldrb	r3, [r3, #1]
 8005fe6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	601a      	str	r2, [r3, #0]
	break;
 8005fec:	f000 bd33 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	789b      	ldrb	r3, [r3, #2]
 8005ff4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	601a      	str	r2, [r3, #0]
	break;
 8005ffa:	f000 bd2c 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	78db      	ldrb	r3, [r3, #3]
 8006002:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	601a      	str	r2, [r3, #0]
	break;
 8006008:	f000 bd25 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	791b      	ldrb	r3, [r3, #4]
 8006010:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	601a      	str	r2, [r3, #0]
	break;
 8006016:	f000 bd1e 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	795b      	ldrb	r3, [r3, #5]
 800601e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	601a      	str	r2, [r3, #0]
	break;
 8006024:	f000 bd17 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	799b      	ldrb	r3, [r3, #6]
 800602c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	601a      	str	r2, [r3, #0]
	break;
 8006032:	f000 bd10 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	601a      	str	r2, [r3, #0]
	break;
 800603e:	f000 bd0a 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	891b      	ldrh	r3, [r3, #8]
 8006046:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	601a      	str	r2, [r3, #0]
	break;
 800604c:	f000 bd03 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	8a1b      	ldrh	r3, [r3, #16]
 8006054:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	601a      	str	r2, [r3, #0]
	break;
 800605a:	f000 bcfc 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	601a      	str	r2, [r3, #0]
	break;
 8006066:	f000 bcf6 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	7e1b      	ldrb	r3, [r3, #24]
 800606e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	601a      	str	r2, [r3, #0]
	break;
 8006074:	f000 bcef 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	8b5b      	ldrh	r3, [r3, #26]
 800607c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	601a      	str	r2, [r3, #0]
	break;
 8006082:	f000 bce8 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800608c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	601a      	str	r2, [r3, #0]
	break;
 8006092:	f000 bce0 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800609c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	601a      	str	r2, [r3, #0]
	break;
 80060a2:	f000 bcd8 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	601a      	str	r2, [r3, #0]
	break;
 80060b0:	f000 bcd1 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80060ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	601a      	str	r2, [r3, #0]
	break;
 80060c0:	f000 bcc9 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80060c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	601a      	str	r2, [r3, #0]
	break;
 80060ce:	f000 bcc2 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80060d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	601a      	str	r2, [r3, #0]
	break;
 80060de:	f000 bcba 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 80060e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	601a      	str	r2, [r3, #0]
	break;
 80060ee:	f000 bcb2 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80060f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	601a      	str	r2, [r3, #0]
	break;
 80060fe:	f000 bcaa 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8006108:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	601a      	str	r2, [r3, #0]
	break;
 800610e:	f000 bca2 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8006118:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	601a      	str	r2, [r3, #0]
	break;
 800611e:	f000 bc9a 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8006128:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	601a      	str	r2, [r3, #0]
	break;
 800612e:	f000 bc92 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	f9b3 32a6 	ldrsh.w	r3, [r3, #678]	; 0x2a6
		*ptuning_parm_value = (int32_t)(
 8006138:	461a      	mov	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	601a      	str	r2, [r3, #0]
	break;
 800613e:	f000 bc8a 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	f9b3 32a8 	ldrsh.w	r3, [r3, #680]	; 0x2a8
		*ptuning_parm_value = (int32_t)(
 8006148:	461a      	mov	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	601a      	str	r2, [r3, #0]
	break;
 800614e:	f000 bc82 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 8006158:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	601a      	str	r2, [r3, #0]
	break;
 800615e:	f000 bc7a 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006166:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	601a      	str	r2, [r3, #0]
	break;
 800616c:	f000 bc73 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
		*ptuning_parm_value = (int32_t)(
 8006176:	461a      	mov	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	601a      	str	r2, [r3, #0]
	break;
 800617c:	f000 bc6b 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006186:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	601a      	str	r2, [r3, #0]
	break;
 800618c:	f000 bc63 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	f9b3 329e 	ldrsh.w	r3, [r3, #670]	; 0x29e
 8006196:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	601a      	str	r2, [r3, #0]
	break;
 800619c:	f000 bc5b 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 80061a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	601a      	str	r2, [r3, #0]
	break;
 80061ac:	f000 bc53 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 80061b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	601a      	str	r2, [r3, #0]
	break;
 80061bc:	f000 bc4b 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 80061c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	601a      	str	r2, [r3, #0]
	break;
 80061cc:	f000 bc43 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 80061d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	601a      	str	r2, [r3, #0]
	break;
 80061dc:	f000 bc3b 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 80061e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	601a      	str	r2, [r3, #0]
	break;
 80061ec:	f000 bc33 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	f8b3 3110 	ldrh.w	r3, [r3, #272]	; 0x110
 80061f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	601a      	str	r2, [r3, #0]
	break;
 80061fc:	f000 bc2b 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8006206:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	601a      	str	r2, [r3, #0]
	break;
 800620c:	f000 bc23 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 8006216:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	601a      	str	r2, [r3, #0]
	break;
 800621c:	f000 bc1b 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
		*ptuning_parm_value = (int32_t)(
 8006226:	461a      	mov	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	601a      	str	r2, [r3, #0]
	break;
 800622c:	f000 bc13 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8006236:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	601a      	str	r2, [r3, #0]
	break;
 800623c:	f000 bc0b 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
		*ptuning_parm_value = (int32_t)(
 8006246:	461a      	mov	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	601a      	str	r2, [r3, #0]
	break;
 800624c:	f000 bc03 	b.w	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8006256:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	601a      	str	r2, [r3, #0]
	break;
 800625c:	e3fb      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 8006264:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	601a      	str	r2, [r3, #0]
	break;
 800626a:	e3f4      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 8006272:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	601a      	str	r2, [r3, #0]
	break;
 8006278:	e3ed      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 8006280:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	601a      	str	r2, [r3, #0]
	break;
 8006286:	e3e6      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 800628e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	601a      	str	r2, [r3, #0]
	break;
 8006294:	e3df      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800629c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	601a      	str	r2, [r3, #0]
	break;
 80062a2:	e3d8      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 80062aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	601a      	str	r2, [r3, #0]
	break;
 80062b0:	e3d1      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	f9b3 32a0 	ldrsh.w	r3, [r3, #672]	; 0x2a0
 80062b8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	601a      	str	r2, [r3, #0]
	break;
 80062be:	e3ca      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80062c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	601a      	str	r2, [r3, #0]
	break;
 80062cc:	e3c3      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 80062d4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	601a      	str	r2, [r3, #0]
	break;
 80062da:	e3bc      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80062e2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	601a      	str	r2, [r3, #0]
	break;
 80062e8:	e3b5      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80062f0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	601a      	str	r2, [r3, #0]
	break;
 80062f6:	e3ae      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 80062fe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	601a      	str	r2, [r3, #0]
	break;
 8006304:	e3a7      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 800630c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	601a      	str	r2, [r3, #0]
	break;
 8006312:	e3a0      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 800631a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	601a      	str	r2, [r3, #0]
	break;
 8006320:	e399      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	f893 3254 	ldrb.w	r3, [r3, #596]	; 0x254
 8006328:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	601a      	str	r2, [r3, #0]
	break;
 800632e:	e392      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	f8b3 3260 	ldrh.w	r3, [r3, #608]	; 0x260
 8006336:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	601a      	str	r2, [r3, #0]
	break;
 800633c:	e38b      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	f8b3 3262 	ldrh.w	r3, [r3, #610]	; 0x262
 8006344:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	601a      	str	r2, [r3, #0]
	break;
 800634a:	e384      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006352:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	601a      	str	r2, [r3, #0]
	break;
 8006358:	e37d      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	f8b3 3266 	ldrh.w	r3, [r3, #614]	; 0x266
 8006360:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	601a      	str	r2, [r3, #0]
	break;
 8006366:	e376      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	f8b3 3268 	ldrh.w	r3, [r3, #616]	; 0x268
 800636e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	601a      	str	r2, [r3, #0]
	break;
 8006374:	e36f      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800637c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	601a      	str	r2, [r3, #0]
	break;
 8006382:	e368      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 800638a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	601a      	str	r2, [r3, #0]
	break;
 8006390:	e361      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53LX_p_005;
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 8006398:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	601a      	str	r2, [r3, #0]
	break;
 800639e:	e35a      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 80063a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	601a      	str	r2, [r3, #0]
	break;
 80063ac:	e353      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 80063b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	601a      	str	r2, [r3, #0]
	break;
 80063ba:	e34c      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 80063c2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	601a      	str	r2, [r3, #0]
	break;
 80063c8:	e345      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 80063d0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	601a      	str	r2, [r3, #0]
	break;
 80063d6:	e33e      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	7c1b      	ldrb	r3, [r3, #16]
 80063dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	601a      	str	r2, [r3, #0]
	break;
 80063e2:	e338      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80063ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	601a      	str	r2, [r3, #0]
	break;
 80063f0:	e331      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80063f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	601a      	str	r2, [r3, #0]
	break;
 80063fe:	e32a      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	881b      	ldrh	r3, [r3, #0]
 8006404:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	601a      	str	r2, [r3, #0]
	break;
 800640a:	e324      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	601a      	str	r2, [r3, #0]
	break;
 8006416:	e31e      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	8adb      	ldrh	r3, [r3, #22]
 800641c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	601a      	str	r2, [r3, #0]
	break;
 8006422:	e318      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	8b1b      	ldrh	r3, [r3, #24]
 8006428:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	601a      	str	r2, [r3, #0]
	break;
 800642e:	e312      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	601a      	str	r2, [r3, #0]
	break;
 800643a:	e30c      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	601a      	str	r2, [r3, #0]
	break;
 8006446:	e306      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800644e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	601a      	str	r2, [r3, #0]
	break;
 8006454:	e2ff      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800645c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	601a      	str	r2, [r3, #0]
	break;
 8006462:	e2f8      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800646a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	601a      	str	r2, [r3, #0]
	break;
 8006470:	e2f1      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006478:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	601a      	str	r2, [r3, #0]
	break;
 800647e:	e2ea      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	f893 32c0 	ldrb.w	r3, [r3, #704]	; 0x2c0
 8006486:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	601a      	str	r2, [r3, #0]
	break;
 800648c:	e2e3      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
 8006494:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	601a      	str	r2, [r3, #0]
	break;
 800649a:	e2dc      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	f893 32c2 	ldrb.w	r3, [r3, #706]	; 0x2c2
 80064a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	601a      	str	r2, [r3, #0]
	break;
 80064a8:	e2d5      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	f8b3 32c4 	ldrh.w	r3, [r3, #708]	; 0x2c4
 80064b0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	601a      	str	r2, [r3, #0]
	break;
 80064b6:	e2ce      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80064be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	601a      	str	r2, [r3, #0]
	break;
 80064c4:	e2c7      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80064cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	601a      	str	r2, [r3, #0]
	break;
 80064d2:	e2c0      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	f8b3 32d4 	ldrh.w	r3, [r3, #724]	; 0x2d4
 80064da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	601a      	str	r2, [r3, #0]
	break;
 80064e0:	e2b9      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 80064e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	601a      	str	r2, [r3, #0]
	break;
 80064ee:	e2b2      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	f8b3 32d6 	ldrh.w	r3, [r3, #726]	; 0x2d6
 80064f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	601a      	str	r2, [r3, #0]
	break;
 80064fc:	e2ab      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53LX_p_005;
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 8006504:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	601a      	str	r2, [r3, #0]
	break;
 800650a:	e2a4      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	f893 320a 	ldrb.w	r3, [r3, #522]	; 0x20a
 8006512:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	601a      	str	r2, [r3, #0]
	break;
 8006518:	e29d      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8006520:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	601a      	str	r2, [r3, #0]
	break;
 8006526:	e296      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 800652e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	601a      	str	r2, [r3, #0]
	break;
 8006534:	e28f      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	f8b3 3126 	ldrh.w	r3, [r3, #294]	; 0x126
 800653c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	601a      	str	r2, [r3, #0]
	break;
 8006542:	e288      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 800654a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	601a      	str	r2, [r3, #0]
	break;
 8006550:	e281      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8006558:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	601a      	str	r2, [r3, #0]
	break;
 800655e:	e27a      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8006566:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	601a      	str	r2, [r3, #0]
	break;
 800656c:	e273      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006574:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	601a      	str	r2, [r3, #0]
	break;
 800657a:	e26c      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8006582:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	601a      	str	r2, [r3, #0]
	break;
 8006588:	e265      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8006590:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	601a      	str	r2, [r3, #0]
	break;
 8006596:	e25e      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800659e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	601a      	str	r2, [r3, #0]
	break;
 80065a4:	e257      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80065ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	601a      	str	r2, [r3, #0]
	break;
 80065b2:	e250      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80065ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	601a      	str	r2, [r3, #0]
	break;
 80065c0:	e249      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80065c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	601a      	str	r2, [r3, #0]
	break;
 80065ce:	e242      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80065d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	601a      	str	r2, [r3, #0]
	break;
 80065dc:	e23b      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80065e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	601a      	str	r2, [r3, #0]
	break;
 80065ea:	e234      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80065f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	601a      	str	r2, [r3, #0]
	break;
 80065f8:	e22d      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8006600:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	601a      	str	r2, [r3, #0]
	break;
 8006606:	e226      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800660e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	601a      	str	r2, [r3, #0]
	break;
 8006614:	e21f      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800661c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	601a      	str	r2, [r3, #0]
	break;
 8006622:	e218      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800662a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	601a      	str	r2, [r3, #0]
	break;
 8006630:	e211      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8006638:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	601a      	str	r2, [r3, #0]
	break;
 800663e:	e20a      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006646:	3318      	adds	r3, #24
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	601a      	str	r2, [r3, #0]
	break;
 8006650:	e201      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006658:	331c      	adds	r3, #28
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	601a      	str	r2, [r3, #0]
	break;
 8006662:	e1f8      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	601a      	str	r2, [r3, #0]
	break;
 8006672:	e1f0      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800667a:	3304      	adds	r3, #4
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	601a      	str	r2, [r3, #0]
	break;
 8006684:	e1e7      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800668c:	3308      	adds	r3, #8
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	601a      	str	r2, [r3, #0]
	break;
 8006696:	e1de      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800669e:	330c      	adds	r3, #12
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	601a      	str	r2, [r3, #0]
	break;
 80066a8:	e1d5      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 80066b0:	3310      	adds	r3, #16
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	601a      	str	r2, [r3, #0]
	break;
 80066ba:	e1cc      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 80066c2:	3314      	adds	r3, #20
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	601a      	str	r2, [r3, #0]
	break;
 80066cc:	e1c3      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 80066d4:	331c      	adds	r3, #28
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	601a      	str	r2, [r3, #0]
	break;
 80066de:	e1ba      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 80066e6:	331e      	adds	r3, #30
 80066e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	601a      	str	r2, [r3, #0]
	break;
 80066f2:	e1b0      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 80066fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066fe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	601a      	str	r2, [r3, #0]
	break;
 8006704:	e1a7      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800670c:	3302      	adds	r3, #2
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	601a      	str	r2, [r3, #0]
	break;
 8006716:	e19e      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800671e:	3316      	adds	r3, #22
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	601a      	str	r2, [r3, #0]
	break;
 8006728:	e195      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006730:	3318      	adds	r3, #24
 8006732:	681b      	ldr	r3, [r3, #0]
		*ptuning_parm_value = (int32_t)(
 8006734:	461a      	mov	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	601a      	str	r2, [r3, #0]
	break;
 800673a:	e18c      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006742:	3304      	adds	r3, #4
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	601a      	str	r2, [r3, #0]
	break;
 800674c:	e183      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006754:	3308      	adds	r3, #8
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	601a      	str	r2, [r3, #0]
	break;
 800675e:	e17a      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006766:	330c      	adds	r3, #12
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	601a      	str	r2, [r3, #0]
	break;
 8006770:	e171      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006778:	3310      	adds	r3, #16
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	601a      	str	r2, [r3, #0]
	break;
 8006782:	e168      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800678a:	3310      	adds	r3, #16
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	601a      	str	r2, [r3, #0]
	break;
 8006794:	e15f      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800679c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	601a      	str	r2, [r3, #0]
	break;
 80067a2:	e158      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80067aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	601a      	str	r2, [r3, #0]
	break;
 80067b0:	e151      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 80067b8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	601a      	str	r2, [r3, #0]
	break;
 80067be:	e14a      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80067c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	601a      	str	r2, [r3, #0]
	break;
 80067cc:	e143      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 80067d4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	601a      	str	r2, [r3, #0]
	break;
 80067da:	e13c      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80067e2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	601a      	str	r2, [r3, #0]
	break;
 80067e8:	e135      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 80067f0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	601a      	str	r2, [r3, #0]
	break;
 80067f6:	e12e      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 80067fe:	3314      	adds	r3, #20
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	601a      	str	r2, [r3, #0]
	break;
 8006808:	e125      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>

	case VL53LX_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	f893 3185 	ldrb.w	r3, [r3, #389]	; 0x185
 8006810:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	601a      	str	r2, [r3, #0]
	break;
 8006816:	e11e      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	f9b3 3186 	ldrsh.w	r3, [r3, #390]	; 0x186
 800681e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	601a      	str	r2, [r3, #0]
	break;
 8006824:	e117      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	f9b3 3188 	ldrsh.w	r3, [r3, #392]	; 0x188
 800682c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	601a      	str	r2, [r3, #0]
	break;
 8006832:	e110      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	f9b3 318a 	ldrsh.w	r3, [r3, #394]	; 0x18a
 800683a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	601a      	str	r2, [r3, #0]
	break;
 8006840:	e109      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	f9b3 318c 	ldrsh.w	r3, [r3, #396]	; 0x18c
 8006848:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	601a      	str	r2, [r3, #0]
	break;
 800684e:	e102      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	f9b3 318e 	ldrsh.w	r3, [r3, #398]	; 0x18e
 8006856:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	601a      	str	r2, [r3, #0]
	break;
 800685c:	e0fb      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	f9b3 3190 	ldrsh.w	r3, [r3, #400]	; 0x190
 8006864:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	601a      	str	r2, [r3, #0]
	break;
 800686a:	e0f4      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	f9b3 3192 	ldrsh.w	r3, [r3, #402]	; 0x192
 8006872:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	601a      	str	r2, [r3, #0]
	break;
 8006878:	e0ed      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	f9b3 3194 	ldrsh.w	r3, [r3, #404]	; 0x194
 8006880:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	601a      	str	r2, [r3, #0]
	break;
 8006886:	e0e6      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	f9b3 3196 	ldrsh.w	r3, [r3, #406]	; 0x196
 800688e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	601a      	str	r2, [r3, #0]
	break;
 8006894:	e0df      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	f9b3 3198 	ldrsh.w	r3, [r3, #408]	; 0x198
 800689c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	601a      	str	r2, [r3, #0]
	break;
 80068a2:	e0d8      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	f9b3 319a 	ldrsh.w	r3, [r3, #410]	; 0x19a
 80068aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	601a      	str	r2, [r3, #0]
	break;
 80068b0:	e0d1      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	f9b3 319c 	ldrsh.w	r3, [r3, #412]	; 0x19c
 80068b8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	601a      	str	r2, [r3, #0]
	break;
 80068be:	e0ca      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	f9b3 319e 	ldrsh.w	r3, [r3, #414]	; 0x19e
 80068c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	601a      	str	r2, [r3, #0]
	break;
 80068cc:	e0c3      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	f9b3 31a0 	ldrsh.w	r3, [r3, #416]	; 0x1a0
 80068d4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	601a      	str	r2, [r3, #0]
	break;
 80068da:	e0bc      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	f9b3 31a2 	ldrsh.w	r3, [r3, #418]	; 0x1a2
 80068e2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	601a      	str	r2, [r3, #0]
	break;
 80068e8:	e0b5      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	f9b3 31a4 	ldrsh.w	r3, [r3, #420]	; 0x1a4
 80068f0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	601a      	str	r2, [r3, #0]
	break;
 80068f6:	e0ae      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	f9b3 31a6 	ldrsh.w	r3, [r3, #422]	; 0x1a6
 80068fe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	601a      	str	r2, [r3, #0]
	break;
 8006904:	e0a7      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	f9b3 31a8 	ldrsh.w	r3, [r3, #424]	; 0x1a8
 800690c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	601a      	str	r2, [r3, #0]
	break;
 8006912:	e0a0      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	f9b3 31aa 	ldrsh.w	r3, [r3, #426]	; 0x1aa
 800691a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	601a      	str	r2, [r3, #0]
	break;
 8006920:	e099      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	f9b3 31ac 	ldrsh.w	r3, [r3, #428]	; 0x1ac
 8006928:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	601a      	str	r2, [r3, #0]
	break;
 800692e:	e092      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	f9b3 31ae 	ldrsh.w	r3, [r3, #430]	; 0x1ae
 8006936:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	601a      	str	r2, [r3, #0]
	break;
 800693c:	e08b      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	f9b3 31b0 	ldrsh.w	r3, [r3, #432]	; 0x1b0
 8006944:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	601a      	str	r2, [r3, #0]
	break;
 800694a:	e084      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	f9b3 31b2 	ldrsh.w	r3, [r3, #434]	; 0x1b2
 8006952:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	601a      	str	r2, [r3, #0]
	break;
 8006958:	e07d      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	f9b3 31b4 	ldrsh.w	r3, [r3, #436]	; 0x1b4
 8006960:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	601a      	str	r2, [r3, #0]
	break;
 8006966:	e076      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	f9b3 31b6 	ldrsh.w	r3, [r3, #438]	; 0x1b6
 800696e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	601a      	str	r2, [r3, #0]
	break;
 8006974:	e06f      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	f9b3 31b8 	ldrsh.w	r3, [r3, #440]	; 0x1b8
 800697c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	601a      	str	r2, [r3, #0]
	break;
 8006982:	e068      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	f9b3 31ba 	ldrsh.w	r3, [r3, #442]	; 0x1ba
 800698a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	601a      	str	r2, [r3, #0]
	break;
 8006990:	e061      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	f9b3 31bc 	ldrsh.w	r3, [r3, #444]	; 0x1bc
 8006998:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	601a      	str	r2, [r3, #0]
	break;
 800699e:	e05a      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	; 0x1be
 80069a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	601a      	str	r2, [r3, #0]
	break;
 80069ac:	e053      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	; 0x1c0
 80069b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	601a      	str	r2, [r3, #0]
	break;
 80069ba:	e04c      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	; 0x1c2
 80069c2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	601a      	str	r2, [r3, #0]
	break;
 80069c8:	e045      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	; 0x1c4
 80069d0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	601a      	str	r2, [r3, #0]
	break;
 80069d6:	e03e      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	; 0x1c6
 80069de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	601a      	str	r2, [r3, #0]
	break;
 80069e4:	e037      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	; 0x1c8
 80069ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	601a      	str	r2, [r3, #0]
	break;
 80069f2:	e030      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	; 0x1ca
 80069fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	601a      	str	r2, [r3, #0]
	break;
 8006a00:	e029      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 8006a08:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	601a      	str	r2, [r3, #0]
	break;
 8006a0e:	e022      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	; 0x1ce
 8006a16:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	601a      	str	r2, [r3, #0]
	break;
 8006a1c:	e01b      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	; 0x1d0
 8006a24:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	601a      	str	r2, [r3, #0]
	break;
 8006a2a:	e014      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	; 0x1d2
 8006a32:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	601a      	str	r2, [r3, #0]
	break;
 8006a38:	e00d      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	; 0x1d4
 8006a40:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	601a      	str	r2, [r3, #0]
	break;
 8006a46:	e006      	b.n	8006a56 <VL53LX_get_tuning_parm+0xdd6>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006a4e:	601a      	str	r2, [r3, #0]
		status = VL53LX_ERROR_INVALID_PARAMS;
 8006a50:	23fc      	movs	r3, #252	; 0xfc
 8006a52:	77fb      	strb	r3, [r7, #31]
	break;
 8006a54:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8006a56:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3724      	adds	r7, #36	; 0x24
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop

08006a68 <VL53LX_dynamic_xtalk_correction_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_enable(
	VL53LX_DEV                          Dev
	)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006a70:	2300      	movs	r3, #0
 8006a72:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	3318      	adds	r3, #24
 8006a78:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006a80:	3314      	adds	r3, #20
 8006a82:	2201      	movs	r2, #1
 8006a84:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr

08006a96 <VL53LX_dynamic_xtalk_correction_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_disable(
	VL53LX_DEV                          Dev
	)
{
 8006a96:	b480      	push	{r7}
 8006a98:	b085      	sub	sp, #20
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	3318      	adds	r3, #24
 8006aa6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006aae:	3314      	adds	r3, #20
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006ab4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <VL53LX_dynamic_xtalk_correction_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006acc:	2300      	movs	r3, #0
 8006ace:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3318      	adds	r3, #24
 8006ad4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006adc:	3315      	adds	r3, #21
 8006ade:	2200      	movs	r2, #0
 8006ae0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3714      	adds	r7, #20
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <VL53LX_dynamic_xtalk_correction_single_apply_enable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b085      	sub	sp, #20
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006afa:	2300      	movs	r3, #0
 8006afc:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	3318      	adds	r3, #24
 8006b02:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006b0a:	3316      	adds	r3, #22
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <VL53LX_dynamic_xtalk_correction_single_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	3318      	adds	r3, #24
 8006b30:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006b38:	3316      	adds	r3, #22
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3714      	adds	r7, #20
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <VL53LX_dynamic_xtalk_correction_apply_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b085      	sub	sp, #20
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006b56:	2300      	movs	r3, #0
 8006b58:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	3318      	adds	r3, #24
 8006b5e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006b66:	3315      	adds	r3, #21
 8006b68:	2201      	movs	r2, #1
 8006b6a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006b6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3714      	adds	r7, #20
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <VL53LX_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53LX_Error VL53LX_init_refspadchar_config_struct(
	VL53LX_refspadchar_config_t   *pdata)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006b84:	2300      	movs	r3, #0
 8006b86:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2208      	movs	r2, #8
 8006b8c:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53LX_p_005              =
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	220b      	movs	r2, #11
 8006b92:	705a      	strb	r2, [r3, #1]
		VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b9a:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006ba2:	811a      	strh	r2, [r3, #8]
		VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8006baa:	815a      	strh	r2, [r3, #10]
		VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006bb2:	819a      	strh	r2, [r3, #12]
		VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006bb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3714      	adds	r7, #20
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <VL53LX_init_ssc_config_struct>:


VL53LX_Error VL53LX_init_ssc_config_struct(
	VL53LX_ssc_config_t   *pdata)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53LX_DEVICESSCARRAY_RTN;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	701a      	strb	r2, [r3, #0]


	pdata->VL53LX_p_005 =
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2212      	movs	r2, #18
 8006bda:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	220f      	movs	r2, #15
 8006be0:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2202      	movs	r2, #2
 8006be6:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8006bee:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	220c      	movs	r2, #12
 8006bf4:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <VL53LX_init_xtalk_config_struct>:


VL53LX_Error VL53LX_init_xtalk_config_struct(
	VL53LX_customer_nvm_managed_t *pnvm,
	VL53LX_xtalk_config_t   *pdata)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b084      	sub	sp, #16
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
 8006c0e:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006c10:	2300      	movs	r3, #0
 8006c12:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	895b      	ldrh	r3, [r3, #10]
 8006c18:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	895b      	ldrh	r3, [r3, #10]
 8006c36:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	2200      	movs	r2, #0
 8006c54:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	2240      	movs	r2, #64	; 0x40
 8006c60:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10d      	bne.n	8006c86 <VL53LX_init_xtalk_config_struct+0x80>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d108      	bne.n	8006c86 <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d103      	bne.n	8006c86 <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	2200      	movs	r2, #0
 8006c82:	741a      	strb	r2, [r3, #16]
 8006c84:	e002      	b.n	8006c8c <VL53LX_init_xtalk_config_struct+0x86>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	741a      	strb	r2, [r3, #16]


	if ((status == VL53LX_ERROR_NONE) &&
 8006c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d114      	bne.n	8006cbe <VL53LX_init_xtalk_config_struct+0xb8>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53LX_ERROR_NONE) &&
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d110      	bne.n	8006cbe <VL53LX_init_xtalk_config_struct+0xb8>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53LX_calc_range_ignore_threshold(
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	6818      	ldr	r0, [r3, #0]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	7d9b      	ldrb	r3, [r3, #22]
 8006cb0:	f001 ffa0 	bl	8008bf4 <VL53LX_calc_range_ignore_threshold>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	831a      	strh	r2, [r3, #24]
 8006cbc:	e002      	b.n	8006cc4 <VL53LX_init_xtalk_config_struct+0xbe>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	f64f 72ce 	movw	r2, #65486	; 0xffce
 8006cca:	835a      	strh	r2, [r3, #26]
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	2232      	movs	r2, #50	; 0x32
 8006cd0:	839a      	strh	r2, [r3, #28]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006cd8:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	228c      	movs	r2, #140	; 0x8c
 8006cde:	841a      	strh	r2, [r3, #32]
			VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <VL53LX_init_xtalk_extract_config_struct>:

VL53LX_Error VL53LX_init_xtalk_extract_config_struct(
	VL53LX_xtalkextract_config_t   *pdata)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006cfe:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006d06:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2207      	movs	r2, #7
 8006d0c:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006d14:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f242 7210 	movw	r2, #10000	; 0x2710
 8006d1c:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f64f 72ba 	movw	r2, #65466	; 0xffba
 8006d24:	825a      	strh	r2, [r3, #18]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2246      	movs	r2, #70	; 0x46
 8006d2a:	829a      	strh	r2, [r3, #20]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006d32:	82da      	strh	r2, [r3, #22]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	228c      	movs	r2, #140	; 0x8c
 8006d38:	831a      	strh	r2, [r3, #24]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 8006d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3714      	adds	r7, #20
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <VL53LX_init_offset_cal_config_struct>:


VL53LX_Error VL53LX_init_offset_cal_config_struct(
	VL53LX_offsetcal_config_t   *pdata)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b085      	sub	sp, #20
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006d52:	2300      	movs	r3, #0
 8006d54:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006d5c:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006d64:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8006d6c:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8006d74:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2208      	movs	r2, #8
 8006d7a:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2228      	movs	r2, #40	; 0x28
 8006d80:	745a      	strb	r2, [r3, #17]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2209      	movs	r2, #9
 8006d86:	749a      	strb	r2, [r3, #18]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3714      	adds	r7, #20
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <VL53LX_init_zone_cal_config_struct>:

VL53LX_Error VL53LX_init_zone_cal_config_struct(
	VL53LX_zonecal_config_t   *pdata)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006da0:	2300      	movs	r3, #0
 8006da2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006daa:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006db2:	605a      	str	r2, [r3, #4]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006dba:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006dc2:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2210      	movs	r2, #16
 8006dc8:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2208      	movs	r2, #8
 8006dce:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006dd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <VL53LX_init_hist_post_process_config_struct>:


VL53LX_Error VL53LX_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53LX_hist_post_process_config_t   *pdata)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	4603      	mov	r3, r0
 8006de8:	6039      	str	r1, [r7, #0]
 8006dea:	71fb      	strb	r3, [r7, #7]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006dec:	2300      	movs	r3, #0
 8006dee:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	2204      	movs	r2, #4
 8006df4:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2202      	movs	r2, #2
 8006e06:	70da      	strb	r2, [r3, #3]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	711a      	strb	r2, [r3, #4]
			VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	2250      	movs	r2, #80	; 0x50
 8006e12:	715a      	strb	r2, [r3, #5]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	2264      	movs	r2, #100	; 0x64
 8006e18:	719a      	strb	r2, [r3, #6]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	f241 023d 	movw	r2, #4157	; 0x103d
 8006e20:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2210      	movs	r2, #16
 8006e26:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	2232      	movs	r2, #50	; 0x32
 8006e2c:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	2264      	movs	r2, #100	; 0x64
 8006e32:	615a      	str	r2, [r3, #20]
		VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	2201      	movs	r2, #1
 8006e38:	761a      	strb	r2, [r3, #24]
		VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	22b4      	movs	r2, #180	; 0xb4
 8006e3e:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	2200      	movs	r2, #0
 8006e44:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	f240 72c3 	movw	r2, #1987	; 0x7c3
 8006e4c:	83da      	strh	r2, [r3, #30]
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	2208      	movs	r2, #8
 8006e52:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	2288      	movs	r2, #136	; 0x88
 8006e5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



	pdata->algo__consistency_check__phase_tolerance =
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2208      	movs	r2, #8
 8006e62:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e74:	849a      	strh	r2, [r3, #36]	; 0x24
	VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	84da      	strh	r2, [r3, #38]	; 0x26
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	79fa      	ldrb	r2, [r7, #7]
 8006e80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	f64f 72ce 	movw	r2, #65486	; 0xffce
 8006e8a:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	2232      	movs	r2, #50	; 0x32
 8006e90:	86da      	strh	r2, [r3, #54]	; 0x36
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006e98:	871a      	strh	r2, [r3, #56]	; 0x38
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	228c      	movs	r2, #140	; 0x8c
 8006e9e:	875a      	strh	r2, [r3, #58]	; 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	2250      	movs	r2, #80	; 0x50
 8006ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	2232      	movs	r2, #50	; 0x32
 8006eac:	87da      	strh	r2, [r3, #62]	; 0x3e



	LOG_FUNCTION_END(status);

	return status;
 8006eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <VL53LX_init_tuning_parm_storage_struct>:
}


VL53LX_Error VL53LX_init_tuning_parm_storage_struct(
	VL53LX_tuning_parm_storage_t   *pdata)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b085      	sub	sp, #20
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	221e      	movs	r2, #30
 8006ece:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	220e      	movs	r2, #14
 8006ed4:	805a      	strh	r2, [r3, #2]
			VL53LX_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f642 7294 	movw	r2, #12180	; 0x2f94
 8006edc:	809a      	strh	r2, [r3, #4]
			VL53LX_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	220e      	movs	r2, #14
 8006ee2:	719a      	strb	r2, [r3, #6]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	220a      	movs	r2, #10
 8006ee8:	71da      	strb	r2, [r3, #7]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2206      	movs	r2, #6
 8006eee:	721a      	strb	r2, [r3, #8]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	220e      	movs	r2, #14
 8006ef4:	725a      	strb	r2, [r3, #9]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	220a      	movs	r2, #10
 8006efa:	729a      	strb	r2, [r3, #10]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2206      	movs	r2, #6
 8006f00:	72da      	strb	r2, [r3, #11]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2209      	movs	r2, #9
 8006f06:	731a      	strb	r2, [r3, #12]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2205      	movs	r2, #5
 8006f0c:	735a      	strb	r2, [r3, #13]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2203      	movs	r2, #3
 8006f12:	739a      	strb	r2, [r3, #14]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2206      	movs	r2, #6
 8006f18:	73da      	strb	r2, [r3, #15]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2206      	movs	r2, #6
 8006f1e:	741a      	strb	r2, [r3, #16]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2206      	movs	r2, #6
 8006f24:	745a      	strb	r2, [r3, #17]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2202      	movs	r2, #2
 8006f2a:	749a      	strb	r2, [r3, #18]
		VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2221      	movs	r2, #33	; 0x21
 8006f30:	74da      	strb	r2, [r3, #19]
			VL53LX_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	223c      	movs	r2, #60	; 0x3c
 8006f42:	831a      	strh	r2, [r3, #24]
			VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	223c      	movs	r2, #60	; 0x3c
 8006f48:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	223c      	movs	r2, #60	; 0x3c
 8006f4e:	839a      	strh	r2, [r3, #28]
			VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2280      	movs	r2, #128	; 0x80
 8006f54:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2280      	movs	r2, #128	; 0x80
 8006f5a:	841a      	strh	r2, [r3, #32]
		VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2280      	movs	r2, #128	; 0x80
 8006f60:	845a      	strh	r2, [r3, #34]	; 0x22
		VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2208      	movs	r2, #8
 8006f66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2210      	movs	r2, #16
 8006f6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			VL53LX_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			VL53LX_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2202      	movs	r2, #2
 8006f8e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			VL53LX_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;
	pdata->tp_uwr_enable =
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		VL53LX_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006fa8:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f640 22be 	movw	r2, #2750	; 0xabe
 8006fb2:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	22fa      	movs	r2, #250	; 0xfa
 8006fba:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006fc4:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8006fce:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8006fd8:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8006fe2:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8006fec:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f64f 7238 	movw	r2, #65336	; 0xff38
 8006ff6:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	22c8      	movs	r2, #200	; 0xc8
 8006ffe:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8007008:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800701a:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f640 32ea 	movw	r2, #3050	; 0xbea
 8007024:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f241 12f8 	movw	r2, #4600	; 0x11f8
 800702e:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f640 32ea 	movw	r2, #3050	; 0xbea
 8007038:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8007042:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f641 0238 	movw	r2, #6200	; 0x1838
 800704c:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	22fa      	movs	r2, #250	; 0xfa
 8007064:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800706e:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f640 42b2 	movw	r2, #3250	; 0xcb2
 8007078:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f241 1294 	movw	r2, #4500	; 0x1194
 8007082:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f64f 7238 	movw	r2, #65336	; 0xff38
 800708c:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	22c8      	movs	r2, #200	; 0xc8
 8007094:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f640 720a 	movw	r2, #3850	; 0xf0a
 80070be:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f241 12f8 	movw	r2, #4600	; 0x11f8
 80070c8:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f640 720a 	movw	r2, #3850	; 0xf0a
 80070d2:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007114:	859a      	strh	r2, [r3, #44]	; 0x2c
	VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800711c:	85da      	strh	r2, [r3, #46]	; 0x2e
	VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8007124:	861a      	strh	r2, [r3, #48]	; 0x30
	VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800712c:	865a      	strh	r2, [r3, #50]	; 0x32
	VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007134:	639a      	str	r2, [r3, #56]	; 0x38
		VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f643 2298 	movw	r2, #15000	; 0x3a98
 800713c:	63da      	str	r2, [r3, #60]	; 0x3c
	VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f242 3228 	movw	r2, #9000	; 0x2328
 8007144:	641a      	str	r2, [r3, #64]	; 0x40
	VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f241 7270 	movw	r2, #6000	; 0x1770
 800714c:	645a      	str	r2, [r3, #68]	; 0x44
	VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f643 2298 	movw	r2, #15000	; 0x3a98
 8007154:	649a      	str	r2, [r3, #72]	; 0x48
	VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f242 3228 	movw	r2, #9000	; 0x2328
 800715c:	64da      	str	r2, [r3, #76]	; 0x4c
		VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f241 7270 	movw	r2, #6000	; 0x1770
 8007164:	651a      	str	r2, [r3, #80]	; 0x50
		VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800716c:	655a      	str	r2, [r3, #84]	; 0x54
		VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007174:	659a      	str	r2, [r3, #88]	; 0x58
			VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800717c:	65da      	str	r2, [r3, #92]	; 0x5c
			VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007184:	661a      	str	r2, [r3, #96]	; 0x60
			VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800718c:	665a      	str	r2, [r3, #100]	; 0x64
			VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f24f 6218 	movw	r2, #63000	; 0xf618
 8007194:	66da      	str	r2, [r3, #108]	; 0x6c
			VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800719c:	671a      	str	r2, [r3, #112]	; 0x70
		VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80071a4:	675a      	str	r2, [r3, #116]	; 0x74
			VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80071ac:	679a      	str	r2, [r3, #120]	; 0x78
		VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2201      	movs	r2, #1
 80071b2:	669a      	str	r2, [r3, #104]	; 0x68
		VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80071ba:	67da      	str	r2, [r3, #124]	; 0x7c
		VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80071c2:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		VL53LX_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f643 2298 	movw	r2, #15000	; 0x3a98
 80071da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2206      	movs	r2, #6
 80071e2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80071e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3714      	adds	r7, #20
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <VL53LX_init_hist_gen3_dmax_config_struct>:


VL53LX_Error VL53LX_init_hist_gen3_dmax_config_struct(
	VL53LX_hist_gen3_dmax_config_t   *pdata)
{
 80071f6:	b480      	push	{r7}
 80071f8:	b085      	sub	sp, #20
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80071fe:	2300      	movs	r3, #0
 8007200:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8007208:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2238      	movs	r2, #56	; 0x38
 800720e:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2220      	movs	r2, #32
 8007214:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2270      	movs	r2, #112	; 0x70
 800721a:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2210      	movs	r2, #16
 8007220:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2264      	movs	r2, #100	; 0x64
 8007226:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800722e:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	220f      	movs	r2, #15
 8007234:	819a      	strh	r2, [r3, #12]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2234      	movs	r2, #52	; 0x34
 800723a:	81da      	strh	r2, [r3, #14]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	22c8      	movs	r2, #200	; 0xc8
 8007240:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8007248:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007250:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8007252:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <VL53LX_preset_mode_standard_ranging>:
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic,
	VL53LX_system_control_t   *psystem,
	VL53LX_tuning_parm_storage_t *ptuning_parms,
	VL53LX_zone_config_t      *pzone_cfg)
{
 8007262:	b480      	push	{r7}
 8007264:	b087      	sub	sp, #28
 8007266:	af00      	add	r7, sp, #0
 8007268:	60f8      	str	r0, [r7, #12]
 800726a:	60b9      	str	r1, [r7, #8]
 800726c:	607a      	str	r2, [r7, #4]
 800726e:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007270:	2300      	movs	r3, #0
 8007272:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800727a:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2200      	movs	r2, #0
 8007280:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2200      	movs	r2, #0
 800729e:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2211      	movs	r2, #17
 80072bc:	731a      	strb	r2, [r3, #12]
			VL53LX_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53LX_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2202      	movs	r2, #2
 80072c2:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2200      	movs	r2, #0
 80072c8:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2202      	movs	r2, #2
 80072ce:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2208      	movs	r2, #8
 80072d4:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2200      	movs	r2, #0
 80072da:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 80072dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072de:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 80072e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e8:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 80072f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f2:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2201      	movs	r2, #1
 80072fe:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2200      	movs	r2, #0
 8007310:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	22ff      	movs	r2, #255	; 0xff
 8007316:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8007318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731a:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8007320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007322:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2220      	movs	r2, #32
 800734a:	709a      	strb	r2, [r3, #2]
			VL53LX_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	220b      	movs	r2, #11
 8007350:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8007352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007354:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2202      	movs	r2, #2
 800735e:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	220d      	movs	r2, #13
 8007364:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8007366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007368:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	729a      	strb	r2, [r3, #10]
			VL53LX_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 800738c:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2238      	movs	r2, #56	; 0x38
 8007398:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	22ff      	movs	r2, #255	; 0xff
 800739e:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	2200      	movs	r2, #0
 80073aa:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	221a      	movs	r2, #26
 80073b0:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	2200      	movs	r2, #0
 80073b6:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	2220      	movs	r2, #32
 80073bc:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	2201      	movs	r2, #1
 80073c2:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	22cc      	movs	r2, #204	; 0xcc
 80073c8:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	220b      	movs	r2, #11
 80073ce:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	2201      	movs	r2, #1
 80073d4:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	22f5      	movs	r2, #245	; 0xf5
 80073da:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	2209      	movs	r2, #9
 80073e0:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 80073e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e4:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 80073ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ec:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	2208      	movs	r2, #8
 80073f6:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	2278      	movs	r2, #120	; 0x78
 80073fc:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	2200      	movs	r2, #0
 8007402:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	2200      	movs	r2, #0
 8007408:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	2207      	movs	r2, #7
 800740e:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	2221      	movs	r2, #33	; 0x21
 8007414:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	2243      	movs	r2, #67	; 0x43
 800741a:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	2210      	movs	r2, #16
 8007420:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	2232      	movs	r2, #50	; 0x32
 8007426:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	2254      	movs	r2, #84	; 0x54
 800742c:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	2207      	movs	r2, #7
 8007432:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	2221      	movs	r2, #33	; 0x21
 8007438:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	2243      	movs	r2, #67	; 0x43
 800743e:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	2210      	movs	r2, #16
 8007444:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	2202      	movs	r2, #2
 800744a:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	2243      	movs	r2, #67	; 0x43
 8007450:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	2205      	movs	r2, #5
 8007456:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	2200      	movs	r2, #0
 800745c:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	2207      	movs	r2, #7
 8007462:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	2221      	movs	r2, #33	; 0x21
 8007468:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	2243      	movs	r2, #67	; 0x43
 800746e:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	2210      	movs	r2, #16
 8007474:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	2232      	movs	r2, #50	; 0x32
 800747a:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	2254      	movs	r2, #84	; 0x54
 8007480:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007488:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007490:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	2200      	movs	r2, #0
 8007496:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53LX_MAX_USER_ZONES;
 8007498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749a:	2205      	movs	r2, #5
 800749c:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 800749e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a0:	2200      	movs	r2, #0
 80074a2:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 80074a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a6:	220f      	movs	r2, #15
 80074a8:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 80074aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ac:	220f      	movs	r2, #15
 80074ae:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 80074b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b2:	2208      	movs	r2, #8
 80074b4:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 80074b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b8:	2208      	movs	r2, #8
 80074ba:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 80074bc:	6a3b      	ldr	r3, [r7, #32]
 80074be:	2201      	movs	r2, #1
 80074c0:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 80074c2:	6a3b      	ldr	r3, [r7, #32]
 80074c4:	2200      	movs	r2, #0
 80074c6:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 80074c8:	6a3b      	ldr	r3, [r7, #32]
 80074ca:	2200      	movs	r2, #0
 80074cc:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 80074ce:	6a3b      	ldr	r3, [r7, #32]
 80074d0:	2200      	movs	r2, #0
 80074d2:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 80074d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d6:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	pdynamic->system__seed_config =
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 80074de:	6a3b      	ldr	r3, [r7, #32]
 80074e0:	220b      	movs	r2, #11
 80074e2:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 80074e4:	6a3b      	ldr	r3, [r7, #32]
 80074e6:	2209      	movs	r2, #9
 80074e8:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 80074ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ec:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 80074ee:	6a3b      	ldr	r3, [r7, #32]
 80074f0:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 80074f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f4:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	2201      	movs	r2, #1
 80074fe:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8007500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007502:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
	pdynamic->sd_config__first_order_select =
 8007506:	6a3b      	ldr	r3, [r7, #32]
 8007508:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 800750a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
	pdynamic->sd_config__quantifier         =
 8007510:	6a3b      	ldr	r3, [r7, #32]
 8007512:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8007514:	6a3b      	ldr	r3, [r7, #32]
 8007516:	22c7      	movs	r2, #199	; 0xc7
 8007518:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	22ff      	movs	r2, #255	; 0xff
 800751e:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 8007520:	6a3b      	ldr	r3, [r7, #32]
 8007522:	22db      	movs	r2, #219	; 0xdb
 8007524:	745a      	strb	r2, [r3, #17]
			VL53LX_SEQUENCE_DSS1_EN |
			VL53LX_SEQUENCE_DSS2_EN |
			VL53LX_SEQUENCE_MM2_EN |
			VL53LX_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 8007526:	6a3b      	ldr	r3, [r7, #32]
 8007528:	2202      	movs	r2, #2
 800752a:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 800752c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752e:	2200      	movs	r2, #0
 8007530:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 8007532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007534:	2201      	movs	r2, #1
 8007536:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 8007538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753a:	2201      	movs	r2, #1
 800753c:	70da      	strb	r2, [r3, #3]
			VL53LX_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	2221      	movs	r2, #33	; 0x21
 8007542:	711a      	strb	r2, [r3, #4]
			VL53LX_DEVICEREADOUTMODE_SINGLE_SD |
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8007544:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007548:	4618      	mov	r0, r3
 800754a:	371c      	adds	r7, #28
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <VL53LX_preset_mode_histogram_ranging>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b090      	sub	sp, #64	; 0x40
 8007558:	af0a      	add	r7, sp, #40	; 0x28
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
 8007560:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007562:	2300      	movs	r3, #0
 8007564:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_standard_ranging(
 8007566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007568:	9303      	str	r3, [sp, #12]
 800756a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756c:	9302      	str	r3, [sp, #8]
 800756e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007570:	9301      	str	r3, [sp, #4]
 8007572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	6879      	ldr	r1, [r7, #4]
 800757c:	68b8      	ldr	r0, [r7, #8]
 800757e:	f7ff fe70 	bl	8007262 <VL53LX_preset_mode_standard_ranging>
 8007582:	4603      	mov	r3, r0
 8007584:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8007586:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d171      	bne.n	8007672 <VL53LX_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8007594:	801a      	strh	r2, [r3, #0]



		VL53LX_init_histogram_config_structure(
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	9308      	str	r3, [sp, #32]
 800759a:	2305      	movs	r3, #5
 800759c:	9307      	str	r3, [sp, #28]
 800759e:	2304      	movs	r3, #4
 80075a0:	9306      	str	r3, [sp, #24]
 80075a2:	2303      	movs	r3, #3
 80075a4:	9305      	str	r3, [sp, #20]
 80075a6:	2302      	movs	r3, #2
 80075a8:	9304      	str	r3, [sp, #16]
 80075aa:	2301      	movs	r3, #1
 80075ac:	9303      	str	r3, [sp, #12]
 80075ae:	2300      	movs	r3, #0
 80075b0:	9302      	str	r3, [sp, #8]
 80075b2:	2304      	movs	r3, #4
 80075b4:	9301      	str	r3, [sp, #4]
 80075b6:	2303      	movs	r3, #3
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	2302      	movs	r3, #2
 80075bc:	2201      	movs	r2, #1
 80075be:	2100      	movs	r1, #0
 80075c0:	2007      	movs	r0, #7
 80075c2:	f000 ffab 	bl	800851c <VL53LX_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 80075c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c8:	3302      	adds	r3, #2
 80075ca:	9308      	str	r3, [sp, #32]
 80075cc:	2305      	movs	r3, #5
 80075ce:	9307      	str	r3, [sp, #28]
 80075d0:	2304      	movs	r3, #4
 80075d2:	9306      	str	r3, [sp, #24]
 80075d4:	2303      	movs	r3, #3
 80075d6:	9305      	str	r3, [sp, #20]
 80075d8:	2302      	movs	r3, #2
 80075da:	9304      	str	r3, [sp, #16]
 80075dc:	2301      	movs	r3, #1
 80075de:	9303      	str	r3, [sp, #12]
 80075e0:	2300      	movs	r3, #0
 80075e2:	9302      	str	r3, [sp, #8]
 80075e4:	2304      	movs	r3, #4
 80075e6:	9301      	str	r3, [sp, #4]
 80075e8:	2303      	movs	r3, #3
 80075ea:	9300      	str	r3, [sp, #0]
 80075ec:	2302      	movs	r3, #2
 80075ee:	2201      	movs	r2, #1
 80075f0:	2100      	movs	r1, #0
 80075f2:	2007      	movs	r0, #7
 80075f4:	f001 f822 	bl	800863c <VL53LX_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 80075f8:	6a3b      	ldr	r3, [r7, #32]
 80075fa:	2209      	movs	r2, #9
 80075fc:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 80075fe:	6a3b      	ldr	r3, [r7, #32]
 8007600:	220b      	movs	r2, #11
 8007602:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 8007604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007606:	2209      	movs	r2, #9
 8007608:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 800760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760c:	220b      	movs	r2, #11
 800760e:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8007610:	6a3b      	ldr	r3, [r7, #32]
 8007612:	2200      	movs	r2, #0
 8007614:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 8007616:	6a3b      	ldr	r3, [r7, #32]
 8007618:	2220      	movs	r2, #32
 800761a:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800761c:	6a3b      	ldr	r3, [r7, #32]
 800761e:	2200      	movs	r2, #0
 8007620:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 8007622:	6a3b      	ldr	r3, [r7, #32]
 8007624:	221a      	movs	r2, #26
 8007626:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8007628:	6a3b      	ldr	r3, [r7, #32]
 800762a:	2200      	movs	r2, #0
 800762c:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 800762e:	6a3b      	ldr	r3, [r7, #32]
 8007630:	2228      	movs	r2, #40	; 0x28
 8007632:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8007634:	6a3b      	ldr	r3, [r7, #32]
 8007636:	2200      	movs	r2, #0
 8007638:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 800763a:	6a3b      	ldr	r3, [r7, #32]
 800763c:	2221      	movs	r2, #33	; 0x21
 800763e:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	22f5      	movs	r2, #245	; 0xf5
 8007644:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2208      	movs	r2, #8
 800764a:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2288      	movs	r2, #136	; 0x88
 8007652:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



		VL53LX_copy_hist_cfg_to_static_cfg(
 8007656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007658:	9300      	str	r3, [sp, #0]
 800765a:	6a3b      	ldr	r3, [r7, #32]
 800765c:	683a      	ldr	r2, [r7, #0]
 800765e:	68b9      	ldr	r1, [r7, #8]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 f9e6 	bl	8007a32 <VL53LX_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 8007666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007668:	229b      	movs	r2, #155	; 0x9b
 800766a:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800766c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766e:	2226      	movs	r2, #38	; 0x26
 8007670:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8007672:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3718      	adds	r7, #24
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <VL53LX_preset_mode_histogram_long_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b090      	sub	sp, #64	; 0x40
 8007682:	af0a      	add	r7, sp, #40	; 0x28
 8007684:	60f8      	str	r0, [r7, #12]
 8007686:	60b9      	str	r1, [r7, #8]
 8007688:	607a      	str	r2, [r7, #4]
 800768a:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800768c:	2300      	movs	r3, #0
 800768e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8007690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007692:	9304      	str	r3, [sp, #16]
 8007694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007696:	9303      	str	r3, [sp, #12]
 8007698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769a:	9302      	str	r3, [sp, #8]
 800769c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769e:	9301      	str	r3, [sp, #4]
 80076a0:	6a3b      	ldr	r3, [r7, #32]
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	68b9      	ldr	r1, [r7, #8]
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f7ff ff52 	bl	8007554 <VL53LX_preset_mode_histogram_ranging>
 80076b0:	4603      	mov	r3, r0
 80076b2:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 80076b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d178      	bne.n	80077ae <VL53LX_preset_mode_histogram_long_range+0x130>





		VL53LX_init_histogram_config_structure(
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	9308      	str	r3, [sp, #32]
 80076c0:	2305      	movs	r3, #5
 80076c2:	9307      	str	r3, [sp, #28]
 80076c4:	2304      	movs	r3, #4
 80076c6:	9306      	str	r3, [sp, #24]
 80076c8:	2303      	movs	r3, #3
 80076ca:	9305      	str	r3, [sp, #20]
 80076cc:	2302      	movs	r3, #2
 80076ce:	9304      	str	r3, [sp, #16]
 80076d0:	2301      	movs	r3, #1
 80076d2:	9303      	str	r3, [sp, #12]
 80076d4:	2300      	movs	r3, #0
 80076d6:	9302      	str	r3, [sp, #8]
 80076d8:	2304      	movs	r3, #4
 80076da:	9301      	str	r3, [sp, #4]
 80076dc:	2303      	movs	r3, #3
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	2302      	movs	r3, #2
 80076e2:	2201      	movs	r2, #1
 80076e4:	2100      	movs	r1, #0
 80076e6:	2007      	movs	r0, #7
 80076e8:	f000 ff18 	bl	800851c <VL53LX_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 80076ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ee:	3302      	adds	r3, #2
 80076f0:	9308      	str	r3, [sp, #32]
 80076f2:	2305      	movs	r3, #5
 80076f4:	9307      	str	r3, [sp, #28]
 80076f6:	2304      	movs	r3, #4
 80076f8:	9306      	str	r3, [sp, #24]
 80076fa:	2303      	movs	r3, #3
 80076fc:	9305      	str	r3, [sp, #20]
 80076fe:	2302      	movs	r3, #2
 8007700:	9304      	str	r3, [sp, #16]
 8007702:	2301      	movs	r3, #1
 8007704:	9303      	str	r3, [sp, #12]
 8007706:	2300      	movs	r3, #0
 8007708:	9302      	str	r3, [sp, #8]
 800770a:	2304      	movs	r3, #4
 800770c:	9301      	str	r3, [sp, #4]
 800770e:	2303      	movs	r3, #3
 8007710:	9300      	str	r3, [sp, #0]
 8007712:	2302      	movs	r3, #2
 8007714:	2201      	movs	r2, #1
 8007716:	2100      	movs	r1, #0
 8007718:	2007      	movs	r0, #7
 800771a:	f000 ff8f 	bl	800863c <VL53LX_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 800771e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	6a3b      	ldr	r3, [r7, #32]
 8007724:	683a      	ldr	r2, [r7, #0]
 8007726:	68b9      	ldr	r1, [r7, #8]
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 f982 	bl	8007a32 <VL53LX_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 800772e:	6a3b      	ldr	r3, [r7, #32]
 8007730:	2209      	movs	r2, #9
 8007732:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 8007734:	6a3b      	ldr	r3, [r7, #32]
 8007736:	220b      	movs	r2, #11
 8007738:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800773a:	6a3b      	ldr	r3, [r7, #32]
 800773c:	2200      	movs	r2, #0
 800773e:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	2221      	movs	r2, #33	; 0x21
 8007744:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8007746:	6a3b      	ldr	r3, [r7, #32]
 8007748:	2200      	movs	r2, #0
 800774a:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 800774c:	6a3b      	ldr	r3, [r7, #32]
 800774e:	221b      	movs	r2, #27
 8007750:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8007752:	6a3b      	ldr	r3, [r7, #32]
 8007754:	2200      	movs	r2, #0
 8007756:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 8007758:	6a3b      	ldr	r3, [r7, #32]
 800775a:	2229      	movs	r2, #41	; 0x29
 800775c:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800775e:	6a3b      	ldr	r3, [r7, #32]
 8007760:	2200      	movs	r2, #0
 8007762:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	2222      	movs	r2, #34	; 0x22
 8007768:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	2209      	movs	r2, #9
 800776e:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	22f5      	movs	r2, #245	; 0xf5
 8007774:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 8007776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007778:	2209      	movs	r2, #9
 800777a:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 800777c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777e:	220b      	movs	r2, #11
 8007780:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 8007782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007784:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 8007786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007788:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 800778a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778c:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 800778e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007790:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2208      	movs	r2, #8
 8007796:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2288      	movs	r2, #136	; 0x88
 800779e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 80077a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a4:	229b      	movs	r2, #155	; 0x9b
 80077a6:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80077a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077aa:	2226      	movs	r2, #38	; 0x26
 80077ac:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80077ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3718      	adds	r7, #24
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <VL53LX_preset_mode_histogram_medium_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b090      	sub	sp, #64	; 0x40
 80077be:	af0a      	add	r7, sp, #40	; 0x28
 80077c0:	60f8      	str	r0, [r7, #12]
 80077c2:	60b9      	str	r1, [r7, #8]
 80077c4:	607a      	str	r2, [r7, #4]
 80077c6:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80077c8:	2300      	movs	r3, #0
 80077ca:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 80077cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ce:	9304      	str	r3, [sp, #16]
 80077d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d2:	9303      	str	r3, [sp, #12]
 80077d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d6:	9302      	str	r3, [sp, #8]
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	9301      	str	r3, [sp, #4]
 80077dc:	6a3b      	ldr	r3, [r7, #32]
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	68b9      	ldr	r1, [r7, #8]
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f7ff feb4 	bl	8007554 <VL53LX_preset_mode_histogram_ranging>
 80077ec:	4603      	mov	r3, r0
 80077ee:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 80077f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d178      	bne.n	80078ea <VL53LX_preset_mode_histogram_medium_range+0x130>





		VL53LX_init_histogram_config_structure(
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	9308      	str	r3, [sp, #32]
 80077fc:	2303      	movs	r3, #3
 80077fe:	9307      	str	r3, [sp, #28]
 8007800:	2302      	movs	r3, #2
 8007802:	9306      	str	r3, [sp, #24]
 8007804:	2301      	movs	r3, #1
 8007806:	9305      	str	r3, [sp, #20]
 8007808:	2302      	movs	r3, #2
 800780a:	9304      	str	r3, [sp, #16]
 800780c:	2301      	movs	r3, #1
 800780e:	9303      	str	r3, [sp, #12]
 8007810:	2300      	movs	r3, #0
 8007812:	9302      	str	r3, [sp, #8]
 8007814:	2302      	movs	r3, #2
 8007816:	9301      	str	r3, [sp, #4]
 8007818:	2302      	movs	r3, #2
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	2301      	movs	r3, #1
 800781e:	2201      	movs	r2, #1
 8007820:	2100      	movs	r1, #0
 8007822:	2007      	movs	r0, #7
 8007824:	f000 fe7a 	bl	800851c <VL53LX_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8007828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782a:	3302      	adds	r3, #2
 800782c:	9308      	str	r3, [sp, #32]
 800782e:	2303      	movs	r3, #3
 8007830:	9307      	str	r3, [sp, #28]
 8007832:	2302      	movs	r3, #2
 8007834:	9306      	str	r3, [sp, #24]
 8007836:	2301      	movs	r3, #1
 8007838:	9305      	str	r3, [sp, #20]
 800783a:	2302      	movs	r3, #2
 800783c:	9304      	str	r3, [sp, #16]
 800783e:	2301      	movs	r3, #1
 8007840:	9303      	str	r3, [sp, #12]
 8007842:	2300      	movs	r3, #0
 8007844:	9302      	str	r3, [sp, #8]
 8007846:	2302      	movs	r3, #2
 8007848:	9301      	str	r3, [sp, #4]
 800784a:	2302      	movs	r3, #2
 800784c:	9300      	str	r3, [sp, #0]
 800784e:	2301      	movs	r3, #1
 8007850:	2201      	movs	r2, #1
 8007852:	2100      	movs	r1, #0
 8007854:	2007      	movs	r0, #7
 8007856:	f000 fef1 	bl	800863c <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	6a3b      	ldr	r3, [r7, #32]
 8007860:	683a      	ldr	r2, [r7, #0]
 8007862:	68b9      	ldr	r1, [r7, #8]
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 f8e4 	bl	8007a32 <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 800786a:	6a3b      	ldr	r3, [r7, #32]
 800786c:	2205      	movs	r2, #5
 800786e:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 8007870:	6a3b      	ldr	r3, [r7, #32]
 8007872:	2207      	movs	r2, #7
 8007874:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	2200      	movs	r2, #0
 800787a:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 800787c:	6a3b      	ldr	r3, [r7, #32]
 800787e:	2236      	movs	r2, #54	; 0x36
 8007880:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8007882:	6a3b      	ldr	r3, [r7, #32]
 8007884:	2200      	movs	r2, #0
 8007886:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 8007888:	6a3b      	ldr	r3, [r7, #32]
 800788a:	2228      	movs	r2, #40	; 0x28
 800788c:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800788e:	6a3b      	ldr	r3, [r7, #32]
 8007890:	2200      	movs	r2, #0
 8007892:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 8007894:	6a3b      	ldr	r3, [r7, #32]
 8007896:	2244      	movs	r2, #68	; 0x44
 8007898:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800789a:	6a3b      	ldr	r3, [r7, #32]
 800789c:	2200      	movs	r2, #0
 800789e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 80078a0:	6a3b      	ldr	r3, [r7, #32]
 80078a2:	2233      	movs	r2, #51	; 0x33
 80078a4:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	2205      	movs	r2, #5
 80078aa:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	22f5      	movs	r2, #245	; 0xf5
 80078b0:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 80078b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b4:	2205      	movs	r2, #5
 80078b6:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 80078b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ba:	2207      	movs	r2, #7
 80078bc:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 80078be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c0:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 80078c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c4:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 80078c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c8:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 80078ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078cc:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2208      	movs	r2, #8
 80078d2:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2248      	movs	r2, #72	; 0x48
 80078da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 80078de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e0:	229b      	movs	r2, #155	; 0x9b
 80078e2:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80078e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e6:	2226      	movs	r2, #38	; 0x26
 80078e8:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80078ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3718      	adds	r7, #24
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <VL53LX_preset_mode_histogram_short_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b090      	sub	sp, #64	; 0x40
 80078fa:	af0a      	add	r7, sp, #40	; 0x28
 80078fc:	60f8      	str	r0, [r7, #12]
 80078fe:	60b9      	str	r1, [r7, #8]
 8007900:	607a      	str	r2, [r7, #4]
 8007902:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007904:	2300      	movs	r3, #0
 8007906:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8007908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790a:	9304      	str	r3, [sp, #16]
 800790c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790e:	9303      	str	r3, [sp, #12]
 8007910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007912:	9302      	str	r3, [sp, #8]
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	9301      	str	r3, [sp, #4]
 8007918:	6a3b      	ldr	r3, [r7, #32]
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	68b9      	ldr	r1, [r7, #8]
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f7ff fe16 	bl	8007554 <VL53LX_preset_mode_histogram_ranging>
 8007928:	4603      	mov	r3, r0
 800792a:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 800792c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d178      	bne.n	8007a26 <VL53LX_preset_mode_histogram_short_range+0x130>





		VL53LX_init_histogram_config_structure(
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	9308      	str	r3, [sp, #32]
 8007938:	2302      	movs	r3, #2
 800793a:	9307      	str	r3, [sp, #28]
 800793c:	2302      	movs	r3, #2
 800793e:	9306      	str	r3, [sp, #24]
 8007940:	2301      	movs	r3, #1
 8007942:	9305      	str	r3, [sp, #20]
 8007944:	2301      	movs	r3, #1
 8007946:	9304      	str	r3, [sp, #16]
 8007948:	2301      	movs	r3, #1
 800794a:	9303      	str	r3, [sp, #12]
 800794c:	2300      	movs	r3, #0
 800794e:	9302      	str	r3, [sp, #8]
 8007950:	2301      	movs	r3, #1
 8007952:	9301      	str	r3, [sp, #4]
 8007954:	2301      	movs	r3, #1
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	2301      	movs	r3, #1
 800795a:	2200      	movs	r2, #0
 800795c:	2107      	movs	r1, #7
 800795e:	2007      	movs	r0, #7
 8007960:	f000 fddc 	bl	800851c <VL53LX_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8007964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007966:	3302      	adds	r3, #2
 8007968:	9308      	str	r3, [sp, #32]
 800796a:	2302      	movs	r3, #2
 800796c:	9307      	str	r3, [sp, #28]
 800796e:	2302      	movs	r3, #2
 8007970:	9306      	str	r3, [sp, #24]
 8007972:	2301      	movs	r3, #1
 8007974:	9305      	str	r3, [sp, #20]
 8007976:	2301      	movs	r3, #1
 8007978:	9304      	str	r3, [sp, #16]
 800797a:	2301      	movs	r3, #1
 800797c:	9303      	str	r3, [sp, #12]
 800797e:	2300      	movs	r3, #0
 8007980:	9302      	str	r3, [sp, #8]
 8007982:	2301      	movs	r3, #1
 8007984:	9301      	str	r3, [sp, #4]
 8007986:	2301      	movs	r3, #1
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	2301      	movs	r3, #1
 800798c:	2200      	movs	r2, #0
 800798e:	2107      	movs	r1, #7
 8007990:	2007      	movs	r0, #7
 8007992:	f000 fe53 	bl	800863c <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 8007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007998:	9300      	str	r3, [sp, #0]
 800799a:	6a3b      	ldr	r3, [r7, #32]
 800799c:	683a      	ldr	r2, [r7, #0]
 800799e:	68b9      	ldr	r1, [r7, #8]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f846 	bl	8007a32 <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 80079a6:	6a3b      	ldr	r3, [r7, #32]
 80079a8:	2203      	movs	r2, #3
 80079aa:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 80079ac:	6a3b      	ldr	r3, [r7, #32]
 80079ae:	2205      	movs	r2, #5
 80079b0:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80079b2:	6a3b      	ldr	r3, [r7, #32]
 80079b4:	2200      	movs	r2, #0
 80079b6:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 80079b8:	6a3b      	ldr	r3, [r7, #32]
 80079ba:	2252      	movs	r2, #82	; 0x52
 80079bc:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	2200      	movs	r2, #0
 80079c2:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	2237      	movs	r2, #55	; 0x37
 80079c8:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80079ca:	6a3b      	ldr	r3, [r7, #32]
 80079cc:	2200      	movs	r2, #0
 80079ce:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 80079d0:	6a3b      	ldr	r3, [r7, #32]
 80079d2:	2266      	movs	r2, #102	; 0x66
 80079d4:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	2200      	movs	r2, #0
 80079da:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 80079dc:	6a3b      	ldr	r3, [r7, #32]
 80079de:	2244      	movs	r2, #68	; 0x44
 80079e0:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	2203      	movs	r2, #3
 80079e6:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	22f5      	movs	r2, #245	; 0xf5
 80079ec:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 80079ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f0:	2203      	movs	r2, #3
 80079f2:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 80079f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f6:	2205      	movs	r2, #5
 80079f8:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 80079fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fc:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 80079fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a00:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 8007a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a04:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a08:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2208      	movs	r2, #8
 8007a0e:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2228      	movs	r2, #40	; 0x28
 8007a16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1c:	22bb      	movs	r2, #187	; 0xbb
 8007a1e:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8007a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a22:	2226      	movs	r2, #38	; 0x26
 8007a24:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8007a26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3718      	adds	r7, #24
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <VL53LX_copy_hist_cfg_to_static_cfg>:
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_general_config_t   *pgeneral,
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic)
{
 8007a32:	b480      	push	{r7}
 8007a34:	b085      	sub	sp, #20
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	60f8      	str	r0, [r7, #12]
 8007a3a:	60b9      	str	r1, [r7, #8]
 8007a3c:	607a      	str	r2, [r7, #4]
 8007a3e:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	79db      	ldrb	r3, [r3, #7]
 8007a74:	b29b      	uxth	r3, r3
				<< 8)
 8007a76:	021b      	lsls	r3, r3, #8
 8007a78:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	7a1b      	ldrb	r3, [r3, #8]
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	4413      	add	r3, r2
 8007a82:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	785b      	ldrb	r3, [r3, #1]
 8007abc:	b29b      	uxth	r3, r3
				<< 8)
 8007abe:	021b      	lsls	r3, r3, #8
 8007ac0:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	789b      	ldrb	r3, [r3, #2]
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	4413      	add	r3, r2
 8007aca:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	78db      	ldrb	r3, [r3, #3]
 8007ad4:	b29b      	uxth	r3, r3
				<< 8)
 8007ad6:	021b      	lsls	r3, r3, #8
 8007ad8:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	791b      	ldrb	r3, [r3, #4]
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	4413      	add	r3, r2
 8007ae2:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 8007b10:	bf00      	nop
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <VL53LX_copy_hist_bins_to_static_cfg>:

void VL53LX_copy_hist_bins_to_static_cfg(
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_timing_config_t    *ptiming)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	79db      	ldrb	r3, [r3, #7]
 8007b5c:	b29b      	uxth	r3, r3
				<< 8)
 8007b5e:	021b      	lsls	r3, r3, #8
 8007b60:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	7a1b      	ldrb	r3, [r3, #8]
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	4413      	add	r3, r2
 8007b6a:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	785b      	ldrb	r3, [r3, #1]
 8007b9c:	b29b      	uxth	r3, r3
				<< 8)
 8007b9e:	021b      	lsls	r3, r3, #8
 8007ba0:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	789b      	ldrb	r3, [r3, #2]
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	4413      	add	r3, r2
 8007baa:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	78db      	ldrb	r3, [r3, #3]
 8007bb4:	b29b      	uxth	r3, r3
				<< 8)
 8007bb6:	021b      	lsls	r3, r3, #8
 8007bb8:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	791b      	ldrb	r3, [r3, #4]
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	4413      	add	r3, r2
 8007bc2:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 8007bd8:	bf00      	nop
 8007bda:	3714      	adds	r7, #20
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <VL53LX_init_version>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53LX_init_version(
	VL53LX_DEV        Dev)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	3318      	adds	r3, #24
 8007bf0:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53LX_LL_API_IMPLEMENTATION_VER_MAJOR;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53LX_LL_API_IMPLEMENTATION_VER_MINOR;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53LX_LL_API_IMPLEMENTATION_VER_SUB;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53LX_LL_API_IMPLEMENTATION_VER_REVISION;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007c10:	bf00      	nop
 8007c12:	3714      	adds	r7, #20
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <VL53LX_init_ll_driver_state>:


void  VL53LX_init_ll_driver_state(
	VL53LX_DEV         Dev,
	VL53LX_DeviceState device_state)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	70fb      	strb	r3, [r7, #3]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	3318      	adds	r3, #24
 8007c2c:	60fb      	str	r3, [r7, #12]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	332c      	adds	r3, #44	; 0x2c
 8007c32:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	78fa      	ldrb	r2, [r7, #3]
 8007c38:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	2202      	movs	r2, #2
 8007c44:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	78fa      	ldrb	r2, [r7, #3]
 8007c56:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	2202      	movs	r2, #2
 8007c62:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	2200      	movs	r2, #0
 8007c68:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	735a      	strb	r2, [r3, #13]

}
 8007c70:	bf00      	nop
 8007c72:	3714      	adds	r7, #20
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <VL53LX_update_ll_driver_rd_state>:


VL53LX_Error  VL53LX_update_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b086      	sub	sp, #24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]


	VL53LX_Error        status  = VL53LX_ERROR_NONE;
 8007c84:	2300      	movs	r3, #0
 8007c86:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	3318      	adds	r3, #24
 8007c8c:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	332c      	adds	r3, #44	; 0x2c
 8007c92:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8007c9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d115      	bne.n	8007cce <VL53LX_update_ll_driver_rd_state+0x52>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2203      	movs	r2, #3
 8007ca6:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2200      	movs	r2, #0
 8007cac:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2202      	movs	r2, #2
 8007cbe:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	735a      	strb	r2, [r3, #13]
 8007ccc:	e0be      	b.n	8007e4c <VL53LX_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	7a1b      	ldrb	r3, [r3, #8]
 8007cd2:	2bff      	cmp	r3, #255	; 0xff
 8007cd4:	d103      	bne.n	8007cde <VL53LX_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2280      	movs	r2, #128	; 0x80
 8007cda:	721a      	strb	r2, [r3, #8]
 8007cdc:	e005      	b.n	8007cea <VL53LX_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	7a1b      	ldrb	r3, [r3, #8]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	b2da      	uxtb	r2, r3
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	721a      	strb	r2, [r3, #8]


		status = VL53LX_update_internal_stream_counters(Dev,
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	7a19      	ldrb	r1, [r3, #8]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f103 0209 	add.w	r2, r3, #9
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	330a      	adds	r3, #10
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f002 fcf6 	bl	800a6ea <VL53LX_update_internal_stream_counters>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	7adb      	ldrb	r3, [r3, #11]
 8007d06:	f083 0302 	eor.w	r3, r3, #2
 8007d0a:	b2da      	uxtb	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	79db      	ldrb	r3, [r3, #7]
 8007d14:	3b03      	subs	r3, #3
 8007d16:	2b05      	cmp	r3, #5
 8007d18:	f200 8082 	bhi.w	8007e20 <VL53LX_update_ll_driver_rd_state+0x1a4>
 8007d1c:	a201      	add	r2, pc, #4	; (adr r2, 8007d24 <VL53LX_update_ll_driver_rd_state+0xa8>)
 8007d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d22:	bf00      	nop
 8007d24:	08007d3d 	.word	0x08007d3d
 8007d28:	08007e21 	.word	0x08007e21
 8007d2c:	08007e21 	.word	0x08007e21
 8007d30:	08007d8f 	.word	0x08007d8f
 8007d34:	08007dc5 	.word	0x08007dc5
 8007d38:	08007def 	.word	0x08007def

		case VL53LX_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	f893 335e 	ldrb.w	r3, [r3, #862]	; 0x35e
 8007d42:	f003 0302 	and.w	r3, r3, #2
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	dd03      	ble.n	8007d52 <VL53LX_update_ll_driver_rd_state+0xd6>
				VL53LX_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2206      	movs	r2, #6
 8007d4e:	71da      	strb	r2, [r3, #7]
 8007d50:	e00d      	b.n	8007d6e <VL53LX_update_ll_driver_rd_state+0xf2>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
				if (pstate->rd_zone_id >=
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d303      	bcc.n	8007d68 <VL53LX_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2208      	movs	r2, #8
 8007d64:	71da      	strb	r2, [r3, #7]
 8007d66:	e002      	b.n	8007d6e <VL53LX_update_ll_driver_rd_state+0xf2>
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2207      	movs	r2, #7
 8007d6c:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2200      	movs	r2, #0
 8007d84:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	735a      	strb	r2, [r3, #13]

			break;
 8007d8c:	e05e      	b.n	8007e4c <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2200      	movs	r2, #0
 8007da4:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d303      	bcc.n	8007dbc <VL53LX_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2208      	movs	r2, #8
 8007db8:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 8007dba:	e047      	b.n	8007e4c <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2207      	movs	r2, #7
 8007dc0:	71da      	strb	r2, [r3, #7]
			break;
 8007dc2:	e043      	b.n	8007e4c <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	7b5b      	ldrb	r3, [r3, #13]
 8007dc8:	3301      	adds	r3, #1
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d303      	bcc.n	8007de6 <VL53LX_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2208      	movs	r2, #8
 8007de2:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 8007de4:	e032      	b.n	8007e4c <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2207      	movs	r2, #7
 8007dea:	71da      	strb	r2, [r3, #7]
			break;
 8007dec:	e02e      	b.n	8007e4c <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	7b1b      	ldrb	r3, [r3, #12]
 8007df8:	f083 0301 	eor.w	r3, r3, #1
 8007dfc:	b2da      	uxtb	r2, r3
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d303      	bcc.n	8007e18 <VL53LX_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2208      	movs	r2, #8
 8007e14:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 8007e16:	e019      	b.n	8007e4c <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2207      	movs	r2, #7
 8007e1c:	71da      	strb	r2, [r3, #7]
			break;
 8007e1e:	e015      	b.n	8007e4c <VL53LX_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2203      	movs	r2, #3
 8007e24:	71da      	strb	r2, [r3, #7]
				VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2202      	movs	r2, #2
 8007e3c:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	735a      	strb	r2, [r3, #13]
			break;
 8007e4a:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 8007e4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3718      	adds	r7, #24
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <VL53LX_check_ll_driver_rd_state>:


VL53LX_Error VL53LX_check_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b08d      	sub	sp, #52	; 0x34
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 8007e60:	2300      	movs	r3, #0
 8007e62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53LX_LLDriverData_t  *pdev =
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	3318      	adds	r3, #24
 8007e6a:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8007e72:	627b      	str	r3, [r7, #36]	; 0x24
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 8007e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e76:	332c      	adds	r3, #44	; 0x2c
 8007e78:	623b      	str	r3, [r7, #32]
	VL53LX_system_results_t   *psys_results = &(pdev->sys_results);
 8007e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7c:	f203 3366 	addw	r3, r3, #870	; 0x366
 8007e80:	61fb      	str	r3, [r7, #28]
	VL53LX_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 8007e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e84:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007e88:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8007e90:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 8007e92:	2300      	movs	r3, #0
 8007e94:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 8007e96:	2300      	movs	r3, #0
 8007e98:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t   histogram_mode        = 0;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 8007eb0:	f003 031f 	and.w	r3, r3, #31
 8007eb4:	74fb      	strb	r3, [r7, #19]
			VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	78db      	ldrb	r3, [r3, #3]
 8007eba:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 8007ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebe:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8007ec2:	f003 0302 	and.w	r3, r3, #2
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) ==
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	bf14      	ite	ne
 8007eca:	2301      	movne	r3, #1
 8007ecc:	2300      	moveq	r3, #0
 8007ece:	b2db      	uxtb	r3, r3
	histogram_mode =
 8007ed0:	747b      	strb	r3, [r7, #17]
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
		VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8007ed6:	111b      	asrs	r3, r3, #4
 8007ed8:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 8007eda:	f003 0302 	and.w	r3, r3, #2
 8007ede:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (histogram_mode)
 8007ee2:	7c7b      	ldrb	r3, [r7, #17]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d008      	beq.n	8007efa <VL53LX_check_ll_driver_rd_state+0xa2>
		device_gph_id = (phist_data->result__interrupt_status &
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
			VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8007eee:	111b      	asrs	r3, r3, #4
 8007ef0:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 8007ef2:	f003 0302 	and.w	r3, r3, #2
 8007ef6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 8007efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efc:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8007f00:	f003 0320 	and.w	r3, r3, #32
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d04e      	beq.n	8007fa6 <VL53LX_check_ll_driver_rd_state+0x14e>
		VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	79db      	ldrb	r3, [r3, #7]
 8007f0c:	2b06      	cmp	r3, #6
 8007f0e:	d109      	bne.n	8007f24 <VL53LX_check_ll_driver_rd_state+0xcc>
		VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 8007f10:	7c7b      	ldrb	r3, [r7, #17]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d14a      	bne.n	8007fac <VL53LX_check_ll_driver_rd_state+0x154>
			if (device_range_status !=
 8007f16:	7cfb      	ldrb	r3, [r7, #19]
 8007f18:	2b12      	cmp	r3, #18
 8007f1a:	d047      	beq.n	8007fac <VL53LX_check_ll_driver_rd_state+0x154>
			VL53LX_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 8007f1c:	23ef      	movs	r3, #239	; 0xef
 8007f1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007f22:	e043      	b.n	8007fac <VL53LX_check_ll_driver_rd_state+0x154>
				VL53LX_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 8007f24:	6a3b      	ldr	r3, [r7, #32]
 8007f26:	7a1b      	ldrb	r3, [r3, #8]
 8007f28:	7cba      	ldrb	r2, [r7, #18]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d002      	beq.n	8007f34 <VL53LX_check_ll_driver_rd_state+0xdc>
			status = VL53LX_ERROR_STREAM_COUNT_CHECK_FAIL;
 8007f2e:	23ee      	movs	r3, #238	; 0xee
 8007f30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 8007f34:	6a3b      	ldr	r3, [r7, #32]
 8007f36:	7adb      	ldrb	r3, [r3, #11]
 8007f38:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d002      	beq.n	8007f46 <VL53LX_check_ll_driver_rd_state+0xee>
			status = VL53LX_ERROR_GPH_ID_CHECK_FAIL;
 8007f40:	23ed      	movs	r3, #237	; 0xed
 8007f42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f




		expected_stream_count =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_stream_count;
 8007f46:	6a3b      	ldr	r3, [r7, #32]
 8007f48:	7b5b      	ldrb	r3, [r3, #13]
 8007f4a:	4619      	mov	r1, r3
		expected_stream_count =
 8007f4c:	697a      	ldr	r2, [r7, #20]
 8007f4e:	460b      	mov	r3, r1
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	440b      	add	r3, r1
 8007f54:	005b      	lsls	r3, r3, #1
 8007f56:	4413      	add	r3, r2
 8007f58:	3302      	adds	r3, #2
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id;
 8007f5e:	6a3b      	ldr	r3, [r7, #32]
 8007f60:	7b5b      	ldrb	r3, [r3, #13]
 8007f62:	4619      	mov	r1, r3
		expected_gph_id =
 8007f64:	697a      	ldr	r2, [r7, #20]
 8007f66:	460b      	mov	r3, r1
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	440b      	add	r3, r1
 8007f6c:	005b      	lsls	r3, r3, #1
 8007f6e:	4413      	add	r3, r2
 8007f70:	3303      	adds	r3, #3
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 8007f76:	7c3a      	ldrb	r2, [r7, #16]
 8007f78:	7cbb      	ldrb	r3, [r7, #18]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d00a      	beq.n	8007f94 <VL53LX_check_ll_driver_rd_state+0x13c>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 8007f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f80:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d102      	bne.n	8007f8e <VL53LX_check_ll_driver_rd_state+0x136>
 8007f88:	7cbb      	ldrb	r3, [r7, #18]
 8007f8a:	2bff      	cmp	r3, #255	; 0xff
 8007f8c:	d002      	beq.n	8007f94 <VL53LX_check_ll_driver_rd_state+0x13c>
				(device_stream_count == 255)))
				status =
 8007f8e:	23ec      	movs	r3, #236	; 0xec
 8007f90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}



		if (expected_gph_id != device_gph_id)
 8007f94:	7bfa      	ldrb	r2, [r7, #15]
 8007f96:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d005      	beq.n	8007faa <VL53LX_check_ll_driver_rd_state+0x152>
			status = VL53LX_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 8007f9e:	23eb      	movs	r3, #235	; 0xeb
 8007fa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007fa4:	e002      	b.n	8007fac <VL53LX_check_ll_driver_rd_state+0x154>
		goto ENDFUNC;
 8007fa6:	bf00      	nop
 8007fa8:	e000      	b.n	8007fac <VL53LX_check_ll_driver_rd_state+0x154>

	}



ENDFUNC:
 8007faa:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 8007fac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3734      	adds	r7, #52	; 0x34
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <VL53LX_update_ll_driver_cfg_state>:


VL53LX_Error  VL53LX_update_ll_driver_cfg_state(
	VL53LX_DEV         Dev)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b088      	sub	sp, #32
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t  *pdev =
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	3318      	adds	r3, #24
 8007fcc:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8007fd4:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	332c      	adds	r3, #44	; 0x2c
 8007fda:	613b      	str	r3, [r7, #16]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8007fe2:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8007fea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d11b      	bne.n	800802a <VL53LX_update_ll_driver_cfg_state+0x6e>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	2203      	movs	r2, #3
 8007ff6:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	2200      	movs	r2, #0
 8008002:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	2200      	movs	r2, #0
 8008008:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	2202      	movs	r2, #2
 800800e:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	2200      	movs	r2, #0
 8008014:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	2200      	movs	r2, #0
 800801a:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 800801c:	2300      	movs	r3, #0
 800801e:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 8008020:	2300      	movs	r3, #0
 8008022:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 8008024:	2300      	movs	r3, #0
 8008026:	773b      	strb	r3, [r7, #28]
 8008028:	e0b1      	b.n	800818e <VL53LX_update_ll_driver_cfg_state+0x1d2>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	791b      	ldrb	r3, [r3, #4]
 800802e:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	799b      	ldrb	r3, [r3, #6]
 8008034:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	785b      	ldrb	r3, [r3, #1]
 800803a:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	785b      	ldrb	r3, [r3, #1]
 8008040:	2bff      	cmp	r3, #255	; 0xff
 8008042:	d103      	bne.n	800804c <VL53LX_update_ll_driver_cfg_state+0x90>
			pstate->cfg_stream_count = 0x80;
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	2280      	movs	r2, #128	; 0x80
 8008048:	705a      	strb	r2, [r3, #1]
 800804a:	e005      	b.n	8008058 <VL53LX_update_ll_driver_cfg_state+0x9c>
		else
			pstate->cfg_stream_count++;
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	785b      	ldrb	r3, [r3, #1]
 8008050:	3301      	adds	r3, #1
 8008052:	b2da      	uxtb	r2, r3
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	705a      	strb	r2, [r3, #1]


		status = VL53LX_update_internal_stream_counters(
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	7859      	ldrb	r1, [r3, #1]
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	1c9a      	adds	r2, r3, #2
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	3303      	adds	r3, #3
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f002 fb40 	bl	800a6ea <VL53LX_update_internal_stream_counters>
 800806a:	4603      	mov	r3, r0
 800806c:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	791b      	ldrb	r3, [r3, #4]
 8008072:	f083 0302 	eor.w	r3, r3, #2
 8008076:	b2da      	uxtb	r2, r3
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	2b05      	cmp	r3, #5
 8008082:	d053      	beq.n	800812c <VL53LX_update_ll_driver_cfg_state+0x170>
 8008084:	2b05      	cmp	r3, #5
 8008086:	dc69      	bgt.n	800815c <VL53LX_update_ll_driver_cfg_state+0x1a0>
 8008088:	2b03      	cmp	r3, #3
 800808a:	d002      	beq.n	8008092 <VL53LX_update_ll_driver_cfg_state+0xd6>
 800808c:	2b04      	cmp	r3, #4
 800808e:	d02d      	beq.n	80080ec <VL53LX_update_ll_driver_cfg_state+0x130>
 8008090:	e064      	b.n	800815c <VL53LX_update_ll_driver_cfg_state+0x1a0>

		case VL53LX_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	2201      	movs	r2, #1
 8008096:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d909      	bls.n	80080ba <VL53LX_update_ll_driver_cfg_state+0xfe>
				pstate->cfg_zone_id = 0;
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	2200      	movs	r2, #0
 80080aa:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	795b      	ldrb	r3, [r3, #5]
 80080b0:	f083 0301 	eor.w	r3, r3, #1
 80080b4:	b2da      	uxtb	r2, r3
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	2201      	movs	r2, #1
 80080be:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d106      	bne.n	80080d8 <VL53LX_update_ll_driver_cfg_state+0x11c>
				pstate->cfg_internal_stream_count = 1;
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	2201      	movs	r2, #1
 80080ce:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	2200      	movs	r2, #0
 80080d4:	70da      	strb	r2, [r3, #3]
 80080d6:	e005      	b.n	80080e4 <VL53LX_update_ll_driver_cfg_state+0x128>
			} else {
				pstate->cfg_internal_stream_count = 0;
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	2200      	movs	r2, #0
 80080dc:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	2201      	movs	r2, #1
 80080e2:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	2204      	movs	r2, #4
 80080e8:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 80080ea:	e050      	b.n	800818e <VL53LX_update_ll_driver_cfg_state+0x1d2>

		case VL53LX_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	799b      	ldrb	r3, [r3, #6]
 80080f0:	3301      	adds	r3, #1
 80080f2:	b2da      	uxtb	r2, r3
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 8008102:	429a      	cmp	r2, r3
 8008104:	d940      	bls.n	8008188 <VL53LX_update_ll_driver_cfg_state+0x1cc>

				pstate->cfg_zone_id = 0;
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	2200      	movs	r2, #0
 800810a:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	795b      	ldrb	r3, [r3, #5]
 8008110:	f083 0301 	eor.w	r3, r3, #1
 8008114:	b2da      	uxtb	r2, r3
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8008120:	2b00      	cmp	r3, #0
 8008122:	d031      	beq.n	8008188 <VL53LX_update_ll_driver_cfg_state+0x1cc>
					pstate->cfg_device_state =
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	2205      	movs	r2, #5
 8008128:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 800812a:	e02d      	b.n	8008188 <VL53LX_update_ll_driver_cfg_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	799b      	ldrb	r3, [r3, #6]
 8008130:	3301      	adds	r3, #1
 8008132:	b2da      	uxtb	r2, r3
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 8008142:	429a      	cmp	r2, r3
 8008144:	d922      	bls.n	800818c <VL53LX_update_ll_driver_cfg_state+0x1d0>
				pstate->cfg_zone_id = 0;
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	2200      	movs	r2, #0
 800814a:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	795b      	ldrb	r3, [r3, #5]
 8008150:	f083 0301 	eor.w	r3, r3, #1
 8008154:	b2da      	uxtb	r2, r3
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	715a      	strb	r2, [r3, #5]
			}
			break;
 800815a:	e017      	b.n	800818c <VL53LX_update_ll_driver_cfg_state+0x1d0>

		default:
			pstate->cfg_device_state =
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	2203      	movs	r2, #3
 8008160:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	2200      	movs	r2, #0
 8008166:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	2200      	movs	r2, #0
 800816c:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	2200      	movs	r2, #0
 8008172:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	2202      	movs	r2, #2
 8008178:	711a      	strb	r2, [r3, #4]
					VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	2200      	movs	r2, #0
 800817e:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	2200      	movs	r2, #0
 8008184:	719a      	strb	r2, [r3, #6]
			break;
 8008186:	e002      	b.n	800818e <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8008188:	bf00      	nop
 800818a:	e000      	b.n	800818e <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 800818c:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8008194:	2b00      	cmp	r3, #0
 8008196:	d11d      	bne.n	80081d4 <VL53LX_update_ll_driver_cfg_state+0x218>

		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8008198:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 800819a:	7f3b      	ldrb	r3, [r7, #28]
 800819c:	3b01      	subs	r3, #1
 800819e:	b2d8      	uxtb	r0, r3
 80081a0:	68f9      	ldr	r1, [r7, #12]
 80081a2:	4613      	mov	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	4413      	add	r3, r2
 80081a8:	005b      	lsls	r3, r3, #1
 80081aa:	440b      	add	r3, r1
 80081ac:	3302      	adds	r3, #2
 80081ae:	4602      	mov	r2, r0
 80081b0:	701a      	strb	r2, [r3, #0]

		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id =
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	7b5b      	ldrb	r3, [r3, #13]
 80081b6:	4619      	mov	r1, r3
 80081b8:	7f7b      	ldrb	r3, [r7, #29]
 80081ba:	f083 0302 	eor.w	r3, r3, #2
 80081be:	b2d8      	uxtb	r0, r3
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	460b      	mov	r3, r1
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	440b      	add	r3, r1
 80081c8:	005b      	lsls	r3, r3, #1
 80081ca:	4413      	add	r3, r2
 80081cc:	3303      	adds	r3, #3
 80081ce:	4602      	mov	r2, r0
 80081d0:	701a      	strb	r2, [r3, #0]
 80081d2:	e013      	b.n	80081fc <VL53LX_update_ll_driver_cfg_state+0x240>
			prev_cfg_gph_id ^ VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 80081d4:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 80081d6:	68f9      	ldr	r1, [r7, #12]
 80081d8:	4613      	mov	r3, r2
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	4413      	add	r3, r2
 80081de:	005b      	lsls	r3, r3, #1
 80081e0:	440b      	add	r3, r1
 80081e2:	3302      	adds	r3, #2
 80081e4:	7f3a      	ldrb	r2, [r7, #28]
 80081e6:	701a      	strb	r2, [r3, #0]
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_gph_id =
 80081e8:	7fba      	ldrb	r2, [r7, #30]
 80081ea:	68f9      	ldr	r1, [r7, #12]
 80081ec:	4613      	mov	r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	4413      	add	r3, r2
 80081f2:	005b      	lsls	r3, r3, #1
 80081f4:	440b      	add	r3, r1
 80081f6:	3303      	adds	r3, #3
 80081f8:	7f7a      	ldrb	r2, [r7, #29]
 80081fa:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 80081fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3720      	adds	r7, #32
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <VL53LX_copy_rtn_good_spads_to_buffer>:


void VL53LX_copy_rtn_good_spads_to_buffer(
	VL53LX_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	7c1a      	ldrb	r2, [r3, #16]
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	3301      	adds	r3, #1
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	7c52      	ldrb	r2, [r2, #17]
 8008222:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	3302      	adds	r3, #2
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	7c92      	ldrb	r2, [r2, #18]
 800822c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	3303      	adds	r3, #3
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	7cd2      	ldrb	r2, [r2, #19]
 8008236:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	3304      	adds	r3, #4
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	7d12      	ldrb	r2, [r2, #20]
 8008240:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	3305      	adds	r3, #5
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	7d52      	ldrb	r2, [r2, #21]
 800824a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	3306      	adds	r3, #6
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	7d92      	ldrb	r2, [r2, #22]
 8008254:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	3307      	adds	r3, #7
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	7dd2      	ldrb	r2, [r2, #23]
 800825e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	3308      	adds	r3, #8
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	7e12      	ldrb	r2, [r2, #24]
 8008268:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	3309      	adds	r3, #9
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	7e52      	ldrb	r2, [r2, #25]
 8008272:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	330a      	adds	r3, #10
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	7e92      	ldrb	r2, [r2, #26]
 800827c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	330b      	adds	r3, #11
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	7ed2      	ldrb	r2, [r2, #27]
 8008286:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	330c      	adds	r3, #12
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	7f12      	ldrb	r2, [r2, #28]
 8008290:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	330d      	adds	r3, #13
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	7f52      	ldrb	r2, [r2, #29]
 800829a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	330e      	adds	r3, #14
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	7f92      	ldrb	r2, [r2, #30]
 80082a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	330f      	adds	r3, #15
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	7fd2      	ldrb	r2, [r2, #31]
 80082ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	3310      	adds	r3, #16
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80082ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	3311      	adds	r3, #17
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80082c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	3312      	adds	r3, #18
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 80082d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	3313      	adds	r3, #19
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 80082de:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	3314      	adds	r3, #20
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80082ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	3315      	adds	r3, #21
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80082f6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	3316      	adds	r3, #22
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8008302:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	3317      	adds	r3, #23
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800830e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	3318      	adds	r3, #24
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800831a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	3319      	adds	r3, #25
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 8008326:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	331a      	adds	r3, #26
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 8008332:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	331b      	adds	r3, #27
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800833e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	331c      	adds	r3, #28
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800834a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	331d      	adds	r3, #29
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8008356:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	331e      	adds	r3, #30
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8008362:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	331f      	adds	r3, #31
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800836e:	701a      	strb	r2, [r3, #0]
}
 8008370:	bf00      	nop
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <VL53LX_init_system_results>:


void VL53LX_init_system_results(
		VL53LX_system_results_t  *pdata)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	22ff      	movs	r2, #255	; 0xff
 8008388:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	22ff      	movs	r2, #255	; 0xff
 800838e:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	22ff      	movs	r2, #255	; 0xff
 8008394:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	22ff      	movs	r2, #255	; 0xff
 800839a:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083a2:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083aa:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083b2:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083ba:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083c2:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083ca:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083d2:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083da:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083e2:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083ea:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083f2:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083fa:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008402:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800840a:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008412:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800841a:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008422:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800842a:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008432:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	22ff      	movs	r2, #255	; 0xff
 8008438:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53LX_zone_results_t  *pdata)
{
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
 800844e:	4603      	mov	r3, r0
 8008450:	6039      	str	r1, [r7, #0]
 8008452:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 8008454:	2300      	movs	r3, #0
 8008456:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_objects_t *pobjects;

	pdata->max_zones    = VL53LX_MAX_USER_ZONES;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	2205      	movs	r2, #5
 800845c:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	79fa      	ldrb	r2, [r7, #7]
 8008462:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 8008464:	2300      	movs	r3, #0
 8008466:	73fb      	strb	r3, [r7, #15]
 8008468:	e017      	b.n	800849a <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53LX_p_003[z]);
 800846a:	7bfa      	ldrb	r2, [r7, #15]
 800846c:	4613      	mov	r3, r2
 800846e:	011b      	lsls	r3, r3, #4
 8008470:	4413      	add	r3, r2
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	683a      	ldr	r2, [r7, #0]
 8008476:	4413      	add	r3, r2
 8008478:	3304      	adds	r3, #4
 800847a:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53LX_DEVICESTATE_SW_STANDBY;
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	2203      	movs	r2, #3
 8008480:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	2203      	movs	r2, #3
 8008486:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53LX_MAX_RANGE_RESULTS;
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	2204      	movs	r2, #4
 800848c:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	2200      	movs	r2, #0
 8008492:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 8008494:	7bfb      	ldrb	r3, [r7, #15]
 8008496:	3301      	adds	r3, #1
 8008498:	73fb      	strb	r3, [r7, #15]
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	7bfa      	ldrb	r2, [r7, #15]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d3e2      	bcc.n	800846a <V53L1_init_zone_results_structure+0x22>
	}
}
 80084a4:	bf00      	nop
 80084a6:	bf00      	nop
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53LX_DEV              Dev)
{
 80084b2:	b480      	push	{r7}
 80084b4:	b087      	sub	sp, #28
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverResults_t  *pres =
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80084c0:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 80084c2:	2300      	movs	r3, #0
 80084c4:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53LX_MAX_USER_ZONES;
 80084c6:	2305      	movs	r3, #5
 80084c8:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80084d0:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 80084d2:	2300      	movs	r3, #0
 80084d4:	75fb      	strb	r3, [r7, #23]
 80084d6:	e016      	b.n	8008506 <V53L1_init_zone_dss_configs+0x54>
		pdata->VL53LX_p_003[z].dss_mode =
 80084d8:	7dfa      	ldrb	r2, [r7, #23]
 80084da:	68b9      	ldr	r1, [r7, #8]
 80084dc:	4613      	mov	r3, r2
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	4413      	add	r3, r2
 80084e2:	005b      	lsls	r3, r3, #1
 80084e4:	440b      	add	r3, r1
 80084e6:	3304      	adds	r3, #4
 80084e8:	2201      	movs	r2, #1
 80084ea:	701a      	strb	r2, [r3, #0]
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53LX_p_003[z].dss_requested_effective_spad_count = 0;
 80084ec:	7dfa      	ldrb	r2, [r7, #23]
 80084ee:	68b9      	ldr	r1, [r7, #8]
 80084f0:	4613      	mov	r3, r2
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	4413      	add	r3, r2
 80084f6:	005b      	lsls	r3, r3, #1
 80084f8:	440b      	add	r3, r1
 80084fa:	3306      	adds	r3, #6
 80084fc:	2200      	movs	r2, #0
 80084fe:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 8008500:	7dfb      	ldrb	r3, [r7, #23]
 8008502:	3301      	adds	r3, #1
 8008504:	75fb      	strb	r3, [r7, #23]
 8008506:	7dfa      	ldrb	r2, [r7, #23]
 8008508:	7bfb      	ldrb	r3, [r7, #15]
 800850a:	429a      	cmp	r2, r3
 800850c:	d3e4      	bcc.n	80084d8 <V53L1_init_zone_dss_configs+0x26>
	}
}
 800850e:	bf00      	nop
 8008510:	bf00      	nop
 8008512:	371c      	adds	r7, #28
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <VL53LX_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 800851c:	b490      	push	{r4, r7}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	4604      	mov	r4, r0
 8008524:	4608      	mov	r0, r1
 8008526:	4611      	mov	r1, r2
 8008528:	461a      	mov	r2, r3
 800852a:	4623      	mov	r3, r4
 800852c:	71fb      	strb	r3, [r7, #7]
 800852e:	4603      	mov	r3, r0
 8008530:	71bb      	strb	r3, [r7, #6]
 8008532:	460b      	mov	r3, r1
 8008534:	717b      	strb	r3, [r7, #5]
 8008536:	4613      	mov	r3, r2
 8008538:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800853a:	79bb      	ldrb	r3, [r7, #6]
 800853c:	011b      	lsls	r3, r3, #4
 800853e:	b2da      	uxtb	r2, r3
 8008540:	79fb      	ldrb	r3, [r7, #7]
 8008542:	4413      	add	r3, r2
 8008544:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 8008546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008548:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800854a:	793b      	ldrb	r3, [r7, #4]
 800854c:	011b      	lsls	r3, r3, #4
 800854e:	b2da      	uxtb	r2, r3
 8008550:	797b      	ldrb	r3, [r7, #5]
 8008552:	4413      	add	r3, r2
 8008554:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 8008556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008558:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800855a:	7d3b      	ldrb	r3, [r7, #20]
 800855c:	011b      	lsls	r3, r3, #4
 800855e:	b2da      	uxtb	r2, r3
 8008560:	7c3b      	ldrb	r3, [r7, #16]
 8008562:	4413      	add	r3, r2
 8008564:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 8008566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008568:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 800856a:	7f3b      	ldrb	r3, [r7, #28]
 800856c:	011b      	lsls	r3, r3, #4
 800856e:	b2da      	uxtb	r2, r3
 8008570:	7e3b      	ldrb	r3, [r7, #24]
 8008572:	4413      	add	r3, r2
 8008574:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8008576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008578:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 800857a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800857e:	011b      	lsls	r3, r3, #4
 8008580:	b2da      	uxtb	r2, r3
 8008582:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008586:	4413      	add	r3, r2
 8008588:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 800858a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858c:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 800858e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008592:	011b      	lsls	r3, r3, #4
 8008594:	b2da      	uxtb	r2, r3
 8008596:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800859a:	4413      	add	r3, r2
 800859c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 800859e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a0:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 80085a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a4:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 80085a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a8:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 80085aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ac:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 80085ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b0:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 80085b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b4:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 80085b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b8:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 80085ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085bc:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 80085be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c0:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 80085c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80085c8:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 80085ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80085ce:	011b      	lsls	r3, r3, #4
 80085d0:	b2da      	uxtb	r2, r3
 80085d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80085d6:	4413      	add	r3, r2
 80085d8:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 80085da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085dc:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 80085de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80085e4:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 80085e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e8:	2200      	movs	r2, #0
 80085ea:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 80085ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ee:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 80085f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f2:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 80085f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f6:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 80085f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fa:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 80085fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fe:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8008600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008602:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 8008604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008606:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 8008608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860a:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 800860c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860e:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 8008610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008612:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 8008614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008616:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 8008618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861a:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800861c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008622:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 8008624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008626:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800862a:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800862c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862e:	2200      	movs	r2, #0
 8008630:	701a      	strb	r2, [r3, #0]

}
 8008632:	bf00      	nop
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bc90      	pop	{r4, r7}
 800863a:	4770      	bx	lr

0800863c <VL53LX_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 800863c:	b490      	push	{r4, r7}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	4604      	mov	r4, r0
 8008644:	4608      	mov	r0, r1
 8008646:	4611      	mov	r1, r2
 8008648:	461a      	mov	r2, r3
 800864a:	4623      	mov	r3, r4
 800864c:	71fb      	strb	r3, [r7, #7]
 800864e:	4603      	mov	r3, r0
 8008650:	71bb      	strb	r3, [r7, #6]
 8008652:	460b      	mov	r3, r1
 8008654:	717b      	strb	r3, [r7, #5]
 8008656:	4613      	mov	r3, r2
 8008658:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800865a:	79bb      	ldrb	r3, [r7, #6]
 800865c:	011b      	lsls	r3, r3, #4
 800865e:	b2da      	uxtb	r2, r3
 8008660:	79fb      	ldrb	r3, [r7, #7]
 8008662:	4413      	add	r3, r2
 8008664:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 8008666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008668:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800866a:	793b      	ldrb	r3, [r7, #4]
 800866c:	011b      	lsls	r3, r3, #4
 800866e:	b2da      	uxtb	r2, r3
 8008670:	797b      	ldrb	r3, [r7, #5]
 8008672:	4413      	add	r3, r2
 8008674:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 8008676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008678:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800867a:	7d3b      	ldrb	r3, [r7, #20]
 800867c:	011b      	lsls	r3, r3, #4
 800867e:	b2da      	uxtb	r2, r3
 8008680:	7c3b      	ldrb	r3, [r7, #16]
 8008682:	4413      	add	r3, r2
 8008684:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 8008686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008688:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800868a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868c:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800868e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008690:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 8008692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008694:	789a      	ldrb	r2, [r3, #2]
 8008696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008698:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800869a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869c:	78da      	ldrb	r2, [r3, #3]
 800869e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a0:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 80086a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a4:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 80086a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a8:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 80086aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ac:	789a      	ldrb	r2, [r3, #2]
 80086ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b0:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 80086b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b4:	78da      	ldrb	r2, [r3, #3]
 80086b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b8:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 80086ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086bc:	791a      	ldrb	r2, [r3, #4]
 80086be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c0:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 80086c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80086c8:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 80086ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80086ce:	011b      	lsls	r3, r3, #4
 80086d0:	b2da      	uxtb	r2, r3
 80086d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80086d6:	4413      	add	r3, r2
 80086d8:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 80086da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086dc:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 80086de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80086e4:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 80086e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e8:	2200      	movs	r2, #0
 80086ea:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 80086ec:	7f3b      	ldrb	r3, [r7, #28]
 80086ee:	011b      	lsls	r3, r3, #4
 80086f0:	b2da      	uxtb	r2, r3
 80086f2:	7e3b      	ldrb	r3, [r7, #24]
 80086f4:	4413      	add	r3, r2
 80086f6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 80086f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fa:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 80086fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008700:	011b      	lsls	r3, r3, #4
 8008702:	b2da      	uxtb	r2, r3
 8008704:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008708:	4413      	add	r3, r2
 800870a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800870c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870e:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 8008710:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008714:	011b      	lsls	r3, r3, #4
 8008716:	b2da      	uxtb	r2, r3
 8008718:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800871c:	4413      	add	r3, r2
 800871e:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8008720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008722:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 8008724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008726:	7bda      	ldrb	r2, [r3, #15]
 8008728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872a:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 800872c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872e:	7c1a      	ldrb	r2, [r3, #16]
 8008730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008732:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 8008734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008736:	7c5a      	ldrb	r2, [r3, #17]
 8008738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873a:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800873c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008742:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 8008744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008746:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800874a:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800874c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874e:	2200      	movs	r2, #0
 8008750:	701a      	strb	r2, [r3, #0]
}
 8008752:	bf00      	nop
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bc90      	pop	{r4, r7}
 800875a:	4770      	bx	lr

0800875c <VL53LX_init_xtalk_bin_data_struct>:

void VL53LX_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53LX_p_021,
	VL53LX_xtalk_histogram_shape_t *pdata)
{
 800875c:	b480      	push	{r7}
 800875e:	b087      	sub	sp, #28
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	460b      	mov	r3, r1
 8008766:	607a      	str	r2, [r7, #4]
 8008768:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800876a:	2300      	movs	r3, #0
 800876c:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_XTALK_HISTO_BINS;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	220c      	movs	r2, #12
 8008784:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 8008786:	897b      	ldrh	r3, [r7, #10]
 8008788:	b2da      	uxtb	r2, r3
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	pdata->cal_config__vcsel_start            = 0;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	pdata->vcsel_width                        = 0;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53LX_p_015                = 0;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	pdata->zero_distance_phase                = 0;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 80087bc:	2300      	movs	r3, #0
 80087be:	82fb      	strh	r3, [r7, #22]
 80087c0:	e015      	b.n	80087ee <VL53LX_init_xtalk_bin_data_struct+0x92>
		if (i < VL53LX_p_021)
 80087c2:	8afa      	ldrh	r2, [r7, #22]
 80087c4:	897b      	ldrh	r3, [r7, #10]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d207      	bcs.n	80087da <VL53LX_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 80087ca:	8afb      	ldrh	r3, [r7, #22]
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	3302      	adds	r3, #2
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	4413      	add	r3, r2
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	605a      	str	r2, [r3, #4]
 80087d8:	e006      	b.n	80087e8 <VL53LX_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 80087da:	8afb      	ldrh	r3, [r7, #22]
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	3302      	adds	r3, #2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	4413      	add	r3, r2
 80087e4:	2200      	movs	r2, #0
 80087e6:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 80087e8:	8afb      	ldrh	r3, [r7, #22]
 80087ea:	3301      	adds	r3, #1
 80087ec:	82fb      	strh	r3, [r7, #22]
 80087ee:	8afb      	ldrh	r3, [r7, #22]
 80087f0:	2b0b      	cmp	r3, #11
 80087f2:	d9e6      	bls.n	80087c2 <VL53LX_init_xtalk_bin_data_struct+0x66>
	}
}
 80087f4:	bf00      	nop
 80087f6:	bf00      	nop
 80087f8:	371c      	adds	r7, #28
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr

08008802 <VL53LX_i2c_encode_uint16_t>:

void VL53LX_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008802:	b480      	push	{r7}
 8008804:	b085      	sub	sp, #20
 8008806:	af00      	add	r7, sp, #0
 8008808:	4603      	mov	r3, r0
 800880a:	603a      	str	r2, [r7, #0]
 800880c:	80fb      	strh	r3, [r7, #6]
 800880e:	460b      	mov	r3, r1
 8008810:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 8008812:	2300      	movs	r3, #0
 8008814:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53LX_p_003 = 0;
 8008816:	2300      	movs	r3, #0
 8008818:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 800881a:	88fb      	ldrh	r3, [r7, #6]
 800881c:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800881e:	2300      	movs	r3, #0
 8008820:	81fb      	strh	r3, [r7, #14]
 8008822:	e00e      	b.n	8008842 <VL53LX_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8008824:	88ba      	ldrh	r2, [r7, #4]
 8008826:	89fb      	ldrh	r3, [r7, #14]
 8008828:	1ad3      	subs	r3, r2, r3
 800882a:	3b01      	subs	r3, #1
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	4413      	add	r3, r2
 8008830:	89ba      	ldrh	r2, [r7, #12]
 8008832:	b2d2      	uxtb	r2, r2
 8008834:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 8008836:	89bb      	ldrh	r3, [r7, #12]
 8008838:	0a1b      	lsrs	r3, r3, #8
 800883a:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800883c:	89fb      	ldrh	r3, [r7, #14]
 800883e:	3301      	adds	r3, #1
 8008840:	81fb      	strh	r3, [r7, #14]
 8008842:	89fa      	ldrh	r2, [r7, #14]
 8008844:	88bb      	ldrh	r3, [r7, #4]
 8008846:	429a      	cmp	r2, r3
 8008848:	d3ec      	bcc.n	8008824 <VL53LX_i2c_encode_uint16_t+0x22>
	}
}
 800884a:	bf00      	nop
 800884c:	bf00      	nop
 800884e:	3714      	adds	r7, #20
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <VL53LX_i2c_decode_uint16_t>:

uint16_t VL53LX_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
 800885e:	4603      	mov	r3, r0
 8008860:	6039      	str	r1, [r7, #0]
 8008862:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 8008864:	2300      	movs	r3, #0
 8008866:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 8008868:	e00a      	b.n	8008880 <VL53LX_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800886a:	89fb      	ldrh	r3, [r7, #14]
 800886c:	021b      	lsls	r3, r3, #8
 800886e:	b21a      	sxth	r2, r3
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	1c59      	adds	r1, r3, #1
 8008874:	6039      	str	r1, [r7, #0]
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	b21b      	sxth	r3, r3
 800887a:	4313      	orrs	r3, r2
 800887c:	b21b      	sxth	r3, r3
 800887e:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 8008880:	88fb      	ldrh	r3, [r7, #6]
 8008882:	1e5a      	subs	r2, r3, #1
 8008884:	80fa      	strh	r2, [r7, #6]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1ef      	bne.n	800886a <VL53LX_i2c_decode_uint16_t+0x12>

	return value;
 800888a:	89fb      	ldrh	r3, [r7, #14]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3714      	adds	r7, #20
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <VL53LX_i2c_encode_int16_t>:

void VL53LX_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
 800889e:	4603      	mov	r3, r0
 80088a0:	603a      	str	r2, [r7, #0]
 80088a2:	80fb      	strh	r3, [r7, #6]
 80088a4:	460b      	mov	r3, r1
 80088a6:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 80088a8:	2300      	movs	r3, #0
 80088aa:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53LX_p_003 = 0;
 80088ac:	2300      	movs	r3, #0
 80088ae:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 80088b0:	88fb      	ldrh	r3, [r7, #6]
 80088b2:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 80088b4:	2300      	movs	r3, #0
 80088b6:	81fb      	strh	r3, [r7, #14]
 80088b8:	e00f      	b.n	80088da <VL53LX_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 80088ba:	88ba      	ldrh	r2, [r7, #4]
 80088bc:	89fb      	ldrh	r3, [r7, #14]
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	3b01      	subs	r3, #1
 80088c2:	683a      	ldr	r2, [r7, #0]
 80088c4:	4413      	add	r3, r2
 80088c6:	89ba      	ldrh	r2, [r7, #12]
 80088c8:	b2d2      	uxtb	r2, r2
 80088ca:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 80088cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80088d0:	121b      	asrs	r3, r3, #8
 80088d2:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 80088d4:	89fb      	ldrh	r3, [r7, #14]
 80088d6:	3301      	adds	r3, #1
 80088d8:	81fb      	strh	r3, [r7, #14]
 80088da:	89fa      	ldrh	r2, [r7, #14]
 80088dc:	88bb      	ldrh	r3, [r7, #4]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d3eb      	bcc.n	80088ba <VL53LX_i2c_encode_int16_t+0x22>
	}
}
 80088e2:	bf00      	nop
 80088e4:	bf00      	nop
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <VL53LX_i2c_decode_int16_t>:

int16_t VL53LX_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b085      	sub	sp, #20
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	4603      	mov	r3, r0
 80088f8:	6039      	str	r1, [r7, #0]
 80088fa:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 80088fc:	2300      	movs	r3, #0
 80088fe:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	b25b      	sxtb	r3, r3
 8008906:	2b00      	cmp	r3, #0
 8008908:	da0e      	bge.n	8008928 <VL53LX_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800890a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800890e:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 8008910:	e00a      	b.n	8008928 <VL53LX_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 8008912:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008916:	021b      	lsls	r3, r3, #8
 8008918:	b21a      	sxth	r2, r3
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	1c59      	adds	r1, r3, #1
 800891e:	6039      	str	r1, [r7, #0]
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	b21b      	sxth	r3, r3
 8008924:	4313      	orrs	r3, r2
 8008926:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 8008928:	88fb      	ldrh	r3, [r7, #6]
 800892a:	1e5a      	subs	r2, r3, #1
 800892c:	80fa      	strh	r2, [r7, #6]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1ef      	bne.n	8008912 <VL53LX_i2c_decode_int16_t+0x22>

	return value;
 8008932:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3714      	adds	r7, #20
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr

08008942 <VL53LX_i2c_encode_uint32_t>:

void VL53LX_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008942:	b480      	push	{r7}
 8008944:	b087      	sub	sp, #28
 8008946:	af00      	add	r7, sp, #0
 8008948:	60f8      	str	r0, [r7, #12]
 800894a:	460b      	mov	r3, r1
 800894c:	607a      	str	r2, [r7, #4]
 800894e:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 8008950:	2300      	movs	r3, #0
 8008952:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53LX_p_003 = 0;
 8008954:	2300      	movs	r3, #0
 8008956:	613b      	str	r3, [r7, #16]

	VL53LX_p_003 =  ip_value;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 800895c:	2300      	movs	r3, #0
 800895e:	82fb      	strh	r3, [r7, #22]
 8008960:	e00e      	b.n	8008980 <VL53LX_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8008962:	897a      	ldrh	r2, [r7, #10]
 8008964:	8afb      	ldrh	r3, [r7, #22]
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	3b01      	subs	r3, #1
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	4413      	add	r3, r2
 800896e:	693a      	ldr	r2, [r7, #16]
 8008970:	b2d2      	uxtb	r2, r2
 8008972:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	0a1b      	lsrs	r3, r3, #8
 8008978:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 800897a:	8afb      	ldrh	r3, [r7, #22]
 800897c:	3301      	adds	r3, #1
 800897e:	82fb      	strh	r3, [r7, #22]
 8008980:	8afa      	ldrh	r2, [r7, #22]
 8008982:	897b      	ldrh	r3, [r7, #10]
 8008984:	429a      	cmp	r2, r3
 8008986:	d3ec      	bcc.n	8008962 <VL53LX_i2c_encode_uint32_t+0x20>
	}
}
 8008988:	bf00      	nop
 800898a:	bf00      	nop
 800898c:	371c      	adds	r7, #28
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr

08008996 <VL53LX_i2c_decode_uint32_t>:

uint32_t VL53LX_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008996:	b480      	push	{r7}
 8008998:	b085      	sub	sp, #20
 800899a:	af00      	add	r7, sp, #0
 800899c:	4603      	mov	r3, r0
 800899e:	6039      	str	r1, [r7, #0]
 80089a0:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 80089a2:	2300      	movs	r3, #0
 80089a4:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 80089a6:	e007      	b.n	80089b8 <VL53LX_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	021a      	lsls	r2, r3, #8
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	1c59      	adds	r1, r3, #1
 80089b0:	6039      	str	r1, [r7, #0]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 80089b8:	88fb      	ldrh	r3, [r7, #6]
 80089ba:	1e5a      	subs	r2, r3, #1
 80089bc:	80fa      	strh	r2, [r7, #6]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d1f2      	bne.n	80089a8 <VL53LX_i2c_decode_uint32_t+0x12>

	return value;
 80089c2:	68fb      	ldr	r3, [r7, #12]
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3714      	adds	r7, #20
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <VL53LX_i2c_decode_int32_t>:
}

int32_t VL53LX_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	4603      	mov	r3, r0
 80089d8:	6039      	str	r1, [r7, #0]
 80089da:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 80089dc:	2300      	movs	r3, #0
 80089de:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	b25b      	sxtb	r3, r3
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	da0b      	bge.n	8008a02 <VL53LX_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 80089ea:	f04f 33ff 	mov.w	r3, #4294967295
 80089ee:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 80089f0:	e007      	b.n	8008a02 <VL53LX_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	021a      	lsls	r2, r3, #8
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	1c59      	adds	r1, r3, #1
 80089fa:	6039      	str	r1, [r7, #0]
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 8008a02:	88fb      	ldrh	r3, [r7, #6]
 8008a04:	1e5a      	subs	r2, r3, #1
 8008a06:	80fa      	strh	r2, [r7, #6]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1f2      	bne.n	80089f2 <VL53LX_i2c_decode_int32_t+0x22>

	return value;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3714      	adds	r7, #20
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr

08008a1a <VL53LX_start_test>:


VL53LX_Error VL53LX_start_test(
	VL53LX_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b084      	sub	sp, #16
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
 8008a22:	460b      	mov	r3, r1
 8008a24:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8008a26:	2300      	movs	r3, #0
 8008a28:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE) {
 8008a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d107      	bne.n	8008a42 <VL53LX_start_test+0x28>
		status = VL53LX_WrByte(
 8008a32:	78fb      	ldrb	r3, [r7, #3]
 8008a34:	461a      	mov	r2, r3
 8008a36:	2127      	movs	r1, #39	; 0x27
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f008 fc6d 	bl	8011318 <VL53LX_WrByte>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 8008a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <VL53LX_set_firmware_enable_register>:


VL53LX_Error VL53LX_set_firmware_enable_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b084      	sub	sp, #16
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	460b      	mov	r3, r1
 8008a58:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status         = VL53LX_ERROR_NONE;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	3318      	adds	r3, #24
 8008a62:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	78fa      	ldrb	r2, [r7, #3]
 8008a68:	f883 2362 	strb.w	r2, [r3, #866]	; 0x362

	status = VL53LX_WrByte(
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	f893 3362 	ldrb.w	r3, [r3, #866]	; 0x362
 8008a72:	461a      	mov	r2, r3
 8008a74:	2185      	movs	r1, #133	; 0x85
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f008 fc4e 	bl	8011318 <VL53LX_WrByte>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53LX_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 8008a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3710      	adds	r7, #16
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <VL53LX_enable_firmware>:

VL53LX_Error VL53LX_enable_firmware(
	VL53LX_DEV    Dev)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008a94:	2300      	movs	r3, #0
 8008a96:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x01);
 8008a98:	2101      	movs	r1, #1
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f7ff ffd7 	bl	8008a4e <VL53LX_set_firmware_enable_register>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8008aa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <VL53LX_disable_firmware>:


VL53LX_Error VL53LX_disable_firmware(
	VL53LX_DEV    Dev)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x00);
 8008abc:	2100      	movs	r1, #0
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f7ff ffc5 	bl	8008a4e <VL53LX_set_firmware_enable_register>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8008ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <VL53LX_set_powerforce_register>:


VL53LX_Error VL53LX_set_powerforce_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	460b      	mov	r3, r1
 8008ade:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	3318      	adds	r3, #24
 8008ae8:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	78fa      	ldrb	r2, [r7, #3]
 8008aee:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360

	status = VL53LX_WrByte(
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	f893 3360 	ldrb.w	r3, [r3, #864]	; 0x360
 8008af8:	461a      	mov	r2, r3
 8008afa:	2183      	movs	r1, #131	; 0x83
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f008 fc0b 	bl	8011318 <VL53LX_WrByte>
 8008b02:	4603      	mov	r3, r0
 8008b04:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 8008b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <VL53LX_enable_powerforce>:


VL53LX_Error VL53LX_enable_powerforce(
	VL53LX_DEV    Dev)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b084      	sub	sp, #16
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x01);
 8008b1e:	2101      	movs	r1, #1
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f7ff ffd7 	bl	8008ad4 <VL53LX_set_powerforce_register>
 8008b26:	4603      	mov	r3, r0
 8008b28:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8008b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <VL53LX_disable_powerforce>:


VL53LX_Error VL53LX_disable_powerforce(
	VL53LX_DEV    Dev)
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b084      	sub	sp, #16
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x00);
 8008b42:	2100      	movs	r1, #0
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f7ff ffc5 	bl	8008ad4 <VL53LX_set_powerforce_register>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8008b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <VL53LX_clear_interrupt>:


VL53LX_Error VL53LX_clear_interrupt(
	VL53LX_DEV    Dev)
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b084      	sub	sp, #16
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008b62:	2300      	movs	r3, #0
 8008b64:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	3318      	adds	r3, #24
 8008b6a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53LX_CLEAR_RANGE_INT;
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363

	status = VL53LX_WrByte(
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	2186      	movs	r1, #134	; 0x86
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f008 fbca 	bl	8011318 <VL53LX_WrByte>
 8008b84:	4603      	mov	r3, r0
 8008b86:	73fb      	strb	r3, [r7, #15]
				VL53LX_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 8008b88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3710      	adds	r7, #16
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <VL53LX_calc_macro_period_us>:


uint32_t VL53LX_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53LX_p_005)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	460a      	mov	r2, r1
 8008b9e:	80fb      	strh	r3, [r7, #6]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	617b      	str	r3, [r7, #20]
	uint8_t   VL53LX_p_030   = 0;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 8008bac:	2300      	movs	r3, #0
 8008bae:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53LX_calc_pll_period_us(fast_osc_frequency);
 8008bb0:	88fb      	ldrh	r3, [r7, #6]
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f002 fe9b 	bl	800b8ee <VL53LX_calc_pll_period_us>
 8008bb8:	6178      	str	r0, [r7, #20]



	VL53LX_p_030 = VL53LX_decode_vcsel_period(VL53LX_p_005);
 8008bba:	797b      	ldrb	r3, [r7, #5]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f003 fa69 	bl	800c094 <VL53LX_decode_vcsel_period>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 8008bc6:	697a      	ldr	r2, [r7, #20]
 8008bc8:	4613      	mov	r3, r2
 8008bca:	00db      	lsls	r3, r3, #3
 8008bcc:	4413      	add	r3, r2
 8008bce:	021b      	lsls	r3, r3, #8
 8008bd0:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53LX_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	099b      	lsrs	r3, r3, #6
 8008bd6:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53LX_p_030;
 8008bd8:	7cfa      	ldrb	r2, [r7, #19]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	fb02 f303 	mul.w	r3, r2, r3
 8008be0:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	099b      	lsrs	r3, r3, #6
 8008be6:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 8008be8:	68fb      	ldr	r3, [r7, #12]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3718      	adds	r7, #24
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
	...

08008bf4 <VL53LX_calc_range_ignore_threshold>:
uint16_t VL53LX_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b089      	sub	sp, #36	; 0x24
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	4608      	mov	r0, r1
 8008bfe:	4611      	mov	r1, r2
 8008c00:	461a      	mov	r2, r3
 8008c02:	4603      	mov	r3, r0
 8008c04:	817b      	strh	r3, [r7, #10]
 8008c06:	460b      	mov	r3, r1
 8008c08:	813b      	strh	r3, [r7, #8]
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 8008c12:	2300      	movs	r3, #0
 8008c14:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 8008c16:	2300      	movs	r3, #0
 8008c18:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	011b      	lsls	r3, r3, #4
 8008c26:	4a23      	ldr	r2, [pc, #140]	; (8008cb4 <VL53LX_calc_range_ignore_threshold+0xc0>)
 8008c28:	fb82 1203 	smull	r1, r2, r2, r3
 8008c2c:	1192      	asrs	r2, r2, #6
 8008c2e:	17db      	asrs	r3, r3, #31
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 8008c34:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	da03      	bge.n	8008c44 <VL53LX_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 8008c3c:	897b      	ldrh	r3, [r7, #10]
 8008c3e:	425b      	negs	r3, r3
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 8008c44:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	da03      	bge.n	8008c54 <VL53LX_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 8008c4c:	893b      	ldrh	r3, [r7, #8]
 8008c4e:	425b      	negs	r3, r3
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 8008c54:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8008c58:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	015b      	lsls	r3, r3, #5
 8008c60:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	4a13      	ldr	r2, [pc, #76]	; (8008cb4 <VL53LX_calc_range_ignore_threshold+0xc0>)
 8008c66:	fb82 1203 	smull	r1, r2, r2, r3
 8008c6a:	1192      	asrs	r2, r2, #6
 8008c6c:	17db      	asrs	r3, r3, #31
 8008c6e:	1ad3      	subs	r3, r2, r3
 8008c70:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 8008c72:	697a      	ldr	r2, [r7, #20]
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	4413      	add	r3, r2
 8008c78:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 8008c7a:	79fa      	ldrb	r2, [r7, #7]
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	fb02 f303 	mul.w	r3, r2, r3
 8008c82:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	3310      	adds	r3, #16
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	da00      	bge.n	8008c8e <VL53LX_calc_range_ignore_threshold+0x9a>
 8008c8c:	331f      	adds	r3, #31
 8008c8e:	115b      	asrs	r3, r3, #5
 8008c90:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c98:	db03      	blt.n	8008ca2 <VL53LX_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 8008c9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008c9e:	83fb      	strh	r3, [r7, #30]
 8008ca0:	e001      	b.n	8008ca6 <VL53LX_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 8008ca6:	8bfb      	ldrh	r3, [r7, #30]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3724      	adds	r7, #36	; 0x24
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr
 8008cb4:	10624dd3 	.word	0x10624dd3

08008cb8 <VL53LX_calc_timeout_mclks>:


uint32_t VL53LX_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d102      	bne.n	8008cd2 <VL53LX_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	60fb      	str	r3, [r7, #12]
 8008cd0:	e008      	b.n	8008ce4 <VL53LX_calc_timeout_mclks+0x2c>
	else
		timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	031a      	lsls	r2, r3, #12
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	085b      	lsrs	r3, r3, #1
 8008cda:	441a      	add	r2, r3
		timeout_mclks   =
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ce2:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3714      	adds	r7, #20
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr

08008cf2 <VL53LX_calc_encoded_timeout>:


uint16_t VL53LX_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b084      	sub	sp, #16
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 8008d00:	2300      	movs	r3, #0
 8008d02:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53LX_calc_timeout_mclks(timeout_us, macro_period_us);
 8008d04:	6839      	ldr	r1, [r7, #0]
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f7ff ffd6 	bl	8008cb8 <VL53LX_calc_timeout_mclks>
 8008d0c:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53LX_encode_timeout(timeout_mclks);
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f000 f885 	bl	8008e1e <VL53LX_encode_timeout>
 8008d14:	4603      	mov	r3, r0
 8008d16:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 8008d18:	897b      	ldrh	r3, [r7, #10]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <VL53LX_calc_timeout_us>:


uint32_t VL53LX_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 8008d22:	b4f0      	push	{r4, r5, r6, r7}
 8008d24:	b086      	sub	sp, #24
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	617b      	str	r3, [r7, #20]
	uint64_t tmp            = 0;
 8008d30:	f04f 0200 	mov.w	r2, #0
 8008d34:	f04f 0300 	mov.w	r3, #0
 8008d38:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f04f 0100 	mov.w	r1, #0
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	461a      	mov	r2, r3
 8008d48:	f04f 0300 	mov.w	r3, #0
 8008d4c:	fb02 fc01 	mul.w	ip, r2, r1
 8008d50:	fb00 f603 	mul.w	r6, r0, r3
 8008d54:	4466      	add	r6, ip
 8008d56:	fba0 2302 	umull	r2, r3, r0, r2
 8008d5a:	18f1      	adds	r1, r6, r3
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008d62:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 8008d66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d6a:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 8008d6e:	f143 0500 	adc.w	r5, r3, #0
 8008d72:	e9c7 4502 	strd	r4, r5, [r7, #8]
	tmp  = tmp >> 12;
 8008d76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d7a:	f04f 0200 	mov.w	r2, #0
 8008d7e:	f04f 0300 	mov.w	r3, #0
 8008d82:	0b02      	lsrs	r2, r0, #12
 8008d84:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8008d88:	0b0b      	lsrs	r3, r1, #12
 8008d8a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 8008d92:	697b      	ldr	r3, [r7, #20]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3718      	adds	r7, #24
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bcf0      	pop	{r4, r5, r6, r7}
 8008d9c:	4770      	bx	lr
	...

08008da0 <VL53LX_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53LX_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	460b      	mov	r3, r1
 8008daa:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 8008dac:	2300      	movs	r3, #0
 8008dae:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 8008db0:	2300      	movs	r3, #0
 8008db2:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 8008db4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 8008db8:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 8008dba:	4413      	add	r3, r2
 8008dbc:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	da02      	bge.n	8008dca <VL53LX_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	60fb      	str	r3, [r7, #12]
 8008dc8:	e005      	b.n	8008dd6 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008dd0:	db01      	blt.n	8008dd6 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 8008dd2:	4b05      	ldr	r3, [pc, #20]	; (8008de8 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x48>)
 8008dd4:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 8008dda:	68bb      	ldr	r3, [r7, #8]

}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3714      	adds	r7, #20
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr
 8008de8:	0003ffff 	.word	0x0003ffff

08008dec <VL53LX_calc_decoded_timeout_us>:

uint32_t VL53LX_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	4603      	mov	r3, r0
 8008df4:	6039      	str	r1, [r7, #0]
 8008df6:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53LX_decode_timeout(timeout_encoded);
 8008e00:	88fb      	ldrh	r3, [r7, #6]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f000 f837 	bl	8008e76 <VL53LX_decode_timeout>
 8008e08:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53LX_calc_timeout_us(timeout_mclks, macro_period_us);
 8008e0a:	6839      	ldr	r1, [r7, #0]
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f7ff ff88 	bl	8008d22 <VL53LX_calc_timeout_us>
 8008e12:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 8008e14:	68bb      	ldr	r3, [r7, #8]
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <VL53LX_encode_timeout>:


uint16_t VL53LX_encode_timeout(uint32_t timeout_mclks)
{
 8008e1e:	b480      	push	{r7}
 8008e20:	b087      	sub	sp, #28
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 8008e26:	2300      	movs	r3, #0
 8008e28:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d017      	beq.n	8008e68 <VL53LX_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	3b01      	subs	r3, #1
 8008e3c:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008e3e:	e005      	b.n	8008e4c <VL53LX_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	085b      	lsrs	r3, r3, #1
 8008e44:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8008e46:	89fb      	ldrh	r3, [r7, #14]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1f4      	bne.n	8008e40 <VL53LX_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8008e56:	89fb      	ldrh	r3, [r7, #14]
 8008e58:	021b      	lsls	r3, r3, #8
 8008e5a:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8008e64:	4413      	add	r3, r2
 8008e66:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8008e68:	8afb      	ldrh	r3, [r7, #22]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	371c      	adds	r7, #28
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr

08008e76 <VL53LX_decode_timeout>:


uint32_t VL53LX_decode_timeout(uint16_t encoded_timeout)
{
 8008e76:	b480      	push	{r7}
 8008e78:	b085      	sub	sp, #20
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 8008e80:	2300      	movs	r3, #0
 8008e82:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008e84:	88fb      	ldrh	r3, [r7, #6]
 8008e86:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8008e88:	88fa      	ldrh	r2, [r7, #6]
 8008e8a:	0a12      	lsrs	r2, r2, #8
 8008e8c:	b292      	uxth	r2, r2
 8008e8e:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008e90:	3301      	adds	r3, #1
 8008e92:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8008e94:	68fb      	ldr	r3, [r7, #12]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3714      	adds	r7, #20
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr

08008ea2 <VL53LX_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53LX_general_config_t *pgeneral,
	VL53LX_timing_config_t  *ptiming)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b088      	sub	sp, #32
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	60f8      	str	r0, [r7, #12]
 8008eaa:	60b9      	str	r1, [r7, #8]
 8008eac:	607a      	str	r2, [r7, #4]
 8008eae:	807b      	strh	r3, [r7, #2]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8008ec0:	887b      	ldrh	r3, [r7, #2]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d102      	bne.n	8008ecc <VL53LX_calc_timeout_register_values+0x2a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8008ec6:	23f1      	movs	r3, #241	; 0xf1
 8008ec8:	77fb      	strb	r3, [r7, #31]
 8008eca:	e05d      	b.n	8008f88 <VL53LX_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53LX_calc_macro_period_us(
 8008ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ece:	799a      	ldrb	r2, [r3, #6]
 8008ed0:	887b      	ldrh	r3, [r7, #2]
 8008ed2:	4611      	mov	r1, r2
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7ff fe5d 	bl	8008b94 <VL53LX_calc_macro_period_us>
 8008eda:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53LX_calc_timeout_mclks(
 8008edc:	6979      	ldr	r1, [r7, #20]
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f7ff feea 	bl	8008cb8 <VL53LX_calc_timeout_mclks>
 8008ee4:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	2bff      	cmp	r3, #255	; 0xff
 8008eea:	d901      	bls.n	8008ef0 <VL53LX_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 8008eec:	23ff      	movs	r3, #255	; 0xff
 8008eee:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 8008ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef6:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 8008ef8:	6979      	ldr	r1, [r7, #20]
 8008efa:	68b8      	ldr	r0, [r7, #8]
 8008efc:	f7ff fef9 	bl	8008cf2 <VL53LX_calc_encoded_timeout>
 8008f00:	4603      	mov	r3, r0
 8008f02:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008f04:	8a7b      	ldrh	r3, [r7, #18]
 8008f06:	0a1b      	lsrs	r3, r3, #8
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 8008f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0e:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008f10:	8a7b      	ldrh	r3, [r7, #18]
 8008f12:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 8008f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f16:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 8008f18:	6979      	ldr	r1, [r7, #20]
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7ff fee9 	bl	8008cf2 <VL53LX_calc_encoded_timeout>
 8008f20:	4603      	mov	r3, r0
 8008f22:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008f24:	8a7b      	ldrh	r3, [r7, #18]
 8008f26:	0a1b      	lsrs	r3, r3, #8
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 8008f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008f30:	8a7b      	ldrh	r3, [r7, #18]
 8008f32:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 8008f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f36:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53LX_calc_macro_period_us(
 8008f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3a:	7a5a      	ldrb	r2, [r3, #9]
 8008f3c:	887b      	ldrh	r3, [r7, #2]
 8008f3e:	4611      	mov	r1, r2
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7ff fe27 	bl	8008b94 <VL53LX_calc_macro_period_us>
 8008f46:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53LX_calc_encoded_timeout(
 8008f48:	6979      	ldr	r1, [r7, #20]
 8008f4a:	68b8      	ldr	r0, [r7, #8]
 8008f4c:	f7ff fed1 	bl	8008cf2 <VL53LX_calc_encoded_timeout>
 8008f50:	4603      	mov	r3, r0
 8008f52:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008f54:	8a7b      	ldrh	r3, [r7, #18]
 8008f56:	0a1b      	lsrs	r3, r3, #8
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 8008f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f5e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008f60:	8a7b      	ldrh	r3, [r7, #18]
 8008f62:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 8008f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f66:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53LX_calc_encoded_timeout(
 8008f68:	6979      	ldr	r1, [r7, #20]
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f7ff fec1 	bl	8008cf2 <VL53LX_calc_encoded_timeout>
 8008f70:	4603      	mov	r3, r0
 8008f72:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008f74:	8a7b      	ldrh	r3, [r7, #18]
 8008f76:	0a1b      	lsrs	r3, r3, #8
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 8008f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008f80:	8a7b      	ldrh	r3, [r7, #18]
 8008f82:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 8008f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f86:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 8008f88:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3720      	adds	r7, #32
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <VL53LX_hist_copy_and_scale_ambient_info>:


VL53LX_Error  VL53LX_hist_copy_and_scale_ambient_info(
	VL53LX_zone_hist_info_t       *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 8008f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f98:	b08b      	sub	sp, #44	; 0x2c
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
 8008f9e:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27

	int64_t  evts              = 0;
 8008fa6:	f04f 0000 	mov.w	r0, #0
 8008faa:	f04f 0100 	mov.w	r1, #0
 8008fae:	e9c7 0106 	strd	r0, r1, [r7, #24]
	int64_t  tmpi              = 0;
 8008fb2:	f04f 0000 	mov.w	r0, #0
 8008fb6:	f04f 0100 	mov.w	r1, #0
 8008fba:	e9c7 0104 	strd	r0, r1, [r7, #16]
	int64_t  tmpo              = 0;
 8008fbe:	f04f 0000 	mov.w	r0, #0
 8008fc2:	f04f 0100 	mov.w	r1, #0
 8008fc6:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 8008fca:	6879      	ldr	r1, [r7, #4]
 8008fcc:	8849      	ldrh	r1, [r1, #2]
 8008fce:	2900      	cmp	r1, #0
 8008fd0:	d103      	bne.n	8008fda <VL53LX_hist_copy_and_scale_ambient_info+0x46>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8008fd2:	23f1      	movs	r3, #241	; 0xf1
 8008fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008fd8:	e0a5      	b.n	8009126 <VL53LX_hist_copy_and_scale_ambient_info+0x192>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 8008fda:	6879      	ldr	r1, [r7, #4]
 8008fdc:	7849      	ldrb	r1, [r1, #1]
 8008fde:	2900      	cmp	r1, #0
 8008fe0:	f000 80a1 	beq.w	8009126 <VL53LX_hist_copy_and_scale_ambient_info+0x192>
			podata->number_of_ambient_bins == 0) {
 8008fe4:	6839      	ldr	r1, [r7, #0]
 8008fe6:	7ac9      	ldrb	r1, [r1, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 8008fe8:	2900      	cmp	r1, #0
 8008fea:	f040 809c 	bne.w	8009126 <VL53LX_hist_copy_and_scale_ambient_info+0x192>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 8008fee:	6839      	ldr	r1, [r7, #0]
 8008ff0:	f8d1 1088 	ldr.w	r1, [r1, #136]	; 0x88
 8008ff4:	4608      	mov	r0, r1
 8008ff6:	f04f 0100 	mov.w	r1, #0
 8008ffa:	f110 0a01 	adds.w	sl, r0, #1
 8008ffe:	f141 0b00 	adc.w	fp, r1, #0
 8009002:	e9c7 ab02 	strd	sl, fp, [r7, #8]
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 8009006:	6839      	ldr	r1, [r7, #0]
 8009008:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
 800900c:	b288      	uxth	r0, r1
 800900e:	f04f 0100 	mov.w	r1, #0
			tmpo   *=
 8009012:	68fe      	ldr	r6, [r7, #12]
 8009014:	fb00 fc06 	mul.w	ip, r0, r6
 8009018:	68be      	ldr	r6, [r7, #8]
 800901a:	fb01 f606 	mul.w	r6, r1, r6
 800901e:	44b4      	add	ip, r6
 8009020:	68be      	ldr	r6, [r7, #8]
 8009022:	fba6 0100 	umull	r0, r1, r6, r0
 8009026:	eb0c 0601 	add.w	r6, ip, r1
 800902a:	4631      	mov	r1, r6
 800902c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8009030:	e9c7 0102 	strd	r0, r1, [r7, #8]

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 8009034:	6879      	ldr	r1, [r7, #4]
 8009036:	6889      	ldr	r1, [r1, #8]
 8009038:	4608      	mov	r0, r1
 800903a:	f04f 0100 	mov.w	r1, #0
 800903e:	1c44      	adds	r4, r0, #1
 8009040:	f141 0500 	adc.w	r5, r1, #0
 8009044:	e9c7 4504 	strd	r4, r5, [r7, #16]
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 8009048:	6879      	ldr	r1, [r7, #4]
 800904a:	8849      	ldrh	r1, [r1, #2]
 800904c:	b288      	uxth	r0, r1
 800904e:	f04f 0100 	mov.w	r1, #0
			tmpi   *=
 8009052:	697c      	ldr	r4, [r7, #20]
 8009054:	fb00 f504 	mul.w	r5, r0, r4
 8009058:	693c      	ldr	r4, [r7, #16]
 800905a:	fb01 f404 	mul.w	r4, r1, r4
 800905e:	442c      	add	r4, r5
 8009060:	693d      	ldr	r5, [r7, #16]
 8009062:	fba5 0100 	umull	r0, r1, r5, r0
 8009066:	440c      	add	r4, r1
 8009068:	4621      	mov	r1, r4
 800906a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800906e:	e9c7 0104 	strd	r0, r1, [r7, #16]

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 8009072:	6879      	ldr	r1, [r7, #4]
 8009074:	68c9      	ldr	r1, [r1, #12]
 8009076:	4608      	mov	r0, r1
 8009078:	ea4f 71e0 	mov.w	r1, r0, asr #31
			evts  = tmpo *
 800907c:	68fc      	ldr	r4, [r7, #12]
 800907e:	fb00 f504 	mul.w	r5, r0, r4
 8009082:	68bc      	ldr	r4, [r7, #8]
 8009084:	fb01 f404 	mul.w	r4, r1, r4
 8009088:	442c      	add	r4, r5
 800908a:	68bd      	ldr	r5, [r7, #8]
 800908c:	fba5 0100 	umull	r0, r1, r5, r0
 8009090:	440c      	add	r4, r1
 8009092:	4621      	mov	r1, r4
 8009094:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8009098:	e9c7 0106 	strd	r0, r1, [r7, #24]
			evts += (tmpi/2);
 800909c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80090a0:	0fcc      	lsrs	r4, r1, #31
 80090a2:	f04f 0500 	mov.w	r5, #0
 80090a6:	1822      	adds	r2, r4, r0
 80090a8:	eb45 0301 	adc.w	r3, r5, r1
 80090ac:	f04f 0000 	mov.w	r0, #0
 80090b0:	f04f 0100 	mov.w	r1, #0
 80090b4:	0850      	lsrs	r0, r2, #1
 80090b6:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 80090ba:	1059      	asrs	r1, r3, #1
 80090bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090c0:	eb12 0800 	adds.w	r8, r2, r0
 80090c4:	eb43 0901 	adc.w	r9, r3, r1
 80090c8:	e9c7 8906 	strd	r8, r9, [r7, #24]


			if (tmpi != 0)
 80090cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	d009      	beq.n	80090e8 <VL53LX_hist_copy_and_scale_ambient_info+0x154>
				evts = do_division_s(evts, tmpi);
 80090d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80090d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80090dc:	f7f7 f8d0 	bl	8000280 <__aeabi_ldivmod>
 80090e0:	4602      	mov	r2, r0
 80090e2:	460b      	mov	r3, r1
 80090e4:	e9c7 2306 	strd	r2, r3, [r7, #24]

			podata->ambient_events_sum = (int32_t)evts;
 80090e8:	69ba      	ldr	r2, [r7, #24]
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0



			podata->VL53LX_p_028 =
				podata->ambient_events_sum;
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			podata->VL53LX_p_028 =
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53LX_p_028 +=
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	7852      	ldrb	r2, [r2, #1]
 8009106:	0852      	lsrs	r2, r2, #1
 8009108:	b2d2      	uxtb	r2, r2
			podata->VL53LX_p_028 +=
 800910a:	441a      	add	r2, r3
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53LX_p_028 /=
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	7852      	ldrb	r2, [r2, #1]
			podata->VL53LX_p_028 /=
 800911c:	fb93 f2f2 	sdiv	r2, r3, r2
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 8009126:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800912a:	4618      	mov	r0, r3
 800912c:	372c      	adds	r7, #44	; 0x2c
 800912e:	46bd      	mov	sp, r7
 8009130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009134 <VL53LX_hist_get_bin_sequence_config>:


void  VL53LX_hist_get_bin_sequence_config(
	VL53LX_DEV                     Dev,
	VL53LX_histogram_bin_data_t   *pdata)
{
 8009134:	b480      	push	{r7}
 8009136:	b087      	sub	sp, #28
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	3318      	adds	r3, #24
 8009142:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 8009144:	2300      	movs	r3, #0
 8009146:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 8009148:	2300      	movs	r3, #0
 800914a:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 800914c:	2300      	movs	r3, #0
 800914e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	f8b3 32fa 	ldrh.w	r3, [r3, #762]	; 0x2fa
	amb_thresh_low  = 1024 *
 8009156:	029b      	lsls	r3, r3, #10
 8009158:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
	amb_thresh_high = 1024 *
 8009160:	029b      	lsls	r3, r3, #10
 8009162:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800916a:	f003 0301 	and.w	r3, r3, #1
 800916e:	2b00      	cmp	r3, #0
 8009170:	f040 8095 	bne.w	800929e <VL53LX_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	f893 32ed 	ldrb.w	r3, [r3, #749]	; 0x2ed
		pdata->bin_seq[5] =
 800917a:	091b      	lsrs	r3, r3, #4
 800917c:	b2da      	uxtb	r2, r3
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	f893 32ed 	ldrb.w	r3, [r3, #749]	; 0x2ed
 8009188:	f003 030f 	and.w	r3, r3, #15
 800918c:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	f893 32ec 	ldrb.w	r3, [r3, #748]	; 0x2ec
		pdata->bin_seq[3] =
 8009198:	091b      	lsrs	r3, r3, #4
 800919a:	b2da      	uxtb	r2, r3
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	f893 32ec 	ldrb.w	r3, [r3, #748]	; 0x2ec
 80091a6:	f003 030f 	and.w	r3, r3, #15
 80091aa:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	f893 32eb 	ldrb.w	r3, [r3, #747]	; 0x2eb
		pdata->bin_seq[1] =
 80091b6:	091b      	lsrs	r3, r3, #4
 80091b8:	b2da      	uxtb	r2, r3
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	f893 32eb 	ldrb.w	r3, [r3, #747]	; 0x2eb
 80091c4:	f003 030f 	and.w	r3, r3, #15
 80091c8:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80091d4:	68ba      	ldr	r2, [r7, #8]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	da2c      	bge.n	8009234 <VL53LX_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	f893 32f5 	ldrb.w	r3, [r3, #757]	; 0x2f5
			pdata->bin_seq[5] =
 80091e0:	091b      	lsrs	r3, r3, #4
 80091e2:	b2da      	uxtb	r2, r3
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	f893 32f5 	ldrb.w	r3, [r3, #757]	; 0x2f5
			& 0x0F;
 80091ee:	f003 030f 	and.w	r3, r3, #15
 80091f2:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
			pdata->bin_seq[3] =
 80091fe:	091b      	lsrs	r3, r3, #4
 8009200:	b2da      	uxtb	r2, r3
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
			& 0x0F;
 800920c:	f003 030f 	and.w	r3, r3, #15
 8009210:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	f893 32f3 	ldrb.w	r3, [r3, #755]	; 0x2f3
			pdata->bin_seq[1] =
 800921c:	091b      	lsrs	r3, r3, #4
 800921e:	b2da      	uxtb	r2, r3
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	f893 32f3 	ldrb.w	r3, [r3, #755]	; 0x2f3
			& 0x0F;
 800922a:	f003 030f 	and.w	r3, r3, #15
 800922e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	429a      	cmp	r2, r3
 800923e:	f340 80c2 	ble.w	80093c6 <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	f893 32e7 	ldrb.w	r3, [r3, #743]	; 0x2e7
			pdata->bin_seq[5] =
 8009248:	091b      	lsrs	r3, r3, #4
 800924a:	b2da      	uxtb	r2, r3
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	f893 32e7 	ldrb.w	r3, [r3, #743]	; 0x2e7
			& 0x0F;
 8009256:	f003 030f 	and.w	r3, r3, #15
 800925a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
			pdata->bin_seq[3] =
 8009266:	091b      	lsrs	r3, r3, #4
 8009268:	b2da      	uxtb	r2, r3
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
			& 0x0F;
 8009274:	f003 030f 	and.w	r3, r3, #15
 8009278:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
			pdata->bin_seq[1] =
 8009284:	091b      	lsrs	r3, r3, #4
 8009286:	b2da      	uxtb	r2, r3
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
			& 0x0F;
 8009292:	f003 030f 	and.w	r3, r3, #15
 8009296:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	731a      	strb	r2, [r3, #12]
 800929c:	e093      	b.n	80093c6 <VL53LX_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	f893 32f1 	ldrb.w	r3, [r3, #753]	; 0x2f1
			& 0x0F;
 80092a4:	f003 030f 	and.w	r3, r3, #15
 80092a8:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
			& 0x0F;
 80092b4:	f003 030f 	and.w	r3, r3, #15
 80092b8:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
		pdata->bin_seq[3] =
 80092c4:	091b      	lsrs	r3, r3, #4
 80092c6:	b2da      	uxtb	r2, r3
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	f893 32ef 	ldrb.w	r3, [r3, #751]	; 0x2ef
 80092d2:	f003 030f 	and.w	r3, r3, #15
 80092d6:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	f893 32ee 	ldrb.w	r3, [r3, #750]	; 0x2ee
		pdata->bin_seq[1] =
 80092e2:	091b      	lsrs	r3, r3, #4
 80092e4:	b2da      	uxtb	r2, r3
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	f893 32ee 	ldrb.w	r3, [r3, #750]	; 0x2ee
			& 0x0F;
 80092f0:	f003 030f 	and.w	r3, r3, #15
 80092f4:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009300:	68ba      	ldr	r2, [r7, #8]
 8009302:	429a      	cmp	r2, r3
 8009304:	da2c      	bge.n	8009360 <VL53LX_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
			pdata->bin_seq[5] =
 800930c:	091b      	lsrs	r3, r3, #4
 800930e:	b2da      	uxtb	r2, r3
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
			& 0x0F;
 800931a:	f003 030f 	and.w	r3, r3, #15
 800931e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	f893 32f7 	ldrb.w	r3, [r3, #759]	; 0x2f7
			pdata->bin_seq[3] =
 800932a:	091b      	lsrs	r3, r3, #4
 800932c:	b2da      	uxtb	r2, r3
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	f893 32f7 	ldrb.w	r3, [r3, #759]	; 0x2f7
			& 0x0F;
 8009338:	f003 030f 	and.w	r3, r3, #15
 800933c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	f893 32f6 	ldrb.w	r3, [r3, #758]	; 0x2f6
			pdata->bin_seq[1] =
 8009348:	091b      	lsrs	r3, r3, #4
 800934a:	b2da      	uxtb	r2, r3
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	f893 32f6 	ldrb.w	r3, [r3, #758]	; 0x2f6
			& 0x0F;
 8009356:	f003 030f 	and.w	r3, r3, #15
 800935a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009366:	68fa      	ldr	r2, [r7, #12]
 8009368:	429a      	cmp	r2, r3
 800936a:	dd2c      	ble.n	80093c6 <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	f893 32ea 	ldrb.w	r3, [r3, #746]	; 0x2ea
			pdata->bin_seq[5] =
 8009372:	091b      	lsrs	r3, r3, #4
 8009374:	b2da      	uxtb	r2, r3
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	f893 32ea 	ldrb.w	r3, [r3, #746]	; 0x2ea
			& 0x0F;
 8009380:	f003 030f 	and.w	r3, r3, #15
 8009384:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	f893 32e9 	ldrb.w	r3, [r3, #745]	; 0x2e9
			pdata->bin_seq[3] =
 8009390:	091b      	lsrs	r3, r3, #4
 8009392:	b2da      	uxtb	r2, r3
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	f893 32e9 	ldrb.w	r3, [r3, #745]	; 0x2e9
			& 0x0F;
 800939e:	f003 030f 	and.w	r3, r3, #15
 80093a2:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
			pdata->bin_seq[1] =
 80093ae:	091b      	lsrs	r3, r3, #4
 80093b0:	b2da      	uxtb	r2, r3
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
			& 0x0F;
 80093bc:	f003 030f 	and.w	r3, r3, #15
 80093c0:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 80093c6:	2300      	movs	r3, #0
 80093c8:	75fb      	strb	r3, [r7, #23]
 80093ca:	e007      	b.n	80093dc <VL53LX_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 80093cc:	7dfb      	ldrb	r3, [r7, #23]
 80093ce:	683a      	ldr	r2, [r7, #0]
 80093d0:	4413      	add	r3, r2
 80093d2:	2201      	movs	r2, #1
 80093d4:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 80093d6:	7dfb      	ldrb	r3, [r7, #23]
 80093d8:	3301      	adds	r3, #1
 80093da:	75fb      	strb	r3, [r7, #23]
 80093dc:	7dfb      	ldrb	r3, [r7, #23]
 80093de:	2b05      	cmp	r3, #5
 80093e0:	d9f4      	bls.n	80093cc <VL53LX_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 80093e2:	bf00      	nop
 80093e4:	bf00      	nop
 80093e6:	371c      	adds	r7, #28
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <VL53LX_hist_phase_consistency_check>:
VL53LX_Error  VL53LX_hist_phase_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_results_t      *prange_curr)
{
 80093f0:	b590      	push	{r4, r7, lr}
 80093f2:	b093      	sub	sp, #76	; 0x4c
 80093f4:	af04      	add	r7, sp, #16
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	607a      	str	r2, [r7, #4]
 80093fc:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80093fe:	2300      	movs	r3, #0
 8009400:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53LX_LLDriverData_t *pdev =
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	3318      	adds	r3, #24
 8009408:	62fb      	str	r3, [r7, #44]	; 0x2c
		VL53LXDevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 800940a:	2300      	movs	r3, #0
 800940c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t   p = 0;
 8009410:	2300      	movs	r3, #0
 8009412:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint16_t  phase_delta      = 0;
 8009416:	2300      	movs	r3, #0
 8009418:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t  phase_tolerance  = 0;
 800941a:	2300      	movs	r3, #0
 800941c:	857b      	strh	r3, [r7, #42]	; 0x2a

	int32_t   events_delta     = 0;
 800941e:	2300      	movs	r3, #0
 8009420:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 8009422:	2300      	movs	r3, #0
 8009424:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53LX_DeviceError  range_status = 0;
 8009426:	2300      	movs	r3, #0
 8009428:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 800942a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8009430:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 8009434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009436:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 800943a:	84fb      	strh	r3, [r7, #38]	; 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 800943c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943e:	f8b3 323a 	ldrh.w	r3, [r3, #570]	; 0x23a
 8009442:	84bb      	strh	r3, [r7, #36]	; 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 8009444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009446:	f893 3236 	ldrb.w	r3, [r3, #566]	; 0x236
 800944a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	phase_tolerance = (uint16_t)pht;
 800944e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009452:	857b      	strh	r3, [r7, #42]	; 0x2a
	phase_tolerance = phase_tolerance << 8;
 8009454:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009456:	021b      	lsls	r3, r3, #8
 8009458:	857b      	strh	r3, [r7, #42]	; 0x2a



	if (prange_prev->rd_device_state !=
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	785b      	ldrb	r3, [r3, #1]
 800945e:	2b07      	cmp	r3, #7
 8009460:	d006      	beq.n	8009470 <VL53LX_hist_phase_consistency_check+0x80>
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	785b      	ldrb	r3, [r3, #1]
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
 8009466:	2b08      	cmp	r3, #8
 8009468:	d002      	beq.n	8009470 <VL53LX_hist_phase_consistency_check+0x80>
				VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 800946a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800946e:	e0ec      	b.n	800964a <VL53LX_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 8009470:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009472:	2b00      	cmp	r3, #0
 8009474:	d102      	bne.n	800947c <VL53LX_hist_phase_consistency_check+0x8c>
		return status;
 8009476:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800947a:	e0e6      	b.n	800964a <VL53LX_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800947c:	2300      	movs	r3, #0
 800947e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8009482:	e0d9      	b.n	8009638 <VL53LX_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8009484:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009488:	683a      	ldr	r2, [r7, #0]
 800948a:	214c      	movs	r1, #76	; 0x4c
 800948c:	fb01 f303 	mul.w	r3, r1, r3
 8009490:	4413      	add	r3, r2
 8009492:	335e      	adds	r3, #94	; 0x5e
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	2b09      	cmp	r3, #9
 8009498:	d00b      	beq.n	80094b2 <VL53LX_hist_phase_consistency_check+0xc2>
			VL53LX_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53LX_p_003[lc].range_status ==
 800949a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800949e:	683a      	ldr	r2, [r7, #0]
 80094a0:	214c      	movs	r1, #76	; 0x4c
 80094a2:	fb01 f303 	mul.w	r3, r1, r3
 80094a6:	4413      	add	r3, r2
 80094a8:	335e      	adds	r3, #94	; 0x5e
 80094aa:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 80094ac:	2b13      	cmp	r3, #19
 80094ae:	f040 80bd 	bne.w	800962c <VL53LX_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	795b      	ldrb	r3, [r3, #5]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d10a      	bne.n	80094d0 <VL53LX_hist_phase_consistency_check+0xe0>
			prange_curr->VL53LX_p_003[lc].range_status =
 80094ba:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80094be:	683a      	ldr	r2, [r7, #0]
 80094c0:	214c      	movs	r1, #76	; 0x4c
 80094c2:	fb01 f303 	mul.w	r3, r1, r3
 80094c6:	4413      	add	r3, r2
 80094c8:	335e      	adds	r3, #94	; 0x5e
 80094ca:	2217      	movs	r2, #23
 80094cc:	701a      	strb	r2, [r3, #0]
 80094ce:	e009      	b.n	80094e4 <VL53LX_hist_phase_consistency_check+0xf4>
			VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53LX_p_003[lc].range_status =
 80094d0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80094d4:	683a      	ldr	r2, [r7, #0]
 80094d6:	214c      	movs	r1, #76	; 0x4c
 80094d8:	fb01 f303 	mul.w	r3, r1, r3
 80094dc:	4413      	add	r3, r2
 80094de:	335e      	adds	r3, #94	; 0x5e
 80094e0:	2207      	movs	r2, #7
 80094e2:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 80094e4:	2300      	movs	r3, #0
 80094e6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80094ea:	e097      	b.n	800961c <VL53LX_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 80094ec:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80094f0:	683a      	ldr	r2, [r7, #0]
 80094f2:	214c      	movs	r1, #76	; 0x4c
 80094f4:	fb01 f303 	mul.w	r3, r1, r3
 80094f8:	4413      	add	r3, r2
 80094fa:	3354      	adds	r3, #84	; 0x54
 80094fc:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011) {
 80094fe:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	4613      	mov	r3, r2
 8009506:	005b      	lsls	r3, r3, #1
 8009508:	4413      	add	r3, r2
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	4403      	add	r3, r0
 800950e:	3310      	adds	r3, #16
 8009510:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 8009512:	4299      	cmp	r1, r3
 8009514:	d915      	bls.n	8009542 <VL53LX_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011 -
 8009516:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800951a:	683a      	ldr	r2, [r7, #0]
 800951c:	214c      	movs	r1, #76	; 0x4c
 800951e:	fb01 f303 	mul.w	r3, r1, r3
 8009522:	4413      	add	r3, r2
 8009524:	3354      	adds	r3, #84	; 0x54
 8009526:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011;
 8009528:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	4613      	mov	r3, r2
 8009530:	005b      	lsls	r3, r3, #1
 8009532:	4413      	add	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4403      	add	r3, r0
 8009538:	3310      	adds	r3, #16
 800953a:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800953c:	1acb      	subs	r3, r1, r3
 800953e:	867b      	strh	r3, [r7, #50]	; 0x32
 8009540:	e014      	b.n	800956c <VL53LX_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53LX_p_003[p].VL53LX_p_011 -
 8009542:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8009546:	6879      	ldr	r1, [r7, #4]
 8009548:	4613      	mov	r3, r2
 800954a:	005b      	lsls	r3, r3, #1
 800954c:	4413      	add	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	440b      	add	r3, r1
 8009552:	3310      	adds	r3, #16
 8009554:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011;
 8009556:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800955a:	6839      	ldr	r1, [r7, #0]
 800955c:	204c      	movs	r0, #76	; 0x4c
 800955e:	fb00 f303 	mul.w	r3, r0, r3
 8009562:	440b      	add	r3, r1
 8009564:	3354      	adds	r3, #84	; 0x54
 8009566:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 8009568:	1ad3      	subs	r3, r2, r3
 800956a:	867b      	strh	r3, [r7, #50]	; 0x32
			}

			if (phase_delta < phase_tolerance) {
 800956c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800956e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009570:	429a      	cmp	r2, r3
 8009572:	d24e      	bcs.n	8009612 <VL53LX_hist_phase_consistency_check+0x222>





				if (status == VL53LX_ERROR_NONE)
 8009574:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009578:	2b00      	cmp	r3, #0
 800957a:	d125      	bne.n	80095c8 <VL53LX_hist_phase_consistency_check+0x1d8>
					status =
					VL53LX_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53LX_p_003[p]),
 800957c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					VL53LX_hist_events_consistency_check(
 8009580:	4613      	mov	r3, r2
 8009582:	005b      	lsls	r3, r3, #1
 8009584:	4413      	add	r3, r2
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	3308      	adds	r3, #8
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53LX_p_003[lc]),
 800958e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53LX_hist_events_consistency_check(
 8009592:	224c      	movs	r2, #76	; 0x4c
 8009594:	fb02 f303 	mul.w	r3, r2, r3
 8009598:	3310      	adds	r3, #16
 800959a:	683a      	ldr	r2, [r7, #0]
 800959c:	4413      	add	r3, r2
 800959e:	3304      	adds	r3, #4
 80095a0:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80095a2:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 80095a6:	f107 0217 	add.w	r2, r7, #23
 80095aa:	9203      	str	r2, [sp, #12]
 80095ac:	f107 021c 	add.w	r2, r7, #28
 80095b0:	9202      	str	r2, [sp, #8]
 80095b2:	f107 0218 	add.w	r2, r7, #24
 80095b6:	9201      	str	r2, [sp, #4]
 80095b8:	9300      	str	r3, [sp, #0]
 80095ba:	4623      	mov	r3, r4
 80095bc:	68ba      	ldr	r2, [r7, #8]
 80095be:	f000 f848 	bl	8009652 <VL53LX_hist_events_consistency_check>
 80095c2:	4603      	mov	r3, r0
 80095c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);




				if (status == VL53LX_ERROR_NONE &&
 80095c8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d115      	bne.n	80095fc <VL53LX_hist_phase_consistency_check+0x20c>
					range_status ==
 80095d0:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53LX_ERROR_NONE &&
 80095d2:	2b09      	cmp	r3, #9
 80095d4:	d112      	bne.n	80095fc <VL53LX_hist_phase_consistency_check+0x20c>
					VL53LX_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53LX_hist_merged_pulse_check(
 80095d6:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
					min_max_tolerance,
					&(prange_curr->VL53LX_p_003[lc]),
 80095da:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53LX_hist_merged_pulse_check(
 80095de:	224c      	movs	r2, #76	; 0x4c
 80095e0:	fb02 f303 	mul.w	r3, r2, r3
 80095e4:	3310      	adds	r3, #16
 80095e6:	683a      	ldr	r2, [r7, #0]
 80095e8:	4413      	add	r3, r2
 80095ea:	3304      	adds	r3, #4
 80095ec:	f107 0217 	add.w	r2, r7, #23
 80095f0:	4619      	mov	r1, r3
 80095f2:	f000 faaf 	bl	8009b54 <VL53LX_hist_merged_pulse_check>
 80095f6:	4603      	mov	r3, r0
 80095f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);

				prange_curr->VL53LX_p_003[lc].range_status =
 80095fc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009600:	7df8      	ldrb	r0, [r7, #23]
 8009602:	683a      	ldr	r2, [r7, #0]
 8009604:	214c      	movs	r1, #76	; 0x4c
 8009606:	fb01 f303 	mul.w	r3, r1, r3
 800960a:	4413      	add	r3, r2
 800960c:	335e      	adds	r3, #94	; 0x5e
 800960e:	4602      	mov	r2, r0
 8009610:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 8009612:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009616:	3301      	adds	r3, #1
 8009618:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	795b      	ldrb	r3, [r3, #5]
 8009620:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8009624:	429a      	cmp	r2, r3
 8009626:	f4ff af61 	bcc.w	80094ec <VL53LX_hist_phase_consistency_check+0xfc>
 800962a:	e000      	b.n	800962e <VL53LX_hist_phase_consistency_check+0x23e>
			continue;
 800962c:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800962e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009632:	3301      	adds	r3, #1
 8009634:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	7c9b      	ldrb	r3, [r3, #18]
 800963c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8009640:	429a      	cmp	r2, r3
 8009642:	f4ff af1f 	bcc.w	8009484 <VL53LX_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 8009646:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800964a:	4618      	mov	r0, r3
 800964c:	373c      	adds	r7, #60	; 0x3c
 800964e:	46bd      	mov	sp, r7
 8009650:	bd90      	pop	{r4, r7, pc}

08009652 <VL53LX_hist_events_consistency_check>:
	VL53LX_object_data_t        *prange_prev,
	VL53LX_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53LX_DeviceError          *prange_status)
{
 8009652:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009656:	b0a8      	sub	sp, #160	; 0xa0
 8009658:	af00      	add	r7, sp, #0
 800965a:	64ba      	str	r2, [r7, #72]	; 0x48
 800965c:	647b      	str	r3, [r7, #68]	; 0x44
 800965e:	4603      	mov	r3, r0
 8009660:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009664:	460b      	mov	r3, r1
 8009666:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800966a:	2300      	movs	r3, #0
 800966c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

	int64_t   tmpp                   = 0;
 8009670:	f04f 0200 	mov.w	r2, #0
 8009674:	f04f 0300 	mov.w	r3, #0
 8009678:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	int64_t   tmpc                   = 0;
 800967c:	f04f 0200 	mov.w	r2, #0
 8009680:	f04f 0300 	mov.w	r3, #0
 8009684:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	int64_t   events_scaler          = 0;
 8009688:	f04f 0200 	mov.w	r2, #0
 800968c:	f04f 0300 	mov.w	r3, #0
 8009690:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	int64_t   events_scaler_sq       = 0;
 8009694:	f04f 0200 	mov.w	r2, #0
 8009698:	f04f 0300 	mov.w	r3, #0
 800969c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	int64_t   c_signal_events        = 0;
 80096a0:	f04f 0200 	mov.w	r2, #0
 80096a4:	f04f 0300 	mov.w	r3, #0
 80096a8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	int64_t   c_sig_noise_sq         = 0;
 80096ac:	f04f 0200 	mov.w	r2, #0
 80096b0:	f04f 0300 	mov.w	r3, #0
 80096b4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int64_t   c_amb_noise_sq         = 0;
 80096b8:	f04f 0200 	mov.w	r2, #0
 80096bc:	f04f 0300 	mov.w	r3, #0
 80096c0:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t   p_amb_noise_sq         = 0;
 80096c4:	f04f 0200 	mov.w	r2, #0
 80096c8:	f04f 0300 	mov.w	r3, #0
 80096cc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	int32_t   p_signal_events        = 0;
 80096d0:	2300      	movs	r3, #0
 80096d2:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t  noise_sq_sum           = 0;
 80096d4:	2300      	movs	r3, #0
 80096d6:	653b      	str	r3, [r7, #80]	; 0x50



	if (event_sigma == 0) {
 80096d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d106      	bne.n	80096ee <VL53LX_hist_events_consistency_check+0x9c>
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 80096e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80096e4:	2209      	movs	r2, #9
 80096e6:	701a      	strb	r2, [r3, #0]
		return status;
 80096e8:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 80096ec:	e22d      	b.n	8009b4a <VL53LX_hist_events_consistency_check+0x4f8>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 80096ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	461a      	mov	r2, r3
 80096f4:	f04f 0300 	mov.w	r3, #0
 80096f8:	f112 0801 	adds.w	r8, r2, #1
 80096fc:	f143 0900 	adc.w	r9, r3, #0
 8009700:	e9c7 8922 	strd	r8, r9, [r7, #136]	; 0x88
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 8009704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009706:	885b      	ldrh	r3, [r3, #2]
 8009708:	b29a      	uxth	r2, r3
 800970a:	f04f 0300 	mov.w	r3, #0
 800970e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8009712:	fb02 f001 	mul.w	r0, r2, r1
 8009716:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800971a:	fb03 f101 	mul.w	r1, r3, r1
 800971e:	4408      	add	r0, r1
 8009720:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8009724:	fba1 2302 	umull	r2, r3, r1, r2
 8009728:	18c1      	adds	r1, r0, r3
 800972a:	460b      	mov	r3, r1
 800972c:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 8009730:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 8009734:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009738:	699b      	ldr	r3, [r3, #24]
 800973a:	461a      	mov	r2, r3
 800973c:	f04f 0300 	mov.w	r3, #0
 8009740:	f112 0a01 	adds.w	sl, r2, #1
 8009744:	f143 0b00 	adc.w	fp, r3, #0
 8009748:	e9c7 ab20 	strd	sl, fp, [r7, #128]	; 0x80
	tmpc *= (int64_t)prange_curr->VL53LX_p_004;
 800974c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009750:	8adb      	ldrh	r3, [r3, #22]
 8009752:	b29a      	uxth	r2, r3
 8009754:	f04f 0300 	mov.w	r3, #0
 8009758:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800975c:	fb02 f001 	mul.w	r0, r2, r1
 8009760:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009764:	fb03 f101 	mul.w	r1, r3, r1
 8009768:	4408      	add	r0, r1
 800976a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800976e:	fba1 2302 	umull	r2, r3, r1, r2
 8009772:	18c1      	adds	r1, r0, r3
 8009774:	460b      	mov	r3, r1
 8009776:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 800977a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80



	events_scaler  = tmpp * 4096;
 800977e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009782:	f04f 0000 	mov.w	r0, #0
 8009786:	f04f 0100 	mov.w	r1, #0
 800978a:	0319      	lsls	r1, r3, #12
 800978c:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 8009790:	0310      	lsls	r0, r2, #12
 8009792:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
	if (tmpc != 0) {
 8009796:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800979a:	4313      	orrs	r3, r2
 800979c:	d026      	beq.n	80097ec <VL53LX_hist_events_consistency_check+0x19a>
		events_scaler += (tmpc/2);
 800979e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80097a2:	0fcb      	lsrs	r3, r1, #31
 80097a4:	461a      	mov	r2, r3
 80097a6:	f04f 0300 	mov.w	r3, #0
 80097aa:	1814      	adds	r4, r2, r0
 80097ac:	eb43 0501 	adc.w	r5, r3, r1
 80097b0:	f04f 0200 	mov.w	r2, #0
 80097b4:	f04f 0300 	mov.w	r3, #0
 80097b8:	0862      	lsrs	r2, r4, #1
 80097ba:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 80097be:	106b      	asrs	r3, r5, #1
 80097c0:	4610      	mov	r0, r2
 80097c2:	4619      	mov	r1, r3
 80097c4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80097c8:	1814      	adds	r4, r2, r0
 80097ca:	63bc      	str	r4, [r7, #56]	; 0x38
 80097cc:	414b      	adcs	r3, r1
 80097ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097d0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80097d4:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		events_scaler  = do_division_s(events_scaler, tmpc);
 80097d8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80097dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80097e0:	f7f6 fd4e 	bl	8000280 <__aeabi_ldivmod>
 80097e4:	4602      	mov	r2, r0
 80097e6:	460b      	mov	r3, r1
 80097e8:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	}

	events_scaler_sq  = events_scaler * events_scaler;
 80097ec:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80097f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80097f4:	fb03 f102 	mul.w	r1, r3, r2
 80097f8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80097fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009800:	fb03 f302 	mul.w	r3, r3, r2
 8009804:	4419      	add	r1, r3
 8009806:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800980a:	fba3 2303 	umull	r2, r3, r3, r3
 800980e:	4419      	add	r1, r3
 8009810:	460b      	mov	r3, r1
 8009812:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 8009816:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	events_scaler_sq += 2048;
 800981a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800981e:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8009822:	6339      	str	r1, [r7, #48]	; 0x30
 8009824:	f143 0300 	adc.w	r3, r3, #0
 8009828:	637b      	str	r3, [r7, #52]	; 0x34
 800982a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800982e:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	events_scaler_sq /= 4096;
 8009832:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009836:	4610      	mov	r0, r2
 8009838:	4619      	mov	r1, r3
 800983a:	2800      	cmp	r0, #0
 800983c:	f171 0300 	sbcs.w	r3, r1, #0
 8009840:	da06      	bge.n	8009850 <VL53LX_hist_events_consistency_check+0x1fe>
 8009842:	f640 72ff 	movw	r2, #4095	; 0xfff
 8009846:	f04f 0300 	mov.w	r3, #0
 800984a:	1880      	adds	r0, r0, r2
 800984c:	eb43 0101 	adc.w	r1, r3, r1
 8009850:	f04f 0200 	mov.w	r2, #0
 8009854:	f04f 0300 	mov.w	r3, #0
 8009858:	0b02      	lsrs	r2, r0, #12
 800985a:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800985e:	130b      	asrs	r3, r1, #12
 8009860:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78



	c_signal_events  = (int64_t)prange_curr->VL53LX_p_017;
 8009864:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800986a:	461a      	mov	r2, r3
 800986c:	f04f 0300 	mov.w	r3, #0
 8009870:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	c_signal_events -= (int64_t)prange_curr->VL53LX_p_016;
 8009874:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987a:	4618      	mov	r0, r3
 800987c:	f04f 0100 	mov.w	r1, #0
 8009880:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009884:	1a14      	subs	r4, r2, r0
 8009886:	62bc      	str	r4, [r7, #40]	; 0x28
 8009888:	eb63 0301 	sbc.w	r3, r3, r1
 800988c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800988e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8009892:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	c_signal_events *= (int64_t)events_scaler;
 8009896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009898:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800989c:	fb02 f203 	mul.w	r2, r2, r3
 80098a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098a4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80098a6:	fb01 f303 	mul.w	r3, r1, r3
 80098aa:	18d1      	adds	r1, r2, r3
 80098ac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80098ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80098b2:	fba2 2303 	umull	r2, r3, r2, r3
 80098b6:	4419      	add	r1, r3
 80098b8:	460b      	mov	r3, r1
 80098ba:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80098be:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	c_signal_events += 2048;
 80098c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80098c6:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 80098ca:	6239      	str	r1, [r7, #32]
 80098cc:	f143 0300 	adc.w	r3, r3, #0
 80098d0:	627b      	str	r3, [r7, #36]	; 0x24
 80098d2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80098d6:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	c_signal_events /= 4096;
 80098da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80098de:	2a00      	cmp	r2, #0
 80098e0:	f173 0100 	sbcs.w	r1, r3, #0
 80098e4:	da06      	bge.n	80098f4 <VL53LX_hist_events_consistency_check+0x2a2>
 80098e6:	f640 70ff 	movw	r0, #4095	; 0xfff
 80098ea:	f04f 0100 	mov.w	r1, #0
 80098ee:	1812      	adds	r2, r2, r0
 80098f0:	eb41 0303 	adc.w	r3, r1, r3
 80098f4:	f04f 0000 	mov.w	r0, #0
 80098f8:	f04f 0100 	mov.w	r1, #0
 80098fc:	0b10      	lsrs	r0, r2, #12
 80098fe:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8009902:	1319      	asrs	r1, r3, #12
 8009904:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 8009908:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800990c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	c_sig_noise_sq *= (int64_t)prange_curr->VL53LX_p_017;
 8009910:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009916:	461a      	mov	r2, r3
 8009918:	f04f 0300 	mov.w	r3, #0
 800991c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800991e:	fb02 f001 	mul.w	r0, r2, r1
 8009922:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009924:	fb03 f101 	mul.w	r1, r3, r1
 8009928:	4401      	add	r1, r0
 800992a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800992c:	fba0 2302 	umull	r2, r3, r0, r2
 8009930:	4419      	add	r1, r3
 8009932:	460b      	mov	r3, r1
 8009934:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8009938:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	c_sig_noise_sq += 2048;
 800993c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009940:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8009944:	61b9      	str	r1, [r7, #24]
 8009946:	f143 0300 	adc.w	r3, r3, #0
 800994a:	61fb      	str	r3, [r7, #28]
 800994c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009950:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	c_sig_noise_sq /= 4096;
 8009954:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009958:	2a00      	cmp	r2, #0
 800995a:	f173 0100 	sbcs.w	r1, r3, #0
 800995e:	da06      	bge.n	800996e <VL53LX_hist_events_consistency_check+0x31c>
 8009960:	f640 70ff 	movw	r0, #4095	; 0xfff
 8009964:	f04f 0100 	mov.w	r1, #0
 8009968:	1812      	adds	r2, r2, r0
 800996a:	eb41 0303 	adc.w	r3, r1, r3
 800996e:	f04f 0000 	mov.w	r0, #0
 8009972:	f04f 0100 	mov.w	r1, #0
 8009976:	0b10      	lsrs	r0, r2, #12
 8009978:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800997c:	1319      	asrs	r1, r3, #12
 800997e:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 8009982:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009986:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	c_amb_noise_sq *= (int64_t)prange_curr->VL53LX_p_016;
 800998a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800998e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009990:	461a      	mov	r2, r3
 8009992:	f04f 0300 	mov.w	r3, #0
 8009996:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009998:	fb02 f001 	mul.w	r0, r2, r1
 800999c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800999e:	fb03 f101 	mul.w	r1, r3, r1
 80099a2:	4401      	add	r1, r0
 80099a4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80099a6:	fba0 2302 	umull	r2, r3, r0, r2
 80099aa:	4419      	add	r1, r3
 80099ac:	460b      	mov	r3, r1
 80099ae:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 80099b2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	c_amb_noise_sq += 2048;
 80099b6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80099ba:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 80099be:	6139      	str	r1, [r7, #16]
 80099c0:	f143 0300 	adc.w	r3, r3, #0
 80099c4:	617b      	str	r3, [r7, #20]
 80099c6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80099ca:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	c_amb_noise_sq /= 4096;
 80099ce:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80099d2:	2a00      	cmp	r2, #0
 80099d4:	f173 0100 	sbcs.w	r1, r3, #0
 80099d8:	da06      	bge.n	80099e8 <VL53LX_hist_events_consistency_check+0x396>
 80099da:	f640 70ff 	movw	r0, #4095	; 0xfff
 80099de:	f04f 0100 	mov.w	r1, #0
 80099e2:	1812      	adds	r2, r2, r0
 80099e4:	eb41 0303 	adc.w	r3, r1, r3
 80099e8:	f04f 0000 	mov.w	r0, #0
 80099ec:	f04f 0100 	mov.w	r1, #0
 80099f0:	0b10      	lsrs	r0, r2, #12
 80099f2:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 80099f6:	1319      	asrs	r1, r3, #12
 80099f8:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60


	c_amb_noise_sq += 2;
 80099fc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009a00:	1c91      	adds	r1, r2, #2
 8009a02:	60b9      	str	r1, [r7, #8]
 8009a04:	f143 0300 	adc.w	r3, r3, #0
 8009a08:	60fb      	str	r3, [r7, #12]
 8009a0a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009a0e:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	c_amb_noise_sq /= 4;
 8009a12:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009a16:	2a00      	cmp	r2, #0
 8009a18:	f173 0100 	sbcs.w	r1, r3, #0
 8009a1c:	da02      	bge.n	8009a24 <VL53LX_hist_events_consistency_check+0x3d2>
 8009a1e:	3203      	adds	r2, #3
 8009a20:	f143 0300 	adc.w	r3, r3, #0
 8009a24:	f04f 0000 	mov.w	r0, #0
 8009a28:	f04f 0100 	mov.w	r1, #0
 8009a2c:	0890      	lsrs	r0, r2, #2
 8009a2e:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8009a32:	1099      	asrs	r1, r3, #2
 8009a34:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53LX_p_016;
 8009a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a3a:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	f04f 0300 	mov.w	r3, #0
 8009a42:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58


	p_amb_noise_sq += 2;
 8009a46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009a4a:	1c91      	adds	r1, r2, #2
 8009a4c:	6039      	str	r1, [r7, #0]
 8009a4e:	f143 0300 	adc.w	r3, r3, #0
 8009a52:	607b      	str	r3, [r7, #4]
 8009a54:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009a58:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	p_amb_noise_sq /= 4;
 8009a5c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009a60:	2a00      	cmp	r2, #0
 8009a62:	f173 0100 	sbcs.w	r1, r3, #0
 8009a66:	da02      	bge.n	8009a6e <VL53LX_hist_events_consistency_check+0x41c>
 8009a68:	3203      	adds	r2, #3
 8009a6a:	f143 0300 	adc.w	r3, r3, #0
 8009a6e:	f04f 0000 	mov.w	r0, #0
 8009a72:	f04f 0100 	mov.w	r1, #0
 8009a76:	0890      	lsrs	r0, r2, #2
 8009a78:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8009a7c:	1099      	asrs	r1, r3, #2
 8009a7e:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

	noise_sq_sum =
		(uint32_t)prange_prev->VL53LX_p_017 +
 8009a82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a84:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 8009a86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
		(uint32_t)prange_prev->VL53LX_p_017 +
 8009a88:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 8009a8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		(uint32_t)c_sig_noise_sq +
 8009a8c:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 8009a8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
	noise_sq_sum =
 8009a90:	4413      	add	r3, r2
 8009a92:	653b      	str	r3, [r7, #80]	; 0x50

	*pevents_tolerance =
		(int32_t)VL53LX_isqrt(noise_sq_sum * 16);
 8009a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a96:	011b      	lsls	r3, r3, #4
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f002 f822 	bl	800bae2 <VL53LX_isqrt>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	461a      	mov	r2, r3
	*pevents_tolerance =
 8009aa2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009aa6:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 8009aa8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8009ab2:	fb02 f203 	mul.w	r2, r2, r3
 8009ab6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009aba:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 8009abc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f103 0220 	add.w	r2, r3, #32
 8009ac6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009aca:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 8009acc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	da00      	bge.n	8009ad8 <VL53LX_hist_events_consistency_check+0x486>
 8009ad6:	333f      	adds	r3, #63	; 0x3f
 8009ad8:	119b      	asrs	r3, r3, #6
 8009ada:	461a      	mov	r2, r3
 8009adc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009ae0:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53LX_p_017;
 8009ae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	657b      	str	r3, [r7, #84]	; 0x54
	p_signal_events -= (int32_t)prange_prev->VL53LX_p_016;
 8009ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	461a      	mov	r2, r3
 8009aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009af0:	1a9b      	subs	r3, r3, r2
 8009af2:	657b      	str	r3, [r7, #84]	; 0x54

	if ((int32_t)c_signal_events > p_signal_events)
 8009af4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009af6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009af8:	429a      	cmp	r2, r3
 8009afa:	da06      	bge.n	8009b0a <VL53LX_hist_events_consistency_check+0x4b8>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 8009afc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b00:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 8009b02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b06:	601a      	str	r2, [r3, #0]
 8009b08:	e005      	b.n	8009b16 <VL53LX_hist_events_consistency_check+0x4c4>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 8009b0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009b0e:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 8009b10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b14:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 8009b16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	dd0b      	ble.n	8009b3e <VL53LX_hist_events_consistency_check+0x4ec>
		prange_curr->VL53LX_p_004 > min_effective_spad_count)
 8009b26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009b2a:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 8009b2c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d204      	bcs.n	8009b3e <VL53LX_hist_events_consistency_check+0x4ec>
		*prange_status = VL53LX_DEVICEERROR_EVENTCONSISTENCY;
 8009b34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009b38:	2214      	movs	r2, #20
 8009b3a:	701a      	strb	r2, [r3, #0]
 8009b3c:	e003      	b.n	8009b46 <VL53LX_hist_events_consistency_check+0x4f4>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 8009b3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009b42:	2209      	movs	r2, #9
 8009b44:	701a      	strb	r2, [r3, #0]





	return status;
 8009b46:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	37a0      	adds	r7, #160	; 0xa0
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009b54 <VL53LX_hist_merged_pulse_check>:

VL53LX_Error  VL53LX_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53LX_range_data_t         *pdata,
	VL53LX_DeviceError          *prange_status)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b087      	sub	sp, #28
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	607a      	str	r2, [r7, #4]
 8009b60:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error  status   = VL53LX_ERROR_NONE;
 8009b62:	2300      	movs	r3, #0
 8009b64:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 8009b66:	2300      	movs	r3, #0
 8009b68:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8009b76:	429a      	cmp	r2, r3
 8009b78:	dd0b      	ble.n	8009b92 <VL53LX_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8009b80:	b29a      	uxth	r2, r3
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	1ad3      	subs	r3, r2, r3
 8009b8c:	b29b      	uxth	r3, r3
		delta_mm =
 8009b8e:	82fb      	strh	r3, [r7, #22]
 8009b90:	e00a      	b.n	8009ba8 <VL53LX_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8009b98:	b29a      	uxth	r2, r3
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	1ad3      	subs	r3, r2, r3
 8009ba4:	b29b      	uxth	r3, r3
		delta_mm =
 8009ba6:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 8009ba8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	dd09      	ble.n	8009bc4 <VL53LX_hist_merged_pulse_check+0x70>
 8009bb0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009bb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	dd03      	ble.n	8009bc4 <VL53LX_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2216      	movs	r2, #22
 8009bc0:	701a      	strb	r2, [r3, #0]
 8009bc2:	e002      	b.n	8009bca <VL53LX_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2209      	movs	r2, #9
 8009bc8:	701a      	strb	r2, [r3, #0]

	return status;
 8009bca:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	371c      	adds	r7, #28
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr

08009bda <VL53LX_hist_xmonitor_consistency_check>:
VL53LX_Error  VL53LX_hist_xmonitor_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_data_t         *prange_curr)
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b08e      	sub	sp, #56	; 0x38
 8009bde:	af04      	add	r7, sp, #16
 8009be0:	60f8      	str	r0, [r7, #12]
 8009be2:	60b9      	str	r1, [r7, #8]
 8009be4:	607a      	str	r2, [r7, #4]
 8009be6:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8009be8:	2300      	movs	r3, #0
 8009bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_LLDriverData_t *pdev =
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	3318      	adds	r3, #24
 8009bf2:	623b      	str	r3, [r7, #32]
		VL53LXDevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 8009bfc:	6a3b      	ldr	r3, [r7, #32]
 8009bfe:	f893 3250 	ldrb.w	r3, [r3, #592]	; 0x250
 8009c02:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 8009c04:	6a3b      	ldr	r3, [r7, #32]
 8009c06:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 8009c0a:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8009c12:	2b09      	cmp	r3, #9
 8009c14:	d009      	beq.n	8009c2a <VL53LX_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8009c1c:	2b13      	cmp	r3, #19
 8009c1e:	d004      	beq.n	8009c2a <VL53LX_hist_xmonitor_consistency_check+0x50>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 8009c26:	2b14      	cmp	r3, #20
 8009c28:	d129      	bne.n	8009c7e <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c30:	2b09      	cmp	r3, #9
 8009c32:	d009      	beq.n	8009c48 <VL53LX_hist_xmonitor_consistency_check+0x6e>
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8009c3a:	2b13      	cmp	r3, #19
 8009c3c:	d004      	beq.n	8009c48 <VL53LX_hist_xmonitor_consistency_check+0x6e>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 8009c44:	2b14      	cmp	r3, #20
 8009c46:	d11a      	bne.n	8009c7e <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	2209      	movs	r2, #9
 8009c4c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					VL53LX_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53LX_hist_events_consistency_check(
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f103 0238 	add.w	r2, r3, #56	; 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	334a      	adds	r3, #74	; 0x4a
				VL53LX_hist_events_consistency_check(
 8009c5a:	8bb9      	ldrh	r1, [r7, #28]
 8009c5c:	7ff8      	ldrb	r0, [r7, #31]
 8009c5e:	9303      	str	r3, [sp, #12]
 8009c60:	f107 0318 	add.w	r3, r7, #24
 8009c64:	9302      	str	r3, [sp, #8]
 8009c66:	f107 0314 	add.w	r3, r7, #20
 8009c6a:	9301      	str	r3, [sp, #4]
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	9300      	str	r3, [sp, #0]
 8009c70:	4613      	mov	r3, r2
 8009c72:	68ba      	ldr	r2, [r7, #8]
 8009c74:	f7ff fced 	bl	8009652 <VL53LX_hist_events_consistency_check>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		}
	}

	return status;
 8009c7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3728      	adds	r7, #40	; 0x28
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <VL53LX_hist_wrap_dmax>:

VL53LX_Error  VL53LX_hist_wrap_dmax(
	VL53LX_hist_post_process_config_t  *phistpostprocess,
	VL53LX_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 8009c8a:	b580      	push	{r7, lr}
 8009c8c:	b088      	sub	sp, #32
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	60f8      	str	r0, [r7, #12]
 8009c92:	60b9      	str	r1, [r7, #8]
 8009c94:	607a      	str	r2, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8009c96:	2300      	movs	r3, #0
 8009c98:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53LX_p_015 != 0) {
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d019      	beq.n	8009cea <VL53LX_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53LX_calc_pll_period_mm(
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f002 f877 	bl	800bdb0 <VL53LX_calc_pll_period_mm>
 8009cc2:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53LX_p_015);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		wrap_dmax_phase =
 8009cca:	021b      	lsls	r3, r3, #8
 8009ccc:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	69ba      	ldr	r2, [r7, #24]
 8009cd2:	fb02 f303 	mul.w	r3, r2, r3
 8009cd6:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8009cde:	0bdb      	lsrs	r3, r3, #15
 8009ce0:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	b21a      	sxth	r2, r3
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 8009cea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3720      	adds	r7, #32
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}

08009cf6 <VL53LX_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53LX_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 8009cf6:	b590      	push	{r4, r7, lr}
 8009cf8:	b08d      	sub	sp, #52	; 0x34
 8009cfa:	af04      	add	r7, sp, #16
 8009cfc:	4604      	mov	r4, r0
 8009cfe:	4608      	mov	r0, r1
 8009d00:	4611      	mov	r1, r2
 8009d02:	461a      	mov	r2, r3
 8009d04:	4623      	mov	r3, r4
 8009d06:	80fb      	strh	r3, [r7, #6]
 8009d08:	4603      	mov	r3, r0
 8009d0a:	80bb      	strh	r3, [r7, #4]
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	70fb      	strb	r3, [r7, #3]
 8009d10:	4613      	mov	r3, r2
 8009d12:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 8009d14:	2300      	movs	r3, #0
 8009d16:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 8009d20:	2300      	movs	r3, #0
 8009d22:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 8009d24:	2300      	movs	r3, #0
 8009d26:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 8009d30:	2300      	movs	r3, #0
 8009d32:	613b      	str	r3, [r7, #16]



	VL53LX_calc_mm_effective_spads(
 8009d34:	78b9      	ldrb	r1, [r7, #2]
 8009d36:	78f8      	ldrb	r0, [r7, #3]
 8009d38:	f107 030c 	add.w	r3, r7, #12
 8009d3c:	9303      	str	r3, [sp, #12]
 8009d3e:	f107 030e 	add.w	r3, r7, #14
 8009d42:	9302      	str	r3, [sp, #8]
 8009d44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009d48:	9301      	str	r3, [sp, #4]
 8009d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d4c:	9300      	str	r3, [sp, #0]
 8009d4e:	23ff      	movs	r3, #255	; 0xff
 8009d50:	22c7      	movs	r2, #199	; 0xc7
 8009d52:	f000 fa03 	bl	800a15c <VL53LX_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 8009d56:	89fb      	ldrh	r3, [r7, #14]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d050      	beq.n	8009dfe <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 8009d5c:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d04d      	beq.n	8009dfe <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;


	VL53LX_calc_mm_effective_spads(
 8009d62:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 8009d66:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8009d6a:	78b9      	ldrb	r1, [r7, #2]
 8009d6c:	78f8      	ldrb	r0, [r7, #3]
 8009d6e:	f107 0308 	add.w	r3, r7, #8
 8009d72:	9303      	str	r3, [sp, #12]
 8009d74:	f107 030a 	add.w	r3, r7, #10
 8009d78:	9302      	str	r3, [sp, #8]
 8009d7a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009d7e:	9301      	str	r3, [sp, #4]
 8009d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d82:	9300      	str	r3, [sp, #0]
 8009d84:	4623      	mov	r3, r4
 8009d86:	f000 f9e9 	bl	800a15c <VL53LX_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 8009d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d8c:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 8009d8e:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 8009d90:	897b      	ldrh	r3, [r7, #10]
 8009d92:	461a      	mov	r2, r3
 8009d94:	69bb      	ldr	r3, [r7, #24]
 8009d96:	fb02 f303 	mul.w	r3, r2, r3
 8009d9a:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 8009d9c:	89fb      	ldrh	r3, [r7, #14]
 8009d9e:	461a      	mov	r2, r3
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	fbb3 f3f2 	udiv	r3, r3, r2
 8009da6:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 8009da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009daa:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 8009dac:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 8009dae:	893b      	ldrh	r3, [r7, #8]
 8009db0:	461a      	mov	r2, r3
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	fb02 f303 	mul.w	r3, r2, r3
 8009db8:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 8009dba:	89bb      	ldrh	r3, [r7, #12]
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009dc4:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 8009dc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009dca:	69ba      	ldr	r2, [r7, #24]
 8009dcc:	fb02 f303 	mul.w	r3, r2, r3
 8009dd0:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 8009dd2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009dd6:	697a      	ldr	r2, [r7, #20]
 8009dd8:	fb02 f303 	mul.w	r3, r2, r3
 8009ddc:	69fa      	ldr	r2, [r7, #28]
 8009dde:	4413      	add	r3, r2
 8009de0:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 8009de2:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 8009de4:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 8009de6:	4413      	add	r3, r2
 8009de8:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d008      	beq.n	8009e02 <VL53LX_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 8009df0:	69fb      	ldr	r3, [r7, #28]
 8009df2:	009a      	lsls	r2, r3, #2
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	fb92 f3f3 	sdiv	r3, r2, r3
 8009dfa:	61fb      	str	r3, [r7, #28]
 8009dfc:	e002      	b.n	8009e04 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 8009dfe:	bf00      	nop
 8009e00:	e000      	b.n	8009e04 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 8009e02:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 8009e04:	69fb      	ldr	r3, [r7, #28]
 8009e06:	b21a      	sxth	r2, r3
 8009e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e0a:	801a      	strh	r2, [r3, #0]

}
 8009e0c:	bf00      	nop
 8009e0e:	3724      	adds	r7, #36	; 0x24
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd90      	pop	{r4, r7, pc}

08009e14 <VL53LX_spad_number_to_byte_bit_index>:
void VL53LX_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60b9      	str	r1, [r7, #8]
 8009e1c:	607a      	str	r2, [r7, #4]
 8009e1e:	603b      	str	r3, [r7, #0]
 8009e20:	4603      	mov	r3, r0
 8009e22:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 8009e24:	7bfb      	ldrb	r3, [r7, #15]
 8009e26:	08db      	lsrs	r3, r3, #3
 8009e28:	b2da      	uxtb	r2, r3
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 8009e2e:	7bfb      	ldrb	r3, [r7, #15]
 8009e30:	f003 0307 	and.w	r3, r3, #7
 8009e34:	b2da      	uxtb	r2, r3
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	461a      	mov	r2, r3
 8009e40:	2301      	movs	r3, #1
 8009e42:	4093      	lsls	r3, r2
 8009e44:	b2da      	uxtb	r2, r3
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	701a      	strb	r2, [r3, #0]

}
 8009e4a:	bf00      	nop
 8009e4c:	3714      	adds	r7, #20
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e54:	4770      	bx	lr

08009e56 <VL53LX_encode_row_col>:

void VL53LX_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 8009e56:	b480      	push	{r7}
 8009e58:	b083      	sub	sp, #12
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	603a      	str	r2, [r7, #0]
 8009e60:	71fb      	strb	r3, [r7, #7]
 8009e62:	460b      	mov	r3, r1
 8009e64:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 8009e66:	79fb      	ldrb	r3, [r7, #7]
 8009e68:	2b07      	cmp	r3, #7
 8009e6a:	d90a      	bls.n	8009e82 <VL53LX_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 8009e6c:	79bb      	ldrb	r3, [r7, #6]
 8009e6e:	00db      	lsls	r3, r3, #3
 8009e70:	b2da      	uxtb	r2, r3
 8009e72:	79fb      	ldrb	r3, [r7, #7]
 8009e74:	1ad3      	subs	r3, r2, r3
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	3b71      	subs	r3, #113	; 0x71
 8009e7a:	b2da      	uxtb	r2, r3
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 8009e80:	e00a      	b.n	8009e98 <VL53LX_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 8009e82:	79bb      	ldrb	r3, [r7, #6]
 8009e84:	f1c3 030f 	rsb	r3, r3, #15
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	00db      	lsls	r3, r3, #3
 8009e8c:	b2da      	uxtb	r2, r3
 8009e8e:	79fb      	ldrb	r3, [r7, #7]
 8009e90:	4413      	add	r3, r2
 8009e92:	b2da      	uxtb	r2, r3
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	701a      	strb	r2, [r3, #0]
}
 8009e98:	bf00      	nop
 8009e9a:	370c      	adds	r7, #12
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <VL53LX_decode_zone_size>:

void VL53LX_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	4603      	mov	r3, r0
 8009eac:	60b9      	str	r1, [r7, #8]
 8009eae:	607a      	str	r2, [r7, #4]
 8009eb0:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 8009eb2:	7bfb      	ldrb	r3, [r7, #15]
 8009eb4:	091b      	lsrs	r3, r3, #4
 8009eb6:	b2da      	uxtb	r2, r3
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 8009ebc:	7bfb      	ldrb	r3, [r7, #15]
 8009ebe:	f003 030f 	and.w	r3, r3, #15
 8009ec2:	b2da      	uxtb	r2, r3
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	701a      	strb	r2, [r3, #0]

}
 8009ec8:	bf00      	nop
 8009eca:	3714      	adds	r7, #20
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <VL53LX_encode_zone_size>:

void VL53LX_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	4603      	mov	r3, r0
 8009edc:	603a      	str	r2, [r7, #0]
 8009ede:	71fb      	strb	r3, [r7, #7]
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 8009ee4:	79bb      	ldrb	r3, [r7, #6]
 8009ee6:	011b      	lsls	r3, r3, #4
 8009ee8:	b2da      	uxtb	r2, r3
 8009eea:	79fb      	ldrb	r3, [r7, #7]
 8009eec:	4413      	add	r3, r2
 8009eee:	b2da      	uxtb	r2, r3
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	701a      	strb	r2, [r3, #0]

}
 8009ef4:	bf00      	nop
 8009ef6:	370c      	adds	r7, #12
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr

08009f00 <VL53LX_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b086      	sub	sp, #24
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60ba      	str	r2, [r7, #8]
 8009f08:	607b      	str	r3, [r7, #4]
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	73fb      	strb	r3, [r7, #15]
 8009f0e:	460b      	mov	r3, r1
 8009f10:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 8009f12:	2300      	movs	r3, #0
 8009f14:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 8009f16:	2300      	movs	r3, #0
 8009f18:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	753b      	strb	r3, [r7, #20]



	VL53LX_decode_row_col(
 8009f22:	f107 0217 	add.w	r2, r7, #23
 8009f26:	f107 0116 	add.w	r1, r7, #22
 8009f2a:	7bfb      	ldrb	r3, [r7, #15]
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f002 f9ab 	bl	800c288 <VL53LX_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53LX_decode_zone_size(
 8009f32:	f107 0214 	add.w	r2, r7, #20
 8009f36:	f107 0115 	add.w	r1, r7, #21
 8009f3a:	7bbb      	ldrb	r3, [r7, #14]
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7ff ffb1 	bl	8009ea4 <VL53LX_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 8009f42:	7dfb      	ldrb	r3, [r7, #23]
 8009f44:	b29a      	uxth	r2, r3
 8009f46:	7d7b      	ldrb	r3, [r7, #21]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	0fd9      	lsrs	r1, r3, #31
 8009f4c:	440b      	add	r3, r1
 8009f4e:	105b      	asrs	r3, r3, #1
 8009f50:	425b      	negs	r3, r3
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	4413      	add	r3, r2
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	b21a      	sxth	r2, r3
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	da02      	bge.n	8009f6e <VL53LX_decode_zone_limits+0x6e>
		*px_ll = 0;
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	7d7b      	ldrb	r3, [r7, #21]
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	4413      	add	r3, r2
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	b21a      	sxth	r2, r3
 8009f80:	6a3b      	ldr	r3, [r7, #32]
 8009f82:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53LX_SPAD_ARRAY_WIDTH-1))
 8009f84:	6a3b      	ldr	r3, [r7, #32]
 8009f86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009f8a:	2b0f      	cmp	r3, #15
 8009f8c:	dd02      	ble.n	8009f94 <VL53LX_decode_zone_limits+0x94>
		*px_ur = VL53LX_SPAD_ARRAY_WIDTH-1;
 8009f8e:	6a3b      	ldr	r3, [r7, #32]
 8009f90:	220f      	movs	r2, #15
 8009f92:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 8009f94:	7dbb      	ldrb	r3, [r7, #22]
 8009f96:	b29a      	uxth	r2, r3
 8009f98:	7d3b      	ldrb	r3, [r7, #20]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	0fd9      	lsrs	r1, r3, #31
 8009f9e:	440b      	add	r3, r1
 8009fa0:	105b      	asrs	r3, r3, #1
 8009fa2:	425b      	negs	r3, r3
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	4413      	add	r3, r2
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	b21a      	sxth	r2, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	da02      	bge.n	8009fc0 <VL53LX_decode_zone_limits+0xc0>
		*py_ll = 0;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009fc6:	b29a      	uxth	r2, r3
 8009fc8:	7d3b      	ldrb	r3, [r7, #20]
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	4413      	add	r3, r2
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	b21a      	sxth	r2, r3
 8009fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd4:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53LX_SPAD_ARRAY_HEIGHT-1))
 8009fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009fdc:	2b0f      	cmp	r3, #15
 8009fde:	dd02      	ble.n	8009fe6 <VL53LX_decode_zone_limits+0xe6>
		*py_ur = VL53LX_SPAD_ARRAY_HEIGHT-1;
 8009fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe2:	220f      	movs	r2, #15
 8009fe4:	801a      	strh	r2, [r3, #0]
}
 8009fe6:	bf00      	nop
 8009fe8:	3718      	adds	r7, #24
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <VL53LX_is_aperture_location>:


uint8_t VL53LX_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 8009fee:	b480      	push	{r7}
 8009ff0:	b085      	sub	sp, #20
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	460a      	mov	r2, r1
 8009ff8:	71fb      	strb	r3, [r7, #7]
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 8009ffe:	2300      	movs	r3, #0
 800a000:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 800a002:	79fb      	ldrb	r3, [r7, #7]
 800a004:	f003 0303 	and.w	r3, r3, #3
 800a008:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 800a00a:	79bb      	ldrb	r3, [r7, #6]
 800a00c:	f003 0303 	and.w	r3, r3, #3
 800a010:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 800a012:	7bbb      	ldrb	r3, [r7, #14]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d104      	bne.n	800a022 <VL53LX_is_aperture_location+0x34>
 800a018:	7b7b      	ldrb	r3, [r7, #13]
 800a01a:	2b02      	cmp	r3, #2
 800a01c:	d101      	bne.n	800a022 <VL53LX_is_aperture_location+0x34>
		is_aperture = 1;
 800a01e:	2301      	movs	r3, #1
 800a020:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 800a022:	7bbb      	ldrb	r3, [r7, #14]
 800a024:	2b02      	cmp	r3, #2
 800a026:	d104      	bne.n	800a032 <VL53LX_is_aperture_location+0x44>
 800a028:	7b7b      	ldrb	r3, [r7, #13]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d101      	bne.n	800a032 <VL53LX_is_aperture_location+0x44>
		is_aperture = 1;
 800a02e:	2301      	movs	r3, #1
 800a030:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 800a032:	7bfb      	ldrb	r3, [r7, #15]
}
 800a034:	4618      	mov	r0, r3
 800a036:	3714      	adds	r7, #20
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <VL53LX_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 800a040:	b590      	push	{r4, r7, lr}
 800a042:	b08b      	sub	sp, #44	; 0x2c
 800a044:	af02      	add	r7, sp, #8
 800a046:	603a      	str	r2, [r7, #0]
 800a048:	461a      	mov	r2, r3
 800a04a:	4603      	mov	r3, r0
 800a04c:	71fb      	strb	r3, [r7, #7]
 800a04e:	460b      	mov	r3, r1
 800a050:	71bb      	strb	r3, [r7, #6]
 800a052:	4613      	mov	r3, r2
 800a054:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 800a056:	2300      	movs	r3, #0
 800a058:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 800a05a:	2300      	movs	r3, #0
 800a05c:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 800a05e:	2300      	movs	r3, #0
 800a060:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 800a062:	2300      	movs	r3, #0
 800a064:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 800a066:	2300      	movs	r3, #0
 800a068:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 800a06a:	2300      	movs	r3, #0
 800a06c:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 800a06e:	2300      	movs	r3, #0
 800a070:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 800a072:	2300      	movs	r3, #0
 800a074:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 800a076:	2300      	movs	r3, #0
 800a078:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 800a07a:	2300      	movs	r3, #0
 800a07c:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 800a07e:	2300      	movs	r3, #0
 800a080:	76fb      	strb	r3, [r7, #27]



	VL53LX_decode_zone_limits(
 800a082:	f107 0416 	add.w	r4, r7, #22
 800a086:	f107 0218 	add.w	r2, r7, #24
 800a08a:	79b9      	ldrb	r1, [r7, #6]
 800a08c:	79f8      	ldrb	r0, [r7, #7]
 800a08e:	f107 0312 	add.w	r3, r7, #18
 800a092:	9301      	str	r3, [sp, #4]
 800a094:	f107 0314 	add.w	r3, r7, #20
 800a098:	9300      	str	r3, [sp, #0]
 800a09a:	4623      	mov	r3, r4
 800a09c:	f7ff ff30 	bl	8009f00 <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 800a0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800a0a6:	8afb      	ldrh	r3, [r7, #22]
 800a0a8:	83bb      	strh	r3, [r7, #28]
 800a0aa:	e04c      	b.n	800a146 <VL53LX_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800a0ac:	8b3b      	ldrh	r3, [r7, #24]
 800a0ae:	83fb      	strh	r3, [r7, #30]
 800a0b0:	e03d      	b.n	800a12e <VL53LX_calc_max_effective_spads+0xee>



			VL53LX_encode_row_col(
 800a0b2:	8bbb      	ldrh	r3, [r7, #28]
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	8bfa      	ldrh	r2, [r7, #30]
 800a0b8:	b2d1      	uxtb	r1, r2
 800a0ba:	f107 0211 	add.w	r2, r7, #17
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7ff fec9 	bl	8009e56 <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 800a0c4:	7c78      	ldrb	r0, [r7, #17]
 800a0c6:	f107 030e 	add.w	r3, r7, #14
 800a0ca:	f107 020f 	add.w	r2, r7, #15
 800a0ce:	f107 0110 	add.w	r1, r7, #16
 800a0d2:	f7ff fe9f 	bl	8009e14 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800a0d6:	7c3b      	ldrb	r3, [r7, #16]
 800a0d8:	461a      	mov	r2, r3
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	4413      	add	r3, r2
 800a0de:	781a      	ldrb	r2, [r3, #0]
 800a0e0:	7bbb      	ldrb	r3, [r7, #14]
 800a0e2:	4013      	ands	r3, r2
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d01b      	beq.n	800a122 <VL53LX_calc_max_effective_spads+0xe2>


				is_aperture = VL53LX_is_aperture_location(
 800a0ea:	8bbb      	ldrh	r3, [r7, #28]
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	8bfa      	ldrh	r2, [r7, #30]
 800a0f0:	b2d2      	uxtb	r2, r2
 800a0f2:	4611      	mov	r1, r2
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7ff ff7a 	bl	8009fee <VL53LX_is_aperture_location>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800a0fe:	7efb      	ldrb	r3, [r7, #27]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d007      	beq.n	800a114 <VL53LX_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 800a104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a106:	881a      	ldrh	r2, [r3, #0]
 800a108:	88bb      	ldrh	r3, [r7, #4]
 800a10a:	4413      	add	r3, r2
 800a10c:	b29a      	uxth	r2, r3
 800a10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a110:	801a      	strh	r2, [r3, #0]
 800a112:	e006      	b.n	800a122 <VL53LX_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 800a114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a116:	881b      	ldrh	r3, [r3, #0]
 800a118:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a11c:	b29a      	uxth	r2, r3
 800a11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a120:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800a122:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a126:	b29b      	uxth	r3, r3
 800a128:	3301      	adds	r3, #1
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	83fb      	strh	r3, [r7, #30]
 800a12e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a132:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800a136:	429a      	cmp	r2, r3
 800a138:	ddbb      	ble.n	800a0b2 <VL53LX_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800a13a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a13e:	b29b      	uxth	r3, r3
 800a140:	3301      	adds	r3, #1
 800a142:	b29b      	uxth	r3, r3
 800a144:	83bb      	strh	r3, [r7, #28]
 800a146:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a14a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800a14e:	429a      	cmp	r2, r3
 800a150:	ddac      	ble.n	800a0ac <VL53LX_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 800a152:	bf00      	nop
 800a154:	bf00      	nop
 800a156:	3724      	adds	r7, #36	; 0x24
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd90      	pop	{r4, r7, pc}

0800a15c <VL53LX_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 800a15c:	b590      	push	{r4, r7, lr}
 800a15e:	b08d      	sub	sp, #52	; 0x34
 800a160:	af02      	add	r7, sp, #8
 800a162:	4604      	mov	r4, r0
 800a164:	4608      	mov	r0, r1
 800a166:	4611      	mov	r1, r2
 800a168:	461a      	mov	r2, r3
 800a16a:	4623      	mov	r3, r4
 800a16c:	71fb      	strb	r3, [r7, #7]
 800a16e:	4603      	mov	r3, r0
 800a170:	71bb      	strb	r3, [r7, #6]
 800a172:	460b      	mov	r3, r1
 800a174:	717b      	strb	r3, [r7, #5]
 800a176:	4613      	mov	r3, r2
 800a178:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 800a17a:	2300      	movs	r3, #0
 800a17c:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t   y         = 0;
 800a17e:	2300      	movs	r3, #0
 800a180:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t   mm_x_ll   = 0;
 800a182:	2300      	movs	r3, #0
 800a184:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 800a186:	2300      	movs	r3, #0
 800a188:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 800a18a:	2300      	movs	r3, #0
 800a18c:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 800a18e:	2300      	movs	r3, #0
 800a190:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 800a192:	2300      	movs	r3, #0
 800a194:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 800a196:	2300      	movs	r3, #0
 800a198:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 800a19a:	2300      	movs	r3, #0
 800a19c:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t  spad_attenuation = 0;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	847b      	strh	r3, [r7, #34]	; 0x22



	VL53LX_decode_zone_limits(
 800a1bc:	f107 041c 	add.w	r4, r7, #28
 800a1c0:	f107 021e 	add.w	r2, r7, #30
 800a1c4:	79b9      	ldrb	r1, [r7, #6]
 800a1c6:	79f8      	ldrb	r0, [r7, #7]
 800a1c8:	f107 0318 	add.w	r3, r7, #24
 800a1cc:	9301      	str	r3, [sp, #4]
 800a1ce:	f107 031a 	add.w	r3, r7, #26
 800a1d2:	9300      	str	r3, [sp, #0]
 800a1d4:	4623      	mov	r3, r4
 800a1d6:	f7ff fe93 	bl	8009f00 <VL53LX_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53LX_decode_zone_limits(
 800a1da:	f107 0414 	add.w	r4, r7, #20
 800a1de:	f107 0216 	add.w	r2, r7, #22
 800a1e2:	7939      	ldrb	r1, [r7, #4]
 800a1e4:	7978      	ldrb	r0, [r7, #5]
 800a1e6:	f107 0310 	add.w	r3, r7, #16
 800a1ea:	9301      	str	r3, [sp, #4]
 800a1ec:	f107 0312 	add.w	r3, r7, #18
 800a1f0:	9300      	str	r3, [sp, #0]
 800a1f2:	4623      	mov	r3, r4
 800a1f4:	f7ff fe84 	bl	8009f00 <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 800a1f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 800a1fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a200:	2200      	movs	r2, #0
 800a202:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800a204:	8abb      	ldrh	r3, [r7, #20]
 800a206:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a208:	e06c      	b.n	800a2e4 <VL53LX_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800a20a:	8afb      	ldrh	r3, [r7, #22]
 800a20c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a20e:	e05d      	b.n	800a2cc <VL53LX_calc_mm_effective_spads+0x170>



			VL53LX_encode_row_col(
 800a210:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a212:	b2db      	uxtb	r3, r3
 800a214:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a216:	b2d1      	uxtb	r1, r2
 800a218:	f107 020f 	add.w	r2, r7, #15
 800a21c:	4618      	mov	r0, r3
 800a21e:	f7ff fe1a 	bl	8009e56 <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 800a222:	7bf8      	ldrb	r0, [r7, #15]
 800a224:	f107 030c 	add.w	r3, r7, #12
 800a228:	f107 020d 	add.w	r2, r7, #13
 800a22c:	f107 010e 	add.w	r1, r7, #14
 800a230:	f7ff fdf0 	bl	8009e14 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800a234:	7bbb      	ldrb	r3, [r7, #14]
 800a236:	461a      	mov	r2, r3
 800a238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a23a:	4413      	add	r3, r2
 800a23c:	781a      	ldrb	r2, [r3, #0]
 800a23e:	7b3b      	ldrb	r3, [r7, #12]
 800a240:	4013      	ands	r3, r2
 800a242:	b2db      	uxtb	r3, r3
 800a244:	2b00      	cmp	r3, #0
 800a246:	d03b      	beq.n	800a2c0 <VL53LX_calc_mm_effective_spads+0x164>


				is_aperture = VL53LX_is_aperture_location(
 800a248:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a24e:	b2d2      	uxtb	r2, r2
 800a250:	4611      	mov	r1, r2
 800a252:	4618      	mov	r0, r3
 800a254:	f7ff fecb 	bl	8009fee <VL53LX_is_aperture_location>
 800a258:	4603      	mov	r3, r0
 800a25a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800a25e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a262:	2b00      	cmp	r3, #0
 800a264:	d002      	beq.n	800a26c <VL53LX_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 800a266:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a268:	847b      	strh	r3, [r7, #34]	; 0x22
 800a26a:	e002      	b.n	800a272 <VL53LX_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 800a26c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a270:	847b      	strh	r3, [r7, #34]	; 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 800a272:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a276:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800a27a:	429a      	cmp	r2, r3
 800a27c:	db19      	blt.n	800a2b2 <VL53LX_calc_mm_effective_spads+0x156>
 800a27e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a282:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800a286:	429a      	cmp	r2, r3
 800a288:	dc13      	bgt.n	800a2b2 <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800a28a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 800a28e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800a292:	429a      	cmp	r2, r3
 800a294:	db0d      	blt.n	800a2b2 <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800a296:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800a29a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	dc07      	bgt.n	800a2b2 <VL53LX_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 800a2a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2a4:	881a      	ldrh	r2, [r3, #0]
 800a2a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a2a8:	4413      	add	r3, r2
 800a2aa:	b29a      	uxth	r2, r3
 800a2ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2ae:	801a      	strh	r2, [r3, #0]
 800a2b0:	e006      	b.n	800a2c0 <VL53LX_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 800a2b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2b4:	881a      	ldrh	r2, [r3, #0]
 800a2b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a2b8:	4413      	add	r3, r2
 800a2ba:	b29a      	uxth	r2, r3
 800a2bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2be:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800a2c0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a2cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a2d0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	dd9b      	ble.n	800a210 <VL53LX_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800a2d8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	3301      	adds	r3, #1
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a2e4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a2e8:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	dd8c      	ble.n	800a20a <VL53LX_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 800a2f0:	bf00      	nop
 800a2f2:	bf00      	nop
 800a2f4:	372c      	adds	r7, #44	; 0x2c
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd90      	pop	{r4, r7, pc}

0800a2fa <VL53LX_hist_copy_results_to_sys_and_core>:
void VL53LX_hist_copy_results_to_sys_and_core(
	VL53LX_histogram_bin_data_t      *pbins,
	VL53LX_range_results_t           *phist,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore)
{
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b086      	sub	sp, #24
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	60f8      	str	r0, [r7, #12]
 800a302:	60b9      	str	r1, [r7, #8]
 800a304:	607a      	str	r2, [r7, #4]
 800a306:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 800a308:	2300      	movs	r3, #0
 800a30a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53LX_init_system_results(psys);
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f7fe f835 	bl	800837c <VL53LX_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	7c9a      	ldrb	r2, [r3, #18]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53LX_p_003[0]);
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	3314      	adds	r3, #20
 800a33c:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 800a33e:	2300      	movs	r3, #0
 800a340:	75fb      	strb	r3, [r7, #23]
 800a342:	e06b      	b.n	800a41c <VL53LX_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 800a344:	7dfb      	ldrb	r3, [r7, #23]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d002      	beq.n	800a350 <VL53LX_hist_copy_results_to_sys_and_core+0x56>
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d034      	beq.n	800a3b8 <VL53LX_hist_copy_results_to_sys_and_core+0xbe>
 800a34e:	e05f      	b.n	800a410 <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53LX_p_004;
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53LX_p_002;
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53LX_p_011;
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800a388:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	8a9a      	ldrh	r2, [r3, #20]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53LX_p_017;
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53LX_p_010;
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53LX_p_016;
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	601a      	str	r2, [r3, #0]

			break;
 800a3b6:	e02b      	b.n	800a410 <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53LX_p_004;
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53LX_p_002;
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53LX_p_011;
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800a3e8:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	845a      	strh	r2, [r3, #34]	; 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53LX_p_017;
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53LX_p_010;
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53LX_p_016;
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	611a      	str	r2, [r3, #16]
			break;
 800a40e:	bf00      	nop
		}

		pdata++;
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	334c      	adds	r3, #76	; 0x4c
 800a414:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 800a416:	7dfb      	ldrb	r3, [r7, #23]
 800a418:	3301      	adds	r3, #1
 800a41a:	75fb      	strb	r3, [r7, #23]
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	7c9b      	ldrb	r3, [r3, #18]
 800a420:	7dfa      	ldrb	r2, [r7, #23]
 800a422:	429a      	cmp	r2, r3
 800a424:	d38e      	bcc.n	800a344 <VL53LX_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 800a426:	bf00      	nop
 800a428:	bf00      	nop
 800a42a:	3718      	adds	r7, #24
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <VL53LX_save_cfg_data>:
}


VL53LX_Error VL53LX_save_cfg_data(
	VL53LX_DEV  Dev)
{
 800a430:	b480      	push	{r7}
 800a432:	b089      	sub	sp, #36	; 0x24
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a438:	2300      	movs	r3, #0
 800a43a:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	3318      	adds	r3, #24
 800a440:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800a448:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53LX_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800a44a:	69bb      	ldr	r3, [r7, #24]
 800a44c:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800a450:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id]);
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a458:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 800a45a:	4613      	mov	r3, r2
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	4413      	add	r3, r2
 800a460:	005b      	lsls	r3, r3, #1
 800a462:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a466:	697a      	ldr	r2, [r7, #20]
 800a468:	4413      	add	r3, r2
 800a46a:	3302      	adds	r3, #2
 800a46c:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 800a46e:	69bb      	ldr	r3, [r7, #24]
 800a470:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
	pzone_dyn_cfg->expected_stream_count =
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	pzone_dyn_cfg->expected_gph_id =
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 800a492:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a496:	4618      	mov	r0, r3
 800a498:	3724      	adds	r7, #36	; 0x24
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr

0800a4a2 <VL53LX_dynamic_zone_update>:


VL53LX_Error VL53LX_dynamic_zone_update(
	VL53LX_DEV  Dev,
	VL53LX_range_results_t *presults)
{
 800a4a2:	b480      	push	{r7}
 800a4a4:	b08b      	sub	sp, #44	; 0x2c
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
 800a4aa:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	3318      	adds	r3, #24
 800a4b4:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800a4bc:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a4c4:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a4cc:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800a4d4:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 800a4d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a4da:	623b      	str	r3, [r7, #32]
		pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count = 0;
 800a4dc:	7bfa      	ldrb	r2, [r7, #15]
 800a4de:	6939      	ldr	r1, [r7, #16]
 800a4e0:	4613      	mov	r3, r2
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	4413      	add	r3, r2
 800a4e6:	005b      	lsls	r3, r3, #1
 800a4e8:	440b      	add	r3, r1
 800a4ea:	3306      	adds	r3, #6
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	801a      	strh	r2, [r3, #0]

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a4f6:	84bb      	strh	r3, [r7, #36]	; 0x24

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a4fe:	e01a      	b.n	800a536 <VL53LX_dynamic_zone_update+0x94>

		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53LX_p_003[i].total_rate_per_spad_mcps);

		if (presults->VL53LX_p_003[i].total_rate_per_spad_mcps >
 800a500:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a504:	683a      	ldr	r2, [r7, #0]
 800a506:	214c      	movs	r1, #76	; 0x4c
 800a508:	fb01 f303 	mul.w	r3, r1, r3
 800a50c:	4413      	add	r3, r2
 800a50e:	334a      	adds	r3, #74	; 0x4a
 800a510:	881b      	ldrh	r3, [r3, #0]
 800a512:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a514:	429a      	cmp	r2, r3
 800a516:	d209      	bcs.n	800a52c <VL53LX_dynamic_zone_update+0x8a>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53LX_p_003[i].total_rate_per_spad_mcps;
 800a518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			max_total_rate_per_spads =
 800a51c:	683a      	ldr	r2, [r7, #0]
 800a51e:	214c      	movs	r1, #76	; 0x4c
 800a520:	fb01 f303 	mul.w	r3, r1, r3
 800a524:	4413      	add	r3, r2
 800a526:	334a      	adds	r3, #74	; 0x4a
 800a528:	881b      	ldrh	r3, [r3, #0]
 800a52a:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (i = 1; i < presults->active_results; i++) {
 800a52c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a530:	3301      	adds	r3, #1
 800a532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	7c9b      	ldrb	r3, [r3, #18]
 800a53a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a53e:	429a      	cmp	r2, r3
 800a540:	d3de      	bcc.n	800a500 <VL53LX_dynamic_zone_update+0x5e>

	}

	if (max_total_rate_per_spads == 0) {
 800a542:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a544:	2b00      	cmp	r3, #0
 800a546:	d103      	bne.n	800a550 <VL53LX_dynamic_zone_update+0xae>

		temp = 0xFFFF;
 800a548:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a54c:	623b      	str	r3, [r7, #32]
 800a54e:	e00e      	b.n	800a56e <VL53LX_dynamic_zone_update+0xcc>
	} else {

		temp = target_rate << 14;
 800a550:	89bb      	ldrh	r3, [r7, #12]
 800a552:	039b      	lsls	r3, r3, #14
 800a554:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800a556:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a558:	6a3a      	ldr	r2, [r7, #32]
 800a55a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a55e:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800a560:	6a3b      	ldr	r3, [r7, #32]
 800a562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a566:	d302      	bcc.n	800a56e <VL53LX_dynamic_zone_update+0xcc>
			temp = 0xFFFF;
 800a568:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a56c:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800a56e:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 800a570:	6a3b      	ldr	r3, [r7, #32]
 800a572:	b298      	uxth	r0, r3
	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800a574:	6939      	ldr	r1, [r7, #16]
 800a576:	4613      	mov	r3, r2
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	4413      	add	r3, r2
 800a57c:	005b      	lsls	r3, r3, #1
 800a57e:	440b      	add	r3, r1
 800a580:	3306      	adds	r3, #6
 800a582:	4602      	mov	r2, r0
 800a584:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 800a586:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	372c      	adds	r7, #44	; 0x2c
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr

0800a596 <VL53LX_multizone_hist_bins_update>:

VL53LX_Error VL53LX_multizone_hist_bins_update(
	VL53LX_DEV  Dev)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b08a      	sub	sp, #40	; 0x28
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	3318      	adds	r3, #24
 800a5a8:	623b      	str	r3, [r7, #32]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a5aa:	6a3b      	ldr	r3, [r7, #32]
 800a5ac:	332c      	adds	r3, #44	; 0x2c
 800a5ae:	61fb      	str	r3, [r7, #28]
	VL53LX_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 800a5b0:	6a3b      	ldr	r3, [r7, #32]
 800a5b2:	33c2      	adds	r3, #194	; 0xc2
 800a5b4:	61bb      	str	r3, [r7, #24]
	VL53LX_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800a5b6:	6a3b      	ldr	r3, [r7, #32]
 800a5b8:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800a5bc:	617b      	str	r3, [r7, #20]
	VL53LX_histogram_config_t *pmulti_hist =
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	3302      	adds	r3, #2
 800a5c2:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	785b      	ldrb	r3, [r3, #1]
 800a5c8:	f003 0301 	and.w	r3, r3, #1
 800a5cc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a5ce:	6a3b      	ldr	r3, [r7, #32]
 800a5d0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	4413      	add	r3, r2
 800a5da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d11e      	bne.n	800a620 <VL53LX_multizone_hist_bins_update+0x8a>
		VL53LX_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800a5e2:	7bfb      	ldrb	r3, [r7, #15]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d10b      	bne.n	800a600 <VL53LX_multizone_hist_bins_update+0x6a>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a600:	7bfb      	ldrb	r3, [r7, #15]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d05d      	beq.n	800a6c2 <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	719a      	strb	r2, [r3, #6]
 800a61e:	e050      	b.n	800a6c2 <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a620:	6a3b      	ldr	r3, [r7, #32]
 800a622:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a626:	461a      	mov	r2, r3
 800a628:	69bb      	ldr	r3, [r7, #24]
 800a62a:	4413      	add	r3, r2
 800a62c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a630:	2b02      	cmp	r3, #2
 800a632:	d11e      	bne.n	800a672 <VL53LX_multizone_hist_bins_update+0xdc>
		VL53LX_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800a634:	7bfb      	ldrb	r3, [r7, #15]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d10b      	bne.n	800a652 <VL53LX_multizone_hist_bins_update+0xbc>
			trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a652:	7bfb      	ldrb	r3, [r7, #15]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d034      	beq.n	800a6c2 <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	719a      	strb	r2, [r3, #6]
 800a670:	e027      	b.n	800a6c2 <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a672:	6a3b      	ldr	r3, [r7, #32]
 800a674:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a678:	461a      	mov	r2, r3
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	4413      	add	r3, r2
 800a67e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a682:	2b03      	cmp	r3, #3
 800a684:	d11d      	bne.n	800a6c2 <VL53LX_multizone_hist_bins_update+0x12c>
			VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800a686:	7bfb      	ldrb	r3, [r7, #15]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d10b      	bne.n	800a6a4 <VL53LX_multizone_hist_bins_update+0x10e>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a6a4:	7bfb      	ldrb	r3, [r7, #15]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d00b      	beq.n	800a6c2 <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53LX_ERROR_NONE) {
 800a6c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d109      	bne.n	800a6de <VL53LX_multizone_hist_bins_update+0x148>
		VL53LX_copy_hist_bins_to_static_cfg(
 800a6ca:	6a3b      	ldr	r3, [r7, #32]
 800a6cc:	f203 21fe 	addw	r1, r3, #766	; 0x2fe
 800a6d0:	6a3b      	ldr	r3, [r7, #32]
 800a6d2:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	6978      	ldr	r0, [r7, #20]
 800a6da:	f7fd fa1f 	bl	8007b1c <VL53LX_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800a6de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3728      	adds	r7, #40	; 0x28
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}

0800a6ea <VL53LX_update_internal_stream_counters>:
VL53LX_Error VL53LX_update_internal_stream_counters(
	VL53LX_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800a6ea:	b480      	push	{r7}
 800a6ec:	b089      	sub	sp, #36	; 0x24
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	60f8      	str	r0, [r7, #12]
 800a6f2:	607a      	str	r2, [r7, #4]
 800a6f4:	603b      	str	r3, [r7, #0]
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	72fb      	strb	r3, [r7, #11]

	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53LX_LLDriverData_t  *pdev =
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	3318      	adds	r3, #24
 800a702:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800a704:	69bb      	ldr	r3, [r7, #24]
 800a706:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a70a:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800a70c:	7dfb      	ldrb	r3, [r7, #23]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d103      	bne.n	800a71a <VL53LX_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	7afa      	ldrb	r2, [r7, #11]
 800a716:	701a      	strb	r2, [r3, #0]
 800a718:	e01e      	b.n	800a758 <VL53LX_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	461a      	mov	r2, r3
 800a720:	7dfb      	ldrb	r3, [r7, #23]
 800a722:	3b01      	subs	r3, #1
 800a724:	429a      	cmp	r2, r3
 800a726:	d111      	bne.n	800a74c <VL53LX_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	2bff      	cmp	r3, #255	; 0xff
 800a72e:	d103      	bne.n	800a738 <VL53LX_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2280      	movs	r2, #128	; 0x80
 800a734:	701a      	strb	r2, [r3, #0]
 800a736:	e005      	b.n	800a744 <VL53LX_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	3301      	adds	r3, #1
 800a73e:	b2da      	uxtb	r2, r3
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	2200      	movs	r2, #0
 800a748:	701a      	strb	r2, [r3, #0]
 800a74a:	e005      	b.n	800a758 <VL53LX_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	3301      	adds	r3, #1
 800a752:	b2da      	uxtb	r2, r3
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800a758:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3724      	adds	r7, #36	; 0x24
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr

0800a768 <VL53LX_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b08a      	sub	sp, #40	; 0x28
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	607a      	str	r2, [r7, #4]
 800a772:	461a      	mov	r2, r3
 800a774:	460b      	mov	r3, r1
 800a776:	72fb      	strb	r3, [r7, #11]
 800a778:	4613      	mov	r3, r2
 800a77a:	813b      	strh	r3, [r7, #8]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a77c:	2300      	movs	r3, #0
 800a77e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	3318      	adds	r3, #24
 800a786:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800a788:	2300      	movs	r3, #0
 800a78a:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 800a78c:	2300      	movs	r3, #0
 800a78e:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53LX_calc_macro_period_us(
 800a790:	7afa      	ldrb	r2, [r7, #11]
 800a792:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a794:	4611      	mov	r1, r2
 800a796:	4618      	mov	r0, r3
 800a798:	f7fe f9fc 	bl	8008b94 <VL53LX_calc_macro_period_us>
 800a79c:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800a79e:	6a3b      	ldr	r3, [r7, #32]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d101      	bne.n	800a7a8 <VL53LX_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	623b      	str	r3, [r7, #32]


	timeout_mclks = phasecal_timeout_us << 12;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	031b      	lsls	r3, r3, #12
 800a7ac:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800a7ae:	6a3b      	ldr	r3, [r7, #32]
 800a7b0:	085b      	lsrs	r3, r3, #1
 800a7b2:	69ba      	ldr	r2, [r7, #24]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800a7b8:	69ba      	ldr	r2, [r7, #24]
 800a7ba:	6a3b      	ldr	r3, [r7, #32]
 800a7bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7c0:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800a7c2:	69bb      	ldr	r3, [r7, #24]
 800a7c4:	2bff      	cmp	r3, #255	; 0xff
 800a7c6:	d904      	bls.n	800a7d2 <VL53LX_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800a7c8:	69fb      	ldr	r3, [r7, #28]
 800a7ca:	22ff      	movs	r2, #255	; 0xff
 800a7cc:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325
 800a7d0:	e004      	b.n	800a7dc <VL53LX_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800a7d6:	69fb      	ldr	r3, [r7, #28]
 800a7d8:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800a7dc:	69fb      	ldr	r3, [r7, #28]
 800a7de:	7afa      	ldrb	r2, [r7, #11]
 800a7e0:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a



	if (status == VL53LX_ERROR_NONE)
 800a7e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d10a      	bne.n	800a802 <VL53LX_set_ref_spad_char_config+0x9a>
		status =
			VL53LX_WrByte(
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	f893 3325 	ldrb.w	r3, [r3, #805]	; 0x325
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	214b      	movs	r1, #75	; 0x4b
 800a7f6:	68f8      	ldr	r0, [r7, #12]
 800a7f8:	f006 fd8e 	bl	8011318 <VL53LX_WrByte>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53LX_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53LX_ERROR_NONE)
 800a802:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a806:	2b00      	cmp	r3, #0
 800a808:	d10a      	bne.n	800a820 <VL53LX_set_ref_spad_char_config+0xb8>
		status =
			VL53LX_WrByte(
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800a810:	461a      	mov	r2, r3
 800a812:	2160      	movs	r1, #96	; 0x60
 800a814:	68f8      	ldr	r0, [r7, #12]
 800a816:	f006 fd7f 	bl	8011318 <VL53LX_WrByte>
 800a81a:	4603      	mov	r3, r0
 800a81c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53LX_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800a826:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800a828:	69fb      	ldr	r3, [r7, #28]
 800a82a:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800a82e:	757b      	strb	r3, [r7, #21]

	if (status == VL53LX_ERROR_NONE)
 800a830:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a834:	2b00      	cmp	r3, #0
 800a836:	d109      	bne.n	800a84c <VL53LX_set_ref_spad_char_config+0xe4>
		status =
			VL53LX_WriteMulti(
 800a838:	f107 0214 	add.w	r2, r7, #20
 800a83c:	2302      	movs	r3, #2
 800a83e:	2178      	movs	r1, #120	; 0x78
 800a840:	68f8      	ldr	r0, [r7, #12]
 800a842:	f006 fcfd 	bl	8011240 <VL53LX_WriteMulti>
 800a846:	4603      	mov	r3, r0
 800a848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	893a      	ldrh	r2, [r7, #8]
 800a850:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			total_rate_target_mcps;

	if (status == VL53LX_ERROR_NONE)
 800a854:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d108      	bne.n	800a86e <VL53LX_set_ref_spad_char_config+0x106>
		status =
			VL53LX_WrWord(
 800a85c:	893b      	ldrh	r3, [r7, #8]
 800a85e:	461a      	mov	r2, r3
 800a860:	211c      	movs	r1, #28
 800a862:	68f8      	ldr	r0, [r7, #12]
 800a864:	f006 fd82 	bl	801136c <VL53LX_WrWord>
 800a868:	4603      	mov	r3, r0
 800a86a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53LX_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53LX_ERROR_NONE)
 800a86e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a872:	2b00      	cmp	r3, #0
 800a874:	d108      	bne.n	800a888 <VL53LX_set_ref_spad_char_config+0x120>
		status =
			VL53LX_WrWord(
 800a876:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a878:	461a      	mov	r2, r3
 800a87a:	2164      	movs	r1, #100	; 0x64
 800a87c:	68f8      	ldr	r0, [r7, #12]
 800a87e:	f006 fd75 	bl	801136c <VL53LX_WrWord>
 800a882:	4603      	mov	r3, r0
 800a884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53LX_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53LX_ERROR_NONE)
 800a888:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d108      	bne.n	800a8a2 <VL53LX_set_ref_spad_char_config+0x13a>
		status =
			VL53LX_WrWord(
 800a890:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a892:	461a      	mov	r2, r3
 800a894:	2166      	movs	r1, #102	; 0x66
 800a896:	68f8      	ldr	r0, [r7, #12]
 800a898:	f006 fd68 	bl	801136c <VL53LX_WrWord>
 800a89c:	4603      	mov	r3, r0
 800a89e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LX_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800a8a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3728      	adds	r7, #40	; 0x28
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}

0800a8ae <VL53LX_dynamic_xtalk_correction_calc_required_samples>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_calc_required_samples(
	VL53LX_DEV                          Dev
	)
{
 800a8ae:	b5b0      	push	{r4, r5, r7, lr}
 800a8b0:	b090      	sub	sp, #64	; 0x40
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	3318      	adds	r3, #24
 800a8c0:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800a8c8:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_smudge_corrector_config_t *pconfig =
 800a8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8cc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a8d0:	3314      	adds	r3, #20
 800a8d2:	623b      	str	r3, [r7, #32]
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800a8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d6:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800a8da:	3318      	adds	r3, #24
 800a8dc:	61fb      	str	r3, [r7, #28]
				&(pdev->smudge_corrector_internals);

	VL53LX_range_results_t *presults = &(pres->range_results);
 800a8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e0:	61bb      	str	r3, [r7, #24]
	VL53LX_range_data_t *pxmonitor = &(presults->xmonitor);
 800a8e2:	69bb      	ldr	r3, [r7, #24]
 800a8e4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a8e8:	617b      	str	r3, [r7, #20]

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	69db      	ldr	r3, [r3, #28]
 800a8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	temp64a = pxmonitor->VL53LX_p_017 +
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		pxmonitor->VL53LX_p_016;
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	temp64a = pxmonitor->VL53LX_p_017 +
 800a8f8:	4413      	add	r3, r2
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	f04f 0300 	mov.w	r3, #0
 800a900:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (peak_duration_us == 0)
 800a904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a906:	2b00      	cmp	r3, #0
 800a908:	d102      	bne.n	800a910 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x62>
		peak_duration_us = 1000;
 800a90a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a90e:	63fb      	str	r3, [r7, #60]	; 0x3c
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800a910:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a914:	4602      	mov	r2, r0
 800a916:	460b      	mov	r3, r1
 800a918:	f04f 0400 	mov.w	r4, #0
 800a91c:	f04f 0500 	mov.w	r5, #0
 800a920:	015d      	lsls	r5, r3, #5
 800a922:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a926:	0154      	lsls	r4, r2, #5
 800a928:	4622      	mov	r2, r4
 800a92a:	462b      	mov	r3, r5
 800a92c:	1a12      	subs	r2, r2, r0
 800a92e:	eb63 0301 	sbc.w	r3, r3, r1
 800a932:	f04f 0400 	mov.w	r4, #0
 800a936:	f04f 0500 	mov.w	r5, #0
 800a93a:	009d      	lsls	r5, r3, #2
 800a93c:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800a940:	0094      	lsls	r4, r2, #2
 800a942:	4622      	mov	r2, r4
 800a944:	462b      	mov	r3, r5
 800a946:	1812      	adds	r2, r2, r0
 800a948:	eb41 0303 	adc.w	r3, r1, r3
 800a94c:	f04f 0000 	mov.w	r0, #0
 800a950:	f04f 0100 	mov.w	r1, #0
 800a954:	00d9      	lsls	r1, r3, #3
 800a956:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a95a:	00d0      	lsls	r0, r2, #3
 800a95c:	4602      	mov	r2, r0
 800a95e:	460b      	mov	r3, r1
 800a960:	4610      	mov	r0, r2
 800a962:	4619      	mov	r1, r3
 800a964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a966:	461a      	mov	r2, r3
 800a968:	f04f 0300 	mov.w	r3, #0
 800a96c:	f7f5 fcd8 	bl	8000320 <__aeabi_uldivmod>
 800a970:	4602      	mov	r2, r0
 800a972:	460b      	mov	r3, r1
 800a974:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800a978:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a97c:	4602      	mov	r2, r0
 800a97e:	460b      	mov	r3, r1
 800a980:	f04f 0400 	mov.w	r4, #0
 800a984:	f04f 0500 	mov.w	r5, #0
 800a988:	015d      	lsls	r5, r3, #5
 800a98a:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a98e:	0154      	lsls	r4, r2, #5
 800a990:	4622      	mov	r2, r4
 800a992:	462b      	mov	r3, r5
 800a994:	1a12      	subs	r2, r2, r0
 800a996:	eb63 0301 	sbc.w	r3, r3, r1
 800a99a:	f04f 0400 	mov.w	r4, #0
 800a99e:	f04f 0500 	mov.w	r5, #0
 800a9a2:	009d      	lsls	r5, r3, #2
 800a9a4:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800a9a8:	0094      	lsls	r4, r2, #2
 800a9aa:	4622      	mov	r2, r4
 800a9ac:	462b      	mov	r3, r5
 800a9ae:	1812      	adds	r2, r2, r0
 800a9b0:	eb41 0303 	adc.w	r3, r1, r3
 800a9b4:	f04f 0000 	mov.w	r0, #0
 800a9b8:	f04f 0100 	mov.w	r1, #0
 800a9bc:	00d9      	lsls	r1, r3, #3
 800a9be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a9c2:	00d0      	lsls	r0, r2, #3
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	4610      	mov	r0, r2
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	f04f 0300 	mov.w	r3, #0
 800a9d4:	f7f5 fca4 	bl	8000320 <__aeabi_uldivmod>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	460b      	mov	r3, r1
 800a9dc:	e9c7 2302 	strd	r2, r3, [r7, #8]

	temp64z = pconfig->noise_margin * pxmonitor->VL53LX_p_004;
 800a9e0:	6a3b      	ldr	r3, [r7, #32]
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	697a      	ldr	r2, [r7, #20]
 800a9e6:	8ad2      	ldrh	r2, [r2, #22]
 800a9e8:	fb02 f303 	mul.w	r3, r2, r3
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	f04f 0300 	mov.w	r3, #0
 800a9f2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	if (temp64z == 0)
 800a9f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	d105      	bne.n	800aa0a <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x15c>
		temp64z = 1;
 800a9fe:	f04f 0201 	mov.w	r2, #1
 800aa02:	f04f 0300 	mov.w	r3, #0
 800aa06:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	temp64a = temp64a * 1000 * 256;
 800aa0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aa0e:	4602      	mov	r2, r0
 800aa10:	460b      	mov	r3, r1
 800aa12:	f04f 0400 	mov.w	r4, #0
 800aa16:	f04f 0500 	mov.w	r5, #0
 800aa1a:	015d      	lsls	r5, r3, #5
 800aa1c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800aa20:	0154      	lsls	r4, r2, #5
 800aa22:	4622      	mov	r2, r4
 800aa24:	462b      	mov	r3, r5
 800aa26:	1a12      	subs	r2, r2, r0
 800aa28:	eb63 0301 	sbc.w	r3, r3, r1
 800aa2c:	f04f 0400 	mov.w	r4, #0
 800aa30:	f04f 0500 	mov.w	r5, #0
 800aa34:	009d      	lsls	r5, r3, #2
 800aa36:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800aa3a:	0094      	lsls	r4, r2, #2
 800aa3c:	4622      	mov	r2, r4
 800aa3e:	462b      	mov	r3, r5
 800aa40:	1812      	adds	r2, r2, r0
 800aa42:	eb41 0303 	adc.w	r3, r1, r3
 800aa46:	f04f 0000 	mov.w	r0, #0
 800aa4a:	f04f 0100 	mov.w	r1, #0
 800aa4e:	02d9      	lsls	r1, r3, #11
 800aa50:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800aa54:	02d0      	lsls	r0, r2, #11
 800aa56:	4602      	mov	r2, r0
 800aa58:	460b      	mov	r3, r1
 800aa5a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = do_division_u(temp64a, temp64z);
 800aa5e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800aa62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aa66:	f7f5 fc5b 	bl	8000320 <__aeabi_uldivmod>
 800aa6a:	4602      	mov	r2, r0
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = temp64a * 1000 * 256;
 800aa72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aa76:	4602      	mov	r2, r0
 800aa78:	460b      	mov	r3, r1
 800aa7a:	f04f 0400 	mov.w	r4, #0
 800aa7e:	f04f 0500 	mov.w	r5, #0
 800aa82:	015d      	lsls	r5, r3, #5
 800aa84:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800aa88:	0154      	lsls	r4, r2, #5
 800aa8a:	4622      	mov	r2, r4
 800aa8c:	462b      	mov	r3, r5
 800aa8e:	1a12      	subs	r2, r2, r0
 800aa90:	eb63 0301 	sbc.w	r3, r3, r1
 800aa94:	f04f 0400 	mov.w	r4, #0
 800aa98:	f04f 0500 	mov.w	r5, #0
 800aa9c:	009d      	lsls	r5, r3, #2
 800aa9e:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800aaa2:	0094      	lsls	r4, r2, #2
 800aaa4:	4622      	mov	r2, r4
 800aaa6:	462b      	mov	r3, r5
 800aaa8:	1812      	adds	r2, r2, r0
 800aaaa:	eb41 0303 	adc.w	r3, r1, r3
 800aaae:	f04f 0000 	mov.w	r0, #0
 800aab2:	f04f 0100 	mov.w	r1, #0
 800aab6:	02d9      	lsls	r1, r3, #11
 800aab8:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800aabc:	02d0      	lsls	r0, r2, #11
 800aabe:	4602      	mov	r2, r0
 800aac0:	460b      	mov	r3, r1
 800aac2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = do_division_u(temp64a, temp64z);
 800aac6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800aaca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aace:	f7f5 fc27 	bl	8000320 <__aeabi_uldivmod>
 800aad2:	4602      	mov	r2, r0
 800aad4:	460b      	mov	r3, r1
 800aad6:	e9c7 2302 	strd	r2, r3, [r7, #8]

	pint->required_samples = (uint32_t)temp64a;
 800aada:	68ba      	ldr	r2, [r7, #8]
 800aadc:	69fb      	ldr	r3, [r7, #28]
 800aade:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800aae0:	69fb      	ldr	r3, [r7, #28]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d802      	bhi.n	800aaee <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x240>
		pint->required_samples = 2;
 800aae8:	69fb      	ldr	r3, [r7, #28]
 800aaea:	2202      	movs	r2, #2
 800aaec:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800aaee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3740      	adds	r7, #64	; 0x40
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800aafc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53LX_smudge_corrector_config_t	*pconfig,
	VL53LX_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b096      	sub	sp, #88	; 0x58
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	60b9      	str	r1, [r7, #8]
 800ab06:	607a      	str	r2, [r7, #4]
 800ab08:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	3318      	adds	r3, #24
 800ab14:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t  orig_y_gradient;
	uint8_t  histo_merge_nb;
	uint8_t  i;
	int32_t  itemp32;
	uint32_t SmudgeFactor;
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800ab16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab18:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ab1c:	633b      	str	r3, [r7, #48]	; 0x30
	VL53LX_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800ab1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab20:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 800ab24:	331c      	adds	r3, #28
 800ab26:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t incXtalk, cval;

	LOG_FUNCTION_START("");


	if (add_smudge == 1) {
 800ab28:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d107      	bne.n	800ab40 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x44>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	889b      	ldrh	r3, [r3, #4]
 800ab34:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	609a      	str	r2, [r3, #8]
 800ab3e:	e002      	b.n	800ab46 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x4a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	68ba      	ldr	r2, [r7, #8]
 800ab44:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800ab46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab48:	689b      	ldr	r3, [r3, #8]
 800ab4a:	653b      	str	r3, [r7, #80]	; 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800ab4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4e:	899b      	ldrh	r3, [r3, #12]
 800ab50:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800ab54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab56:	89db      	ldrh	r3, [r3, #14]
 800ab58:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d004      	beq.n	800ab70 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x74>
		(pconfig->scaler_calc_method == 1)) &&
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d126      	bne.n	800abbe <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800ab70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab72:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d022      	beq.n	800abbe <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800ab78:	f107 0317 	add.w	r3, r7, #23
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	68f8      	ldr	r0, [r7, #12]
 800ab80:	f000 fe75 	bl	800b86e <VL53LX_compute_histo_merge_nb>

		if (histo_merge_nb == 0)
 800ab84:	7dfb      	ldrb	r3, [r7, #23]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d101      	bne.n	800ab8e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x92>
			histo_merge_nb = 1;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	75fb      	strb	r3, [r7, #23]
		if (pdev->tuning_parms.tp_hist_merge != 1)
 800ab8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab90:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d003      	beq.n	800aba0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xa4>
			orig_xtalk_offset =
 800ab98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	653b      	str	r3, [r7, #80]	; 0x50
 800ab9e:	e006      	b.n	800abae <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800aba0:	7dfb      	ldrb	r3, [r7, #23]
 800aba2:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800aba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba6:	3202      	adds	r2, #2
 800aba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abac:	653b      	str	r3, [r7, #80]	; 0x50

		orig_x_gradient =
 800abae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb0:	889b      	ldrh	r3, [r3, #4]
 800abb2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800abb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb8:	88db      	ldrh	r3, [r3, #6]
 800abba:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d10a      	bne.n	800abde <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
 800abc8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d106      	bne.n	800abde <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
		pout->gradient_zero_flag |= 0x01;
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	795b      	ldrb	r3, [r3, #5]
 800abd4:	f043 0301 	orr.w	r3, r3, #1
 800abd8:	b2da      	uxtb	r2, r3
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d10a      	bne.n	800abfe <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
 800abe8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800abec:	2b00      	cmp	r3, #0
 800abee:	d106      	bne.n	800abfe <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
		pout->gradient_zero_flag |= 0x02;
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	795b      	ldrb	r3, [r3, #5]
 800abf4:	f043 0302 	orr.w	r3, r3, #2
 800abf8:	b2da      	uxtb	r2, r3
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800abfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d101      	bne.n	800ac08 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x10c>
		orig_xtalk_offset = 1;
 800ac04:	2301      	movs	r3, #1
 800ac06:	653b      	str	r3, [r7, #80]	; 0x50



	if (pconfig->user_scaler_set == 1) {
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d108      	bne.n	800ac24 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x128>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac16:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ac1e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800ac22:	e019      	b.n	800ac58 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x15c>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800ac24:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ac28:	019b      	lsls	r3, r3, #6
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac32:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800ac3c:	855a      	strh	r2, [r3, #42]	; 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800ac3e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800ac42:	019b      	lsls	r3, r3, #6
 800ac44:	461a      	mov	r2, r3
 800ac46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac48:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac4c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800ac56:	859a      	strh	r2, [r3, #44]	; 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d12a      	bne.n	800acb8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1bc>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 800ac6a:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800ac6e:	647b      	str	r3, [r7, #68]	; 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800ac70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac72:	119b      	asrs	r3, r3, #6
 800ac74:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800ac76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac7c:	db02      	blt.n	800ac84 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x188>
			itemp32 = 0xFFFF;
 800ac7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ac82:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800ac84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac86:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800ac94:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800ac98:	647b      	str	r3, [r7, #68]	; 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800ac9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac9c:	119b      	asrs	r3, r3, #6
 800ac9e:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800aca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aca6:	db02      	blt.n	800acae <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1b2>
			itemp32 = 0xFFFF;
 800aca8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800acac:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800acae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acb0:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	81da      	strh	r2, [r3, #14]
 800acb6:	e042      	b.n	800ad3e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x242>
	} else if (pconfig->scaler_calc_method == 1) {
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d13d      	bne.n	800ad3e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x242>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800acc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800acc8:	1ad3      	subs	r3, r2, r3
 800acca:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800accc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acce:	2b00      	cmp	r3, #0
 800acd0:	da00      	bge.n	800acd4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1d8>
 800acd2:	330f      	adds	r3, #15
 800acd4:	111b      	asrs	r3, r3, #4
 800acd6:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800acd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800acde:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ace2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ace4:	4413      	add	r3, r2
 800ace6:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800ace8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acee:	db02      	blt.n	800acf6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1fa>
			itemp32 = 0xFFFF;
 800acf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800acf4:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800acf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acf8:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800ad02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ad04:	1ad3      	subs	r3, r2, r3
 800ad06:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800ad08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad0a:	4a52      	ldr	r2, [pc, #328]	; (800ae54 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x358>)
 800ad0c:	fb82 1203 	smull	r1, r2, r2, r3
 800ad10:	1152      	asrs	r2, r2, #5
 800ad12:	17db      	asrs	r3, r3, #31
 800ad14:	1ad3      	subs	r3, r2, r3
 800ad16:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800ad18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800ad1e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800ad22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad24:	4413      	add	r3, r2
 800ad26:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800ad28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad2e:	db02      	blt.n	800ad36 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x23a>
			itemp32 = 0xFFFF;
 800ad30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad34:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800ad36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad38:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	81da      	strh	r2, [r3, #14]
	}


	if ((pconfig->smudge_corr_apply_enabled == 1) &&
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	785b      	ldrb	r3, [r3, #1]
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d178      	bne.n	800ae38 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>
 800ad46:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800ad4a:	2b01      	cmp	r3, #1
 800ad4c:	d074      	beq.n	800ae38 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>
		(soft_update != 1)) {

		pout->new_xtalk_applied_flag = 1;
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	2201      	movs	r2, #1
 800ad52:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	62bb      	str	r3, [r7, #40]	; 0x28

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800ad5a:	f107 0317 	add.w	r3, r7, #23
 800ad5e:	4619      	mov	r1, r3
 800ad60:	68f8      	ldr	r0, [r7, #12]
 800ad62:	f000 fd84 	bl	800b86e <VL53LX_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800ad66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad68:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 800ad6c:	627b      	str	r3, [r7, #36]	; 0x24
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 800ad6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad70:	3308      	adds	r3, #8
 800ad72:	643b      	str	r3, [r7, #64]	; 0x40
		if ((histo_merge_nb > 0) &&
 800ad74:	7dfb      	ldrb	r3, [r7, #23]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d042      	beq.n	800ae00 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800ad7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad7c:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
		if ((histo_merge_nb > 0) &&
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d13d      	bne.n	800ae00 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800ad84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d03a      	beq.n	800ae00 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(nXtalk != 0)) {
			cXtalk =
 800ad8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	623b      	str	r3, [r7, #32]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 800ad90:	6a3b      	ldr	r3, [r7, #32]
 800ad92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ad96:	fb02 f203 	mul.w	r2, r2, r3
 800ad9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ada0:	61fb      	str	r3, [r7, #28]
			if ((max ==  0)||
 800ada2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d004      	beq.n	800adb2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2b6>
				(SmudgeFactor >= pconfig->max_smudge_factor))
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			if ((max ==  0)||
 800adac:	69fa      	ldr	r2, [r7, #28]
 800adae:	429a      	cmp	r2, r3
 800adb0:	d303      	bcc.n	800adba <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2be>
				pout->new_xtalk_applied_flag = 0;
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	2200      	movs	r2, #0
 800adb6:	719a      	strb	r2, [r3, #6]
 800adb8:	e022      	b.n	800ae00 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			else {
				incXtalk = nXtalk / max;
 800adba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800adc2:	61bb      	str	r3, [r7, #24]
				cval = 0;
 800adc4:	2300      	movs	r3, #0
 800adc6:	63fb      	str	r3, [r7, #60]	; 0x3c
				for (i = 0; i < max-1; i++) {
 800adc8:	2300      	movs	r3, #0
 800adca:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800adce:	e00e      	b.n	800adee <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2f2>
					cval += incXtalk;
 800add0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800add2:	69bb      	ldr	r3, [r7, #24]
 800add4:	4413      	add	r3, r2
 800add6:	63fb      	str	r3, [r7, #60]	; 0x3c
					*pcpo = cval;
 800add8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800addc:	601a      	str	r2, [r3, #0]
					pcpo++;
 800adde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ade0:	3304      	adds	r3, #4
 800ade2:	643b      	str	r3, [r7, #64]	; 0x40
				for (i = 0; i < max-1; i++) {
 800ade4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ade8:	3301      	adds	r3, #1
 800adea:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800adee:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800adf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf4:	3b01      	subs	r3, #1
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d3ea      	bcc.n	800add0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2d4>
				}
				*pcpo = nXtalk;
 800adfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adfe:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	799b      	ldrb	r3, [r3, #6]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d017      	beq.n	800ae38 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800ae0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae0e:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800ae16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae18:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800ae20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae22:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	789b      	ldrb	r3, [r3, #2]
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	d105      	bne.n	800ae38 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>

			pconfig->smudge_corr_apply_enabled = 0;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2200      	movs	r2, #0
 800ae36:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 800ae38:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d002      	beq.n	800ae46 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x34a>
		pout->smudge_corr_valid = 1;
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	2201      	movs	r2, #1
 800ae44:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800ae46:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3758      	adds	r7, #88	; 0x58
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
 800ae52:	bf00      	nop
 800ae54:	66666667 	.word	0x66666667

0800ae58 <VL53LX_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53LX_Error VL53LX_dynamic_xtalk_correction_corrector(
	VL53LX_DEV                          Dev
	)
{
 800ae58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ae5c:	b09a      	sub	sp, #104	; 0x68
 800ae5e:	af02      	add	r7, sp, #8
 800ae60:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800ae62:	2300      	movs	r3, #0
 800ae64:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	3318      	adds	r3, #24
 800ae6c:	64bb      	str	r3, [r7, #72]	; 0x48
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800ae74:	647b      	str	r3, [r7, #68]	; 0x44
	VL53LX_smudge_corrector_config_t *pconfig =
 800ae76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae78:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800ae7c:	3314      	adds	r3, #20
 800ae7e:	643b      	str	r3, [r7, #64]	; 0x40
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800ae80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae82:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ae86:	3318      	adds	r3, #24
 800ae88:	63fb      	str	r3, [r7, #60]	; 0x3c
				&(pdev->smudge_corrector_internals);
	VL53LX_smudge_corrector_data_t *pout =
 800ae8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae8c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ae90:	63bb      	str	r3, [r7, #56]	; 0x38
			&(pres->range_results.smudge_corrector_data);
	VL53LX_range_results_t  *pR = &(pres->range_results);
 800ae92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae94:	637b      	str	r3, [r7, #52]	; 0x34
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800ae96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae98:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ae9c:	633b      	str	r3, [r7, #48]	; 0x30

	uint8_t	run_smudge_detection = 0;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t merging_complete = 0;
 800aea4:	2300      	movs	r3, #0
 800aea6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t	run_nodetect = 0;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t ambient_check = 0;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	int32_t itemp32 = 0;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	65bb      	str	r3, [r7, #88]	; 0x58
	uint64_t utemp64 = 0;
 800aeba:	f04f 0200 	mov.w	r2, #0
 800aebe:	f04f 0300 	mov.w	r3, #0
 800aec2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint8_t continue_processing = CONT_CONTINUE;
 800aec6:	2300      	movs	r3, #0
 800aec8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint32_t xtalk_offset_out = 0;
 800aecc:	2300      	movs	r3, #0
 800aece:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t xtalk_offset_in = 0;
 800aed0:	2300      	movs	r3, #0
 800aed2:	61fb      	str	r3, [r7, #28]
	uint32_t current_xtalk = 0;
 800aed4:	2300      	movs	r3, #0
 800aed6:	61bb      	str	r3, [r7, #24]
	uint32_t smudge_margin_adjusted = 0;
 800aed8:	2300      	movs	r3, #0
 800aeda:	617b      	str	r3, [r7, #20]
	uint8_t i = 0;
 800aedc:	2300      	movs	r3, #0
 800aede:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t nodetect_index = 0;
 800aee2:	2300      	movs	r3, #0
 800aee4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t histo_merge_nb;


	LOG_FUNCTION_START("");

	VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800aee8:	f107 030b 	add.w	r3, r7, #11
 800aeec:	4619      	mov	r1, r3
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 fcbd 	bl	800b86e <VL53LX_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) ||
 800aef4:	7afb      	ldrb	r3, [r7, #11]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d004      	beq.n	800af04 <VL53LX_dynamic_xtalk_correction_corrector+0xac>
		(pdev->tuning_parms.tp_hist_merge != 1))
 800aefa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aefc:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
	if ((histo_merge_nb == 0) ||
 800af00:	2b01      	cmp	r3, #1
 800af02:	d001      	beq.n	800af08 <VL53LX_dynamic_xtalk_correction_corrector+0xb0>
		histo_merge_nb = 1;
 800af04:	2301      	movs	r3, #1
 800af06:	72fb      	strb	r3, [r7, #11]


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800af08:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800af0a:	f000 faeb 	bl	800b4e4 <VL53LX_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800af0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af12:	2b00      	cmp	r3, #0
 800af14:	d009      	beq.n	800af2a <VL53LX_dynamic_xtalk_correction_corrector+0xd2>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb)  >
 800af16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af1a:	7afa      	ldrb	r2, [r7, #11]
 800af1c:	fb02 f303 	mul.w	r3, r2, r3
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800af20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af22:	f8b2 2178 	ldrh.w	r2, [r2, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800af26:	4293      	cmp	r3, r2
 800af28:	d901      	bls.n	800af2e <VL53LX_dynamic_xtalk_correction_corrector+0xd6>
 800af2a:	2301      	movs	r3, #1
 800af2c:	e000      	b.n	800af30 <VL53LX_dynamic_xtalk_correction_corrector+0xd8>
 800af2e:	2300      	movs	r3, #0
 800af30:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d


	merging_complete =
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800af34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af36:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d105      	bne.n	800af4a <VL53LX_dynamic_xtalk_correction_corrector+0xf2>
		(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800af3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af40:	f893 2184 	ldrb.w	r2, [r3, #388]	; 0x184
 800af44:	7afb      	ldrb	r3, [r7, #11]
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800af46:	429a      	cmp	r2, r3
 800af48:	d101      	bne.n	800af4e <VL53LX_dynamic_xtalk_correction_corrector+0xf6>
 800af4a:	2301      	movs	r3, #1
 800af4c:	e000      	b.n	800af50 <VL53LX_dynamic_xtalk_correction_corrector+0xf8>
 800af4e:	2300      	movs	r3, #0
	merging_complete =
 800af50:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 800af54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af56:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d10e      	bne.n	800af7a <VL53LX_dynamic_xtalk_correction_corrector+0x122>
		(pconfig->smudge_corr_enabled == 1) &&
 800af5c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800af60:	2b00      	cmp	r3, #0
 800af62:	d00a      	beq.n	800af7a <VL53LX_dynamic_xtalk_correction_corrector+0x122>
		(pR->xmonitor.range_status
 800af64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af66:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
		ambient_check &&
 800af6a:	2b09      	cmp	r3, #9
 800af6c:	d105      	bne.n	800af7a <VL53LX_dynamic_xtalk_correction_corrector+0x122>
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800af6e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800af72:	2b00      	cmp	r3, #0
 800af74:	d001      	beq.n	800af7a <VL53LX_dynamic_xtalk_correction_corrector+0x122>
 800af76:	2301      	movs	r3, #1
 800af78:	e000      	b.n	800af7c <VL53LX_dynamic_xtalk_correction_corrector+0x124>
 800af7a:	2300      	movs	r3, #0
	run_smudge_detection =
 800af7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		merging_complete;


	if ((pR->xmonitor.range_status
 800af80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af82:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 800af86:	2b09      	cmp	r3, #9
 800af88:	f000 809e 	beq.w	800b0c8 <VL53LX_dynamic_xtalk_correction_corrector+0x270>
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 800af8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af8e:	781b      	ldrb	r3, [r3, #0]
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800af90:	2b01      	cmp	r3, #1
 800af92:	f040 8099 	bne.w	800b0c8 <VL53LX_dynamic_xtalk_correction_corrector+0x270>

		run_nodetect = 2;
 800af96:	2302      	movs	r3, #2
 800af98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		for (i = 0; i < pR->active_results; i++) {
 800af9c:	2300      	movs	r3, #0
 800af9e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800afa2:	e02d      	b.n	800b000 <VL53LX_dynamic_xtalk_correction_corrector+0x1a8>
			if (pR->VL53LX_p_003[i].range_status ==
 800afa4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800afa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afaa:	214c      	movs	r1, #76	; 0x4c
 800afac:	fb01 f303 	mul.w	r3, r1, r3
 800afb0:	4413      	add	r3, r2
 800afb2:	335e      	adds	r3, #94	; 0x5e
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	2b09      	cmp	r3, #9
 800afb8:	d11d      	bne.n	800aff6 <VL53LX_dynamic_xtalk_correction_corrector+0x19e>
				VL53LX_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53LX_p_003[i].median_range_mm
 800afba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800afbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afc0:	214c      	movs	r1, #76	; 0x4c
 800afc2:	fb01 f303 	mul.w	r3, r1, r3
 800afc6:	4413      	add	r3, r2
 800afc8:	335a      	adds	r3, #90	; 0x5a
 800afca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800afce:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 800afd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afd2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
				if (pR->VL53LX_p_003[i].median_range_mm
 800afd4:	429a      	cmp	r2, r3
 800afd6:	dc03      	bgt.n	800afe0 <VL53LX_dynamic_xtalk_correction_corrector+0x188>
					run_nodetect = 0;
 800afd8:	2300      	movs	r3, #0
 800afda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800afde:	e00a      	b.n	800aff6 <VL53LX_dynamic_xtalk_correction_corrector+0x19e>
				} else {
					if (run_nodetect == 2) {
 800afe0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800afe4:	2b02      	cmp	r3, #2
 800afe6:	d106      	bne.n	800aff6 <VL53LX_dynamic_xtalk_correction_corrector+0x19e>
						run_nodetect = 1;
 800afe8:	2301      	movs	r3, #1
 800afea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						nodetect_index = i;
 800afee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800aff2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		for (i = 0; i < pR->active_results; i++) {
 800aff6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800affa:	3301      	adds	r3, #1
 800affc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800b000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b002:	7c9b      	ldrb	r3, [r3, #18]
 800b004:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800b008:	429a      	cmp	r2, r3
 800b00a:	d3cb      	bcc.n	800afa4 <VL53LX_dynamic_xtalk_correction_corrector+0x14c>
					}
				}
			}
		}

		if (run_nodetect == 2)
 800b00c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b010:	2b02      	cmp	r3, #2
 800b012:	d102      	bne.n	800b01a <VL53LX_dynamic_xtalk_correction_corrector+0x1c2>

			run_nodetect = 0;
 800b014:	2300      	movs	r3, #0
 800b016:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		amr =
		pR->VL53LX_p_003[nodetect_index].ambient_count_rate_mcps;
 800b01a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
		amr =
 800b01e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b020:	214c      	movs	r1, #76	; 0x4c
 800b022:	fb01 f303 	mul.w	r3, r1, r3
 800b026:	4413      	add	r3, r2
 800b028:	3348      	adds	r3, #72	; 0x48
 800b02a:	881b      	ldrh	r3, [r3, #0]
 800b02c:	827b      	strh	r3, [r7, #18]

		if (run_nodetect == 1) {
 800b02e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b032:	2b01      	cmp	r3, #1
 800b034:	d148      	bne.n	800b0c8 <VL53LX_dynamic_xtalk_correction_corrector+0x270>




			utemp64 = 1000 * ((uint64_t)amr);
 800b036:	8a78      	ldrh	r0, [r7, #18]
 800b038:	f04f 0100 	mov.w	r1, #0
 800b03c:	4602      	mov	r2, r0
 800b03e:	460b      	mov	r3, r1
 800b040:	f04f 0400 	mov.w	r4, #0
 800b044:	f04f 0500 	mov.w	r5, #0
 800b048:	015d      	lsls	r5, r3, #5
 800b04a:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800b04e:	0154      	lsls	r4, r2, #5
 800b050:	4622      	mov	r2, r4
 800b052:	462b      	mov	r3, r5
 800b054:	1a12      	subs	r2, r2, r0
 800b056:	eb63 0301 	sbc.w	r3, r3, r1
 800b05a:	f04f 0400 	mov.w	r4, #0
 800b05e:	f04f 0500 	mov.w	r5, #0
 800b062:	009d      	lsls	r5, r3, #2
 800b064:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800b068:	0094      	lsls	r4, r2, #2
 800b06a:	4622      	mov	r2, r4
 800b06c:	462b      	mov	r3, r5
 800b06e:	1812      	adds	r2, r2, r0
 800b070:	eb41 0303 	adc.w	r3, r1, r3
 800b074:	f04f 0000 	mov.w	r0, #0
 800b078:	f04f 0100 	mov.w	r1, #0
 800b07c:	00d9      	lsls	r1, r3, #3
 800b07e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b082:	00d0      	lsls	r0, r2, #3
 800b084:	4602      	mov	r2, r0
 800b086:	460b      	mov	r3, r1
 800b088:	e9c7 2308 	strd	r2, r3, [r7, #32]


			utemp64 = utemp64 << 9;
 800b08c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b090:	f04f 0200 	mov.w	r2, #0
 800b094:	f04f 0300 	mov.w	r3, #0
 800b098:	024b      	lsls	r3, r1, #9
 800b09a:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800b09e:	0242      	lsls	r2, r0, #9
 800b0a0:	e9c7 2308 	strd	r2, r3, [r7, #32]


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800b0a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	f04f 0300 	mov.w	r3, #0
 800b0ae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b0b2:	4299      	cmp	r1, r3
 800b0b4:	bf08      	it	eq
 800b0b6:	4290      	cmpeq	r0, r2
 800b0b8:	d203      	bcs.n	800b0c2 <VL53LX_dynamic_xtalk_correction_corrector+0x26a>
				run_nodetect = 1;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b0c0:	e002      	b.n	800b0c8 <VL53LX_dynamic_xtalk_correction_corrector+0x270>
			else
				run_nodetect = 0;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		}
	}


	if (run_smudge_detection) {
 800b0c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	f000 8101 	beq.w	800b2d4 <VL53LX_dynamic_xtalk_correction_corrector+0x47c>

		pint->nodetect_counter = 0;
 800b0d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	611a      	str	r2, [r3, #16]


		VL53LX_dynamic_xtalk_correction_calc_required_samples(Dev);
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f7ff fbe8 	bl	800a8ae <VL53LX_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 800b0de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0e0:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800b0e4:	61fb      	str	r3, [r7, #28]
			pR->xmonitor.VL53LX_p_009;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800b0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	60fb      	str	r3, [r7, #12]
		current_xtalk = ((uint32_t)cco) << 2;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	009b      	lsls	r3, r3, #2
 800b0f0:	61bb      	str	r3, [r7, #24]


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800b0f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0f4:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	617b      	str	r3, [r7, #20]


		itemp32 = xtalk_offset_in - current_xtalk +
 800b0fa:	69fa      	ldr	r2, [r7, #28]
 800b0fc:	69bb      	ldr	r3, [r7, #24]
 800b0fe:	1ad2      	subs	r2, r2, r3
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	4413      	add	r3, r2
 800b104:	65bb      	str	r3, [r7, #88]	; 0x58
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800b106:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b108:	2b00      	cmp	r3, #0
 800b10a:	da02      	bge.n	800b112 <VL53LX_dynamic_xtalk_correction_corrector+0x2ba>
			itemp32 = itemp32 * (-1);
 800b10c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b10e:	425b      	negs	r3, r3
 800b110:	65bb      	str	r3, [r7, #88]	; 0x58


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800b112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b114:	699b      	ldr	r3, [r3, #24]
 800b116:	461a      	mov	r2, r3
 800b118:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b11a:	4293      	cmp	r3, r2
 800b11c:	dd0c      	ble.n	800b138 <VL53LX_dynamic_xtalk_correction_corrector+0x2e0>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 800b11e:	69ba      	ldr	r2, [r7, #24]
					(int32_t)smudge_margin_adjusted)) {
 800b120:	697b      	ldr	r3, [r7, #20]
				((int32_t)current_xtalk -
 800b122:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 800b124:	69fb      	ldr	r3, [r7, #28]
 800b126:	429a      	cmp	r2, r3
 800b128:	da03      	bge.n	800b132 <VL53LX_dynamic_xtalk_correction_corrector+0x2da>
				pout->single_xtalk_delta_flag = 1;
 800b12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b12c:	2201      	movs	r2, #1
 800b12e:	709a      	strb	r2, [r3, #2]
 800b130:	e002      	b.n	800b138 <VL53LX_dynamic_xtalk_correction_corrector+0x2e0>
			} else {
				pout->single_xtalk_delta_flag = 2;
 800b132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b134:	2202      	movs	r2, #2
 800b136:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 800b138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	1c5a      	adds	r2, r3, #1
 800b13e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b140:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 800b142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b144:	681a      	ldr	r2, [r3, #0]
 800b146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b148:	695b      	ldr	r3, [r3, #20]
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d906      	bls.n	800b15c <VL53LX_dynamic_xtalk_correction_corrector+0x304>
			pout->sample_limit_exceeded_flag = 1;
 800b14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b150:	2201      	movs	r2, #1
 800b152:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 800b154:	2302      	movs	r3, #2
 800b156:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800b15a:	e00d      	b.n	800b178 <VL53LX_dynamic_xtalk_correction_corrector+0x320>
		} else {
			pint->accumulator = pint->accumulator +
 800b15c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b15e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b162:	69fb      	ldr	r3, [r7, #28]
 800b164:	461a      	mov	r2, r3
 800b166:	f04f 0300 	mov.w	r3, #0
 800b16a:	eb10 0802 	adds.w	r8, r0, r2
 800b16e:	eb41 0903 	adc.w	r9, r1, r3
 800b172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b174:	e9c3 8902 	strd	r8, r9, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 800b178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	429a      	cmp	r2, r3
 800b182:	d202      	bcs.n	800b18a <VL53LX_dynamic_xtalk_correction_corrector+0x332>
			continue_processing = CONT_NEXT_LOOP;
 800b184:	2301      	movs	r3, #1
 800b186:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 800b18a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b18c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	461a      	mov	r2, r3
 800b196:	f04f 0300 	mov.w	r3, #0
 800b19a:	f7f5 f8c1 	bl	8000320 <__aeabi_uldivmod>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	460b      	mov	r3, r1
		xtalk_offset_out =
 800b1a2:	4613      	mov	r3, r2
 800b1a4:	653b      	str	r3, [r7, #80]	; 0x50
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 800b1a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b1a8:	69bb      	ldr	r3, [r7, #24]
 800b1aa:	1ad2      	subs	r2, r2, r3
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	4413      	add	r3, r2
 800b1b0:	65bb      	str	r3, [r7, #88]	; 0x58
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800b1b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	da02      	bge.n	800b1be <VL53LX_dynamic_xtalk_correction_corrector+0x366>
			itemp32 = itemp32 * (-1);
 800b1b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b1ba:	425b      	negs	r3, r3
 800b1bc:	65bb      	str	r3, [r7, #88]	; 0x58

		if (continue_processing == CONT_CONTINUE &&
 800b1be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d112      	bne.n	800b1ec <VL53LX_dynamic_xtalk_correction_corrector+0x394>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800b1c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1c8:	69db      	ldr	r3, [r3, #28]
 800b1ca:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800b1cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	db0c      	blt.n	800b1ec <VL53LX_dynamic_xtalk_correction_corrector+0x394>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 800b1d2:	69ba      	ldr	r2, [r7, #24]
					(int32_t)smudge_margin_adjusted))
 800b1d4:	697b      	ldr	r3, [r7, #20]
				((int32_t)current_xtalk -
 800b1d6:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 800b1d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	da03      	bge.n	800b1e6 <VL53LX_dynamic_xtalk_correction_corrector+0x38e>
				pout->averaged_xtalk_delta_flag = 1;
 800b1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	70da      	strb	r2, [r3, #3]
 800b1e4:	e002      	b.n	800b1ec <VL53LX_dynamic_xtalk_correction_corrector+0x394>
			else
				pout->averaged_xtalk_delta_flag = 2;
 800b1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e8:	2202      	movs	r2, #2
 800b1ea:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 800b1ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d108      	bne.n	800b206 <VL53LX_dynamic_xtalk_correction_corrector+0x3ae>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 800b1f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1f6:	69db      	ldr	r3, [r3, #28]
 800b1f8:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800b1fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	da02      	bge.n	800b206 <VL53LX_dynamic_xtalk_correction_corrector+0x3ae>
			)

			continue_processing = CONT_RESET;
 800b200:	2302      	movs	r3, #2
 800b202:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57



		pout->smudge_corr_clipped = 0;
 800b206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b208:	2200      	movs	r2, #0
 800b20a:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 800b20c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b210:	2b00      	cmp	r3, #0
 800b212:	d111      	bne.n	800b238 <VL53LX_dynamic_xtalk_correction_corrector+0x3e0>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800b214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b216:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d00d      	beq.n	800b238 <VL53LX_dynamic_xtalk_correction_corrector+0x3e0>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800b21c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b21e:	6a1b      	ldr	r3, [r3, #32]
 800b220:	7afa      	ldrb	r2, [r7, #11]
 800b222:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 800b226:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b228:	429a      	cmp	r2, r3
 800b22a:	d905      	bls.n	800b238 <VL53LX_dynamic_xtalk_correction_corrector+0x3e0>
				pout->smudge_corr_clipped = 1;
 800b22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b22e:	2201      	movs	r2, #1
 800b230:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 800b232:	2302      	movs	r3, #2
 800b234:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 800b238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b23a:	7c1b      	ldrb	r3, [r3, #16]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d007      	beq.n	800b250 <VL53LX_dynamic_xtalk_correction_corrector+0x3f8>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 800b240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b242:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 800b244:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b246:	429a      	cmp	r2, r3
 800b248:	d902      	bls.n	800b250 <VL53LX_dynamic_xtalk_correction_corrector+0x3f8>
			xtalk_offset_out =
 800b24a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b24c:	68db      	ldr	r3, [r3, #12]
 800b24e:	653b      	str	r3, [r7, #80]	; 0x50
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800b250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b252:	7c1b      	ldrb	r3, [r3, #16]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d107      	bne.n	800b268 <VL53LX_dynamic_xtalk_correction_corrector+0x410>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 800b258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b25a:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800b25c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b25e:	429a      	cmp	r2, r3
 800b260:	d202      	bcs.n	800b268 <VL53LX_dynamic_xtalk_correction_corrector+0x410>
			xtalk_offset_out =
 800b262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b264:	68db      	ldr	r3, [r3, #12]
 800b266:	653b      	str	r3, [r7, #80]	; 0x50
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 800b268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b26a:	089b      	lsrs	r3, r3, #2
 800b26c:	653b      	str	r3, [r7, #80]	; 0x50
		if (xtalk_offset_out > 0x3FFFF)
 800b26e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b270:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b274:	d301      	bcc.n	800b27a <VL53LX_dynamic_xtalk_correction_corrector+0x422>
			xtalk_offset_out = 0x3FFFF;
 800b276:	4b3f      	ldr	r3, [pc, #252]	; (800b374 <VL53LX_dynamic_xtalk_correction_corrector+0x51c>)
 800b278:	653b      	str	r3, [r7, #80]	; 0x50


		if (continue_processing == CONT_CONTINUE) {
 800b27a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d10d      	bne.n	800b29e <VL53LX_dynamic_xtalk_correction_corrector+0x446>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800b282:	2300      	movs	r3, #0
 800b284:	9301      	str	r3, [sp, #4]
 800b286:	2301      	movs	r3, #1
 800b288:	9300      	str	r3, [sp, #0]
 800b28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b28e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f7ff fc33 	bl	800aafc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 800b296:	2302      	movs	r3, #2
 800b298:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800b29c:	e009      	b.n	800b2b2 <VL53LX_dynamic_xtalk_correction_corrector+0x45a>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800b29e:	2301      	movs	r3, #1
 800b2a0:	9301      	str	r3, [sp, #4]
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	9300      	str	r3, [sp, #0]
 800b2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b2aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f7ff fc25 	bl	800aafc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800b2b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b2b6:	2b02      	cmp	r3, #2
 800b2b8:	d10c      	bne.n	800b2d4 <VL53LX_dynamic_xtalk_correction_corrector+0x47c>
			pint->accumulator = 0;
 800b2ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b2bc:	f04f 0200 	mov.w	r2, #0
 800b2c0:	f04f 0300 	mov.w	r3, #0
 800b2c4:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800b2c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800b2ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (run_nodetect == 1) {
 800b2da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	d140      	bne.n	800b364 <VL53LX_dynamic_xtalk_correction_corrector+0x50c>

		pint->nodetect_counter += 1;
 800b2e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2e4:	691b      	ldr	r3, [r3, #16]
 800b2e6:	1c5a      	adds	r2, r3, #1
 800b2e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2ea:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800b2ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2ee:	691a      	ldr	r2, [r3, #16]
 800b2f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d202      	bcs.n	800b2fe <VL53LX_dynamic_xtalk_correction_corrector+0x4a6>
			continue_processing = CONT_NEXT_LOOP;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 800b2fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b302:	653b      	str	r3, [r7, #80]	; 0x50

		if (continue_processing == CONT_CONTINUE) {
 800b304:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d110      	bne.n	800b32e <VL53LX_dynamic_xtalk_correction_corrector+0x4d6>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800b30c:	2300      	movs	r3, #0
 800b30e:	9301      	str	r3, [sp, #4]
 800b310:	2300      	movs	r3, #0
 800b312:	9300      	str	r3, [sp, #0]
 800b314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b316:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b318:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f7ff fbee 	bl	800aafc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 800b320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b322:	2202      	movs	r2, #2
 800b324:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 800b326:	2302      	movs	r3, #2
 800b328:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800b32c:	e009      	b.n	800b342 <VL53LX_dynamic_xtalk_correction_corrector+0x4ea>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800b32e:	2301      	movs	r3, #1
 800b330:	9301      	str	r3, [sp, #4]
 800b332:	2300      	movs	r3, #0
 800b334:	9300      	str	r3, [sp, #0]
 800b336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b338:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b33a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f7ff fbdd 	bl	800aafc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800b342:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b346:	2b02      	cmp	r3, #2
 800b348:	d10c      	bne.n	800b364 <VL53LX_dynamic_xtalk_correction_corrector+0x50c>
			pint->accumulator = 0;
 800b34a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b34c:	f04f 0200 	mov.w	r2, #0
 800b350:	f04f 0300 	mov.w	r3, #0
 800b354:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800b358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b35a:	2200      	movs	r2, #0
 800b35c:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800b35e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b360:	2200      	movs	r2, #0
 800b362:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800b364:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3760      	adds	r7, #96	; 0x60
 800b36c:	46bd      	mov	sp, r7
 800b36e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b372:	bf00      	nop
 800b374:	0003ffff 	.word	0x0003ffff

0800b378 <VL53LX_dynamic_xtalk_correction_data_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_data_init(
	VL53LX_DEV                          Dev
	)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b086      	sub	sp, #24
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b380:	2300      	movs	r3, #0
 800b382:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	3318      	adds	r3, #24
 800b388:	613b      	str	r3, [r7, #16]
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800b390:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b398:	3314      	adds	r3, #20
 800b39a:	2201      	movs	r2, #1
 800b39c:	701a      	strb	r2, [r3, #0]
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b3a4:	3315      	adds	r3, #21
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	701a      	strb	r2, [r3, #0]
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b3b0:	3316      	adds	r3, #22
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b3bc:	3318      	adds	r3, #24
 800b3be:	2200      	movs	r2, #0
 800b3c0:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b3c8:	331c      	adds	r3, #28
 800b3ca:	2264      	movs	r2, #100	; 0x64
 800b3cc:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b3de:	3304      	adds	r3, #4
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b3ea:	3308      	adds	r3, #8
 800b3ec:	22c8      	movs	r2, #200	; 0xc8
 800b3ee:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b3f6:	330c      	adds	r3, #12
 800b3f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b3fc:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b404:	3310      	adds	r3, #16
 800b406:	f44f 729a 	mov.w	r2, #308	; 0x134
 800b40a:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b412:	3314      	adds	r3, #20
 800b414:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b418:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b420:	3318      	adds	r3, #24
 800b422:	2280      	movs	r2, #128	; 0x80
 800b424:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b42c:	331c      	adds	r3, #28
 800b42e:	2200      	movs	r2, #0
 800b430:	701a      	strb	r2, [r3, #0]
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b438:	331e      	adds	r3, #30
 800b43a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b43e:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b446:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b44a:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b452:	3302      	adds	r3, #2
 800b454:	2200      	movs	r2, #0
 800b456:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b45e:	3304      	adds	r3, #4
 800b460:	f04f 725c 	mov.w	r2, #57671680	; 0x3700000
 800b464:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b46c:	3308      	adds	r3, #8
 800b46e:	2228      	movs	r2, #40	; 0x28
 800b470:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b478:	330c      	adds	r3, #12
 800b47a:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 800b47e:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b486:	3310      	adds	r3, #16
 800b488:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b48c:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b494:	3314      	adds	r3, #20
 800b496:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b49a:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b4a2:	3318      	adds	r3, #24
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	601a      	str	r2, [r3, #0]
	pdev->smudge_corrector_internals.required_samples = 0;
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b4ae:	331c      	adds	r3, #28
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	601a      	str	r2, [r3, #0]
	pdev->smudge_corrector_internals.accumulator = 0;
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	f503 519f 	add.w	r1, r3, #5088	; 0x13e0
 800b4ba:	f04f 0200 	mov.w	r2, #0
 800b4be:	f04f 0300 	mov.w	r3, #0
 800b4c2:	e9c1 2300 	strd	r2, r3, [r1]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b4cc:	3308      	adds	r3, #8
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	601a      	str	r2, [r3, #0]


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	f000 f806 	bl	800b4e4 <VL53LX_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800b4d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3718      	adds	r7, #24
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}

0800b4e4 <VL53LX_dynamic_xtalk_correction_output_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_output_init(
	VL53LX_LLDriverResults_t *pres
	)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b085      	sub	sp, #20
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	73fb      	strb	r3, [r7, #15]
	VL53LX_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b4f6:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	2200      	movs	r2, #0
 800b502:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	2200      	movs	r2, #0
 800b508:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	2200      	movs	r2, #0
 800b50e:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	2200      	movs	r2, #0
 800b514:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	2200      	movs	r2, #0
 800b51a:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	2200      	movs	r2, #0
 800b520:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	2200      	movs	r2, #0
 800b526:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	2200      	movs	r2, #0
 800b52c:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	2200      	movs	r2, #0
 800b532:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800b534:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3714      	adds	r7, #20
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr

0800b544 <VL53LX_xtalk_cal_data_init>:


VL53LX_Error VL53LX_xtalk_cal_data_init(
	VL53LX_DEV                          Dev
	)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b084      	sub	sp, #16
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b54c:	2300      	movs	r3, #0
 800b54e:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	3318      	adds	r3, #24
 800b554:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 800b55c:	331c      	adds	r3, #28
 800b55e:	2200      	movs	r2, #0
 800b560:	601a      	str	r2, [r3, #0]
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 800b568:	2200      	movs	r2, #0
 800b56a:	801a      	strh	r2, [r3, #0]
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 800b572:	3302      	adds	r3, #2
 800b574:	2200      	movs	r2, #0
 800b576:	801a      	strh	r2, [r3, #0]
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 800b57e:	3304      	adds	r3, #4
 800b580:	2218      	movs	r2, #24
 800b582:	2100      	movs	r1, #0
 800b584:	4618      	mov	r0, r3
 800b586:	f009 fde3 	bl	8015150 <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800b58a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3710      	adds	r7, #16
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}

0800b596 <VL53LX_low_power_auto_data_init>:


VL53LX_Error VL53LX_low_power_auto_data_init(
	VL53LX_DEV                          Dev
	)
{
 800b596:	b480      	push	{r7}
 800b598:	b085      	sub	sp, #20
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	3318      	adds	r3, #24
 800b5a6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b5ae:	3310      	adds	r3, #16
 800b5b0:	2203      	movs	r2, #3
 800b5b2:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b5ba:	3311      	adds	r3, #17
 800b5bc:	2200      	movs	r2, #0
 800b5be:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b5c6:	3312      	adds	r3, #18
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b5d2:	3313      	adds	r3, #19
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b5de:	3314      	adds	r3, #20
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b5ea:	3315      	adds	r3, #21
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b5f6:	3316      	adds	r3, #22
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b602:	3318      	adds	r3, #24
 800b604:	2200      	movs	r2, #0
 800b606:	601a      	str	r2, [r3, #0]
	pdev->low_power_auto_data.dss__required_spads = 0;
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b60e:	331c      	adds	r3, #28
 800b610:	2200      	movs	r2, #0
 800b612:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800b614:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3714      	adds	r7, #20
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <VL53LX_low_power_auto_data_stop_range>:

VL53LX_Error VL53LX_low_power_auto_data_stop_range(
	VL53LX_DEV                          Dev
	)
{
 800b624:	b480      	push	{r7}
 800b626:	b085      	sub	sp, #20
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b62c:	2300      	movs	r3, #0
 800b62e:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	3318      	adds	r3, #24
 800b634:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b63c:	3312      	adds	r3, #18
 800b63e:	22ff      	movs	r2, #255	; 0xff
 800b640:	701a      	strb	r2, [r3, #0]

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b648:	3316      	adds	r3, #22
 800b64a:	2200      	movs	r2, #0
 800b64c:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b654:	3318      	adds	r3, #24
 800b656:	2200      	movs	r2, #0
 800b658:	601a      	str	r2, [r3, #0]
	pdev->low_power_auto_data.dss__required_spads = 0;
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b660:	331c      	adds	r3, #28
 800b662:	2200      	movs	r2, #0
 800b664:	801a      	strh	r2, [r3, #0]


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b66c:	3314      	adds	r3, #20
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d007      	beq.n	800b684 <VL53LX_low_power_auto_data_stop_range+0x60>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b67a:	3314      	adds	r3, #20
 800b67c:	781a      	ldrb	r2, [r3, #0]
		pdev->stat_nvm.vhv_config__init =
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b68a:	3315      	adds	r3, #21
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d007      	beq.n	800b6a2 <VL53LX_low_power_auto_data_stop_range+0x7e>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b698:	3315      	adds	r3, #21
 800b69a:	781a      	ldrb	r2, [r3, #0]
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0


	pdev->gen_cfg.phasecal_config__override = 0x00;
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327

	LOG_FUNCTION_END(status);

	return status;
 800b6aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3714      	adds	r7, #20
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr

0800b6ba <VL53LX_low_power_auto_setup_manual_calibration>:
	return status;
}

VL53LX_Error VL53LX_low_power_auto_setup_manual_calibration(
	VL53LX_DEV        Dev)
{
 800b6ba:	b480      	push	{r7}
 800b6bc:	b085      	sub	sp, #20
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	3318      	adds	r3, #24
 800b6c6:	60fb      	str	r3, [r7, #12]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f893 22e3 	ldrb.w	r2, [r3, #739]	; 0x2e3
	pdev->low_power_auto_data.saved_vhv_init =
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b6d8:	3314      	adds	r3, #20
 800b6da:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f893 22e0 	ldrb.w	r2, [r3, #736]	; 0x2e0
	pdev->low_power_auto_data.saved_vhv_timeout =
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b6e8:	3315      	adds	r3, #21
 800b6ea:	701a      	strb	r2, [r3, #0]


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f893 32e3 	ldrb.w	r3, [r3, #739]	; 0x2e3
 800b6f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6f6:	b2da      	uxtb	r2, r3
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800b704:	f003 0303 	and.w	r3, r3, #3
 800b708:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b710:	3310      	adds	r3, #16
 800b712:	781b      	ldrb	r3, [r3, #0]
 800b714:	009b      	lsls	r3, r3, #2
 800b716:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b718:	4413      	add	r3, r2
 800b71a:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2201      	movs	r2, #1
 800b726:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 800b730:	331e      	adds	r3, #30
 800b732:	781a      	ldrb	r2, [r3, #0]
	pdev->low_power_auto_data.first_run_phasecal_result =
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b73a:	3316      	adds	r3, #22
 800b73c:	701a      	strb	r2, [r3, #0]
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b744:	3316      	adds	r3, #22
 800b746:	781a      	ldrb	r2, [r3, #0]
	pdev->gen_cfg.cal_config__vcsel_start =
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

	LOG_FUNCTION_END(status);

	return status;
 800b74e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b752:	4618      	mov	r0, r3
 800b754:	3714      	adds	r7, #20
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr

0800b75e <VL53LX_low_power_auto_update_DSS>:

VL53LX_Error VL53LX_low_power_auto_update_DSS(
	VL53LX_DEV        Dev)
{
 800b75e:	b480      	push	{r7}
 800b760:	b087      	sub	sp, #28
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	3318      	adds	r3, #24
 800b76a:	60fb      	str	r3, [r7, #12]

	VL53LX_system_results_t *pS = &(pdev->sys_results);
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f203 3366 	addw	r3, r3, #870	; 0x366
 800b772:	60bb      	str	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b774:	2300      	movs	r3, #0
 800b776:	75fb      	strb	r3, [r7, #23]




	utemp32a =
		pS->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	8a1b      	ldrh	r3, [r3, #16]
 800b77c:	461a      	mov	r2, r3
		 + pS->result__ambient_count_rate_mcps_sd0;
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	891b      	ldrh	r3, [r3, #8]
 800b782:	4413      	add	r3, r2
	utemp32a =
 800b784:	613b      	str	r3, [r7, #16]


	if (utemp32a > 0xFFFF)
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b78c:	d302      	bcc.n	800b794 <VL53LX_low_power_auto_update_DSS+0x36>
		utemp32a = 0xFFFF;
 800b78e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b792:	613b      	str	r3, [r7, #16]



	utemp32a = utemp32a << 16;
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	041b      	lsls	r3, r3, #16
 800b798:	613b      	str	r3, [r7, #16]


	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f8b3 336a 	ldrh.w	r3, [r3, #874]	; 0x36a
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d102      	bne.n	800b7aa <VL53LX_low_power_auto_update_DSS+0x4c>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800b7a4:	23f1      	movs	r3, #241	; 0xf1
 800b7a6:	75fb      	strb	r3, [r7, #23]
 800b7a8:	e03f      	b.n	800b82a <VL53LX_low_power_auto_update_DSS+0xcc>
	else {

		utemp32a = utemp32a /
		pdev->sys_results.result__dss_actual_effective_spads_sd0;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	f8b3 336a 	ldrh.w	r3, [r3, #874]	; 0x36a
 800b7b0:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7b8:	613b      	str	r3, [r7, #16]

		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b7c0:	3318      	adds	r3, #24
 800b7c2:	693a      	ldr	r2, [r7, #16]
 800b7c4:	601a      	str	r2, [r3, #0]
			utemp32a;


		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800b7cc:	041b      	lsls	r3, r3, #16
 800b7ce:	613b      	str	r3, [r7, #16]
			16;


		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b7d6:	3318      	adds	r3, #24
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d102      	bne.n	800b7e4 <VL53LX_low_power_auto_update_DSS+0x86>
				== 0)
			status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800b7de:	23f1      	movs	r3, #241	; 0xf1
 800b7e0:	75fb      	strb	r3, [r7, #23]
 800b7e2:	e022      	b.n	800b82a <VL53LX_low_power_auto_update_DSS+0xcc>
		else {

			utemp32a = utemp32a /
			pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b7ea:	3318      	adds	r3, #24
 800b7ec:	681b      	ldr	r3, [r3, #0]
			utemp32a = utemp32a /
 800b7ee:	693a      	ldr	r2, [r7, #16]
 800b7f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7f4:	613b      	str	r3, [r7, #16]


			if (utemp32a > 0xFFFF)
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7fc:	d302      	bcc.n	800b804 <VL53LX_low_power_auto_update_DSS+0xa6>
				utemp32a = 0xFFFF;
 800b7fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b802:	613b      	str	r3, [r7, #16]


			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b80e:	331c      	adds	r3, #28
 800b810:	801a      	strh	r2, [r3, #0]


			pdev->gen_cfg.dss_config__manual_effective_spads_select
			= pdev->low_power_auto_data.dss__required_spads;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b818:	331c      	adds	r3, #28
 800b81a:	881a      	ldrh	r2, [r3, #0]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
			pdev->gen_cfg.dss_config__roi_mode_control =
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	2202      	movs	r2, #2
 800b826:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53LX_ERROR_DIVISION_BY_ZERO) {
 800b82a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b82e:	f113 0f0f 	cmn.w	r3, #15
 800b832:	d114      	bne.n	800b85e <VL53LX_low_power_auto_update_DSS+0x100>



		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b83a:	331c      	adds	r3, #28
 800b83c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b840:	801a      	strh	r2, [r3, #0]


		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pdev->low_power_auto_data.dss__required_spads;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b848:	331c      	adds	r3, #28
 800b84a:	881a      	ldrh	r2, [r3, #0]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
		pdev->gen_cfg.dss_config__roi_mode_control =
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	2202      	movs	r2, #2
 800b856:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;


		status = VL53LX_ERROR_NONE;
 800b85a:	2300      	movs	r3, #0
 800b85c:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b85e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b862:	4618      	mov	r0, r3
 800b864:	371c      	adds	r7, #28
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr

0800b86e <VL53LX_compute_histo_merge_nb>:



VL53LX_Error VL53LX_compute_histo_merge_nb(
	VL53LX_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800b86e:	b480      	push	{r7}
 800b870:	b087      	sub	sp, #28
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
 800b876:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	3318      	adds	r3, #24
 800b87c:	613b      	str	r3, [r7, #16]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b87e:	2300      	movs	r3, #0
 800b880:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800b882:	2300      	movs	r3, #0
 800b884:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 800b88c:	2b07      	cmp	r3, #7
 800b88e:	bf0c      	ite	eq
 800b890:	2301      	moveq	r3, #1
 800b892:	2300      	movne	r3, #0
 800b894:	b2db      	uxtb	r3, r3
 800b896:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800b898:	2300      	movs	r3, #0
 800b89a:	75fb      	strb	r3, [r7, #23]
 800b89c:	e019      	b.n	800b8d2 <VL53LX_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800b89e:	7df9      	ldrb	r1, [r7, #23]
 800b8a0:	7bbb      	ldrb	r3, [r7, #14]
 800b8a2:	6938      	ldr	r0, [r7, #16]
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	0052      	lsls	r2, r2, #1
 800b8a8:	441a      	add	r2, r3
 800b8aa:	0153      	lsls	r3, r2, #5
 800b8ac:	461a      	mov	r2, r3
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	005b      	lsls	r3, r3, #1
 800b8b2:	440b      	add	r3, r1
 800b8b4:	019b      	lsls	r3, r3, #6
 800b8b6:	4413      	add	r3, r2
 800b8b8:	4403      	add	r3, r0
 800b8ba:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800b8be:	330c      	adds	r3, #12
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	dd02      	ble.n	800b8cc <VL53LX_compute_histo_merge_nb+0x5e>
			sum++;
 800b8c6:	7dbb      	ldrb	r3, [r7, #22]
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800b8cc:	7dfb      	ldrb	r3, [r7, #23]
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	75fb      	strb	r3, [r7, #23]
 800b8d2:	7dfb      	ldrb	r3, [r7, #23]
 800b8d4:	2b05      	cmp	r3, #5
 800b8d6:	d9e2      	bls.n	800b89e <VL53LX_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	7dba      	ldrb	r2, [r7, #22]
 800b8dc:	701a      	strb	r2, [r3, #0]

	return status;
 800b8de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	371c      	adds	r7, #28
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ec:	4770      	bx	lr

0800b8ee <VL53LX_calc_pll_period_us>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53LX_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800b8ee:	b480      	push	{r7}
 800b8f0:	b085      	sub	sp, #20
 800b8f2:	af00      	add	r7, sp, #0
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800b8fc:	88fb      	ldrh	r3, [r7, #6]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d005      	beq.n	800b90e <VL53LX_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800b902:	88fb      	ldrh	r3, [r7, #6]
 800b904:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b908:	fb92 f3f3 	sdiv	r3, r2, r3
 800b90c:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800b90e:	68fb      	ldr	r3, [r7, #12]
}
 800b910:	4618      	mov	r0, r3
 800b912:	3714      	adds	r7, #20
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr

0800b91c <VL53LX_duration_maths>:
uint32_t  VL53LX_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b089      	sub	sp, #36	; 0x24
 800b920:	af00      	add	r7, sp, #0
 800b922:	60f8      	str	r0, [r7, #12]
 800b924:	60b9      	str	r1, [r7, #8]
 800b926:	607a      	str	r2, [r7, #4]
 800b928:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800b92a:	f04f 0200 	mov.w	r2, #0
 800b92e:	f04f 0300 	mov.w	r3, #0
 800b932:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800b936:	2300      	movs	r3, #0
 800b938:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	68fa      	ldr	r2, [r7, #12]
 800b93e:	fb02 f303 	mul.w	r3, r2, r3
 800b942:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	0b1b      	lsrs	r3, r3, #12
 800b948:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	461a      	mov	r2, r3
 800b94e:	f04f 0300 	mov.w	r3, #0
 800b952:	e9c7 2306 	strd	r2, r3, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	68ba      	ldr	r2, [r7, #8]
 800b95a:	fb02 f303 	mul.w	r3, r2, r3
 800b95e:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	091b      	lsrs	r3, r3, #4
 800b964:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	461a      	mov	r2, r3
 800b96a:	f04f 0300 	mov.w	r3, #0
 800b96e:	69f9      	ldr	r1, [r7, #28]
 800b970:	fb02 f001 	mul.w	r0, r2, r1
 800b974:	69b9      	ldr	r1, [r7, #24]
 800b976:	fb03 f101 	mul.w	r1, r3, r1
 800b97a:	4401      	add	r1, r0
 800b97c:	69b8      	ldr	r0, [r7, #24]
 800b97e:	fba0 2302 	umull	r2, r3, r0, r2
 800b982:	4419      	add	r1, r3
 800b984:	460b      	mov	r3, r1
 800b986:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800b98a:	e9c7 2306 	strd	r2, r3, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800b98e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b992:	f04f 0200 	mov.w	r2, #0
 800b996:	f04f 0300 	mov.w	r3, #0
 800b99a:	0b02      	lsrs	r2, r0, #12
 800b99c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800b9a0:	0b0b      	lsrs	r3, r1, #12
 800b9a2:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800b9a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	bf08      	it	eq
 800b9ae:	2a00      	cmpeq	r2, #0
 800b9b0:	d305      	bcc.n	800b9be <VL53LX_duration_maths+0xa2>
		tmp_long_int = 0xFFFFFFFF;
 800b9b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b9b6:	f04f 0300 	mov.w	r3, #0
 800b9ba:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800b9be:	69bb      	ldr	r3, [r7, #24]
 800b9c0:	617b      	str	r3, [r7, #20]

	return duration_us;
 800b9c2:	697b      	ldr	r3, [r7, #20]
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3724      	adds	r7, #36	; 0x24
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ce:	4770      	bx	lr

0800b9d0 <VL53LX_events_per_spad_maths>:

uint32_t VL53LX_events_per_spad_maths(
	int32_t   VL53LX_p_010,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800b9d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b9d4:	b08e      	sub	sp, #56	; 0x38
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	60f8      	str	r0, [r7, #12]
 800b9da:	460b      	mov	r3, r1
 800b9dc:	607a      	str	r2, [r7, #4]
 800b9de:	817b      	strh	r3, [r7, #10]
	uint64_t total_hist_counts  = 0;
 800b9e0:	f04f 0200 	mov.w	r2, #0
 800b9e4:	f04f 0300 	mov.w	r3, #0
 800b9e8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	uint64_t xtalk_per_spad     = 0;
 800b9ec:	f04f 0200 	mov.w	r2, #0
 800b9f0:	f04f 0300 	mov.w	r3, #0
 800b9f4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	uint32_t rate_per_spad_kcps = 0;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	627b      	str	r3, [r7, #36]	; 0x24





	uint64_t dividend = ((uint64_t)VL53LX_p_010
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	4618      	mov	r0, r3
 800ba00:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800ba04:	4602      	mov	r2, r0
 800ba06:	460b      	mov	r3, r1
 800ba08:	f04f 0400 	mov.w	r4, #0
 800ba0c:	f04f 0500 	mov.w	r5, #0
 800ba10:	015d      	lsls	r5, r3, #5
 800ba12:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800ba16:	0154      	lsls	r4, r2, #5
 800ba18:	4622      	mov	r2, r4
 800ba1a:	462b      	mov	r3, r5
 800ba1c:	1a12      	subs	r2, r2, r0
 800ba1e:	eb63 0301 	sbc.w	r3, r3, r1
 800ba22:	f04f 0400 	mov.w	r4, #0
 800ba26:	f04f 0500 	mov.w	r5, #0
 800ba2a:	009d      	lsls	r5, r3, #2
 800ba2c:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800ba30:	0094      	lsls	r4, r2, #2
 800ba32:	4622      	mov	r2, r4
 800ba34:	462b      	mov	r3, r5
 800ba36:	1812      	adds	r2, r2, r0
 800ba38:	eb41 0303 	adc.w	r3, r1, r3
 800ba3c:	f04f 0000 	mov.w	r0, #0
 800ba40:	f04f 0100 	mov.w	r1, #0
 800ba44:	02d9      	lsls	r1, r3, #11
 800ba46:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800ba4a:	02d0      	lsls	r0, r2, #11
 800ba4c:	4602      	mov	r2, r0
 800ba4e:	460b      	mov	r3, r1
 800ba50:	e9c7 2306 	strd	r2, r3, [r7, #24]
			* 1000 * 256);

	if (num_spads != 0)
 800ba54:	897b      	ldrh	r3, [r7, #10]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d00a      	beq.n	800ba70 <VL53LX_events_per_spad_maths+0xa0>
		total_hist_counts = do_division_u(
 800ba5a:	897a      	ldrh	r2, [r7, #10]
 800ba5c:	f04f 0300 	mov.w	r3, #0
 800ba60:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ba64:	f7f4 fc5c 	bl	8000320 <__aeabi_uldivmod>
 800ba68:	4602      	mov	r2, r0
 800ba6a:	460b      	mov	r3, r1
 800ba6c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d021      	beq.n	800baba <VL53LX_events_per_spad_maths+0xea>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800ba76:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800ba7a:	f04f 0200 	mov.w	r2, #0
 800ba7e:	f04f 0300 	mov.w	r3, #0
 800ba82:	02cb      	lsls	r3, r1, #11
 800ba84:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800ba88:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800ba8a:	6879      	ldr	r1, [r7, #4]
 800ba8c:	0849      	lsrs	r1, r1, #1
 800ba8e:	4608      	mov	r0, r1
 800ba90:	f04f 0100 	mov.w	r1, #0
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800ba94:	eb12 0800 	adds.w	r8, r2, r0
 800ba98:	eb43 0901 	adc.w	r9, r3, r1
 800ba9c:	e9c7 8904 	strd	r8, r9, [r7, #16]

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	461a      	mov	r2, r3
 800baa4:	f04f 0300 	mov.w	r3, #0
 800baa8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800baac:	f7f4 fc38 	bl	8000320 <__aeabi_uldivmod>
 800bab0:	4602      	mov	r2, r0
 800bab2:	460b      	mov	r3, r1
 800bab4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800bab8:	e00b      	b.n	800bad2 <VL53LX_events_per_spad_maths+0x102>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800baba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800babe:	f04f 0200 	mov.w	r2, #0
 800bac2:	f04f 0300 	mov.w	r3, #0
 800bac6:	02cb      	lsls	r3, r1, #11
 800bac8:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800bacc:	02c2      	lsls	r2, r0, #11
 800bace:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800bad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad4:	627b      	str	r3, [r7, #36]	; 0x24

	return rate_per_spad_kcps;
 800bad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3738      	adds	r7, #56	; 0x38
 800badc:	46bd      	mov	sp, r7
 800bade:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800bae2 <VL53LX_isqrt>:


uint32_t VL53LX_isqrt(uint32_t num)
{
 800bae2:	b480      	push	{r7}
 800bae4:	b085      	sub	sp, #20
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800baea:	2300      	movs	r3, #0
 800baec:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800baee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800baf2:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800baf4:	e002      	b.n	800bafc <VL53LX_isqrt+0x1a>
		bit >>= 2;
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	089b      	lsrs	r3, r3, #2
 800bafa:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800bafc:	68ba      	ldr	r2, [r7, #8]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d8f8      	bhi.n	800baf6 <VL53LX_isqrt+0x14>

	while (bit != 0) {
 800bb04:	e017      	b.n	800bb36 <VL53LX_isqrt+0x54>
		if (num >= res + bit)  {
 800bb06:	68fa      	ldr	r2, [r7, #12]
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	4413      	add	r3, r2
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d30b      	bcc.n	800bb2a <VL53LX_isqrt+0x48>
			num -= res + bit;
 800bb12:	68fa      	ldr	r2, [r7, #12]
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	4413      	add	r3, r2
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	1ad3      	subs	r3, r2, r3
 800bb1c:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	085b      	lsrs	r3, r3, #1
 800bb22:	68ba      	ldr	r2, [r7, #8]
 800bb24:	4413      	add	r3, r2
 800bb26:	60fb      	str	r3, [r7, #12]
 800bb28:	e002      	b.n	800bb30 <VL53LX_isqrt+0x4e>
		} else {
			res >>= 1;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	085b      	lsrs	r3, r3, #1
 800bb2e:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	089b      	lsrs	r3, r3, #2
 800bb34:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d1e4      	bne.n	800bb06 <VL53LX_isqrt+0x24>
	}

	return res;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3714      	adds	r7, #20
 800bb42:	46bd      	mov	sp, r7
 800bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb48:	4770      	bx	lr

0800bb4a <VL53LX_hist_calc_zero_distance_phase>:


void  VL53LX_hist_calc_zero_distance_phase(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800bb4a:	b580      	push	{r7, lr}
 800bb4c:	b084      	sub	sp, #16
 800bb4e:	af00      	add	r7, sp, #0
 800bb50:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800bb52:	2300      	movs	r3, #0
 800bb54:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53LX_p_014         = 0;
 800bb56:	2300      	movs	r3, #0
 800bb58:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata->VL53LX_p_005);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bb60:	4618      	mov	r0, r3
 800bb62:	f000 fa97 	bl	800c094 <VL53LX_decode_vcsel_period>
 800bb66:	4603      	mov	r3, r0
	period = 2048 *
 800bb68:	02db      	lsls	r3, r3, #11
 800bb6a:	60bb      	str	r3, [r7, #8]

	VL53LX_p_014  = period;
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (uint32_t)pdata->phasecal_result__reference_phase;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800bb76:	461a      	mov	r2, r3
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	4413      	add	r3, r2
 800bb7c:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bb84:	02db      	lsls	r3, r3, #11
 800bb86:	68fa      	ldr	r2, [r7, #12]
 800bb88:	4413      	add	r3, r2
 800bb8a:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bb92:	02db      	lsls	r3, r3, #11
 800bb94:	68fa      	ldr	r2, [r7, #12]
 800bb96:	1ad3      	subs	r3, r2, r3
 800bb98:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d009      	beq.n	800bbb4 <VL53LX_hist_calc_zero_distance_phase+0x6a>
		VL53LX_p_014  = VL53LX_p_014 % period;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	68ba      	ldr	r2, [r7, #8]
 800bba4:	fbb3 f2f2 	udiv	r2, r3, r2
 800bba8:	68b9      	ldr	r1, [r7, #8]
 800bbaa:	fb01 f202 	mul.w	r2, r1, r2
 800bbae:	1a9b      	subs	r3, r3, r2
 800bbb0:	60fb      	str	r3, [r7, #12]
 800bbb2:	e001      	b.n	800bbb8 <VL53LX_hist_calc_zero_distance_phase+0x6e>
	else
		VL53LX_p_014 = 0;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53LX_p_014;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	b29a      	uxth	r2, r3
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	LOG_FUNCTION_END(0);
}
 800bbc2:	bf00      	nop
 800bbc4:	3710      	adds	r7, #16
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}

0800bbca <VL53LX_hist_estimate_ambient_from_thresholded_bins>:


void  VL53LX_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53LX_histogram_bin_data_t   *pdata)
{
 800bbca:	b580      	push	{r7, lr}
 800bbcc:	b084      	sub	sp, #16
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
 800bbd2:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53LX_p_031 = 0;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53LX_hist_find_min_max_bin_values(pdata);
 800bbdc:	6838      	ldr	r0, [r7, #0]
 800bbde:	f000 fb82 	bl	800c2e6 <VL53LX_hist_find_min_max_bin_values>



	VL53LX_p_031  =
		(int32_t)VL53LX_isqrt((uint32_t)pdata->min_bin_value);
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7ff ff7a 	bl	800bae2 <VL53LX_isqrt>
 800bbee:	4603      	mov	r3, r0
	VL53LX_p_031  =
 800bbf0:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 *= ambient_threshold_sigma;
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	fb02 f303 	mul.w	r3, r2, r3
 800bbfa:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += 0x07;
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	3307      	adds	r3, #7
 800bc00:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031  = VL53LX_p_031 >> 4;
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	111b      	asrs	r3, r3, #4
 800bc06:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += pdata->min_bin_value;
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc0e:	68ba      	ldr	r2, [r7, #8]
 800bc10:	4413      	add	r3, r2
 800bc12:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	2200      	movs	r2, #0
 800bc18:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum        = 0;
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800bc24:	2300      	movs	r3, #0
 800bc26:	73fb      	strb	r3, [r7, #15]
 800bc28:	e01e      	b.n	800bc68 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53LX_p_031) {
 800bc2a:	7bfa      	ldrb	r2, [r7, #15]
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	3206      	adds	r2, #6
 800bc30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc34:	68ba      	ldr	r2, [r7, #8]
 800bc36:	429a      	cmp	r2, r3
 800bc38:	dd13      	ble.n	800bc62 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800bc40:	7bf9      	ldrb	r1, [r7, #15]
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	3106      	adds	r1, #6
 800bc46:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bc4a:	441a      	add	r2, r3
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800bc58:	3301      	adds	r3, #1
 800bc5a:	b2da      	uxtb	r2, r3
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800bc62:	7bfb      	ldrb	r3, [r7, #15]
 800bc64:	3301      	adds	r3, #1
 800bc66:	73fb      	strb	r3, [r7, #15]
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	7a9b      	ldrb	r3, [r3, #10]
 800bc6c:	7bfa      	ldrb	r2, [r7, #15]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d3db      	bcc.n	800bc2a <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d01c      	beq.n	800bcb6 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53LX_p_028 =
			pdata->ambient_events_sum;
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		pdata->VL53LX_p_028 =
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 +=
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800bc8e:	683a      	ldr	r2, [r7, #0]
 800bc90:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 800bc94:	0852      	lsrs	r2, r2, #1
 800bc96:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800bc98:	441a      	add	r2, r3
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 /=
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800bca6:	683a      	ldr	r2, [r7, #0]
 800bca8:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
		pdata->VL53LX_p_028 /=
 800bcac:	fb93 f2f2 	sdiv	r2, r3, r2
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800bcb6:	bf00      	nop
 800bcb8:	3710      	adds	r7, #16
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}

0800bcbe <VL53LX_hist_remove_ambient_bins>:


void  VL53LX_hist_remove_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800bcbe:	b480      	push	{r7}
 800bcc0:	b085      	sub	sp, #20
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800bcca:	2300      	movs	r3, #0
 800bccc:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	7b1b      	ldrb	r3, [r3, #12]
 800bcd6:	f003 0307 	and.w	r3, r3, #7
 800bcda:	2b07      	cmp	r3, #7
 800bcdc:	d13a      	bne.n	800bd54 <VL53LX_hist_remove_ambient_bins+0x96>

		i = 0;
 800bcde:	2300      	movs	r3, #0
 800bce0:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800bce2:	2300      	movs	r3, #0
 800bce4:	73bb      	strb	r3, [r7, #14]
 800bce6:	e01f      	b.n	800bd28 <VL53LX_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800bce8:	7bbb      	ldrb	r3, [r7, #14]
 800bcea:	687a      	ldr	r2, [r7, #4]
 800bcec:	4413      	add	r3, r2
 800bcee:	7b1b      	ldrb	r3, [r3, #12]
 800bcf0:	f003 0307 	and.w	r3, r3, #7
 800bcf4:	2b07      	cmp	r3, #7
 800bcf6:	d014      	beq.n	800bd22 <VL53LX_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800bcf8:	7bba      	ldrb	r2, [r7, #14]
 800bcfa:	7b7b      	ldrb	r3, [r7, #13]
 800bcfc:	6879      	ldr	r1, [r7, #4]
 800bcfe:	440a      	add	r2, r1
 800bd00:	7b11      	ldrb	r1, [r2, #12]
 800bd02:	687a      	ldr	r2, [r7, #4]
 800bd04:	4413      	add	r3, r2
 800bd06:	460a      	mov	r2, r1
 800bd08:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800bd0a:	7bba      	ldrb	r2, [r7, #14]
 800bd0c:	7b7b      	ldrb	r3, [r7, #13]
 800bd0e:	6879      	ldr	r1, [r7, #4]
 800bd10:	440a      	add	r2, r1
 800bd12:	7c91      	ldrb	r1, [r2, #18]
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	4413      	add	r3, r2
 800bd18:	460a      	mov	r2, r1
 800bd1a:	749a      	strb	r2, [r3, #18]
				i++;
 800bd1c:	7b7b      	ldrb	r3, [r7, #13]
 800bd1e:	3301      	adds	r3, #1
 800bd20:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800bd22:	7bbb      	ldrb	r3, [r7, #14]
 800bd24:	3301      	adds	r3, #1
 800bd26:	73bb      	strb	r3, [r7, #14]
 800bd28:	7bbb      	ldrb	r3, [r7, #14]
 800bd2a:	2b05      	cmp	r3, #5
 800bd2c:	d9dc      	bls.n	800bce8 <VL53LX_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800bd2e:	7b7b      	ldrb	r3, [r7, #13]
 800bd30:	73bb      	strb	r3, [r7, #14]
 800bd32:	e00c      	b.n	800bd4e <VL53LX_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE + 1;
 800bd34:	7bbb      	ldrb	r3, [r7, #14]
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	4413      	add	r3, r2
 800bd3a:	2210      	movs	r2, #16
 800bd3c:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800bd3e:	7bbb      	ldrb	r3, [r7, #14]
 800bd40:	687a      	ldr	r2, [r7, #4]
 800bd42:	4413      	add	r3, r2
 800bd44:	2200      	movs	r2, #0
 800bd46:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800bd48:	7bbb      	ldrb	r3, [r7, #14]
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	73bb      	strb	r3, [r7, #14]
 800bd4e:	7bbb      	ldrb	r3, [r7, #14]
 800bd50:	2b05      	cmp	r3, #5
 800bd52:	d9ef      	bls.n	800bd34 <VL53LX_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	7adb      	ldrb	r3, [r3, #11]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d023      	beq.n	800bda4 <VL53LX_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	7adb      	ldrb	r3, [r3, #11]
 800bd60:	73fb      	strb	r3, [r7, #15]
 800bd62:	e00f      	b.n	800bd84 <VL53LX_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53LX_p_020; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800bd64:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800bd66:	7bfb      	ldrb	r3, [r7, #15]
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	7ad2      	ldrb	r2, [r2, #11]
 800bd6c:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	3106      	adds	r1, #6
 800bd72:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	3206      	adds	r2, #6
 800bd7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53LX_p_020; bin++) {
 800bd7e:	7bfb      	ldrb	r3, [r7, #15]
 800bd80:	3301      	adds	r3, #1
 800bd82:	73fb      	strb	r3, [r7, #15]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	7a5b      	ldrb	r3, [r3, #9]
		for (bin = pdata->number_of_ambient_bins;
 800bd88:	7bfa      	ldrb	r2, [r7, #15]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d3ea      	bcc.n	800bd64 <VL53LX_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53LX_p_021 =
				pdata->VL53LX_p_021 -
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53LX_p_021 -
 800bd96:	1ad3      	subs	r3, r2, r3
 800bd98:	b2da      	uxtb	r2, r3
		pdata->VL53LX_p_021 =
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2200      	movs	r2, #0
 800bda2:	72da      	strb	r2, [r3, #11]
	}
}
 800bda4:	bf00      	nop
 800bda6:	3714      	adds	r7, #20
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr

0800bdb0 <VL53LX_calc_pll_period_mm>:


uint32_t VL53LX_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b084      	sub	sp, #16
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800bdc2:	88fb      	ldrh	r3, [r7, #6]
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f7ff fd92 	bl	800b8ee <VL53LX_calc_pll_period_us>
 800bdca:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800bdd0:	f249 2257 	movw	r2, #37463	; 0x9257
 800bdd4:	fb02 f303 	mul.w	r3, r2, r3
 800bdd8:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bde0:	0c1b      	lsrs	r3, r3, #16
 800bde2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800bde4:	68bb      	ldr	r3, [r7, #8]
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3710      	adds	r7, #16
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}

0800bdee <VL53LX_rate_maths>:


uint16_t VL53LX_rate_maths(
	int32_t   VL53LX_p_018,
	uint32_t  time_us)
{
 800bdee:	b480      	push	{r7}
 800bdf0:	b087      	sub	sp, #28
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
 800bdf6:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800bdfc:	2307      	movs	r3, #7
 800bdfe:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800be00:	2300      	movs	r3, #0
 800be02:	81fb      	strh	r3, [r7, #14]



	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_MAX)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be0a:	db03      	blt.n	800be14 <VL53LX_rate_maths+0x26>
		tmp_int = VL53LX_SPAD_TOTAL_COUNT_MAX;
 800be0c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800be10:	617b      	str	r3, [r7, #20]
 800be12:	e004      	b.n	800be1e <VL53LX_rate_maths+0x30>
	else if (VL53LX_p_018 > 0)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2b00      	cmp	r3, #0
 800be18:	dd01      	ble.n	800be1e <VL53LX_rate_maths+0x30>
		tmp_int = (uint32_t)VL53LX_p_018;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	617b      	str	r3, [r7, #20]




	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800be24:	dd02      	ble.n	800be2c <VL53LX_rate_maths+0x3e>
		frac_bits = 3;
 800be26:	2303      	movs	r3, #3
 800be28:	613b      	str	r3, [r7, #16]
 800be2a:	e001      	b.n	800be30 <VL53LX_rate_maths+0x42>
	else
		frac_bits = 7;
 800be2c:	2307      	movs	r3, #7
 800be2e:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d009      	beq.n	800be4a <VL53LX_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800be36:	697a      	ldr	r2, [r7, #20]
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	409a      	lsls	r2, r3
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	085b      	lsrs	r3, r3, #1
 800be40:	441a      	add	r2, r3
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	fbb2 f3f3 	udiv	r3, r2, r3
 800be48:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800be50:	dd02      	ble.n	800be58 <VL53LX_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	011b      	lsls	r3, r3, #4
 800be56:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be5e:	d302      	bcc.n	800be66 <VL53LX_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800be60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be64:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800be6a:	89fb      	ldrh	r3, [r7, #14]
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	371c      	adds	r7, #28
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <VL53LX_rate_per_spad_maths>:
uint16_t VL53LX_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800be78:	b480      	push	{r7}
 800be7a:	b087      	sub	sp, #28
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	60f8      	str	r0, [r7, #12]
 800be80:	60b9      	str	r1, [r7, #8]
 800be82:	603b      	str	r3, [r7, #0]
 800be84:	4613      	mov	r3, r2
 800be86:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800be88:	2300      	movs	r3, #0
 800be8a:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800be8c:	2300      	movs	r3, #0
 800be8e:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800be90:	88fb      	ldrh	r3, [r7, #6]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d010      	beq.n	800beb8 <VL53LX_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	021a      	lsls	r2, r3, #8
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	fa02 f303 	lsl.w	r3, r2, r3
 800bea0:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800bea2:	88fb      	ldrh	r3, [r7, #6]
 800bea4:	085b      	lsrs	r3, r3, #1
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800beae:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800beb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800beb4:	617b      	str	r3, [r7, #20]
 800beb6:	e004      	b.n	800bec2 <VL53LX_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800beb8:	68ba      	ldr	r2, [r7, #8]
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	fa02 f303 	lsl.w	r3, r2, r3
 800bec0:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800bec2:	697a      	ldr	r2, [r7, #20]
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d901      	bls.n	800bece <VL53LX_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800bed2:	8a7b      	ldrh	r3, [r7, #18]
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	371c      	adds	r7, #28
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr

0800bee0 <VL53LX_range_maths>:
	uint16_t  VL53LX_p_014,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800bee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bee2:	b089      	sub	sp, #36	; 0x24
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	4606      	mov	r6, r0
 800bee8:	4608      	mov	r0, r1
 800beea:	4611      	mov	r1, r2
 800beec:	461a      	mov	r2, r3
 800beee:	4633      	mov	r3, r6
 800bef0:	80fb      	strh	r3, [r7, #6]
 800bef2:	4603      	mov	r3, r0
 800bef4:	80bb      	strh	r3, [r7, #4]
 800bef6:	460b      	mov	r3, r1
 800bef8:	807b      	strh	r3, [r7, #2]
 800befa:	4613      	mov	r3, r2
 800befc:	707b      	strb	r3, [r7, #1]


	uint32_t    pll_period_us = 0;
 800befe:	2300      	movs	r3, #0
 800bf00:	61bb      	str	r3, [r7, #24]
	int64_t     tmp_long_int  = 0;
 800bf02:	f04f 0200 	mov.w	r2, #0
 800bf06:	f04f 0300 	mov.w	r3, #0
 800bf0a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int32_t     range_mm      = 0;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	61fb      	str	r3, [r7, #28]
	int32_t     range_mm_10   = 0;
 800bf12:	2300      	movs	r3, #0
 800bf14:	60fb      	str	r3, [r7, #12]



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800bf16:	88fb      	ldrh	r3, [r7, #6]
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f7ff fce8 	bl	800b8ee <VL53LX_calc_pll_period_us>
 800bf1e:	61b8      	str	r0, [r7, #24]



	tmp_long_int = (int64_t)VL53LX_p_014 - (int64_t)zero_distance_phase;
 800bf20:	88b8      	ldrh	r0, [r7, #4]
 800bf22:	f04f 0100 	mov.w	r1, #0
 800bf26:	887a      	ldrh	r2, [r7, #2]
 800bf28:	f04f 0300 	mov.w	r3, #0
 800bf2c:	1a84      	subs	r4, r0, r2
 800bf2e:	eb61 0503 	sbc.w	r5, r1, r3
 800bf32:	e9c7 4504 	strd	r4, r5, [r7, #16]



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800bf36:	69bb      	ldr	r3, [r7, #24]
 800bf38:	461a      	mov	r2, r3
 800bf3a:	f04f 0300 	mov.w	r3, #0
 800bf3e:	6979      	ldr	r1, [r7, #20]
 800bf40:	fb02 f001 	mul.w	r0, r2, r1
 800bf44:	6939      	ldr	r1, [r7, #16]
 800bf46:	fb03 f101 	mul.w	r1, r3, r1
 800bf4a:	4401      	add	r1, r0
 800bf4c:	6938      	ldr	r0, [r7, #16]
 800bf4e:	fba0 2302 	umull	r2, r3, r0, r2
 800bf52:	4419      	add	r1, r3
 800bf54:	460b      	mov	r3, r1
 800bf56:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800bf5a:	e9c7 2304 	strd	r2, r3, [r7, #16]



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800bf5e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bf62:	2a00      	cmp	r2, #0
 800bf64:	f173 0100 	sbcs.w	r1, r3, #0
 800bf68:	da06      	bge.n	800bf78 <VL53LX_range_maths+0x98>
 800bf6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800bf6e:	f04f 0100 	mov.w	r1, #0
 800bf72:	1812      	adds	r2, r2, r0
 800bf74:	eb41 0303 	adc.w	r3, r1, r3
 800bf78:	f04f 0000 	mov.w	r0, #0
 800bf7c:	f04f 0100 	mov.w	r1, #0
 800bf80:	0a50      	lsrs	r0, r2, #9
 800bf82:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800bf86:	1259      	asrs	r1, r3, #9
 800bf88:	e9c7 0104 	strd	r0, r1, [r7, #16]



	tmp_long_int =  tmp_long_int * VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	f249 2257 	movw	r2, #37463	; 0x9257
 800bf92:	fb02 f203 	mul.w	r2, r2, r3
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	2100      	movs	r1, #0
 800bf9a:	fb01 f303 	mul.w	r3, r1, r3
 800bf9e:	18d1      	adds	r1, r2, r3
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	f249 2257 	movw	r2, #37463	; 0x9257
 800bfa6:	fba3 2302 	umull	r2, r3, r3, r2
 800bfaa:	4419      	add	r1, r3
 800bfac:	460b      	mov	r3, r1
 800bfae:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800bfb2:	e9c7 2304 	strd	r2, r3, [r7, #16]



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800bfb6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bfba:	2a00      	cmp	r2, #0
 800bfbc:	f173 0100 	sbcs.w	r1, r3, #0
 800bfc0:	da05      	bge.n	800bfce <VL53LX_range_maths+0xee>
 800bfc2:	4832      	ldr	r0, [pc, #200]	; (800c08c <VL53LX_range_maths+0x1ac>)
 800bfc4:	f04f 0100 	mov.w	r1, #0
 800bfc8:	1812      	adds	r2, r2, r0
 800bfca:	eb41 0303 	adc.w	r3, r1, r3
 800bfce:	f04f 0000 	mov.w	r0, #0
 800bfd2:	f04f 0100 	mov.w	r1, #0
 800bfd6:	0d90      	lsrs	r0, r2, #22
 800bfd8:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800bfdc:	1599      	asrs	r1, r3, #22
 800bfde:	e9c7 0104 	strd	r0, r1, [r7, #16]


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bfe6:	4413      	add	r3, r2
 800bfe8:	61fb      	str	r3, [r7, #28]


	range_mm *= gain_factor;
 800bfea:	69fb      	ldr	r3, [r7, #28]
 800bfec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfee:	fb02 f303 	mul.w	r3, r2, r3
 800bff2:	61fb      	str	r3, [r7, #28]
	range_mm += 0x0400;
 800bff4:	69fb      	ldr	r3, [r7, #28]
 800bff6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bffa:	61fb      	str	r3, [r7, #28]
	range_mm /= 0x0800;
 800bffc:	69fb      	ldr	r3, [r7, #28]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	da01      	bge.n	800c006 <VL53LX_range_maths+0x126>
 800c002:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800c006:	12db      	asrs	r3, r3, #11
 800c008:	61fb      	str	r3, [r7, #28]


	if (fractional_bits == 0) {
 800c00a:	787b      	ldrb	r3, [r7, #1]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d130      	bne.n	800c072 <VL53LX_range_maths+0x192>
		range_mm_10 = range_mm * 10;
 800c010:	69fa      	ldr	r2, [r7, #28]
 800c012:	4613      	mov	r3, r2
 800c014:	009b      	lsls	r3, r3, #2
 800c016:	4413      	add	r3, r2
 800c018:	005b      	lsls	r3, r3, #1
 800c01a:	60fb      	str	r3, [r7, #12]
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	da00      	bge.n	800c024 <VL53LX_range_maths+0x144>
 800c022:	3303      	adds	r3, #3
 800c024:	109b      	asrs	r3, r3, #2
 800c026:	60fb      	str	r3, [r7, #12]
		if ((range_mm_10 % 10) < 5)
 800c028:	68f9      	ldr	r1, [r7, #12]
 800c02a:	4b19      	ldr	r3, [pc, #100]	; (800c090 <VL53LX_range_maths+0x1b0>)
 800c02c:	fb83 2301 	smull	r2, r3, r3, r1
 800c030:	109a      	asrs	r2, r3, #2
 800c032:	17cb      	asrs	r3, r1, #31
 800c034:	1ad2      	subs	r2, r2, r3
 800c036:	4613      	mov	r3, r2
 800c038:	009b      	lsls	r3, r3, #2
 800c03a:	4413      	add	r3, r2
 800c03c:	005b      	lsls	r3, r3, #1
 800c03e:	1aca      	subs	r2, r1, r3
 800c040:	2a04      	cmp	r2, #4
 800c042:	dc09      	bgt.n	800c058 <VL53LX_range_maths+0x178>
			range_mm = (int16_t)(range_mm_10 / 10);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	4a12      	ldr	r2, [pc, #72]	; (800c090 <VL53LX_range_maths+0x1b0>)
 800c048:	fb82 1203 	smull	r1, r2, r2, r3
 800c04c:	1092      	asrs	r2, r2, #2
 800c04e:	17db      	asrs	r3, r3, #31
 800c050:	1ad3      	subs	r3, r2, r3
 800c052:	b21b      	sxth	r3, r3
 800c054:	61fb      	str	r3, [r7, #28]
 800c056:	e014      	b.n	800c082 <VL53LX_range_maths+0x1a2>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	4a0d      	ldr	r2, [pc, #52]	; (800c090 <VL53LX_range_maths+0x1b0>)
 800c05c:	fb82 1203 	smull	r1, r2, r2, r3
 800c060:	1092      	asrs	r2, r2, #2
 800c062:	17db      	asrs	r3, r3, #31
 800c064:	1ad3      	subs	r3, r2, r3
 800c066:	b29b      	uxth	r3, r3
 800c068:	3301      	adds	r3, #1
 800c06a:	b29b      	uxth	r3, r3
 800c06c:	b21b      	sxth	r3, r3
 800c06e:	61fb      	str	r3, [r7, #28]
 800c070:	e007      	b.n	800c082 <VL53LX_range_maths+0x1a2>
	} else if (fractional_bits == 1)
 800c072:	787b      	ldrb	r3, [r7, #1]
 800c074:	2b01      	cmp	r3, #1
 800c076:	d104      	bne.n	800c082 <VL53LX_range_maths+0x1a2>
		range_mm = range_mm / (0x01 << 1);
 800c078:	69fb      	ldr	r3, [r7, #28]
 800c07a:	0fda      	lsrs	r2, r3, #31
 800c07c:	4413      	add	r3, r2
 800c07e:	105b      	asrs	r3, r3, #1
 800c080:	61fb      	str	r3, [r7, #28]

	return range_mm;
 800c082:	69fb      	ldr	r3, [r7, #28]
}
 800c084:	4618      	mov	r0, r3
 800c086:	3724      	adds	r7, #36	; 0x24
 800c088:	46bd      	mov	sp, r7
 800c08a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c08c:	003fffff 	.word	0x003fffff
 800c090:	66666667 	.word	0x66666667

0800c094 <VL53LX_decode_vcsel_period>:


uint8_t VL53LX_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800c094:	b480      	push	{r7}
 800c096:	b085      	sub	sp, #20
 800c098:	af00      	add	r7, sp, #0
 800c09a:	4603      	mov	r3, r0
 800c09c:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53LX_p_030 = 0;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	73fb      	strb	r3, [r7, #15]

	VL53LX_p_030 = (vcsel_period_reg + 1) << 1;
 800c0a2:	79fb      	ldrb	r3, [r7, #7]
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	b2db      	uxtb	r3, r3
 800c0a8:	005b      	lsls	r3, r3, #1
 800c0aa:	73fb      	strb	r3, [r7, #15]

	return VL53LX_p_030;
 800c0ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3714      	adds	r7, #20
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr

0800c0ba <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53LX_xtalk_histogram_shape_t *pxtalk,
		VL53LX_histogram_bin_data_t    *phist)
{
 800c0ba:	b480      	push	{r7}
 800c0bc:	b083      	sub	sp, #12
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
 800c0c2:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	phist->cal_config__vcsel_start =
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	phist->VL53LX_p_015 =
			pxtalk->VL53LX_p_015;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
	phist->VL53LX_p_015 =
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	phist->VL53LX_p_019 =
			pxtalk->VL53LX_p_019;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53LX_p_019 =
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	phist->phasecal_result__reference_phase   =
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	phist->phasecal_result__vcsel_start       =
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
	phist->vcsel_width =
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
	phist->zero_distance_phase =
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	781a      	ldrb	r2, [r3, #0]
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	709a      	strb	r2, [r3, #2]
	phist->VL53LX_p_020  = pxtalk->VL53LX_p_020;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	7a5a      	ldrb	r2, [r3, #9]
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	685a      	ldr	r2, [r3, #4]
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	605a      	str	r2, [r3, #4]
}
 800c12a:	bf00      	nop
 800c12c:	370c      	adds	r7, #12
 800c12e:	46bd      	mov	sp, r7
 800c130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c134:	4770      	bx	lr

0800c136 <VL53LX_init_histogram_bin_data_struct>:

void VL53LX_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53LX_p_021,
	VL53LX_histogram_bin_data_t *pdata)
{
 800c136:	b480      	push	{r7}
 800c138:	b087      	sub	sp, #28
 800c13a:	af00      	add	r7, sp, #0
 800c13c:	60f8      	str	r0, [r7, #12]
 800c13e:	460b      	mov	r3, r1
 800c140:	607a      	str	r2, [r7, #4]
 800c142:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800c144:	2300      	movs	r3, #0
 800c146:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53LX_DEVICESTATE_SW_STANDBY;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2203      	movs	r2, #3
 800c14c:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53LX_DEVICESTATE_SW_STANDBY;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2203      	movs	r2, #3
 800c152:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2200      	movs	r2, #0
 800c158:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2200      	movs	r2, #0
 800c15e:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2200      	movs	r2, #0
 800c164:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2218      	movs	r2, #24
 800c16a:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 800c16c:	897b      	ldrh	r3, [r7, #10]
 800c16e:	b2da      	uxtb	r2, r3
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2200      	movs	r2, #0
 800c178:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2200      	movs	r2, #0
 800c17e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status               = 0;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2200      	movs	r2, #0
 800c186:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status              = 0;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2200      	movs	r2, #0
 800c18e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count               = 0;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2200      	movs	r2, #0
 800c196:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2200      	movs	r2, #0
 800c19e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	pdata->cal_config__vcsel_start            = 0;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	pdata->vcsel_width                        = 0;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->VL53LX_p_005                       = 0;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	pdata->VL53LX_p_015                = 0;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	pdata->min_bin_value                      = 0;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pdata->max_bin_value                      = 0;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pdata->zero_distance_phase                = 0;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum                 = 0;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pdata->VL53LX_p_028             = 0;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2200      	movs	r2, #0
 800c206:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800c20a:	2300      	movs	r3, #0
 800c20c:	82fb      	strh	r3, [r7, #22]
 800c20e:	e009      	b.n	800c224 <VL53LX_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800c210:	8afb      	ldrh	r3, [r7, #22]
 800c212:	8afa      	ldrh	r2, [r7, #22]
 800c214:	b2d1      	uxtb	r1, r2
 800c216:	687a      	ldr	r2, [r7, #4]
 800c218:	4413      	add	r3, r2
 800c21a:	460a      	mov	r2, r1
 800c21c:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800c21e:	8afb      	ldrh	r3, [r7, #22]
 800c220:	3301      	adds	r3, #1
 800c222:	82fb      	strh	r3, [r7, #22]
 800c224:	8afb      	ldrh	r3, [r7, #22]
 800c226:	2b05      	cmp	r3, #5
 800c228:	d9f2      	bls.n	800c210 <VL53LX_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800c22a:	2300      	movs	r3, #0
 800c22c:	82fb      	strh	r3, [r7, #22]
 800c22e:	e007      	b.n	800c240 <VL53LX_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800c230:	8afb      	ldrh	r3, [r7, #22]
 800c232:	687a      	ldr	r2, [r7, #4]
 800c234:	4413      	add	r3, r2
 800c236:	2201      	movs	r2, #1
 800c238:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800c23a:	8afb      	ldrh	r3, [r7, #22]
 800c23c:	3301      	adds	r3, #1
 800c23e:	82fb      	strh	r3, [r7, #22]
 800c240:	8afb      	ldrh	r3, [r7, #22]
 800c242:	2b05      	cmp	r3, #5
 800c244:	d9f4      	bls.n	800c230 <VL53LX_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800c246:	2300      	movs	r3, #0
 800c248:	82fb      	strh	r3, [r7, #22]
 800c24a:	e013      	b.n	800c274 <VL53LX_init_histogram_bin_data_struct+0x13e>
		if (i < VL53LX_p_021)
 800c24c:	8afa      	ldrh	r2, [r7, #22]
 800c24e:	897b      	ldrh	r3, [r7, #10]
 800c250:	429a      	cmp	r2, r3
 800c252:	d206      	bcs.n	800c262 <VL53LX_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 800c254:	8afa      	ldrh	r2, [r7, #22]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	3206      	adds	r2, #6
 800c25a:	68f9      	ldr	r1, [r7, #12]
 800c25c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c260:	e005      	b.n	800c26e <VL53LX_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 800c262:	8afa      	ldrh	r2, [r7, #22]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	3206      	adds	r2, #6
 800c268:	2100      	movs	r1, #0
 800c26a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800c26e:	8afb      	ldrh	r3, [r7, #22]
 800c270:	3301      	adds	r3, #1
 800c272:	82fb      	strh	r3, [r7, #22]
 800c274:	8afb      	ldrh	r3, [r7, #22]
 800c276:	2b17      	cmp	r3, #23
 800c278:	d9e8      	bls.n	800c24c <VL53LX_init_histogram_bin_data_struct+0x116>


}
 800c27a:	bf00      	nop
 800c27c:	bf00      	nop
 800c27e:	371c      	adds	r7, #28
 800c280:	46bd      	mov	sp, r7
 800c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c286:	4770      	bx	lr

0800c288 <VL53LX_decode_row_col>:

void VL53LX_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800c288:	b480      	push	{r7}
 800c28a:	b085      	sub	sp, #20
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	4603      	mov	r3, r0
 800c290:	60b9      	str	r1, [r7, #8]
 800c292:	607a      	str	r2, [r7, #4]
 800c294:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 800c296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	da10      	bge.n	800c2c0 <VL53LX_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800c29e:	7bfb      	ldrb	r3, [r7, #15]
 800c2a0:	43db      	mvns	r3, r3
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	f003 0307 	and.w	r3, r3, #7
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	3308      	adds	r3, #8
 800c2ac:	b2da      	uxtb	r2, r3
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800c2b2:	7bfb      	ldrb	r3, [r7, #15]
 800c2b4:	3b80      	subs	r3, #128	; 0x80
 800c2b6:	10db      	asrs	r3, r3, #3
 800c2b8:	b2da      	uxtb	r2, r3
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800c2be:	e00c      	b.n	800c2da <VL53LX_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800c2c0:	7bfb      	ldrb	r3, [r7, #15]
 800c2c2:	f003 0307 	and.w	r3, r3, #7
 800c2c6:	b2da      	uxtb	r2, r3
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800c2cc:	7bfb      	ldrb	r3, [r7, #15]
 800c2ce:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800c2d2:	10db      	asrs	r3, r3, #3
 800c2d4:	b2da      	uxtb	r2, r3
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	701a      	strb	r2, [r3, #0]
}
 800c2da:	bf00      	nop
 800c2dc:	3714      	adds	r7, #20
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e4:	4770      	bx	lr

0800c2e6 <VL53LX_hist_find_min_max_bin_values>:


void  VL53LX_hist_find_min_max_bin_values(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800c2e6:	b480      	push	{r7}
 800c2e8:	b085      	sub	sp, #20
 800c2ea:	af00      	add	r7, sp, #0
 800c2ec:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	73fb      	strb	r3, [r7, #15]
 800c2f6:	e02c      	b.n	800c352 <VL53LX_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 800c2f8:	7bfb      	ldrb	r3, [r7, #15]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d009      	beq.n	800c312 <VL53LX_hist_find_min_max_bin_values+0x2c>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800c304:	7bf9      	ldrb	r1, [r7, #15]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	3106      	adds	r1, #6
 800c30a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c30e:	429a      	cmp	r2, r3
 800c310:	db07      	blt.n	800c322 <VL53LX_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 800c312:	7bfa      	ldrb	r2, [r7, #15]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	3206      	adds	r2, #6
 800c318:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800c322:	7bfb      	ldrb	r3, [r7, #15]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d009      	beq.n	800c33c <VL53LX_hist_find_min_max_bin_values+0x56>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c32e:	7bf9      	ldrb	r1, [r7, #15]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	3106      	adds	r1, #6
 800c334:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c338:	429a      	cmp	r2, r3
 800c33a:	dc07      	bgt.n	800c34c <VL53LX_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 800c33c:	7bfa      	ldrb	r2, [r7, #15]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	3206      	adds	r2, #6
 800c342:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800c34c:	7bfb      	ldrb	r3, [r7, #15]
 800c34e:	3301      	adds	r3, #1
 800c350:	73fb      	strb	r3, [r7, #15]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	7a9b      	ldrb	r3, [r3, #10]
 800c356:	7bfa      	ldrb	r2, [r7, #15]
 800c358:	429a      	cmp	r2, r3
 800c35a:	d3cd      	bcc.n	800c2f8 <VL53LX_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 800c35c:	bf00      	nop
 800c35e:	bf00      	nop
 800c360:	3714      	adds	r7, #20
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr

0800c36a <VL53LX_hist_estimate_ambient_from_ambient_bins>:


void  VL53LX_hist_estimate_ambient_from_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800c36a:	b480      	push	{r7}
 800c36c:	b085      	sub	sp, #20
 800c36e:	af00      	add	r7, sp, #0
 800c370:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800c372:	2300      	movs	r3, #0
 800c374:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	7adb      	ldrb	r3, [r3, #11]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d03a      	beq.n	800c3f4 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e



		pdata->ambient_events_sum = 0;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2200      	movs	r2, #0
 800c38c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800c390:	2300      	movs	r3, #0
 800c392:	73fb      	strb	r3, [r7, #15]
 800c394:	e00e      	b.n	800c3b4 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800c39c:	7bf9      	ldrb	r1, [r7, #15]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	3106      	adds	r1, #6
 800c3a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c3a6:	441a      	add	r2, r3
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800c3ae:	7bfb      	ldrb	r3, [r7, #15]
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	73fb      	strb	r3, [r7, #15]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	7adb      	ldrb	r3, [r3, #11]
 800c3b8:	7bfa      	ldrb	r2, [r7, #15]
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d3eb      	bcc.n	800c396 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53LX_p_028 = pdata->ambient_events_sum;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 +=
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	7ad2      	ldrb	r2, [r2, #11]
 800c3d4:	0852      	lsrs	r2, r2, #1
 800c3d6:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800c3d8:	441a      	add	r2, r3
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 /=
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 800c3e6:	687a      	ldr	r2, [r7, #4]
 800c3e8:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53LX_p_028 /=
 800c3ea:	fb93 f2f2 	sdiv	r2, r3, r2
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	}

	LOG_FUNCTION_END(0);
}
 800c3f4:	bf00      	nop
 800c3f6:	3714      	adds	r7, #20
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fe:	4770      	bx	lr

0800c400 <VL53LX_f_001>:
	VL53LX_dmax_calibration_data_t	     *pcal,
	VL53LX_hist_gen3_dmax_config_t	     *pcfg,
	VL53LX_histogram_bin_data_t          *pbins,
	VL53LX_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 800c400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c404:	b096      	sub	sp, #88	; 0x58
 800c406:	af00      	add	r7, sp, #0
 800c408:	6339      	str	r1, [r7, #48]	; 0x30
 800c40a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c40c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c40e:	4603      	mov	r3, r0
 800c410:	86fb      	strh	r3, [r7, #54]	; 0x36



	VL53LX_Error status  = VL53LX_ERROR_NONE;
 800c412:	2300      	movs	r3, #0
 800c414:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	uint32_t    pll_period_us       = 0;
 800c418:	2300      	movs	r3, #0
 800c41a:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t    periods_elapsed     = 0;
 800c41c:	2300      	movs	r3, #0
 800c41e:	63fb      	str	r3, [r7, #60]	; 0x3c

	uint32_t    tmp32               = 0;
 800c420:	2300      	movs	r3, #0
 800c422:	657b      	str	r3, [r7, #84]	; 0x54
	uint64_t    tmp64               = 0;
 800c424:	f04f 0200 	mov.w	r2, #0
 800c428:	f04f 0300 	mov.w	r3, #0
 800c42c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint32_t    amb_thres_delta     = 0;
 800c430:	2300      	movs	r3, #0
 800c432:	63bb      	str	r3, [r7, #56]	; 0x38

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_004     = 0x0000;
 800c434:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c436:	2300      	movs	r3, #0
 800c438:	8353      	strh	r3, [r2, #26]
	pdata->VL53LX_p_033 = 0x0000;
 800c43a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c43c:	2300      	movs	r3, #0
 800c43e:	6153      	str	r3, [r2, #20]
	pdata->VL53LX_p_034          = 0x0000;
 800c440:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c442:	2300      	movs	r3, #0
 800c444:	8313      	strh	r3, [r2, #24]
	pdata->VL53LX_p_009    = 0x0000;
 800c446:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c448:	2300      	movs	r3, #0
 800c44a:	6113      	str	r3, [r2, #16]
	pdata->VL53LX_p_028     = 0x0000;
 800c44c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c44e:	2300      	movs	r3, #0
 800c450:	61d3      	str	r3, [r2, #28]
	pdata->VL53LX_p_035 = 0x0000;
 800c452:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c454:	2300      	movs	r3, #0
 800c456:	6213      	str	r3, [r2, #32]
	pdata->VL53LX_p_036             = 0;
 800c458:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c45a:	2300      	movs	r3, #0
 800c45c:	8493      	strh	r3, [r2, #36]	; 0x24
	pdata->VL53LX_p_022            = 0;
 800c45e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c460:	2300      	movs	r3, #0
 800c462:	84d3      	strh	r3, [r2, #38]	; 0x26

	*pambient_dmax_mm  = 0;
 800c464:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c466:	2300      	movs	r3, #0
 800c468:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53LX_p_015        != 0) &&
 800c46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c46c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c470:	2b00      	cmp	r3, #0
 800c472:	f000 80ab 	beq.w	800c5cc <VL53LX_f_001+0x1cc>
		(pbins->total_periods_elapsed      != 0)) {
 800c476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((pbins->VL53LX_p_015        != 0) &&
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	f000 80a5 	beq.w	800c5cc <VL53LX_f_001+0x1cc>



		pll_period_us   =
			VL53LX_calc_pll_period_us(pbins->VL53LX_p_015);
 800c482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c484:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c488:	4618      	mov	r0, r3
 800c48a:	f7ff fa30 	bl	800b8ee <VL53LX_calc_pll_period_us>
 800c48e:	6438      	str	r0, [r7, #64]	; 0x40



		periods_elapsed = pbins->total_periods_elapsed + 1;
 800c490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c496:	3301      	adds	r3, #1
 800c498:	63fb      	str	r3, [r7, #60]	; 0x3c



		pdata->VL53LX_p_037  =
			VL53LX_duration_maths(
 800c49a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c49c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c4a0:	2110      	movs	r1, #16
 800c4a2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c4a4:	f7ff fa3a 	bl	800b91c <VL53LX_duration_maths>
 800c4a8:	4602      	mov	r2, r0
		pdata->VL53LX_p_037  =
 800c4aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4ac:	601a      	str	r2, [r3, #0]
				VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53LX_p_034 =
			VL53LX_rate_maths(
 800c4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800c4b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	4610      	mov	r0, r2
 800c4bc:	f7ff fc97 	bl	800bdee <VL53LX_rate_maths>
 800c4c0:	4603      	mov	r3, r0
		pdata->VL53LX_p_034 =
 800c4c2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c4c4:	8313      	strh	r3, [r2, #24]
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_033   =
			VL53LX_events_per_spad_maths(
 800c4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c8:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 800c4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ce:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 800c4d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	461a      	mov	r2, r3
 800c4d8:	f7ff fa7a 	bl	800b9d0 <VL53LX_events_per_spad_maths>
 800c4dc:	4602      	mov	r2, r0
		pdata->VL53LX_p_033   =
 800c4de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4e0:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_038 = pcfg->max_effective_spads;
 800c4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e4:	8adb      	ldrh	r3, [r3, #22]
 800c4e6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c4e8:	8193      	strh	r3, [r2, #12]
		pdata->VL53LX_p_004  = pcfg->max_effective_spads;
 800c4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ec:	8adb      	ldrh	r3, [r3, #22]
 800c4ee:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c4f0:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53LX_p_033 > 0) {
 800c4f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4f4:	695b      	ldr	r3, [r3, #20]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d068      	beq.n	800c5cc <VL53LX_f_001+0x1cc>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 800c4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4fc:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 800c4fe:	b29a      	uxth	r2, r3
 800c500:	f04f 0300 	mov.w	r3, #0
 800c504:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tmp64  *= 1000;
 800c508:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800c50c:	4622      	mov	r2, r4
 800c50e:	462b      	mov	r3, r5
 800c510:	f04f 0000 	mov.w	r0, #0
 800c514:	f04f 0100 	mov.w	r1, #0
 800c518:	0159      	lsls	r1, r3, #5
 800c51a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c51e:	0150      	lsls	r0, r2, #5
 800c520:	4602      	mov	r2, r0
 800c522:	460b      	mov	r3, r1
 800c524:	1b12      	subs	r2, r2, r4
 800c526:	eb63 0305 	sbc.w	r3, r3, r5
 800c52a:	f04f 0000 	mov.w	r0, #0
 800c52e:	f04f 0100 	mov.w	r1, #0
 800c532:	0099      	lsls	r1, r3, #2
 800c534:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800c538:	0090      	lsls	r0, r2, #2
 800c53a:	4602      	mov	r2, r0
 800c53c:	460b      	mov	r3, r1
 800c53e:	1912      	adds	r2, r2, r4
 800c540:	eb45 0303 	adc.w	r3, r5, r3
 800c544:	f04f 0000 	mov.w	r0, #0
 800c548:	f04f 0100 	mov.w	r1, #0
 800c54c:	00d9      	lsls	r1, r3, #3
 800c54e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c552:	00d0      	lsls	r0, r2, #3
 800c554:	4602      	mov	r2, r0
 800c556:	460b      	mov	r3, r1
 800c558:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tmp64 <<= (11+1);
 800c55c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c560:	f04f 0000 	mov.w	r0, #0
 800c564:	f04f 0100 	mov.w	r1, #0
 800c568:	0319      	lsls	r1, r3, #12
 800c56a:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800c56e:	0310      	lsls	r0, r2, #12
 800c570:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
			tmp32 = pdata->VL53LX_p_033/2;
 800c574:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c576:	695b      	ldr	r3, [r3, #20]
 800c578:	085b      	lsrs	r3, r3, #1
 800c57a:	657b      	str	r3, [r7, #84]	; 0x54
			tmp64 += (uint64_t)tmp32;
 800c57c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c57e:	4618      	mov	r0, r3
 800c580:	f04f 0100 	mov.w	r1, #0
 800c584:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c588:	eb12 0800 	adds.w	r8, r2, r0
 800c58c:	eb43 0901 	adc.w	r9, r3, r1
 800c590:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
			tmp64 = do_division_u(tmp64,
 800c594:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c596:	695b      	ldr	r3, [r3, #20]
 800c598:	461a      	mov	r2, r3
 800c59a:	f04f 0300 	mov.w	r3, #0
 800c59e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c5a2:	f7f3 febd 	bl	8000320 <__aeabi_uldivmod>
 800c5a6:	4602      	mov	r2, r0
 800c5a8:	460b      	mov	r3, r1
 800c5aa:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				(uint64_t)pdata->VL53LX_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 800c5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b0:	8adb      	ldrh	r3, [r3, #22]
 800c5b2:	b298      	uxth	r0, r3
 800c5b4:	f04f 0100 	mov.w	r1, #0
 800c5b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c5bc:	428b      	cmp	r3, r1
 800c5be:	bf08      	it	eq
 800c5c0:	4282      	cmpeq	r2, r0
 800c5c2:	d203      	bcs.n	800c5cc <VL53LX_f_001+0x1cc>
				pdata->VL53LX_p_004 = (uint16_t)tmp64;
 800c5c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c5c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c5ca:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 800c5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ce:	881b      	ldrh	r3, [r3, #0]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	f000 8203 	beq.w	800c9dc <VL53LX_f_001+0x5dc>
		(pbins->VL53LX_p_015        != 0) &&
 800c5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5d8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	f000 81fd 	beq.w	800c9dc <VL53LX_f_001+0x5dc>
		(pcal->ref_reflectance_pc          != 0) &&
 800c5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e4:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53LX_p_015        != 0) &&
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	f000 81f8 	beq.w	800c9dc <VL53LX_f_001+0x5dc>
		(pbins->total_periods_elapsed      != 0)) {
 800c5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	f000 81f2 	beq.w	800c9dc <VL53LX_f_001+0x5dc>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 800c5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5fa:	885b      	ldrh	r3, [r3, #2]
 800c5fc:	b29a      	uxth	r2, r3
 800c5fe:	f04f 0300 	mov.w	r3, #0
 800c602:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64 *= (1000 * 256);
 800c606:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800c60a:	4622      	mov	r2, r4
 800c60c:	462b      	mov	r3, r5
 800c60e:	f04f 0000 	mov.w	r0, #0
 800c612:	f04f 0100 	mov.w	r1, #0
 800c616:	0159      	lsls	r1, r3, #5
 800c618:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c61c:	0150      	lsls	r0, r2, #5
 800c61e:	4602      	mov	r2, r0
 800c620:	460b      	mov	r3, r1
 800c622:	1b12      	subs	r2, r2, r4
 800c624:	eb63 0305 	sbc.w	r3, r3, r5
 800c628:	f04f 0000 	mov.w	r0, #0
 800c62c:	f04f 0100 	mov.w	r1, #0
 800c630:	0099      	lsls	r1, r3, #2
 800c632:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800c636:	0090      	lsls	r0, r2, #2
 800c638:	4602      	mov	r2, r0
 800c63a:	460b      	mov	r3, r1
 800c63c:	1912      	adds	r2, r2, r4
 800c63e:	eb45 0303 	adc.w	r3, r5, r3
 800c642:	f04f 0000 	mov.w	r0, #0
 800c646:	f04f 0100 	mov.w	r1, #0
 800c64a:	02d9      	lsls	r1, r3, #11
 800c64c:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800c650:	02d0      	lsls	r0, r2, #11
 800c652:	4602      	mov	r2, r0
 800c654:	460b      	mov	r3, r1
 800c656:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp32  = pcal->ref__actual_effective_spads/2;
 800c65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65c:	881b      	ldrh	r3, [r3, #0]
 800c65e:	085b      	lsrs	r3, r3, #1
 800c660:	b29b      	uxth	r3, r3
 800c662:	657b      	str	r3, [r7, #84]	; 0x54
		tmp64 += (uint64_t)tmp32;
 800c664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c666:	4618      	mov	r0, r3
 800c668:	f04f 0100 	mov.w	r1, #0
 800c66c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c670:	eb12 0a00 	adds.w	sl, r2, r0
 800c674:	eb43 0b01 	adc.w	fp, r3, r1
 800c678:	e9c7 ab12 	strd	sl, fp, [r7, #72]	; 0x48
		tmp64  = do_division_u(tmp64,
 800c67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67e:	881b      	ldrh	r3, [r3, #0]
 800c680:	b29a      	uxth	r2, r3
 800c682:	f04f 0300 	mov.w	r3, #0
 800c686:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c68a:	f7f3 fe49 	bl	8000320 <__aeabi_uldivmod>
 800c68e:	4602      	mov	r2, r0
 800c690:	460b      	mov	r3, r1
 800c692:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53LX_p_009   = (uint32_t)tmp64;
 800c696:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c698:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c69a:	611a      	str	r2, [r3, #16]
		pdata->VL53LX_p_009 <<= 4;
 800c69c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c69e:	691b      	ldr	r3, [r3, #16]
 800c6a0:	011a      	lsls	r2, r3, #4
 800c6a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c6a4:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800c6a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	f04f 0300 	mov.w	r3, #0
 800c6b0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_033;
 800c6b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c6b6:	695b      	ldr	r3, [r3, #20]
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	f04f 0300 	mov.w	r3, #0
 800c6be:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c6c0:	fb02 f001 	mul.w	r0, r2, r1
 800c6c4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c6c6:	fb03 f101 	mul.w	r1, r3, r1
 800c6ca:	4401      	add	r1, r0
 800c6cc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c6ce:	fba0 2302 	umull	r2, r3, r0, r2
 800c6d2:	4419      	add	r1, r3
 800c6d4:	460b      	mov	r3, r1
 800c6d6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c6da:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800c6de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c6e0:	8b5b      	ldrh	r3, [r3, #26]
 800c6e2:	b29a      	uxth	r2, r3
 800c6e4:	f04f 0300 	mov.w	r3, #0
 800c6e8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c6ea:	fb02 f001 	mul.w	r0, r2, r1
 800c6ee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c6f0:	fb03 f101 	mul.w	r1, r3, r1
 800c6f4:	4401      	add	r1, r0
 800c6f6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c6f8:	fba0 2302 	umull	r2, r3, r0, r2
 800c6fc:	4419      	add	r1, r3
 800c6fe:	460b      	mov	r3, r1
 800c700:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c704:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  += (1<<(11+7));
 800c708:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c70c:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800c710:	6239      	str	r1, [r7, #32]
 800c712:	f143 0300 	adc.w	r3, r3, #0
 800c716:	627b      	str	r3, [r7, #36]	; 0x24
 800c718:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c71c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64 >>= (11+8);
 800c720:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c724:	f04f 0200 	mov.w	r2, #0
 800c728:	f04f 0300 	mov.w	r3, #0
 800c72c:	0cc2      	lsrs	r2, r0, #19
 800c72e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800c732:	0ccb      	lsrs	r3, r1, #19
 800c734:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  +=  500;
 800c738:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c73c:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800c740:	61b9      	str	r1, [r7, #24]
 800c742:	f143 0300 	adc.w	r3, r3, #0
 800c746:	61fb      	str	r3, [r7, #28]
 800c748:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c74c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64   = do_division_u(tmp64, 1000);
 800c750:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c754:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c758:	f04f 0300 	mov.w	r3, #0
 800c75c:	f7f3 fde0 	bl	8000320 <__aeabi_uldivmod>
 800c760:	4602      	mov	r2, r0
 800c762:	460b      	mov	r3, r1
 800c764:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48


		if (tmp64 > 0x00FFFFFF)
 800c768:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c76c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800c770:	f04f 0100 	mov.w	r1, #0
 800c774:	4299      	cmp	r1, r3
 800c776:	bf08      	it	eq
 800c778:	4290      	cmpeq	r0, r2
 800c77a:	d205      	bcs.n	800c788 <VL53LX_f_001+0x388>
			tmp64 = 0x00FFFFFF;
 800c77c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800c780:	f04f 0300 	mov.w	r3, #0
 800c784:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		pdata->VL53LX_p_028     = (uint32_t)tmp64;
 800c788:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c78a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c78c:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800c78e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	461a      	mov	r2, r3
 800c794:	f04f 0300 	mov.w	r3, #0
 800c798:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_009;
 800c79c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c79e:	691b      	ldr	r3, [r3, #16]
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	f04f 0300 	mov.w	r3, #0
 800c7a6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c7a8:	fb02 f001 	mul.w	r0, r2, r1
 800c7ac:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c7ae:	fb03 f101 	mul.w	r1, r3, r1
 800c7b2:	4401      	add	r1, r0
 800c7b4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c7b6:	fba0 2302 	umull	r2, r3, r0, r2
 800c7ba:	4419      	add	r1, r3
 800c7bc:	460b      	mov	r3, r1
 800c7be:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c7c2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800c7c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c7c8:	8b5b      	ldrh	r3, [r3, #26]
 800c7ca:	b29a      	uxth	r2, r3
 800c7cc:	f04f 0300 	mov.w	r3, #0
 800c7d0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c7d2:	fb02 f001 	mul.w	r0, r2, r1
 800c7d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c7d8:	fb03 f101 	mul.w	r1, r3, r1
 800c7dc:	4401      	add	r1, r0
 800c7de:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c7e0:	fba0 2302 	umull	r2, r3, r0, r2
 800c7e4:	4419      	add	r1, r3
 800c7e6:	460b      	mov	r3, r1
 800c7e8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c7ec:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  += (1<<(11+7));
 800c7f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c7f4:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800c7f8:	6139      	str	r1, [r7, #16]
 800c7fa:	f143 0300 	adc.w	r3, r3, #0
 800c7fe:	617b      	str	r3, [r7, #20]
 800c800:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c804:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64 >>= (11+8);
 800c808:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c80c:	f04f 0200 	mov.w	r2, #0
 800c810:	f04f 0300 	mov.w	r3, #0
 800c814:	0cc2      	lsrs	r2, r0, #19
 800c816:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800c81a:	0ccb      	lsrs	r3, r1, #19
 800c81c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48



		tmp64  *= ((uint64_t)target_reflectance *
 800c820:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 800c822:	f04f 0100 	mov.w	r1, #0
				   (uint64_t)pcal->coverglass_transmission);
 800c826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c828:	891b      	ldrh	r3, [r3, #8]
 800c82a:	b29a      	uxth	r2, r3
 800c82c:	f04f 0300 	mov.w	r3, #0
		tmp64  *= ((uint64_t)target_reflectance *
 800c830:	fb02 f501 	mul.w	r5, r2, r1
 800c834:	fb00 f403 	mul.w	r4, r0, r3
 800c838:	442c      	add	r4, r5
 800c83a:	fba0 2302 	umull	r2, r3, r0, r2
 800c83e:	18e1      	adds	r1, r4, r3
 800c840:	460b      	mov	r3, r1
 800c842:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c844:	fb02 f001 	mul.w	r0, r2, r1
 800c848:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c84a:	fb03 f101 	mul.w	r1, r3, r1
 800c84e:	4401      	add	r1, r0
 800c850:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c852:	fba0 2302 	umull	r2, r3, r0, r2
 800c856:	4419      	add	r1, r3
 800c858:	460b      	mov	r3, r1
 800c85a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c85e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 800c862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c864:	88db      	ldrh	r3, [r3, #6]
 800c866:	b298      	uxth	r0, r3
 800c868:	f04f 0100 	mov.w	r1, #0
 800c86c:	f04f 0200 	mov.w	r2, #0
 800c870:	f04f 0300 	mov.w	r3, #0
 800c874:	01cb      	lsls	r3, r1, #7
 800c876:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 800c87a:	01c2      	lsls	r2, r0, #7
 800c87c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c880:	1884      	adds	r4, r0, r2
 800c882:	60bc      	str	r4, [r7, #8]
 800c884:	eb41 0303 	adc.w	r3, r1, r3
 800c888:	60fb      	str	r3, [r7, #12]
 800c88a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c88e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64  = do_division_u(tmp64,
 800c892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c894:	88db      	ldrh	r3, [r3, #6]
 800c896:	b298      	uxth	r0, r3
 800c898:	f04f 0100 	mov.w	r1, #0
 800c89c:	f04f 0200 	mov.w	r2, #0
 800c8a0:	f04f 0300 	mov.w	r3, #0
 800c8a4:	020b      	lsls	r3, r1, #8
 800c8a6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c8aa:	0202      	lsls	r2, r0, #8
 800c8ac:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c8b0:	f7f3 fd36 	bl	8000320 <__aeabi_uldivmod>
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	460b      	mov	r3, r1
 800c8b8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 800c8bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c8c0:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800c8c4:	6039      	str	r1, [r7, #0]
 800c8c6:	f143 0300 	adc.w	r3, r3, #0
 800c8ca:	607b      	str	r3, [r7, #4]
 800c8cc:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c8d0:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64  = do_division_u(tmp64, 1000);
 800c8d4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c8d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c8dc:	f04f 0300 	mov.w	r3, #0
 800c8e0:	f7f3 fd1e 	bl	8000320 <__aeabi_uldivmod>
 800c8e4:	4602      	mov	r2, r0
 800c8e6:	460b      	mov	r3, r1
 800c8e8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48


		if (tmp64 > 0x00FFFFFF)
 800c8ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c8f0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800c8f4:	f04f 0100 	mov.w	r1, #0
 800c8f8:	4299      	cmp	r1, r3
 800c8fa:	bf08      	it	eq
 800c8fc:	4290      	cmpeq	r0, r2
 800c8fe:	d205      	bcs.n	800c90c <VL53LX_f_001+0x50c>
			tmp64 = 0x00FFFFFF;
 800c900:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800c904:	f04f 0300 	mov.w	r3, #0
 800c908:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		pdata->VL53LX_p_035 = (uint32_t)tmp64;
 800c90c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c90e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c910:	621a      	str	r2, [r3, #32]



		tmp32  = VL53LX_isqrt(pdata->VL53LX_p_028 << 8);
 800c912:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c914:	69db      	ldr	r3, [r3, #28]
 800c916:	021b      	lsls	r3, r3, #8
 800c918:	4618      	mov	r0, r3
 800c91a:	f7ff f8e2 	bl	800bae2 <VL53LX_isqrt>
 800c91e:	6578      	str	r0, [r7, #84]	; 0x54
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 800c920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c922:	785b      	ldrb	r3, [r3, #1]
 800c924:	461a      	mov	r2, r3
 800c926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c928:	fb02 f303 	mul.w	r3, r2, r3
 800c92c:	657b      	str	r3, [r7, #84]	; 0x54



		if (pdata->VL53LX_p_028 <
 800c92e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c930:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 800c932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c934:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53LX_p_028 <
 800c936:	4293      	cmp	r3, r2
 800c938:	d20f      	bcs.n	800c95a <VL53LX_f_001+0x55a>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 800c93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c93c:	685b      	ldr	r3, [r3, #4]
 800c93e:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53LX_p_028;
 800c940:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c942:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 800c944:	1ad3      	subs	r3, r2, r3
 800c946:	63bb      	str	r3, [r7, #56]	; 0x38


			amb_thres_delta <<= 8;
 800c948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94a:	021b      	lsls	r3, r3, #8
 800c94c:	63bb      	str	r3, [r7, #56]	; 0x38

			if (tmp32 < amb_thres_delta)
 800c94e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c952:	429a      	cmp	r2, r3
 800c954:	d201      	bcs.n	800c95a <VL53LX_f_001+0x55a>
				tmp32 = amb_thres_delta;
 800c956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c958:	657b      	str	r3, [r7, #84]	; 0x54
		}



		pdata->VL53LX_p_022 =
			(int16_t)VL53LX_f_002(
 800c95a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c95c:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53LX_p_035,
				(uint32_t)pcal->ref__distance_mm,
 800c95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c960:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800c962:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800c964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c966:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800c968:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c96a:	f000 f83e 	bl	800c9ea <VL53LX_f_002>
 800c96e:	4603      	mov	r3, r0
 800c970:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_022 =
 800c972:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c974:	84da      	strh	r2, [r3, #38]	; 0x26



		tmp32  = (uint32_t)pdata->VL53LX_p_035;
 800c976:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c978:	6a1b      	ldr	r3, [r3, #32]
 800c97a:	657b      	str	r3, [r7, #84]	; 0x54
		tmp32 *= (uint32_t)pbins->vcsel_width;
 800c97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c97e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800c982:	461a      	mov	r2, r3
 800c984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c986:	fb02 f303 	mul.w	r3, r2, r3
 800c98a:	657b      	str	r3, [r7, #84]	; 0x54
		tmp32 += (1 << 3);
 800c98c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c98e:	3308      	adds	r3, #8
 800c990:	657b      	str	r3, [r7, #84]	; 0x54
		tmp32 /= (1 << 4);
 800c992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c994:	091b      	lsrs	r3, r3, #4
 800c996:	657b      	str	r3, [r7, #84]	; 0x54

		pdata->VL53LX_p_036 =
			(int16_t)VL53LX_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 800c998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c99a:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53LX_f_002(
 800c99c:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 800c99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a0:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800c9a2:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800c9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a6:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800c9a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c9aa:	f000 f81e 	bl	800c9ea <VL53LX_f_002>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_036 =
 800c9b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9b4:	849a      	strh	r2, [r3, #36]	; 0x24




		if (pdata->VL53LX_p_036 < pdata->VL53LX_p_022)
 800c9b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9b8:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800c9bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9be:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	da05      	bge.n	800c9d2 <VL53LX_f_001+0x5d2>
			*pambient_dmax_mm = pdata->VL53LX_p_036;
 800c9c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9c8:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800c9cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c9ce:	801a      	strh	r2, [r3, #0]
 800c9d0:	e004      	b.n	800c9dc <VL53LX_f_001+0x5dc>
		else
			*pambient_dmax_mm = pdata->VL53LX_p_022;
 800c9d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9d4:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800c9d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c9da:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 800c9dc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47

}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3758      	adds	r7, #88	; 0x58
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c9ea <VL53LX_f_002>:
uint32_t VL53LX_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 800c9ea:	b580      	push	{r7, lr}
 800c9ec:	b086      	sub	sp, #24
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	60f8      	str	r0, [r7, #12]
 800c9f2:	60b9      	str	r1, [r7, #8]
 800c9f4:	607a      	str	r2, [r7, #4]
 800c9f6:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	009b      	lsls	r3, r3, #2
 800ca04:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	fb03 f303 	mul.w	r3, r3, r3
 800ca0c:	693a      	ldr	r2, [r7, #16]
 800ca0e:	4413      	add	r3, r2
 800ca10:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53LX_isqrt(tmp32);
 800ca12:	6938      	ldr	r0, [r7, #16]
 800ca14:	f7ff f865 	bl	800bae2 <VL53LX_isqrt>
 800ca18:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 800ca1a:	693a      	ldr	r2, [r7, #16]
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	4413      	add	r3, r2
 800ca20:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53LX_isqrt(ref_signal_events << 4);
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	011b      	lsls	r3, r3, #4
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7ff f85b 	bl	800bae2 <VL53LX_isqrt>
 800ca2c:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	687a      	ldr	r2, [r7, #4]
 800ca32:	fb02 f303 	mul.w	r3, r2, r3
 800ca36:	617b      	str	r3, [r7, #20]
	if (tmp32 != 0) {
 800ca38:	693b      	ldr	r3, [r7, #16]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d009      	beq.n	800ca52 <VL53LX_f_002+0x68>
		range_mm += (tmp32);
 800ca3e:	697a      	ldr	r2, [r7, #20]
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	4413      	add	r3, r2
 800ca44:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	005b      	lsls	r3, r3, #1
 800ca4a:	697a      	ldr	r2, [r7, #20]
 800ca4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca50:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 800ca52:	697b      	ldr	r3, [r7, #20]

}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3718      	adds	r7, #24
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <VL53LX_f_003>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53LX_f_003(
	VL53LX_hist_gen3_algo_private_data_t   *palgo)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b084      	sub	sp, #16
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 800ca64:	2300      	movs	r3, #0
 800ca66:	73fb      	strb	r3, [r7, #15]

	palgo->VL53LX_p_020              = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2218      	movs	r2, #24
 800ca6c:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019                = 0;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2200      	movs	r2, #0
 800ca72:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021           = 0;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2200      	movs	r2, #0
 800ca78:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_039         = 0;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	711a      	strb	r2, [r3, #4]
	palgo->VL53LX_p_028   = 0;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2200      	movs	r2, #0
 800ca84:	609a      	str	r2, [r3, #8]
	palgo->VL53LX_p_031 = 0;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	73fb      	strb	r3, [r7, #15]
 800ca92:	e01f      	b.n	800cad4 <VL53LX_f_003+0x78>
		palgo->VL53LX_p_040[lb]      = 0;
 800ca94:	7bfb      	ldrb	r3, [r7, #15]
 800ca96:	687a      	ldr	r2, [r7, #4]
 800ca98:	4413      	add	r3, r2
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	741a      	strb	r2, [r3, #16]
		palgo->VL53LX_p_041[lb] = 0;
 800ca9e:	7bfb      	ldrb	r3, [r7, #15]
 800caa0:	687a      	ldr	r2, [r7, #4]
 800caa2:	4413      	add	r3, r2
 800caa4:	2200      	movs	r2, #0
 800caa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		palgo->VL53LX_p_042[lb]     = 0;
 800caaa:	7bfb      	ldrb	r3, [r7, #15]
 800caac:	687a      	ldr	r2, [r7, #4]
 800caae:	4413      	add	r3, r2
 800cab0:	2200      	movs	r2, #0
 800cab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		palgo->VL53LX_p_043[lb]      = 0;
 800cab6:	7bfa      	ldrb	r2, [r7, #15]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	322e      	adds	r2, #46	; 0x2e
 800cabc:	2100      	movs	r1, #0
 800cabe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53LX_p_018[lb]     = 0;
 800cac2:	7bfa      	ldrb	r2, [r7, #15]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	3246      	adds	r2, #70	; 0x46
 800cac8:	2100      	movs	r1, #0
 800caca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800cace:	7bfb      	ldrb	r3, [r7, #15]
 800cad0:	3301      	adds	r3, #1
 800cad2:	73fb      	strb	r3, [r7, #15]
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	785b      	ldrb	r3, [r3, #1]
 800cad8:	7bfa      	ldrb	r2, [r7, #15]
 800cada:	429a      	cmp	r2, r3
 800cadc:	d3da      	bcc.n	800ca94 <VL53LX_f_003+0x38>
	}

	palgo->VL53LX_p_044 = 0;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2200      	movs	r2, #0
 800cae2:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	palgo->VL53LX_p_045               = VL53LX_D_001;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2208      	movs	r2, #8
 800caea:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	palgo->VL53LX_p_046             = 0;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2200      	movs	r2, #0
 800caf2:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a



	VL53LX_init_histogram_bin_data_struct(
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800cafc:	461a      	mov	r2, r3
 800cafe:	2118      	movs	r1, #24
 800cb00:	2000      	movs	r0, #0
 800cb02:	f7ff fb18 	bl	800c136 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_006));
	VL53LX_init_histogram_bin_data_struct(
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800cb0c:	461a      	mov	r2, r3
 800cb0e:	2118      	movs	r1, #24
 800cb10:	2000      	movs	r0, #0
 800cb12:	f7ff fb10 	bl	800c136 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_047));
	VL53LX_init_histogram_bin_data_struct(
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	2118      	movs	r1, #24
 800cb20:	2000      	movs	r0, #0
 800cb22:	f7ff fb08 	bl	800c136 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_048));
	VL53LX_init_histogram_bin_data_struct(
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800cb2c:	461a      	mov	r2, r3
 800cb2e:	2118      	movs	r1, #24
 800cb30:	2000      	movs	r0, #0
 800cb32:	f7ff fb00 	bl	800c136 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_049));
	VL53LX_init_histogram_bin_data_struct(
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800cb3c:	461a      	mov	r2, r3
 800cb3e:	2118      	movs	r1, #24
 800cb40:	2000      	movs	r0, #0
 800cb42:	f7ff faf8 	bl	800c136 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_050));
}
 800cb46:	bf00      	nop
 800cb48:	3710      	adds	r7, #16
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}

0800cb4e <VL53LX_f_006>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_histogram_bin_data_t           *pxtalk,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cb4e:	b5b0      	push	{r4, r5, r7, lr}
 800cb50:	b08c      	sub	sp, #48	; 0x30
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	60b9      	str	r1, [r7, #8]
 800cb56:	607a      	str	r2, [r7, #4]
 800cb58:	461a      	mov	r2, r3
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	81fb      	strh	r3, [r7, #14]
 800cb5e:	4613      	mov	r3, r2
 800cb60:	737b      	strb	r3, [r7, #13]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cb62:	2300      	movs	r3, #0
 800cb64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  lb            = 0;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t  VL53LX_p_001            = 0;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	int64_t  tmp          = 0;
 800cb74:	f04f 0200 	mov.w	r2, #0
 800cb78:	f04f 0300 	mov.w	r3, #0
 800cb7c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int32_t  amb_events   = 0;
 800cb80:	2300      	movs	r3, #0
 800cb82:	617b      	str	r3, [r7, #20]
	int32_t  VL53LX_p_018       = 0;
 800cb84:	2300      	movs	r3, #0
 800cb86:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  samples      = 0;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	palgo->VL53LX_p_020            = pbins->VL53LX_p_020;
 800cb8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb8e:	7a5a      	ldrb	r2, [r3, #9]
 800cb90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb92:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019              = pbins->VL53LX_p_019;
 800cb94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb96:	7a1a      	ldrb	r2, [r3, #8]
 800cb98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb9a:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021         = pbins->VL53LX_p_021;
 800cb9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb9e:	7a9a      	ldrb	r2, [r3, #10]
 800cba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cba2:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_028 = pbins->VL53LX_p_028;
 800cba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cba6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800cbaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbac:	609a      	str	r2, [r3, #8]



	palgo->VL53LX_p_030 =
			VL53LX_decode_vcsel_period(pbins->VL53LX_p_005);
 800cbae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbb0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f7ff fa6d 	bl	800c094 <VL53LX_decode_vcsel_period>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	461a      	mov	r2, r3
	palgo->VL53LX_p_030 =
 800cbbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbc0:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53LX_p_028;
 800cbc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbc4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800cbc8:	461a      	mov	r2, r3
 800cbca:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800cbce:	e9c7 2306 	strd	r2, r3, [r7, #24]
	tmp *= (int64_t)ambient_threshold_events_scaler;
 800cbd2:	89fa      	ldrh	r2, [r7, #14]
 800cbd4:	f04f 0300 	mov.w	r3, #0
 800cbd8:	69f9      	ldr	r1, [r7, #28]
 800cbda:	fb02 f001 	mul.w	r0, r2, r1
 800cbde:	69b9      	ldr	r1, [r7, #24]
 800cbe0:	fb03 f101 	mul.w	r1, r3, r1
 800cbe4:	4401      	add	r1, r0
 800cbe6:	69b8      	ldr	r0, [r7, #24]
 800cbe8:	fba0 2302 	umull	r2, r3, r0, r2
 800cbec:	4419      	add	r1, r3
 800cbee:	460b      	mov	r3, r1
 800cbf0:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800cbf4:	e9c7 2306 	strd	r2, r3, [r7, #24]
	tmp += 2048;
 800cbf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cbfc:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 800cc00:	f143 0500 	adc.w	r5, r3, #0
 800cc04:	e9c7 4506 	strd	r4, r5, [r7, #24]
	tmp = do_division_s(tmp, 4096);
 800cc08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cc0c:	2a00      	cmp	r2, #0
 800cc0e:	f173 0100 	sbcs.w	r1, r3, #0
 800cc12:	da06      	bge.n	800cc22 <VL53LX_f_006+0xd4>
 800cc14:	f640 70ff 	movw	r0, #4095	; 0xfff
 800cc18:	f04f 0100 	mov.w	r1, #0
 800cc1c:	1812      	adds	r2, r2, r0
 800cc1e:	eb41 0303 	adc.w	r3, r1, r3
 800cc22:	f04f 0000 	mov.w	r0, #0
 800cc26:	f04f 0100 	mov.w	r1, #0
 800cc2a:	0b10      	lsrs	r0, r2, #12
 800cc2c:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800cc30:	1319      	asrs	r1, r3, #12
 800cc32:	e9c7 0106 	strd	r0, r1, [r7, #24]
	amb_events = (int32_t)tmp;
 800cc36:	69bb      	ldr	r3, [r7, #24]
 800cc38:	617b      	str	r3, [r7, #20]



	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cc40:	e062      	b.n	800cd08 <VL53LX_f_006+0x1ba>

		VL53LX_p_001 = lb >> 2;
 800cc42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc46:	089b      	lsrs	r3, r3, #2
 800cc48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		samples = (int32_t)pbins->bin_rep[VL53LX_p_001];
 800cc4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cc52:	4413      	add	r3, r2
 800cc54:	7c9b      	ldrb	r3, [r3, #18]
 800cc56:	613b      	str	r3, [r7, #16]

		if (samples > 0) {
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	dd4f      	ble.n	800ccfe <VL53LX_f_006+0x1b0>

			if (lb < pxtalk->VL53LX_p_021 &&
 800cc5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc60:	7a9b      	ldrb	r3, [r3, #10]
 800cc62:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d20f      	bcs.n	800cc8a <VL53LX_f_006+0x13c>
 800cc6a:	7b7b      	ldrb	r3, [r7, #13]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d00c      	beq.n	800cc8a <VL53LX_f_006+0x13c>
				algo__crosstalk_compensation_enable > 0)
				VL53LX_p_018 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 800cc70:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cc74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc76:	3206      	adds	r2, #6
 800cc78:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53LX_p_018 = samples * (amb_events +
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	441a      	add	r2, r3
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	fb02 f303 	mul.w	r3, r2, r3
 800cc86:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc88:	e004      	b.n	800cc94 <VL53LX_f_006+0x146>
			else
				VL53LX_p_018 = samples *  amb_events;
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	697a      	ldr	r2, [r7, #20]
 800cc8e:	fb02 f303 	mul.w	r3, r2, r3
 800cc92:	62bb      	str	r3, [r7, #40]	; 0x28

			VL53LX_p_018  = VL53LX_isqrt(VL53LX_p_018);
 800cc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7fe ff23 	bl	800bae2 <VL53LX_isqrt>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	62bb      	str	r3, [r7, #40]	; 0x28

			VL53LX_p_018 += (samples/2);
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	0fda      	lsrs	r2, r3, #31
 800cca4:	4413      	add	r3, r2
 800cca6:	105b      	asrs	r3, r3, #1
 800cca8:	461a      	mov	r2, r3
 800ccaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccac:	4413      	add	r3, r2
 800ccae:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 /= samples;
 800ccb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	fb92 f3f3 	sdiv	r3, r2, r3
 800ccb8:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 *= ambient_threshold_sigma;
 800ccba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccbc:	68ba      	ldr	r2, [r7, #8]
 800ccbe:	fb02 f303 	mul.w	r3, r2, r3
 800ccc2:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 += 8;
 800ccc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccc6:	3308      	adds	r3, #8
 800ccc8:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 /= 16;
 800ccca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	da00      	bge.n	800ccd2 <VL53LX_f_006+0x184>
 800ccd0:	330f      	adds	r3, #15
 800ccd2:	111b      	asrs	r3, r3, #4
 800ccd4:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 += amb_events;
 800ccd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	4413      	add	r3, r2
 800ccdc:	62bb      	str	r3, [r7, #40]	; 0x28

			if (VL53LX_p_018 < min_ambient_threshold_events)
 800ccde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	429a      	cmp	r2, r3
 800cce4:	da01      	bge.n	800ccea <VL53LX_f_006+0x19c>
				VL53LX_p_018 = min_ambient_threshold_events;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	62bb      	str	r3, [r7, #40]	; 0x28

			palgo->VL53LX_p_052[lb]             = VL53LX_p_018;
 800ccea:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ccee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccf0:	3216      	adds	r2, #22
 800ccf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ccf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53LX_p_031 = VL53LX_p_018;
 800ccf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccfc:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800ccfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd02:	3301      	adds	r3, #1
 800cd04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cd08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd0a:	7a9b      	ldrb	r3, [r3, #10]
 800cd0c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d396      	bcc.n	800cc42 <VL53LX_f_006+0xf4>

	}



	palgo->VL53LX_p_039 = 0;
 800cd14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd16:	2200      	movs	r2, #0
 800cd18:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800cd1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd1c:	7a1b      	ldrb	r3, [r3, #8]
 800cd1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cd22:	e033      	b.n	800cd8c <VL53LX_f_006+0x23e>

		if (pbins->bin_data[lb] > palgo->VL53LX_p_052[lb]) {
 800cd24:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cd28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd2a:	3206      	adds	r2, #6
 800cd2c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cd30:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800cd34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd36:	3116      	adds	r1, #22
 800cd38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	dd13      	ble.n	800cd68 <VL53LX_f_006+0x21a>
			palgo->VL53LX_p_040[lb]      = 1;
 800cd40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd46:	4413      	add	r3, r2
 800cd48:	2201      	movs	r2, #1
 800cd4a:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 1;
 800cd4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd52:	4413      	add	r3, r2
 800cd54:	2201      	movs	r2, #1
 800cd56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			palgo->VL53LX_p_039++;
 800cd5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd5c:	791b      	ldrb	r3, [r3, #4]
 800cd5e:	3301      	adds	r3, #1
 800cd60:	b2da      	uxtb	r2, r3
 800cd62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd64:	711a      	strb	r2, [r3, #4]
 800cd66:	e00c      	b.n	800cd82 <VL53LX_f_006+0x234>
		} else {
			palgo->VL53LX_p_040[lb]      = 0;
 800cd68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd6e:	4413      	add	r3, r2
 800cd70:	2200      	movs	r2, #0
 800cd72:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 0;
 800cd74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd7a:	4413      	add	r3, r2
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800cd82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd86:	3301      	adds	r3, #1
 800cd88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cd8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd8e:	7a9b      	ldrb	r3, [r3, #10]
 800cd90:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cd94:	429a      	cmp	r2, r3
 800cd96:	d3c5      	bcc.n	800cd24 <VL53LX_f_006+0x1d6>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800cd98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3730      	adds	r7, #48	; 0x30
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bdb0      	pop	{r4, r5, r7, pc}

0800cda4 <VL53LX_f_007>:



VL53LX_Error VL53LX_f_007(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cda4:	b480      	push	{r7}
 800cda6:	b085      	sub	sp, #20
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cdac:	2300      	movs	r3, #0
 800cdae:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53LX_p_044 = 0;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	73fb      	strb	r3, [r7, #15]
 800cdc8:	e02d      	b.n	800ce26 <VL53LX_f_007+0x82>

		j = (i + 1) % palgo->VL53LX_p_030;
 800cdca:	7bfb      	ldrb	r3, [r7, #15]
 800cdcc:	3301      	adds	r3, #1
 800cdce:	687a      	ldr	r2, [r7, #4]
 800cdd0:	78d2      	ldrb	r2, [r2, #3]
 800cdd2:	fb93 f1f2 	sdiv	r1, r3, r2
 800cdd6:	fb02 f201 	mul.w	r2, r2, r1
 800cdda:	1a9b      	subs	r3, r3, r2
 800cddc:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	789b      	ldrb	r3, [r3, #2]
 800cde2:	7bfa      	ldrb	r2, [r7, #15]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d21b      	bcs.n	800ce20 <VL53LX_f_007+0x7c>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	789b      	ldrb	r3, [r3, #2]
 800cdec:	7b3a      	ldrb	r2, [r7, #12]
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	d216      	bcs.n	800ce20 <VL53LX_f_007+0x7c>
			if (palgo->VL53LX_p_041[i] == 0 &&
 800cdf2:	7bfb      	ldrb	r3, [r7, #15]
 800cdf4:	687a      	ldr	r2, [r7, #4]
 800cdf6:	4413      	add	r3, r2
 800cdf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d10f      	bne.n	800ce20 <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800ce00:	7b3b      	ldrb	r3, [r7, #12]
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	4413      	add	r3, r2
 800ce06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800ce0a:	2b01      	cmp	r3, #1
 800ce0c:	d108      	bne.n	800ce20 <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800ce0e:	7bbb      	ldrb	r3, [r7, #14]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d105      	bne.n	800ce20 <VL53LX_f_007+0x7c>
				found == 0) {
				palgo->VL53LX_p_044 = i;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	7bfa      	ldrb	r2, [r7, #15]
 800ce18:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
				found = 1;
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800ce20:	7bfb      	ldrb	r3, [r7, #15]
 800ce22:	3301      	adds	r3, #1
 800ce24:	73fb      	strb	r3, [r7, #15]
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	78db      	ldrb	r3, [r3, #3]
 800ce2a:	7bfa      	ldrb	r2, [r7, #15]
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d3cc      	bcc.n	800cdca <VL53LX_f_007+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800ce30:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	3714      	adds	r7, #20
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3e:	4770      	bx	lr

0800ce40 <VL53LX_f_008>:


VL53LX_Error VL53LX_f_008(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b085      	sub	sp, #20
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 800ce50:	2300      	movs	r3, #0
 800ce52:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 800ce54:	2300      	movs	r3, #0
 800ce56:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53LX_p_044;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800ce5e:	73fb      	strb	r3, [r7, #15]
 800ce60:	e05a      	b.n	800cf18 <VL53LX_f_008+0xd8>
		palgo->VL53LX_p_030);
		lb++) {



		i =  lb      % palgo->VL53LX_p_030;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	78da      	ldrb	r2, [r3, #3]
 800ce66:	7bfb      	ldrb	r3, [r7, #15]
 800ce68:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce6c:	fb02 f201 	mul.w	r2, r2, r1
 800ce70:	1a9b      	subs	r3, r3, r2
 800ce72:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53LX_p_030;
 800ce74:	7bfb      	ldrb	r3, [r7, #15]
 800ce76:	3301      	adds	r3, #1
 800ce78:	687a      	ldr	r2, [r7, #4]
 800ce7a:	78d2      	ldrb	r2, [r2, #3]
 800ce7c:	fb93 f1f2 	sdiv	r1, r3, r2
 800ce80:	fb02 f201 	mul.w	r2, r2, r1
 800ce84:	1a9b      	subs	r3, r3, r2
 800ce86:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	789b      	ldrb	r3, [r3, #2]
 800ce8c:	7b7a      	ldrb	r2, [r7, #13]
 800ce8e:	429a      	cmp	r2, r3
 800ce90:	d23f      	bcs.n	800cf12 <VL53LX_f_008+0xd2>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	789b      	ldrb	r3, [r3, #2]
 800ce96:	7b3a      	ldrb	r2, [r7, #12]
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d23a      	bcs.n	800cf12 <VL53LX_f_008+0xd2>

			if (palgo->VL53LX_p_041[i] == 0 &&
 800ce9c:	7b7b      	ldrb	r3, [r7, #13]
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	4413      	add	r3, r2
 800cea2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d10e      	bne.n	800cec8 <VL53LX_f_008+0x88>
				palgo->VL53LX_p_041[j] == 1)
 800ceaa:	7b3b      	ldrb	r3, [r7, #12]
 800ceac:	687a      	ldr	r2, [r7, #4]
 800ceae:	4413      	add	r3, r2
 800ceb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d107      	bne.n	800cec8 <VL53LX_f_008+0x88>
				palgo->VL53LX_p_046++;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800cebe:	3301      	adds	r3, #1
 800cec0:	b2da      	uxtb	r2, r3
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53LX_p_046 > palgo->VL53LX_p_045)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d905      	bls.n	800cee4 <VL53LX_f_008+0xa4>
				palgo->VL53LX_p_046 = palgo->VL53LX_p_045;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53LX_p_041[i] > 0)
 800cee4:	7b7b      	ldrb	r3, [r7, #13]
 800cee6:	687a      	ldr	r2, [r7, #4]
 800cee8:	4413      	add	r3, r2
 800ceea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d009      	beq.n	800cf06 <VL53LX_f_008+0xc6>
				palgo->VL53LX_p_042[i] = palgo->VL53LX_p_046;
 800cef2:	7b7b      	ldrb	r3, [r7, #13]
 800cef4:	687a      	ldr	r2, [r7, #4]
 800cef6:	f892 117a 	ldrb.w	r1, [r2, #378]	; 0x17a
 800cefa:	687a      	ldr	r2, [r7, #4]
 800cefc:	4413      	add	r3, r2
 800cefe:	460a      	mov	r2, r1
 800cf00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cf04:	e005      	b.n	800cf12 <VL53LX_f_008+0xd2>
			else
				palgo->VL53LX_p_042[i] = 0;
 800cf06:	7b7b      	ldrb	r3, [r7, #13]
 800cf08:	687a      	ldr	r2, [r7, #4]
 800cf0a:	4413      	add	r3, r2
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		lb++) {
 800cf12:	7bfb      	ldrb	r3, [r7, #15]
 800cf14:	3301      	adds	r3, #1
 800cf16:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53LX_p_044 +
 800cf18:	7bfa      	ldrb	r2, [r7, #15]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800cf20:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800cf26:	440b      	add	r3, r1
	for (lb = palgo->VL53LX_p_044;
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	db9a      	blt.n	800ce62 <VL53LX_f_008+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 800cf2c:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3714      	adds	r7, #20
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr

0800cf3c <VL53LX_f_009>:


VL53LX_Error VL53LX_f_009(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b087      	sub	sp, #28
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cf44:	2300      	movs	r3, #0
 800cf46:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 800cf50:	2300      	movs	r3, #0
 800cf52:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 800cf54:	2300      	movs	r3, #0
 800cf56:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53LX_p_030 - 1;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	78db      	ldrb	r3, [r3, #3]
 800cf60:	3b01      	subs	r3, #1
 800cf62:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 800cf64:	7cbb      	ldrb	r3, [r7, #18]
 800cf66:	085b      	lsrs	r3, r3, #1
 800cf68:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53LX_p_044;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800cf70:	75fb      	strb	r3, [r7, #23]
 800cf72:	e0a2      	b.n	800d0ba <VL53LX_f_009+0x17e>
		palgo->VL53LX_p_030);
		blb++) {



		i =  blb      % palgo->VL53LX_p_030;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	78da      	ldrb	r2, [r3, #3]
 800cf78:	7dfb      	ldrb	r3, [r7, #23]
 800cf7a:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf7e:	fb02 f201 	mul.w	r2, r2, r1
 800cf82:	1a9b      	subs	r3, r3, r2
 800cf84:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53LX_p_030;
 800cf86:	7dfb      	ldrb	r3, [r7, #23]
 800cf88:	3301      	adds	r3, #1
 800cf8a:	687a      	ldr	r2, [r7, #4]
 800cf8c:	78d2      	ldrb	r2, [r2, #3]
 800cf8e:	fb93 f1f2 	sdiv	r1, r3, r2
 800cf92:	fb02 f201 	mul.w	r2, r2, r1
 800cf96:	1a9b      	subs	r3, r3, r2
 800cf98:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53LX_p_021 &&
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	789b      	ldrb	r3, [r3, #2]
 800cf9e:	7d7a      	ldrb	r2, [r7, #21]
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	f080 8087 	bcs.w	800d0b4 <VL53LX_f_009+0x178>
				j < palgo->VL53LX_p_021) {
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53LX_p_021 &&
 800cfaa:	7d3a      	ldrb	r2, [r7, #20]
 800cfac:	429a      	cmp	r2, r3
 800cfae:	f080 8081 	bcs.w	800d0b4 <VL53LX_f_009+0x178>



			if (palgo->VL53LX_p_042[i] == 0 &&
 800cfb2:	7d7b      	ldrb	r3, [r7, #21]
 800cfb4:	687a      	ldr	r2, [r7, #4]
 800cfb6:	4413      	add	r3, r2
 800cfb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d12f      	bne.n	800d020 <VL53LX_f_009+0xe4>
					palgo->VL53LX_p_042[j] > 0) {
 800cfc0:	7d3b      	ldrb	r3, [r7, #20]
 800cfc2:	687a      	ldr	r2, [r7, #4]
 800cfc4:	4413      	add	r3, r2
 800cfc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
			if (palgo->VL53LX_p_042[i] == 0 &&
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d028      	beq.n	800d020 <VL53LX_f_009+0xe4>

				pulse_no = palgo->VL53LX_p_042[j] - 1;
 800cfce:	7d3b      	ldrb	r3, [r7, #20]
 800cfd0:	687a      	ldr	r2, [r7, #4]
 800cfd2:	4413      	add	r3, r2
 800cfd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cfd8:	3b01      	subs	r3, #1
 800cfda:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800cfe2:	7cfa      	ldrb	r2, [r7, #19]
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d21b      	bcs.n	800d020 <VL53LX_f_009+0xe4>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800cfe8:	7cfa      	ldrb	r2, [r7, #19]
 800cfea:	4613      	mov	r3, r2
 800cfec:	00db      	lsls	r3, r3, #3
 800cfee:	4413      	add	r3, r2
 800cff0:	009b      	lsls	r3, r3, #2
 800cff2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800cff6:	687a      	ldr	r2, [r7, #4]
 800cff8:	4413      	add	r3, r2
 800cffa:	3304      	adds	r3, #4
 800cffc:	60fb      	str	r3, [r7, #12]
					pdata->VL53LX_p_012 = blb;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	7dfa      	ldrb	r2, [r7, #23]
 800d002:	701a      	strb	r2, [r3, #0]
					pdata->VL53LX_p_019    = blb + 1;
 800d004:	7dfb      	ldrb	r3, [r7, #23]
 800d006:	3301      	adds	r3, #1
 800d008:	b2da      	uxtb	r2, r3
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	705a      	strb	r2, [r3, #1]
					pdata->VL53LX_p_023   = 0xFF;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	22ff      	movs	r2, #255	; 0xff
 800d012:	709a      	strb	r2, [r3, #2]
					pdata->VL53LX_p_024     = 0;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	2200      	movs	r2, #0
 800d018:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013   = 0;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	2200      	movs	r2, #0
 800d01e:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53LX_p_042[i] > 0
 800d020:	7d7b      	ldrb	r3, [r7, #21]
 800d022:	687a      	ldr	r2, [r7, #4]
 800d024:	4413      	add	r3, r2
 800d026:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d042      	beq.n	800d0b4 <VL53LX_f_009+0x178>
				&& palgo->VL53LX_p_042[j] == 0) {
 800d02e:	7d3b      	ldrb	r3, [r7, #20]
 800d030:	687a      	ldr	r2, [r7, #4]
 800d032:	4413      	add	r3, r2
 800d034:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d13b      	bne.n	800d0b4 <VL53LX_f_009+0x178>

				pulse_no = palgo->VL53LX_p_042[i] - 1;
 800d03c:	7d7b      	ldrb	r3, [r7, #21]
 800d03e:	687a      	ldr	r2, [r7, #4]
 800d040:	4413      	add	r3, r2
 800d042:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d046:	3b01      	subs	r3, #1
 800d048:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800d050:	7cfa      	ldrb	r2, [r7, #19]
 800d052:	429a      	cmp	r2, r3
 800d054:	d22e      	bcs.n	800d0b4 <VL53LX_f_009+0x178>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d056:	7cfa      	ldrb	r2, [r7, #19]
 800d058:	4613      	mov	r3, r2
 800d05a:	00db      	lsls	r3, r3, #3
 800d05c:	4413      	add	r3, r2
 800d05e:	009b      	lsls	r3, r3, #2
 800d060:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d064:	687a      	ldr	r2, [r7, #4]
 800d066:	4413      	add	r3, r2
 800d068:	3304      	adds	r3, #4
 800d06a:	60fb      	str	r3, [r7, #12]

					pdata->VL53LX_p_024    = blb;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	7dfa      	ldrb	r2, [r7, #23]
 800d070:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013  = blb + 1;
 800d072:	7dfb      	ldrb	r3, [r7, #23]
 800d074:	3301      	adds	r3, #1
 800d076:	b2da      	uxtb	r2, r3
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	711a      	strb	r2, [r3, #4]

					pdata->VL53LX_p_025 =
						(pdata->VL53LX_p_024 + 1) -
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53LX_p_019;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53LX_p_024 + 1) -
 800d084:	1ad3      	subs	r3, r2, r3
 800d086:	b2db      	uxtb	r3, r3
 800d088:	3301      	adds	r3, #1
 800d08a:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_025 =
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	715a      	strb	r2, [r3, #5]
					pdata->VL53LX_p_051 =
						(pdata->VL53LX_p_013 + 1) -
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53LX_p_012;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53LX_p_013 + 1) -
 800d098:	1ad3      	subs	r3, r2, r3
 800d09a:	b2db      	uxtb	r3, r3
 800d09c:	3301      	adds	r3, #1
 800d09e:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_051 =
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53LX_p_051 >
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	799b      	ldrb	r3, [r3, #6]
 800d0a8:	7cba      	ldrb	r2, [r7, #18]
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d202      	bcs.n	800d0b4 <VL53LX_f_009+0x178>
						max_filter_half_width)
						pdata->VL53LX_p_051 =
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	7cba      	ldrb	r2, [r7, #18]
 800d0b2:	719a      	strb	r2, [r3, #6]
		blb++) {
 800d0b4:	7dfb      	ldrb	r3, [r7, #23]
 800d0b6:	3301      	adds	r3, #1
 800d0b8:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53LX_p_044 +
 800d0ba:	7dfa      	ldrb	r2, [r7, #23]
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800d0c2:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53LX_p_044 +
 800d0c8:	440b      	add	r3, r1
	for (blb = palgo->VL53LX_p_044;
 800d0ca:	429a      	cmp	r2, r3
 800d0cc:	f6ff af52 	blt.w	800cf74 <VL53LX_f_009+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800d0d0:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	371c      	adds	r7, #28
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr

0800d0e0 <VL53LX_f_016>:


VL53LX_Error VL53LX_f_016(
	VL53LX_HistTargetOrder                target_order,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b090      	sub	sp, #64	; 0x40
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	6039      	str	r1, [r7, #0]
 800d0ea:	71fb      	strb	r3, [r7, #7]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	VL53LX_hist_pulse_data_t  tmp;
	VL53LX_hist_pulse_data_t *ptmp = &tmp;
 800d0f2:	f107 030c 	add.w	r3, r7, #12
 800d0f6:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53LX_hist_pulse_data_t *p0;
	VL53LX_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t swapped = 1;
 800d0fe:	2301      	movs	r3, #1
 800d100:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53LX_p_046 > 1))
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800d10a:	2b01      	cmp	r3, #1
 800d10c:	d965      	bls.n	800d1da <VL53LX_f_016+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 800d10e:	e05f      	b.n	800d1d0 <VL53LX_f_016+0xf0>

		swapped = 0;
 800d110:	2300      	movs	r3, #0
 800d112:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800d116:	2301      	movs	r3, #1
 800d118:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d11c:	e051      	b.n	800d1c2 <VL53LX_f_016+0xe2>

			p0 = &(palgo->VL53LX_p_003[i-1]);
 800d11e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d122:	1e5a      	subs	r2, r3, #1
 800d124:	4613      	mov	r3, r2
 800d126:	00db      	lsls	r3, r3, #3
 800d128:	4413      	add	r3, r2
 800d12a:	009b      	lsls	r3, r3, #2
 800d12c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d130:	683a      	ldr	r2, [r7, #0]
 800d132:	4413      	add	r3, r2
 800d134:	3304      	adds	r3, #4
 800d136:	637b      	str	r3, [r7, #52]	; 0x34
			p1 = &(palgo->VL53LX_p_003[i]);
 800d138:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800d13c:	4613      	mov	r3, r2
 800d13e:	00db      	lsls	r3, r3, #3
 800d140:	4413      	add	r3, r2
 800d142:	009b      	lsls	r3, r3, #2
 800d144:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d148:	683a      	ldr	r2, [r7, #0]
 800d14a:	4413      	add	r3, r2
 800d14c:	3304      	adds	r3, #4
 800d14e:	633b      	str	r3, [r7, #48]	; 0x30



			if (target_order
 800d150:	79fb      	ldrb	r3, [r7, #7]
 800d152:	2b02      	cmp	r3, #2
 800d154:	d118      	bne.n	800d188 <VL53LX_f_016+0xa8>
			== VL53LX_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53LX_p_010 <
 800d156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d158:	691a      	ldr	r2, [r3, #16]
						p1->VL53LX_p_010) {
 800d15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d15c:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53LX_p_010 <
 800d15e:	429a      	cmp	r2, r3
 800d160:	da2a      	bge.n	800d1b8 <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800d162:	2224      	movs	r2, #36	; 0x24
 800d164:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d166:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d168:	f007 ffe4 	bl	8015134 <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800d16c:	2224      	movs	r2, #36	; 0x24
 800d16e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d170:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d172:	f007 ffdf 	bl	8015134 <memcpy>
					p0, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800d176:	2224      	movs	r2, #36	; 0x24
 800d178:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d17a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d17c:	f007 ffda 	bl	8015134 <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800d180:	2301      	movs	r3, #1
 800d182:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800d186:	e017      	b.n	800d1b8 <VL53LX_f_016+0xd8>
				}

			} else {

				if (p0->VL53LX_p_011 > p1->VL53LX_p_011) {
 800d188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d18a:	699a      	ldr	r2, [r3, #24]
 800d18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d18e:	699b      	ldr	r3, [r3, #24]
 800d190:	429a      	cmp	r2, r3
 800d192:	d911      	bls.n	800d1b8 <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800d194:	2224      	movs	r2, #36	; 0x24
 800d196:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d198:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d19a:	f007 ffcb 	bl	8015134 <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800d19e:	2224      	movs	r2, #36	; 0x24
 800d1a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d1a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1a4:	f007 ffc6 	bl	8015134 <memcpy>
					p0,   sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800d1a8:	2224      	movs	r2, #36	; 0x24
 800d1aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d1ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d1ae:	f007 ffc1 	bl	8015134 <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800d1b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d1bc:	3301      	adds	r3, #1
 800d1be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800d1c8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d3a6      	bcc.n	800d11e <VL53LX_f_016+0x3e>
	while (swapped > 0) {
 800d1d0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d19b      	bne.n	800d110 <VL53LX_f_016+0x30>

			}
		}
	}

ENDFUNC:
 800d1d8:	e000      	b.n	800d1dc <VL53LX_f_016+0xfc>
		goto ENDFUNC;
 800d1da:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 800d1dc:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d

}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3740      	adds	r7, #64	; 0x40
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <VL53LX_f_010>:

VL53LX_Error VL53LX_f_010(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b087      	sub	sp, #28
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	60b9      	str	r1, [r7, #8]
 800d1f2:	607a      	str	r2, [r7, #4]
 800d1f4:	73fb      	strb	r3, [r7, #15]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800d1fe:	2300      	movs	r3, #0
 800d200:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d202:	7bfa      	ldrb	r2, [r7, #15]
 800d204:	4613      	mov	r3, r2
 800d206:	00db      	lsls	r3, r3, #3
 800d208:	4413      	add	r3, r2
 800d20a:	009b      	lsls	r3, r3, #2
 800d20c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d210:	687a      	ldr	r2, [r7, #4]
 800d212:	4413      	add	r3, r2
 800d214:	3304      	adds	r3, #4
 800d216:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_017  = 0;
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	2200      	movs	r2, #0
 800d21c:	60da      	str	r2, [r3, #12]
	pdata->VL53LX_p_016 = 0;
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	2200      	movs	r2, #0
 800d222:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800d224:	693b      	ldr	r3, [r7, #16]
 800d226:	781b      	ldrb	r3, [r3, #0]
 800d228:	75fb      	strb	r3, [r7, #23]
 800d22a:	e01c      	b.n	800d266 <VL53LX_f_010+0x7e>
		i =  lb % palgo->VL53LX_p_030;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	78da      	ldrb	r2, [r3, #3]
 800d230:	7dfb      	ldrb	r3, [r7, #23]
 800d232:	fbb3 f1f2 	udiv	r1, r3, r2
 800d236:	fb02 f201 	mul.w	r2, r2, r1
 800d23a:	1a9b      	subs	r3, r3, r2
 800d23c:	757b      	strb	r3, [r7, #21]
		pdata->VL53LX_p_017  += pbins->bin_data[i];
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	68da      	ldr	r2, [r3, #12]
 800d242:	7d79      	ldrb	r1, [r7, #21]
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	3106      	adds	r1, #6
 800d248:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d24c:	441a      	add	r2, r3
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	60da      	str	r2, [r3, #12]
		pdata->VL53LX_p_016 += palgo->VL53LX_p_028;
 800d252:	693b      	ldr	r3, [r7, #16]
 800d254:	689a      	ldr	r2, [r3, #8]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	689b      	ldr	r3, [r3, #8]
 800d25a:	441a      	add	r2, r3
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800d260:	7dfb      	ldrb	r3, [r7, #23]
 800d262:	3301      	adds	r3, #1
 800d264:	75fb      	strb	r3, [r7, #23]
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	791b      	ldrb	r3, [r3, #4]
 800d26a:	7dfa      	ldrb	r2, [r7, #23]
 800d26c:	429a      	cmp	r2, r3
 800d26e:	d9dd      	bls.n	800d22c <VL53LX_f_010+0x44>
	}



	pdata->VL53LX_p_010 =
		pdata->VL53LX_p_017 - pdata->VL53LX_p_016;
 800d270:	693b      	ldr	r3, [r7, #16]
 800d272:	68da      	ldr	r2, [r3, #12]
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	689b      	ldr	r3, [r3, #8]
 800d278:	1ad2      	subs	r2, r2, r3
	pdata->VL53LX_p_010 =
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 800d27e:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800d282:	4618      	mov	r0, r3
 800d284:	371c      	adds	r7, #28
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr

0800d28e <VL53LX_f_015>:
VL53LX_Error VL53LX_f_015(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d28e:	b590      	push	{r4, r7, lr}
 800d290:	b08d      	sub	sp, #52	; 0x34
 800d292:	af02      	add	r7, sp, #8
 800d294:	60ba      	str	r2, [r7, #8]
 800d296:	607b      	str	r3, [r7, #4]
 800d298:	4603      	mov	r3, r0
 800d29a:	73fb      	strb	r3, [r7, #15]
 800d29c:	460b      	mov	r3, r1
 800d29e:	73bb      	strb	r3, [r7, #14]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t   i            = 0;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t   VL53LX_p_012 = 0;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	843b      	strh	r3, [r7, #32]
	int16_t   VL53LX_p_013   = 0;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t  tmp_phase    = 0;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	61bb      	str	r3, [r7, #24]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d2bc:	7bfa      	ldrb	r2, [r7, #15]
 800d2be:	4613      	mov	r3, r2
 800d2c0:	00db      	lsls	r3, r3, #3
 800d2c2:	4413      	add	r3, r2
 800d2c4:	009b      	lsls	r3, r3, #2
 800d2c6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d2ca:	687a      	ldr	r2, [r7, #4]
 800d2cc:	4413      	add	r3, r2
 800d2ce:	3304      	adds	r3, #4
 800d2d0:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53LX_p_023 == 0xFF)
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	789b      	ldrb	r3, [r3, #2]
 800d2d6:	2bff      	cmp	r3, #255	; 0xff
 800d2d8:	d102      	bne.n	800d2e0 <VL53LX_f_015+0x52>
		pdata->VL53LX_p_023 = 1;
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	2201      	movs	r2, #1
 800d2de:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53LX_p_023 % palgo->VL53LX_p_030;
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	789b      	ldrb	r3, [r3, #2]
 800d2e4:	687a      	ldr	r2, [r7, #4]
 800d2e6:	78d2      	ldrb	r2, [r2, #3]
 800d2e8:	fbb3 f1f2 	udiv	r1, r3, r2
 800d2ec:	fb02 f201 	mul.w	r2, r2, r1
 800d2f0:	1a9b      	subs	r3, r3, r2
 800d2f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	VL53LX_p_012  = (int16_t)i;
 800d2f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d2fa:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 += (int16_t)pdata->VL53LX_p_012;
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	b29a      	uxth	r2, r3
 800d302:	8c3b      	ldrh	r3, [r7, #32]
 800d304:	4413      	add	r3, r2
 800d306:	b29b      	uxth	r3, r3
 800d308:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 -= (int16_t)pdata->VL53LX_p_023;
 800d30a:	8c3a      	ldrh	r2, [r7, #32]
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	789b      	ldrb	r3, [r3, #2]
 800d310:	b29b      	uxth	r3, r3
 800d312:	1ad3      	subs	r3, r2, r3
 800d314:	b29b      	uxth	r3, r3
 800d316:	843b      	strh	r3, [r7, #32]

	VL53LX_p_013    = (int16_t)i;
 800d318:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d31c:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   += (int16_t)pdata->VL53LX_p_013;
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	791b      	ldrb	r3, [r3, #4]
 800d322:	b29a      	uxth	r2, r3
 800d324:	8bfb      	ldrh	r3, [r7, #30]
 800d326:	4413      	add	r3, r2
 800d328:	b29b      	uxth	r3, r3
 800d32a:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   -= (int16_t)pdata->VL53LX_p_023;
 800d32c:	8bfa      	ldrh	r2, [r7, #30]
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	789b      	ldrb	r3, [r3, #2]
 800d332:	b29b      	uxth	r3, r3
 800d334:	1ad3      	subs	r3, r2, r3
 800d336:	b29b      	uxth	r3, r3
 800d338:	83fb      	strh	r3, [r7, #30]


	window_width = VL53LX_p_013 - VL53LX_p_012;
 800d33a:	8bfa      	ldrh	r2, [r7, #30]
 800d33c:	8c3b      	ldrh	r3, [r7, #32]
 800d33e:	1ad3      	subs	r3, r2, r3
 800d340:	b29b      	uxth	r3, r3
 800d342:	84bb      	strh	r3, [r7, #36]	; 0x24
	if (window_width > 3)
 800d344:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d348:	2b03      	cmp	r3, #3
 800d34a:	dd01      	ble.n	800d350 <VL53LX_f_015+0xc2>
		window_width = 3;
 800d34c:	2303      	movs	r3, #3
 800d34e:	84bb      	strh	r3, [r7, #36]	; 0x24

	status =
		VL53LX_f_020(
			VL53LX_p_012,
			VL53LX_p_012 + window_width,
 800d350:	8c3a      	ldrh	r2, [r7, #32]
 800d352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d354:	4413      	add	r3, r2
 800d356:	b29b      	uxth	r3, r3
		VL53LX_f_020(
 800d358:	b219      	sxth	r1, r3
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	78da      	ldrb	r2, [r3, #3]
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	3314      	adds	r3, #20
 800d362:	7bbc      	ldrb	r4, [r7, #14]
 800d364:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800d368:	9301      	str	r3, [sp, #4]
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	9300      	str	r3, [sp, #0]
 800d36e:	4623      	mov	r3, r4
 800d370:	f000 f846 	bl	800d400 <VL53LX_f_020>
 800d374:	4603      	mov	r3, r0
 800d376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			clip_events,
			pbins,
			&(pdata->VL53LX_p_026));


	if (status == VL53LX_ERROR_NONE)
 800d37a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d114      	bne.n	800d3ac <VL53LX_f_015+0x11e>
		status =
			VL53LX_f_020(
				VL53LX_p_013 - window_width,
 800d382:	8bfa      	ldrh	r2, [r7, #30]
 800d384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d386:	1ad3      	subs	r3, r2, r3
 800d388:	b29b      	uxth	r3, r3
			VL53LX_f_020(
 800d38a:	b218      	sxth	r0, r3
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	78da      	ldrb	r2, [r3, #3]
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	331c      	adds	r3, #28
 800d394:	7bbc      	ldrb	r4, [r7, #14]
 800d396:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800d39a:	9301      	str	r3, [sp, #4]
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	9300      	str	r3, [sp, #0]
 800d3a0:	4623      	mov	r3, r4
 800d3a2:	f000 f82d 	bl	800d400 <VL53LX_f_020>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				clip_events,
				pbins,
				&(pdata->VL53LX_p_027));


	if (pdata->VL53LX_p_026 > pdata->VL53LX_p_027) {
 800d3ac:	697b      	ldr	r3, [r7, #20]
 800d3ae:	695a      	ldr	r2, [r3, #20]
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	69db      	ldr	r3, [r3, #28]
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d909      	bls.n	800d3cc <VL53LX_f_015+0x13e>
		tmp_phase        = pdata->VL53LX_p_026;
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	695b      	ldr	r3, [r3, #20]
 800d3bc:	61bb      	str	r3, [r7, #24]
		pdata->VL53LX_p_026 = pdata->VL53LX_p_027;
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	69da      	ldr	r2, [r3, #28]
 800d3c2:	697b      	ldr	r3, [r7, #20]
 800d3c4:	615a      	str	r2, [r3, #20]
		pdata->VL53LX_p_027 = tmp_phase;
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	69ba      	ldr	r2, [r7, #24]
 800d3ca:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53LX_p_011 < pdata->VL53LX_p_026)
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	699a      	ldr	r2, [r3, #24]
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	695b      	ldr	r3, [r3, #20]
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d203      	bcs.n	800d3e0 <VL53LX_f_015+0x152>
		pdata->VL53LX_p_026 = pdata->VL53LX_p_011;
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	699a      	ldr	r2, [r3, #24]
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	615a      	str	r2, [r3, #20]


	if (pdata->VL53LX_p_011 > pdata->VL53LX_p_027)
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	699a      	ldr	r2, [r3, #24]
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	69db      	ldr	r3, [r3, #28]
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	d903      	bls.n	800d3f4 <VL53LX_f_015+0x166>
		pdata->VL53LX_p_027 = pdata->VL53LX_p_011;
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	699a      	ldr	r2, [r3, #24]
 800d3f0:	697b      	ldr	r3, [r7, #20]
 800d3f2:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 800d3f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	372c      	adds	r7, #44	; 0x2c
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd90      	pop	{r4, r7, pc}

0800d400 <VL53LX_f_020>:
	int16_t                            VL53LX_p_024,
	uint8_t                            VL53LX_p_030,
	uint8_t                            clip_events,
	VL53LX_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 800d400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d404:	b093      	sub	sp, #76	; 0x4c
 800d406:	af00      	add	r7, sp, #0
 800d408:	4616      	mov	r6, r2
 800d40a:	461a      	mov	r2, r3
 800d40c:	4603      	mov	r3, r0
 800d40e:	83fb      	strh	r3, [r7, #30]
 800d410:	460b      	mov	r3, r1
 800d412:	83bb      	strh	r3, [r7, #28]
 800d414:	4633      	mov	r3, r6
 800d416:	76fb      	strb	r3, [r7, #27]
 800d418:	4613      	mov	r3, r2
 800d41a:	76bb      	strb	r3, [r7, #26]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d41c:	2300      	movs	r3, #0
 800d41e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	int16_t  i            = 0;
 800d422:	2300      	movs	r3, #0
 800d424:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t  lb            = 0;
 800d428:	2300      	movs	r3, #0
 800d42a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	int64_t VL53LX_p_018        = 0;
 800d42e:	f04f 0200 	mov.w	r2, #0
 800d432:	f04f 0300 	mov.w	r3, #0
 800d436:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int64_t event_sum     = 0;
 800d43a:	f04f 0200 	mov.w	r2, #0
 800d43e:	f04f 0300 	mov.w	r3, #0
 800d442:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	int64_t weighted_sum  = 0;
 800d446:	f04f 0200 	mov.w	r2, #0
 800d44a:	f04f 0300 	mov.w	r3, #0
 800d44e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	LOG_FUNCTION_START("");

	*pphase = VL53LX_MAX_ALLOWED_PHASE;
 800d452:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d454:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d458:	601a      	str	r2, [r3, #0]

	if (VL53LX_p_030 != 0)
 800d45a:	7efb      	ldrb	r3, [r7, #27]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	f000 808b 	beq.w	800d578 <VL53LX_f_020+0x178>
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800d462:	8bfb      	ldrh	r3, [r7, #30]
 800d464:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d468:	e07f      	b.n	800d56a <VL53LX_f_020+0x16a>

		if (lb < 0)
 800d46a:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800d46e:	2b00      	cmp	r3, #0
 800d470:	da08      	bge.n	800d484 <VL53LX_f_020+0x84>
			i = lb + (int16_t)VL53LX_p_030;
 800d472:	7efb      	ldrb	r3, [r7, #27]
 800d474:	b29a      	uxth	r2, r3
 800d476:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d47a:	4413      	add	r3, r2
 800d47c:	b29b      	uxth	r3, r3
 800d47e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d482:	e009      	b.n	800d498 <VL53LX_f_020+0x98>
		else
			i = lb % (int16_t)VL53LX_p_030;
 800d484:	f9b7 1044 	ldrsh.w	r1, [r7, #68]	; 0x44
 800d488:	7efa      	ldrb	r2, [r7, #27]
 800d48a:	fb91 f3f2 	sdiv	r3, r1, r2
 800d48e:	fb02 f303 	mul.w	r3, r2, r3
 800d492:	1acb      	subs	r3, r1, r3
 800d494:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

		if ((i >= 0) && (i < VL53LX_HISTOGRAM_BUFFER_SIZE)) {
 800d498:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	db5d      	blt.n	800d55c <VL53LX_f_020+0x15c>
 800d4a0:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800d4a4:	2b17      	cmp	r3, #23
 800d4a6:	dc59      	bgt.n	800d55c <VL53LX_f_020+0x15c>
			VL53LX_p_018 =
				(int64_t)pbins->bin_data[i] -
 800d4a8:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800d4ac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d4ae:	3306      	adds	r3, #6
 800d4b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	ea4f 71e0 	mov.w	r1, r0, asr #31
				(int64_t)pbins->VL53LX_p_028;
 800d4ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d4bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	ea4f 73e2 	mov.w	r3, r2, asr #31
			VL53LX_p_018 =
 800d4c6:	1a86      	subs	r6, r0, r2
 800d4c8:	613e      	str	r6, [r7, #16]
 800d4ca:	eb61 0303 	sbc.w	r3, r1, r3
 800d4ce:	617b      	str	r3, [r7, #20]
 800d4d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d4d4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

			if (clip_events > 0 && VL53LX_p_018 < 0)
 800d4d8:	7ebb      	ldrb	r3, [r7, #26]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d00b      	beq.n	800d4f6 <VL53LX_f_020+0xf6>
 800d4de:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d4e2:	2a00      	cmp	r2, #0
 800d4e4:	f173 0300 	sbcs.w	r3, r3, #0
 800d4e8:	da05      	bge.n	800d4f6 <VL53LX_f_020+0xf6>
				VL53LX_p_018 = 0;
 800d4ea:	f04f 0200 	mov.w	r2, #0
 800d4ee:	f04f 0300 	mov.w	r3, #0
 800d4f2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			event_sum += VL53LX_p_018;
 800d4f6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d4fa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d4fe:	1886      	adds	r6, r0, r2
 800d500:	60be      	str	r6, [r7, #8]
 800d502:	eb41 0303 	adc.w	r3, r1, r3
 800d506:	60fb      	str	r3, [r7, #12]
 800d508:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d50c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			weighted_sum +=
				(VL53LX_p_018 * (1024 + (2048*(int64_t)lb)));
 800d510:	f9b7 0044 	ldrsh.w	r0, [r7, #68]	; 0x44
 800d514:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800d518:	f04f 0200 	mov.w	r2, #0
 800d51c:	f04f 0300 	mov.w	r3, #0
 800d520:	02cb      	lsls	r3, r1, #11
 800d522:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800d526:	02c2      	lsls	r2, r0, #11
 800d528:	f512 6880 	adds.w	r8, r2, #1024	; 0x400
 800d52c:	f143 0900 	adc.w	r9, r3, #0
 800d530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d532:	fb09 f203 	mul.w	r2, r9, r3
 800d536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d538:	fb08 f303 	mul.w	r3, r8, r3
 800d53c:	441a      	add	r2, r3
 800d53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d540:	fba3 0108 	umull	r0, r1, r3, r8
 800d544:	1853      	adds	r3, r2, r1
 800d546:	4619      	mov	r1, r3
			weighted_sum +=
 800d548:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d54c:	1816      	adds	r6, r2, r0
 800d54e:	603e      	str	r6, [r7, #0]
 800d550:	414b      	adcs	r3, r1
 800d552:	607b      	str	r3, [r7, #4]
 800d554:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d558:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800d55c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800d560:	b29b      	uxth	r3, r3
 800d562:	3301      	adds	r3, #1
 800d564:	b29b      	uxth	r3, r3
 800d566:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d56a:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 800d56e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800d572:	429a      	cmp	r2, r3
 800d574:	f77f af79 	ble.w	800d46a <VL53LX_f_020+0x6a>
			VL53LX_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 800d578:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d57c:	2a01      	cmp	r2, #1
 800d57e:	f173 0300 	sbcs.w	r3, r3, #0
 800d582:	db33      	blt.n	800d5ec <VL53LX_f_020+0x1ec>
		weighted_sum += do_division_s(event_sum, 2);
 800d584:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d588:	0fd9      	lsrs	r1, r3, #31
 800d58a:	4608      	mov	r0, r1
 800d58c:	f04f 0100 	mov.w	r1, #0
 800d590:	1884      	adds	r4, r0, r2
 800d592:	eb41 0503 	adc.w	r5, r1, r3
 800d596:	f04f 0200 	mov.w	r2, #0
 800d59a:	f04f 0300 	mov.w	r3, #0
 800d59e:	0862      	lsrs	r2, r4, #1
 800d5a0:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800d5a4:	106b      	asrs	r3, r5, #1
 800d5a6:	4610      	mov	r0, r2
 800d5a8:	4619      	mov	r1, r3
 800d5aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d5ae:	eb12 0a00 	adds.w	sl, r2, r0
 800d5b2:	eb43 0b01 	adc.w	fp, r3, r1
 800d5b6:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
		weighted_sum = do_division_s(weighted_sum, event_sum);
 800d5ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d5be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d5c2:	f7f2 fe5d 	bl	8000280 <__aeabi_ldivmod>
 800d5c6:	4602      	mov	r2, r0
 800d5c8:	460b      	mov	r3, r1
 800d5ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		if (weighted_sum < 0)
 800d5ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d5d2:	2a00      	cmp	r2, #0
 800d5d4:	f173 0300 	sbcs.w	r3, r3, #0
 800d5d8:	da05      	bge.n	800d5e6 <VL53LX_f_020+0x1e6>
			weighted_sum = 0;
 800d5da:	f04f 0200 	mov.w	r2, #0
 800d5de:	f04f 0300 	mov.w	r3, #0
 800d5e2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		*pphase = (uint32_t)weighted_sum;
 800d5e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d5ea:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d5ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	374c      	adds	r7, #76	; 0x4c
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d5fa <VL53LX_f_011>:
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53LX_histogram_bin_data_t           *ppulse)
{
 800d5fa:	b580      	push	{r7, lr}
 800d5fc:	b086      	sub	sp, #24
 800d5fe:	af00      	add	r7, sp, #0
 800d600:	60b9      	str	r1, [r7, #8]
 800d602:	607a      	str	r2, [r7, #4]
 800d604:	603b      	str	r3, [r7, #0]
 800d606:	4603      	mov	r3, r0
 800d608:	73fb      	strb	r3, [r7, #15]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d60a:	2300      	movs	r3, #0
 800d60c:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800d60e:	2300      	movs	r3, #0
 800d610:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800d612:	2300      	movs	r3, #0
 800d614:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d616:	7bfa      	ldrb	r2, [r7, #15]
 800d618:	4613      	mov	r3, r2
 800d61a:	00db      	lsls	r3, r3, #3
 800d61c:	4413      	add	r3, r2
 800d61e:	009b      	lsls	r3, r3, #2
 800d620:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d624:	687a      	ldr	r2, [r7, #4]
 800d626:	4413      	add	r3, r2
 800d628:	3304      	adds	r3, #4
 800d62a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53LX_histogram_bin_data_t));
 800d62c:	22ac      	movs	r2, #172	; 0xac
 800d62e:	68b9      	ldr	r1, [r7, #8]
 800d630:	6a38      	ldr	r0, [r7, #32]
 800d632:	f007 fd7f 	bl	8015134 <memcpy>



	for (lb = palgo->VL53LX_p_044;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800d63c:	75fb      	strb	r3, [r7, #23]
 800d63e:	e020      	b.n	800d682 <VL53LX_f_011+0x88>
		lb < (palgo->VL53LX_p_044 +
		palgo->VL53LX_p_030);
		lb++) {

		if (lb < pdata->VL53LX_p_012 || lb > pdata->VL53LX_p_013) {
 800d640:	693b      	ldr	r3, [r7, #16]
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	7dfa      	ldrb	r2, [r7, #23]
 800d646:	429a      	cmp	r2, r3
 800d648:	d304      	bcc.n	800d654 <VL53LX_f_011+0x5a>
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	791b      	ldrb	r3, [r3, #4]
 800d64e:	7dfa      	ldrb	r2, [r7, #23]
 800d650:	429a      	cmp	r2, r3
 800d652:	d913      	bls.n	800d67c <VL53LX_f_011+0x82>
			i =  lb % palgo->VL53LX_p_030;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	78da      	ldrb	r2, [r3, #3]
 800d658:	7dfb      	ldrb	r3, [r7, #23]
 800d65a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d65e:	fb02 f201 	mul.w	r2, r2, r1
 800d662:	1a9b      	subs	r3, r3, r2
 800d664:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53LX_p_021)
 800d666:	6a3b      	ldr	r3, [r7, #32]
 800d668:	7a9b      	ldrb	r3, [r3, #10]
 800d66a:	7d7a      	ldrb	r2, [r7, #21]
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d205      	bcs.n	800d67c <VL53LX_f_011+0x82>
				ppulse->bin_data[i] = pad_value;
 800d670:	7d7a      	ldrb	r2, [r7, #21]
 800d672:	6a3b      	ldr	r3, [r7, #32]
 800d674:	3206      	adds	r2, #6
 800d676:	6839      	ldr	r1, [r7, #0]
 800d678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 800d67c:	7dfb      	ldrb	r3, [r7, #23]
 800d67e:	3301      	adds	r3, #1
 800d680:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53LX_p_044 +
 800d682:	7dfa      	ldrb	r2, [r7, #23]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800d68a:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800d690:	440b      	add	r3, r1
	for (lb = palgo->VL53LX_p_044;
 800d692:	429a      	cmp	r2, r3
 800d694:	dbd4      	blt.n	800d640 <VL53LX_f_011+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800d696:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3718      	adds	r7, #24
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}

0800d6a2 <VL53LX_f_014>:
	uint8_t                       crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t  *phist_data_ap,
	VL53LX_histogram_bin_data_t  *phist_data_zp,
	VL53LX_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 800d6a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6a6:	b096      	sub	sp, #88	; 0x58
 800d6a8:	af08      	add	r7, sp, #32
 800d6aa:	4604      	mov	r4, r0
 800d6ac:	4608      	mov	r0, r1
 800d6ae:	4611      	mov	r1, r2
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	4623      	mov	r3, r4
 800d6b4:	73fb      	strb	r3, [r7, #15]
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	73bb      	strb	r3, [r7, #14]
 800d6ba:	460b      	mov	r3, r1
 800d6bc:	737b      	strb	r3, [r7, #13]
 800d6be:	4613      	mov	r3, r2
 800d6c0:	733b      	strb	r3, [r7, #12]


	VL53LX_Error status      = VL53LX_ERROR_NONE;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53LX_Error func_status = VL53LX_ERROR_NONE;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t  i    = 0;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int32_t  VL53LX_p_007    = 0;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t  VL53LX_p_032    = 0;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t  VL53LX_p_001    = 0;
 800d6dc:	2300      	movs	r3, #0
 800d6de:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  a_zp = 0;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  c_zp = 0;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_030 == 0) {
 800d6f4:	7b7b      	ldrb	r3, [r7, #13]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d106      	bne.n	800d708 <VL53LX_f_014+0x66>
		*psigma_est = 0xFFFF;
 800d6fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d6fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d700:	801a      	strh	r2, [r3, #0]
		return VL53LX_ERROR_DIVISION_BY_ZERO;
 800d702:	f06f 030e 	mvn.w	r3, #14
 800d706:	e06f      	b.n	800d7e8 <VL53LX_f_014+0x146>
	}
	i = bin % VL53LX_p_030;
 800d708:	7bfb      	ldrb	r3, [r7, #15]
 800d70a:	7b7a      	ldrb	r2, [r7, #13]
 800d70c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d710:	fb02 f201 	mul.w	r2, r2, r1
 800d714:	1a9b      	subs	r3, r3, r2
 800d716:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35



	VL53LX_f_022(
 800d71a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d71e:	7b39      	ldrb	r1, [r7, #12]
 800d720:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800d724:	f107 0320 	add.w	r3, r7, #32
 800d728:	9301      	str	r3, [sp, #4]
 800d72a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d72e:	9300      	str	r3, [sp, #0]
 800d730:	4613      	mov	r3, r2
 800d732:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d734:	f000 fda8 	bl	800e288 <VL53LX_f_022>
			&VL53LX_p_032,
			&c_zp);



	VL53LX_f_022(
 800d738:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d73c:	7b39      	ldrb	r1, [r7, #12]
 800d73e:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800d742:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d746:	9301      	str	r3, [sp, #4]
 800d748:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d74c:	9300      	str	r3, [sp, #0]
 800d74e:	4613      	mov	r3, r2
 800d750:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d752:	f000 fd99 	bl	800e288 <VL53LX_f_022>
			phist_data_ap,
			&VL53LX_p_007,
			&VL53LX_p_032,
			&VL53LX_p_001);

	if (crosstalk_compensation_enable > 0)
 800d756:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d00e      	beq.n	800d77c <VL53LX_f_014+0xda>
		VL53LX_f_022(
 800d75e:	f107 021c 	add.w	r2, r7, #28
 800d762:	7b39      	ldrb	r1, [r7, #12]
 800d764:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800d768:	f107 0314 	add.w	r3, r7, #20
 800d76c:	9301      	str	r3, [sp, #4]
 800d76e:	f107 0318 	add.w	r3, r7, #24
 800d772:	9300      	str	r3, [sp, #0]
 800d774:	4613      	mov	r3, r2
 800d776:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d778:	f000 fd86 	bl	800e288 <VL53LX_f_022>




	func_status =
		VL53LX_f_023(
 800d77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d77e:	469c      	mov	ip, r3
 800d780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d782:	469e      	mov	lr, r3
 800d784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d786:	4698      	mov	r8, r3
 800d788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d78a:	4619      	mov	r1, r3
 800d78c:	6a3b      	ldr	r3, [r7, #32]
 800d78e:	461c      	mov	r4, r3
 800d790:	69bb      	ldr	r3, [r7, #24]
 800d792:	461d      	mov	r5, r3
 800d794:	69fb      	ldr	r3, [r7, #28]
 800d796:	461e      	mov	r6, r3
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53LX_p_028,
 800d79c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d79e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
		VL53LX_f_023(
 800d7a2:	607b      	str	r3, [r7, #4]
 800d7a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7a6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d7aa:	7bb8      	ldrb	r0, [r7, #14]
 800d7ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d7ae:	9207      	str	r2, [sp, #28]
 800d7b0:	9306      	str	r3, [sp, #24]
 800d7b2:	687a      	ldr	r2, [r7, #4]
 800d7b4:	9205      	str	r2, [sp, #20]
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	9304      	str	r3, [sp, #16]
 800d7ba:	9603      	str	r6, [sp, #12]
 800d7bc:	9502      	str	r5, [sp, #8]
 800d7be:	9401      	str	r4, [sp, #4]
 800d7c0:	9100      	str	r1, [sp, #0]
 800d7c2:	4643      	mov	r3, r8
 800d7c4:	4672      	mov	r2, lr
 800d7c6:	4661      	mov	r1, ip
 800d7c8:	f002 fee6 	bl	8010598 <VL53LX_f_023>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			psigma_est);




	if (func_status == VL53LX_ERROR_DIVISION_BY_ZERO)
 800d7d2:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 800d7d6:	f113 0f0f 	cmn.w	r3, #15
 800d7da:	d103      	bne.n	800d7e4 <VL53LX_f_014+0x142>
		*psigma_est = 0xFFFF;
 800d7dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d7de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d7e2:	801a      	strh	r2, [r3, #0]


	return status;
 800d7e4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3738      	adds	r7, #56	; 0x38
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d7f2 <VL53LX_f_017>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53LX_histogram_bin_data_t *pbins,
	VL53LX_hist_pulse_data_t    *ppulse,
	VL53LX_range_data_t         *pdata)
{
 800d7f2:	b490      	push	{r4, r7}
 800d7f4:	b084      	sub	sp, #16
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	4604      	mov	r4, r0
 800d7fa:	4608      	mov	r0, r1
 800d7fc:	4611      	mov	r1, r2
 800d7fe:	461a      	mov	r2, r3
 800d800:	4623      	mov	r3, r4
 800d802:	71fb      	strb	r3, [r7, #7]
 800d804:	4603      	mov	r3, r0
 800d806:	71bb      	strb	r3, [r7, #6]
 800d808:	460b      	mov	r3, r1
 800d80a:	717b      	strb	r3, [r7, #5]
 800d80c:	4613      	mov	r3, r2
 800d80e:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 800d810:	2300      	movs	r3, #0
 800d812:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 800d814:	2300      	movs	r3, #0
 800d816:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 800d818:	6a3b      	ldr	r3, [r7, #32]
 800d81a:	79fa      	ldrb	r2, [r7, #7]
 800d81c:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 800d81e:	6a3b      	ldr	r3, [r7, #32]
 800d820:	2200      	movs	r2, #0
 800d822:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_012          = ppulse->VL53LX_p_012;
 800d824:	69fb      	ldr	r3, [r7, #28]
 800d826:	781a      	ldrb	r2, [r3, #0]
 800d828:	6a3b      	ldr	r3, [r7, #32]
 800d82a:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_019             = ppulse->VL53LX_p_019;
 800d82c:	69fb      	ldr	r3, [r7, #28]
 800d82e:	785a      	ldrb	r2, [r3, #1]
 800d830:	6a3b      	ldr	r3, [r7, #32]
 800d832:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_023            = ppulse->VL53LX_p_023;
 800d834:	69fb      	ldr	r3, [r7, #28]
 800d836:	789a      	ldrb	r2, [r3, #2]
 800d838:	6a3b      	ldr	r3, [r7, #32]
 800d83a:	729a      	strb	r2, [r3, #10]
	pdata->VL53LX_p_024              = ppulse->VL53LX_p_024;
 800d83c:	69fb      	ldr	r3, [r7, #28]
 800d83e:	78da      	ldrb	r2, [r3, #3]
 800d840:	6a3b      	ldr	r3, [r7, #32]
 800d842:	72da      	strb	r2, [r3, #11]
	pdata->VL53LX_p_013            = ppulse->VL53LX_p_013;
 800d844:	69fb      	ldr	r3, [r7, #28]
 800d846:	791a      	ldrb	r2, [r3, #4]
 800d848:	6a3b      	ldr	r3, [r7, #32]
 800d84a:	731a      	strb	r2, [r3, #12]
	pdata->VL53LX_p_025             = ppulse->VL53LX_p_025;
 800d84c:	69fb      	ldr	r3, [r7, #28]
 800d84e:	795a      	ldrb	r2, [r3, #5]
 800d850:	6a3b      	ldr	r3, [r7, #32]
 800d852:	735a      	strb	r2, [r3, #13]



	pdata->VL53LX_p_029  =
		(ppulse->VL53LX_p_013 + 1) - ppulse->VL53LX_p_012;
 800d854:	69fb      	ldr	r3, [r7, #28]
 800d856:	791a      	ldrb	r2, [r3, #4]
 800d858:	69fb      	ldr	r3, [r7, #28]
 800d85a:	781b      	ldrb	r3, [r3, #0]
 800d85c:	1ad3      	subs	r3, r2, r3
 800d85e:	b2db      	uxtb	r3, r3
 800d860:	3301      	adds	r3, #1
 800d862:	b2da      	uxtb	r2, r3
	pdata->VL53LX_p_029  =
 800d864:	6a3b      	ldr	r3, [r7, #32]
 800d866:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 800d868:	69bb      	ldr	r3, [r7, #24]
 800d86a:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800d86e:	6a3b      	ldr	r3, [r7, #32]
 800d870:	829a      	strh	r2, [r3, #20]
	pdata->VL53LX_p_002              = ppulse->VL53LX_p_002;
 800d872:	69fb      	ldr	r3, [r7, #28]
 800d874:	8c1a      	ldrh	r2, [r3, #32]
 800d876:	6a3b      	ldr	r3, [r7, #32]
 800d878:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->VL53LX_p_026             = (uint16_t)ppulse->VL53LX_p_026;
 800d87a:	69fb      	ldr	r3, [r7, #28]
 800d87c:	695b      	ldr	r3, [r3, #20]
 800d87e:	b29a      	uxth	r2, r3
 800d880:	6a3b      	ldr	r3, [r7, #32]
 800d882:	87da      	strh	r2, [r3, #62]	; 0x3e
	pdata->VL53LX_p_011          = (uint16_t)ppulse->VL53LX_p_011;
 800d884:	69fb      	ldr	r3, [r7, #28]
 800d886:	699b      	ldr	r3, [r3, #24]
 800d888:	b29a      	uxth	r2, r3
 800d88a:	6a3b      	ldr	r3, [r7, #32]
 800d88c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53LX_p_027             = (uint16_t)ppulse->VL53LX_p_027;
 800d890:	69fb      	ldr	r3, [r7, #28]
 800d892:	69db      	ldr	r3, [r3, #28]
 800d894:	b29a      	uxth	r2, r3
 800d896:	6a3b      	ldr	r3, [r7, #32]
 800d898:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pdata->VL53LX_p_017  = (uint32_t)ppulse->VL53LX_p_017;
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	68db      	ldr	r3, [r3, #12]
 800d8a0:	461a      	mov	r2, r3
 800d8a2:	6a3b      	ldr	r3, [r7, #32]
 800d8a4:	629a      	str	r2, [r3, #40]	; 0x28
	pdata->VL53LX_p_010   = ppulse->VL53LX_p_010;
 800d8a6:	69fb      	ldr	r3, [r7, #28]
 800d8a8:	691a      	ldr	r2, [r3, #16]
 800d8aa:	6a3b      	ldr	r3, [r7, #32]
 800d8ac:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->VL53LX_p_016 = (uint32_t)ppulse->VL53LX_p_016;
 800d8ae:	69fb      	ldr	r3, [r7, #28]
 800d8b0:	689b      	ldr	r3, [r3, #8]
 800d8b2:	461a      	mov	r2, r3
 800d8b4:	6a3b      	ldr	r3, [r7, #32]
 800d8b6:	625a      	str	r2, [r3, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 800d8b8:	69bb      	ldr	r3, [r7, #24]
 800d8ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d8be:	6a3b      	ldr	r3, [r7, #32]
 800d8c0:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800d8c2:	6a3b      	ldr	r3, [r7, #32]
 800d8c4:	2213      	movs	r2, #19
 800d8c6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a


	if (sigma_thres > 0 &&
 800d8ca:	887b      	ldrh	r3, [r7, #2]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d00a      	beq.n	800d8e6 <VL53LX_f_017+0xf4>
		(uint32_t)ppulse->VL53LX_p_002 > ((uint32_t)sigma_thres << 5))
 800d8d0:	69fb      	ldr	r3, [r7, #28]
 800d8d2:	8c1b      	ldrh	r3, [r3, #32]
 800d8d4:	461a      	mov	r2, r3
 800d8d6:	887b      	ldrh	r3, [r7, #2]
 800d8d8:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 800d8da:	429a      	cmp	r2, r3
 800d8dc:	d903      	bls.n	800d8e6 <VL53LX_f_017+0xf4>
		pdata->range_status = VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK;
 800d8de:	6a3b      	ldr	r3, [r7, #32]
 800d8e0:	2206      	movs	r2, #6
 800d8e2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 800d8e6:	79bb      	ldrb	r3, [r7, #6]
 800d8e8:	b29b      	uxth	r3, r3
 800d8ea:	021b      	lsls	r3, r3, #8
 800d8ec:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 800d8ee:	6a3b      	ldr	r3, [r7, #32]
 800d8f0:	8a9b      	ldrh	r3, [r3, #20]
 800d8f2:	89fa      	ldrh	r2, [r7, #14]
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	d205      	bcs.n	800d904 <VL53LX_f_017+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 800d8f8:	6a3b      	ldr	r3, [r7, #32]
 800d8fa:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 800d8fc:	89fb      	ldrh	r3, [r7, #14]
 800d8fe:	1ad3      	subs	r3, r2, r3
 800d900:	81fb      	strh	r3, [r7, #14]
 800d902:	e001      	b.n	800d908 <VL53LX_f_017+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 800d904:	2300      	movs	r3, #0
 800d906:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 800d908:	797b      	ldrb	r3, [r7, #5]
 800d90a:	b29b      	uxth	r3, r3
 800d90c:	021b      	lsls	r3, r3, #8
 800d90e:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 800d910:	69bb      	ldr	r3, [r7, #24]
 800d912:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800d916:	89bb      	ldrh	r3, [r7, #12]
 800d918:	4413      	add	r3, r2
 800d91a:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800d91c:	6a3b      	ldr	r3, [r7, #32]
 800d91e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d922:	89fa      	ldrh	r2, [r7, #14]
 800d924:	429a      	cmp	r2, r3
 800d926:	d805      	bhi.n	800d934 <VL53LX_f_017+0x142>
		pdata->VL53LX_p_011 > upper_phase_limit)
 800d928:	6a3b      	ldr	r3, [r7, #32]
 800d92a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800d92e:	89ba      	ldrh	r2, [r7, #12]
 800d930:	429a      	cmp	r2, r3
 800d932:	d203      	bcs.n	800d93c <VL53LX_f_017+0x14a>
		pdata->range_status = VL53LX_DEVICEERROR_RANGEPHASECHECK;
 800d934:	6a3b      	ldr	r3, [r7, #32]
 800d936:	2205      	movs	r2, #5
 800d938:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

}
 800d93c:	bf00      	nop
 800d93e:	3710      	adds	r7, #16
 800d940:	46bd      	mov	sp, r7
 800d942:	bc90      	pop	{r4, r7}
 800d944:	4770      	bx	lr

0800d946 <VL53LX_f_025>:
	VL53LX_hist_gen3_algo_private_data_t   *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53LX_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53LX_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 800d946:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d948:	b08f      	sub	sp, #60	; 0x3c
 800d94a:	af06      	add	r7, sp, #24
 800d94c:	60f8      	str	r0, [r7, #12]
 800d94e:	60b9      	str	r1, [r7, #8]
 800d950:	607a      	str	r2, [r7, #4]
 800d952:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d954:	2300      	movs	r3, #0
 800d956:	77fb      	strb	r3, [r7, #31]

	VL53LX_hist_pulse_data_t     *ppulse_data;
	VL53LX_range_data_t          *prange_data;

	uint8_t                       p = 0;
 800d958:	2300      	movs	r3, #0
 800d95a:	77bb      	strb	r3, [r7, #30]
	VL53LX_histogram_bin_data_t *pB = &(palgo3->VL53LX_p_006);
 800d95c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d95e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d962:	61bb      	str	r3, [r7, #24]





	VL53LX_f_003(palgo3);
 800d964:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d966:	f7ff f879 	bl	800ca5c <VL53LX_f_003>



	memcpy(
		&(palgo3->VL53LX_p_006),
 800d96a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d96c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
	memcpy(
 800d970:	22ac      	movs	r2, #172	; 0xac
 800d972:	6839      	ldr	r1, [r7, #0]
 800d974:	4618      	mov	r0, r3
 800d976:	f007 fbdd 	bl	8015134 <memcpy>
		pbins_input,
		sizeof(VL53LX_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	781a      	ldrb	r2, [r3, #0]
 800d97e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d980:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	785a      	ldrb	r2, [r3, #1]
 800d986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d988:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	789a      	ldrb	r2, [r3, #2]
 800d98e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d990:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800d998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d99a:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 800d99c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d99e:	2200      	movs	r2, #0
 800d9a0:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53LX_MAX_RANGE_RESULTS;
 800d9a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9a4:	2204      	movs	r2, #4
 800d9a6:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 800d9a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	77bb      	strb	r3, [r7, #30]
 800d9b2:	e008      	b.n	800d9c6 <VL53LX_f_025+0x80>
		presults->VL53LX_p_022[p] = 0;
 800d9b4:	7fbb      	ldrb	r3, [r7, #30]
 800d9b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d9b8:	005b      	lsls	r3, r3, #1
 800d9ba:	4413      	add	r3, r2
 800d9bc:	2200      	movs	r2, #0
 800d9be:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800d9c0:	7fbb      	ldrb	r3, [r7, #30]
 800d9c2:	3301      	adds	r3, #1
 800d9c4:	77bb      	strb	r3, [r7, #30]
 800d9c6:	7fbb      	ldrb	r3, [r7, #30]
 800d9c8:	2b04      	cmp	r3, #4
 800d9ca:	d9f3      	bls.n	800d9b4 <VL53LX_f_025+0x6e>



	VL53LX_hist_calc_zero_distance_phase(&(palgo3->VL53LX_p_006));
 800d9cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9ce:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7fe f8b9 	bl	800bb4a <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	795b      	ldrb	r3, [r3, #5]
	VL53LX_hist_estimate_ambient_from_thresholded_bins(
 800d9dc:	461a      	mov	r2, r3
 800d9de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9e0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	4610      	mov	r0, r2
 800d9e8:	f7fe f8ef 	bl	800bbca <VL53LX_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53LX_p_006));

	VL53LX_hist_estimate_ambient_from_ambient_bins(
 800d9ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9ee:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f7fe fcb9 	bl	800c36a <VL53LX_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53LX_p_006));


	VL53LX_hist_remove_ambient_bins(&(palgo3->VL53LX_p_006));
 800d9f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9fa:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d9fe:	4618      	mov	r0, r3
 800da00:	f7fe f95d 	bl	800bcbe <VL53LX_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d009      	beq.n	800da22 <VL53LX_f_025+0xdc>
		VL53LX_f_005(
 800da0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da10:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800da14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da16:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800da1a:	461a      	mov	r2, r3
 800da1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800da1e:	f000 fd7b 	bl	800e518 <VL53LX_f_005>
				&(palgo3->VL53LX_p_006),
				&(palgo3->VL53LX_p_047));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800da2a:	2300      	movs	r3, #0
 800da2c:	77bb      	strb	r3, [r7, #30]
 800da2e:	e01e      	b.n	800da6e <VL53LX_f_025+0x128>
		if (status == VL53LX_ERROR_NONE) {
 800da30:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d117      	bne.n	800da68 <VL53LX_f_025+0x122>
			status =
			VL53LX_f_001(
 800da38:	7fbb      	ldrb	r3, [r7, #30]
 800da3a:	68ba      	ldr	r2, [r7, #8]
 800da3c:	3304      	adds	r3, #4
 800da3e:	005b      	lsls	r3, r3, #1
 800da40:	4413      	add	r3, r2
 800da42:	8898      	ldrh	r0, [r3, #4]
 800da44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da46:	f503 7127 	add.w	r1, r3, #668	; 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53LX_p_006),
				pdmax_algo,
				&(presults->VL53LX_p_022[p]));
 800da4a:	7fbb      	ldrb	r3, [r7, #30]
			VL53LX_f_001(
 800da4c:	005b      	lsls	r3, r3, #1
 800da4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da50:	4413      	add	r3, r2
 800da52:	3304      	adds	r3, #4
 800da54:	9301      	str	r3, [sp, #4]
 800da56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da58:	9300      	str	r3, [sp, #0]
 800da5a:	460b      	mov	r3, r1
 800da5c:	68ba      	ldr	r2, [r7, #8]
 800da5e:	68f9      	ldr	r1, [r7, #12]
 800da60:	f7fe fcce 	bl	800c400 <VL53LX_f_001>
 800da64:	4603      	mov	r3, r0
 800da66:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800da68:	7fbb      	ldrb	r3, [r7, #30]
 800da6a:	3301      	adds	r3, #1
 800da6c:	77bb      	strb	r3, [r7, #30]
 800da6e:	7fbb      	ldrb	r3, [r7, #30]
 800da70:	2b04      	cmp	r3, #4
 800da72:	d9dd      	bls.n	800da30 <VL53LX_f_025+0xea>





	if (status == VL53LX_ERROR_NONE)
 800da74:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d11a      	bne.n	800dab2 <VL53LX_f_025+0x16c>
		status =
			VL53LX_f_006(
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	785b      	ldrb	r3, [r3, #1]
			VL53LX_f_006(
 800da84:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	68dc      	ldr	r4, [r3, #12]
			VL53LX_f_006(
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 800da90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da92:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800da96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da98:	f502 7252 	add.w	r2, r2, #840	; 0x348
 800da9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800da9e:	9102      	str	r1, [sp, #8]
 800daa0:	9201      	str	r2, [sp, #4]
 800daa2:	9300      	str	r3, [sp, #0]
 800daa4:	462b      	mov	r3, r5
 800daa6:	4622      	mov	r2, r4
 800daa8:	4631      	mov	r1, r6
 800daaa:	f7ff f850 	bl	800cb4e <VL53LX_f_006>
 800daae:	4603      	mov	r3, r0
 800dab0:	77fb      	strb	r3, [r7, #31]





	if (status == VL53LX_ERROR_NONE)
 800dab2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d104      	bne.n	800dac4 <VL53LX_f_025+0x17e>
		status =
			VL53LX_f_007(palgo3);
 800daba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dabc:	f7ff f972 	bl	800cda4 <VL53LX_f_007>
 800dac0:	4603      	mov	r3, r0
 800dac2:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800dac4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d104      	bne.n	800dad6 <VL53LX_f_025+0x190>
		status =
			VL53LX_f_008(palgo3);
 800dacc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dace:	f7ff f9b7 	bl	800ce40 <VL53LX_f_008>
 800dad2:	4603      	mov	r3, r0
 800dad4:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800dad6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d104      	bne.n	800dae8 <VL53LX_f_025+0x1a2>
		status =
			VL53LX_f_009(palgo3);
 800dade:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dae0:	f7ff fa2c 	bl	800cf3c <VL53LX_f_009>
 800dae4:	4603      	mov	r3, r0
 800dae6:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800dae8:	2300      	movs	r3, #0
 800daea:	77bb      	strb	r3, [r7, #30]
 800daec:	e0a6      	b.n	800dc3c <VL53LX_f_025+0x2f6>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800daee:	7fba      	ldrb	r2, [r7, #30]
 800daf0:	4613      	mov	r3, r2
 800daf2:	00db      	lsls	r3, r3, #3
 800daf4:	4413      	add	r3, r2
 800daf6:	009b      	lsls	r3, r3, #2
 800daf8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800dafc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dafe:	4413      	add	r3, r2
 800db00:	3304      	adds	r3, #4
 800db02:	617b      	str	r3, [r7, #20]



		if (status == VL53LX_ERROR_NONE)
 800db04:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d109      	bne.n	800db20 <VL53LX_f_025+0x1da>
			status =
				VL53LX_f_010(
 800db0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db0e:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800db12:	7fbb      	ldrb	r3, [r7, #30]
 800db14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800db16:	4618      	mov	r0, r3
 800db18:	f7ff fb66 	bl	800d1e8 <VL53LX_f_010>
 800db1c:	4603      	mov	r3, r0
 800db1e:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_006),
					palgo3);



		if (status == VL53LX_ERROR_NONE)
 800db20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d110      	bne.n	800db4a <VL53LX_f_025+0x204>
			status =
				VL53LX_f_011(
 800db28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db2a:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800db2e:	69bb      	ldr	r3, [r7, #24]
 800db30:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800db34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db36:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800db3a:	7fb8      	ldrb	r0, [r7, #30]
 800db3c:	9300      	str	r3, [sp, #0]
 800db3e:	4613      	mov	r3, r2
 800db40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800db42:	f7ff fd5a 	bl	800d5fa <VL53LX_f_011>
 800db46:	4603      	mov	r3, r0
 800db48:	77fb      	strb	r3, [r7, #31]
					pB->VL53LX_p_028,
					&(palgo3->VL53LX_p_048));



		if (status == VL53LX_ERROR_NONE) {
 800db4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d10d      	bne.n	800db6e <VL53LX_f_025+0x228>
			status =
				VL53LX_f_011(
 800db52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db54:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800db58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db5a:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800db5e:	7fb8      	ldrb	r0, [r7, #30]
 800db60:	9300      	str	r3, [sp, #0]
 800db62:	2300      	movs	r3, #0
 800db64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800db66:	f7ff fd48 	bl	800d5fa <VL53LX_f_011>
 800db6a:	4603      	mov	r3, r0
 800db6c:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_049));
		}



		if (status == VL53LX_ERROR_NONE) {
 800db6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d10d      	bne.n	800db92 <VL53LX_f_025+0x24c>
			status =
				VL53LX_f_011(
 800db76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db78:	f503 7152 	add.w	r1, r3, #840	; 0x348
 800db7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db7e:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800db82:	7fb8      	ldrb	r0, [r7, #30]
 800db84:	9300      	str	r3, [sp, #0]
 800db86:	2300      	movs	r3, #0
 800db88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800db8a:	f7ff fd36 	bl	800d5fa <VL53LX_f_011>
 800db8e:	4603      	mov	r3, r0
 800db90:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_050));
		}



		if (status == VL53LX_ERROR_NONE)
 800db92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d109      	bne.n	800dbae <VL53LX_f_025+0x268>
			status =
				VL53LX_f_026(
 800db9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db9c:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 800dba0:	7fb8      	ldrb	r0, [r7, #30]
 800dba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dba4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dba6:	f000 f8dd 	bl	800dd64 <VL53LX_f_026>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53LX_ERROR_NONE)
 800dbae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d108      	bne.n	800dbc8 <VL53LX_f_025+0x282>
			status =
				VL53LX_f_027(
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	8a19      	ldrh	r1, [r3, #16]
 800dbba:	7fb8      	ldrb	r0, [r7, #30]
 800dbbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dbc0:	f000 f95c 	bl	800de7c <VL53LX_f_027>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53LX_ERROR_NONE)
 800dbc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d124      	bne.n	800dc1a <VL53LX_f_025+0x2d4>
			status =
			VL53LX_f_014(
 800dbd0:	697b      	ldr	r3, [r7, #20]
 800dbd2:	789d      	ldrb	r5, [r3, #2]
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	7e1e      	ldrb	r6, [r3, #24]
 800dbd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbda:	f893 c003 	ldrb.w	ip, [r3, #3]
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	f893 e006 	ldrb.w	lr, [r3, #6]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dbea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dbec:	f502 727d 	add.w	r2, r2, #1012	; 0x3f4
 800dbf0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dbf2:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 800dbf6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dbf8:	f200 504c 	addw	r0, r0, #1356	; 0x54c
 800dbfc:	697c      	ldr	r4, [r7, #20]
 800dbfe:	3420      	adds	r4, #32
 800dc00:	9404      	str	r4, [sp, #16]
 800dc02:	9003      	str	r0, [sp, #12]
 800dc04:	9102      	str	r1, [sp, #8]
 800dc06:	9201      	str	r2, [sp, #4]
 800dc08:	9300      	str	r3, [sp, #0]
 800dc0a:	4673      	mov	r3, lr
 800dc0c:	4662      	mov	r2, ip
 800dc0e:	4631      	mov	r1, r6
 800dc10:	4628      	mov	r0, r5
 800dc12:	f7ff fd46 	bl	800d6a2 <VL53LX_f_014>
 800dc16:	4603      	mov	r3, r0
 800dc18:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53LX_p_050),
			&(ppulse_data->VL53LX_p_002));



		if (status == VL53LX_ERROR_NONE)
 800dc1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d109      	bne.n	800dc36 <VL53LX_f_025+0x2f0>
			status =
				VL53LX_f_015(
 800dc22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc24:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 800dc28:	7fb8      	ldrb	r0, [r7, #30]
 800dc2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc2c:	2101      	movs	r1, #1
 800dc2e:	f7ff fb2e 	bl	800d28e <VL53LX_f_015>
 800dc32:	4603      	mov	r3, r0
 800dc34:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800dc36:	7fbb      	ldrb	r3, [r7, #30]
 800dc38:	3301      	adds	r3, #1
 800dc3a:	77bb      	strb	r3, [r7, #30]
 800dc3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc3e:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800dc42:	7fba      	ldrb	r2, [r7, #30]
 800dc44:	429a      	cmp	r2, r3
 800dc46:	f4ff af52 	bcc.w	800daee <VL53LX_f_025+0x1a8>

	}



	if (status == VL53LX_ERROR_NONE)
 800dc4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d107      	bne.n	800dc62 <VL53LX_f_025+0x31c>
		status =
			VL53LX_f_016(
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	785b      	ldrb	r3, [r3, #1]
 800dc56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f7ff fa41 	bl	800d0e0 <VL53LX_f_016>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800dc62:	2300      	movs	r3, #0
 800dc64:	77bb      	strb	r3, [r7, #30]
 800dc66:	e071      	b.n	800dd4c <VL53LX_f_025+0x406>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800dc68:	7fba      	ldrb	r2, [r7, #30]
 800dc6a:	4613      	mov	r3, r2
 800dc6c:	00db      	lsls	r3, r3, #3
 800dc6e:	4413      	add	r3, r2
 800dc70:	009b      	lsls	r3, r3, #2
 800dc72:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800dc76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dc78:	4413      	add	r3, r2
 800dc7a:	3304      	adds	r3, #4
 800dc7c:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 800dc7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc80:	7c9a      	ldrb	r2, [r3, #18]
 800dc82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc84:	7c5b      	ldrb	r3, [r3, #17]
 800dc86:	429a      	cmp	r2, r3
 800dc88:	d25c      	bcs.n	800dd44 <VL53LX_f_025+0x3fe>
			continue;




		if (ppulse_data->VL53LX_p_010 >
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53LX_p_010 >
 800dc92:	429a      	cmp	r2, r3
 800dc94:	dd57      	ble.n	800dd46 <VL53LX_f_025+0x400>
			ppulse_data->VL53LX_p_023 < 0xFF) {
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 800dc9a:	2bff      	cmp	r3, #255	; 0xff
 800dc9c:	d053      	beq.n	800dd46 <VL53LX_f_025+0x400>

			prange_data =
			&(presults->VL53LX_p_003[presults->active_results]);
 800dc9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dca0:	7c9b      	ldrb	r3, [r3, #18]
 800dca2:	461a      	mov	r2, r3
			prange_data =
 800dca4:	234c      	movs	r3, #76	; 0x4c
 800dca6:	fb03 f302 	mul.w	r3, r3, r2
 800dcaa:	3310      	adds	r3, #16
 800dcac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dcae:	4413      	add	r3, r2
 800dcb0:	3304      	adds	r3, #4
 800dcb2:	613b      	str	r3, [r7, #16]

			if (status == VL53LX_ERROR_NONE)
 800dcb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d115      	bne.n	800dce8 <VL53LX_f_025+0x3a2>
				VL53LX_f_017(
 800dcbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dcbe:	7c98      	ldrb	r0, [r3, #18]
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f893 1020 	ldrb.w	r1, [r3, #32]
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	8b5d      	ldrh	r5, [r3, #26]
 800dcd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcd2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800dcd6:	693a      	ldr	r2, [r7, #16]
 800dcd8:	9202      	str	r2, [sp, #8]
 800dcda:	697a      	ldr	r2, [r7, #20]
 800dcdc:	9201      	str	r2, [sp, #4]
 800dcde:	9300      	str	r3, [sp, #0]
 800dce0:	462b      	mov	r3, r5
 800dce2:	4622      	mov	r2, r4
 800dce4:	f7ff fd85 	bl	800d7f2 <VL53LX_f_017>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53LX_p_006),
						ppulse_data,
						prange_data);

			if (status == VL53LX_ERROR_NONE)
 800dce8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d115      	bne.n	800dd1c <VL53LX_f_025+0x3d6>
				status =
				VL53LX_f_018(
 800dcf0:	69bb      	ldr	r3, [r7, #24]
 800dcf2:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 800dcf6:	69bb      	ldr	r3, [r7, #24]
 800dcf8:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 800dcfc:	69bb      	ldr	r3, [r7, #24]
 800dcfe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800dd02:	69bb      	ldr	r3, [r7, #24]
 800dd04:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
 800dd08:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800dd0c:	9301      	str	r3, [sp, #4]
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	9300      	str	r3, [sp, #0]
 800dd12:	4623      	mov	r3, r4
 800dd14:	f000 fb11 	bl	800e33a <VL53LX_f_018>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53LX_ERROR_NONE)
 800dd1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d108      	bne.n	800dd36 <VL53LX_f_025+0x3f0>
				VL53LX_f_019(
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	8bd8      	ldrh	r0, [r3, #30]
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800dd2e:	693a      	ldr	r2, [r7, #16]
 800dd30:	4619      	mov	r1, r3
 800dd32:	f000 fba7 	bl	800e484 <VL53LX_f_019>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 800dd36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd38:	7c9b      	ldrb	r3, [r3, #18]
 800dd3a:	3301      	adds	r3, #1
 800dd3c:	b2da      	uxtb	r2, r3
 800dd3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd40:	749a      	strb	r2, [r3, #18]
 800dd42:	e000      	b.n	800dd46 <VL53LX_f_025+0x400>
			continue;
 800dd44:	bf00      	nop
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800dd46:	7fbb      	ldrb	r3, [r7, #30]
 800dd48:	3301      	adds	r3, #1
 800dd4a:	77bb      	strb	r3, [r7, #30]
 800dd4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd4e:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800dd52:	7fba      	ldrb	r2, [r7, #30]
 800dd54:	429a      	cmp	r2, r3
 800dd56:	d387      	bcc.n	800dc68 <VL53LX_f_025+0x322>



	LOG_FUNCTION_END(status);

	return status;
 800dd58:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	3724      	adds	r7, #36	; 0x24
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dd64 <VL53LX_f_026>:
VL53LX_Error VL53LX_f_026(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *ppulse,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b08c      	sub	sp, #48	; 0x30
 800dd68:	af02      	add	r7, sp, #8
 800dd6a:	60b9      	str	r1, [r7, #8]
 800dd6c:	607a      	str	r2, [r7, #4]
 800dd6e:	603b      	str	r3, [r7, #0]
 800dd70:	4603      	mov	r3, r0
 800dd72:	73fb      	strb	r3, [r7, #15]




	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800dd74:	2300      	movs	r3, #0
 800dd76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800dd7a:	7bfa      	ldrb	r2, [r7, #15]
 800dd7c:	4613      	mov	r3, r2
 800dd7e:	00db      	lsls	r3, r3, #3
 800dd80:	4413      	add	r3, r2
 800dd82:	009b      	lsls	r3, r3, #2
 800dd84:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800dd88:	687a      	ldr	r2, [r7, #4]
 800dd8a:	4413      	add	r3, r2
 800dd8c:	3304      	adds	r3, #4
 800dd8e:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 800dd90:	2300      	movs	r3, #0
 800dd92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  i     = 0;
 800dd96:	2300      	movs	r3, #0
 800dd98:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 800dda2:	2300      	movs	r3, #0
 800dda4:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53LX_p_020    = palgo3->VL53LX_p_020;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	785a      	ldrb	r2, [r3, #1]
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53LX_p_019      = palgo3->VL53LX_p_019;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	781a      	ldrb	r2, [r3, #0]
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53LX_p_021 = palgo3->VL53LX_p_021;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	789a      	ldrb	r2, [r3, #2]
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800ddbe:	6a3b      	ldr	r3, [r7, #32]
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ddc6:	e04d      	b.n	800de64 <VL53LX_f_026+0x100>

		i =  lb  % palgo3->VL53LX_p_030;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	78da      	ldrb	r2, [r3, #3]
 800ddcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddd0:	fbb3 f1f2 	udiv	r1, r3, r2
 800ddd4:	fb02 f201 	mul.w	r2, r2, r1
 800ddd8:	1a9b      	subs	r3, r3, r2
 800ddda:	77fb      	strb	r3, [r7, #31]


		VL53LX_f_022(
 800dddc:	6a3b      	ldr	r3, [r7, #32]
 800ddde:	7999      	ldrb	r1, [r3, #6]
 800dde0:	f107 0218 	add.w	r2, r7, #24
 800dde4:	7ff8      	ldrb	r0, [r7, #31]
 800dde6:	f107 0310 	add.w	r3, r7, #16
 800ddea:	9301      	str	r3, [sp, #4]
 800ddec:	f107 0314 	add.w	r3, r7, #20
 800ddf0:	9300      	str	r3, [sp, #0]
 800ddf2:	4613      	mov	r3, r2
 800ddf4:	68ba      	ldr	r2, [r7, #8]
 800ddf6:	f000 fa47 	bl	800e288 <VL53LX_f_022>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53LX_p_007[i] = suma;
 800ddfa:	7ffb      	ldrb	r3, [r7, #31]
 800ddfc:	69ba      	ldr	r2, [r7, #24]
 800ddfe:	6839      	ldr	r1, [r7, #0]
 800de00:	009b      	lsls	r3, r3, #2
 800de02:	440b      	add	r3, r1
 800de04:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_032[i] = sumb;
 800de06:	7ffb      	ldrb	r3, [r7, #31]
 800de08:	697a      	ldr	r2, [r7, #20]
 800de0a:	6839      	ldr	r1, [r7, #0]
 800de0c:	3318      	adds	r3, #24
 800de0e:	009b      	lsls	r3, r3, #2
 800de10:	440b      	add	r3, r1
 800de12:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_001[i] = sumc;
 800de14:	7ffb      	ldrb	r3, [r7, #31]
 800de16:	693a      	ldr	r2, [r7, #16]
 800de18:	6839      	ldr	r1, [r7, #0]
 800de1a:	3330      	adds	r3, #48	; 0x30
 800de1c:	009b      	lsls	r3, r3, #2
 800de1e:	440b      	add	r3, r1
 800de20:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_053[i] =
			(suma + sumb) -
 800de22:	69ba      	ldr	r2, [r7, #24]
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53LX_p_028);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	689a      	ldr	r2, [r3, #8]
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	441a      	add	r2, r3
		pfiltered->VL53LX_p_053[i] =
 800de30:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 800de32:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_053[i] =
 800de34:	6839      	ldr	r1, [r7, #0]
 800de36:	3348      	adds	r3, #72	; 0x48
 800de38:	009b      	lsls	r3, r3, #2
 800de3a:	440b      	add	r3, r1
 800de3c:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_054[i] =
			(sumb + sumc) -
 800de3e:	697a      	ldr	r2, [r7, #20]
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53LX_p_028);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	689a      	ldr	r2, [r3, #8]
 800de48:	69bb      	ldr	r3, [r7, #24]
 800de4a:	441a      	add	r2, r3
		pfiltered->VL53LX_p_054[i] =
 800de4c:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 800de4e:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_054[i] =
 800de50:	6839      	ldr	r1, [r7, #0]
 800de52:	3360      	adds	r3, #96	; 0x60
 800de54:	009b      	lsls	r3, r3, #2
 800de56:	440b      	add	r3, r1
 800de58:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800de5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de5e:	3301      	adds	r3, #1
 800de60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de64:	6a3b      	ldr	r3, [r7, #32]
 800de66:	791b      	ldrb	r3, [r3, #4]
 800de68:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800de6c:	429a      	cmp	r2, r3
 800de6e:	d9ab      	bls.n	800ddc8 <VL53LX_f_026+0x64>
	}

	return status;
 800de70:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800de74:	4618      	mov	r0, r3
 800de76:	3728      	adds	r7, #40	; 0x28
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <VL53LX_f_027>:
VL53LX_Error VL53LX_f_027(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3)
{
 800de7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de7e:	b08f      	sub	sp, #60	; 0x3c
 800de80:	af06      	add	r7, sp, #24
 800de82:	60ba      	str	r2, [r7, #8]
 800de84:	607b      	str	r3, [r7, #4]
 800de86:	4603      	mov	r3, r0
 800de88:	73fb      	strb	r3, [r7, #15]
 800de8a:	460b      	mov	r3, r1
 800de8c:	81bb      	strh	r3, [r7, #12]



	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800de8e:	2300      	movs	r3, #0
 800de90:	77bb      	strb	r3, [r7, #30]
	VL53LX_Error  func_status  = VL53LX_ERROR_NONE;
 800de92:	2300      	movs	r3, #0
 800de94:	777b      	strb	r3, [r7, #29]

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800de96:	7bfa      	ldrb	r2, [r7, #15]
 800de98:	4613      	mov	r3, r2
 800de9a:	00db      	lsls	r3, r3, #3
 800de9c:	4413      	add	r3, r2
 800de9e:	009b      	lsls	r3, r3, #2
 800dea0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800dea4:	687a      	ldr	r2, [r7, #4]
 800dea6:	4413      	add	r3, r2
 800dea8:	3304      	adds	r3, #4
 800deaa:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 800deac:	2300      	movs	r3, #0
 800deae:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 800deb0:	2300      	movs	r3, #0
 800deb2:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 800deb4:	2300      	movs	r3, #0
 800deb6:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800deb8:	69bb      	ldr	r3, [r7, #24]
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	77fb      	strb	r3, [r7, #31]
 800debe:	e0b9      	b.n	800e034 <VL53LX_f_027+0x1b8>

		i =  lb    % palgo3->VL53LX_p_030;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	78da      	ldrb	r2, [r3, #3]
 800dec4:	7ffb      	ldrb	r3, [r7, #31]
 800dec6:	fbb3 f1f2 	udiv	r1, r3, r2
 800deca:	fb02 f201 	mul.w	r2, r2, r1
 800dece:	1a9b      	subs	r3, r3, r2
 800ded0:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53LX_p_030;
 800ded2:	7ffb      	ldrb	r3, [r7, #31]
 800ded4:	3301      	adds	r3, #1
 800ded6:	687a      	ldr	r2, [r7, #4]
 800ded8:	78d2      	ldrb	r2, [r2, #3]
 800deda:	fb93 f1f2 	sdiv	r1, r3, r2
 800dede:	fb02 f201 	mul.w	r2, r2, r1
 800dee2:	1a9b      	subs	r3, r3, r2
 800dee4:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53LX_p_021 &&
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	789b      	ldrb	r3, [r3, #2]
 800deea:	7dfa      	ldrb	r2, [r7, #23]
 800deec:	429a      	cmp	r2, r3
 800deee:	f080 809e 	bcs.w	800e02e <VL53LX_f_027+0x1b2>
			j < palgo3->VL53LX_p_021) {
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53LX_p_021 &&
 800def6:	7dba      	ldrb	r2, [r7, #22]
 800def8:	429a      	cmp	r2, r3
 800defa:	f080 8098 	bcs.w	800e02e <VL53LX_f_027+0x1b2>

			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800defe:	7dfb      	ldrb	r3, [r7, #23]
 800df00:	68ba      	ldr	r2, [r7, #8]
 800df02:	3348      	adds	r3, #72	; 0x48
 800df04:	009b      	lsls	r3, r3, #2
 800df06:	4413      	add	r3, r2
 800df08:	685b      	ldr	r3, [r3, #4]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d10e      	bne.n	800df2c <VL53LX_f_027+0xb0>
				pfiltered->VL53LX_p_054[i] == 0)
 800df0e:	7dfb      	ldrb	r3, [r7, #23]
 800df10:	68ba      	ldr	r2, [r7, #8]
 800df12:	3360      	adds	r3, #96	; 0x60
 800df14:	009b      	lsls	r3, r3, #2
 800df16:	4413      	add	r3, r2
 800df18:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d106      	bne.n	800df2c <VL53LX_f_027+0xb0>

				pfiltered->VL53LX_p_040[i] = 0;
 800df1e:	7dfb      	ldrb	r3, [r7, #23]
 800df20:	68ba      	ldr	r2, [r7, #8]
 800df22:	4413      	add	r3, r2
 800df24:	2200      	movs	r2, #0
 800df26:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800df2a:	e043      	b.n	800dfb4 <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800df2c:	7dfb      	ldrb	r3, [r7, #23]
 800df2e:	68ba      	ldr	r2, [r7, #8]
 800df30:	3348      	adds	r3, #72	; 0x48
 800df32:	009b      	lsls	r3, r3, #2
 800df34:	4413      	add	r3, r2
 800df36:	685b      	ldr	r3, [r3, #4]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	db0e      	blt.n	800df5a <VL53LX_f_027+0xde>
					 pfiltered->VL53LX_p_054[i] >= 0)
 800df3c:	7dfb      	ldrb	r3, [r7, #23]
 800df3e:	68ba      	ldr	r2, [r7, #8]
 800df40:	3360      	adds	r3, #96	; 0x60
 800df42:	009b      	lsls	r3, r3, #2
 800df44:	4413      	add	r3, r2
 800df46:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800df48:	2b00      	cmp	r3, #0
 800df4a:	db06      	blt.n	800df5a <VL53LX_f_027+0xde>
				pfiltered->VL53LX_p_040[i] = 1;
 800df4c:	7dfb      	ldrb	r3, [r7, #23]
 800df4e:	68ba      	ldr	r2, [r7, #8]
 800df50:	4413      	add	r3, r2
 800df52:	2201      	movs	r2, #1
 800df54:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800df58:	e02c      	b.n	800dfb4 <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800df5a:	7dfb      	ldrb	r3, [r7, #23]
 800df5c:	68ba      	ldr	r2, [r7, #8]
 800df5e:	3348      	adds	r3, #72	; 0x48
 800df60:	009b      	lsls	r3, r3, #2
 800df62:	4413      	add	r3, r2
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	2b00      	cmp	r3, #0
 800df68:	da1e      	bge.n	800dfa8 <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800df6a:	7dfb      	ldrb	r3, [r7, #23]
 800df6c:	68ba      	ldr	r2, [r7, #8]
 800df6e:	3360      	adds	r3, #96	; 0x60
 800df70:	009b      	lsls	r3, r3, #2
 800df72:	4413      	add	r3, r2
 800df74:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800df76:	2b00      	cmp	r3, #0
 800df78:	db16      	blt.n	800dfa8 <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800df7a:	7dbb      	ldrb	r3, [r7, #22]
 800df7c:	68ba      	ldr	r2, [r7, #8]
 800df7e:	3348      	adds	r3, #72	; 0x48
 800df80:	009b      	lsls	r3, r3, #2
 800df82:	4413      	add	r3, r2
 800df84:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800df86:	2b00      	cmp	r3, #0
 800df88:	db0e      	blt.n	800dfa8 <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[j] <  0)
 800df8a:	7dbb      	ldrb	r3, [r7, #22]
 800df8c:	68ba      	ldr	r2, [r7, #8]
 800df8e:	3360      	adds	r3, #96	; 0x60
 800df90:	009b      	lsls	r3, r3, #2
 800df92:	4413      	add	r3, r2
 800df94:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800df96:	2b00      	cmp	r3, #0
 800df98:	da06      	bge.n	800dfa8 <VL53LX_f_027+0x12c>
				pfiltered->VL53LX_p_040[i] = 1;
 800df9a:	7dfb      	ldrb	r3, [r7, #23]
 800df9c:	68ba      	ldr	r2, [r7, #8]
 800df9e:	4413      	add	r3, r2
 800dfa0:	2201      	movs	r2, #1
 800dfa2:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800dfa6:	e005      	b.n	800dfb4 <VL53LX_f_027+0x138>

			else
				pfiltered->VL53LX_p_040[i] = 0;
 800dfa8:	7dfb      	ldrb	r3, [r7, #23]
 800dfaa:	68ba      	ldr	r2, [r7, #8]
 800dfac:	4413      	add	r3, r2
 800dfae:	2200      	movs	r2, #0
 800dfb0:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4


			if (pfiltered->VL53LX_p_040[i] > 0) {
 800dfb4:	7dfb      	ldrb	r3, [r7, #23]
 800dfb6:	68ba      	ldr	r2, [r7, #8]
 800dfb8:	4413      	add	r3, r2
 800dfba:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d035      	beq.n	800e02e <VL53LX_f_027+0x1b2>

				pdata->VL53LX_p_023 = lb;
 800dfc2:	69bb      	ldr	r3, [r7, #24]
 800dfc4:	7ffa      	ldrb	r2, [r7, #31]
 800dfc6:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53LX_f_028(
 800dfc8:	7dfb      	ldrb	r3, [r7, #23]
 800dfca:	68ba      	ldr	r2, [r7, #8]
 800dfcc:	009b      	lsls	r3, r3, #2
 800dfce:	4413      	add	r3, r2
 800dfd0:	685c      	ldr	r4, [r3, #4]
 800dfd2:	7dfb      	ldrb	r3, [r7, #23]
 800dfd4:	68ba      	ldr	r2, [r7, #8]
 800dfd6:	3318      	adds	r3, #24
 800dfd8:	009b      	lsls	r3, r3, #2
 800dfda:	4413      	add	r3, r2
 800dfdc:	685d      	ldr	r5, [r3, #4]
 800dfde:	7dfb      	ldrb	r3, [r7, #23]
 800dfe0:	68ba      	ldr	r2, [r7, #8]
 800dfe2:	3330      	adds	r3, #48	; 0x30
 800dfe4:	009b      	lsls	r3, r3, #2
 800dfe6:	4413      	add	r3, r2
 800dfe8:	685e      	ldr	r6, [r3, #4]
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	689b      	ldr	r3, [r3, #8]
 800dfee:	687a      	ldr	r2, [r7, #4]
 800dff0:	78d2      	ldrb	r2, [r2, #3]
 800dff2:	69b9      	ldr	r1, [r7, #24]
 800dff4:	3118      	adds	r1, #24
 800dff6:	7ff8      	ldrb	r0, [r7, #31]
 800dff8:	9105      	str	r1, [sp, #20]
 800dffa:	9204      	str	r2, [sp, #16]
 800dffc:	9303      	str	r3, [sp, #12]
 800dffe:	2300      	movs	r3, #0
 800e000:	9302      	str	r3, [sp, #8]
 800e002:	2300      	movs	r3, #0
 800e004:	9301      	str	r3, [sp, #4]
 800e006:	2300      	movs	r3, #0
 800e008:	9300      	str	r3, [sp, #0]
 800e00a:	4633      	mov	r3, r6
 800e00c:	462a      	mov	r2, r5
 800e00e:	4621      	mov	r1, r4
 800e010:	f000 f81c 	bl	800e04c <VL53LX_f_028>
 800e014:	4603      	mov	r3, r0
 800e016:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53LX_p_028,
					palgo3->VL53LX_p_030,
					&(pdata->VL53LX_p_011));

				if (func_status ==
 800e018:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e01c:	f113 0f0f 	cmn.w	r3, #15
 800e020:	d105      	bne.n	800e02e <VL53LX_f_027+0x1b2>
					VL53LX_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53LX_p_040[i] = 0;
 800e022:	7dfb      	ldrb	r3, [r7, #23]
 800e024:	68ba      	ldr	r2, [r7, #8]
 800e026:	4413      	add	r3, r2
 800e028:	2200      	movs	r2, #0
 800e02a:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800e02e:	7ffb      	ldrb	r3, [r7, #31]
 800e030:	3301      	adds	r3, #1
 800e032:	77fb      	strb	r3, [r7, #31]
 800e034:	69bb      	ldr	r3, [r7, #24]
 800e036:	791b      	ldrb	r3, [r3, #4]
 800e038:	7ffa      	ldrb	r2, [r7, #31]
 800e03a:	429a      	cmp	r2, r3
 800e03c:	f4ff af40 	bcc.w	800dec0 <VL53LX_f_027+0x44>

			}
		}
	}

	return status;
 800e040:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800e044:	4618      	mov	r0, r3
 800e046:	3724      	adds	r7, #36	; 0x24
 800e048:	46bd      	mov	sp, r7
 800e04a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e04c <VL53LX_f_028>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53LX_p_028,
	uint8_t   VL53LX_p_030,
	uint32_t *pmean_phase)
{
 800e04c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e050:	b09e      	sub	sp, #120	; 0x78
 800e052:	af00      	add	r7, sp, #0
 800e054:	64b9      	str	r1, [r7, #72]	; 0x48
 800e056:	647a      	str	r2, [r7, #68]	; 0x44
 800e058:	643b      	str	r3, [r7, #64]	; 0x40
 800e05a:	4603      	mov	r3, r0
 800e05c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f


	VL53LX_Error  status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800e060:	23f1      	movs	r3, #241	; 0xf1
 800e062:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	int64_t  mean_phase  = VL53LX_MAX_ALLOWED_PHASE;
 800e066:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e06a:	f04f 0300 	mov.w	r3, #0
 800e06e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int32_t  mean_phase32;
	int64_t  VL53LX_p_055   = 0;
 800e072:	f04f 0200 	mov.w	r2, #0
 800e076:	f04f 0300 	mov.w	r3, #0
 800e07a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t  half_b_minus_amb = 0;
 800e07e:	f04f 0200 	mov.w	r2, #0
 800e082:	f04f 0300 	mov.w	r3, #0
 800e086:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58


	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800e08a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e08c:	4618      	mov	r0, r3
 800e08e:	ea4f 71e0 	mov.w	r1, r0, asr #31
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800e092:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e096:	461a      	mov	r2, r3
 800e098:	ea4f 73e2 	mov.w	r3, r2, asr #31
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800e09c:	ebb0 0802 	subs.w	r8, r0, r2
 800e0a0:	eb61 0903 	sbc.w	r9, r1, r3
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800e0a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0a6:	461a      	mov	r2, r3
 800e0a8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800e0ac:	ebb8 0a02 	subs.w	sl, r8, r2
 800e0b0:	eb69 0b03 	sbc.w	fp, r9, r3
 800e0b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e0b8:	461a      	mov	r2, r3
 800e0ba:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800e0be:	ebba 0402 	subs.w	r4, sl, r2
 800e0c2:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800e0c6:	f04f 0200 	mov.w	r2, #0
 800e0ca:	f04f 0300 	mov.w	r3, #0
 800e0ce:	032b      	lsls	r3, r5, #12
 800e0d0:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800e0d4:	0322      	lsls	r2, r4, #12
 800e0d6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800e0da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0dc:	4618      	mov	r0, r3
 800e0de:	ea4f 71e0 	mov.w	r1, r0, asr #31
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800e0e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e0e6:	461a      	mov	r2, r3
 800e0e8:	ea4f 73e2 	mov.w	r3, r2, asr #31
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800e0ec:	1a84      	subs	r4, r0, r2
 800e0ee:	63bc      	str	r4, [r7, #56]	; 0x38
 800e0f0:	eb61 0303 	sbc.w	r3, r1, r3
 800e0f4:	63fb      	str	r3, [r7, #60]	; 0x3c
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800e0f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800e100:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800e104:	4621      	mov	r1, r4
 800e106:	1a89      	subs	r1, r1, r2
 800e108:	6339      	str	r1, [r7, #48]	; 0x30
 800e10a:	4629      	mov	r1, r5
 800e10c:	eb61 0303 	sbc.w	r3, r1, r3
 800e110:	637b      	str	r3, [r7, #52]	; 0x34
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800e112:	f04f 0200 	mov.w	r2, #0
 800e116:	f04f 0300 	mov.w	r3, #0
 800e11a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800e11e:	4629      	mov	r1, r5
 800e120:	030b      	lsls	r3, r1, #12
 800e122:	4621      	mov	r1, r4
 800e124:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 800e128:	4621      	mov	r1, r4
 800e12a:	030a      	lsls	r2, r1, #12
 800e12c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	if (half_b_minus_amb != 0) {
 800e130:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e134:	4313      	orrs	r3, r2
 800e136:	f000 809c 	beq.w	800e272 <VL53LX_f_028+0x226>

		mean_phase = (4096 * VL53LX_p_055) + half_b_minus_amb;
 800e13a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800e13e:	f04f 0000 	mov.w	r0, #0
 800e142:	f04f 0100 	mov.w	r1, #0
 800e146:	0319      	lsls	r1, r3, #12
 800e148:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800e14c:	0310      	lsls	r0, r2, #12
 800e14e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e152:	1814      	adds	r4, r2, r0
 800e154:	623c      	str	r4, [r7, #32]
 800e156:	414b      	adcs	r3, r1
 800e158:	627b      	str	r3, [r7, #36]	; 0x24
 800e15a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800e15e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 800e162:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e166:	1891      	adds	r1, r2, r2
 800e168:	61b9      	str	r1, [r7, #24]
 800e16a:	415b      	adcs	r3, r3
 800e16c:	61fb      	str	r3, [r7, #28]
 800e16e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e172:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e176:	f7f2 f883 	bl	8000280 <__aeabi_ldivmod>
 800e17a:	4602      	mov	r2, r0
 800e17c:	460b      	mov	r3, r1
 800e17e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

		mean_phase  +=  2048;
 800e182:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e186:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800e18a:	6139      	str	r1, [r7, #16]
 800e18c:	f143 0300 	adc.w	r3, r3, #0
 800e190:	617b      	str	r3, [r7, #20]
 800e192:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e196:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		mean_phase  += (4096 * (int64_t)bin);
 800e19a:	f897 004f 	ldrb.w	r0, [r7, #79]	; 0x4f
 800e19e:	f04f 0100 	mov.w	r1, #0
 800e1a2:	f04f 0200 	mov.w	r2, #0
 800e1a6:	f04f 0300 	mov.w	r3, #0
 800e1aa:	030b      	lsls	r3, r1, #12
 800e1ac:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 800e1b0:	0302      	lsls	r2, r0, #12
 800e1b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e1b6:	1884      	adds	r4, r0, r2
 800e1b8:	60bc      	str	r4, [r7, #8]
 800e1ba:	eb41 0303 	adc.w	r3, r1, r3
 800e1be:	60fb      	str	r3, [r7, #12]
 800e1c0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800e1c4:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


		mean_phase  = do_division_s((mean_phase + 1), 2);
 800e1c8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e1cc:	1c51      	adds	r1, r2, #1
 800e1ce:	62b9      	str	r1, [r7, #40]	; 0x28
 800e1d0:	f143 0300 	adc.w	r3, r3, #0
 800e1d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1d6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800e1da:	462b      	mov	r3, r5
 800e1dc:	0fdb      	lsrs	r3, r3, #31
 800e1de:	461a      	mov	r2, r3
 800e1e0:	f04f 0300 	mov.w	r3, #0
 800e1e4:	4621      	mov	r1, r4
 800e1e6:	1851      	adds	r1, r2, r1
 800e1e8:	6039      	str	r1, [r7, #0]
 800e1ea:	4629      	mov	r1, r5
 800e1ec:	eb43 0101 	adc.w	r1, r3, r1
 800e1f0:	6079      	str	r1, [r7, #4]
 800e1f2:	f04f 0200 	mov.w	r2, #0
 800e1f6:	f04f 0300 	mov.w	r3, #0
 800e1fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e1fe:	4621      	mov	r1, r4
 800e200:	084a      	lsrs	r2, r1, #1
 800e202:	4629      	mov	r1, r5
 800e204:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800e208:	4629      	mov	r1, r5
 800e20a:	104b      	asrs	r3, r1, #1
 800e20c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


		if (mean_phase  < 0)
 800e210:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e214:	2a00      	cmp	r2, #0
 800e216:	f173 0300 	sbcs.w	r3, r3, #0
 800e21a:	da05      	bge.n	800e228 <VL53LX_f_028+0x1dc>
			mean_phase = 0;
 800e21c:	f04f 0200 	mov.w	r2, #0
 800e220:	f04f 0300 	mov.w	r3, #0
 800e224:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
		if (mean_phase > VL53LX_MAX_ALLOWED_PHASE)
 800e228:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e22c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e230:	f04f 0100 	mov.w	r1, #0
 800e234:	4290      	cmp	r0, r2
 800e236:	eb71 0303 	sbcs.w	r3, r1, r3
 800e23a:	da05      	bge.n	800e248 <VL53LX_f_028+0x1fc>
			mean_phase = VL53LX_MAX_ALLOWED_PHASE;
 800e23c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e240:	f04f 0300 	mov.w	r3, #0
 800e244:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


		mean_phase32 = (int32_t)mean_phase;
 800e248:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e24a:	657b      	str	r3, [r7, #84]	; 0x54
		mean_phase32 = mean_phase32 %
			((int32_t)VL53LX_p_030 * 2048);
 800e24c:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 800e250:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 800e252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e254:	fb93 f1f2 	sdiv	r1, r3, r2
 800e258:	fb02 f201 	mul.w	r2, r2, r1
 800e25c:	1a9b      	subs	r3, r3, r2
 800e25e:	657b      	str	r3, [r7, #84]	; 0x54
		mean_phase = mean_phase32;
 800e260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e262:	461a      	mov	r2, r3
 800e264:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800e268:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

		status = VL53LX_ERROR_NONE;
 800e26c:	2300      	movs	r3, #0
 800e26e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	}

	*pmean_phase = (uint32_t)mean_phase;
 800e272:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e274:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e278:	601a      	str	r2, [r3, #0]

	return status;
 800e27a:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800e27e:	4618      	mov	r0, r3
 800e280:	3778      	adds	r7, #120	; 0x78
 800e282:	46bd      	mov	sp, r7
 800e284:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e288 <VL53LX_f_022>:
	uint8_t                         filter_woi,
	VL53LX_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 800e288:	b480      	push	{r7}
 800e28a:	b087      	sub	sp, #28
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	60ba      	str	r2, [r7, #8]
 800e290:	607b      	str	r3, [r7, #4]
 800e292:	4603      	mov	r3, r0
 800e294:	73fb      	strb	r3, [r7, #15]
 800e296:	460b      	mov	r3, r1
 800e298:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 800e29a:	2300      	movs	r3, #0
 800e29c:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53LX_p_032];
 800e2a8:	7bfa      	ldrb	r2, [r7, #15]
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	3206      	adds	r2, #6
 800e2ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e2b2:	6a3b      	ldr	r3, [r7, #32]
 800e2b4:	601a      	str	r2, [r3, #0]
	*pc = 0;
 800e2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800e2bc:	2300      	movs	r3, #0
 800e2be:	75fb      	strb	r3, [r7, #23]
 800e2c0:	e02f      	b.n	800e322 <VL53LX_f_022+0x9a>


		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800e2c2:	7bfa      	ldrb	r2, [r7, #15]
 800e2c4:	7dfb      	ldrb	r3, [r7, #23]
 800e2c6:	4413      	add	r3, r2
 800e2c8:	68ba      	ldr	r2, [r7, #8]
 800e2ca:	7a92      	ldrb	r2, [r2, #10]
 800e2cc:	441a      	add	r2, r3
 800e2ce:	7bbb      	ldrb	r3, [r7, #14]
 800e2d0:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53LX_p_021;
 800e2d2:	68ba      	ldr	r2, [r7, #8]
 800e2d4:	7a92      	ldrb	r2, [r2, #10]
 800e2d6:	fb93 f1f2 	sdiv	r1, r3, r2
 800e2da:	fb02 f201 	mul.w	r2, r2, r1
 800e2de:	1a9b      	subs	r3, r3, r2
		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800e2e0:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 800e2e2:	7dfa      	ldrb	r2, [r7, #23]
 800e2e4:	7bbb      	ldrb	r3, [r7, #14]
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d20a      	bcs.n	800e300 <VL53LX_f_022+0x78>
			*pa += pbins->bin_data[j];
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681a      	ldr	r2, [r3, #0]
 800e2ee:	7db9      	ldrb	r1, [r7, #22]
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	3106      	adds	r1, #6
 800e2f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e2f8:	441a      	add	r2, r3
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	601a      	str	r2, [r3, #0]
 800e2fe:	e00d      	b.n	800e31c <VL53LX_f_022+0x94>
		else if (w > filter_woi)
 800e300:	7dfa      	ldrb	r2, [r7, #23]
 800e302:	7bbb      	ldrb	r3, [r7, #14]
 800e304:	429a      	cmp	r2, r3
 800e306:	d909      	bls.n	800e31c <VL53LX_f_022+0x94>
			*pc += pbins->bin_data[j];
 800e308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e30a:	681a      	ldr	r2, [r3, #0]
 800e30c:	7db9      	ldrb	r1, [r7, #22]
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	3106      	adds	r1, #6
 800e312:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e316:	441a      	add	r2, r3
 800e318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e31a:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800e31c:	7dfb      	ldrb	r3, [r7, #23]
 800e31e:	3301      	adds	r3, #1
 800e320:	75fb      	strb	r3, [r7, #23]
 800e322:	7bbb      	ldrb	r3, [r7, #14]
 800e324:	005a      	lsls	r2, r3, #1
 800e326:	7dfb      	ldrb	r3, [r7, #23]
 800e328:	429a      	cmp	r2, r3
 800e32a:	daca      	bge.n	800e2c2 <VL53LX_f_022+0x3a>
	}
}
 800e32c:	bf00      	nop
 800e32e:	bf00      	nop
 800e330:	371c      	adds	r7, #28
 800e332:	46bd      	mov	sp, r7
 800e334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e338:	4770      	bx	lr

0800e33a <VL53LX_f_018>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53LX_p_004,
	VL53LX_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 800e33a:	b580      	push	{r7, lr}
 800e33c:	b088      	sub	sp, #32
 800e33e:	af00      	add	r7, sp, #0
 800e340:	60ba      	str	r2, [r7, #8]
 800e342:	461a      	mov	r2, r3
 800e344:	4603      	mov	r3, r0
 800e346:	81fb      	strh	r3, [r7, #14]
 800e348:	460b      	mov	r3, r1
 800e34a:	81bb      	strh	r3, [r7, #12]
 800e34c:	4613      	mov	r3, r2
 800e34e:	80fb      	strh	r3, [r7, #6]
	VL53LX_Error     status = VL53LX_ERROR_NONE;
 800e350:	2300      	movs	r3, #0
 800e352:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 800e354:	2300      	movs	r3, #0
 800e356:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 800e358:	2300      	movs	r3, #0
 800e35a:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 800e35c:	2300      	movs	r3, #0
 800e35e:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 800e360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e362:	89fa      	ldrh	r2, [r7, #14]
 800e364:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 800e366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e368:	89ba      	ldrh	r2, [r7, #12]
 800e36a:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 800e36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36e:	68ba      	ldr	r2, [r7, #8]
 800e370:	619a      	str	r2, [r3, #24]
	pdata->VL53LX_p_004 = VL53LX_p_004;
 800e372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e374:	88fa      	ldrh	r2, [r7, #6]
 800e376:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 800e378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e37a:	8a5b      	ldrh	r3, [r3, #18]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d101      	bne.n	800e384 <VL53LX_f_018+0x4a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800e380:	23f1      	movs	r3, #241	; 0xf1
 800e382:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 800e384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e386:	699b      	ldr	r3, [r3, #24]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d101      	bne.n	800e390 <VL53LX_f_018+0x56>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800e38c:	23f1      	movs	r3, #241	; 0xf1
 800e38e:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 800e390:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d16f      	bne.n	800e478 <VL53LX_f_018+0x13e>



		pll_period_us =
			VL53LX_calc_pll_period_us(pdata->fast_osc_frequency);
 800e398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e39a:	8a5b      	ldrh	r3, [r3, #18]
 800e39c:	4618      	mov	r0, r3
 800e39e:	f7fd faa6 	bl	800b8ee <VL53LX_calc_pll_period_us>
 800e3a2:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 800e3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3a6:	699b      	ldr	r3, [r3, #24]
 800e3a8:	3301      	adds	r3, #1
 800e3aa:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 800e3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ae:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53LX_duration_maths(
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e3b8:	6978      	ldr	r0, [r7, #20]
 800e3ba:	f7fd faaf 	bl	800b91c <VL53LX_duration_maths>
 800e3be:	4602      	mov	r2, r0
 800e3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c2:	61da      	str	r2, [r3, #28]
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53LX_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53LX_p_029) << 4,
 800e3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c6:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53LX_duration_maths(
 800e3c8:	0119      	lsls	r1, r3, #4
 800e3ca:	693b      	ldr	r3, [r7, #16]
 800e3cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e3d0:	6978      	ldr	r0, [r7, #20]
 800e3d2:	f7fd faa3 	bl	800b91c <VL53LX_duration_maths>
 800e3d6:	4602      	mov	r2, r0
 800e3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3da:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800e3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
 800e3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e2:	69db      	ldr	r3, [r3, #28]
 800e3e4:	4619      	mov	r1, r3
 800e3e6:	4610      	mov	r0, r2
 800e3e8:	f7fd fd01 	bl	800bdee <VL53LX_rate_maths>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	461a      	mov	r2, r3
 800e3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f2:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800e3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
 800e3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3fa:	6a1b      	ldr	r3, [r3, #32]
 800e3fc:	4619      	mov	r1, r3
 800e3fe:	4610      	mov	r0, r2
 800e400:	f7fd fcf5 	bl	800bdee <VL53LX_rate_maths>
 800e404:	4603      	mov	r3, r0
 800e406:	461a      	mov	r2, r3
 800e408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e40a:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_016,
 800e40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
 800e410:	461a      	mov	r2, r3
 800e412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e414:	6a1b      	ldr	r3, [r3, #32]
 800e416:	4619      	mov	r1, r3
 800e418:	4610      	mov	r0, r2
 800e41a:	f7fd fce8 	bl	800bdee <VL53LX_rate_maths>
 800e41e:	4603      	mov	r3, r0
 800e420:	461a      	mov	r2, r3
 800e422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e424:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 800e426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e428:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800e42a:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 800e42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e42e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		count_rate_total =
 800e430:	4413      	add	r3, r2
 800e432:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 800e434:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e438:	2b01      	cmp	r3, #1
 800e43a:	d905      	bls.n	800e448 <VL53LX_f_018+0x10e>
			count_rate_total /= histo_merge_nb;
 800e43c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e440:	69ba      	ldr	r2, [r7, #24]
 800e442:	fbb2 f3f3 	udiv	r3, r2, r3
 800e446:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53LX_rate_per_spad_maths(
 800e448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e44a:	8ada      	ldrh	r2, [r3, #22]
 800e44c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e450:	69b9      	ldr	r1, [r7, #24]
 800e452:	2006      	movs	r0, #6
 800e454:	f7fd fd10 	bl	800be78 <VL53LX_rate_per_spad_maths>
 800e458:	4603      	mov	r3, r0
 800e45a:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 800e45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e45e:	86da      	strh	r2, [r3, #54]	; 0x36
					 0xFFFF);



		pdata->VL53LX_p_009   =
			VL53LX_events_per_spad_maths(
 800e460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e462:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e466:	8ad9      	ldrh	r1, [r3, #22]
 800e468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e46a:	69db      	ldr	r3, [r3, #28]
 800e46c:	461a      	mov	r2, r3
 800e46e:	f7fd faaf 	bl	800b9d0 <VL53LX_events_per_spad_maths>
 800e472:	4602      	mov	r2, r0
		pdata->VL53LX_p_009   =
 800e474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e476:	639a      	str	r2, [r3, #56]	; 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 800e478:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	3720      	adds	r7, #32
 800e480:	46bd      	mov	sp, r7
 800e482:	bd80      	pop	{r7, pc}

0800e484 <VL53LX_f_019>:

void VL53LX_f_019(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53LX_range_data_t *pdata)
{
 800e484:	b590      	push	{r4, r7, lr}
 800e486:	b085      	sub	sp, #20
 800e488:	af02      	add	r7, sp, #8
 800e48a:	4603      	mov	r3, r0
 800e48c:	603a      	str	r2, [r7, #0]
 800e48e:	80fb      	strh	r3, [r7, #6]
 800e490:	460b      	mov	r3, r1
 800e492:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53LX_range_maths(
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	8a58      	ldrh	r0, [r3, #18]
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	8a9c      	ldrh	r4, [r3, #20]
 800e4a0:	88fb      	ldrh	r3, [r7, #6]
 800e4a2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e4a6:	9201      	str	r2, [sp, #4]
 800e4a8:	9300      	str	r3, [sp, #0]
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	4622      	mov	r2, r4
 800e4ae:	f7fd fd17 	bl	800bee0 <VL53LX_range_maths>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53LX_range_maths(
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	8a58      	ldrh	r0, [r3, #18]
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	8a9c      	ldrh	r4, [r3, #20]
 800e4ca:	88fb      	ldrh	r3, [r7, #6]
 800e4cc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e4d0:	9201      	str	r2, [sp, #4]
 800e4d2:	9300      	str	r3, [sp, #0]
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	4622      	mov	r2, r4
 800e4d8:	f7fd fd02 	bl	800bee0 <VL53LX_range_maths>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53LX_range_maths(
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	8a58      	ldrh	r0, [r3, #18]
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	8a9c      	ldrh	r4, [r3, #20]
 800e4f4:	88fb      	ldrh	r3, [r7, #6]
 800e4f6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e4fa:	9201      	str	r2, [sp, #4]
 800e4fc:	9300      	str	r3, [sp, #0]
 800e4fe:	2300      	movs	r3, #0
 800e500:	4622      	mov	r2, r4
 800e502:	f7fd fced 	bl	800bee0 <VL53LX_range_maths>
 800e506:	4603      	mov	r3, r0
 800e508:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 800e510:	bf00      	nop
 800e512:	370c      	adds	r7, #12
 800e514:	46bd      	mov	sp, r7
 800e516:	bd90      	pop	{r4, r7, pc}

0800e518 <VL53LX_f_005>:

void  VL53LX_f_005(
	VL53LX_histogram_bin_data_t   *pxtalk,
	VL53LX_histogram_bin_data_t   *pbins,
	VL53LX_histogram_bin_data_t   *pxtalk_realigned)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b086      	sub	sp, #24
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	60f8      	str	r0, [r7, #12]
 800e520:	60b9      	str	r1, [r7, #8]
 800e522:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 800e524:	2300      	movs	r3, #0
 800e526:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 800e528:	2300      	movs	r3, #0
 800e52a:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 800e52c:	2300      	movs	r3, #0
 800e52e:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 800e530:	2300      	movs	r3, #0
 800e532:	757b      	strb	r3, [r7, #21]





	memcpy(
 800e534:	22ac      	movs	r2, #172	; 0xac
 800e536:	68b9      	ldr	r1, [r7, #8]
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f006 fdfb 	bl	8015134 <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53LX_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800e53e:	2300      	movs	r3, #0
 800e540:	75fb      	strb	r3, [r7, #23]
 800e542:	e008      	b.n	800e556 <VL53LX_f_005+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 800e544:	7dfa      	ldrb	r2, [r7, #23]
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	3206      	adds	r2, #6
 800e54a:	2100      	movs	r1, #0
 800e54c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800e550:	7dfb      	ldrb	r3, [r7, #23]
 800e552:	3301      	adds	r3, #1
 800e554:	75fb      	strb	r3, [r7, #23]
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	7a5b      	ldrb	r3, [r3, #9]
 800e55a:	7dfa      	ldrb	r2, [r7, #23]
 800e55c:	429a      	cmp	r2, r3
 800e55e:	d3f1      	bcc.n	800e544 <VL53LX_f_005+0x2c>



	bin_offset =  VL53LX_f_030(
 800e560:	68f9      	ldr	r1, [r7, #12]
 800e562:	68b8      	ldr	r0, [r7, #8]
 800e564:	f000 f878 	bl	800e658 <VL53LX_f_030>
 800e568:	4603      	mov	r3, r0
 800e56a:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53LX_p_021 < pbins->VL53LX_p_021)
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	7a9a      	ldrb	r2, [r3, #10]
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	7a9b      	ldrb	r3, [r3, #10]
 800e574:	429a      	cmp	r2, r3
 800e576:	d203      	bcs.n	800e580 <VL53LX_f_005+0x68>
		min_bins = pxtalk->VL53LX_p_021;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	7a9b      	ldrb	r3, [r3, #10]
 800e57c:	75bb      	strb	r3, [r7, #22]
 800e57e:	e002      	b.n	800e586 <VL53LX_f_005+0x6e>
	else
		min_bins = pbins->VL53LX_p_021;
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	7a9b      	ldrb	r3, [r3, #10]
 800e584:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 800e586:	2300      	movs	r3, #0
 800e588:	75fb      	strb	r3, [r7, #23]
 800e58a:	e05c      	b.n	800e646 <VL53LX_f_005+0x12e>



		if (bin_offset >= 0)
 800e58c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e590:	2b00      	cmp	r3, #0
 800e592:	db0f      	blt.n	800e5b4 <VL53LX_f_005+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800e594:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e598:	461a      	mov	r2, r3
 800e59a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e59e:	4413      	add	r3, r2
				% (int8_t)pbins->VL53LX_p_021;
 800e5a0:	68ba      	ldr	r2, [r7, #8]
 800e5a2:	7a92      	ldrb	r2, [r2, #10]
 800e5a4:	b252      	sxtb	r2, r2
 800e5a6:	fb93 f1f2 	sdiv	r1, r3, r2
 800e5aa:	fb02 f201 	mul.w	r2, r2, r1
 800e5ae:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800e5b0:	757b      	strb	r3, [r7, #21]
 800e5b2:	e013      	b.n	800e5dc <VL53LX_f_005+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	7a9b      	ldrb	r3, [r3, #10]
 800e5b8:	b25b      	sxtb	r3, r3
 800e5ba:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 800e5bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e5c6:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800e5c8:	4413      	add	r3, r2
					% (int8_t)pbins->VL53LX_p_021;
 800e5ca:	68ba      	ldr	r2, [r7, #8]
 800e5cc:	7a92      	ldrb	r2, [r2, #10]
 800e5ce:	b252      	sxtb	r2, r2
 800e5d0:	fb93 f1f2 	sdiv	r1, r3, r2
 800e5d4:	fb02 f201 	mul.w	r2, r2, r1
 800e5d8:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800e5da:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 800e5dc:	7d7b      	ldrb	r3, [r7, #21]
 800e5de:	461a      	mov	r2, r3
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	3206      	adds	r2, #6
 800e5e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 800e5e8:	7df9      	ldrb	r1, [r7, #23]
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	3106      	adds	r1, #6
 800e5ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	dd12      	ble.n	800e61c <VL53LX_f_005+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 800e5f6:	7d7b      	ldrb	r3, [r7, #21]
 800e5f8:	461a      	mov	r2, r3
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	3206      	adds	r2, #6
 800e5fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 800e602:	7df9      	ldrb	r1, [r7, #23]
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	3106      	adds	r1, #6
 800e608:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 800e60c:	7d79      	ldrb	r1, [r7, #21]
 800e60e:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 800e610:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	1d82      	adds	r2, r0, #6
 800e616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800e61a:	e006      	b.n	800e62a <VL53LX_f_005+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 800e61c:	7d7b      	ldrb	r3, [r7, #21]
 800e61e:	461a      	mov	r2, r3
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	3206      	adds	r2, #6
 800e624:	2100      	movs	r1, #0
 800e626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 800e62a:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800e62c:	7d7b      	ldrb	r3, [r7, #21]
 800e62e:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	3206      	adds	r2, #6
 800e634:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	1d82      	adds	r2, r0, #6
 800e63c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 800e640:	7dfb      	ldrb	r3, [r7, #23]
 800e642:	3301      	adds	r3, #1
 800e644:	75fb      	strb	r3, [r7, #23]
 800e646:	7dfa      	ldrb	r2, [r7, #23]
 800e648:	7dbb      	ldrb	r3, [r7, #22]
 800e64a:	429a      	cmp	r2, r3
 800e64c:	d39e      	bcc.n	800e58c <VL53LX_f_005+0x74>
	}



	LOG_FUNCTION_END(0);
}
 800e64e:	bf00      	nop
 800e650:	bf00      	nop
 800e652:	3718      	adds	r7, #24
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}

0800e658 <VL53LX_f_030>:


int8_t  VL53LX_f_030(
	VL53LX_histogram_bin_data_t   *pdata1,
	VL53LX_histogram_bin_data_t   *pdata2)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b086      	sub	sp, #24
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
 800e660:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 800e662:	2300      	movs	r3, #0
 800e664:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 800e666:	2300      	movs	r3, #0
 800e668:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 800e66a:	2300      	movs	r3, #0
 800e66c:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 800e66e:	2300      	movs	r3, #0
 800e670:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata1->VL53LX_p_005);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e678:	4618      	mov	r0, r3
 800e67a:	f7fd fd0b 	bl	800c094 <VL53LX_decode_vcsel_period>
 800e67e:	4603      	mov	r3, r0
	period = 2048 *
 800e680:	02db      	lsls	r3, r3, #11
 800e682:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d00a      	beq.n	800e6a0 <VL53LX_f_030+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		remapped_phase =
 800e690:	68ba      	ldr	r2, [r7, #8]
 800e692:	fbb3 f2f2 	udiv	r2, r3, r2
 800e696:	68b9      	ldr	r1, [r7, #8]
 800e698:	fb01 f202 	mul.w	r2, r1, r2
 800e69c:	1a9b      	subs	r3, r3, r2
 800e69e:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800e6a6:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 800e6a8:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 800e6aa:	1ad3      	subs	r3, r2, r3
 800e6ac:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	dd09      	ble.n	800e6c8 <VL53LX_f_030+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	da01      	bge.n	800e6c2 <VL53LX_f_030+0x6a>
 800e6be:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800e6c2:	12db      	asrs	r3, r3, #11
 800e6c4:	75fb      	strb	r3, [r7, #23]
 800e6c6:	e008      	b.n	800e6da <VL53LX_f_030+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	da01      	bge.n	800e6d6 <VL53LX_f_030+0x7e>
 800e6d2:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800e6d6:	12db      	asrs	r3, r3, #11
 800e6d8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 800e6da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3718      	adds	r7, #24
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}

0800e6e6 <VL53LX_f_031>:


VL53LX_Error  VL53LX_f_031(
	VL53LX_histogram_bin_data_t   *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 800e6e6:	b580      	push	{r7, lr}
 800e6e8:	b08e      	sub	sp, #56	; 0x38
 800e6ea:	af00      	add	r7, sp, #0
 800e6ec:	6078      	str	r0, [r7, #4]
 800e6ee:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	uint8_t  bin_initial_index[VL53LX_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53LX_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bin_seq_length = 0;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t  repeat_count   = 0;
 800e702:	2300      	movs	r3, #0
 800e704:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t  VL53LX_p_032       = 0;
 800e706:	2300      	movs	r3, #0
 800e708:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t  lc       = 0;
 800e70c:	2300      	movs	r3, #0
 800e70e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t  i       = 0;
 800e712:	2300      	movs	r3, #0
 800e714:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53LX_histogram_bin_data_t));
 800e718:	22ac      	movs	r2, #172	; 0xac
 800e71a:	6879      	ldr	r1, [r7, #4]
 800e71c:	6838      	ldr	r0, [r7, #0]
 800e71e:	f006 fd09 	bl	8015134 <memcpy>


	podata->VL53LX_p_021 = 0;
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	2200      	movs	r2, #0
 800e726:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800e728:	2300      	movs	r3, #0
 800e72a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e72e:	e00a      	b.n	800e746 <VL53LX_f_031+0x60>
		podata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE+1;
 800e730:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e734:	683a      	ldr	r2, [r7, #0]
 800e736:	4413      	add	r3, r2
 800e738:	2210      	movs	r2, #16
 800e73a:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800e73c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e740:	3301      	adds	r3, #1
 800e742:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e746:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e74a:	2b05      	cmp	r3, #5
 800e74c:	d9f0      	bls.n	800e730 <VL53LX_f_031+0x4a>

	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800e74e:	2300      	movs	r3, #0
 800e750:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e754:	e00b      	b.n	800e76e <VL53LX_f_031+0x88>
		podata->bin_data[lc] = 0;
 800e756:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	3206      	adds	r2, #6
 800e75e:	2100      	movs	r1, #0
 800e760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800e764:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e768:	3301      	adds	r3, #1
 800e76a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	7a5b      	ldrb	r3, [r3, #9]
 800e772:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800e776:	429a      	cmp	r2, r3
 800e778:	d3ed      	bcc.n	800e756 <VL53LX_f_031+0x70>



	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e77a:	2300      	movs	r3, #0
 800e77c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e780:	e014      	b.n	800e7ac <VL53LX_f_031+0xc6>
		bin_initial_index[lc] = 0x00;
 800e782:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e786:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e78a:	4413      	add	r3, r2
 800e78c:	2200      	movs	r2, #0
 800e78e:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 800e792:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e796:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e79a:	4413      	add	r3, r2
 800e79c:	2200      	movs	r2, #0
 800e79e:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e7a2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e7a6:	3301      	adds	r3, #1
 800e7a8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e7ac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e7b0:	2b0f      	cmp	r3, #15
 800e7b2:	d9e6      	bls.n	800e782 <VL53LX_f_031+0x9c>
	}




	bin_seq_length = 0x00;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e7c0:	e06c      	b.n	800e89c <VL53LX_f_031+0x1b6>

		bin_cfg = pidata->bin_seq[lc];
 800e7c2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e7c6:	687a      	ldr	r2, [r7, #4]
 800e7c8:	4413      	add	r3, r2
 800e7ca:	7b1b      	ldrb	r3, [r3, #12]
 800e7cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 800e7d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e7d4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e7d8:	4413      	add	r3, r2
 800e7da:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d116      	bne.n	800e810 <VL53LX_f_031+0x12a>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 800e7e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e7e6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e7ea:	0092      	lsls	r2, r2, #2
 800e7ec:	b2d2      	uxtb	r2, r2
 800e7ee:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e7f2:	440b      	add	r3, r1
 800e7f4:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 800e7f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e7fc:	683a      	ldr	r2, [r7, #0]
 800e7fe:	4413      	add	r3, r2
 800e800:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800e804:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 800e806:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e80a:	3301      	adds	r3, #1
 800e80c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

		bin_repeat_count[bin_cfg]++;
 800e810:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e814:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e818:	441a      	add	r2, r3
 800e81a:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 800e81e:	3201      	adds	r2, #1
 800e820:	b2d2      	uxtb	r2, r2
 800e822:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e826:	440b      	add	r3, r1
 800e828:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53LX_p_032 = bin_initial_index[bin_cfg];
 800e82c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e830:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e834:	4413      	add	r3, r2
 800e836:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800e83a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		for (i = 0 ; i < 4 ; i++)
 800e83e:	2300      	movs	r3, #0
 800e840:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e844:	e021      	b.n	800e88a <VL53LX_f_031+0x1a4>
			podata->bin_data[VL53LX_p_032+i] +=
 800e846:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e84a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e84e:	441a      	add	r2, r3
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	3206      	adds	r2, #6
 800e854:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 800e858:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e85c:	009a      	lsls	r2, r3, #2
 800e85e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e862:	441a      	add	r2, r3
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	3206      	adds	r2, #6
 800e868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53LX_p_032+i] +=
 800e86c:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 800e870:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e874:	4402      	add	r2, r0
 800e876:	4419      	add	r1, r3
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	3206      	adds	r2, #6
 800e87c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 800e880:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e884:	3301      	adds	r3, #1
 800e886:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e88a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e88e:	2b03      	cmp	r3, #3
 800e890:	d9d9      	bls.n	800e846 <VL53LX_f_031+0x160>
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e892:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e896:	3301      	adds	r3, #1
 800e898:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e89c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e8a0:	2b05      	cmp	r3, #5
 800e8a2:	d98e      	bls.n	800e7c2 <VL53LX_f_031+0xdc>

	}



	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e8aa:	e023      	b.n	800e8f4 <VL53LX_f_031+0x20e>

		bin_cfg = podata->bin_seq[lc];
 800e8ac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e8b0:	683a      	ldr	r2, [r7, #0]
 800e8b2:	4413      	add	r3, r2
 800e8b4:	7b1b      	ldrb	r3, [r3, #12]
 800e8b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if (bin_cfg <= VL53LX_MAX_BIN_SEQUENCE_CODE)
 800e8ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e8be:	2b0f      	cmp	r3, #15
 800e8c0:	d80d      	bhi.n	800e8de <VL53LX_f_031+0x1f8>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 800e8c2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
			podata->bin_rep[lc] =
 800e8c6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
				bin_repeat_count[bin_cfg];
 800e8ca:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e8ce:	440a      	add	r2, r1
 800e8d0:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 800e8d4:	683a      	ldr	r2, [r7, #0]
 800e8d6:	4413      	add	r3, r2
 800e8d8:	460a      	mov	r2, r1
 800e8da:	749a      	strb	r2, [r3, #18]
 800e8dc:	e005      	b.n	800e8ea <VL53LX_f_031+0x204>
		else
			podata->bin_rep[lc] = 0;
 800e8de:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e8e2:	683a      	ldr	r2, [r7, #0]
 800e8e4:	4413      	add	r3, r2
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e8ea:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e8ee:	3301      	adds	r3, #1
 800e8f0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e8f4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e8f8:	2b05      	cmp	r3, #5
 800e8fa:	d9d7      	bls.n	800e8ac <VL53LX_f_031+0x1c6>
	}

	podata->VL53LX_p_021 = bin_seq_length * 4;
 800e8fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e900:	009b      	lsls	r3, r3, #2
 800e902:	b2da      	uxtb	r2, r3
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e908:	2300      	movs	r3, #0
 800e90a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e90e:	e052      	b.n	800e9b6 <VL53LX_f_031+0x2d0>

		repeat_count = (int32_t)bin_repeat_count[lc];
 800e910:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e914:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e918:	4413      	add	r3, r2
 800e91a:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800e91e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (repeat_count > 0) {
 800e920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e922:	2b00      	cmp	r3, #0
 800e924:	dd42      	ble.n	800e9ac <VL53LX_f_031+0x2c6>

			VL53LX_p_032 = bin_initial_index[lc];
 800e926:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e92a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e92e:	4413      	add	r3, r2
 800e930:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800e934:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			for (i = 0 ; i < 4 ; i++) {
 800e938:	2300      	movs	r3, #0
 800e93a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e93e:	e031      	b.n	800e9a4 <VL53LX_f_031+0x2be>
				podata->bin_data[VL53LX_p_032+i] +=
 800e940:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e944:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e948:	441a      	add	r2, r3
 800e94a:	683b      	ldr	r3, [r7, #0]
 800e94c:	3206      	adds	r2, #6
 800e94e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 800e952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e954:	0fda      	lsrs	r2, r3, #31
 800e956:	4413      	add	r3, r2
 800e958:	105b      	asrs	r3, r3, #1
 800e95a:	4618      	mov	r0, r3
				podata->bin_data[VL53LX_p_032+i] +=
 800e95c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e960:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e964:	441a      	add	r2, r3
 800e966:	4401      	add	r1, r0
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	3206      	adds	r2, #6
 800e96c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53LX_p_032+i] /=
 800e970:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e974:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e978:	441a      	add	r2, r3
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	3206      	adds	r2, #6
 800e97e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e982:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e986:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e98a:	441a      	add	r2, r3
 800e98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e98e:	fb91 f1f3 	sdiv	r1, r1, r3
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	3206      	adds	r2, #6
 800e996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 800e99a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e99e:	3301      	adds	r3, #1
 800e9a0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e9a4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e9a8:	2b03      	cmp	r3, #3
 800e9aa:	d9c9      	bls.n	800e940 <VL53LX_f_031+0x25a>
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e9ac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e9b0:	3301      	adds	r3, #1
 800e9b2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e9b6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e9ba:	2b0f      	cmp	r3, #15
 800e9bc:	d9a8      	bls.n	800e910 <VL53LX_f_031+0x22a>
		}
	}



	podata->number_of_ambient_bins = 0;
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 800e9c4:	7bfb      	ldrb	r3, [r7, #15]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d102      	bne.n	800e9d0 <VL53LX_f_031+0x2ea>
		(bin_repeat_count[15] > 0))
 800e9ca:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d002      	beq.n	800e9d6 <VL53LX_f_031+0x2f0>
		podata->number_of_ambient_bins = 4;
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	2204      	movs	r2, #4
 800e9d4:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 800e9d6:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	3738      	adds	r7, #56	; 0x38
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}

0800e9e2 <VL53LX_hist_process_data>:
	VL53LX_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53LX_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 800e9e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9e4:	b0cb      	sub	sp, #300	; 0x12c
 800e9e6:	af06      	add	r7, sp, #24
 800e9e8:	f107 040c 	add.w	r4, r7, #12
 800e9ec:	6020      	str	r0, [r4, #0]
 800e9ee:	f107 0008 	add.w	r0, r7, #8
 800e9f2:	6001      	str	r1, [r0, #0]
 800e9f4:	1d39      	adds	r1, r7, #4
 800e9f6:	600a      	str	r2, [r1, #0]
 800e9f8:	463a      	mov	r2, r7
 800e9fa:	6013      	str	r3, [r2, #0]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	VL53LX_hist_gen3_algo_private_data_t  *palgo_gen3 =
 800ea02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ea06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			(VL53LX_hist_gen3_algo_private_data_t *) pArea1;
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered4 =
 800ea0a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ea0e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			(VL53LX_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53LX_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53LX_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 800ea12:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800ea16:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						&dmax_algo_gen3;

	VL53LX_histogram_bin_data_t             bins_averaged;
	VL53LX_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 800ea1a:	f107 0318 	add.w	r3, r7, #24
 800ea1e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	VL53LX_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 800ea22:	2300      	movs	r3, #0
 800ea24:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 800ea26:	2300      	movs	r3, #0
 800ea28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint8_t  xtalk_enable                  = 0;
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t  r                             = 0;
 800ea32:	2300      	movs	r3, #0
 800ea34:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t  t                             = 0;
 800ea38:	2300      	movs	r3, #0
 800ea3a:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0


	int16_t  delta_mm                      = 0;
 800ea44:	2300      	movs	r3, #0
 800ea46:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	LOG_FUNCTION_START("");



	VL53LX_f_031(
 800ea4a:	463b      	mov	r3, r7
 800ea4c:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800ea50:	6818      	ldr	r0, [r3, #0]
 800ea52:	f7ff fe48 	bl	800e6e6 <VL53LX_f_031>



	VL53LX_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53LX_p_021,
 800ea56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ea5a:	7a9b      	ldrb	r3, [r3, #10]
	VL53LX_init_histogram_bin_data_struct(
 800ea5c:	b299      	uxth	r1, r3
 800ea5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ea62:	3348      	adds	r3, #72	; 0x48
 800ea64:	461a      	mov	r2, r3
 800ea66:	2000      	movs	r0, #0
 800ea68:	f7fd fb65 	bl	800c136 <VL53LX_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
 800ea6c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800ea70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ea74:	3348      	adds	r3, #72	; 0x48
 800ea76:	4619      	mov	r1, r3
 800ea78:	4610      	mov	r0, r2
 800ea7a:	f7fd fb1e 	bl	800c0ba <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53LX_ERROR_NONE) &&
 800ea7e:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d12d      	bne.n	800eae2 <VL53LX_hist_process_data+0x100>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800ea86:	1d3b      	adds	r3, r7, #4
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d027      	beq.n	800eae2 <VL53LX_hist_process_data+0x100>
		status =
		VL53LX_f_032(
 800ea92:	1d3b      	adds	r3, r7, #4
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800ea98:	1d3b      	adds	r3, r7, #4
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	; 0x30
 800eaa0:	1d3b      	adds	r3, r7, #4
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	; 0x32
 800eaa8:	463b      	mov	r3, r7
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800eab0:	463a      	mov	r2, r7
 800eab2:	6812      	ldr	r2, [r2, #0]
 800eab4:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 800eab8:	4639      	mov	r1, r7
 800eaba:	6809      	ldr	r1, [r1, #0]
 800eabc:	f891 10a9 	ldrb.w	r1, [r1, #169]	; 0xa9
 800eac0:	f107 0014 	add.w	r0, r7, #20
 800eac4:	9004      	str	r0, [sp, #16]
 800eac6:	9103      	str	r1, [sp, #12]
 800eac8:	9202      	str	r2, [sp, #8]
 800eaca:	9301      	str	r3, [sp, #4]
 800eacc:	2300      	movs	r3, #0
 800eace:	9300      	str	r3, [sp, #0]
 800ead0:	2300      	movs	r3, #0
 800ead2:	4632      	mov	r2, r6
 800ead4:	4629      	mov	r1, r5
 800ead6:	4620      	mov	r0, r4
 800ead8:	f002 f8bf 	bl	8010c5a <VL53LX_f_032>
 800eadc:	4603      	mov	r3, r0
 800eade:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53LX_ERROR_NONE) &&
 800eae2:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d112      	bne.n	800eb10 <VL53LX_hist_process_data+0x12e>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800eaea:	1d3b      	adds	r3, r7, #4
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d00c      	beq.n	800eb10 <VL53LX_hist_process_data+0x12e>
		status =
			VL53LX_f_033(
 800eaf6:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800eafa:	697a      	ldr	r2, [r7, #20]
 800eafc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eb00:	3348      	adds	r3, #72	; 0x48
 800eb02:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800eb06:	f002 faab 	bl	8011060 <VL53LX_f_033>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 800eb10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800eb14:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	presults->xmonitor.total_periods_elapsed =
 800eb18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800eb1c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	presults->xmonitor.VL53LX_p_004 =
		pbins_averaged->result__dss_actual_effective_spads;
 800eb20:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800eb24:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
	presults->xmonitor.VL53LX_p_004 =
 800eb28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800eb2c:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 800eb30:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800eb34:	2200      	movs	r2, #0
 800eb36:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	presults->xmonitor.VL53LX_p_009     = 0;
 800eb3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800eb3e:	2200      	movs	r2, #0
 800eb40:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 800eb44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800eb48:	2200      	movs	r2, #0
 800eb4a:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	presults->xmonitor.range_status = VL53LX_DEVICEERROR_NOUPDATE;
 800eb4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800eb52:	2200      	movs	r2, #0
 800eb54:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e



	xtalk_enable = 0;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800eb5e:	1d3b      	adds	r3, r7, #4
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d002      	beq.n	800eb70 <VL53LX_hist_process_data+0x18e>
		xtalk_enable = 1;
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 800eb70:	2300      	movs	r3, #0
 800eb72:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800eb76:	e0ef      	b.n	800ed58 <VL53LX_hist_process_data+0x376>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 800eb78:	1d3b      	adds	r3, r7, #4
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800eb80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28



		status =
		VL53LX_f_025(
 800eb84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eb88:	3348      	adds	r3, #72	; 0x48
 800eb8a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800eb8e:	7814      	ldrb	r4, [r2, #0]
 800eb90:	1d3a      	adds	r2, r7, #4
 800eb92:	f107 0108 	add.w	r1, r7, #8
 800eb96:	f107 000c 	add.w	r0, r7, #12
 800eb9a:	9405      	str	r4, [sp, #20]
 800eb9c:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 800eba0:	9404      	str	r4, [sp, #16]
 800eba2:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 800eba6:	9403      	str	r4, [sp, #12]
 800eba8:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 800ebac:	9402      	str	r4, [sp, #8]
 800ebae:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 800ebb2:	9401      	str	r4, [sp, #4]
 800ebb4:	9300      	str	r3, [sp, #0]
 800ebb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ebba:	6812      	ldr	r2, [r2, #0]
 800ebbc:	6809      	ldr	r1, [r1, #0]
 800ebbe:	6800      	ldr	r0, [r0, #0]
 800ebc0:	f7fe fec1 	bl	800d946 <VL53LX_f_025>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53LX_ERROR_NONE && r == 0))
 800ebca:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	f040 80bc 	bne.w	800ed4c <VL53LX_hist_process_data+0x36a>
 800ebd4:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	f040 80b7 	bne.w	800ed4c <VL53LX_hist_process_data+0x36a>
			continue;



		if (presults->active_results == 0) {
 800ebde:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ebe2:	7c9b      	ldrb	r3, [r3, #18]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d110      	bne.n	800ec0a <VL53LX_hist_process_data+0x228>
			pdata = &(presults->VL53LX_p_003[0]);
 800ebe8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ebec:	3314      	adds	r3, #20
 800ebee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53LX_p_034;
 800ebf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ebf6:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 800ebf8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ebfc:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53LX_p_004 =
				pdmax_algo_gen3->VL53LX_p_004;
 800ebfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ec02:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53LX_p_004 =
 800ec04:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ec08:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 800ec0a:	1d3b      	adds	r3, r7, #4
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 800ec10:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 800ec14:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800ec18:	781b      	ldrb	r3, [r3, #0]
 800ec1a:	461a      	mov	r2, r3
 800ec1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ec20:	fb02 f303 	mul.w	r3, r2, r3
 800ec24:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 800ec28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ec2c:	011b      	lsls	r3, r3, #4
 800ec2e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 800ec32:	2300      	movs	r3, #0
 800ec34:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 800ec38:	e07f      	b.n	800ed3a <VL53LX_hist_process_data+0x358>

			pdata = &(presults->VL53LX_p_003[t]);
 800ec3a:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 800ec3e:	224c      	movs	r2, #76	; 0x4c
 800ec40:	fb02 f303 	mul.w	r3, r2, r3
 800ec44:	3310      	adds	r3, #16
 800ec46:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800ec4a:	4413      	add	r3, r2
 800ec4c:	3304      	adds	r3, #4
 800ec4e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 800ec52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ec56:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800ec5a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ec5e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800ec62:	429a      	cmp	r2, r3
 800ec64:	dd0e      	ble.n	800ec84 <VL53LX_hist_process_data+0x2a2>
				delta_mm =
					pdata->max_range_mm -
 800ec66:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ec6a:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800ec6e:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 800ec70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ec74:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800ec78:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 800ec7a:	1ad3      	subs	r3, r2, r3
 800ec7c:	b29b      	uxth	r3, r3
				delta_mm =
 800ec7e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800ec82:	e00d      	b.n	800eca0 <VL53LX_hist_process_data+0x2be>
			else
				delta_mm =
					pdata->min_range_mm -
 800ec84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ec88:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800ec8c:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 800ec8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ec92:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800ec96:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 800ec98:	1ad3      	subs	r3, r2, r3
 800ec9a:	b29b      	uxth	r3, r3
				delta_mm =
 800ec9c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 800eca0:	1d3b      	adds	r3, r7, #4
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			XtalkDetectMaxSigma =
 800eca6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 800ecaa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800ecae:	781b      	ldrb	r3, [r3, #0]
 800ecb0:	461a      	mov	r2, r3
 800ecb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ecb6:	fb02 f303 	mul.w	r3, r2, r3
 800ecba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma <<= 5;
 800ecbe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ecc2:	015b      	lsls	r3, r3, #5
 800ecc4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			if (pdata->median_range_mm  >
 800ecc8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800eccc:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800ecd0:	1d3b      	adds	r3, r7, #4
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
			if (pdata->median_range_mm  >
 800ecd8:	429a      	cmp	r2, r3
 800ecda:	dd29      	ble.n	800ed30 <VL53LX_hist_process_data+0x34e>
			pdata->median_range_mm  <
 800ecdc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ece0:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800ece4:	1d3b      	adds	r3, r7, #4
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800ecec:	429a      	cmp	r2, r3
 800ecee:	da1f      	bge.n	800ed30 <VL53LX_hist_process_data+0x34e>
			pdata->VL53LX_p_009 <
 800ecf0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ecf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800ecf6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800ecfa:	429a      	cmp	r2, r3
 800ecfc:	d918      	bls.n	800ed30 <VL53LX_hist_process_data+0x34e>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800ecfe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ed02:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800ed04:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 800ed06:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ed0a:	4293      	cmp	r3, r2
 800ed0c:	d910      	bls.n	800ed30 <VL53LX_hist_process_data+0x34e>
			delta_mm <
 800ed0e:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 800ed12:	1d3a      	adds	r2, r7, #4
 800ed14:	6812      	ldr	r2, [r2, #0]
 800ed16:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800ed18:	4293      	cmp	r3, r2
 800ed1a:	da09      	bge.n	800ed30 <VL53LX_hist_process_data+0x34e>



				memcpy(
					&(presults->xmonitor),
 800ed1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ed20:	f503 73a2 	add.w	r3, r3, #324	; 0x144
				memcpy(
 800ed24:	224c      	movs	r2, #76	; 0x4c
 800ed26:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f006 fa02 	bl	8015134 <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 800ed30:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 800ed34:	3301      	adds	r3, #1
 800ed36:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 800ed3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ed3e:	7c9b      	ldrb	r3, [r3, #18]
 800ed40:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 800ed44:	429a      	cmp	r2, r3
 800ed46:	f4ff af78 	bcc.w	800ec3a <VL53LX_hist_process_data+0x258>
 800ed4a:	e000      	b.n	800ed4e <VL53LX_hist_process_data+0x36c>
			continue;
 800ed4c:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 800ed4e:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800ed52:	3301      	adds	r3, #1
 800ed54:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800ed58:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800ed5c:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800ed60:	429a      	cmp	r2, r3
 800ed62:	f67f af09 	bls.w	800eb78 <VL53LX_hist_process_data+0x196>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 800ed66:	1d3b      	adds	r3, r7, #4
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 800ed6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	LOG_FUNCTION_END(status);

	return status;
 800ed72:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 800ed76:	4618      	mov	r0, r3
 800ed78:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ed80 <VL53LX_nvm_enable>:

VL53LX_Error VL53LX_nvm_enable(
	VL53LX_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b086      	sub	sp, #24
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	60f8      	str	r0, [r7, #12]
 800ed88:	460b      	mov	r3, r1
 800ed8a:	607a      	str	r2, [r7, #4]
 800ed8c:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ed8e:	2300      	movs	r3, #0
 800ed90:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53LX_ERROR_NONE)
 800ed92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d104      	bne.n	800eda4 <VL53LX_nvm_enable+0x24>
		status = VL53LX_disable_firmware(Dev);
 800ed9a:	68f8      	ldr	r0, [r7, #12]
 800ed9c:	f7f9 fe88 	bl	8008ab0 <VL53LX_disable_firmware>
 800eda0:	4603      	mov	r3, r0
 800eda2:	75fb      	strb	r3, [r7, #23]




	if (status == VL53LX_ERROR_NONE)
 800eda4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d104      	bne.n	800edb6 <VL53LX_nvm_enable+0x36>
		status = VL53LX_enable_powerforce(Dev);
 800edac:	68f8      	ldr	r0, [r7, #12]
 800edae:	f7f9 feb0 	bl	8008b12 <VL53LX_enable_powerforce>
 800edb2:	4603      	mov	r3, r0
 800edb4:	75fb      	strb	r3, [r7, #23]



	if (status == VL53LX_ERROR_NONE)
 800edb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d105      	bne.n	800edca <VL53LX_nvm_enable+0x4a>
		status = VL53LX_WaitUs(
 800edbe:	21fa      	movs	r1, #250	; 0xfa
 800edc0:	68f8      	ldr	r0, [r7, #12]
 800edc2:	f002 fb9d 	bl	8011500 <VL53LX_WaitUs>
 800edc6:	4603      	mov	r3, r0
 800edc8:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53LX_ERROR_NONE)
 800edca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d107      	bne.n	800ede2 <VL53LX_nvm_enable+0x62>
		status = VL53LX_WrByte(
 800edd2:	2201      	movs	r2, #1
 800edd4:	f240 7181 	movw	r1, #1921	; 0x781
 800edd8:	68f8      	ldr	r0, [r7, #12]
 800edda:	f002 fa9d 	bl	8011318 <VL53LX_WrByte>
 800edde:	4603      	mov	r3, r0
 800ede0:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800ede2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d107      	bne.n	800edfa <VL53LX_nvm_enable+0x7a>
		status = VL53LX_WrByte(
 800edea:	2205      	movs	r2, #5
 800edec:	f240 6183 	movw	r1, #1667	; 0x683
 800edf0:	68f8      	ldr	r0, [r7, #12]
 800edf2:	f002 fa91 	bl	8011318 <VL53LX_WrByte>
 800edf6:	4603      	mov	r3, r0
 800edf8:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53LX_ERROR_NONE)
 800edfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d105      	bne.n	800ee0e <VL53LX_nvm_enable+0x8e>
		status = VL53LX_WaitUs(
 800ee02:	6879      	ldr	r1, [r7, #4]
 800ee04:	68f8      	ldr	r0, [r7, #12]
 800ee06:	f002 fb7b 	bl	8011500 <VL53LX_WaitUs>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53LX_ERROR_NONE)
 800ee0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d107      	bne.n	800ee26 <VL53LX_nvm_enable+0xa6>
		status = VL53LX_WrByte(
 800ee16:	2201      	movs	r2, #1
 800ee18:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 800ee1c:	68f8      	ldr	r0, [r7, #12]
 800ee1e:	f002 fa7b 	bl	8011318 <VL53LX_WrByte>
 800ee22:	4603      	mov	r3, r0
 800ee24:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53LX_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53LX_ERROR_NONE)
 800ee26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d108      	bne.n	800ee40 <VL53LX_nvm_enable+0xc0>
		status = VL53LX_WrWord(
 800ee2e:	897b      	ldrh	r3, [r7, #10]
 800ee30:	461a      	mov	r2, r3
 800ee32:	f240 7184 	movw	r1, #1924	; 0x784
 800ee36:	68f8      	ldr	r0, [r7, #12]
 800ee38:	f002 fa98 	bl	801136c <VL53LX_WrWord>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	75fb      	strb	r3, [r7, #23]
			VL53LX_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 800ee40:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800ee44:	4618      	mov	r0, r3
 800ee46:	3718      	adds	r7, #24
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bd80      	pop	{r7, pc}

0800ee4c <VL53LX_nvm_read>:
VL53LX_Error VL53LX_nvm_read(
	VL53LX_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b086      	sub	sp, #24
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	60f8      	str	r0, [r7, #12]
 800ee54:	607b      	str	r3, [r7, #4]
 800ee56:	460b      	mov	r3, r1
 800ee58:	72fb      	strb	r3, [r7, #11]
 800ee5a:	4613      	mov	r3, r2
 800ee5c:	72bb      	strb	r3, [r7, #10]


	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800ee5e:	2300      	movs	r3, #0
 800ee60:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 800ee62:	2300      	movs	r3, #0
 800ee64:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53LX_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 800ee66:	7afb      	ldrb	r3, [r7, #11]
 800ee68:	75bb      	strb	r3, [r7, #22]
 800ee6a:	e041      	b.n	800eef0 <VL53LX_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53LX_ERROR_NONE)
 800ee6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d108      	bne.n	800ee86 <VL53LX_nvm_read+0x3a>
			status = VL53LX_WrByte(
 800ee74:	7dbb      	ldrb	r3, [r7, #22]
 800ee76:	461a      	mov	r2, r3
 800ee78:	f240 7194 	movw	r1, #1940	; 0x794
 800ee7c:	68f8      	ldr	r0, [r7, #12]
 800ee7e:	f002 fa4b 	bl	8011318 <VL53LX_WrByte>
 800ee82:	4603      	mov	r3, r0
 800ee84:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53LX_ERROR_NONE)
 800ee86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d107      	bne.n	800ee9e <VL53LX_nvm_read+0x52>
			status = VL53LX_WrByte(
 800ee8e:	2200      	movs	r2, #0
 800ee90:	f240 7183 	movw	r1, #1923	; 0x783
 800ee94:	68f8      	ldr	r0, [r7, #12]
 800ee96:	f002 fa3f 	bl	8011318 <VL53LX_WrByte>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53LX_ERROR_NONE)
 800ee9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d105      	bne.n	800eeb2 <VL53LX_nvm_read+0x66>
			status = VL53LX_WaitUs(
 800eea6:	2105      	movs	r1, #5
 800eea8:	68f8      	ldr	r0, [r7, #12]
 800eeaa:	f002 fb29 	bl	8011500 <VL53LX_WaitUs>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53LX_ERROR_NONE)
 800eeb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d107      	bne.n	800eeca <VL53LX_nvm_read+0x7e>
			status = VL53LX_WrByte(
 800eeba:	2201      	movs	r2, #1
 800eebc:	f240 7183 	movw	r1, #1923	; 0x783
 800eec0:	68f8      	ldr	r0, [r7, #12]
 800eec2:	f002 fa29 	bl	8011318 <VL53LX_WrByte>
 800eec6:	4603      	mov	r3, r0
 800eec8:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53LX_ERROR_NONE)
 800eeca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d108      	bne.n	800eee4 <VL53LX_nvm_read+0x98>
			status = VL53LX_ReadMulti(
 800eed2:	2304      	movs	r3, #4
 800eed4:	687a      	ldr	r2, [r7, #4]
 800eed6:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 800eeda:	68f8      	ldr	r0, [r7, #12]
 800eedc:	f002 f9e6 	bl	80112ac <VL53LX_ReadMulti>
 800eee0:	4603      	mov	r3, r0
 800eee2:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	3304      	adds	r3, #4
 800eee8:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 800eeea:	7dbb      	ldrb	r3, [r7, #22]
 800eeec:	3301      	adds	r3, #1
 800eeee:	75bb      	strb	r3, [r7, #22]
 800eef0:	7dba      	ldrb	r2, [r7, #22]
 800eef2:	7af9      	ldrb	r1, [r7, #11]
 800eef4:	7abb      	ldrb	r3, [r7, #10]
 800eef6:	440b      	add	r3, r1
	for (nvm_addr = start_address;
 800eef8:	429a      	cmp	r2, r3
 800eefa:	dbb7      	blt.n	800ee6c <VL53LX_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 800eefc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	3718      	adds	r7, #24
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}

0800ef08 <VL53LX_nvm_disable>:


VL53LX_Error VL53LX_nvm_disable(
	VL53LX_DEV    Dev)
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b084      	sub	sp, #16
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ef10:	2300      	movs	r3, #0
 800ef12:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800ef14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d107      	bne.n	800ef2c <VL53LX_nvm_disable+0x24>
		status = VL53LX_WrByte(
 800ef1c:	2201      	movs	r2, #1
 800ef1e:	f240 7183 	movw	r1, #1923	; 0x783
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f002 f9f8 	bl	8011318 <VL53LX_WrByte>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800ef2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d107      	bne.n	800ef44 <VL53LX_nvm_disable+0x3c>
		status = VL53LX_WrByte(
 800ef34:	2200      	movs	r2, #0
 800ef36:	f240 7181 	movw	r1, #1921	; 0x781
 800ef3a:	6878      	ldr	r0, [r7, #4]
 800ef3c:	f002 f9ec 	bl	8011318 <VL53LX_WrByte>
 800ef40:	4603      	mov	r3, r0
 800ef42:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53LX_ERROR_NONE)
 800ef44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d104      	bne.n	800ef56 <VL53LX_nvm_disable+0x4e>
		status = VL53LX_disable_powerforce(Dev);
 800ef4c:	6878      	ldr	r0, [r7, #4]
 800ef4e:	f7f9 fdf2 	bl	8008b36 <VL53LX_disable_powerforce>
 800ef52:	4603      	mov	r3, r0
 800ef54:	73fb      	strb	r3, [r7, #15]



	if (status == VL53LX_ERROR_NONE)
 800ef56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d104      	bne.n	800ef68 <VL53LX_nvm_disable+0x60>
		status = VL53LX_enable_firmware(Dev);
 800ef5e:	6878      	ldr	r0, [r7, #4]
 800ef60:	f7f9 fd94 	bl	8008a8c <VL53LX_enable_firmware>
 800ef64:	4603      	mov	r3, r0
 800ef66:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800ef68:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	3710      	adds	r7, #16
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}

0800ef74 <VL53LX_nvm_decode_optical_centre>:

VL53LX_Error VL53LX_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_optical_centre_t    *pdata)
{
 800ef74:	b480      	push	{r7}
 800ef76:	b087      	sub	sp, #28
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	60b9      	str	r1, [r7, #8]
 800ef7e:	607a      	str	r2, [r7, #4]
 800ef80:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800ef82:	2300      	movs	r3, #0
 800ef84:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 800ef86:	2300      	movs	r3, #0
 800ef88:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53LX_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 800ef8a:	89fb      	ldrh	r3, [r7, #14]
 800ef8c:	2b03      	cmp	r3, #3
 800ef8e:	d802      	bhi.n	800ef96 <VL53LX_nvm_decode_optical_centre+0x22>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800ef90:	f06f 0308 	mvn.w	r3, #8
 800ef94:	e018      	b.n	800efc8 <VL53LX_nvm_decode_optical_centre+0x54>


	tmp  = 0x0100;
 800ef96:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ef9a:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	3302      	adds	r3, #2
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	b29b      	uxth	r3, r3
 800efa4:	8afa      	ldrh	r2, [r7, #22]
 800efa6:	1ad3      	subs	r3, r2, r3
 800efa8:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 800efaa:	8afb      	ldrh	r3, [r7, #22]
 800efac:	2bff      	cmp	r3, #255	; 0xff
 800efae:	d901      	bls.n	800efb4 <VL53LX_nvm_decode_optical_centre+0x40>
		tmp = 0;
 800efb0:	2300      	movs	r3, #0
 800efb2:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 800efb4:	8afb      	ldrh	r3, [r7, #22]
 800efb6:	b2da      	uxtb	r2, r3
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	78da      	ldrb	r2, [r3, #3]
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	705a      	strb	r2, [r3, #1]

	return status;
 800efc4:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800efc8:	4618      	mov	r0, r3
 800efca:	371c      	adds	r7, #28
 800efcc:	46bd      	mov	sp, r7
 800efce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd2:	4770      	bx	lr

0800efd4 <VL53LX_nvm_decode_cal_peak_rate_map>:

VL53LX_Error VL53LX_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_cal_peak_rate_map_t *pdata)
{
 800efd4:	b590      	push	{r4, r7, lr}
 800efd6:	b087      	sub	sp, #28
 800efd8:	af00      	add	r7, sp, #0
 800efda:	4603      	mov	r3, r0
 800efdc:	60b9      	str	r1, [r7, #8]
 800efde:	607a      	str	r2, [r7, #4]
 800efe0:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800efe2:	2300      	movs	r3, #0
 800efe4:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 800efe6:	2300      	movs	r3, #0
 800efe8:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 800efea:	2300      	movs	r3, #0
 800efec:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53LX_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 800efee:	89fb      	ldrh	r3, [r7, #14]
 800eff0:	2b37      	cmp	r3, #55	; 0x37
 800eff2:	d802      	bhi.n	800effa <VL53LX_nvm_decode_cal_peak_rate_map+0x26>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800eff4:	f06f 0308 	mvn.w	r3, #8
 800eff8:	e03e      	b.n	800f078 <VL53LX_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800effa:	68b9      	ldr	r1, [r7, #8]
 800effc:	2002      	movs	r0, #2
 800effe:	f7f9 fc2b 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800f002:	4603      	mov	r3, r0
 800f004:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800f00a:	68bb      	ldr	r3, [r7, #8]
 800f00c:	3302      	adds	r3, #2
 800f00e:	4619      	mov	r1, r3
 800f010:	2002      	movs	r0, #2
 800f012:	f7f9 fc21 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800f016:	4603      	mov	r3, r0
 800f018:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 800f022:	099b      	lsrs	r3, r3, #6
 800f024:	b29a      	uxth	r2, r3
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53LX_NVM_PEAK_RATE_MAP_SAMPLES;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	2219      	movs	r2, #25
 800f02e:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53LX_NVM_PEAK_RATE_MAP_WIDTH;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2205      	movs	r2, #5
 800f034:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53LX_NVM_PEAK_RATE_MAP_HEIGHT;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2205      	movs	r2, #5
 800f03a:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	3304      	adds	r3, #4
 800f040:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800f042:	2300      	movs	r3, #0
 800f044:	74fb      	strb	r3, [r7, #19]
 800f046:	e012      	b.n	800f06e <VL53LX_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 800f048:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53LX_i2c_decode_uint16_t(2, ptmp);
 800f04a:	6979      	ldr	r1, [r7, #20]
 800f04c:	2002      	movs	r0, #2
 800f04e:	f7f9 fc03 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800f052:	4603      	mov	r3, r0
 800f054:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 800f056:	687a      	ldr	r2, [r7, #4]
 800f058:	1d23      	adds	r3, r4, #4
 800f05a:	005b      	lsls	r3, r3, #1
 800f05c:	4413      	add	r3, r2
 800f05e:	460a      	mov	r2, r1
 800f060:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 800f062:	697b      	ldr	r3, [r7, #20]
 800f064:	3302      	adds	r3, #2
 800f066:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800f068:	7cfb      	ldrb	r3, [r7, #19]
 800f06a:	3301      	adds	r3, #1
 800f06c:	74fb      	strb	r3, [r7, #19]
 800f06e:	7cfb      	ldrb	r3, [r7, #19]
 800f070:	2b18      	cmp	r3, #24
 800f072:	d9e9      	bls.n	800f048 <VL53LX_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 800f074:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800f078:	4618      	mov	r0, r3
 800f07a:	371c      	adds	r7, #28
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd90      	pop	{r4, r7, pc}

0800f080 <VL53LX_nvm_decode_additional_offset_cal_data>:

VL53LX_Error VL53LX_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_additional_offset_cal_data_t *pdata)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b086      	sub	sp, #24
 800f084:	af00      	add	r7, sp, #0
 800f086:	4603      	mov	r3, r0
 800f088:	60b9      	str	r1, [r7, #8]
 800f08a:	607a      	str	r2, [r7, #4]
 800f08c:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800f08e:	2300      	movs	r3, #0
 800f090:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 800f092:	89fb      	ldrh	r3, [r7, #14]
 800f094:	2b07      	cmp	r3, #7
 800f096:	d802      	bhi.n	800f09e <VL53LX_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800f098:	f06f 0308 	mvn.w	r3, #8
 800f09c:	e027      	b.n	800f0ee <VL53LX_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800f09e:	68b9      	ldr	r1, [r7, #8]
 800f0a0:	2002      	movs	r0, #2
 800f0a2:	f7f9 fbd9 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800f0ae:	68bb      	ldr	r3, [r7, #8]
 800f0b0:	3302      	adds	r3, #2
 800f0b2:	4619      	mov	r1, r3
 800f0b4:	2002      	movs	r0, #2
 800f0b6:	f7f9 fbcf 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	3304      	adds	r3, #4
 800f0c6:	4619      	mov	r1, r3
 800f0c8:	2002      	movs	r0, #2
 800f0ca:	f7f9 fbc5 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	3306      	adds	r3, #6
 800f0da:	4619      	mov	r1, r3
 800f0dc:	2002      	movs	r0, #2
 800f0de:	f7f9 fbbb 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	80da      	strh	r2, [r3, #6]

	return status;
 800f0ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	3718      	adds	r7, #24
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}

0800f0f6 <VL53LX_nvm_decode_fmt_range_results_data>:

VL53LX_Error VL53LX_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_decoded_nvm_fmt_range_data_t *pdata)
{
 800f0f6:	b580      	push	{r7, lr}
 800f0f8:	b086      	sub	sp, #24
 800f0fa:	af00      	add	r7, sp, #0
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	60b9      	str	r1, [r7, #8]
 800f100:	607a      	str	r2, [r7, #4]
 800f102:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800f104:	2300      	movs	r3, #0
 800f106:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 800f108:	89fb      	ldrh	r3, [r7, #14]
 800f10a:	2b0f      	cmp	r3, #15
 800f10c:	d802      	bhi.n	800f114 <VL53LX_nvm_decode_fmt_range_results_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800f10e:	f06f 0308 	mvn.w	r3, #8
 800f112:	e04d      	b.n	800f1b0 <VL53LX_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800f114:	68b9      	ldr	r1, [r7, #8]
 800f116:	2002      	movs	r0, #2
 800f118:	f7f9 fb9e 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800f11c:	4603      	mov	r3, r0
 800f11e:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	789a      	ldrb	r2, [r3, #2]
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	78da      	ldrb	r2, [r3, #3]
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	3304      	adds	r3, #4
 800f138:	4619      	mov	r1, r3
 800f13a:	2002      	movs	r0, #2
 800f13c:	f7f9 fb8c 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800f140:	4603      	mov	r3, r0
 800f142:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800f148:	68bb      	ldr	r3, [r7, #8]
 800f14a:	3306      	adds	r3, #6
 800f14c:	4619      	mov	r1, r3
 800f14e:	2002      	movs	r0, #2
 800f150:	f7f9 fb82 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800f154:	4603      	mov	r3, r0
 800f156:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 8);
 800f15c:	68bb      	ldr	r3, [r7, #8]
 800f15e:	3308      	adds	r3, #8
 800f160:	4619      	mov	r1, r3
 800f162:	2002      	movs	r0, #2
 800f164:	f7f9 fb78 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800f168:	4603      	mov	r3, r0
 800f16a:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 10);
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	330a      	adds	r3, #10
 800f174:	4619      	mov	r1, r3
 800f176:	2002      	movs	r0, #2
 800f178:	f7f9 fb6e 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800f17c:	4603      	mov	r3, r0
 800f17e:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 12);
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	330c      	adds	r3, #12
 800f188:	4619      	mov	r1, r3
 800f18a:	2002      	movs	r0, #2
 800f18c:	f7f9 fb64 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800f190:	4603      	mov	r3, r0
 800f192:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 14);
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	330e      	adds	r3, #14
 800f19c:	4619      	mov	r1, r3
 800f19e:	2002      	movs	r0, #2
 800f1a0:	f7f9 fb5a 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	81da      	strh	r2, [r3, #14]

	return status;
 800f1ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	3718      	adds	r7, #24
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd80      	pop	{r7, pc}

0800f1b8 <VL53LX_read_nvm_raw_data>:
VL53LX_Error VL53LX_read_nvm_raw_data(
	VL53LX_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b086      	sub	sp, #24
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	60f8      	str	r0, [r7, #12]
 800f1c0:	607b      	str	r3, [r7, #4]
 800f1c2:	460b      	mov	r3, r1
 800f1c4:	72fb      	strb	r3, [r7, #11]
 800f1c6:	4613      	mov	r3, r2
 800f1c8:	72bb      	strb	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 800f1ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d106      	bne.n	800f1e4 <VL53LX_read_nvm_raw_data+0x2c>
		status = VL53LX_nvm_enable(
 800f1d6:	2232      	movs	r2, #50	; 0x32
 800f1d8:	2104      	movs	r1, #4
 800f1da:	68f8      	ldr	r0, [r7, #12]
 800f1dc:	f7ff fdd0 	bl	800ed80 <VL53LX_nvm_enable>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53LX_NVM_POWER_UP_DELAY_US);



	if (status == VL53LX_ERROR_NONE)
 800f1e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d107      	bne.n	800f1fc <VL53LX_read_nvm_raw_data+0x44>
		status = VL53LX_nvm_read(
 800f1ec:	7aba      	ldrb	r2, [r7, #10]
 800f1ee:	7af9      	ldrb	r1, [r7, #11]
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	68f8      	ldr	r0, [r7, #12]
 800f1f4:	f7ff fe2a 	bl	800ee4c <VL53LX_nvm_read>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53LX_ERROR_NONE)
 800f1fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d104      	bne.n	800f20e <VL53LX_read_nvm_raw_data+0x56>
		status = VL53LX_nvm_disable(Dev);
 800f204:	68f8      	ldr	r0, [r7, #12]
 800f206:	f7ff fe7f 	bl	800ef08 <VL53LX_nvm_disable>
 800f20a:	4603      	mov	r3, r0
 800f20c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 800f20e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800f212:	4618      	mov	r0, r3
 800f214:	3718      	adds	r7, #24
 800f216:	46bd      	mov	sp, r7
 800f218:	bd80      	pop	{r7, pc}

0800f21a <VL53LX_read_nvm_optical_centre>:


VL53LX_Error VL53LX_read_nvm_optical_centre(
	VL53LX_DEV                        Dev,
	VL53LX_optical_centre_t          *pcentre)
{
 800f21a:	b580      	push	{r7, lr}
 800f21c:	b084      	sub	sp, #16
 800f21e:	af00      	add	r7, sp, #0
 800f220:	6078      	str	r0, [r7, #4]
 800f222:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f224:	2300      	movs	r3, #0
 800f226:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800f228:	f107 0308 	add.w	r3, r7, #8
 800f22c:	2201      	movs	r2, #1
 800f22e:	212e      	movs	r1, #46	; 0x2e
 800f230:	6878      	ldr	r0, [r7, #4]
 800f232:	f7ff ffc1 	bl	800f1b8 <VL53LX_read_nvm_raw_data>
 800f236:	4603      	mov	r3, r0
 800f238:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f23a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d108      	bne.n	800f254 <VL53LX_read_nvm_optical_centre+0x3a>
		status =
			VL53LX_nvm_decode_optical_centre(
 800f242:	f107 0308 	add.w	r3, r7, #8
 800f246:	683a      	ldr	r2, [r7, #0]
 800f248:	4619      	mov	r1, r3
 800f24a:	2004      	movs	r0, #4
 800f24c:	f7ff fe92 	bl	800ef74 <VL53LX_nvm_decode_optical_centre>
 800f250:	4603      	mov	r3, r0
 800f252:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 800f254:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f258:	4618      	mov	r0, r3
 800f25a:	3710      	adds	r7, #16
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd80      	pop	{r7, pc}

0800f260 <VL53LX_read_nvm_cal_peak_rate_map>:


VL53LX_Error VL53LX_read_nvm_cal_peak_rate_map(
	VL53LX_DEV                           Dev,
	VL53LX_cal_peak_rate_map_t          *pcal_data)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b092      	sub	sp, #72	; 0x48
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
 800f268:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f26a:	2300      	movs	r3, #0
 800f26c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800f270:	f107 030c 	add.w	r3, r7, #12
 800f274:	220e      	movs	r2, #14
 800f276:	2157      	movs	r1, #87	; 0x57
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f7ff ff9d 	bl	800f1b8 <VL53LX_read_nvm_raw_data>
 800f27e:	4603      	mov	r3, r0
 800f280:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f284:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d109      	bne.n	800f2a0 <VL53LX_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53LX_nvm_decode_cal_peak_rate_map(
 800f28c:	f107 030c 	add.w	r3, r7, #12
 800f290:	683a      	ldr	r2, [r7, #0]
 800f292:	4619      	mov	r1, r3
 800f294:	2038      	movs	r0, #56	; 0x38
 800f296:	f7ff fe9d 	bl	800efd4 <VL53LX_nvm_decode_cal_peak_rate_map>
 800f29a:	4603      	mov	r3, r0
 800f29c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800f2a0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	3748      	adds	r7, #72	; 0x48
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd80      	pop	{r7, pc}

0800f2ac <VL53LX_read_nvm_additional_offset_cal_data>:


VL53LX_Error VL53LX_read_nvm_additional_offset_cal_data(
	VL53LX_DEV                           Dev,
	VL53LX_additional_offset_cal_data_t *pcal_data)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b086      	sub	sp, #24
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
 800f2b4:	6039      	str	r1, [r7, #0]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800f2ba:	f107 030c 	add.w	r3, r7, #12
 800f2be:	2202      	movs	r2, #2
 800f2c0:	2165      	movs	r1, #101	; 0x65
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	f7ff ff78 	bl	800f1b8 <VL53LX_read_nvm_raw_data>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	75fb      	strb	r3, [r7, #23]
			VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f2cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d108      	bne.n	800f2e6 <VL53LX_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53LX_nvm_decode_additional_offset_cal_data(
 800f2d4:	f107 030c 	add.w	r3, r7, #12
 800f2d8:	683a      	ldr	r2, [r7, #0]
 800f2da:	4619      	mov	r1, r3
 800f2dc:	2008      	movs	r0, #8
 800f2de:	f7ff fecf 	bl	800f080 <VL53LX_nvm_decode_additional_offset_cal_data>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800f2e6:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	3718      	adds	r7, #24
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd80      	pop	{r7, pc}

0800f2f2 <VL53LX_read_nvm_fmt_range_results_data>:

VL53LX_Error VL53LX_read_nvm_fmt_range_results_data(
	VL53LX_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53LX_decoded_nvm_fmt_range_data_t *prange_data)
{
 800f2f2:	b580      	push	{r7, lr}
 800f2f4:	b08a      	sub	sp, #40	; 0x28
 800f2f6:	af00      	add	r7, sp, #0
 800f2f8:	60f8      	str	r0, [r7, #12]
 800f2fa:	460b      	mov	r3, r1
 800f2fc:	607a      	str	r2, [r7, #4]
 800f2fe:	817b      	strh	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f300:	2300      	movs	r3, #0
 800f302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	LOG_FUNCTION_START("");



	status = VL53LX_read_nvm_raw_data(
 800f306:	897b      	ldrh	r3, [r7, #10]
 800f308:	089b      	lsrs	r3, r3, #2
 800f30a:	b29b      	uxth	r3, r3
 800f30c:	b2d9      	uxtb	r1, r3
 800f30e:	f107 0314 	add.w	r3, r7, #20
 800f312:	2204      	movs	r2, #4
 800f314:	68f8      	ldr	r0, [r7, #12]
 800f316:	f7ff ff4f 	bl	800f1b8 <VL53LX_read_nvm_raw_data>
 800f31a:	4603      	mov	r3, r0
 800f31c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		(uint8_t)(VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f320:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f324:	2b00      	cmp	r3, #0
 800f326:	d109      	bne.n	800f33c <VL53LX_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53LX_nvm_decode_fmt_range_results_data(
 800f328:	f107 0314 	add.w	r3, r7, #20
 800f32c:	687a      	ldr	r2, [r7, #4]
 800f32e:	4619      	mov	r1, r3
 800f330:	2010      	movs	r0, #16
 800f332:	f7ff fee0 	bl	800f0f6 <VL53LX_nvm_decode_fmt_range_results_data>
 800f336:	4603      	mov	r3, r0
 800f338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 800f33c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 800f340:	4618      	mov	r0, r3
 800f342:	3728      	adds	r7, #40	; 0x28
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}

0800f348 <VL53LX_i2c_encode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_static_nvm_managed(
	VL53LX_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b086      	sub	sp, #24
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	60f8      	str	r0, [r7, #12]
 800f350:	460b      	mov	r3, r1
 800f352:	607a      	str	r2, [r7, #4]
 800f354:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f356:	2300      	movs	r3, #0
 800f358:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800f35a:	897b      	ldrh	r3, [r7, #10]
 800f35c:	2b0a      	cmp	r3, #10
 800f35e:	d802      	bhi.n	800f366 <VL53LX_i2c_encode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f360:	f06f 0309 	mvn.w	r3, #9
 800f364:	e047      	b.n	800f3f6 <VL53LX_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	781b      	ldrb	r3, [r3, #0]
 800f36a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f36e:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800f37c:	f002 020f 	and.w	r2, r2, #15
 800f380:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800f382:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800f38c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f390:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f392:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800f39c:	f002 0203 	and.w	r2, r2, #3
 800f3a0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f3a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800f3ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f3b0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f3b2:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	88d8      	ldrh	r0, [r3, #6]
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	3305      	adds	r3, #5
 800f3bc:	461a      	mov	r2, r3
 800f3be:	2102      	movs	r1, #2
 800f3c0:	f7f9 fa1f 	bl	8008802 <VL53LX_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800f3c8:	68fa      	ldr	r2, [r7, #12]
 800f3ca:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800f3cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800f3d2:	68fa      	ldr	r2, [r7, #12]
 800f3d4:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800f3d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800f3e0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f3e4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f3e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800f3ec:	68fa      	ldr	r2, [r7, #12]
 800f3ee:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800f3f0:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f3f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	3718      	adds	r7, #24
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}

0800f3fe <VL53LX_i2c_decode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800f3fe:	b580      	push	{r7, lr}
 800f400:	b086      	sub	sp, #24
 800f402:	af00      	add	r7, sp, #0
 800f404:	4603      	mov	r3, r0
 800f406:	60b9      	str	r1, [r7, #8]
 800f408:	607a      	str	r2, [r7, #4]
 800f40a:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f40c:	2300      	movs	r3, #0
 800f40e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800f410:	89fb      	ldrh	r3, [r7, #14]
 800f412:	2b0a      	cmp	r3, #10
 800f414:	d802      	bhi.n	800f41c <VL53LX_i2c_decode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f416:	f06f 0309 	mvn.w	r3, #9
 800f41a:	e046      	b.n	800f4aa <VL53LX_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	781b      	ldrb	r3, [r3, #0]
 800f420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f424:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800f42a:	68bb      	ldr	r3, [r7, #8]
 800f42c:	3301      	adds	r3, #1
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	f003 030f 	and.w	r3, r3, #15
 800f434:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	3302      	adds	r3, #2
 800f43e:	781b      	ldrb	r3, [r3, #0]
 800f440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f444:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	3303      	adds	r3, #3
 800f44e:	781b      	ldrb	r3, [r3, #0]
 800f450:	f003 0303 	and.w	r3, r3, #3
 800f454:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800f45a:	68bb      	ldr	r3, [r7, #8]
 800f45c:	3304      	adds	r3, #4
 800f45e:	781b      	ldrb	r3, [r3, #0]
 800f460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f464:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   5));
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	3305      	adds	r3, #5
 800f46e:	4619      	mov	r1, r3
 800f470:	2002      	movs	r0, #2
 800f472:	f7f9 f9f1 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800f476:	4603      	mov	r3, r0
 800f478:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	79da      	ldrb	r2, [r3, #7]
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	7a1a      	ldrb	r2, [r3, #8]
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	3309      	adds	r3, #9
 800f492:	781b      	ldrb	r3, [r3, #0]
 800f494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f498:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	7a9a      	ldrb	r2, [r3, #10]
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800f4a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	3718      	adds	r7, #24
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	bd80      	pop	{r7, pc}

0800f4b2 <VL53LX_get_static_nvm_managed>:


VL53LX_Error VL53LX_get_static_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800f4b2:	b580      	push	{r7, lr}
 800f4b4:	b086      	sub	sp, #24
 800f4b6:	af00      	add	r7, sp, #0
 800f4b8:	6078      	str	r0, [r7, #4]
 800f4ba:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f4c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d108      	bne.n	800f4da <VL53LX_get_static_nvm_managed+0x28>
		status = VL53LX_ReadMulti(
 800f4c8:	f107 020c 	add.w	r2, r7, #12
 800f4cc:	230b      	movs	r3, #11
 800f4ce:	2101      	movs	r1, #1
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	f001 feeb 	bl	80112ac <VL53LX_ReadMulti>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800f4da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d108      	bne.n	800f4f4 <VL53LX_get_static_nvm_managed+0x42>
		status = VL53LX_i2c_decode_static_nvm_managed(
 800f4e2:	f107 030c 	add.w	r3, r7, #12
 800f4e6:	683a      	ldr	r2, [r7, #0]
 800f4e8:	4619      	mov	r1, r3
 800f4ea:	200b      	movs	r0, #11
 800f4ec:	f7ff ff87 	bl	800f3fe <VL53LX_i2c_decode_static_nvm_managed>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800f4f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	3718      	adds	r7, #24
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}

0800f500 <VL53LX_i2c_encode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_customer_nvm_managed(
	VL53LX_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b086      	sub	sp, #24
 800f504:	af00      	add	r7, sp, #0
 800f506:	60f8      	str	r0, [r7, #12]
 800f508:	460b      	mov	r3, r1
 800f50a:	607a      	str	r2, [r7, #4]
 800f50c:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f50e:	2300      	movs	r3, #0
 800f510:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800f512:	897b      	ldrh	r3, [r7, #10]
 800f514:	2b16      	cmp	r3, #22
 800f516:	d802      	bhi.n	800f51e <VL53LX_i2c_encode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f518:	f06f 0309 	mvn.w	r3, #9
 800f51c:	e076      	b.n	800f60c <VL53LX_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800f52a:	68fa      	ldr	r2, [r7, #12]
 800f52c:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800f52e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800f534:	68fa      	ldr	r2, [r7, #12]
 800f536:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800f538:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800f53e:	68fa      	ldr	r2, [r7, #12]
 800f540:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800f542:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800f548:	68fa      	ldr	r2, [r7, #12]
 800f54a:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800f54c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800f556:	f002 020f 	and.w	r2, r2, #15
 800f55a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f55c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800f562:	68fa      	ldr	r2, [r7, #12]
 800f564:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800f566:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800f570:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f574:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800f576:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800f580:	f002 0203 	and.w	r2, r2, #3
 800f584:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800f586:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	8958      	ldrh	r0, [r3, #10]
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	3309      	adds	r3, #9
 800f590:	461a      	mov	r2, r3
 800f592:	2102      	movs	r1, #2
 800f594:	f7f9 f935 	bl	8008802 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53LX_i2c_encode_int16_t(
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	330b      	adds	r3, #11
 800f5a2:	461a      	mov	r2, r3
 800f5a4:	2102      	movs	r1, #2
 800f5a6:	f7f9 f977 	bl	8008898 <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53LX_i2c_encode_int16_t(
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	330d      	adds	r3, #13
 800f5b4:	461a      	mov	r2, r3
 800f5b6:	2102      	movs	r1, #2
 800f5b8:	f7f9 f96e 	bl	8008898 <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53LX_i2c_encode_uint16_t(
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	8a18      	ldrh	r0, [r3, #16]
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	330f      	adds	r3, #15
 800f5c4:	461a      	mov	r2, r3
 800f5c6:	2102      	movs	r1, #2
 800f5c8:	f7f9 f91b 	bl	8008802 <VL53LX_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53LX_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53LX_i2c_encode_int16_t(
 800f5d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f5d6:	b218      	sxth	r0, r3
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	3311      	adds	r3, #17
 800f5dc:	461a      	mov	r2, r3
 800f5de:	2102      	movs	r1, #2
 800f5e0:	f7f9 f95a 	bl	8008898 <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53LX_i2c_encode_int16_t(
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	3313      	adds	r3, #19
 800f5ee:	461a      	mov	r2, r3
 800f5f0:	2102      	movs	r1, #2
 800f5f2:	f7f9 f951 	bl	8008898 <VL53LX_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53LX_i2c_encode_int16_t(
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	3315      	adds	r3, #21
 800f600:	461a      	mov	r2, r3
 800f602:	2102      	movs	r1, #2
 800f604:	f7f9 f948 	bl	8008898 <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800f608:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f60c:	4618      	mov	r0, r3
 800f60e:	3718      	adds	r7, #24
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}

0800f614 <VL53LX_i2c_decode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b086      	sub	sp, #24
 800f618:	af00      	add	r7, sp, #0
 800f61a:	4603      	mov	r3, r0
 800f61c:	60b9      	str	r1, [r7, #8]
 800f61e:	607a      	str	r2, [r7, #4]
 800f620:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f622:	2300      	movs	r3, #0
 800f624:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800f626:	89fb      	ldrh	r3, [r7, #14]
 800f628:	2b16      	cmp	r3, #22
 800f62a:	d802      	bhi.n	800f632 <VL53LX_i2c_decode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f62c:	f06f 0309 	mvn.w	r3, #9
 800f630:	e079      	b.n	800f726 <VL53LX_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800f632:	68bb      	ldr	r3, [r7, #8]
 800f634:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	785a      	ldrb	r2, [r3, #1]
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800f642:	68bb      	ldr	r3, [r7, #8]
 800f644:	789a      	ldrb	r2, [r3, #2]
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800f64a:	68bb      	ldr	r3, [r7, #8]
 800f64c:	78da      	ldrb	r2, [r3, #3]
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	791a      	ldrb	r2, [r3, #4]
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800f65a:	68bb      	ldr	r3, [r7, #8]
 800f65c:	3305      	adds	r3, #5
 800f65e:	781b      	ldrb	r3, [r3, #0]
 800f660:	f003 030f 	and.w	r3, r3, #15
 800f664:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800f66a:	68bb      	ldr	r3, [r7, #8]
 800f66c:	799a      	ldrb	r2, [r3, #6]
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800f672:	68bb      	ldr	r3, [r7, #8]
 800f674:	3307      	adds	r3, #7
 800f676:	781b      	ldrb	r3, [r3, #0]
 800f678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f67c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800f682:	68bb      	ldr	r3, [r7, #8]
 800f684:	3308      	adds	r3, #8
 800f686:	781b      	ldrb	r3, [r3, #0]
 800f688:	f003 0303 	and.w	r3, r3, #3
 800f68c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   9));
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	3309      	adds	r3, #9
 800f696:	4619      	mov	r1, r3
 800f698:	2002      	movs	r0, #2
 800f69a:	f7f9 f8dd 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  11));
 800f6a6:	68bb      	ldr	r3, [r7, #8]
 800f6a8:	330b      	adds	r3, #11
 800f6aa:	4619      	mov	r1, r3
 800f6ac:	2002      	movs	r0, #2
 800f6ae:	f7f9 f91f 	bl	80088f0 <VL53LX_i2c_decode_int16_t>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  13));
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	330d      	adds	r3, #13
 800f6be:	4619      	mov	r1, r3
 800f6c0:	2002      	movs	r0, #2
 800f6c2:	f7f9 f915 	bl	80088f0 <VL53LX_i2c_decode_int16_t>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  15));
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	330f      	adds	r3, #15
 800f6d2:	4619      	mov	r1, r3
 800f6d4:	2002      	movs	r0, #2
 800f6d6:	f7f9 f8bf 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800f6da:	4603      	mov	r3, r0
 800f6dc:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800f6e2:	68bb      	ldr	r3, [r7, #8]
 800f6e4:	3311      	adds	r3, #17
 800f6e6:	4619      	mov	r1, r3
 800f6e8:	2002      	movs	r0, #2
 800f6ea:	f7f9 f901 	bl	80088f0 <VL53LX_i2c_decode_int16_t>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f6f4:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  19));
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	3313      	adds	r3, #19
 800f6fe:	4619      	mov	r1, r3
 800f700:	2002      	movs	r0, #2
 800f702:	f7f9 f8f5 	bl	80088f0 <VL53LX_i2c_decode_int16_t>
 800f706:	4603      	mov	r3, r0
 800f708:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  21));
 800f70e:	68bb      	ldr	r3, [r7, #8]
 800f710:	3315      	adds	r3, #21
 800f712:	4619      	mov	r1, r3
 800f714:	2002      	movs	r0, #2
 800f716:	f7f9 f8eb 	bl	80088f0 <VL53LX_i2c_decode_int16_t>
 800f71a:	4603      	mov	r3, r0
 800f71c:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800f722:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f726:	4618      	mov	r0, r3
 800f728:	3718      	adds	r7, #24
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}

0800f72e <VL53LX_get_customer_nvm_managed>:


VL53LX_Error VL53LX_get_customer_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800f72e:	b580      	push	{r7, lr}
 800f730:	b08a      	sub	sp, #40	; 0x28
 800f732:	af00      	add	r7, sp, #0
 800f734:	6078      	str	r0, [r7, #4]
 800f736:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f738:	2300      	movs	r3, #0
 800f73a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t comms_buffer[VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];
	int16_t offset;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f73e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f742:	2b00      	cmp	r3, #0
 800f744:	d109      	bne.n	800f75a <VL53LX_get_customer_nvm_managed+0x2c>
		status = VL53LX_ReadMulti(
 800f746:	f107 020c 	add.w	r2, r7, #12
 800f74a:	2317      	movs	r3, #23
 800f74c:	210d      	movs	r1, #13
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f001 fdac 	bl	80112ac <VL53LX_ReadMulti>
 800f754:	4603      	mov	r3, r0
 800f756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev,
			VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800f75a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d109      	bne.n	800f776 <VL53LX_get_customer_nvm_managed+0x48>
		status = VL53LX_i2c_decode_customer_nvm_managed(
 800f762:	f107 030c 	add.w	r3, r7, #12
 800f766:	683a      	ldr	r2, [r7, #0]
 800f768:	4619      	mov	r1, r3
 800f76a:	2017      	movs	r0, #23
 800f76c:	f7ff ff52 	bl	800f614 <VL53LX_i2c_decode_customer_nvm_managed>
 800f770:	4603      	mov	r3, r0
 800f772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
			comms_buffer,
			pdata);

	if (status == VL53LX_ERROR_NONE) {
 800f776:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d11c      	bne.n	800f7b8 <VL53LX_get_customer_nvm_managed+0x8a>
		offset = pdata->algo__part_to_part_range_offset_mm;
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	8a5b      	ldrh	r3, [r3, #18]
 800f782:	84bb      	strh	r3, [r7, #36]	; 0x24
		offset = offset / 4;
 800f784:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f788:	2b00      	cmp	r3, #0
 800f78a:	da00      	bge.n	800f78e <VL53LX_get_customer_nvm_managed+0x60>
 800f78c:	3303      	adds	r3, #3
 800f78e:	109b      	asrs	r3, r3, #2
 800f790:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (offset >= 1024)
 800f792:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f79a:	db04      	blt.n	800f7a6 <VL53LX_get_customer_nvm_managed+0x78>
			offset -= 2048;
 800f79c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f79e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800f7a2:	b29b      	uxth	r3, r3
 800f7a4:	84bb      	strh	r3, [r7, #36]	; 0x24
		pdata->algo__part_to_part_range_offset_mm = 0;
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	825a      	strh	r2, [r3, #18]
		pdata->mm_config__inner_offset_mm = offset;
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f7b0:	829a      	strh	r2, [r3, #20]
		pdata->mm_config__outer_offset_mm = offset;
 800f7b2:	683b      	ldr	r3, [r7, #0]
 800f7b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f7b6:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800f7b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f7bc:	4618      	mov	r0, r3
 800f7be:	3728      	adds	r7, #40	; 0x28
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd80      	pop	{r7, pc}

0800f7c4 <VL53LX_i2c_encode_static_config>:

VL53LX_Error VL53LX_i2c_encode_static_config(
	VL53LX_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b086      	sub	sp, #24
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	60f8      	str	r0, [r7, #12]
 800f7cc:	460b      	mov	r3, r1
 800f7ce:	607a      	str	r2, [r7, #4]
 800f7d0:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES)
 800f7d6:	897b      	ldrh	r3, [r7, #10]
 800f7d8:	2b1f      	cmp	r3, #31
 800f7da:	d802      	bhi.n	800f7e2 <VL53LX_i2c_encode_static_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f7dc:	f06f 0309 	mvn.w	r3, #9
 800f7e0:	e0cf      	b.n	800f982 <VL53LX_i2c_encode_static_config+0x1be>

	VL53LX_i2c_encode_uint16_t(
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	881b      	ldrh	r3, [r3, #0]
 800f7e6:	687a      	ldr	r2, [r7, #4]
 800f7e8:	2102      	movs	r1, #2
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	f7f9 f809 	bl	8008802 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800f7f8:	f002 0201 	and.w	r2, r2, #1
 800f7fc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f7fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800f808:	f002 020f 	and.w	r2, r2, #15
 800f80c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f80e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800f818:	f002 020f 	and.w	r2, r2, #15
 800f81c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f81e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800f828:	f002 021f 	and.w	r2, r2, #31
 800f82c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f82e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800f838:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f83c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f83e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800f848:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f84c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800f84e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800f858:	f002 0201 	and.w	r2, r2, #1
 800f85c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800f85e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800f864:	68fa      	ldr	r2, [r7, #12]
 800f866:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800f868:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800f872:	f002 0201 	and.w	r2, r2, #1
 800f876:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800f878:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800f882:	f002 0203 	and.w	r2, r2, #3
 800f886:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f888:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800f892:	f002 021f 	and.w	r2, r2, #31
 800f896:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800f898:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800f8a2:	f002 0203 	and.w	r2, r2, #3
 800f8a6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800f8a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800f8b2:	f002 0203 	and.w	r2, r2, #3
 800f8b6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800f8b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800f8c2:	f002 0207 	and.w	r2, r2, #7
 800f8c6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800f8c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800f8d2:	f002 021f 	and.w	r2, r2, #31
 800f8d6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800f8d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800f8e2:	f002 0201 	and.w	r2, r2, #1
 800f8e6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800f8e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800f8ee:	68fa      	ldr	r2, [r7, #12]
 800f8f0:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800f8f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800f8f8:	68fa      	ldr	r2, [r7, #12]
 800f8fa:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800f8fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800f902:	68fa      	ldr	r2, [r7, #12]
 800f904:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800f906:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800f90c:	68fa      	ldr	r2, [r7, #12]
 800f90e:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800f910:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800f916:	68fa      	ldr	r2, [r7, #12]
 800f918:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800f91a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800f920:	68fa      	ldr	r2, [r7, #12]
 800f922:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800f924:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	8b18      	ldrh	r0, [r3, #24]
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	3318      	adds	r3, #24
 800f92e:	461a      	mov	r2, r3
 800f930:	2102      	movs	r1, #2
 800f932:	f7f8 ff66 	bl	8008802 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800f93a:	68fa      	ldr	r2, [r7, #12]
 800f93c:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800f93e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800f944:	68fa      	ldr	r2, [r7, #12]
 800f946:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800f948:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800f952:	f002 020f 	and.w	r2, r2, #15
 800f956:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800f958:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800f95e:	68fa      	ldr	r2, [r7, #12]
 800f960:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800f962:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800f96c:	f002 020f 	and.w	r2, r2, #15
 800f970:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800f972:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800f978:	68fa      	ldr	r2, [r7, #12]
 800f97a:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800f97c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f97e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f982:	4618      	mov	r0, r3
 800f984:	3718      	adds	r7, #24
 800f986:	46bd      	mov	sp, r7
 800f988:	bd80      	pop	{r7, pc}

0800f98a <VL53LX_i2c_encode_general_config>:

VL53LX_Error VL53LX_i2c_encode_general_config(
	VL53LX_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f98a:	b580      	push	{r7, lr}
 800f98c:	b086      	sub	sp, #24
 800f98e:	af00      	add	r7, sp, #0
 800f990:	60f8      	str	r0, [r7, #12]
 800f992:	460b      	mov	r3, r1
 800f994:	607a      	str	r2, [r7, #4]
 800f996:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f998:	2300      	movs	r3, #0
 800f99a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES)
 800f99c:	897b      	ldrh	r3, [r7, #10]
 800f99e:	2b15      	cmp	r3, #21
 800f9a0:	d802      	bhi.n	800f9a8 <VL53LX_i2c_encode_general_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f9a2:	f06f 0309 	mvn.w	r3, #9
 800f9a6:	e070      	b.n	800fa8a <VL53LX_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800f9b4:	68fa      	ldr	r2, [r7, #12]
 800f9b6:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800f9b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800f9be:	68fa      	ldr	r2, [r7, #12]
 800f9c0:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800f9c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800f9cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f9d0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f9d2:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	889b      	ldrh	r3, [r3, #4]
	VL53LX_i2c_encode_uint16_t(
 800f9d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f9dc:	b298      	uxth	r0, r3
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	3304      	adds	r3, #4
 800f9e2:	461a      	mov	r2, r3
 800f9e4:	2102      	movs	r1, #2
 800f9e6:	f7f8 ff0c 	bl	8008802 <VL53LX_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800f9f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f9f6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f9f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800f9fe:	68fa      	ldr	r2, [r7, #12]
 800fa00:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800fa02:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800fa08:	68fa      	ldr	r2, [r7, #12]
 800fa0a:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800fa0c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800fa16:	f002 0201 	and.w	r2, r2, #1
 800fa1a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800fa1c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800fa26:	f002 0207 	and.w	r2, r2, #7
 800fa2a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800fa2c:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	8998      	ldrh	r0, [r3, #12]
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	330c      	adds	r3, #12
 800fa36:	461a      	mov	r2, r3
 800fa38:	2102      	movs	r1, #2
 800fa3a:	f7f8 fee2 	bl	8008802 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53LX_i2c_encode_uint16_t(
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	89d8      	ldrh	r0, [r3, #14]
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	330e      	adds	r3, #14
 800fa46:	461a      	mov	r2, r3
 800fa48:	2102      	movs	r1, #2
 800fa4a:	f7f8 feda 	bl	8008802 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53LX_i2c_encode_uint16_t(
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	8a18      	ldrh	r0, [r3, #16]
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	3310      	adds	r3, #16
 800fa56:	461a      	mov	r2, r3
 800fa58:	2102      	movs	r1, #2
 800fa5a:	f7f8 fed2 	bl	8008802 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800fa62:	68fa      	ldr	r2, [r7, #12]
 800fa64:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800fa66:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800fa6c:	68fa      	ldr	r2, [r7, #12]
 800fa6e:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800fa70:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800fa76:	68fa      	ldr	r2, [r7, #12]
 800fa78:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800fa7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800fa80:	68fa      	ldr	r2, [r7, #12]
 800fa82:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800fa84:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800fa86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	3718      	adds	r7, #24
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}

0800fa92 <VL53LX_i2c_encode_timing_config>:

VL53LX_Error VL53LX_i2c_encode_timing_config(
	VL53LX_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800fa92:	b580      	push	{r7, lr}
 800fa94:	b086      	sub	sp, #24
 800fa96:	af00      	add	r7, sp, #0
 800fa98:	60f8      	str	r0, [r7, #12]
 800fa9a:	460b      	mov	r3, r1
 800fa9c:	607a      	str	r2, [r7, #4]
 800fa9e:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800faa0:	2300      	movs	r3, #0
 800faa2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES)
 800faa4:	897b      	ldrh	r3, [r7, #10]
 800faa6:	2b16      	cmp	r3, #22
 800faa8:	d802      	bhi.n	800fab0 <VL53LX_i2c_encode_timing_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800faaa:	f06f 0309 	mvn.w	r3, #9
 800faae:	e06e      	b.n	800fb8e <VL53LX_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	781b      	ldrb	r3, [r3, #0]
 800fab4:	f003 030f 	and.w	r3, r3, #15
 800fab8:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800fac2:	68fa      	ldr	r2, [r7, #12]
 800fac4:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800fac6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800fad0:	f002 020f 	and.w	r2, r2, #15
 800fad4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800fad6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800fadc:	68fa      	ldr	r2, [r7, #12]
 800fade:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800fae0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800faea:	f002 020f 	and.w	r2, r2, #15
 800faee:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800faf0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800faf6:	68fa      	ldr	r2, [r7, #12]
 800faf8:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800fafa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800fb04:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800fb08:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800fb0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800fb14:	f002 020f 	and.w	r2, r2, #15
 800fb18:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800fb1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800fb20:	68fa      	ldr	r2, [r7, #12]
 800fb22:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800fb24:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800fb2e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800fb32:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800fb34:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	8958      	ldrh	r0, [r3, #10]
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	330a      	adds	r3, #10
 800fb3e:	461a      	mov	r2, r3
 800fb40:	2102      	movs	r1, #2
 800fb42:	f7f8 fe5e 	bl	8008802 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53LX_i2c_encode_uint16_t(
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	8998      	ldrh	r0, [r3, #12]
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	330c      	adds	r3, #12
 800fb4e:	461a      	mov	r2, r3
 800fb50:	2102      	movs	r1, #2
 800fb52:	f7f8 fe56 	bl	8008802 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800fb5a:	68fa      	ldr	r2, [r7, #12]
 800fb5c:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800fb5e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800fb64:	68fa      	ldr	r2, [r7, #12]
 800fb66:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800fb68:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint32_t(
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	6918      	ldr	r0, [r3, #16]
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	3312      	adds	r3, #18
 800fb72:	461a      	mov	r2, r3
 800fb74:	2104      	movs	r1, #4
 800fb76:	f7f8 fee4 	bl	8008942 <VL53LX_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800fb82:	f002 0201 	and.w	r2, r2, #1
 800fb86:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800fb88:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800fb8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fb8e:	4618      	mov	r0, r3
 800fb90:	3718      	adds	r7, #24
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd80      	pop	{r7, pc}

0800fb96 <VL53LX_i2c_encode_dynamic_config>:

VL53LX_Error VL53LX_i2c_encode_dynamic_config(
	VL53LX_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800fb96:	b580      	push	{r7, lr}
 800fb98:	b086      	sub	sp, #24
 800fb9a:	af00      	add	r7, sp, #0
 800fb9c:	60f8      	str	r0, [r7, #12]
 800fb9e:	460b      	mov	r3, r1
 800fba0:	607a      	str	r2, [r7, #4]
 800fba2:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fba4:	2300      	movs	r3, #0
 800fba6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 800fba8:	897b      	ldrh	r3, [r7, #10]
 800fbaa:	2b11      	cmp	r3, #17
 800fbac:	d802      	bhi.n	800fbb4 <VL53LX_i2c_encode_dynamic_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fbae:	f06f 0309 	mvn.w	r3, #9
 800fbb2:	e071      	b.n	800fc98 <VL53LX_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	781b      	ldrb	r3, [r3, #0]
 800fbb8:	f003 0303 	and.w	r3, r3, #3
 800fbbc:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	8858      	ldrh	r0, [r3, #2]
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	3301      	adds	r3, #1
 800fbca:	461a      	mov	r2, r3
 800fbcc:	2102      	movs	r1, #2
 800fbce:	f7f8 fe18 	bl	8008802 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53LX_i2c_encode_uint16_t(
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	8898      	ldrh	r0, [r3, #4]
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	3303      	adds	r3, #3
 800fbda:	461a      	mov	r2, r3
 800fbdc:	2102      	movs	r1, #2
 800fbde:	f7f8 fe10 	bl	8008802 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800fbea:	f002 0201 	and.w	r2, r2, #1
 800fbee:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800fbf0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800fbfa:	f002 0207 	and.w	r2, r2, #7
 800fbfe:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800fc00:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800fc06:	68fa      	ldr	r2, [r7, #12]
 800fc08:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800fc0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800fc10:	68fa      	ldr	r2, [r7, #12]
 800fc12:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800fc14:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800fc1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800fc22:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800fc24:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800fc2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800fc32:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800fc34:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800fc3e:	f002 0203 	and.w	r2, r2, #3
 800fc42:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800fc44:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800fc4e:	f002 0203 	and.w	r2, r2, #3
 800fc52:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800fc54:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800fc5e:	f002 020f 	and.w	r2, r2, #15
 800fc62:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800fc64:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800fc6a:	68fa      	ldr	r2, [r7, #12]
 800fc6c:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800fc6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 800fc74:	68fa      	ldr	r2, [r7, #12]
 800fc76:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 800fc78:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800fc7e:	68fa      	ldr	r2, [r7, #12]
 800fc80:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 800fc82:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800fc8c:	f002 0203 	and.w	r2, r2, #3
 800fc90:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800fc92:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800fc94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	3718      	adds	r7, #24
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}

0800fca0 <VL53LX_i2c_encode_system_control>:

VL53LX_Error VL53LX_i2c_encode_system_control(
	VL53LX_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800fca0:	b480      	push	{r7}
 800fca2:	b087      	sub	sp, #28
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	60f8      	str	r0, [r7, #12]
 800fca8:	460b      	mov	r3, r1
 800fcaa:	607a      	str	r2, [r7, #4]
 800fcac:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 800fcb2:	897b      	ldrh	r3, [r7, #10]
 800fcb4:	2b04      	cmp	r3, #4
 800fcb6:	d802      	bhi.n	800fcbe <VL53LX_i2c_encode_system_control+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fcb8:	f06f 0309 	mvn.w	r3, #9
 800fcbc:	e025      	b.n	800fd0a <VL53LX_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	f003 0301 	and.w	r3, r3, #1
 800fcc6:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800fcd4:	f002 0201 	and.w	r2, r2, #1
 800fcd8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800fcda:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800fce4:	f002 0201 	and.w	r2, r2, #1
 800fce8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800fcea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800fcf4:	f002 0203 	and.w	r2, r2, #3
 800fcf8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800fcfa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800fd00:	68fa      	ldr	r2, [r7, #12]
 800fd02:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800fd04:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800fd06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	371c      	adds	r7, #28
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd14:	4770      	bx	lr

0800fd16 <VL53LX_set_system_control>:


VL53LX_Error VL53LX_set_system_control(
	VL53LX_DEV                 Dev,
	VL53LX_system_control_t   *pdata)
{
 800fd16:	b580      	push	{r7, lr}
 800fd18:	b084      	sub	sp, #16
 800fd1a:	af00      	add	r7, sp, #0
 800fd1c:	6078      	str	r0, [r7, #4]
 800fd1e:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fd20:	2300      	movs	r3, #0
 800fd22:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800fd24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d108      	bne.n	800fd3e <VL53LX_set_system_control+0x28>
		status = VL53LX_i2c_encode_system_control(
 800fd2c:	f107 0308 	add.w	r3, r7, #8
 800fd30:	461a      	mov	r2, r3
 800fd32:	2105      	movs	r1, #5
 800fd34:	6838      	ldr	r0, [r7, #0]
 800fd36:	f7ff ffb3 	bl	800fca0 <VL53LX_i2c_encode_system_control>
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53LX_ERROR_NONE)
 800fd3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d108      	bne.n	800fd58 <VL53LX_set_system_control+0x42>
		status = VL53LX_WriteMulti(
 800fd46:	f107 0208 	add.w	r2, r7, #8
 800fd4a:	2305      	movs	r3, #5
 800fd4c:	2183      	movs	r1, #131	; 0x83
 800fd4e:	6878      	ldr	r0, [r7, #4]
 800fd50:	f001 fa76 	bl	8011240 <VL53LX_WriteMulti>
 800fd54:	4603      	mov	r3, r0
 800fd56:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 800fd58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	3710      	adds	r7, #16
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd80      	pop	{r7, pc}

0800fd64 <VL53LX_i2c_decode_system_results>:

VL53LX_Error VL53LX_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_system_results_t   *pdata)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b086      	sub	sp, #24
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	60b9      	str	r1, [r7, #8]
 800fd6e:	607a      	str	r2, [r7, #4]
 800fd70:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fd72:	2300      	movs	r3, #0
 800fd74:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 800fd76:	89fb      	ldrh	r3, [r7, #14]
 800fd78:	2b2b      	cmp	r3, #43	; 0x2b
 800fd7a:	d802      	bhi.n	800fd82 <VL53LX_i2c_decode_system_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fd7c:	f06f 0309 	mvn.w	r3, #9
 800fd80:	e0e2      	b.n	800ff48 <VL53LX_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	781b      	ldrb	r3, [r3, #0]
 800fd86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd8a:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800fd90:	68bb      	ldr	r3, [r7, #8]
 800fd92:	785a      	ldrb	r2, [r3, #1]
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800fd98:	68bb      	ldr	r3, [r7, #8]
 800fd9a:	3302      	adds	r3, #2
 800fd9c:	781b      	ldrb	r3, [r3, #0]
 800fd9e:	f003 030f 	and.w	r3, r3, #15
 800fda2:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800fda8:	68bb      	ldr	r3, [r7, #8]
 800fdaa:	78da      	ldrb	r2, [r3, #3]
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   4));
 800fdb0:	68bb      	ldr	r3, [r7, #8]
 800fdb2:	3304      	adds	r3, #4
 800fdb4:	4619      	mov	r1, r3
 800fdb6:	2002      	movs	r0, #2
 800fdb8:	f7f8 fd4e 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   6));
 800fdc4:	68bb      	ldr	r3, [r7, #8]
 800fdc6:	3306      	adds	r3, #6
 800fdc8:	4619      	mov	r1, r3
 800fdca:	2002      	movs	r0, #2
 800fdcc:	f7f8 fd44 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8));
 800fdd8:	68bb      	ldr	r3, [r7, #8]
 800fdda:	3308      	adds	r3, #8
 800fddc:	4619      	mov	r1, r3
 800fdde:	2002      	movs	r0, #2
 800fde0:	f7f8 fd3a 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800fde4:	4603      	mov	r3, r0
 800fde6:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  10));
 800fdec:	68bb      	ldr	r3, [r7, #8]
 800fdee:	330a      	adds	r3, #10
 800fdf0:	4619      	mov	r1, r3
 800fdf2:	2002      	movs	r0, #2
 800fdf4:	f7f8 fd30 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  12));
 800fe00:	68bb      	ldr	r3, [r7, #8]
 800fe02:	330c      	adds	r3, #12
 800fe04:	4619      	mov	r1, r3
 800fe06:	2002      	movs	r0, #2
 800fe08:	f7f8 fd26 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  14));
 800fe14:	68bb      	ldr	r3, [r7, #8]
 800fe16:	330e      	adds	r3, #14
 800fe18:	4619      	mov	r1, r3
 800fe1a:	2002      	movs	r0, #2
 800fe1c:	f7f8 fd1c 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800fe20:	4603      	mov	r3, r0
 800fe22:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  16));
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	3310      	adds	r3, #16
 800fe2c:	4619      	mov	r1, r3
 800fe2e:	2002      	movs	r0, #2
 800fe30:	f7f8 fd12 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800fe34:	4603      	mov	r3, r0
 800fe36:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18));
 800fe3c:	68bb      	ldr	r3, [r7, #8]
 800fe3e:	3312      	adds	r3, #18
 800fe40:	4619      	mov	r1, r3
 800fe42:	2002      	movs	r0, #2
 800fe44:	f7f8 fd08 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  20));
 800fe50:	68bb      	ldr	r3, [r7, #8]
 800fe52:	3314      	adds	r3, #20
 800fe54:	4619      	mov	r1, r3
 800fe56:	2002      	movs	r0, #2
 800fe58:	f7f8 fcfe 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 800fe64:	68bb      	ldr	r3, [r7, #8]
 800fe66:	3316      	adds	r3, #22
 800fe68:	4619      	mov	r1, r3
 800fe6a:	2002      	movs	r0, #2
 800fe6c:	f7f8 fcf4 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800fe70:	4603      	mov	r3, r0
 800fe72:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 800fe78:	68bb      	ldr	r3, [r7, #8]
 800fe7a:	3318      	adds	r3, #24
 800fe7c:	4619      	mov	r1, r3
 800fe7e:	2002      	movs	r0, #2
 800fe80:	f7f8 fcea 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800fe84:	4603      	mov	r3, r0
 800fe86:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  26));
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	331a      	adds	r3, #26
 800fe90:	4619      	mov	r1, r3
 800fe92:	2002      	movs	r0, #2
 800fe94:	f7f8 fce0 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  28));
 800fea0:	68bb      	ldr	r3, [r7, #8]
 800fea2:	331c      	adds	r3, #28
 800fea4:	4619      	mov	r1, r3
 800fea6:	2002      	movs	r0, #2
 800fea8:	f7f8 fcd6 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800feac:	4603      	mov	r3, r0
 800feae:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  30));
 800feb4:	68bb      	ldr	r3, [r7, #8]
 800feb6:	331e      	adds	r3, #30
 800feb8:	4619      	mov	r1, r3
 800feba:	2002      	movs	r0, #2
 800febc:	f7f8 fccc 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800fec0:	4603      	mov	r3, r0
 800fec2:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  32));
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	3320      	adds	r3, #32
 800fecc:	4619      	mov	r1, r3
 800fece:	2002      	movs	r0, #2
 800fed0:	f7f8 fcc2 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800fed4:	4603      	mov	r3, r0
 800fed6:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  34));
 800fedc:	68bb      	ldr	r3, [r7, #8]
 800fede:	3322      	adds	r3, #34	; 0x22
 800fee0:	4619      	mov	r1, r3
 800fee2:	2002      	movs	r0, #2
 800fee4:	f7f8 fcb8 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800fee8:	4603      	mov	r3, r0
 800feea:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  36));
 800fef0:	68bb      	ldr	r3, [r7, #8]
 800fef2:	3324      	adds	r3, #36	; 0x24
 800fef4:	4619      	mov	r1, r3
 800fef6:	2002      	movs	r0, #2
 800fef8:	f7f8 fcae 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800fefc:	4603      	mov	r3, r0
 800fefe:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  38));
 800ff04:	68bb      	ldr	r3, [r7, #8]
 800ff06:	3326      	adds	r3, #38	; 0x26
 800ff08:	4619      	mov	r1, r3
 800ff0a:	2002      	movs	r0, #2
 800ff0c:	f7f8 fca4 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800ff10:	4603      	mov	r3, r0
 800ff12:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  40));
 800ff18:	68bb      	ldr	r3, [r7, #8]
 800ff1a:	3328      	adds	r3, #40	; 0x28
 800ff1c:	4619      	mov	r1, r3
 800ff1e:	2002      	movs	r0, #2
 800ff20:	f7f8 fc9a 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 800ff24:	4603      	mov	r3, r0
 800ff26:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800ff2c:	68bb      	ldr	r3, [r7, #8]
 800ff2e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800ff38:	68bb      	ldr	r3, [r7, #8]
 800ff3a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800ff44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff48:	4618      	mov	r0, r3
 800ff4a:	3718      	adds	r7, #24
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}

0800ff50 <VL53LX_i2c_decode_core_results>:

VL53LX_Error VL53LX_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_core_results_t     *pdata)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b086      	sub	sp, #24
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	4603      	mov	r3, r0
 800ff58:	60b9      	str	r1, [r7, #8]
 800ff5a:	607a      	str	r2, [r7, #4]
 800ff5c:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CORE_RESULTS_I2C_SIZE_BYTES)
 800ff62:	89fb      	ldrh	r3, [r7, #14]
 800ff64:	2b20      	cmp	r3, #32
 800ff66:	d802      	bhi.n	800ff6e <VL53LX_i2c_decode_core_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ff68:	f06f 0309 	mvn.w	r3, #9
 800ff6c:	e04d      	b.n	801000a <VL53LX_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   0));
 800ff6e:	68b9      	ldr	r1, [r7, #8]
 800ff70:	2004      	movs	r0, #4
 800ff72:	f7f8 fd10 	bl	8008996 <VL53LX_i2c_decode_uint32_t>
 800ff76:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   4));
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	3304      	adds	r3, #4
 800ff80:	4619      	mov	r1, r3
 800ff82:	2004      	movs	r0, #4
 800ff84:	f7f8 fd07 	bl	8008996 <VL53LX_i2c_decode_uint32_t>
 800ff88:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +   8));
 800ff8e:	68bb      	ldr	r3, [r7, #8]
 800ff90:	3308      	adds	r3, #8
 800ff92:	4619      	mov	r1, r3
 800ff94:	2004      	movs	r0, #4
 800ff96:	f7f8 fd1b 	bl	80089d0 <VL53LX_i2c_decode_int32_t>
 800ff9a:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  12));
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	330c      	adds	r3, #12
 800ffa4:	4619      	mov	r1, r3
 800ffa6:	2004      	movs	r0, #4
 800ffa8:	f7f8 fcf5 	bl	8008996 <VL53LX_i2c_decode_uint32_t>
 800ffac:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  16));
 800ffb2:	68bb      	ldr	r3, [r7, #8]
 800ffb4:	3310      	adds	r3, #16
 800ffb6:	4619      	mov	r1, r3
 800ffb8:	2004      	movs	r0, #4
 800ffba:	f7f8 fcec 	bl	8008996 <VL53LX_i2c_decode_uint32_t>
 800ffbe:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  20));
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	3314      	adds	r3, #20
 800ffc8:	4619      	mov	r1, r3
 800ffca:	2004      	movs	r0, #4
 800ffcc:	f7f8 fce3 	bl	8008996 <VL53LX_i2c_decode_uint32_t>
 800ffd0:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +  24));
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	3318      	adds	r3, #24
 800ffda:	4619      	mov	r1, r3
 800ffdc:	2004      	movs	r0, #4
 800ffde:	f7f8 fcf7 	bl	80089d0 <VL53LX_i2c_decode_int32_t>
 800ffe2:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  28));
 800ffe8:	68bb      	ldr	r3, [r7, #8]
 800ffea:	331c      	adds	r3, #28
 800ffec:	4619      	mov	r1, r3
 800ffee:	2004      	movs	r0, #4
 800fff0:	f7f8 fcd1 	bl	8008996 <VL53LX_i2c_decode_uint32_t>
 800fff4:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800fffa:	68bb      	ldr	r3, [r7, #8]
 800fffc:	f893 2020 	ldrb.w	r2, [r3, #32]
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8010006:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801000a:	4618      	mov	r0, r3
 801000c:	3718      	adds	r7, #24
 801000e:	46bd      	mov	sp, r7
 8010010:	bd80      	pop	{r7, pc}

08010012 <VL53LX_i2c_decode_debug_results>:

VL53LX_Error VL53LX_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_debug_results_t    *pdata)
{
 8010012:	b580      	push	{r7, lr}
 8010014:	b086      	sub	sp, #24
 8010016:	af00      	add	r7, sp, #0
 8010018:	4603      	mov	r3, r0
 801001a:	60b9      	str	r1, [r7, #8]
 801001c:	607a      	str	r2, [r7, #4]
 801001e:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010020:	2300      	movs	r3, #0
 8010022:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES)
 8010024:	89fb      	ldrh	r3, [r7, #14]
 8010026:	2b37      	cmp	r3, #55	; 0x37
 8010028:	d802      	bhi.n	8010030 <VL53LX_i2c_decode_debug_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 801002a:	f06f 0309 	mvn.w	r3, #9
 801002e:	e15e      	b.n	80102ee <VL53LX_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   0));
 8010030:	68b9      	ldr	r1, [r7, #8]
 8010032:	2002      	movs	r0, #2
 8010034:	f7f8 fc10 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 8010038:	4603      	mov	r3, r0
 801003a:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8010040:	68bb      	ldr	r3, [r7, #8]
 8010042:	3302      	adds	r3, #2
 8010044:	781b      	ldrb	r3, [r3, #0]
 8010046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801004a:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 8010050:	68bb      	ldr	r3, [r7, #8]
 8010052:	3303      	adds	r3, #3
 8010054:	781b      	ldrb	r3, [r3, #0]
 8010056:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801005a:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 8010060:	68bb      	ldr	r3, [r7, #8]
 8010062:	3304      	adds	r3, #4
 8010064:	781b      	ldrb	r3, [r3, #0]
 8010066:	f003 0303 	and.w	r3, r3, #3
 801006a:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	3305      	adds	r3, #5
 8010074:	781b      	ldrb	r3, [r3, #0]
 8010076:	f003 0301 	and.w	r3, r3, #1
 801007a:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	3306      	adds	r3, #6
 8010084:	781b      	ldrb	r3, [r3, #0]
 8010086:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801008a:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8010090:	68bb      	ldr	r3, [r7, #8]
 8010092:	3307      	adds	r3, #7
 8010094:	781b      	ldrb	r3, [r3, #0]
 8010096:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801009a:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 80100a0:	68bb      	ldr	r3, [r7, #8]
 80100a2:	3308      	adds	r3, #8
 80100a4:	4619      	mov	r1, r3
 80100a6:	2002      	movs	r0, #2
 80100a8:	f7f8 fbd6 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 80100ac:	4603      	mov	r3, r0
 80100ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80100b2:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 80100b8:	68bb      	ldr	r3, [r7, #8]
 80100ba:	330a      	adds	r3, #10
 80100bc:	781b      	ldrb	r3, [r3, #0]
 80100be:	f003 0303 	and.w	r3, r3, #3
 80100c2:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 80100c8:	68bb      	ldr	r3, [r7, #8]
 80100ca:	330b      	adds	r3, #11
 80100cc:	781b      	ldrb	r3, [r3, #0]
 80100ce:	f003 0303 	and.w	r3, r3, #3
 80100d2:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 80100d8:	68bb      	ldr	r3, [r7, #8]
 80100da:	330c      	adds	r3, #12
 80100dc:	781b      	ldrb	r3, [r3, #0]
 80100de:	f003 030f 	and.w	r3, r3, #15
 80100e2:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	330d      	adds	r3, #13
 80100ec:	781b      	ldrb	r3, [r3, #0]
 80100ee:	f003 0307 	and.w	r3, r3, #7
 80100f2:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	330e      	adds	r3, #14
 80100fc:	781b      	ldrb	r3, [r3, #0]
 80100fe:	f003 0301 	and.w	r3, r3, #1
 8010102:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	330f      	adds	r3, #15
 801010c:	781b      	ldrb	r3, [r3, #0]
 801010e:	f003 0303 	and.w	r3, r3, #3
 8010112:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	7c1a      	ldrb	r2, [r3, #16]
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8010120:	68bb      	ldr	r3, [r7, #8]
 8010122:	7c5a      	ldrb	r2, [r3, #17]
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 8010128:	68bb      	ldr	r3, [r7, #8]
 801012a:	3312      	adds	r3, #18
 801012c:	4619      	mov	r1, r3
 801012e:	2002      	movs	r0, #2
 8010130:	f7f8 fb92 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 8010134:	4603      	mov	r3, r0
 8010136:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801013a:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 8010140:	68bb      	ldr	r3, [r7, #8]
 8010142:	3316      	adds	r3, #22
 8010144:	4619      	mov	r1, r3
 8010146:	2002      	movs	r0, #2
 8010148:	f7f8 fb86 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 801014c:	4603      	mov	r3, r0
 801014e:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	3318      	adds	r3, #24
 8010158:	4619      	mov	r1, r3
 801015a:	2002      	movs	r0, #2
 801015c:	f7f8 fb7c 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 8010160:	4603      	mov	r3, r0
 8010162:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 8010168:	68bb      	ldr	r3, [r7, #8]
 801016a:	331a      	adds	r3, #26
 801016c:	781b      	ldrb	r3, [r3, #0]
 801016e:	f003 0301 	and.w	r3, r3, #1
 8010172:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 8010178:	68bb      	ldr	r3, [r7, #8]
 801017a:	331b      	adds	r3, #27
 801017c:	781b      	ldrb	r3, [r3, #0]
 801017e:	f003 0307 	and.w	r3, r3, #7
 8010182:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	7f1a      	ldrb	r2, [r3, #28]
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	7f5a      	ldrb	r2, [r3, #29]
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 8010198:	68bb      	ldr	r3, [r7, #8]
 801019a:	331e      	adds	r3, #30
 801019c:	781b      	ldrb	r3, [r3, #0]
 801019e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101a2:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	331f      	adds	r3, #31
 80101ac:	781b      	ldrb	r3, [r3, #0]
 80101ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101b2:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 80101b8:	68bb      	ldr	r3, [r7, #8]
 80101ba:	3320      	adds	r3, #32
 80101bc:	781b      	ldrb	r3, [r3, #0]
 80101be:	f003 0303 	and.w	r3, r3, #3
 80101c2:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	3321      	adds	r3, #33	; 0x21
 80101cc:	781b      	ldrb	r3, [r3, #0]
 80101ce:	f003 030f 	and.w	r3, r3, #15
 80101d2:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 80101e4:	68bb      	ldr	r3, [r7, #8]
 80101e6:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 80101f0:	68bb      	ldr	r3, [r7, #8]
 80101f2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 80101fc:	68bb      	ldr	r3, [r7, #8]
 80101fe:	3325      	adds	r3, #37	; 0x25
 8010200:	781b      	ldrb	r3, [r3, #0]
 8010202:	f003 0301 	and.w	r3, r3, #1
 8010206:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 801020e:	68bb      	ldr	r3, [r7, #8]
 8010210:	3326      	adds	r3, #38	; 0x26
 8010212:	781b      	ldrb	r3, [r3, #0]
 8010214:	f003 0303 	and.w	r3, r3, #3
 8010218:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	3327      	adds	r3, #39	; 0x27
 8010224:	781b      	ldrb	r3, [r3, #0]
 8010226:	f003 031f 	and.w	r3, r3, #31
 801022a:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8010232:	68bb      	ldr	r3, [r7, #8]
 8010234:	3328      	adds	r3, #40	; 0x28
 8010236:	781b      	ldrb	r3, [r3, #0]
 8010238:	f003 031f 	and.w	r3, r3, #31
 801023c:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	3329      	adds	r3, #41	; 0x29
 8010248:	781b      	ldrb	r3, [r3, #0]
 801024a:	f003 031f 	and.w	r3, r3, #31
 801024e:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 8010256:	68bb      	ldr	r3, [r7, #8]
 8010258:	332a      	adds	r3, #42	; 0x2a
 801025a:	781b      	ldrb	r3, [r3, #0]
 801025c:	f003 0301 	and.w	r3, r3, #1
 8010260:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 8010268:	68bb      	ldr	r3, [r7, #8]
 801026a:	332b      	adds	r3, #43	; 0x2b
 801026c:	781b      	ldrb	r3, [r3, #0]
 801026e:	f003 0301 	and.w	r3, r3, #1
 8010272:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	332c      	adds	r3, #44	; 0x2c
 801027e:	781b      	ldrb	r3, [r3, #0]
 8010280:	f003 0303 	and.w	r3, r3, #3
 8010284:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	332d      	adds	r3, #45	; 0x2d
 8010290:	781b      	ldrb	r3, [r3, #0]
 8010292:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010296:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 801029e:	68bb      	ldr	r3, [r7, #8]
 80102a0:	332e      	adds	r3, #46	; 0x2e
 80102a2:	4619      	mov	r1, r3
 80102a4:	2004      	movs	r0, #4
 80102a6:	f7f8 fb76 	bl	8008996 <VL53LX_i2c_decode_uint32_t>
 80102aa:	4603      	mov	r3, r0
 80102ac:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  50));
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	3332      	adds	r3, #50	; 0x32
 80102b8:	4619      	mov	r1, r3
 80102ba:	2004      	movs	r0, #4
 80102bc:	f7f8 fb6b 	bl	8008996 <VL53LX_i2c_decode_uint32_t>
 80102c0:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 80102c6:	68bb      	ldr	r3, [r7, #8]
 80102c8:	3336      	adds	r3, #54	; 0x36
 80102ca:	781b      	ldrb	r3, [r3, #0]
 80102cc:	f003 0301 	and.w	r3, r3, #1
 80102d0:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 80102d8:	68bb      	ldr	r3, [r7, #8]
 80102da:	3337      	adds	r3, #55	; 0x37
 80102dc:	781b      	ldrb	r3, [r3, #0]
 80102de:	f003 0301 	and.w	r3, r3, #1
 80102e2:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 80102ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80102ee:	4618      	mov	r0, r3
 80102f0:	3718      	adds	r7, #24
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bd80      	pop	{r7, pc}

080102f6 <VL53LX_i2c_decode_nvm_copy_data>:

VL53LX_Error VL53LX_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_nvm_copy_data_t    *pdata)
{
 80102f6:	b580      	push	{r7, lr}
 80102f8:	b086      	sub	sp, #24
 80102fa:	af00      	add	r7, sp, #0
 80102fc:	4603      	mov	r3, r0
 80102fe:	60b9      	str	r1, [r7, #8]
 8010300:	607a      	str	r2, [r7, #4]
 8010302:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010304:	2300      	movs	r3, #0
 8010306:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES)
 8010308:	89fb      	ldrh	r3, [r7, #14]
 801030a:	2b30      	cmp	r3, #48	; 0x30
 801030c:	d802      	bhi.n	8010314 <VL53LX_i2c_decode_nvm_copy_data+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 801030e:	f06f 0309 	mvn.w	r3, #9
 8010312:	e112      	b.n	801053a <VL53LX_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 801031c:	68bb      	ldr	r3, [r7, #8]
 801031e:	785a      	ldrb	r2, [r3, #1]
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	789a      	ldrb	r2, [r3, #2]
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   3));
 801032c:	68bb      	ldr	r3, [r7, #8]
 801032e:	3303      	adds	r3, #3
 8010330:	4619      	mov	r1, r3
 8010332:	2002      	movs	r0, #2
 8010334:	f7f8 fa90 	bl	8008858 <VL53LX_i2c_decode_uint16_t>
 8010338:	4603      	mov	r3, r0
 801033a:	461a      	mov	r2, r3
	pdata->identification__module_id =
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8010340:	68bb      	ldr	r3, [r7, #8]
 8010342:	3305      	adds	r3, #5
 8010344:	781b      	ldrb	r3, [r3, #0]
 8010346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801034a:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 8010350:	68bb      	ldr	r3, [r7, #8]
 8010352:	3306      	adds	r3, #6
 8010354:	781b      	ldrb	r3, [r3, #0]
 8010356:	f003 0307 	and.w	r3, r3, #7
 801035a:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 8010360:	68bb      	ldr	r3, [r7, #8]
 8010362:	3307      	adds	r3, #7
 8010364:	781b      	ldrb	r3, [r3, #0]
 8010366:	f003 0307 	and.w	r3, r3, #7
 801036a:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8010370:	68bb      	ldr	r3, [r7, #8]
 8010372:	3308      	adds	r3, #8
 8010374:	781b      	ldrb	r3, [r3, #0]
 8010376:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801037a:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	3309      	adds	r3, #9
 8010384:	781b      	ldrb	r3, [r3, #0]
 8010386:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801038a:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8010390:	68bb      	ldr	r3, [r7, #8]
 8010392:	330a      	adds	r3, #10
 8010394:	781b      	ldrb	r3, [r3, #0]
 8010396:	f003 0301 	and.w	r3, r3, #1
 801039a:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	330b      	adds	r3, #11
 80103a4:	781b      	ldrb	r3, [r3, #0]
 80103a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80103aa:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	330c      	adds	r3, #12
 80103b4:	781b      	ldrb	r3, [r3, #0]
 80103b6:	f003 0301 	and.w	r3, r3, #1
 80103ba:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	330d      	adds	r3, #13
 80103c4:	781b      	ldrb	r3, [r3, #0]
 80103c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80103ca:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	330e      	adds	r3, #14
 80103d4:	781b      	ldrb	r3, [r3, #0]
 80103d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80103da:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	7bda      	ldrb	r2, [r3, #15]
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 80103e8:	68bb      	ldr	r3, [r7, #8]
 80103ea:	7c1a      	ldrb	r2, [r3, #16]
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 80103f0:	68bb      	ldr	r3, [r7, #8]
 80103f2:	7c5a      	ldrb	r2, [r3, #17]
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	7c9a      	ldrb	r2, [r3, #18]
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 8010400:	68bb      	ldr	r3, [r7, #8]
 8010402:	7cda      	ldrb	r2, [r3, #19]
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	7d1a      	ldrb	r2, [r3, #20]
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8010410:	68bb      	ldr	r3, [r7, #8]
 8010412:	7d5a      	ldrb	r2, [r3, #21]
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 8010418:	68bb      	ldr	r3, [r7, #8]
 801041a:	7d9a      	ldrb	r2, [r3, #22]
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8010420:	68bb      	ldr	r3, [r7, #8]
 8010422:	7dda      	ldrb	r2, [r3, #23]
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 8010428:	68bb      	ldr	r3, [r7, #8]
 801042a:	7e1a      	ldrb	r2, [r3, #24]
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8010430:	68bb      	ldr	r3, [r7, #8]
 8010432:	7e5a      	ldrb	r2, [r3, #25]
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 8010438:	68bb      	ldr	r3, [r7, #8]
 801043a:	7e9a      	ldrb	r2, [r3, #26]
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8010440:	68bb      	ldr	r3, [r7, #8]
 8010442:	7eda      	ldrb	r2, [r3, #27]
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 8010448:	68bb      	ldr	r3, [r7, #8]
 801044a:	7f1a      	ldrb	r2, [r3, #28]
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 8010450:	68bb      	ldr	r3, [r7, #8]
 8010452:	7f5a      	ldrb	r2, [r3, #29]
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	7f9a      	ldrb	r2, [r3, #30]
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 8010460:	68bb      	ldr	r3, [r7, #8]
 8010462:	7fda      	ldrb	r2, [r3, #31]
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 801046a:	68bb      	ldr	r3, [r7, #8]
 801046c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 8010476:	68bb      	ldr	r3, [r7, #8]
 8010478:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8010482:	68bb      	ldr	r3, [r7, #8]
 8010484:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 801048e:	68bb      	ldr	r3, [r7, #8]
 8010490:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 801049a:	68bb      	ldr	r3, [r7, #8]
 801049c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 80104a6:	68bb      	ldr	r3, [r7, #8]
 80104a8:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 80104b2:	68bb      	ldr	r3, [r7, #8]
 80104b4:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 80104be:	68bb      	ldr	r3, [r7, #8]
 80104c0:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 80104ca:	68bb      	ldr	r3, [r7, #8]
 80104cc:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 80104e2:	68bb      	ldr	r3, [r7, #8]
 80104e4:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 80104ee:	68bb      	ldr	r3, [r7, #8]
 80104f0:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 80104fa:	68bb      	ldr	r3, [r7, #8]
 80104fc:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8010506:	68bb      	ldr	r3, [r7, #8]
 8010508:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8010512:	68bb      	ldr	r3, [r7, #8]
 8010514:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 801051e:	68bb      	ldr	r3, [r7, #8]
 8010520:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 801052a:	68bb      	ldr	r3, [r7, #8]
 801052c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 8010536:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801053a:	4618      	mov	r0, r3
 801053c:	3718      	adds	r7, #24
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}

08010542 <VL53LX_get_nvm_copy_data>:


VL53LX_Error VL53LX_get_nvm_copy_data(
	VL53LX_DEV                 Dev,
	VL53LX_nvm_copy_data_t    *pdata)
{
 8010542:	b580      	push	{r7, lr}
 8010544:	b090      	sub	sp, #64	; 0x40
 8010546:	af00      	add	r7, sp, #0
 8010548:	6078      	str	r0, [r7, #4]
 801054a:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 801054c:	2300      	movs	r3, #0
 801054e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8010552:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010556:	2b00      	cmp	r3, #0
 8010558:	d10a      	bne.n	8010570 <VL53LX_get_nvm_copy_data+0x2e>
		status = VL53LX_ReadMulti(
 801055a:	f107 020c 	add.w	r2, r7, #12
 801055e:	2331      	movs	r3, #49	; 0x31
 8010560:	f240 110f 	movw	r1, #271	; 0x10f
 8010564:	6878      	ldr	r0, [r7, #4]
 8010566:	f000 fea1 	bl	80112ac <VL53LX_ReadMulti>
 801056a:	4603      	mov	r3, r0
 801056c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53LX_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 8010570:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010574:	2b00      	cmp	r3, #0
 8010576:	d109      	bne.n	801058c <VL53LX_get_nvm_copy_data+0x4a>
		status = VL53LX_i2c_decode_nvm_copy_data(
 8010578:	f107 030c 	add.w	r3, r7, #12
 801057c:	683a      	ldr	r2, [r7, #0]
 801057e:	4619      	mov	r1, r3
 8010580:	2031      	movs	r0, #49	; 0x31
 8010582:	f7ff feb8 	bl	80102f6 <VL53LX_i2c_decode_nvm_copy_data>
 8010586:	4603      	mov	r3, r0
 8010588:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 801058c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8010590:	4618      	mov	r0, r3
 8010592:	3740      	adds	r7, #64	; 0x40
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}

08010598 <VL53LX_f_023>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53LX_p_028,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 8010598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801059c:	b0a1      	sub	sp, #132	; 0x84
 801059e:	af00      	add	r7, sp, #0
 80105a0:	64b9      	str	r1, [r7, #72]	; 0x48
 80105a2:	647a      	str	r2, [r7, #68]	; 0x44
 80105a4:	643b      	str	r3, [r7, #64]	; 0x40
 80105a6:	4603      	mov	r3, r0
 80105a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f


	VL53LX_Error status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80105ac:	23f1      	movs	r3, #241	; 0xf1
 80105ae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint32_t sigma_int  = VL53LX_D_002;
 80105b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80105b6:	657b      	str	r3, [r7, #84]	; 0x54

	uint32_t pll_period_mm  = 0;
 80105b8:	2300      	movs	r3, #0
 80105ba:	653b      	str	r3, [r7, #80]	; 0x50

	uint64_t tmp0        = 0;
 80105bc:	f04f 0200 	mov.w	r2, #0
 80105c0:	f04f 0300 	mov.w	r3, #0
 80105c4:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	uint64_t tmp1        = 0;
 80105c8:	f04f 0200 	mov.w	r2, #0
 80105cc:	f04f 0300 	mov.w	r3, #0
 80105d0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	uint64_t b_minus_amb = 0;
 80105d4:	f04f 0200 	mov.w	r2, #0
 80105d8:	f04f 0300 	mov.w	r3, #0
 80105dc:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	uint64_t VL53LX_p_055   = 0;
 80105e0:	f04f 0200 	mov.w	r2, #0
 80105e4:	f04f 0300 	mov.w	r3, #0
 80105e8:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	*psigma_est  = VL53LX_D_002;
 80105ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80105f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80105f4:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 80105f6:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	f000 8259 	beq.w	8010ab2 <VL53LX_f_023+0x51a>



		pll_period_mm = VL53LX_calc_pll_period_mm(fast_osc_frequency);
 8010600:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8010604:	4618      	mov	r0, r3
 8010606:	f7fb fbd3 	bl	800bdb0 <VL53LX_calc_pll_period_mm>
 801060a:	6538      	str	r0, [r7, #80]	; 0x50



		if (VL53LX_p_028 > VL53LX_p_032)
 801060c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8010610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010612:	429a      	cmp	r2, r3
 8010614:	d90f      	bls.n	8010636 <VL53LX_f_023+0x9e>
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 8010616:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801061a:	4618      	mov	r0, r3
 801061c:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_032;
 8010620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010622:	461a      	mov	r2, r3
 8010624:	f04f 0300 	mov.w	r3, #0
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 8010628:	ebb0 0a02 	subs.w	sl, r0, r2
 801062c:	eb61 0b03 	sbc.w	fp, r1, r3
 8010630:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 8010634:	e00e      	b.n	8010654 <VL53LX_f_023+0xbc>
		else
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 8010636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010638:	4618      	mov	r0, r3
 801063a:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_028;
 801063e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010642:	461a      	mov	r2, r3
 8010644:	f04f 0300 	mov.w	r3, #0
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 8010648:	ebb0 0802 	subs.w	r8, r0, r2
 801064c:	eb61 0903 	sbc.w	r9, r1, r3
 8010650:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60



		if (VL53LX_p_007 > VL53LX_p_001)
 8010654:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010658:	429a      	cmp	r2, r3
 801065a:	d911      	bls.n	8010680 <VL53LX_f_023+0xe8>
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 801065c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801065e:	4618      	mov	r0, r3
 8010660:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_001;
 8010664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010666:	461a      	mov	r2, r3
 8010668:	f04f 0300 	mov.w	r3, #0
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 801066c:	1a86      	subs	r6, r0, r2
 801066e:	62be      	str	r6, [r7, #40]	; 0x28
 8010670:	eb61 0303 	sbc.w	r3, r1, r3
 8010674:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010676:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801067a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 801067e:	e010      	b.n	80106a2 <VL53LX_f_023+0x10a>
		else
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 8010680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010682:	4618      	mov	r0, r3
 8010684:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_007;
 8010688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801068a:	461a      	mov	r2, r3
 801068c:	f04f 0300 	mov.w	r3, #0
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 8010690:	1a86      	subs	r6, r0, r2
 8010692:	623e      	str	r6, [r7, #32]
 8010694:	eb61 0303 	sbc.w	r3, r1, r3
 8010698:	627b      	str	r3, [r7, #36]	; 0x24
 801069a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801069e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58



		if (b_minus_amb != 0) {
 80106a2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80106a6:	4313      	orrs	r3, r2
 80106a8:	f000 8203 	beq.w	8010ab2 <VL53LX_f_023+0x51a>




			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 80106ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106ae:	4618      	mov	r0, r3
 80106b0:	f04f 0100 	mov.w	r1, #0
 80106b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80106b8:	461a      	mov	r2, r3
 80106ba:	f04f 0300 	mov.w	r3, #0
 80106be:	1884      	adds	r4, r0, r2
 80106c0:	eb41 0503 	adc.w	r5, r1, r3
					(uint64_t)VL53LX_p_028;
 80106c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80106c8:	461a      	mov	r2, r3
 80106ca:	f04f 0300 	mov.w	r3, #0
			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 80106ce:	18a1      	adds	r1, r4, r2
 80106d0:	61b9      	str	r1, [r7, #24]
 80106d2:	eb45 0303 	adc.w	r3, r5, r3
 80106d6:	61fb      	str	r3, [r7, #28]
 80106d8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80106dc:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			if (tmp0 > VL53LX_D_003)
 80106e0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80106e4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80106e8:	f04f 0100 	mov.w	r1, #0
 80106ec:	4299      	cmp	r1, r3
 80106ee:	bf08      	it	eq
 80106f0:	4290      	cmpeq	r0, r2
 80106f2:	d205      	bcs.n	8010700 <VL53LX_f_023+0x168>
				tmp0 = VL53LX_D_003;
 80106f4:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80106f8:	f04f 0300 	mov.w	r3, #0
 80106fc:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70



			tmp1 = (uint64_t)VL53LX_p_055 * (uint64_t)VL53LX_p_055;
 8010700:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010702:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010704:	fb02 f203 	mul.w	r2, r2, r3
 8010708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801070a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801070c:	fb01 f303 	mul.w	r3, r1, r3
 8010710:	18d1      	adds	r1, r2, r3
 8010712:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010714:	fba3 2303 	umull	r2, r3, r3, r3
 8010718:	4419      	add	r1, r3
 801071a:	460b      	mov	r3, r1
 801071c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8010720:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp1 = tmp1 << 8;
 8010724:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8010728:	f04f 0200 	mov.w	r2, #0
 801072c:	f04f 0300 	mov.w	r3, #0
 8010730:	020b      	lsls	r3, r1, #8
 8010732:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010736:	0202      	lsls	r2, r0, #8
 8010738:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			if (tmp1 > VL53LX_D_004)
 801073c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010740:	f04f 30ff 	mov.w	r0, #4294967295
 8010744:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010748:	4299      	cmp	r1, r3
 801074a:	bf08      	it	eq
 801074c:	4290      	cmpeq	r0, r2
 801074e:	d205      	bcs.n	801075c <VL53LX_f_023+0x1c4>
				tmp1 = VL53LX_D_004;
 8010750:	f04f 32ff 	mov.w	r2, #4294967295
 8010754:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8010758:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			tmp1 = do_division_u(tmp1, b_minus_amb);
 801075c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010760:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8010764:	f7ef fddc 	bl	8000320 <__aeabi_uldivmod>
 8010768:	4602      	mov	r2, r0
 801076a:	460b      	mov	r3, r1
 801076c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp1 = do_division_u(tmp1, b_minus_amb);
 8010770:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010774:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8010778:	f7ef fdd2 	bl	8000320 <__aeabi_uldivmod>
 801077c:	4602      	mov	r2, r0
 801077e:	460b      	mov	r3, r1
 8010780:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			if (tmp1 > (uint64_t)VL53LX_D_005)
 8010784:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010788:	2b80      	cmp	r3, #128	; 0x80
 801078a:	bf08      	it	eq
 801078c:	2a00      	cmpeq	r2, #0
 801078e:	d305      	bcc.n	801079c <VL53LX_f_023+0x204>
				tmp1 = (uint64_t)VL53LX_D_005;
 8010790:	f04f 32ff 	mov.w	r2, #4294967295
 8010794:	f04f 037f 	mov.w	r3, #127	; 0x7f
 8010798:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			tmp0 = tmp1 * tmp0;
 801079c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801079e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80107a0:	fb02 f203 	mul.w	r2, r2, r3
 80107a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107a6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80107a8:	fb01 f303 	mul.w	r3, r1, r3
 80107ac:	18d1      	adds	r1, r2, r3
 80107ae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80107b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80107b2:	fba2 2303 	umull	r2, r3, r2, r3
 80107b6:	4419      	add	r1, r3
 80107b8:	460b      	mov	r3, r1
 80107ba:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80107be:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80107c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80107c6:	4618      	mov	r0, r3
 80107c8:	f04f 0100 	mov.w	r1, #0
 80107cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80107d0:	461a      	mov	r2, r3
 80107d2:	f04f 0300 	mov.w	r3, #0
 80107d6:	1884      	adds	r4, r0, r2
 80107d8:	63bc      	str	r4, [r7, #56]	; 0x38
 80107da:	eb41 0303 	adc.w	r3, r1, r3
 80107de:	63fb      	str	r3, [r7, #60]	; 0x3c
				(uint64_t)a_zp + (uint64_t)ax_zp;
 80107e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80107e4:	461a      	mov	r2, r3
 80107e6:	f04f 0300 	mov.w	r3, #0
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80107ea:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80107ee:	4621      	mov	r1, r4
 80107f0:	1889      	adds	r1, r1, r2
 80107f2:	6339      	str	r1, [r7, #48]	; 0x30
 80107f4:	4629      	mov	r1, r5
 80107f6:	eb43 0101 	adc.w	r1, r3, r1
 80107fa:	6379      	str	r1, [r7, #52]	; 0x34
				(uint64_t)a_zp + (uint64_t)ax_zp;
 80107fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010800:	461a      	mov	r2, r3
 8010802:	f04f 0300 	mov.w	r3, #0
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8010806:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801080a:	4621      	mov	r1, r4
 801080c:	1889      	adds	r1, r1, r2
 801080e:	6139      	str	r1, [r7, #16]
 8010810:	4629      	mov	r1, r5
 8010812:	eb43 0101 	adc.w	r1, r3, r1
 8010816:	6179      	str	r1, [r7, #20]
 8010818:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801081c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


			if (tmp1 > (uint64_t)VL53LX_D_003)
 8010820:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010824:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8010828:	f04f 0100 	mov.w	r1, #0
 801082c:	4299      	cmp	r1, r3
 801082e:	bf08      	it	eq
 8010830:	4290      	cmpeq	r0, r2
 8010832:	d205      	bcs.n	8010840 <VL53LX_f_023+0x2a8>
				tmp1 = (uint64_t)VL53LX_D_003;
 8010834:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8010838:	f04f 0300 	mov.w	r3, #0
 801083c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			tmp1 = tmp1 << 8;
 8010840:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8010844:	f04f 0200 	mov.w	r2, #0
 8010848:	f04f 0300 	mov.w	r3, #0
 801084c:	020b      	lsls	r3, r1, #8
 801084e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010852:	0202      	lsls	r2, r0, #8
 8010854:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			tmp0 = tmp1 + tmp0;
 8010858:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 801085c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010860:	1884      	adds	r4, r0, r2
 8010862:	60bc      	str	r4, [r7, #8]
 8010864:	eb41 0303 	adc.w	r3, r1, r3
 8010868:	60fb      	str	r3, [r7, #12]
 801086a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801086e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			if (tmp0 > (uint64_t)VL53LX_D_006)
 8010872:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010876:	2a00      	cmp	r2, #0
 8010878:	f173 0300 	sbcs.w	r3, r3, #0
 801087c:	da05      	bge.n	801088a <VL53LX_f_023+0x2f2>
				tmp0 = (uint64_t)VL53LX_D_006;
 801087e:	f04f 32ff 	mov.w	r2, #4294967295
 8010882:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010886:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70





			if (tmp0 > (uint64_t)VL53LX_D_007) {
 801088a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801088e:	2b01      	cmp	r3, #1
 8010890:	bf08      	it	eq
 8010892:	2a00      	cmpeq	r2, #0
 8010894:	d31e      	bcc.n	80108d4 <VL53LX_f_023+0x33c>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8010896:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801089a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 801089e:	f7ef fd3f 	bl	8000320 <__aeabi_uldivmod>
 80108a2:	4602      	mov	r2, r0
 80108a4:	460b      	mov	r3, r1
 80108a6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = tmp0 * pll_period_mm;
 80108aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108ac:	461a      	mov	r2, r3
 80108ae:	f04f 0300 	mov.w	r3, #0
 80108b2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80108b4:	fb02 f001 	mul.w	r0, r2, r1
 80108b8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80108ba:	fb03 f101 	mul.w	r1, r3, r1
 80108be:	4401      	add	r1, r0
 80108c0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80108c2:	fba0 2302 	umull	r2, r3, r0, r2
 80108c6:	4419      	add	r1, r3
 80108c8:	460b      	mov	r3, r1
 80108ca:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80108ce:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80108d2:	e01d      	b.n	8010910 <VL53LX_f_023+0x378>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 80108d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108d6:	461a      	mov	r2, r3
 80108d8:	f04f 0300 	mov.w	r3, #0
 80108dc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80108de:	fb02 f001 	mul.w	r0, r2, r1
 80108e2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80108e4:	fb03 f101 	mul.w	r1, r3, r1
 80108e8:	4401      	add	r1, r0
 80108ea:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80108ec:	fba0 2302 	umull	r2, r3, r0, r2
 80108f0:	4419      	add	r1, r3
 80108f2:	460b      	mov	r3, r1
 80108f4:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80108f8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80108fc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010900:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010904:	f7ef fd0c 	bl	8000320 <__aeabi_uldivmod>
 8010908:	4602      	mov	r2, r0
 801090a:	460b      	mov	r3, r1
 801090c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 8010910:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010914:	2a00      	cmp	r2, #0
 8010916:	f173 0300 	sbcs.w	r3, r3, #0
 801091a:	da05      	bge.n	8010928 <VL53LX_f_023+0x390>
				tmp0 = (uint64_t)VL53LX_D_006;
 801091c:	f04f 32ff 	mov.w	r2, #4294967295
 8010920:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010924:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70



			if (tmp0 > (uint64_t)VL53LX_D_007) {
 8010928:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801092c:	2b01      	cmp	r3, #1
 801092e:	bf08      	it	eq
 8010930:	2a00      	cmpeq	r2, #0
 8010932:	d32a      	bcc.n	801098a <VL53LX_f_023+0x3f2>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8010934:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010938:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 801093c:	f7ef fcf0 	bl	8000320 <__aeabi_uldivmod>
 8010940:	4602      	mov	r2, r0
 8010942:	460b      	mov	r3, r1
 8010944:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, 4);
 8010948:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 801094c:	f04f 0200 	mov.w	r2, #0
 8010950:	f04f 0300 	mov.w	r3, #0
 8010954:	0882      	lsrs	r2, r0, #2
 8010956:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 801095a:	088b      	lsrs	r3, r1, #2
 801095c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = tmp0 * pll_period_mm;
 8010960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010962:	461a      	mov	r2, r3
 8010964:	f04f 0300 	mov.w	r3, #0
 8010968:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801096a:	fb02 f001 	mul.w	r0, r2, r1
 801096e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010970:	fb03 f101 	mul.w	r1, r3, r1
 8010974:	4401      	add	r1, r0
 8010976:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8010978:	fba0 2302 	umull	r2, r3, r0, r2
 801097c:	4419      	add	r1, r3
 801097e:	460b      	mov	r3, r1
 8010980:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8010984:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8010988:	e029      	b.n	80109de <VL53LX_f_023+0x446>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 801098a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801098c:	461a      	mov	r2, r3
 801098e:	f04f 0300 	mov.w	r3, #0
 8010992:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010994:	fb02 f001 	mul.w	r0, r2, r1
 8010998:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801099a:	fb03 f101 	mul.w	r1, r3, r1
 801099e:	4401      	add	r1, r0
 80109a0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80109a2:	fba0 2302 	umull	r2, r3, r0, r2
 80109a6:	4419      	add	r1, r3
 80109a8:	460b      	mov	r3, r1
 80109aa:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80109ae:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80109b2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80109b6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80109ba:	f7ef fcb1 	bl	8000320 <__aeabi_uldivmod>
 80109be:	4602      	mov	r2, r0
 80109c0:	460b      	mov	r3, r1
 80109c2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, 4);
 80109c6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80109ca:	f04f 0200 	mov.w	r2, #0
 80109ce:	f04f 0300 	mov.w	r3, #0
 80109d2:	0882      	lsrs	r2, r0, #2
 80109d4:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80109d8:	088b      	lsrs	r3, r1, #2
 80109da:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 80109de:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80109e2:	2a00      	cmp	r2, #0
 80109e4:	f173 0300 	sbcs.w	r3, r3, #0
 80109e8:	da05      	bge.n	80109f6 <VL53LX_f_023+0x45e>
				tmp0 = (uint64_t)VL53LX_D_006;
 80109ea:	f04f 32ff 	mov.w	r2, #4294967295
 80109ee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80109f2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			tmp0 = tmp0 >> 2;
 80109f6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80109fa:	f04f 0200 	mov.w	r2, #0
 80109fe:	f04f 0300 	mov.w	r3, #0
 8010a02:	0882      	lsrs	r2, r0, #2
 8010a04:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8010a08:	088b      	lsrs	r3, r1, #2
 8010a0a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			if (tmp0 > (uint64_t)VL53LX_D_007)
 8010a0e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010a12:	2b01      	cmp	r3, #1
 8010a14:	bf08      	it	eq
 8010a16:	2a00      	cmpeq	r2, #0
 8010a18:	d305      	bcc.n	8010a26 <VL53LX_f_023+0x48e>
				tmp0 = (uint64_t)VL53LX_D_007;
 8010a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8010a1e:	f04f 0300 	mov.w	r3, #0
 8010a22:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 8010a26:	f897 004f 	ldrb.w	r0, [r7, #79]	; 0x4f
 8010a2a:	f04f 0100 	mov.w	r1, #0
 8010a2e:	f04f 0200 	mov.w	r2, #0
 8010a32:	f04f 0300 	mov.w	r3, #0
 8010a36:	01cb      	lsls	r3, r1, #7
 8010a38:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 8010a3c:	01c2      	lsls	r2, r0, #7
 8010a3e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp1 = tmp1 * tmp1;
 8010a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a44:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010a46:	fb02 f203 	mul.w	r2, r2, r3
 8010a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a4c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010a4e:	fb01 f303 	mul.w	r3, r1, r3
 8010a52:	18d1      	adds	r1, r2, r3
 8010a54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010a56:	fba3 2303 	umull	r2, r3, r3, r3
 8010a5a:	4419      	add	r1, r3
 8010a5c:	460b      	mov	r3, r1
 8010a5e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8010a62:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp0 = tmp0 + tmp1;
 8010a66:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010a6a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010a6e:	1884      	adds	r4, r0, r2
 8010a70:	603c      	str	r4, [r7, #0]
 8010a72:	eb41 0303 	adc.w	r3, r1, r3
 8010a76:	607b      	str	r3, [r7, #4]
 8010a78:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010a7c:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70


			if (tmp0 > (uint64_t)VL53LX_D_007)
 8010a80:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010a84:	2b01      	cmp	r3, #1
 8010a86:	bf08      	it	eq
 8010a88:	2a00      	cmpeq	r2, #0
 8010a8a:	d305      	bcc.n	8010a98 <VL53LX_f_023+0x500>
				tmp0 = (uint64_t)VL53LX_D_007;
 8010a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8010a90:	f04f 0300 	mov.w	r3, #0
 8010a94:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			sigma_int = VL53LX_isqrt((uint32_t)tmp0);
 8010a98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f7fb f821 	bl	800bae2 <VL53LX_isqrt>
 8010aa0:	6578      	str	r0, [r7, #84]	; 0x54

			*psigma_est = (uint16_t)sigma_int;
 8010aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010aa4:	b29a      	uxth	r2, r3
 8010aa6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010aaa:	801a      	strh	r2, [r3, #0]

			status = VL53LX_ERROR_NONE;
 8010aac:	2300      	movs	r3, #0
 8010aae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		}

	}

	return status;
 8010ab2:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
}
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	3784      	adds	r7, #132	; 0x84
 8010aba:	46bd      	mov	sp, r7
 8010abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010ac0 <VL53LX_wait_for_test_completion>:
}


VL53LX_Error VL53LX_wait_for_test_completion(
	VL53LX_DEV     Dev)
{
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b086      	sub	sp, #24
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010ac8:	2300      	movs	r3, #0
 8010aca:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	3318      	adds	r3, #24
 8010ad0:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53LX_WAIT_METHOD_BLOCKING) {
 8010ad6:	693b      	ldr	r3, [r7, #16]
 8010ad8:	781b      	ldrb	r3, [r3, #0]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d107      	bne.n	8010aee <VL53LX_wait_for_test_completion+0x2e>



		status =
			VL53LX_poll_for_range_completion(
 8010ade:	f64e 2160 	movw	r1, #60000	; 0xea60
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	f000 f88b 	bl	8010bfe <VL53LX_poll_for_range_completion>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	75fb      	strb	r3, [r7, #23]
 8010aec:	e01b      	b.n	8010b26 <VL53LX_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 8010aee:	2300      	movs	r3, #0
 8010af0:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 8010af2:	e011      	b.n	8010b18 <VL53LX_wait_for_test_completion+0x58>
			status = VL53LX_is_new_data_ready(
 8010af4:	f107 030f 	add.w	r3, r7, #15
 8010af8:	4619      	mov	r1, r3
 8010afa:	6878      	ldr	r0, [r7, #4]
 8010afc:	f000 f819 	bl	8010b32 <VL53LX_is_new_data_ready>
 8010b00:	4603      	mov	r3, r0
 8010b02:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53LX_ERROR_NONE) {
 8010b04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d105      	bne.n	8010b18 <VL53LX_wait_for_test_completion+0x58>
				status = VL53LX_WaitMs(
 8010b0c:	2101      	movs	r1, #1
 8010b0e:	6878      	ldr	r0, [r7, #4]
 8010b10:	f000 fce6 	bl	80114e0 <VL53LX_WaitMs>
 8010b14:	4603      	mov	r3, r0
 8010b16:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 8010b18:	7bfb      	ldrb	r3, [r7, #15]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d103      	bne.n	8010b26 <VL53LX_wait_for_test_completion+0x66>
 8010b1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d0e6      	beq.n	8010af4 <VL53LX_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8010b26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	3718      	adds	r7, #24
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}

08010b32 <VL53LX_is_new_data_ready>:


VL53LX_Error VL53LX_is_new_data_ready(
	VL53LX_DEV     Dev,
	uint8_t       *pready)
{
 8010b32:	b580      	push	{r7, lr}
 8010b34:	b086      	sub	sp, #24
 8010b36:	af00      	add	r7, sp, #0
 8010b38:	6078      	str	r0, [r7, #4]
 8010b3a:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	3318      	adds	r3, #24
 8010b44:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8010b46:	2300      	movs	r3, #0
 8010b48:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 8010b4e:	2300      	movs	r3, #0
 8010b50:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8010b52:	693b      	ldr	r3, [r7, #16]
 8010b54:	f893 330a 	ldrb.w	r3, [r3, #778]	; 0x30a
	gpio__mux_active_high_hv =
 8010b58:	f003 0310 	and.w	r3, r3, #16
 8010b5c:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8010b5e:	7bfb      	ldrb	r3, [r7, #15]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d102      	bne.n	8010b6a <VL53LX_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 8010b64:	2301      	movs	r3, #1
 8010b66:	75fb      	strb	r3, [r7, #23]
 8010b68:	e001      	b.n	8010b6e <VL53LX_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	75fb      	strb	r3, [r7, #23]



	status = VL53LX_RdByte(
 8010b6e:	f107 030e 	add.w	r3, r7, #14
 8010b72:	461a      	mov	r2, r3
 8010b74:	2131      	movs	r1, #49	; 0x31
 8010b76:	6878      	ldr	r0, [r7, #4]
 8010b78:	f000 fc2a 	bl	80113d0 <VL53LX_RdByte>
 8010b7c:	4603      	mov	r3, r0
 8010b7e:	75bb      	strb	r3, [r7, #22]
					VL53LX_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8010b80:	7bbb      	ldrb	r3, [r7, #14]
 8010b82:	f003 0201 	and.w	r2, r3, #1
 8010b86:	7dfb      	ldrb	r3, [r7, #23]
 8010b88:	429a      	cmp	r2, r3
 8010b8a:	d103      	bne.n	8010b94 <VL53LX_is_new_data_ready+0x62>
		*pready = 0x01;
 8010b8c:	683b      	ldr	r3, [r7, #0]
 8010b8e:	2201      	movs	r2, #1
 8010b90:	701a      	strb	r2, [r3, #0]
 8010b92:	e002      	b.n	8010b9a <VL53LX_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 8010b94:	683b      	ldr	r3, [r7, #0]
 8010b96:	2200      	movs	r2, #0
 8010b98:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8010b9a:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	3718      	adds	r7, #24
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bd80      	pop	{r7, pc}

08010ba6 <VL53LX_poll_for_boot_completion>:


VL53LX_Error VL53LX_poll_for_boot_completion(
	VL53LX_DEV    Dev,
	uint32_t      timeout_ms)
{
 8010ba6:	b580      	push	{r7, lr}
 8010ba8:	b086      	sub	sp, #24
 8010baa:	af02      	add	r7, sp, #8
 8010bac:	6078      	str	r0, [r7, #4]
 8010bae:	6039      	str	r1, [r7, #0]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53LX_WaitUs(
 8010bb4:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8010bb8:	6878      	ldr	r0, [r7, #4]
 8010bba:	f000 fca1 	bl	8011500 <VL53LX_WaitUs>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_FIRMWARE_BOOT_TIME_US);

	if (status == VL53LX_ERROR_NONE)
 8010bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d10b      	bne.n	8010be2 <VL53LX_poll_for_boot_completion+0x3c>
		status =
			VL53LX_WaitValueMaskEx(
 8010bca:	2301      	movs	r3, #1
 8010bcc:	9301      	str	r3, [sp, #4]
 8010bce:	2301      	movs	r3, #1
 8010bd0:	9300      	str	r3, [sp, #0]
 8010bd2:	2301      	movs	r3, #1
 8010bd4:	22e5      	movs	r2, #229	; 0xe5
 8010bd6:	6839      	ldr	r1, [r7, #0]
 8010bd8:	6878      	ldr	r0, [r7, #4]
 8010bda:	f000 fca9 	bl	8011530 <VL53LX_WaitValueMaskEx>
 8010bde:	4603      	mov	r3, r0
 8010be0:	73fb      	strb	r3, [r7, #15]
				VL53LX_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53LX_POLLING_DELAY_MS);

	if (status == VL53LX_ERROR_NONE)
 8010be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d103      	bne.n	8010bf2 <VL53LX_poll_for_boot_completion+0x4c>
		VL53LX_init_ll_driver_state(Dev, VL53LX_DEVICESTATE_SW_STANDBY);
 8010bea:	2103      	movs	r1, #3
 8010bec:	6878      	ldr	r0, [r7, #4]
 8010bee:	f7f7 f815 	bl	8007c1c <VL53LX_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8010bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	3710      	adds	r7, #16
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bd80      	pop	{r7, pc}

08010bfe <VL53LX_poll_for_range_completion>:


VL53LX_Error VL53LX_poll_for_range_completion(
	VL53LX_DEV     Dev,
	uint32_t       timeout_ms)
{
 8010bfe:	b580      	push	{r7, lr}
 8010c00:	b088      	sub	sp, #32
 8010c02:	af02      	add	r7, sp, #8
 8010c04:	6078      	str	r0, [r7, #4]
 8010c06:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010c08:	2300      	movs	r3, #0
 8010c0a:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	3318      	adds	r3, #24
 8010c10:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8010c12:	2300      	movs	r3, #0
 8010c14:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 8010c16:	2300      	movs	r3, #0
 8010c18:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8010c1a:	693b      	ldr	r3, [r7, #16]
 8010c1c:	f893 330a 	ldrb.w	r3, [r3, #778]	; 0x30a
	gpio__mux_active_high_hv =
 8010c20:	f003 0310 	and.w	r3, r3, #16
 8010c24:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8010c26:	7bfb      	ldrb	r3, [r7, #15]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d102      	bne.n	8010c32 <VL53LX_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 8010c2c:	2301      	movs	r3, #1
 8010c2e:	75fb      	strb	r3, [r7, #23]
 8010c30:	e001      	b.n	8010c36 <VL53LX_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 8010c32:	2300      	movs	r3, #0
 8010c34:	75fb      	strb	r3, [r7, #23]

	status =
		VL53LX_WaitValueMaskEx(
 8010c36:	7dfb      	ldrb	r3, [r7, #23]
 8010c38:	2201      	movs	r2, #1
 8010c3a:	9201      	str	r2, [sp, #4]
 8010c3c:	2201      	movs	r2, #1
 8010c3e:	9200      	str	r2, [sp, #0]
 8010c40:	2231      	movs	r2, #49	; 0x31
 8010c42:	6839      	ldr	r1, [r7, #0]
 8010c44:	6878      	ldr	r0, [r7, #4]
 8010c46:	f000 fc73 	bl	8011530 <VL53LX_WaitValueMaskEx>
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53LX_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8010c4e:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8010c52:	4618      	mov	r0, r3
 8010c54:	3718      	adds	r7, #24
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}

08010c5a <VL53LX_f_032>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 8010c5a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010c5e:	b0a2      	sub	sp, #136	; 0x88
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	65f8      	str	r0, [r7, #92]	; 0x5c
 8010c64:	4618      	mov	r0, r3
 8010c66:	460b      	mov	r3, r1
 8010c68:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8010c6c:	4613      	mov	r3, r2
 8010c6e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8010c72:	4603      	mov	r3, r0
 8010c74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010c78:	2300      	movs	r3, #0
 8010c7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	uint8_t row = 0;
 8010c7e:	2300      	movs	r3, #0
 8010c80:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t col = 0;
 8010c84:	2300      	movs	r3, #0
 8010c86:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65



	int16_t  bound_l_x = 0;
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	int16_t  bound_r_x = 0;
 8010c90:	2300      	movs	r3, #0
 8010c92:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	int16_t  bound_u_y = 0;
 8010c96:	2300      	movs	r3, #0
 8010c98:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	int16_t  bound_d_y = 0;
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

	int64_t xtalk_rate_ll = 0;
 8010ca2:	f04f 0200 	mov.w	r2, #0
 8010ca6:	f04f 0300 	mov.w	r3, #0
 8010caa:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	int64_t xtalk_rate_ur = 0;
 8010cae:	f04f 0200 	mov.w	r2, #0
 8010cb2:	f04f 0300 	mov.w	r3, #0
 8010cb6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

	int64_t xtalk_avg = 0;
 8010cba:	f04f 0200 	mov.w	r2, #0
 8010cbe:	f04f 0300 	mov.w	r3, #0
 8010cc2:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68





	if (status == VL53LX_ERROR_NONE) {
 8010cc6:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d108      	bne.n	8010ce0 <VL53LX_f_032+0x86>
		VL53LX_decode_row_col(
 8010cce:	f107 0265 	add.w	r2, r7, #101	; 0x65
 8010cd2:	f107 0166 	add.w	r1, r7, #102	; 0x66
 8010cd6:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8010cda:	4618      	mov	r0, r3
 8010cdc:	f7fb fad4 	bl	800c288 <VL53LX_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53LX_ERROR_NONE) {
 8010ce0:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d165      	bne.n	8010db4 <VL53LX_f_032+0x15a>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 8010ce8:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010cec:	091b      	lsrs	r3, r3, #4
 8010cee:	b2db      	uxtb	r3, r3
 8010cf0:	f003 0301 	and.w	r3, r3, #1
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d00e      	beq.n	8010d16 <VL53LX_f_032+0xbc>
			bound_l_x = (int16_t) col -
 8010cf8:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8010cfc:	b29a      	uxth	r2, r3
 8010cfe:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010d02:	095b      	lsrs	r3, r3, #5
 8010d04:	b2db      	uxtb	r3, r3
 8010d06:	b29b      	uxth	r3, r3
 8010d08:	1ad3      	subs	r3, r2, r3
 8010d0a:	b29b      	uxth	r3, r3
 8010d0c:	3b01      	subs	r3, #1
 8010d0e:	b29b      	uxth	r3, r3
 8010d10:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8010d14:	e00b      	b.n	8010d2e <VL53LX_f_032+0xd4>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 8010d16:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8010d1a:	b29a      	uxth	r2, r3
 8010d1c:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010d20:	095b      	lsrs	r3, r3, #5
 8010d22:	b2db      	uxtb	r3, r3
 8010d24:	b29b      	uxth	r3, r3
 8010d26:	1ad3      	subs	r3, r2, r3
 8010d28:	b29b      	uxth	r3, r3
 8010d2a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8010d2e:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8010d32:	b29a      	uxth	r2, r3
 8010d34:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010d38:	095b      	lsrs	r3, r3, #5
 8010d3a:	b2db      	uxtb	r3, r3
 8010d3c:	b29b      	uxth	r3, r3
 8010d3e:	4413      	add	r3, r2
 8010d40:	b29b      	uxth	r3, r3
 8010d42:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 8010d46:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010d4a:	f003 0301 	and.w	r3, r3, #1
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d011      	beq.n	8010d76 <VL53LX_f_032+0x11c>
			bound_d_y = (int16_t) row -
 8010d52:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8010d56:	b299      	uxth	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 8010d58:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010d5c:	f003 020f 	and.w	r2, r3, #15
 8010d60:	0fd3      	lsrs	r3, r2, #31
 8010d62:	4413      	add	r3, r2
 8010d64:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 8010d66:	b29b      	uxth	r3, r3
 8010d68:	1acb      	subs	r3, r1, r3
 8010d6a:	b29b      	uxth	r3, r3
 8010d6c:	3b01      	subs	r3, #1
 8010d6e:	b29b      	uxth	r3, r3
 8010d70:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 8010d74:	e00f      	b.n	8010d96 <VL53LX_f_032+0x13c>
		else
			bound_d_y = (int16_t) row -
 8010d76:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8010d7a:	b299      	uxth	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 8010d7c:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010d80:	f003 020f 	and.w	r2, r3, #15
 8010d84:	0fd3      	lsrs	r3, r2, #31
 8010d86:	4413      	add	r3, r2
 8010d88:	105b      	asrs	r3, r3, #1
 8010d8a:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 8010d8c:	b29b      	uxth	r3, r3
 8010d8e:	440b      	add	r3, r1
 8010d90:	b29b      	uxth	r3, r3
 8010d92:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

		bound_u_y = (int16_t) row +
 8010d96:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8010d9a:	b299      	uxth	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 8010d9c:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010da0:	f003 020f 	and.w	r2, r3, #15
 8010da4:	0fd3      	lsrs	r3, r2, #31
 8010da6:	4413      	add	r3, r2
 8010da8:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 8010daa:	b29b      	uxth	r3, r3
 8010dac:	440b      	add	r3, r1
 8010dae:	b29b      	uxth	r3, r3
 8010db0:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
			"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 8010db4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d133      	bne.n	8010e24 <VL53LX_f_032+0x1ca>
		bound_l_x =  (2 * bound_l_x) - 15 +
 8010dbc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010dc0:	b29a      	uxth	r2, r3
 8010dc2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8010dc6:	4413      	add	r3, r2
 8010dc8:	b29b      	uxth	r3, r3
 8010dca:	005b      	lsls	r3, r3, #1
 8010dcc:	b29b      	uxth	r3, r3
 8010dce:	3b0f      	subs	r3, #15
 8010dd0:	b29b      	uxth	r3, r3
 8010dd2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 8010dd6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010dda:	b29a      	uxth	r2, r3
 8010ddc:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8010de0:	4413      	add	r3, r2
 8010de2:	b29b      	uxth	r3, r3
 8010de4:	005b      	lsls	r3, r3, #1
 8010de6:	b29b      	uxth	r3, r3
 8010de8:	3b0f      	subs	r3, #15
 8010dea:	b29b      	uxth	r3, r3
 8010dec:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 8010df0:	f997 30a8 	ldrsb.w	r3, [r7, #168]	; 0xa8
 8010df4:	b29a      	uxth	r2, r3
 8010df6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8010dfa:	4413      	add	r3, r2
 8010dfc:	b29b      	uxth	r3, r3
 8010dfe:	005b      	lsls	r3, r3, #1
 8010e00:	b29b      	uxth	r3, r3
 8010e02:	3b0f      	subs	r3, #15
 8010e04:	b29b      	uxth	r3, r3
 8010e06:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 8010e0a:	f997 30a8 	ldrsb.w	r3, [r7, #168]	; 0xa8
 8010e0e:	b29a      	uxth	r2, r3
 8010e10:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8010e14:	4413      	add	r3, r2
 8010e16:	b29b      	uxth	r3, r3
 8010e18:	005b      	lsls	r3, r3, #1
 8010e1a:	b29b      	uxth	r3, r3
 8010e1c:	3b0f      	subs	r3, #15
 8010e1e:	b29b      	uxth	r3, r3
 8010e20:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 8010e24:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	f040 80cb 	bne.w	8010fc4 <VL53LX_f_032+0x36a>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8010e2e:	f9b7 0086 	ldrsh.w	r0, [r7, #134]	; 0x86
 8010e32:	ea4f 71e0 	mov.w	r1, r0, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8010e36:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8010e3a:	ea4f 73e2 	mov.w	r3, r2, asr #31
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8010e3e:	fb02 f501 	mul.w	r5, r2, r1
 8010e42:	fb00 f403 	mul.w	r4, r0, r3
 8010e46:	442c      	add	r4, r5
 8010e48:	fba0 8902 	umull	r8, r9, r0, r2
 8010e4c:	eb04 0309 	add.w	r3, r4, r9
 8010e50:	4699      	mov	r9, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8010e52:	f9b7 0080 	ldrsh.w	r0, [r7, #128]	; 0x80
 8010e56:	ea4f 71e0 	mov.w	r1, r0, asr #31
					((int64_t)ygradient));
 8010e5a:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8010e5e:	ea4f 73e2 	mov.w	r3, r2, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8010e62:	fb02 f501 	mul.w	r5, r2, r1
 8010e66:	fb00 f403 	mul.w	r4, r0, r3
 8010e6a:	442c      	add	r4, r5
 8010e6c:	fba0 2302 	umull	r2, r3, r0, r2
 8010e70:	18e1      	adds	r1, r4, r3
 8010e72:	460b      	mov	r3, r1
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8010e74:	eb18 0102 	adds.w	r1, r8, r2
 8010e78:	6339      	str	r1, [r7, #48]	; 0x30
 8010e7a:	eb49 0303 	adc.w	r3, r9, r3
 8010e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8010e80:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8010e84:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 8010e88:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8010e8c:	f112 0a01 	adds.w	sl, r2, #1
 8010e90:	f143 0b00 	adc.w	fp, r3, #0
 8010e94:	ea4f 73db 	mov.w	r3, fp, lsr #31
 8010e98:	461a      	mov	r2, r3
 8010e9a:	f04f 0300 	mov.w	r3, #0
 8010e9e:	eb12 010a 	adds.w	r1, r2, sl
 8010ea2:	62b9      	str	r1, [r7, #40]	; 0x28
 8010ea4:	eb43 030b 	adc.w	r3, r3, fp
 8010ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010eaa:	f04f 0200 	mov.w	r2, #0
 8010eae:	f04f 0300 	mov.w	r3, #0
 8010eb2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8010eb6:	4621      	mov	r1, r4
 8010eb8:	084a      	lsrs	r2, r1, #1
 8010eba:	4629      	mov	r1, r5
 8010ebc:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8010ec0:	4629      	mov	r1, r5
 8010ec2:	104b      	asrs	r3, r1, #1
 8010ec4:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 8010ec8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010eca:	461a      	mov	r2, r3
 8010ecc:	f04f 0300 	mov.w	r3, #0
 8010ed0:	f04f 0000 	mov.w	r0, #0
 8010ed4:	f04f 0100 	mov.w	r1, #0
 8010ed8:	0099      	lsls	r1, r3, #2
 8010eda:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8010ede:	0090      	lsls	r0, r2, #2
 8010ee0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8010ee4:	1814      	adds	r4, r2, r0
 8010ee6:	623c      	str	r4, [r7, #32]
 8010ee8:	414b      	adcs	r3, r1
 8010eea:	627b      	str	r3, [r7, #36]	; 0x24
 8010eec:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8010ef0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8010ef4:	f9b7 0084 	ldrsh.w	r0, [r7, #132]	; 0x84
 8010ef8:	ea4f 71e0 	mov.w	r1, r0, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8010efc:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8010f00:	ea4f 73e2 	mov.w	r3, r2, asr #31
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8010f04:	fb02 f501 	mul.w	r5, r2, r1
 8010f08:	fb00 f403 	mul.w	r4, r0, r3
 8010f0c:	442c      	add	r4, r5
 8010f0e:	fba0 8902 	umull	r8, r9, r0, r2
 8010f12:	eb04 0309 	add.w	r3, r4, r9
 8010f16:	4699      	mov	r9, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8010f18:	f9b7 0082 	ldrsh.w	r0, [r7, #130]	; 0x82
 8010f1c:	ea4f 71e0 	mov.w	r1, r0, asr #31
			((int64_t)ygradient));
 8010f20:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8010f24:	ea4f 73e2 	mov.w	r3, r2, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8010f28:	fb02 f501 	mul.w	r5, r2, r1
 8010f2c:	fb00 f403 	mul.w	r4, r0, r3
 8010f30:	442c      	add	r4, r5
 8010f32:	fba0 2302 	umull	r2, r3, r0, r2
 8010f36:	18e1      	adds	r1, r4, r3
 8010f38:	460b      	mov	r3, r1
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8010f3a:	eb18 0102 	adds.w	r1, r8, r2
 8010f3e:	61b9      	str	r1, [r7, #24]
 8010f40:	eb49 0303 	adc.w	r3, r9, r3
 8010f44:	61fb      	str	r3, [r7, #28]
 8010f46:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8010f4a:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8010f4e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010f52:	1c51      	adds	r1, r2, #1
 8010f54:	64b9      	str	r1, [r7, #72]	; 0x48
 8010f56:	f143 0300 	adc.w	r3, r3, #0
 8010f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010f5c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8010f60:	462b      	mov	r3, r5
 8010f62:	0fdb      	lsrs	r3, r3, #31
 8010f64:	461a      	mov	r2, r3
 8010f66:	f04f 0300 	mov.w	r3, #0
 8010f6a:	4621      	mov	r1, r4
 8010f6c:	1851      	adds	r1, r2, r1
 8010f6e:	6139      	str	r1, [r7, #16]
 8010f70:	4629      	mov	r1, r5
 8010f72:	eb43 0101 	adc.w	r1, r3, r1
 8010f76:	6179      	str	r1, [r7, #20]
 8010f78:	f04f 0200 	mov.w	r2, #0
 8010f7c:	f04f 0300 	mov.w	r3, #0
 8010f80:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8010f84:	4621      	mov	r1, r4
 8010f86:	084a      	lsrs	r2, r1, #1
 8010f88:	4629      	mov	r1, r5
 8010f8a:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8010f8e:	4629      	mov	r1, r5
 8010f90:	104b      	asrs	r3, r1, #1
 8010f92:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 8010f96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f04f 0100 	mov.w	r1, #0
 8010f9e:	f04f 0200 	mov.w	r2, #0
 8010fa2:	f04f 0300 	mov.w	r3, #0
 8010fa6:	008b      	lsls	r3, r1, #2
 8010fa8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010fac:	0082      	lsls	r2, r0, #2
 8010fae:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010fb2:	1884      	adds	r4, r0, r2
 8010fb4:	60bc      	str	r4, [r7, #8]
 8010fb6:	eb41 0303 	adc.w	r3, r1, r3
 8010fba:	60fb      	str	r3, [r7, #12]
 8010fbc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8010fc0:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53LX_ERROR_NONE)
 8010fc4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d12e      	bne.n	801102a <VL53LX_f_032+0x3d0>
		xtalk_avg = do_division_s(
 8010fcc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8010fd0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010fd4:	1884      	adds	r4, r0, r2
 8010fd6:	643c      	str	r4, [r7, #64]	; 0x40
 8010fd8:	eb41 0303 	adc.w	r3, r1, r3
 8010fdc:	647b      	str	r3, [r7, #68]	; 0x44
 8010fde:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8010fe2:	460b      	mov	r3, r1
 8010fe4:	3301      	adds	r3, #1
 8010fe6:	63bb      	str	r3, [r7, #56]	; 0x38
 8010fe8:	4613      	mov	r3, r2
 8010fea:	f143 0300 	adc.w	r3, r3, #0
 8010fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ff0:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8010ff4:	462b      	mov	r3, r5
 8010ff6:	0fdb      	lsrs	r3, r3, #31
 8010ff8:	461a      	mov	r2, r3
 8010ffa:	f04f 0300 	mov.w	r3, #0
 8010ffe:	4621      	mov	r1, r4
 8011000:	1851      	adds	r1, r2, r1
 8011002:	6039      	str	r1, [r7, #0]
 8011004:	4629      	mov	r1, r5
 8011006:	eb43 0101 	adc.w	r1, r3, r1
 801100a:	6079      	str	r1, [r7, #4]
 801100c:	f04f 0200 	mov.w	r2, #0
 8011010:	f04f 0300 	mov.w	r3, #0
 8011014:	e9d7 4500 	ldrd	r4, r5, [r7]
 8011018:	4621      	mov	r1, r4
 801101a:	084a      	lsrs	r2, r1, #1
 801101c:	4629      	mov	r1, r5
 801101e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8011022:	4629      	mov	r1, r5
 8011024:	104b      	asrs	r3, r1, #1
 8011026:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53LX_ERROR_NONE)
 801102a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 801102e:	2b00      	cmp	r3, #0
 8011030:	d10b      	bne.n	801104a <VL53LX_f_032+0x3f0>
		if (xtalk_avg < 0)
 8011032:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8011036:	2a00      	cmp	r2, #0
 8011038:	f173 0300 	sbcs.w	r3, r3, #0
 801103c:	da05      	bge.n	801104a <VL53LX_f_032+0x3f0>
			xtalk_avg = 0;
 801103e:	f04f 0200 	mov.w	r2, #0
 8011042:	f04f 0300 	mov.w	r3, #0
 8011046:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 801104a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801104c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011050:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 8011052:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8011056:	4618      	mov	r0, r3
 8011058:	3788      	adds	r7, #136	; 0x88
 801105a:	46bd      	mov	sp, r7
 801105c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011060 <VL53LX_f_033>:
	VL53LX_histogram_bin_data_t    *phist_data,
	VL53LX_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53LX_histogram_bin_data_t    *pxtalkcount_data
	)
{
 8011060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011064:	b08d      	sub	sp, #52	; 0x34
 8011066:	af00      	add	r7, sp, #0
 8011068:	60f8      	str	r0, [r7, #12]
 801106a:	60b9      	str	r1, [r7, #8]
 801106c:	607a      	str	r2, [r7, #4]
 801106e:	603b      	str	r3, [r7, #0]


	VL53LX_Error status              = VL53LX_ERROR_NONE;
 8011070:	2300      	movs	r3, #0
 8011072:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	uint64_t xtalk_events_per_spad = 0;
 8011076:	f04f 0200 	mov.w	r2, #0
 801107a:	f04f 0300 	mov.w	r3, #0
 801107e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint64_t xtalk_total_events = 0;
 8011082:	f04f 0200 	mov.w	r2, #0
 8011086:	f04f 0300 	mov.w	r3, #0
 801108a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	uint64_t xtalk_temp_bin = 0;
 801108e:	f04f 0200 	mov.w	r2, #0
 8011092:	f04f 0300 	mov.w	r3, #0
 8011096:	e9c7 2304 	strd	r2, r3, [r7, #16]

	uint8_t  i = 0;
 801109a:	2300      	movs	r3, #0
 801109c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	4618      	mov	r0, r3
 80110a4:	f04f 0100 	mov.w	r1, #0
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80110ae:	461a      	mov	r2, r3
 80110b0:	f04f 0300 	mov.w	r3, #0
 80110b4:	fb02 fc01 	mul.w	ip, r2, r1
 80110b8:	fb00 f603 	mul.w	r6, r0, r3
 80110bc:	4466      	add	r6, ip
 80110be:	fba0 2302 	umull	r2, r3, r0, r2
 80110c2:	18f1      	adds	r1, r6, r3
 80110c4:	460b      	mov	r3, r1
 80110c6:	f512 7afa 	adds.w	sl, r2, #500	; 0x1f4
 80110ca:	f143 0b00 	adc.w	fp, r3, #0
 80110ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80110d2:	f04f 0300 	mov.w	r3, #0
 80110d6:	4650      	mov	r0, sl
 80110d8:	4659      	mov	r1, fp
 80110da:	f7ef f921 	bl	8000320 <__aeabi_uldivmod>
 80110de:	4602      	mov	r2, r0
 80110e0:	460b      	mov	r3, r1
 80110e2:	e9c7 2306 	strd	r2, r3, [r7, #24]




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80110ec:	b29a      	uxth	r2, r3
 80110ee:	f04f 0300 	mov.w	r3, #0
	xtalk_total_events = xtalk_events_per_spad *
 80110f2:	69f9      	ldr	r1, [r7, #28]
 80110f4:	fb02 f001 	mul.w	r0, r2, r1
 80110f8:	69b9      	ldr	r1, [r7, #24]
 80110fa:	fb03 f101 	mul.w	r1, r3, r1
 80110fe:	4401      	add	r1, r0
 8011100:	69b8      	ldr	r0, [r7, #24]
 8011102:	fba0 2302 	umull	r2, r3, r0, r2
 8011106:	4419      	add	r1, r3
 8011108:	460b      	mov	r3, r1
 801110a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 801110e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 8011112:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8011116:	f04f 0200 	mov.w	r2, #0
 801111a:	f04f 0300 	mov.w	r3, #0
 801111e:	0a02      	lsrs	r2, r0, #8
 8011120:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8011124:	0a0b      	lsrs	r3, r1, #8
 8011126:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 801112a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801112e:	f512 6880 	adds.w	r8, r2, #1024	; 0x400
 8011132:	f143 0900 	adc.w	r9, r3, #0
 8011136:	f04f 0200 	mov.w	r2, #0
 801113a:	f04f 0300 	mov.w	r3, #0
 801113e:	ea4f 22d8 	mov.w	r2, r8, lsr #11
 8011142:	ea42 5249 	orr.w	r2, r2, r9, lsl #21
 8011146:	ea4f 23d9 	mov.w	r3, r9, lsr #11
 801114a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (xtalk_total_events > 0xFFFFFFFF)
 801114e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8011152:	2b01      	cmp	r3, #1
 8011154:	bf08      	it	eq
 8011156:	2a00      	cmpeq	r2, #0
 8011158:	d305      	bcc.n	8011166 <VL53LX_f_033+0x106>
		xtalk_total_events = 0xFFFFFFFF;
 801115a:	f04f 32ff 	mov.w	r2, #4294967295
 801115e:	f04f 0300 	mov.w	r3, #0
 8011162:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28





	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 8011166:	2300      	movs	r3, #0
 8011168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801116c:	e035      	b.n	80111da <VL53LX_f_033+0x17a>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 801116e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011172:	68ba      	ldr	r2, [r7, #8]
 8011174:	3302      	adds	r3, #2
 8011176:	009b      	lsls	r3, r3, #2
 8011178:	4413      	add	r3, r2
 801117a:	685b      	ldr	r3, [r3, #4]
 801117c:	461a      	mov	r2, r3
 801117e:	f04f 0300 	mov.w	r3, #0
 8011182:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011184:	fb02 f001 	mul.w	r0, r2, r1
 8011188:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801118a:	fb03 f101 	mul.w	r1, r3, r1
 801118e:	4401      	add	r1, r0
 8011190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011192:	fba0 2302 	umull	r2, r3, r0, r2
 8011196:	4419      	add	r1, r3
 8011198:	460b      	mov	r3, r1
 801119a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 801119e:	e9c7 2304 	strd	r2, r3, [r7, #16]
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 80111a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80111a6:	f512 7400 	adds.w	r4, r2, #512	; 0x200
 80111aa:	f143 0500 	adc.w	r5, r3, #0
 80111ae:	f04f 0200 	mov.w	r2, #0
 80111b2:	f04f 0300 	mov.w	r3, #0
 80111b6:	0aa2      	lsrs	r2, r4, #10
 80111b8:	ea42 5285 	orr.w	r2, r2, r5, lsl #22
 80111bc:	0aab      	lsrs	r3, r5, #10
 80111be:	e9c7 2304 	strd	r2, r3, [r7, #16]

		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 80111c2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80111c6:	6939      	ldr	r1, [r7, #16]
 80111c8:	683b      	ldr	r3, [r7, #0]
 80111ca:	3206      	adds	r2, #6
 80111cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 80111d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111d4:	3301      	adds	r3, #1
 80111d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80111da:	68bb      	ldr	r3, [r7, #8]
 80111dc:	7a9b      	ldrb	r3, [r3, #10]
 80111de:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80111e2:	429a      	cmp	r2, r3
 80111e4:	d3c3      	bcc.n	801116e <VL53LX_f_033+0x10e>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 80111e6:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 80111ea:	4618      	mov	r0, r3
 80111ec:	3734      	adds	r7, #52	; 0x34
 80111ee:	46bd      	mov	sp, r7
 80111f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080111f4 <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b084      	sub	sp, #16
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	60f8      	str	r0, [r7, #12]
 80111fc:	60b9      	str	r1, [r7, #8]
 80111fe:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	68db      	ldr	r3, [r3, #12]
 8011204:	68fa      	ldr	r2, [r7, #12]
 8011206:	8910      	ldrh	r0, [r2, #8]
 8011208:	687a      	ldr	r2, [r7, #4]
 801120a:	b292      	uxth	r2, r2
 801120c:	68b9      	ldr	r1, [r7, #8]
 801120e:	4798      	blx	r3
 8011210:	4603      	mov	r3, r0
}
 8011212:	4618      	mov	r0, r3
 8011214:	3710      	adds	r7, #16
 8011216:	46bd      	mov	sp, r7
 8011218:	bd80      	pop	{r7, pc}

0801121a <_I2CRead>:

int _I2CRead(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 801121a:	b580      	push	{r7, lr}
 801121c:	b084      	sub	sp, #16
 801121e:	af00      	add	r7, sp, #0
 8011220:	60f8      	str	r0, [r7, #12]
 8011222:	60b9      	str	r1, [r7, #8]
 8011224:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	691b      	ldr	r3, [r3, #16]
 801122a:	68fa      	ldr	r2, [r7, #12]
 801122c:	8910      	ldrh	r0, [r2, #8]
 801122e:	687a      	ldr	r2, [r7, #4]
 8011230:	b292      	uxth	r2, r2
 8011232:	68b9      	ldr	r1, [r7, #8]
 8011234:	4798      	blx	r3
 8011236:	4603      	mov	r3, r0
}
 8011238:	4618      	mov	r0, r3
 801123a:	3710      	adds	r7, #16
 801123c:	46bd      	mov	sp, r7
 801123e:	bd80      	pop	{r7, pc}

08011240 <VL53LX_WriteMulti>:

VL53LX_Error VL53LX_WriteMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8011240:	b580      	push	{r7, lr}
 8011242:	b086      	sub	sp, #24
 8011244:	af00      	add	r7, sp, #0
 8011246:	60f8      	str	r0, [r7, #12]
 8011248:	607a      	str	r2, [r7, #4]
 801124a:	603b      	str	r3, [r7, #0]
 801124c:	460b      	mov	r3, r1
 801124e:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8011250:	2300      	movs	r3, #0
 8011252:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8011254:	683b      	ldr	r3, [r7, #0]
 8011256:	2bff      	cmp	r3, #255	; 0xff
 8011258:	d902      	bls.n	8011260 <VL53LX_WriteMulti+0x20>
        return VL53LX_ERROR_INVALID_PARAMS;
 801125a:	f06f 0303 	mvn.w	r3, #3
 801125e:	e01d      	b.n	801129c <VL53LX_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8011260:	897b      	ldrh	r3, [r7, #10]
 8011262:	0a1b      	lsrs	r3, r3, #8
 8011264:	b29b      	uxth	r3, r3
 8011266:	b2da      	uxtb	r2, r3
 8011268:	4b0e      	ldr	r3, [pc, #56]	; (80112a4 <VL53LX_WriteMulti+0x64>)
 801126a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 801126c:	897b      	ldrh	r3, [r7, #10]
 801126e:	b2da      	uxtb	r2, r3
 8011270:	4b0c      	ldr	r3, [pc, #48]	; (80112a4 <VL53LX_WriteMulti+0x64>)
 8011272:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8011274:	683a      	ldr	r2, [r7, #0]
 8011276:	6879      	ldr	r1, [r7, #4]
 8011278:	480b      	ldr	r0, [pc, #44]	; (80112a8 <VL53LX_WriteMulti+0x68>)
 801127a:	f003 ff5b 	bl	8015134 <memcpy>
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 801127e:	683b      	ldr	r3, [r7, #0]
 8011280:	3302      	adds	r3, #2
 8011282:	461a      	mov	r2, r3
 8011284:	4907      	ldr	r1, [pc, #28]	; (80112a4 <VL53LX_WriteMulti+0x64>)
 8011286:	68f8      	ldr	r0, [r7, #12]
 8011288:	f7ff ffb4 	bl	80111f4 <_I2CWrite>
 801128c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801128e:	693b      	ldr	r3, [r7, #16]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d001      	beq.n	8011298 <VL53LX_WriteMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011294:	23f3      	movs	r3, #243	; 0xf3
 8011296:	75fb      	strb	r3, [r7, #23]
    }
    VL53LX_PutI2cBus();
    return Status;
 8011298:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801129c:	4618      	mov	r0, r3
 801129e:	3718      	adds	r7, #24
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bd80      	pop	{r7, pc}
 80112a4:	200072cc 	.word	0x200072cc
 80112a8:	200072ce 	.word	0x200072ce

080112ac <VL53LX_ReadMulti>:

VL53LX_Error VL53LX_ReadMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b086      	sub	sp, #24
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	60f8      	str	r0, [r7, #12]
 80112b4:	607a      	str	r2, [r7, #4]
 80112b6:	603b      	str	r3, [r7, #0]
 80112b8:	460b      	mov	r3, r1
 80112ba:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 80112bc:	2300      	movs	r3, #0
 80112be:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80112c0:	897b      	ldrh	r3, [r7, #10]
 80112c2:	0a1b      	lsrs	r3, r3, #8
 80112c4:	b29b      	uxth	r3, r3
 80112c6:	b2da      	uxtb	r2, r3
 80112c8:	4b12      	ldr	r3, [pc, #72]	; (8011314 <VL53LX_ReadMulti+0x68>)
 80112ca:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80112cc:	897b      	ldrh	r3, [r7, #10]
 80112ce:	b2da      	uxtb	r2, r3
 80112d0:	4b10      	ldr	r3, [pc, #64]	; (8011314 <VL53LX_ReadMulti+0x68>)
 80112d2:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80112d4:	2202      	movs	r2, #2
 80112d6:	490f      	ldr	r1, [pc, #60]	; (8011314 <VL53LX_ReadMulti+0x68>)
 80112d8:	68f8      	ldr	r0, [r7, #12]
 80112da:	f7ff ff8b 	bl	80111f4 <_I2CWrite>
 80112de:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80112e0:	693b      	ldr	r3, [r7, #16]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d002      	beq.n	80112ec <VL53LX_ReadMulti+0x40>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80112e6:	23f3      	movs	r3, #243	; 0xf3
 80112e8:	75fb      	strb	r3, [r7, #23]
        goto done;
 80112ea:	e00c      	b.n	8011306 <VL53LX_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 80112ec:	683a      	ldr	r2, [r7, #0]
 80112ee:	6879      	ldr	r1, [r7, #4]
 80112f0:	68f8      	ldr	r0, [r7, #12]
 80112f2:	f7ff ff92 	bl	801121a <_I2CRead>
 80112f6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80112f8:	693b      	ldr	r3, [r7, #16]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d002      	beq.n	8011304 <VL53LX_ReadMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80112fe:	23f3      	movs	r3, #243	; 0xf3
 8011300:	75fb      	strb	r3, [r7, #23]
 8011302:	e000      	b.n	8011306 <VL53LX_ReadMulti+0x5a>
    }
done:
 8011304:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 8011306:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801130a:	4618      	mov	r0, r3
 801130c:	3718      	adds	r7, #24
 801130e:	46bd      	mov	sp, r7
 8011310:	bd80      	pop	{r7, pc}
 8011312:	bf00      	nop
 8011314:	200072cc 	.word	0x200072cc

08011318 <VL53LX_WrByte>:

VL53LX_Error VL53LX_WrByte(VL53LX_DEV Dev, uint16_t index, uint8_t data) {
 8011318:	b580      	push	{r7, lr}
 801131a:	b084      	sub	sp, #16
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
 8011320:	460b      	mov	r3, r1
 8011322:	807b      	strh	r3, [r7, #2]
 8011324:	4613      	mov	r3, r2
 8011326:	707b      	strb	r3, [r7, #1]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8011328:	2300      	movs	r3, #0
 801132a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 801132c:	887b      	ldrh	r3, [r7, #2]
 801132e:	0a1b      	lsrs	r3, r3, #8
 8011330:	b29b      	uxth	r3, r3
 8011332:	b2da      	uxtb	r2, r3
 8011334:	4b0c      	ldr	r3, [pc, #48]	; (8011368 <VL53LX_WrByte+0x50>)
 8011336:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8011338:	887b      	ldrh	r3, [r7, #2]
 801133a:	b2da      	uxtb	r2, r3
 801133c:	4b0a      	ldr	r3, [pc, #40]	; (8011368 <VL53LX_WrByte+0x50>)
 801133e:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8011340:	4a09      	ldr	r2, [pc, #36]	; (8011368 <VL53LX_WrByte+0x50>)
 8011342:	787b      	ldrb	r3, [r7, #1]
 8011344:	7093      	strb	r3, [r2, #2]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8011346:	2203      	movs	r2, #3
 8011348:	4907      	ldr	r1, [pc, #28]	; (8011368 <VL53LX_WrByte+0x50>)
 801134a:	6878      	ldr	r0, [r7, #4]
 801134c:	f7ff ff52 	bl	80111f4 <_I2CWrite>
 8011350:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8011352:	68bb      	ldr	r3, [r7, #8]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d001      	beq.n	801135c <VL53LX_WrByte+0x44>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011358:	23f3      	movs	r3, #243	; 0xf3
 801135a:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 801135c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011360:	4618      	mov	r0, r3
 8011362:	3710      	adds	r7, #16
 8011364:	46bd      	mov	sp, r7
 8011366:	bd80      	pop	{r7, pc}
 8011368:	200072cc 	.word	0x200072cc

0801136c <VL53LX_WrWord>:

VL53LX_Error VL53LX_WrWord(VL53LX_DEV Dev, uint16_t index, uint16_t data) {
 801136c:	b580      	push	{r7, lr}
 801136e:	b084      	sub	sp, #16
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
 8011374:	460b      	mov	r3, r1
 8011376:	807b      	strh	r3, [r7, #2]
 8011378:	4613      	mov	r3, r2
 801137a:	803b      	strh	r3, [r7, #0]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 801137c:	2300      	movs	r3, #0
 801137e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8011380:	887b      	ldrh	r3, [r7, #2]
 8011382:	0a1b      	lsrs	r3, r3, #8
 8011384:	b29b      	uxth	r3, r3
 8011386:	b2da      	uxtb	r2, r3
 8011388:	4b10      	ldr	r3, [pc, #64]	; (80113cc <VL53LX_WrWord+0x60>)
 801138a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 801138c:	887b      	ldrh	r3, [r7, #2]
 801138e:	b2da      	uxtb	r2, r3
 8011390:	4b0e      	ldr	r3, [pc, #56]	; (80113cc <VL53LX_WrWord+0x60>)
 8011392:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 8011394:	883b      	ldrh	r3, [r7, #0]
 8011396:	0a1b      	lsrs	r3, r3, #8
 8011398:	b29b      	uxth	r3, r3
 801139a:	b2da      	uxtb	r2, r3
 801139c:	4b0b      	ldr	r3, [pc, #44]	; (80113cc <VL53LX_WrWord+0x60>)
 801139e:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 80113a0:	883b      	ldrh	r3, [r7, #0]
 80113a2:	b2da      	uxtb	r2, r3
 80113a4:	4b09      	ldr	r3, [pc, #36]	; (80113cc <VL53LX_WrWord+0x60>)
 80113a6:	70da      	strb	r2, [r3, #3]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 80113a8:	2204      	movs	r2, #4
 80113aa:	4908      	ldr	r1, [pc, #32]	; (80113cc <VL53LX_WrWord+0x60>)
 80113ac:	6878      	ldr	r0, [r7, #4]
 80113ae:	f7ff ff21 	bl	80111f4 <_I2CWrite>
 80113b2:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80113b4:	68bb      	ldr	r3, [r7, #8]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d001      	beq.n	80113be <VL53LX_WrWord+0x52>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80113ba:	23f3      	movs	r3, #243	; 0xf3
 80113bc:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 80113be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80113c2:	4618      	mov	r0, r3
 80113c4:	3710      	adds	r7, #16
 80113c6:	46bd      	mov	sp, r7
 80113c8:	bd80      	pop	{r7, pc}
 80113ca:	bf00      	nop
 80113cc:	200072cc 	.word	0x200072cc

080113d0 <VL53LX_RdByte>:
    Status = VL53LX_WrByte(Dev, index, data);
done:
    return Status;
}

VL53LX_Error VL53LX_RdByte(VL53LX_DEV Dev, uint16_t index, uint8_t *data) {
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b086      	sub	sp, #24
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	60f8      	str	r0, [r7, #12]
 80113d8:	460b      	mov	r3, r1
 80113da:	607a      	str	r2, [r7, #4]
 80113dc:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 80113de:	2300      	movs	r3, #0
 80113e0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 80113e2:	897b      	ldrh	r3, [r7, #10]
 80113e4:	0a1b      	lsrs	r3, r3, #8
 80113e6:	b29b      	uxth	r3, r3
 80113e8:	b2da      	uxtb	r2, r3
 80113ea:	4b12      	ldr	r3, [pc, #72]	; (8011434 <VL53LX_RdByte+0x64>)
 80113ec:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80113ee:	897b      	ldrh	r3, [r7, #10]
 80113f0:	b2da      	uxtb	r2, r3
 80113f2:	4b10      	ldr	r3, [pc, #64]	; (8011434 <VL53LX_RdByte+0x64>)
 80113f4:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80113f6:	2202      	movs	r2, #2
 80113f8:	490e      	ldr	r1, [pc, #56]	; (8011434 <VL53LX_RdByte+0x64>)
 80113fa:	68f8      	ldr	r0, [r7, #12]
 80113fc:	f7ff fefa 	bl	80111f4 <_I2CWrite>
 8011400:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8011402:	693b      	ldr	r3, [r7, #16]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d002      	beq.n	801140e <VL53LX_RdByte+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011408:	23f3      	movs	r3, #243	; 0xf3
 801140a:	75fb      	strb	r3, [r7, #23]
        goto done;
 801140c:	e00c      	b.n	8011428 <VL53LX_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 801140e:	2201      	movs	r2, #1
 8011410:	6879      	ldr	r1, [r7, #4]
 8011412:	68f8      	ldr	r0, [r7, #12]
 8011414:	f7ff ff01 	bl	801121a <_I2CRead>
 8011418:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801141a:	693b      	ldr	r3, [r7, #16]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d002      	beq.n	8011426 <VL53LX_RdByte+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011420:	23f3      	movs	r3, #243	; 0xf3
 8011422:	75fb      	strb	r3, [r7, #23]
 8011424:	e000      	b.n	8011428 <VL53LX_RdByte+0x58>
    }
done:
 8011426:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 8011428:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801142c:	4618      	mov	r0, r3
 801142e:	3718      	adds	r7, #24
 8011430:	46bd      	mov	sp, r7
 8011432:	bd80      	pop	{r7, pc}
 8011434:	200072cc 	.word	0x200072cc

08011438 <VL53LX_RdWord>:

VL53LX_Error VL53LX_RdWord(VL53LX_DEV Dev, uint16_t index, uint16_t *data) {
 8011438:	b580      	push	{r7, lr}
 801143a:	b086      	sub	sp, #24
 801143c:	af00      	add	r7, sp, #0
 801143e:	60f8      	str	r0, [r7, #12]
 8011440:	460b      	mov	r3, r1
 8011442:	607a      	str	r2, [r7, #4]
 8011444:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8011446:	2300      	movs	r3, #0
 8011448:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 801144a:	897b      	ldrh	r3, [r7, #10]
 801144c:	0a1b      	lsrs	r3, r3, #8
 801144e:	b29b      	uxth	r3, r3
 8011450:	b2da      	uxtb	r2, r3
 8011452:	4b18      	ldr	r3, [pc, #96]	; (80114b4 <VL53LX_RdWord+0x7c>)
 8011454:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8011456:	897b      	ldrh	r3, [r7, #10]
 8011458:	b2da      	uxtb	r2, r3
 801145a:	4b16      	ldr	r3, [pc, #88]	; (80114b4 <VL53LX_RdWord+0x7c>)
 801145c:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 801145e:	2202      	movs	r2, #2
 8011460:	4914      	ldr	r1, [pc, #80]	; (80114b4 <VL53LX_RdWord+0x7c>)
 8011462:	68f8      	ldr	r0, [r7, #12]
 8011464:	f7ff fec6 	bl	80111f4 <_I2CWrite>
 8011468:	6138      	str	r0, [r7, #16]

    if( status_int ){
 801146a:	693b      	ldr	r3, [r7, #16]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d002      	beq.n	8011476 <VL53LX_RdWord+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011470:	23f3      	movs	r3, #243	; 0xf3
 8011472:	75fb      	strb	r3, [r7, #23]
        goto done;
 8011474:	e017      	b.n	80114a6 <VL53LX_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8011476:	2202      	movs	r2, #2
 8011478:	490e      	ldr	r1, [pc, #56]	; (80114b4 <VL53LX_RdWord+0x7c>)
 801147a:	68f8      	ldr	r0, [r7, #12]
 801147c:	f7ff fecd 	bl	801121a <_I2CRead>
 8011480:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8011482:	693b      	ldr	r3, [r7, #16]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d002      	beq.n	801148e <VL53LX_RdWord+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011488:	23f3      	movs	r3, #243	; 0xf3
 801148a:	75fb      	strb	r3, [r7, #23]
        goto done;
 801148c:	e00b      	b.n	80114a6 <VL53LX_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 801148e:	4b09      	ldr	r3, [pc, #36]	; (80114b4 <VL53LX_RdWord+0x7c>)
 8011490:	781b      	ldrb	r3, [r3, #0]
 8011492:	b29b      	uxth	r3, r3
 8011494:	021b      	lsls	r3, r3, #8
 8011496:	b29a      	uxth	r2, r3
 8011498:	4b06      	ldr	r3, [pc, #24]	; (80114b4 <VL53LX_RdWord+0x7c>)
 801149a:	785b      	ldrb	r3, [r3, #1]
 801149c:	b29b      	uxth	r3, r3
 801149e:	4413      	add	r3, r2
 80114a0:	b29a      	uxth	r2, r3
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	801a      	strh	r2, [r3, #0]
done:
    VL53LX_PutI2cBus();
    return Status;
 80114a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80114aa:	4618      	mov	r0, r3
 80114ac:	3718      	adds	r7, #24
 80114ae:	46bd      	mov	sp, r7
 80114b0:	bd80      	pop	{r7, pc}
 80114b2:	bf00      	nop
 80114b4:	200072cc 	.word	0x200072cc

080114b8 <VL53LX_GetTickCount>:
    VL53LX_PutI2cBus();
    return Status;
}

VL53LX_Error VL53LX_GetTickCount(VL53LX_DEV Dev, uint32_t *ptick_count_ms)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b084      	sub	sp, #16
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
 80114c0:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53LX_Error status  = VL53LX_ERROR_NONE;
 80114c2:	2300      	movs	r3, #0
 80114c4:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	695b      	ldr	r3, [r3, #20]
 80114ca:	4798      	blx	r3
 80114cc:	4603      	mov	r3, r0
 80114ce:	461a      	mov	r2, r3
 80114d0:	683b      	ldr	r3, [r7, #0]
 80114d2:	601a      	str	r2, [r3, #0]
		VL53LX_TRACE_LEVEL_DEBUG,
		"VL53LX_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 80114d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80114d8:	4618      	mov	r0, r3
 80114da:	3710      	adds	r7, #16
 80114dc:	46bd      	mov	sp, r7
 80114de:	bd80      	pop	{r7, pc}

080114e0 <VL53LX_WaitMs>:
	
	trace_print(VL53LX_TRACE_LEVEL_INFO, "VL53LX_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53LX_ERROR_NONE;
}

VL53LX_Error VL53LX_WaitMs(VL53LX_DEV Dev, int32_t wait_ms){
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b082      	sub	sp, #8
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
 80114e8:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_ms);
 80114ea:	683b      	ldr	r3, [r7, #0]
 80114ec:	4619      	mov	r1, r3
 80114ee:	6878      	ldr	r0, [r7, #4]
 80114f0:	f000 f8b8 	bl	8011664 <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 80114f4:	2300      	movs	r3, #0
}
 80114f6:	4618      	mov	r0, r3
 80114f8:	3708      	adds	r7, #8
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}
	...

08011500 <VL53LX_WaitUs>:

VL53LX_Error VL53LX_WaitUs(VL53LX_DEV Dev, int32_t wait_us){
 8011500:	b580      	push	{r7, lr}
 8011502:	b082      	sub	sp, #8
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]
 8011508:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_us/1000);
 801150a:	683b      	ldr	r3, [r7, #0]
 801150c:	4a07      	ldr	r2, [pc, #28]	; (801152c <VL53LX_WaitUs+0x2c>)
 801150e:	fb82 1203 	smull	r1, r2, r2, r3
 8011512:	1192      	asrs	r2, r2, #6
 8011514:	17db      	asrs	r3, r3, #31
 8011516:	1ad3      	subs	r3, r2, r3
 8011518:	4619      	mov	r1, r3
 801151a:	6878      	ldr	r0, [r7, #4]
 801151c:	f000 f8a2 	bl	8011664 <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 8011520:	2300      	movs	r3, #0
}
 8011522:	4618      	mov	r0, r3
 8011524:	3708      	adds	r7, #8
 8011526:	46bd      	mov	sp, r7
 8011528:	bd80      	pop	{r7, pc}
 801152a:	bf00      	nop
 801152c:	10624dd3 	.word	0x10624dd3

08011530 <VL53LX_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8011530:	b590      	push	{r4, r7, lr}
 8011532:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8011536:	af00      	add	r7, sp, #0
 8011538:	f107 040c 	add.w	r4, r7, #12
 801153c:	6020      	str	r0, [r4, #0]
 801153e:	f107 0008 	add.w	r0, r7, #8
 8011542:	6001      	str	r1, [r0, #0]
 8011544:	4619      	mov	r1, r3
 8011546:	1dbb      	adds	r3, r7, #6
 8011548:	801a      	strh	r2, [r3, #0]
 801154a:	1d7b      	adds	r3, r7, #5
 801154c:	460a      	mov	r2, r1
 801154e:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53LX_Error status         = VL53LX_ERROR_NONE;
 8011550:	2300      	movs	r3, #0
 8011552:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 8011556:	2300      	movs	r3, #0
 8011558:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 801155c:	2300      	movs	r3, #0
 801155e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 8011562:	2300      	movs	r3, #0
 8011564:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 8011568:	2300      	movs	r3, #0
 801156a:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 801156e:	2300      	movs	r3, #0
 8011570:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53LX_get_register_name(
			index,
			register_name);
#else
	VL53LX_COPYSTRING(register_name, "");
 8011574:	f107 0310 	add.w	r3, r7, #16
 8011578:	f240 12ff 	movw	r2, #511	; 0x1ff
 801157c:	4938      	ldr	r1, [pc, #224]	; (8011660 <VL53LX_WaitValueMaskEx+0x130>)
 801157e:	4618      	mov	r0, r3
 8011580:	f003 fe7c 	bl	801527c <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53LX_GetTickCount(Dev, &start_time_ms);
 8011584:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8011588:	f107 030c 	add.w	r3, r7, #12
 801158c:	4611      	mov	r1, r2
 801158e:	6818      	ldr	r0, [r3, #0]
 8011590:	f7ff ff92 	bl	80114b8 <VL53LX_GetTickCount>
	VL53LX_set_trace_functions(VL53LX_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53LX_ERROR_NONE) &&
 8011594:	e042      	b.n	801161c <VL53LX_WaitValueMaskEx+0xec>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53LX_ERROR_NONE)
 8011596:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 801159a:	2b00      	cmp	r3, #0
 801159c:	d10b      	bne.n	80115b6 <VL53LX_WaitValueMaskEx+0x86>
			status = VL53LX_RdByte(
 801159e:	f207 2213 	addw	r2, r7, #531	; 0x213
 80115a2:	1dbb      	adds	r3, r7, #6
 80115a4:	8819      	ldrh	r1, [r3, #0]
 80115a6:	f107 030c 	add.w	r3, r7, #12
 80115aa:	6818      	ldr	r0, [r3, #0]
 80115ac:	f7ff ff10 	bl	80113d0 <VL53LX_RdByte>
 80115b0:	4603      	mov	r3, r0
 80115b2:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 80115b6:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 80115ba:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 80115be:	4013      	ands	r3, r2
 80115c0:	b2db      	uxtb	r3, r3
 80115c2:	1d7a      	adds	r2, r7, #5
 80115c4:	7812      	ldrb	r2, [r2, #0]
 80115c6:	429a      	cmp	r2, r3
 80115c8:	d102      	bne.n	80115d0 <VL53LX_WaitValueMaskEx+0xa0>
			found = 1;
 80115ca:	2301      	movs	r3, #1
 80115cc:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53LX_ERROR_NONE  &&
 80115d0:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d112      	bne.n	80115fe <VL53LX_WaitValueMaskEx+0xce>
 80115d8:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d10e      	bne.n	80115fe <VL53LX_WaitValueMaskEx+0xce>
			found == 0 &&
 80115e0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d00a      	beq.n	80115fe <VL53LX_WaitValueMaskEx+0xce>
			poll_delay_ms > 0)
			status = VL53LX_WaitMs(
 80115e8:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 80115ec:	f107 030c 	add.w	r3, r7, #12
 80115f0:	4611      	mov	r1, r2
 80115f2:	6818      	ldr	r0, [r3, #0]
 80115f4:	f7ff ff74 	bl	80114e0 <VL53LX_WaitMs>
 80115f8:	4603      	mov	r3, r0
 80115fa:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53LX_GetTickCount(Dev, &current_time_ms);
 80115fe:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8011602:	f107 030c 	add.w	r3, r7, #12
 8011606:	4611      	mov	r1, r2
 8011608:	6818      	ldr	r0, [r3, #0]
 801160a:	f7ff ff55 	bl	80114b8 <VL53LX_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 801160e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8011612:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8011616:	1ad3      	subs	r3, r2, r3
 8011618:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53LX_ERROR_NONE) &&
 801161c:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8011620:	2b00      	cmp	r3, #0
 8011622:	d10a      	bne.n	801163a <VL53LX_WaitValueMaskEx+0x10a>
 8011624:	f107 0308 	add.w	r3, r7, #8
 8011628:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	429a      	cmp	r2, r3
 8011630:	d203      	bcs.n	801163a <VL53LX_WaitValueMaskEx+0x10a>
		   (polling_time_ms < timeout_ms) &&
 8011632:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8011636:	2b00      	cmp	r3, #0
 8011638:	d0ad      	beq.n	8011596 <VL53LX_WaitValueMaskEx+0x66>
#ifdef VL53LX_LOG_ENABLE
	/* Restore function logging */
	VL53LX_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53LX_ERROR_NONE)
 801163a:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 801163e:	2b00      	cmp	r3, #0
 8011640:	d106      	bne.n	8011650 <VL53LX_WaitValueMaskEx+0x120>
 8011642:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8011646:	2b00      	cmp	r3, #0
 8011648:	d102      	bne.n	8011650 <VL53LX_WaitValueMaskEx+0x120>
		status = VL53LX_ERROR_TIME_OUT;
 801164a:	23f9      	movs	r3, #249	; 0xf9
 801164c:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 8011650:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 8011654:	4618      	mov	r0, r3
 8011656:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 801165a:	46bd      	mov	sp, r7
 801165c:	bd90      	pop	{r4, r7, pc}
 801165e:	bf00      	nop
 8011660:	08016304 	.word	0x08016304

08011664 <VL53LX_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53LX_Error
  */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b084      	sub	sp, #16
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
 801166c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	695b      	ldr	r3, [r3, #20]
 8011672:	4798      	blx	r3
 8011674:	4603      	mov	r3, r0
 8011676:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 8011678:	bf00      	nop
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	695b      	ldr	r3, [r3, #20]
 801167e:	4798      	blx	r3
 8011680:	4603      	mov	r3, r0
 8011682:	461a      	mov	r2, r3
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	1ad3      	subs	r3, r2, r3
 8011688:	683a      	ldr	r2, [r7, #0]
 801168a:	429a      	cmp	r2, r3
 801168c:	d8f5      	bhi.n	801167a <VL53LX_Delay+0x16>
  {
  }

  return VL53LX_ERROR_NONE;
 801168e:	2300      	movs	r3, #0
}
 8011690:	4618      	mov	r0, r3
 8011692:	3710      	adds	r7, #16
 8011694:	46bd      	mov	sp, r7
 8011696:	bd80      	pop	{r7, pc}

08011698 <VL53LX_ipp_hist_process_data>:
	VL53LX_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53LX_range_results_t            *presults)
{
 8011698:	b580      	push	{r7, lr}
 801169a:	b08c      	sub	sp, #48	; 0x30
 801169c:	af06      	add	r7, sp, #24
 801169e:	60f8      	str	r0, [r7, #12]
 80116a0:	60b9      	str	r1, [r7, #8]
 80116a2:	607a      	str	r2, [r7, #4]
 80116a4:	603b      	str	r3, [r7, #0]



	VL53LX_Error status         = VL53LX_ERROR_NONE;
 80116a6:	2300      	movs	r3, #0
 80116a8:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53LX_hist_process_data(
 80116aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ac:	9304      	str	r3, [sp, #16]
 80116ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116b0:	9303      	str	r3, [sp, #12]
 80116b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116b4:	9302      	str	r3, [sp, #8]
 80116b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116b8:	9301      	str	r3, [sp, #4]
 80116ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116bc:	9300      	str	r3, [sp, #0]
 80116be:	6a3b      	ldr	r3, [r7, #32]
 80116c0:	683a      	ldr	r2, [r7, #0]
 80116c2:	6879      	ldr	r1, [r7, #4]
 80116c4:	68b8      	ldr	r0, [r7, #8]
 80116c6:	f7fd f98c 	bl	800e9e2 <VL53LX_hist_process_data>
 80116ca:	4603      	mov	r3, r0
 80116cc:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 80116ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80116d2:	4618      	mov	r0, r3
 80116d4:	3718      	adds	r7, #24
 80116d6:	46bd      	mov	sp, r7
 80116d8:	bd80      	pop	{r7, pc}

080116da <VL53L3CX_RegisterBusIO>:
  * @param pObj    vl53l3cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_RegisterBusIO(VL53L3CX_Object_t *pObj, VL53L3CX_IO_t *pIO)
{
 80116da:	b580      	push	{r7, lr}
 80116dc:	b084      	sub	sp, #16
 80116de:	af00      	add	r7, sp, #0
 80116e0:	6078      	str	r0, [r7, #4]
 80116e2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d103      	bne.n	80116f2 <VL53L3CX_RegisterBusIO+0x18>
  {
    ret = VL53L3CX_INVALID_PARAM;
 80116ea:	f06f 0301 	mvn.w	r3, #1
 80116ee:	60fb      	str	r3, [r7, #12]
 80116f0:	e023      	b.n	801173a <VL53L3CX_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	681a      	ldr	r2, [r3, #0]
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	685a      	ldr	r2, [r3, #4]
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8011702:	683b      	ldr	r3, [r7, #0]
 8011704:	891a      	ldrh	r2, [r3, #8]
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 801170a:	683b      	ldr	r3, [r7, #0]
 801170c:	68da      	ldr	r2, [r3, #12]
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	691a      	ldr	r2, [r3, #16]
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	695a      	ldr	r2, [r3, #20]
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d004      	beq.n	8011734 <VL53L3CX_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	4798      	blx	r3
 8011730:	60f8      	str	r0, [r7, #12]
 8011732:	e002      	b.n	801173a <VL53L3CX_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L3CX_ERROR;
 8011734:	f04f 33ff 	mov.w	r3, #4294967295
 8011738:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 801173a:	68fb      	ldr	r3, [r7, #12]
}
 801173c:	4618      	mov	r0, r3
 801173e:	3710      	adds	r7, #16
 8011740:	46bd      	mov	sp, r7
 8011742:	bd80      	pop	{r7, pc}

08011744 <VL53L3CX_Init>:
  * @brief Initializes the vl53l3cx.
  * @param pObj    vl53l3cx context object.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_Init(VL53L3CX_Object_t *pObj)
{
 8011744:	b580      	push	{r7, lr}
 8011746:	b084      	sub	sp, #16
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011752:	3328      	adds	r3, #40	; 0x28
 8011754:	781b      	ldrb	r3, [r3, #0]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d003      	beq.n	8011762 <VL53L3CX_Init+0x1e>
  {
    ret =  VL53L3CX_ERROR;
 801175a:	f04f 33ff 	mov.w	r3, #4294967295
 801175e:	60fb      	str	r3, [r7, #12]
 8011760:	e043      	b.n	80117ea <VL53L3CX_Init+0xa6>
  }
  else if (VL53LX_WaitDeviceBooted(pObj) != VL53LX_ERROR_NONE)
 8011762:	6878      	ldr	r0, [r7, #4]
 8011764:	f7f0 fcb8 	bl	80020d8 <VL53LX_WaitDeviceBooted>
 8011768:	4603      	mov	r3, r0
 801176a:	2b00      	cmp	r3, #0
 801176c:	d003      	beq.n	8011776 <VL53L3CX_Init+0x32>
  {
    ret =  VL53L3CX_ERROR;
 801176e:	f04f 33ff 	mov.w	r3, #4294967295
 8011772:	60fb      	str	r3, [r7, #12]
 8011774:	e039      	b.n	80117ea <VL53L3CX_Init+0xa6>
  }
  else if (VL53LX_DataInit(pObj) != VL53LX_ERROR_NONE)
 8011776:	6878      	ldr	r0, [r7, #4]
 8011778:	f7f0 fc53 	bl	8002022 <VL53LX_DataInit>
 801177c:	4603      	mov	r3, r0
 801177e:	2b00      	cmp	r3, #0
 8011780:	d003      	beq.n	801178a <VL53L3CX_Init+0x46>
  {
    ret = VL53L3CX_ERROR;
 8011782:	f04f 33ff 	mov.w	r3, #4294967295
 8011786:	60fb      	str	r3, [r7, #12]
 8011788:	e02f      	b.n	80117ea <VL53L3CX_Init+0xa6>
  }
  else if (VL53LX_PerformRefSpadManagement(pObj) != VL53LX_ERROR_NONE)
 801178a:	6878      	ldr	r0, [r7, #4]
 801178c:	f7f1 fb46 	bl	8002e1c <VL53LX_PerformRefSpadManagement>
 8011790:	4603      	mov	r3, r0
 8011792:	2b00      	cmp	r3, #0
 8011794:	d003      	beq.n	801179e <VL53L3CX_Init+0x5a>
  {
    ret = VL53L3CX_ERROR;
 8011796:	f04f 33ff 	mov.w	r3, #4294967295
 801179a:	60fb      	str	r3, [r7, #12]
 801179c:	e025      	b.n	80117ea <VL53L3CX_Init+0xa6>
  }
  else
  {
    pObj->IsRanging = 0;
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80117a4:	3329      	adds	r3, #41	; 0x29
 80117a6:	2200      	movs	r2, #0
 80117a8:	701a      	strb	r2, [r3, #0]
    pObj->IsBlocking = 0;
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80117b0:	332a      	adds	r3, #42	; 0x2a
 80117b2:	2200      	movs	r2, #0
 80117b4:	701a      	strb	r2, [r3, #0]
    pObj->IsContinuous = 0;
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80117bc:	332b      	adds	r3, #43	; 0x2b
 80117be:	2200      	movs	r2, #0
 80117c0:	701a      	strb	r2, [r3, #0]
    pObj->IsAmbientEnabled = 0;
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80117c8:	332c      	adds	r3, #44	; 0x2c
 80117ca:	2200      	movs	r2, #0
 80117cc:	701a      	strb	r2, [r3, #0]
    pObj->IsSignalEnabled = 0;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80117d4:	332d      	adds	r3, #45	; 0x2d
 80117d6:	2200      	movs	r2, #0
 80117d8:	701a      	strb	r2, [r3, #0]
    pObj->IsInitialized = 1;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80117e0:	3328      	adds	r3, #40	; 0x28
 80117e2:	2201      	movs	r2, #1
 80117e4:	701a      	strb	r2, [r3, #0]
    ret = VL53L3CX_OK;
 80117e6:	2300      	movs	r3, #0
 80117e8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80117ea:	68fb      	ldr	r3, [r7, #12]
}
 80117ec:	4618      	mov	r0, r3
 80117ee:	3710      	adds	r7, #16
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd80      	pop	{r7, pc}

080117f4 <VL53L3CX_DeInit>:
  * @brief Deinitializes the vl53l3cx.
  * @param pObj    vl53l3cx context object.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_DeInit(VL53L3CX_Object_t *pObj)
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b084      	sub	sp, #16
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
  int32_t ret = VL53L3CX_ERROR;
 80117fc:	f04f 33ff 	mov.w	r3, #4294967295
 8011800:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 1U)
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011808:	3328      	adds	r3, #40	; 0x28
 801180a:	781b      	ldrb	r3, [r3, #0]
 801180c:	2b01      	cmp	r3, #1
 801180e:	d111      	bne.n	8011834 <VL53L3CX_DeInit+0x40>
  {
    /* De-initialize the vl53l3cx interface */
    if (pObj->IO.DeInit() != 0)
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	685b      	ldr	r3, [r3, #4]
 8011814:	4798      	blx	r3
 8011816:	4603      	mov	r3, r0
 8011818:	2b00      	cmp	r3, #0
 801181a:	d003      	beq.n	8011824 <VL53L3CX_DeInit+0x30>
    {
      ret = VL53L3CX_ERROR;
 801181c:	f04f 33ff 	mov.w	r3, #4294967295
 8011820:	60fb      	str	r3, [r7, #12]
 8011822:	e007      	b.n	8011834 <VL53L3CX_DeInit+0x40>
    }
    else
    {
      ret = VL53L3CX_OK;
 8011824:	2300      	movs	r3, #0
 8011826:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801182e:	3328      	adds	r3, #40	; 0x28
 8011830:	2200      	movs	r2, #0
 8011832:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8011834:	68fb      	ldr	r3, [r7, #12]
}
 8011836:	4618      	mov	r0, r3
 8011838:	3710      	adds	r7, #16
 801183a:	46bd      	mov	sp, r7
 801183c:	bd80      	pop	{r7, pc}

0801183e <VL53L3CX_ReadID>:
  * @param pObj    vl53l3cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ReadID(VL53L3CX_Object_t *pObj, uint32_t *pId)
{
 801183e:	b580      	push	{r7, lr}
 8011840:	b084      	sub	sp, #16
 8011842:	af00      	add	r7, sp, #0
 8011844:	6078      	str	r0, [r7, #4]
 8011846:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pId == NULL))
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d002      	beq.n	8011854 <VL53L3CX_ReadID+0x16>
 801184e:	683b      	ldr	r3, [r7, #0]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d103      	bne.n	801185c <VL53L3CX_ReadID+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011854:	f06f 0301 	mvn.w	r3, #1
 8011858:	60fb      	str	r3, [r7, #12]
 801185a:	e00a      	b.n	8011872 <VL53L3CX_ReadID+0x34>
  }
  else
  {
    *pId = 0;
 801185c:	683b      	ldr	r3, [r7, #0]
 801185e:	2200      	movs	r2, #0
 8011860:	601a      	str	r2, [r3, #0]
    ret = VL53LX_RdWord(pObj, VL53L3CX_ID_REG, (uint16_t *) pId);
 8011862:	683a      	ldr	r2, [r7, #0]
 8011864:	f240 110f 	movw	r1, #271	; 0x10f
 8011868:	6878      	ldr	r0, [r7, #4]
 801186a:	f7ff fde5 	bl	8011438 <VL53LX_RdWord>
 801186e:	4603      	mov	r3, r0
 8011870:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011872:	68fb      	ldr	r3, [r7, #12]
}
 8011874:	4618      	mov	r0, r3
 8011876:	3710      	adds	r7, #16
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}

0801187c <VL53L3CX_GetCapabilities>:
  * @param pObj    vl53l3cx context object.
  * @param pCap    Pointer to the vl53l3cx capabilities.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetCapabilities(VL53L3CX_Object_t *pObj, VL53L3CX_Capabilities_t *pCap)
{
 801187c:	b480      	push	{r7}
 801187e:	b085      	sub	sp, #20
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
 8011884:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	2b00      	cmp	r3, #0
 801188a:	d002      	beq.n	8011892 <VL53L3CX_GetCapabilities+0x16>
 801188c:	683b      	ldr	r3, [r7, #0]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d103      	bne.n	801189a <VL53L3CX_GetCapabilities+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011892:	f06f 0301 	mvn.w	r3, #1
 8011896:	60fb      	str	r3, [r7, #12]
 8011898:	e00d      	b.n	80118b6 <VL53L3CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = 1;
 801189a:	683b      	ldr	r3, [r7, #0]
 801189c:	2201      	movs	r2, #1
 801189e:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L3CX_NB_TARGET_PER_ZONE;
 80118a0:	683b      	ldr	r3, [r7, #0]
 80118a2:	2204      	movs	r2, #4
 80118a4:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 1;
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	2201      	movs	r2, #1
 80118aa:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 0;
 80118ac:	683b      	ldr	r3, [r7, #0]
 80118ae:	2200      	movs	r2, #0
 80118b0:	60da      	str	r2, [r3, #12]

    ret = VL53L3CX_OK;
 80118b2:	2300      	movs	r3, #0
 80118b4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80118b6:	68fb      	ldr	r3, [r7, #12]
}
 80118b8:	4618      	mov	r0, r3
 80118ba:	3714      	adds	r7, #20
 80118bc:	46bd      	mov	sp, r7
 80118be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c2:	4770      	bx	lr

080118c4 <VL53L3CX_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L3CX the profile corresponds to the distance modes.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ConfigProfile(VL53L3CX_Object_t *pObj, VL53L3CX_ProfileConfig_t *pConfig)
{
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b084      	sub	sp, #16
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
 80118cc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d009      	beq.n	80118e8 <VL53L3CX_ConfigProfile+0x24>
 80118d4:	683b      	ldr	r3, [r7, #0]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d006      	beq.n	80118e8 <VL53L3CX_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 80118da:	683b      	ldr	r3, [r7, #0]
 80118dc:	781b      	ldrb	r3, [r3, #0]
 80118de:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L3CX_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L3CX_PROFILE_SHORT) &&
 80118e0:	7afb      	ldrb	r3, [r7, #11]
 80118e2:	2b01      	cmp	r3, #1
 80118e4:	d103      	bne.n	80118ee <VL53L3CX_ConfigProfile+0x2a>
 80118e6:	e00c      	b.n	8011902 <VL53L3CX_ConfigProfile+0x3e>
    return VL53L3CX_INVALID_PARAM;
 80118e8:	f06f 0301 	mvn.w	r3, #1
 80118ec:	e043      	b.n	8011976 <VL53L3CX_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L3CX_PROFILE_SHORT) &&
 80118ee:	7afb      	ldrb	r3, [r7, #11]
 80118f0:	2b02      	cmp	r3, #2
 80118f2:	d006      	beq.n	8011902 <VL53L3CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L3CX_PROFILE_MEDIUM) &&
 80118f4:	7afb      	ldrb	r3, [r7, #11]
 80118f6:	2b03      	cmp	r3, #3
 80118f8:	d003      	beq.n	8011902 <VL53L3CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L3CX_PROFILE_LONG))
  {
    ret = VL53L3CX_INVALID_PARAM;
 80118fa:	f06f 0301 	mvn.w	r3, #1
 80118fe:	60fb      	str	r3, [r7, #12]
 8011900:	e038      	b.n	8011974 <VL53L3CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetDistanceMode(pObj, ranging_profile) != VL53LX_ERROR_NONE)
 8011902:	7afb      	ldrb	r3, [r7, #11]
 8011904:	4619      	mov	r1, r3
 8011906:	6878      	ldr	r0, [r7, #4]
 8011908:	f7f0 fcc9 	bl	800229e <VL53LX_SetDistanceMode>
 801190c:	4603      	mov	r3, r0
 801190e:	2b00      	cmp	r3, #0
 8011910:	d003      	beq.n	801191a <VL53L3CX_ConfigProfile+0x56>
  {
    ret = VL53L3CX_ERROR;
 8011912:	f04f 33ff 	mov.w	r3, #4294967295
 8011916:	60fb      	str	r3, [r7, #12]
 8011918:	e02c      	b.n	8011974 <VL53L3CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53LX_ERROR_NONE)
 801191a:	683b      	ldr	r3, [r7, #0]
 801191c:	685b      	ldr	r3, [r3, #4]
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
 801191e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011922:	fb02 f303 	mul.w	r3, r2, r3
 8011926:	4619      	mov	r1, r3
 8011928:	6878      	ldr	r0, [r7, #4]
 801192a:	f7f0 fd1f 	bl	800236c <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 801192e:	4603      	mov	r3, r0
 8011930:	2b00      	cmp	r3, #0
 8011932:	d003      	beq.n	801193c <VL53L3CX_ConfigProfile+0x78>
  {
    ret = VL53L3CX_ERROR;
 8011934:	f04f 33ff 	mov.w	r3, #4294967295
 8011938:	60fb      	str	r3, [r7, #12]
 801193a:	e01b      	b.n	8011974 <VL53L3CX_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 801193c:	683b      	ldr	r3, [r7, #0]
 801193e:	68db      	ldr	r3, [r3, #12]
 8011940:	2b00      	cmp	r3, #0
 8011942:	bf14      	ite	ne
 8011944:	2301      	movne	r3, #1
 8011946:	2300      	moveq	r3, #0
 8011948:	b2db      	uxtb	r3, r3
 801194a:	461a      	mov	r2, r3
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011952:	332c      	adds	r3, #44	; 0x2c
 8011954:	701a      	strb	r2, [r3, #0]
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8011956:	683b      	ldr	r3, [r7, #0]
 8011958:	691b      	ldr	r3, [r3, #16]
 801195a:	2b00      	cmp	r3, #0
 801195c:	bf14      	ite	ne
 801195e:	2301      	movne	r3, #1
 8011960:	2300      	moveq	r3, #0
 8011962:	b2db      	uxtb	r3, r3
 8011964:	461a      	mov	r2, r3
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801196c:	332d      	adds	r3, #45	; 0x2d
 801196e:	701a      	strb	r2, [r3, #0]

    ret = VL53L3CX_OK;
 8011970:	2300      	movs	r3, #0
 8011972:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011974:	68fb      	ldr	r3, [r7, #12]
}
 8011976:	4618      	mov	r0, r3
 8011978:	3710      	adds	r7, #16
 801197a:	46bd      	mov	sp, r7
 801197c:	bd80      	pop	{r7, pc}

0801197e <VL53L3CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ConfigROI(VL53L3CX_Object_t *pObj, VL53L3CX_ROIConfig_t *pROIConfig)
{
 801197e:	b580      	push	{r7, lr}
 8011980:	b084      	sub	sp, #16
 8011982:	af00      	add	r7, sp, #0
 8011984:	6078      	str	r0, [r7, #4]
 8011986:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53LX_UserRoi_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d002      	beq.n	8011994 <VL53L3CX_ConfigROI+0x16>
 801198e:	683b      	ldr	r3, [r7, #0]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d103      	bne.n	801199c <VL53L3CX_ConfigROI+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011994:	f06f 0301 	mvn.w	r3, #1
 8011998:	60fb      	str	r3, [r7, #12]
 801199a:	e01a      	b.n	80119d2 <VL53L3CX_ConfigROI+0x54>
  }
  else
  {
    roi_settings.BotRightX = pROIConfig->BotRightX;
 801199c:	683b      	ldr	r3, [r7, #0]
 801199e:	789b      	ldrb	r3, [r3, #2]
 80119a0:	72bb      	strb	r3, [r7, #10]
    roi_settings.BotRightY = pROIConfig->BotRightY;
 80119a2:	683b      	ldr	r3, [r7, #0]
 80119a4:	78db      	ldrb	r3, [r3, #3]
 80119a6:	72fb      	strb	r3, [r7, #11]
    roi_settings.TopLeftX = pROIConfig->TopLeftX;
 80119a8:	683b      	ldr	r3, [r7, #0]
 80119aa:	781b      	ldrb	r3, [r3, #0]
 80119ac:	723b      	strb	r3, [r7, #8]
    roi_settings.TopLeftY = pROIConfig->TopLeftY;
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	785b      	ldrb	r3, [r3, #1]
 80119b2:	727b      	strb	r3, [r7, #9]

    if (VL53LX_SetUserROI(pObj, &roi_settings) != VL53LX_ERROR_NONE)
 80119b4:	f107 0308 	add.w	r3, r7, #8
 80119b8:	4619      	mov	r1, r3
 80119ba:	6878      	ldr	r0, [r7, #4]
 80119bc:	f7f0 fd4e 	bl	800245c <VL53LX_SetUserROI>
 80119c0:	4603      	mov	r3, r0
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d003      	beq.n	80119ce <VL53L3CX_ConfigROI+0x50>
    {
      ret = VL53L3CX_ERROR;
 80119c6:	f04f 33ff 	mov.w	r3, #4294967295
 80119ca:	60fb      	str	r3, [r7, #12]
 80119cc:	e001      	b.n	80119d2 <VL53L3CX_ConfigROI+0x54>
    }
    else
    {
      ret = VL53L3CX_OK;
 80119ce:	2300      	movs	r3, #0
 80119d0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80119d2:	68fb      	ldr	r3, [r7, #12]
}
 80119d4:	4618      	mov	r0, r3
 80119d6:	3710      	adds	r7, #16
 80119d8:	46bd      	mov	sp, r7
 80119da:	bd80      	pop	{r7, pc}

080119dc <VL53L3CX_ConfigIT>:
  * @param pITConfig    Pointer to the IT configuration struct.
  * @warning This device does not support this feature.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ConfigIT(VL53L3CX_Object_t *pObj, VL53L3CX_ITConfig_t *pITConfig)
{
 80119dc:	b480      	push	{r7}
 80119de:	b083      	sub	sp, #12
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]
 80119e4:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L3CX_NOT_IMPLEMENTED;
 80119e6:	f06f 0303 	mvn.w	r3, #3
}
 80119ea:	4618      	mov	r0, r3
 80119ec:	370c      	adds	r7, #12
 80119ee:	46bd      	mov	sp, r7
 80119f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f4:	4770      	bx	lr

080119f6 <VL53L3CX_GetDistance>:
  * @param pObj    vl53l3cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetDistance(VL53L3CX_Object_t *pObj, VL53L3CX_Result_t *pResult)
{
 80119f6:	b580      	push	{r7, lr}
 80119f8:	b084      	sub	sp, #16
 80119fa:	af00      	add	r7, sp, #0
 80119fc:	6078      	str	r0, [r7, #4]
 80119fe:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d002      	beq.n	8011a0c <VL53L3CX_GetDistance+0x16>
 8011a06:	683b      	ldr	r3, [r7, #0]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d103      	bne.n	8011a14 <VL53L3CX_GetDistance+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011a0c:	f06f 0301 	mvn.w	r3, #1
 8011a10:	60fb      	str	r3, [r7, #12]
 8011a12:	e01d      	b.n	8011a50 <VL53L3CX_GetDistance+0x5a>
  }
  else if (pObj->IsRanging == 0U)
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011a1a:	3329      	adds	r3, #41	; 0x29
 8011a1c:	781b      	ldrb	r3, [r3, #0]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d103      	bne.n	8011a2a <VL53L3CX_GetDistance+0x34>
  {
    ret = VL53L3CX_ERROR;
 8011a22:	f04f 33ff 	mov.w	r3, #4294967295
 8011a26:	60fb      	str	r3, [r7, #12]
 8011a28:	e012      	b.n	8011a50 <VL53L3CX_GetDistance+0x5a>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011a30:	332a      	adds	r3, #42	; 0x2a
 8011a32:	781b      	ldrb	r3, [r3, #0]
 8011a34:	2b01      	cmp	r3, #1
 8011a36:	d106      	bne.n	8011a46 <VL53L3CX_GetDistance+0x50>
    {
      ret = vl53l3cx_poll_for_measurement(pObj, V53L3CX_POLL_TIMEOUT);
 8011a38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011a3c:	6878      	ldr	r0, [r7, #4]
 8011a3e:	f000 f92b 	bl	8011c98 <vl53l3cx_poll_for_measurement>
 8011a42:	60f8      	str	r0, [r7, #12]
 8011a44:	e004      	b.n	8011a50 <VL53L3CX_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l3cx_poll_for_measurement(pObj, 0U);
 8011a46:	2100      	movs	r1, #0
 8011a48:	6878      	ldr	r0, [r7, #4]
 8011a4a:	f000 f925 	bl	8011c98 <vl53l3cx_poll_for_measurement>
 8011a4e:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L3CX_OK)
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d119      	bne.n	8011a8a <VL53L3CX_GetDistance+0x94>
  {
    /* retrieve measurements and fill result structure */
    if (vl53l3cx_get_result(pObj, pResult) != VL53L3CX_OK)
 8011a56:	6839      	ldr	r1, [r7, #0]
 8011a58:	6878      	ldr	r0, [r7, #4]
 8011a5a:	f000 f94b 	bl	8011cf4 <vl53l3cx_get_result>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d003      	beq.n	8011a6c <VL53L3CX_GetDistance+0x76>
    {
      ret = VL53L3CX_ERROR;
 8011a64:	f04f 33ff 	mov.w	r3, #4294967295
 8011a68:	60fb      	str	r3, [r7, #12]
 8011a6a:	e00e      	b.n	8011a8a <VL53L3CX_GetDistance+0x94>
    }
    else if (pObj->IsContinuous == 1U)
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011a72:	332b      	adds	r3, #43	; 0x2b
 8011a74:	781b      	ldrb	r3, [r3, #0]
 8011a76:	2b01      	cmp	r3, #1
 8011a78:	d105      	bne.n	8011a86 <VL53L3CX_GetDistance+0x90>
    {
      /* trigger new measurement if device configured in continuous mode */
      ret = (int32_t)VL53LX_ClearInterruptAndStartMeasurement(pObj);
 8011a7a:	6878      	ldr	r0, [r7, #4]
 8011a7c:	f7f0 fdbe 	bl	80025fc <VL53LX_ClearInterruptAndStartMeasurement>
 8011a80:	4603      	mov	r3, r0
 8011a82:	60fb      	str	r3, [r7, #12]
 8011a84:	e001      	b.n	8011a8a <VL53L3CX_GetDistance+0x94>
    }
    else
    {
      ret = VL53L3CX_OK;
 8011a86:	2300      	movs	r3, #0
 8011a88:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8011a8a:	68fb      	ldr	r3, [r7, #12]
}
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	3710      	adds	r7, #16
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bd80      	pop	{r7, pc}

08011a94 <VL53L3CX_Start>:
  * @param pObj    vl53l3cx context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_Start(VL53L3CX_Object_t *pObj, uint32_t Mode)
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b084      	sub	sp, #16
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
 8011a9c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d103      	bne.n	8011aac <VL53L3CX_Start+0x18>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011aa4:	f06f 0301 	mvn.w	r3, #1
 8011aa8:	60fb      	str	r3, [r7, #12]
 8011aaa:	e068      	b.n	8011b7e <VL53L3CX_Start+0xea>
  }
  else if (pObj->IsRanging == 1U)
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011ab2:	3329      	adds	r3, #41	; 0x29
 8011ab4:	781b      	ldrb	r3, [r3, #0]
 8011ab6:	2b01      	cmp	r3, #1
 8011ab8:	d103      	bne.n	8011ac2 <VL53L3CX_Start+0x2e>
  {
    ret = VL53L3CX_ERROR;
 8011aba:	f04f 33ff 	mov.w	r3, #4294967295
 8011abe:	60fb      	str	r3, [r7, #12]
 8011ac0:	e05d      	b.n	8011b7e <VL53L3CX_Start+0xea>
  }
  else if (VL53LX_StartMeasurement(pObj) == VL53LX_ERROR_NONE)
 8011ac2:	6878      	ldr	r0, [r7, #4]
 8011ac4:	f7f0 fd38 	bl	8002538 <VL53LX_StartMeasurement>
 8011ac8:	4603      	mov	r3, r0
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d154      	bne.n	8011b78 <VL53L3CX_Start+0xe4>
  {
    pObj->IsRanging = 1;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011ad4:	3329      	adds	r3, #41	; 0x29
 8011ad6:	2201      	movs	r2, #1
 8011ad8:	701a      	strb	r2, [r3, #0]
    ret = VL53L3CX_OK;
 8011ada:	2300      	movs	r3, #0
 8011adc:	60fb      	str	r3, [r7, #12]
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	3b01      	subs	r3, #1
 8011ae2:	2b03      	cmp	r3, #3
 8011ae4:	d83e      	bhi.n	8011b64 <VL53L3CX_Start+0xd0>
 8011ae6:	a201      	add	r2, pc, #4	; (adr r2, 8011aec <VL53L3CX_Start+0x58>)
 8011ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011aec:	08011afd 	.word	0x08011afd
 8011af0:	08011b17 	.word	0x08011b17
 8011af4:	08011b31 	.word	0x08011b31
 8011af8:	08011b4b 	.word	0x08011b4b

    switch (Mode)
    {
    case VL53L3CX_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011b02:	332b      	adds	r3, #43	; 0x2b
 8011b04:	2201      	movs	r2, #1
 8011b06:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 1U;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011b0e:	332a      	adds	r3, #42	; 0x2a
 8011b10:	2201      	movs	r2, #1
 8011b12:	701a      	strb	r2, [r3, #0]
      break;
 8011b14:	e033      	b.n	8011b7e <VL53L3CX_Start+0xea>

    case VL53L3CX_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011b1c:	332b      	adds	r3, #43	; 0x2b
 8011b1e:	2200      	movs	r2, #0
 8011b20:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 1U;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011b28:	332a      	adds	r3, #42	; 0x2a
 8011b2a:	2201      	movs	r2, #1
 8011b2c:	701a      	strb	r2, [r3, #0]
      break;
 8011b2e:	e026      	b.n	8011b7e <VL53L3CX_Start+0xea>

    case VL53L3CX_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011b36:	332b      	adds	r3, #43	; 0x2b
 8011b38:	2201      	movs	r2, #1
 8011b3a:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 0U;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011b42:	332a      	adds	r3, #42	; 0x2a
 8011b44:	2200      	movs	r2, #0
 8011b46:	701a      	strb	r2, [r3, #0]
      break;
 8011b48:	e019      	b.n	8011b7e <VL53L3CX_Start+0xea>

    case VL53L3CX_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011b50:	332b      	adds	r3, #43	; 0x2b
 8011b52:	2200      	movs	r2, #0
 8011b54:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 0U;
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011b5c:	332a      	adds	r3, #42	; 0x2a
 8011b5e:	2200      	movs	r2, #0
 8011b60:	701a      	strb	r2, [r3, #0]
      break;
 8011b62:	e00c      	b.n	8011b7e <VL53L3CX_Start+0xea>

    default:
      pObj->IsRanging = 0U;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011b6a:	3329      	adds	r3, #41	; 0x29
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	701a      	strb	r2, [r3, #0]
      ret = VL53L3CX_INVALID_PARAM;
 8011b70:	f06f 0301 	mvn.w	r3, #1
 8011b74:	60fb      	str	r3, [r7, #12]
      break;
 8011b76:	e002      	b.n	8011b7e <VL53L3CX_Start+0xea>
    }
  }
  else
  {
    ret = VL53L3CX_ERROR;
 8011b78:	f04f 33ff 	mov.w	r3, #4294967295
 8011b7c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011b7e:	68fb      	ldr	r3, [r7, #12]
}
 8011b80:	4618      	mov	r0, r3
 8011b82:	3710      	adds	r7, #16
 8011b84:	46bd      	mov	sp, r7
 8011b86:	bd80      	pop	{r7, pc}

08011b88 <VL53L3CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l3cx context object.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_Stop(VL53L3CX_Object_t *pObj)
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b084      	sub	sp, #16
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d103      	bne.n	8011b9e <VL53L3CX_Stop+0x16>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011b96:	f06f 0301 	mvn.w	r3, #1
 8011b9a:	60fb      	str	r3, [r7, #12]
 8011b9c:	e01c      	b.n	8011bd8 <VL53L3CX_Stop+0x50>
  }
  else if (pObj->IsRanging == 0U)
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011ba4:	3329      	adds	r3, #41	; 0x29
 8011ba6:	781b      	ldrb	r3, [r3, #0]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d103      	bne.n	8011bb4 <VL53L3CX_Stop+0x2c>
  {
	  /* ranging not started */
	  ret = VL53L3CX_ERROR;
 8011bac:	f04f 33ff 	mov.w	r3, #4294967295
 8011bb0:	60fb      	str	r3, [r7, #12]
 8011bb2:	e011      	b.n	8011bd8 <VL53L3CX_Stop+0x50>
  }
  else if (VL53LX_StopMeasurement(pObj) == VL53LX_ERROR_NONE)
 8011bb4:	6878      	ldr	r0, [r7, #4]
 8011bb6:	f7f0 fd0d 	bl	80025d4 <VL53LX_StopMeasurement>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d108      	bne.n	8011bd2 <VL53L3CX_Stop+0x4a>
  {
    pObj->IsRanging = 0U;
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011bc6:	3329      	adds	r3, #41	; 0x29
 8011bc8:	2200      	movs	r2, #0
 8011bca:	701a      	strb	r2, [r3, #0]
    ret = VL53L3CX_OK;
 8011bcc:	2300      	movs	r3, #0
 8011bce:	60fb      	str	r3, [r7, #12]
 8011bd0:	e002      	b.n	8011bd8 <VL53L3CX_Stop+0x50>
  }
  else
  {
    ret = VL53L3CX_ERROR;
 8011bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8011bd6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011bd8:	68fb      	ldr	r3, [r7, #12]
}
 8011bda:	4618      	mov	r0, r3
 8011bdc:	3710      	adds	r7, #16
 8011bde:	46bd      	mov	sp, r7
 8011be0:	bd80      	pop	{r7, pc}

08011be2 <VL53L3CX_SetAddress>:
  * @param pObj    vl53l3cx context object.
  * @param Address     New I2C address.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_SetAddress(VL53L3CX_Object_t *pObj, uint32_t Address)
{
 8011be2:	b580      	push	{r7, lr}
 8011be4:	b084      	sub	sp, #16
 8011be6:	af00      	add	r7, sp, #0
 8011be8:	6078      	str	r0, [r7, #4]
 8011bea:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d103      	bne.n	8011bfa <VL53L3CX_SetAddress+0x18>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011bf2:	f06f 0301 	mvn.w	r3, #1
 8011bf6:	60fb      	str	r3, [r7, #12]
 8011bf8:	e012      	b.n	8011c20 <VL53L3CX_SetAddress+0x3e>
  }
  else if (VL53LX_SetDeviceAddress(pObj, (uint8_t)Address) != VL53LX_ERROR_NONE)
 8011bfa:	683b      	ldr	r3, [r7, #0]
 8011bfc:	b2db      	uxtb	r3, r3
 8011bfe:	4619      	mov	r1, r3
 8011c00:	6878      	ldr	r0, [r7, #4]
 8011c02:	f7f0 f9e7 	bl	8001fd4 <VL53LX_SetDeviceAddress>
 8011c06:	4603      	mov	r3, r0
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d003      	beq.n	8011c14 <VL53L3CX_SetAddress+0x32>
  {
    ret = VL53L3CX_ERROR;
 8011c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8011c10:	60fb      	str	r3, [r7, #12]
 8011c12:	e005      	b.n	8011c20 <VL53L3CX_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	b29a      	uxth	r2, r3
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	811a      	strh	r2, [r3, #8]
    ret = VL53L3CX_OK;
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011c20:	68fb      	ldr	r3, [r7, #12]
}
 8011c22:	4618      	mov	r0, r3
 8011c24:	3710      	adds	r7, #16
 8011c26:	46bd      	mov	sp, r7
 8011c28:	bd80      	pop	{r7, pc}

08011c2a <VL53L3CX_GetAddress>:
  * @param pObj    vl53l3cx context object.
  * @param pAddress     Pointer to the current I2C address.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetAddress(VL53L3CX_Object_t *pObj, uint32_t *pAddress)
{
 8011c2a:	b480      	push	{r7}
 8011c2c:	b085      	sub	sp, #20
 8011c2e:	af00      	add	r7, sp, #0
 8011c30:	6078      	str	r0, [r7, #4]
 8011c32:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d002      	beq.n	8011c40 <VL53L3CX_GetAddress+0x16>
 8011c3a:	683b      	ldr	r3, [r7, #0]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d103      	bne.n	8011c48 <VL53L3CX_GetAddress+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011c40:	f06f 0301 	mvn.w	r3, #1
 8011c44:	60fb      	str	r3, [r7, #12]
 8011c46:	e006      	b.n	8011c56 <VL53L3CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	891b      	ldrh	r3, [r3, #8]
 8011c4c:	461a      	mov	r2, r3
 8011c4e:	683b      	ldr	r3, [r7, #0]
 8011c50:	601a      	str	r2, [r3, #0]
    ret = VL53L3CX_OK;
 8011c52:	2300      	movs	r3, #0
 8011c54:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011c56:	68fb      	ldr	r3, [r7, #12]
}
 8011c58:	4618      	mov	r0, r3
 8011c5a:	3714      	adds	r7, #20
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c62:	4770      	bx	lr

08011c64 <VL53L3CX_SetPowerMode>:
  * @param PowerMode    New power mode to be entered.
  * @note Not implemented for this device
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_SetPowerMode(VL53L3CX_Object_t *pObj, uint32_t PowerMode)
{
 8011c64:	b480      	push	{r7}
 8011c66:	b083      	sub	sp, #12
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	6078      	str	r0, [r7, #4]
 8011c6c:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L3CX_NOT_IMPLEMENTED;
 8011c6e:	f06f 0303 	mvn.w	r3, #3
}
 8011c72:	4618      	mov	r0, r3
 8011c74:	370c      	adds	r7, #12
 8011c76:	46bd      	mov	sp, r7
 8011c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c7c:	4770      	bx	lr

08011c7e <VL53L3CX_GetPowerMode>:
  * @param pPowerMode    Pointer to the current power mode.
  * @note Not implemented for this device
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetPowerMode(VL53L3CX_Object_t *pObj, uint32_t *pPowerMode)
{
 8011c7e:	b480      	push	{r7}
 8011c80:	b083      	sub	sp, #12
 8011c82:	af00      	add	r7, sp, #0
 8011c84:	6078      	str	r0, [r7, #4]
 8011c86:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L3CX_NOT_IMPLEMENTED;
 8011c88:	f06f 0303 	mvn.w	r3, #3
}
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	370c      	adds	r7, #12
 8011c90:	46bd      	mov	sp, r7
 8011c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c96:	4770      	bx	lr

08011c98 <vl53l3cx_poll_for_measurement>:
/** @defgroup VL53L3CX_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l3cx_poll_for_measurement(VL53L3CX_Object_t *pObj, uint32_t Timeout)
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b084      	sub	sp, #16
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
 8011ca0:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d102      	bne.n	8011cb2 <vl53l3cx_poll_for_measurement+0x1a>
  {
    return VL53L3CX_INVALID_PARAM;
 8011cac:	f06f 0301 	mvn.w	r3, #1
 8011cb0:	e01b      	b.n	8011cea <vl53l3cx_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	695b      	ldr	r3, [r3, #20]
 8011cb6:	4798      	blx	r3
 8011cb8:	4603      	mov	r3, r0
 8011cba:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53LX_GetMeasurementDataReady(pObj, &NewDataReady);
 8011cbc:	f107 030b 	add.w	r3, r7, #11
 8011cc0:	4619      	mov	r1, r3
 8011cc2:	6878      	ldr	r0, [r7, #4]
 8011cc4:	f7f0 fcb0 	bl	8002628 <VL53LX_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 8011cc8:	7afb      	ldrb	r3, [r7, #11]
 8011cca:	2b01      	cmp	r3, #1
 8011ccc:	d101      	bne.n	8011cd2 <vl53l3cx_poll_for_measurement+0x3a>
    {
      return VL53L3CX_OK;
 8011cce:	2300      	movs	r3, #0
 8011cd0:	e00b      	b.n	8011cea <vl53l3cx_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	695b      	ldr	r3, [r3, #20]
 8011cd6:	4798      	blx	r3
 8011cd8:	4603      	mov	r3, r0
 8011cda:	461a      	mov	r2, r3
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	1ad3      	subs	r3, r2, r3
 8011ce0:	683a      	ldr	r2, [r7, #0]
 8011ce2:	429a      	cmp	r2, r3
 8011ce4:	d8ea      	bhi.n	8011cbc <vl53l3cx_poll_for_measurement+0x24>

  return VL53L3CX_TIMEOUT;
 8011ce6:	f06f 0302 	mvn.w	r3, #2
}
 8011cea:	4618      	mov	r0, r3
 8011cec:	3710      	adds	r7, #16
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	bd80      	pop	{r7, pc}
	...

08011cf4 <vl53l3cx_get_result>:

static int32_t vl53l3cx_get_result(VL53L3CX_Object_t *pObj, VL53L3CX_Result_t *pResult)
{
 8011cf4:	b590      	push	{r4, r7, lr}
 8011cf6:	b09f      	sub	sp, #124	; 0x7c
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
 8011cfc:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  VL53LX_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d002      	beq.n	8011d0a <vl53l3cx_get_result+0x16>
 8011d04:	683b      	ldr	r3, [r7, #0]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d103      	bne.n	8011d12 <vl53l3cx_get_result+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011d0a:	f06f 0301 	mvn.w	r3, #1
 8011d0e:	677b      	str	r3, [r7, #116]	; 0x74
 8011d10:	e126      	b.n	8011f60 <vl53l3cx_get_result+0x26c>
  }
  else if (VL53LX_GetMultiRangingData(pObj, &data) != VL53LX_ERROR_NONE)
 8011d12:	f107 0308 	add.w	r3, r7, #8
 8011d16:	4619      	mov	r1, r3
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f7f1 f858 	bl	8002dce <VL53LX_GetMultiRangingData>
 8011d1e:	4603      	mov	r3, r0
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d003      	beq.n	8011d2c <vl53l3cx_get_result+0x38>
  {
    ret = VL53L3CX_ERROR;
 8011d24:	f04f 33ff 	mov.w	r3, #4294967295
 8011d28:	677b      	str	r3, [r7, #116]	; 0x74
 8011d2a:	e119      	b.n	8011f60 <vl53l3cx_get_result+0x26c>
  }
  else
  {
    for (i = 0; i < VL53L3CX_MAX_NB_ZONES; i++)
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8011d32:	e10b      	b.n	8011f4c <vl53l3cx_get_result+0x258>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 8011d34:	7b7b      	ldrb	r3, [r7, #13]
 8011d36:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	6839      	ldr	r1, [r7, #0]
 8011d3e:	4613      	mov	r3, r2
 8011d40:	011b      	lsls	r3, r3, #4
 8011d42:	4413      	add	r3, r2
 8011d44:	009b      	lsls	r3, r3, #2
 8011d46:	440b      	add	r3, r1
 8011d48:	3304      	adds	r3, #4
 8011d4a:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8011d52:	e0f0      	b.n	8011f36 <vl53l3cx_get_result+0x242>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 8011d54:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011d58:	4613      	mov	r3, r2
 8011d5a:	009b      	lsls	r3, r3, #2
 8011d5c:	4413      	add	r3, r2
 8011d5e:	009b      	lsls	r3, r3, #2
 8011d60:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011d64:	4413      	add	r3, r2
 8011d66:	3b58      	subs	r3, #88	; 0x58
 8011d68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	da0d      	bge.n	8011d8c <vl53l3cx_get_result+0x98>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 8011d70:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011d74:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011d78:	6839      	ldr	r1, [r7, #0]
 8011d7a:	4613      	mov	r3, r2
 8011d7c:	011b      	lsls	r3, r3, #4
 8011d7e:	4413      	add	r3, r2
 8011d80:	4403      	add	r3, r0
 8011d82:	009b      	lsls	r3, r3, #2
 8011d84:	440b      	add	r3, r1
 8011d86:	2200      	movs	r2, #0
 8011d88:	609a      	str	r2, [r3, #8]
 8011d8a:	e018      	b.n	8011dbe <vl53l3cx_get_result+0xca>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 8011d8c:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011d90:	4613      	mov	r3, r2
 8011d92:	009b      	lsls	r3, r3, #2
 8011d94:	4413      	add	r3, r2
 8011d96:	009b      	lsls	r3, r3, #2
 8011d98:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011d9c:	4413      	add	r3, r2
 8011d9e:	3b58      	subs	r3, #88	; 0x58
 8011da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011da4:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011da8:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011dac:	461c      	mov	r4, r3
 8011dae:	6839      	ldr	r1, [r7, #0]
 8011db0:	4613      	mov	r3, r2
 8011db2:	011b      	lsls	r3, r3, #4
 8011db4:	4413      	add	r3, r2
 8011db6:	4403      	add	r3, r0
 8011db8:	009b      	lsls	r3, r3, #2
 8011dba:	440b      	add	r3, r1
 8011dbc:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011dc4:	332c      	adds	r3, #44	; 0x2c
 8011dc6:	781b      	ldrb	r3, [r3, #0]
 8011dc8:	2b01      	cmp	r3, #1
 8011dca:	d137      	bne.n	8011e3c <vl53l3cx_get_result+0x148>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 8011dcc:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011dd0:	4613      	mov	r3, r2
 8011dd2:	009b      	lsls	r3, r3, #2
 8011dd4:	4413      	add	r3, r2
 8011dd6:	009b      	lsls	r3, r3, #2
 8011dd8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011ddc:	4413      	add	r3, r2
 8011dde:	3b60      	subs	r3, #96	; 0x60
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	ee07 3a90 	vmov	s15, r3
 8011de6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011dea:	eddf 6a60 	vldr	s13, [pc, #384]	; 8011f6c <vl53l3cx_get_result+0x278>
 8011dee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011df2:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8011f70 <vl53l3cx_get_result+0x27c>
 8011df6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011dfa:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8011dfe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8011e02:	0a1b      	lsrs	r3, r3, #8
 8011e04:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 8011e08:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8011e0c:	ee07 3a90 	vmov	s15, r3
 8011e10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011e14:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011e18:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011e1c:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8011e20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011e24:	6839      	ldr	r1, [r7, #0]
 8011e26:	4613      	mov	r3, r2
 8011e28:	011b      	lsls	r3, r3, #4
 8011e2a:	4413      	add	r3, r2
 8011e2c:	4403      	add	r3, r0
 8011e2e:	3308      	adds	r3, #8
 8011e30:	009b      	lsls	r3, r3, #2
 8011e32:	440b      	add	r3, r1
 8011e34:	3308      	adds	r3, #8
 8011e36:	edc3 7a00 	vstr	s15, [r3]
 8011e3a:	e00f      	b.n	8011e5c <vl53l3cx_get_result+0x168>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8011e3c:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011e40:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011e44:	6839      	ldr	r1, [r7, #0]
 8011e46:	4613      	mov	r3, r2
 8011e48:	011b      	lsls	r3, r3, #4
 8011e4a:	4413      	add	r3, r2
 8011e4c:	4403      	add	r3, r0
 8011e4e:	3308      	adds	r3, #8
 8011e50:	009b      	lsls	r3, r3, #2
 8011e52:	440b      	add	r3, r1
 8011e54:	3308      	adds	r3, #8
 8011e56:	f04f 0200 	mov.w	r2, #0
 8011e5a:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011e62:	332d      	adds	r3, #45	; 0x2d
 8011e64:	781b      	ldrb	r3, [r3, #0]
 8011e66:	2b01      	cmp	r3, #1
 8011e68:	d137      	bne.n	8011eda <vl53l3cx_get_result+0x1e6>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 8011e6a:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011e6e:	4613      	mov	r3, r2
 8011e70:	009b      	lsls	r3, r3, #2
 8011e72:	4413      	add	r3, r2
 8011e74:	009b      	lsls	r3, r3, #2
 8011e76:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011e7a:	4413      	add	r3, r2
 8011e7c:	3b64      	subs	r3, #100	; 0x64
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	ee07 3a90 	vmov	s15, r3
 8011e84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011e88:	eddf 6a38 	vldr	s13, [pc, #224]	; 8011f6c <vl53l3cx_get_result+0x278>
 8011e8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011e90:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8011f70 <vl53l3cx_get_result+0x27c>
 8011e94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011e98:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8011e9c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8011ea0:	0a1b      	lsrs	r3, r3, #8
 8011ea2:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 8011ea6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8011eaa:	ee07 3a90 	vmov	s15, r3
 8011eae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011eb2:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011eb6:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011eba:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8011ebe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011ec2:	6839      	ldr	r1, [r7, #0]
 8011ec4:	4613      	mov	r3, r2
 8011ec6:	011b      	lsls	r3, r3, #4
 8011ec8:	4413      	add	r3, r2
 8011eca:	4403      	add	r3, r0
 8011ecc:	330c      	adds	r3, #12
 8011ece:	009b      	lsls	r3, r3, #2
 8011ed0:	440b      	add	r3, r1
 8011ed2:	3308      	adds	r3, #8
 8011ed4:	edc3 7a00 	vstr	s15, [r3]
 8011ed8:	e00f      	b.n	8011efa <vl53l3cx_get_result+0x206>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 8011eda:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011ede:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011ee2:	6839      	ldr	r1, [r7, #0]
 8011ee4:	4613      	mov	r3, r2
 8011ee6:	011b      	lsls	r3, r3, #4
 8011ee8:	4413      	add	r3, r2
 8011eea:	4403      	add	r3, r0
 8011eec:	330c      	adds	r3, #12
 8011eee:	009b      	lsls	r3, r3, #2
 8011ef0:	440b      	add	r3, r1
 8011ef2:	3308      	adds	r3, #8
 8011ef4:	f04f 0200 	mov.w	r2, #0
 8011ef8:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 8011efa:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011efe:	4613      	mov	r3, r2
 8011f00:	009b      	lsls	r3, r3, #2
 8011f02:	4413      	add	r3, r2
 8011f04:	009b      	lsls	r3, r3, #2
 8011f06:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011f0a:	4413      	add	r3, r2
 8011f0c:	3b56      	subs	r3, #86	; 0x56
 8011f0e:	781b      	ldrb	r3, [r3, #0]
 8011f10:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011f14:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011f18:	461c      	mov	r4, r3
 8011f1a:	6839      	ldr	r1, [r7, #0]
 8011f1c:	4613      	mov	r3, r2
 8011f1e:	011b      	lsls	r3, r3, #4
 8011f20:	4413      	add	r3, r2
 8011f22:	4403      	add	r3, r0
 8011f24:	3304      	adds	r3, #4
 8011f26:	009b      	lsls	r3, r3, #2
 8011f28:	440b      	add	r3, r1
 8011f2a:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8011f2c:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8011f30:	3301      	adds	r3, #1
 8011f32:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8011f36:	7b7b      	ldrb	r3, [r7, #13]
 8011f38:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011f3c:	429a      	cmp	r2, r3
 8011f3e:	f4ff af09 	bcc.w	8011d54 <vl53l3cx_get_result+0x60>
    for (i = 0; i < VL53L3CX_MAX_NB_ZONES; i++)
 8011f42:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8011f46:	3301      	adds	r3, #1
 8011f48:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8011f4c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	f43f aeef 	beq.w	8011d34 <vl53l3cx_get_result+0x40>
      }
    }

    pResult->NumberOfZones = VL53L3CX_MAX_NB_ZONES;
 8011f56:	683b      	ldr	r3, [r7, #0]
 8011f58:	2201      	movs	r2, #1
 8011f5a:	601a      	str	r2, [r3, #0]

    ret = VL53L3CX_OK;
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	677b      	str	r3, [r7, #116]	; 0x74
  }

  return ret;
 8011f60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8011f62:	4618      	mov	r0, r3
 8011f64:	377c      	adds	r7, #124	; 0x7c
 8011f66:	46bd      	mov	sp, r7
 8011f68:	bd90      	pop	{r4, r7, pc}
 8011f6a:	bf00      	nop
 8011f6c:	47800000 	.word	0x47800000
 8011f70:	447a0000 	.word	0x447a0000

08011f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8011f78:	4b0e      	ldr	r3, [pc, #56]	; (8011fb4 <HAL_Init+0x40>)
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	4a0d      	ldr	r2, [pc, #52]	; (8011fb4 <HAL_Init+0x40>)
 8011f7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011f82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8011f84:	4b0b      	ldr	r3, [pc, #44]	; (8011fb4 <HAL_Init+0x40>)
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	4a0a      	ldr	r2, [pc, #40]	; (8011fb4 <HAL_Init+0x40>)
 8011f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011f8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8011f90:	4b08      	ldr	r3, [pc, #32]	; (8011fb4 <HAL_Init+0x40>)
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	4a07      	ldr	r2, [pc, #28]	; (8011fb4 <HAL_Init+0x40>)
 8011f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011f9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8011f9c:	2003      	movs	r0, #3
 8011f9e:	f000 f931 	bl	8012204 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8011fa2:	2000      	movs	r0, #0
 8011fa4:	f000 f808 	bl	8011fb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8011fa8:	f7ee ffd0 	bl	8000f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8011fac:	2300      	movs	r3, #0
}
 8011fae:	4618      	mov	r0, r3
 8011fb0:	bd80      	pop	{r7, pc}
 8011fb2:	bf00      	nop
 8011fb4:	40023c00 	.word	0x40023c00

08011fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	b082      	sub	sp, #8
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8011fc0:	4b12      	ldr	r3, [pc, #72]	; (801200c <HAL_InitTick+0x54>)
 8011fc2:	681a      	ldr	r2, [r3, #0]
 8011fc4:	4b12      	ldr	r3, [pc, #72]	; (8012010 <HAL_InitTick+0x58>)
 8011fc6:	781b      	ldrb	r3, [r3, #0]
 8011fc8:	4619      	mov	r1, r3
 8011fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8011fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	f000 f93b 	bl	8012252 <HAL_SYSTICK_Config>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d001      	beq.n	8011fe6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8011fe2:	2301      	movs	r3, #1
 8011fe4:	e00e      	b.n	8012004 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	2b0f      	cmp	r3, #15
 8011fea:	d80a      	bhi.n	8012002 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8011fec:	2200      	movs	r2, #0
 8011fee:	6879      	ldr	r1, [r7, #4]
 8011ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ff4:	f000 f911 	bl	801221a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8011ff8:	4a06      	ldr	r2, [pc, #24]	; (8012014 <HAL_InitTick+0x5c>)
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8011ffe:	2300      	movs	r3, #0
 8012000:	e000      	b.n	8012004 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8012002:	2301      	movs	r3, #1
}
 8012004:	4618      	mov	r0, r3
 8012006:	3708      	adds	r7, #8
 8012008:	46bd      	mov	sp, r7
 801200a:	bd80      	pop	{r7, pc}
 801200c:	20000018 	.word	0x20000018
 8012010:	20000084 	.word	0x20000084
 8012014:	20000080 	.word	0x20000080

08012018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8012018:	b480      	push	{r7}
 801201a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801201c:	4b06      	ldr	r3, [pc, #24]	; (8012038 <HAL_IncTick+0x20>)
 801201e:	781b      	ldrb	r3, [r3, #0]
 8012020:	461a      	mov	r2, r3
 8012022:	4b06      	ldr	r3, [pc, #24]	; (801203c <HAL_IncTick+0x24>)
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	4413      	add	r3, r2
 8012028:	4a04      	ldr	r2, [pc, #16]	; (801203c <HAL_IncTick+0x24>)
 801202a:	6013      	str	r3, [r2, #0]
}
 801202c:	bf00      	nop
 801202e:	46bd      	mov	sp, r7
 8012030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012034:	4770      	bx	lr
 8012036:	bf00      	nop
 8012038:	20000084 	.word	0x20000084
 801203c:	200074cc 	.word	0x200074cc

08012040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8012040:	b480      	push	{r7}
 8012042:	af00      	add	r7, sp, #0
  return uwTick;
 8012044:	4b03      	ldr	r3, [pc, #12]	; (8012054 <HAL_GetTick+0x14>)
 8012046:	681b      	ldr	r3, [r3, #0]
}
 8012048:	4618      	mov	r0, r3
 801204a:	46bd      	mov	sp, r7
 801204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012050:	4770      	bx	lr
 8012052:	bf00      	nop
 8012054:	200074cc 	.word	0x200074cc

08012058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b084      	sub	sp, #16
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8012060:	f7ff ffee 	bl	8012040 <HAL_GetTick>
 8012064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012070:	d005      	beq.n	801207e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8012072:	4b0a      	ldr	r3, [pc, #40]	; (801209c <HAL_Delay+0x44>)
 8012074:	781b      	ldrb	r3, [r3, #0]
 8012076:	461a      	mov	r2, r3
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	4413      	add	r3, r2
 801207c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 801207e:	bf00      	nop
 8012080:	f7ff ffde 	bl	8012040 <HAL_GetTick>
 8012084:	4602      	mov	r2, r0
 8012086:	68bb      	ldr	r3, [r7, #8]
 8012088:	1ad3      	subs	r3, r2, r3
 801208a:	68fa      	ldr	r2, [r7, #12]
 801208c:	429a      	cmp	r2, r3
 801208e:	d8f7      	bhi.n	8012080 <HAL_Delay+0x28>
  {
  }
}
 8012090:	bf00      	nop
 8012092:	bf00      	nop
 8012094:	3710      	adds	r7, #16
 8012096:	46bd      	mov	sp, r7
 8012098:	bd80      	pop	{r7, pc}
 801209a:	bf00      	nop
 801209c:	20000084 	.word	0x20000084

080120a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80120a0:	b480      	push	{r7}
 80120a2:	b085      	sub	sp, #20
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	f003 0307 	and.w	r3, r3, #7
 80120ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80120b0:	4b0c      	ldr	r3, [pc, #48]	; (80120e4 <__NVIC_SetPriorityGrouping+0x44>)
 80120b2:	68db      	ldr	r3, [r3, #12]
 80120b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80120b6:	68ba      	ldr	r2, [r7, #8]
 80120b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80120bc:	4013      	ands	r3, r2
 80120be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80120c4:	68bb      	ldr	r3, [r7, #8]
 80120c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80120c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80120cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80120d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80120d2:	4a04      	ldr	r2, [pc, #16]	; (80120e4 <__NVIC_SetPriorityGrouping+0x44>)
 80120d4:	68bb      	ldr	r3, [r7, #8]
 80120d6:	60d3      	str	r3, [r2, #12]
}
 80120d8:	bf00      	nop
 80120da:	3714      	adds	r7, #20
 80120dc:	46bd      	mov	sp, r7
 80120de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e2:	4770      	bx	lr
 80120e4:	e000ed00 	.word	0xe000ed00

080120e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80120e8:	b480      	push	{r7}
 80120ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80120ec:	4b04      	ldr	r3, [pc, #16]	; (8012100 <__NVIC_GetPriorityGrouping+0x18>)
 80120ee:	68db      	ldr	r3, [r3, #12]
 80120f0:	0a1b      	lsrs	r3, r3, #8
 80120f2:	f003 0307 	and.w	r3, r3, #7
}
 80120f6:	4618      	mov	r0, r3
 80120f8:	46bd      	mov	sp, r7
 80120fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120fe:	4770      	bx	lr
 8012100:	e000ed00 	.word	0xe000ed00

08012104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8012104:	b480      	push	{r7}
 8012106:	b083      	sub	sp, #12
 8012108:	af00      	add	r7, sp, #0
 801210a:	4603      	mov	r3, r0
 801210c:	6039      	str	r1, [r7, #0]
 801210e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012114:	2b00      	cmp	r3, #0
 8012116:	db0a      	blt.n	801212e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012118:	683b      	ldr	r3, [r7, #0]
 801211a:	b2da      	uxtb	r2, r3
 801211c:	490c      	ldr	r1, [pc, #48]	; (8012150 <__NVIC_SetPriority+0x4c>)
 801211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012122:	0112      	lsls	r2, r2, #4
 8012124:	b2d2      	uxtb	r2, r2
 8012126:	440b      	add	r3, r1
 8012128:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801212c:	e00a      	b.n	8012144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801212e:	683b      	ldr	r3, [r7, #0]
 8012130:	b2da      	uxtb	r2, r3
 8012132:	4908      	ldr	r1, [pc, #32]	; (8012154 <__NVIC_SetPriority+0x50>)
 8012134:	79fb      	ldrb	r3, [r7, #7]
 8012136:	f003 030f 	and.w	r3, r3, #15
 801213a:	3b04      	subs	r3, #4
 801213c:	0112      	lsls	r2, r2, #4
 801213e:	b2d2      	uxtb	r2, r2
 8012140:	440b      	add	r3, r1
 8012142:	761a      	strb	r2, [r3, #24]
}
 8012144:	bf00      	nop
 8012146:	370c      	adds	r7, #12
 8012148:	46bd      	mov	sp, r7
 801214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214e:	4770      	bx	lr
 8012150:	e000e100 	.word	0xe000e100
 8012154:	e000ed00 	.word	0xe000ed00

08012158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012158:	b480      	push	{r7}
 801215a:	b089      	sub	sp, #36	; 0x24
 801215c:	af00      	add	r7, sp, #0
 801215e:	60f8      	str	r0, [r7, #12]
 8012160:	60b9      	str	r1, [r7, #8]
 8012162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	f003 0307 	and.w	r3, r3, #7
 801216a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801216c:	69fb      	ldr	r3, [r7, #28]
 801216e:	f1c3 0307 	rsb	r3, r3, #7
 8012172:	2b04      	cmp	r3, #4
 8012174:	bf28      	it	cs
 8012176:	2304      	movcs	r3, #4
 8012178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801217a:	69fb      	ldr	r3, [r7, #28]
 801217c:	3304      	adds	r3, #4
 801217e:	2b06      	cmp	r3, #6
 8012180:	d902      	bls.n	8012188 <NVIC_EncodePriority+0x30>
 8012182:	69fb      	ldr	r3, [r7, #28]
 8012184:	3b03      	subs	r3, #3
 8012186:	e000      	b.n	801218a <NVIC_EncodePriority+0x32>
 8012188:	2300      	movs	r3, #0
 801218a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801218c:	f04f 32ff 	mov.w	r2, #4294967295
 8012190:	69bb      	ldr	r3, [r7, #24]
 8012192:	fa02 f303 	lsl.w	r3, r2, r3
 8012196:	43da      	mvns	r2, r3
 8012198:	68bb      	ldr	r3, [r7, #8]
 801219a:	401a      	ands	r2, r3
 801219c:	697b      	ldr	r3, [r7, #20]
 801219e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80121a0:	f04f 31ff 	mov.w	r1, #4294967295
 80121a4:	697b      	ldr	r3, [r7, #20]
 80121a6:	fa01 f303 	lsl.w	r3, r1, r3
 80121aa:	43d9      	mvns	r1, r3
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80121b0:	4313      	orrs	r3, r2
         );
}
 80121b2:	4618      	mov	r0, r3
 80121b4:	3724      	adds	r7, #36	; 0x24
 80121b6:	46bd      	mov	sp, r7
 80121b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121bc:	4770      	bx	lr
	...

080121c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b082      	sub	sp, #8
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	3b01      	subs	r3, #1
 80121cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80121d0:	d301      	bcc.n	80121d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80121d2:	2301      	movs	r3, #1
 80121d4:	e00f      	b.n	80121f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80121d6:	4a0a      	ldr	r2, [pc, #40]	; (8012200 <SysTick_Config+0x40>)
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	3b01      	subs	r3, #1
 80121dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80121de:	210f      	movs	r1, #15
 80121e0:	f04f 30ff 	mov.w	r0, #4294967295
 80121e4:	f7ff ff8e 	bl	8012104 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80121e8:	4b05      	ldr	r3, [pc, #20]	; (8012200 <SysTick_Config+0x40>)
 80121ea:	2200      	movs	r2, #0
 80121ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80121ee:	4b04      	ldr	r3, [pc, #16]	; (8012200 <SysTick_Config+0x40>)
 80121f0:	2207      	movs	r2, #7
 80121f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80121f4:	2300      	movs	r3, #0
}
 80121f6:	4618      	mov	r0, r3
 80121f8:	3708      	adds	r7, #8
 80121fa:	46bd      	mov	sp, r7
 80121fc:	bd80      	pop	{r7, pc}
 80121fe:	bf00      	nop
 8012200:	e000e010 	.word	0xe000e010

08012204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012204:	b580      	push	{r7, lr}
 8012206:	b082      	sub	sp, #8
 8012208:	af00      	add	r7, sp, #0
 801220a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f7ff ff47 	bl	80120a0 <__NVIC_SetPriorityGrouping>
}
 8012212:	bf00      	nop
 8012214:	3708      	adds	r7, #8
 8012216:	46bd      	mov	sp, r7
 8012218:	bd80      	pop	{r7, pc}

0801221a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801221a:	b580      	push	{r7, lr}
 801221c:	b086      	sub	sp, #24
 801221e:	af00      	add	r7, sp, #0
 8012220:	4603      	mov	r3, r0
 8012222:	60b9      	str	r1, [r7, #8]
 8012224:	607a      	str	r2, [r7, #4]
 8012226:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8012228:	2300      	movs	r3, #0
 801222a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801222c:	f7ff ff5c 	bl	80120e8 <__NVIC_GetPriorityGrouping>
 8012230:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8012232:	687a      	ldr	r2, [r7, #4]
 8012234:	68b9      	ldr	r1, [r7, #8]
 8012236:	6978      	ldr	r0, [r7, #20]
 8012238:	f7ff ff8e 	bl	8012158 <NVIC_EncodePriority>
 801223c:	4602      	mov	r2, r0
 801223e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012242:	4611      	mov	r1, r2
 8012244:	4618      	mov	r0, r3
 8012246:	f7ff ff5d 	bl	8012104 <__NVIC_SetPriority>
}
 801224a:	bf00      	nop
 801224c:	3718      	adds	r7, #24
 801224e:	46bd      	mov	sp, r7
 8012250:	bd80      	pop	{r7, pc}

08012252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8012252:	b580      	push	{r7, lr}
 8012254:	b082      	sub	sp, #8
 8012256:	af00      	add	r7, sp, #0
 8012258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801225a:	6878      	ldr	r0, [r7, #4]
 801225c:	f7ff ffb0 	bl	80121c0 <SysTick_Config>
 8012260:	4603      	mov	r3, r0
}
 8012262:	4618      	mov	r0, r3
 8012264:	3708      	adds	r7, #8
 8012266:	46bd      	mov	sp, r7
 8012268:	bd80      	pop	{r7, pc}
	...

0801226c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801226c:	b480      	push	{r7}
 801226e:	b089      	sub	sp, #36	; 0x24
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
 8012274:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8012276:	2300      	movs	r3, #0
 8012278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801227a:	2300      	movs	r3, #0
 801227c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801227e:	2300      	movs	r3, #0
 8012280:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012282:	2300      	movs	r3, #0
 8012284:	61fb      	str	r3, [r7, #28]
 8012286:	e159      	b.n	801253c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8012288:	2201      	movs	r2, #1
 801228a:	69fb      	ldr	r3, [r7, #28]
 801228c:	fa02 f303 	lsl.w	r3, r2, r3
 8012290:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8012292:	683b      	ldr	r3, [r7, #0]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	697a      	ldr	r2, [r7, #20]
 8012298:	4013      	ands	r3, r2
 801229a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801229c:	693a      	ldr	r2, [r7, #16]
 801229e:	697b      	ldr	r3, [r7, #20]
 80122a0:	429a      	cmp	r2, r3
 80122a2:	f040 8148 	bne.w	8012536 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80122a6:	683b      	ldr	r3, [r7, #0]
 80122a8:	685b      	ldr	r3, [r3, #4]
 80122aa:	f003 0303 	and.w	r3, r3, #3
 80122ae:	2b01      	cmp	r3, #1
 80122b0:	d005      	beq.n	80122be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80122b2:	683b      	ldr	r3, [r7, #0]
 80122b4:	685b      	ldr	r3, [r3, #4]
 80122b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80122ba:	2b02      	cmp	r3, #2
 80122bc:	d130      	bne.n	8012320 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	689b      	ldr	r3, [r3, #8]
 80122c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80122c4:	69fb      	ldr	r3, [r7, #28]
 80122c6:	005b      	lsls	r3, r3, #1
 80122c8:	2203      	movs	r2, #3
 80122ca:	fa02 f303 	lsl.w	r3, r2, r3
 80122ce:	43db      	mvns	r3, r3
 80122d0:	69ba      	ldr	r2, [r7, #24]
 80122d2:	4013      	ands	r3, r2
 80122d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80122d6:	683b      	ldr	r3, [r7, #0]
 80122d8:	68da      	ldr	r2, [r3, #12]
 80122da:	69fb      	ldr	r3, [r7, #28]
 80122dc:	005b      	lsls	r3, r3, #1
 80122de:	fa02 f303 	lsl.w	r3, r2, r3
 80122e2:	69ba      	ldr	r2, [r7, #24]
 80122e4:	4313      	orrs	r3, r2
 80122e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	69ba      	ldr	r2, [r7, #24]
 80122ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	685b      	ldr	r3, [r3, #4]
 80122f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80122f4:	2201      	movs	r2, #1
 80122f6:	69fb      	ldr	r3, [r7, #28]
 80122f8:	fa02 f303 	lsl.w	r3, r2, r3
 80122fc:	43db      	mvns	r3, r3
 80122fe:	69ba      	ldr	r2, [r7, #24]
 8012300:	4013      	ands	r3, r2
 8012302:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8012304:	683b      	ldr	r3, [r7, #0]
 8012306:	685b      	ldr	r3, [r3, #4]
 8012308:	091b      	lsrs	r3, r3, #4
 801230a:	f003 0201 	and.w	r2, r3, #1
 801230e:	69fb      	ldr	r3, [r7, #28]
 8012310:	fa02 f303 	lsl.w	r3, r2, r3
 8012314:	69ba      	ldr	r2, [r7, #24]
 8012316:	4313      	orrs	r3, r2
 8012318:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	69ba      	ldr	r2, [r7, #24]
 801231e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8012320:	683b      	ldr	r3, [r7, #0]
 8012322:	685b      	ldr	r3, [r3, #4]
 8012324:	f003 0303 	and.w	r3, r3, #3
 8012328:	2b03      	cmp	r3, #3
 801232a:	d017      	beq.n	801235c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	68db      	ldr	r3, [r3, #12]
 8012330:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8012332:	69fb      	ldr	r3, [r7, #28]
 8012334:	005b      	lsls	r3, r3, #1
 8012336:	2203      	movs	r2, #3
 8012338:	fa02 f303 	lsl.w	r3, r2, r3
 801233c:	43db      	mvns	r3, r3
 801233e:	69ba      	ldr	r2, [r7, #24]
 8012340:	4013      	ands	r3, r2
 8012342:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8012344:	683b      	ldr	r3, [r7, #0]
 8012346:	689a      	ldr	r2, [r3, #8]
 8012348:	69fb      	ldr	r3, [r7, #28]
 801234a:	005b      	lsls	r3, r3, #1
 801234c:	fa02 f303 	lsl.w	r3, r2, r3
 8012350:	69ba      	ldr	r2, [r7, #24]
 8012352:	4313      	orrs	r3, r2
 8012354:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	69ba      	ldr	r2, [r7, #24]
 801235a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801235c:	683b      	ldr	r3, [r7, #0]
 801235e:	685b      	ldr	r3, [r3, #4]
 8012360:	f003 0303 	and.w	r3, r3, #3
 8012364:	2b02      	cmp	r3, #2
 8012366:	d123      	bne.n	80123b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8012368:	69fb      	ldr	r3, [r7, #28]
 801236a:	08da      	lsrs	r2, r3, #3
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	3208      	adds	r2, #8
 8012370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012374:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8012376:	69fb      	ldr	r3, [r7, #28]
 8012378:	f003 0307 	and.w	r3, r3, #7
 801237c:	009b      	lsls	r3, r3, #2
 801237e:	220f      	movs	r2, #15
 8012380:	fa02 f303 	lsl.w	r3, r2, r3
 8012384:	43db      	mvns	r3, r3
 8012386:	69ba      	ldr	r2, [r7, #24]
 8012388:	4013      	ands	r3, r2
 801238a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801238c:	683b      	ldr	r3, [r7, #0]
 801238e:	691a      	ldr	r2, [r3, #16]
 8012390:	69fb      	ldr	r3, [r7, #28]
 8012392:	f003 0307 	and.w	r3, r3, #7
 8012396:	009b      	lsls	r3, r3, #2
 8012398:	fa02 f303 	lsl.w	r3, r2, r3
 801239c:	69ba      	ldr	r2, [r7, #24]
 801239e:	4313      	orrs	r3, r2
 80123a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80123a2:	69fb      	ldr	r3, [r7, #28]
 80123a4:	08da      	lsrs	r2, r3, #3
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	3208      	adds	r2, #8
 80123aa:	69b9      	ldr	r1, [r7, #24]
 80123ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80123b6:	69fb      	ldr	r3, [r7, #28]
 80123b8:	005b      	lsls	r3, r3, #1
 80123ba:	2203      	movs	r2, #3
 80123bc:	fa02 f303 	lsl.w	r3, r2, r3
 80123c0:	43db      	mvns	r3, r3
 80123c2:	69ba      	ldr	r2, [r7, #24]
 80123c4:	4013      	ands	r3, r2
 80123c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80123c8:	683b      	ldr	r3, [r7, #0]
 80123ca:	685b      	ldr	r3, [r3, #4]
 80123cc:	f003 0203 	and.w	r2, r3, #3
 80123d0:	69fb      	ldr	r3, [r7, #28]
 80123d2:	005b      	lsls	r3, r3, #1
 80123d4:	fa02 f303 	lsl.w	r3, r2, r3
 80123d8:	69ba      	ldr	r2, [r7, #24]
 80123da:	4313      	orrs	r3, r2
 80123dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	69ba      	ldr	r2, [r7, #24]
 80123e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80123e4:	683b      	ldr	r3, [r7, #0]
 80123e6:	685b      	ldr	r3, [r3, #4]
 80123e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	f000 80a2 	beq.w	8012536 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80123f2:	2300      	movs	r3, #0
 80123f4:	60fb      	str	r3, [r7, #12]
 80123f6:	4b57      	ldr	r3, [pc, #348]	; (8012554 <HAL_GPIO_Init+0x2e8>)
 80123f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80123fa:	4a56      	ldr	r2, [pc, #344]	; (8012554 <HAL_GPIO_Init+0x2e8>)
 80123fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012400:	6453      	str	r3, [r2, #68]	; 0x44
 8012402:	4b54      	ldr	r3, [pc, #336]	; (8012554 <HAL_GPIO_Init+0x2e8>)
 8012404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801240a:	60fb      	str	r3, [r7, #12]
 801240c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801240e:	4a52      	ldr	r2, [pc, #328]	; (8012558 <HAL_GPIO_Init+0x2ec>)
 8012410:	69fb      	ldr	r3, [r7, #28]
 8012412:	089b      	lsrs	r3, r3, #2
 8012414:	3302      	adds	r3, #2
 8012416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801241a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801241c:	69fb      	ldr	r3, [r7, #28]
 801241e:	f003 0303 	and.w	r3, r3, #3
 8012422:	009b      	lsls	r3, r3, #2
 8012424:	220f      	movs	r2, #15
 8012426:	fa02 f303 	lsl.w	r3, r2, r3
 801242a:	43db      	mvns	r3, r3
 801242c:	69ba      	ldr	r2, [r7, #24]
 801242e:	4013      	ands	r3, r2
 8012430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	4a49      	ldr	r2, [pc, #292]	; (801255c <HAL_GPIO_Init+0x2f0>)
 8012436:	4293      	cmp	r3, r2
 8012438:	d019      	beq.n	801246e <HAL_GPIO_Init+0x202>
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	4a48      	ldr	r2, [pc, #288]	; (8012560 <HAL_GPIO_Init+0x2f4>)
 801243e:	4293      	cmp	r3, r2
 8012440:	d013      	beq.n	801246a <HAL_GPIO_Init+0x1fe>
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	4a47      	ldr	r2, [pc, #284]	; (8012564 <HAL_GPIO_Init+0x2f8>)
 8012446:	4293      	cmp	r3, r2
 8012448:	d00d      	beq.n	8012466 <HAL_GPIO_Init+0x1fa>
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	4a46      	ldr	r2, [pc, #280]	; (8012568 <HAL_GPIO_Init+0x2fc>)
 801244e:	4293      	cmp	r3, r2
 8012450:	d007      	beq.n	8012462 <HAL_GPIO_Init+0x1f6>
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	4a45      	ldr	r2, [pc, #276]	; (801256c <HAL_GPIO_Init+0x300>)
 8012456:	4293      	cmp	r3, r2
 8012458:	d101      	bne.n	801245e <HAL_GPIO_Init+0x1f2>
 801245a:	2304      	movs	r3, #4
 801245c:	e008      	b.n	8012470 <HAL_GPIO_Init+0x204>
 801245e:	2307      	movs	r3, #7
 8012460:	e006      	b.n	8012470 <HAL_GPIO_Init+0x204>
 8012462:	2303      	movs	r3, #3
 8012464:	e004      	b.n	8012470 <HAL_GPIO_Init+0x204>
 8012466:	2302      	movs	r3, #2
 8012468:	e002      	b.n	8012470 <HAL_GPIO_Init+0x204>
 801246a:	2301      	movs	r3, #1
 801246c:	e000      	b.n	8012470 <HAL_GPIO_Init+0x204>
 801246e:	2300      	movs	r3, #0
 8012470:	69fa      	ldr	r2, [r7, #28]
 8012472:	f002 0203 	and.w	r2, r2, #3
 8012476:	0092      	lsls	r2, r2, #2
 8012478:	4093      	lsls	r3, r2
 801247a:	69ba      	ldr	r2, [r7, #24]
 801247c:	4313      	orrs	r3, r2
 801247e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8012480:	4935      	ldr	r1, [pc, #212]	; (8012558 <HAL_GPIO_Init+0x2ec>)
 8012482:	69fb      	ldr	r3, [r7, #28]
 8012484:	089b      	lsrs	r3, r3, #2
 8012486:	3302      	adds	r3, #2
 8012488:	69ba      	ldr	r2, [r7, #24]
 801248a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801248e:	4b38      	ldr	r3, [pc, #224]	; (8012570 <HAL_GPIO_Init+0x304>)
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012494:	693b      	ldr	r3, [r7, #16]
 8012496:	43db      	mvns	r3, r3
 8012498:	69ba      	ldr	r2, [r7, #24]
 801249a:	4013      	ands	r3, r2
 801249c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801249e:	683b      	ldr	r3, [r7, #0]
 80124a0:	685b      	ldr	r3, [r3, #4]
 80124a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d003      	beq.n	80124b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80124aa:	69ba      	ldr	r2, [r7, #24]
 80124ac:	693b      	ldr	r3, [r7, #16]
 80124ae:	4313      	orrs	r3, r2
 80124b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80124b2:	4a2f      	ldr	r2, [pc, #188]	; (8012570 <HAL_GPIO_Init+0x304>)
 80124b4:	69bb      	ldr	r3, [r7, #24]
 80124b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80124b8:	4b2d      	ldr	r3, [pc, #180]	; (8012570 <HAL_GPIO_Init+0x304>)
 80124ba:	685b      	ldr	r3, [r3, #4]
 80124bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80124be:	693b      	ldr	r3, [r7, #16]
 80124c0:	43db      	mvns	r3, r3
 80124c2:	69ba      	ldr	r2, [r7, #24]
 80124c4:	4013      	ands	r3, r2
 80124c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80124c8:	683b      	ldr	r3, [r7, #0]
 80124ca:	685b      	ldr	r3, [r3, #4]
 80124cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d003      	beq.n	80124dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80124d4:	69ba      	ldr	r2, [r7, #24]
 80124d6:	693b      	ldr	r3, [r7, #16]
 80124d8:	4313      	orrs	r3, r2
 80124da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80124dc:	4a24      	ldr	r2, [pc, #144]	; (8012570 <HAL_GPIO_Init+0x304>)
 80124de:	69bb      	ldr	r3, [r7, #24]
 80124e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80124e2:	4b23      	ldr	r3, [pc, #140]	; (8012570 <HAL_GPIO_Init+0x304>)
 80124e4:	689b      	ldr	r3, [r3, #8]
 80124e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80124e8:	693b      	ldr	r3, [r7, #16]
 80124ea:	43db      	mvns	r3, r3
 80124ec:	69ba      	ldr	r2, [r7, #24]
 80124ee:	4013      	ands	r3, r2
 80124f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80124f2:	683b      	ldr	r3, [r7, #0]
 80124f4:	685b      	ldr	r3, [r3, #4]
 80124f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d003      	beq.n	8012506 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80124fe:	69ba      	ldr	r2, [r7, #24]
 8012500:	693b      	ldr	r3, [r7, #16]
 8012502:	4313      	orrs	r3, r2
 8012504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8012506:	4a1a      	ldr	r2, [pc, #104]	; (8012570 <HAL_GPIO_Init+0x304>)
 8012508:	69bb      	ldr	r3, [r7, #24]
 801250a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801250c:	4b18      	ldr	r3, [pc, #96]	; (8012570 <HAL_GPIO_Init+0x304>)
 801250e:	68db      	ldr	r3, [r3, #12]
 8012510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012512:	693b      	ldr	r3, [r7, #16]
 8012514:	43db      	mvns	r3, r3
 8012516:	69ba      	ldr	r2, [r7, #24]
 8012518:	4013      	ands	r3, r2
 801251a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801251c:	683b      	ldr	r3, [r7, #0]
 801251e:	685b      	ldr	r3, [r3, #4]
 8012520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012524:	2b00      	cmp	r3, #0
 8012526:	d003      	beq.n	8012530 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8012528:	69ba      	ldr	r2, [r7, #24]
 801252a:	693b      	ldr	r3, [r7, #16]
 801252c:	4313      	orrs	r3, r2
 801252e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8012530:	4a0f      	ldr	r2, [pc, #60]	; (8012570 <HAL_GPIO_Init+0x304>)
 8012532:	69bb      	ldr	r3, [r7, #24]
 8012534:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012536:	69fb      	ldr	r3, [r7, #28]
 8012538:	3301      	adds	r3, #1
 801253a:	61fb      	str	r3, [r7, #28]
 801253c:	69fb      	ldr	r3, [r7, #28]
 801253e:	2b0f      	cmp	r3, #15
 8012540:	f67f aea2 	bls.w	8012288 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8012544:	bf00      	nop
 8012546:	bf00      	nop
 8012548:	3724      	adds	r7, #36	; 0x24
 801254a:	46bd      	mov	sp, r7
 801254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012550:	4770      	bx	lr
 8012552:	bf00      	nop
 8012554:	40023800 	.word	0x40023800
 8012558:	40013800 	.word	0x40013800
 801255c:	40020000 	.word	0x40020000
 8012560:	40020400 	.word	0x40020400
 8012564:	40020800 	.word	0x40020800
 8012568:	40020c00 	.word	0x40020c00
 801256c:	40021000 	.word	0x40021000
 8012570:	40013c00 	.word	0x40013c00

08012574 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8012574:	b480      	push	{r7}
 8012576:	b087      	sub	sp, #28
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
 801257c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801257e:	2300      	movs	r3, #0
 8012580:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8012582:	2300      	movs	r3, #0
 8012584:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8012586:	2300      	movs	r3, #0
 8012588:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801258a:	2300      	movs	r3, #0
 801258c:	617b      	str	r3, [r7, #20]
 801258e:	e0bb      	b.n	8012708 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8012590:	2201      	movs	r2, #1
 8012592:	697b      	ldr	r3, [r7, #20]
 8012594:	fa02 f303 	lsl.w	r3, r2, r3
 8012598:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 801259a:	683a      	ldr	r2, [r7, #0]
 801259c:	693b      	ldr	r3, [r7, #16]
 801259e:	4013      	ands	r3, r2
 80125a0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80125a2:	68fa      	ldr	r2, [r7, #12]
 80125a4:	693b      	ldr	r3, [r7, #16]
 80125a6:	429a      	cmp	r2, r3
 80125a8:	f040 80ab 	bne.w	8012702 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80125ac:	4a5c      	ldr	r2, [pc, #368]	; (8012720 <HAL_GPIO_DeInit+0x1ac>)
 80125ae:	697b      	ldr	r3, [r7, #20]
 80125b0:	089b      	lsrs	r3, r3, #2
 80125b2:	3302      	adds	r3, #2
 80125b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80125b8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80125ba:	697b      	ldr	r3, [r7, #20]
 80125bc:	f003 0303 	and.w	r3, r3, #3
 80125c0:	009b      	lsls	r3, r3, #2
 80125c2:	220f      	movs	r2, #15
 80125c4:	fa02 f303 	lsl.w	r3, r2, r3
 80125c8:	68ba      	ldr	r2, [r7, #8]
 80125ca:	4013      	ands	r3, r2
 80125cc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	4a54      	ldr	r2, [pc, #336]	; (8012724 <HAL_GPIO_DeInit+0x1b0>)
 80125d2:	4293      	cmp	r3, r2
 80125d4:	d019      	beq.n	801260a <HAL_GPIO_DeInit+0x96>
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	4a53      	ldr	r2, [pc, #332]	; (8012728 <HAL_GPIO_DeInit+0x1b4>)
 80125da:	4293      	cmp	r3, r2
 80125dc:	d013      	beq.n	8012606 <HAL_GPIO_DeInit+0x92>
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	4a52      	ldr	r2, [pc, #328]	; (801272c <HAL_GPIO_DeInit+0x1b8>)
 80125e2:	4293      	cmp	r3, r2
 80125e4:	d00d      	beq.n	8012602 <HAL_GPIO_DeInit+0x8e>
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	4a51      	ldr	r2, [pc, #324]	; (8012730 <HAL_GPIO_DeInit+0x1bc>)
 80125ea:	4293      	cmp	r3, r2
 80125ec:	d007      	beq.n	80125fe <HAL_GPIO_DeInit+0x8a>
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	4a50      	ldr	r2, [pc, #320]	; (8012734 <HAL_GPIO_DeInit+0x1c0>)
 80125f2:	4293      	cmp	r3, r2
 80125f4:	d101      	bne.n	80125fa <HAL_GPIO_DeInit+0x86>
 80125f6:	2304      	movs	r3, #4
 80125f8:	e008      	b.n	801260c <HAL_GPIO_DeInit+0x98>
 80125fa:	2307      	movs	r3, #7
 80125fc:	e006      	b.n	801260c <HAL_GPIO_DeInit+0x98>
 80125fe:	2303      	movs	r3, #3
 8012600:	e004      	b.n	801260c <HAL_GPIO_DeInit+0x98>
 8012602:	2302      	movs	r3, #2
 8012604:	e002      	b.n	801260c <HAL_GPIO_DeInit+0x98>
 8012606:	2301      	movs	r3, #1
 8012608:	e000      	b.n	801260c <HAL_GPIO_DeInit+0x98>
 801260a:	2300      	movs	r3, #0
 801260c:	697a      	ldr	r2, [r7, #20]
 801260e:	f002 0203 	and.w	r2, r2, #3
 8012612:	0092      	lsls	r2, r2, #2
 8012614:	4093      	lsls	r3, r2
 8012616:	68ba      	ldr	r2, [r7, #8]
 8012618:	429a      	cmp	r2, r3
 801261a:	d132      	bne.n	8012682 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 801261c:	4b46      	ldr	r3, [pc, #280]	; (8012738 <HAL_GPIO_DeInit+0x1c4>)
 801261e:	681a      	ldr	r2, [r3, #0]
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	43db      	mvns	r3, r3
 8012624:	4944      	ldr	r1, [pc, #272]	; (8012738 <HAL_GPIO_DeInit+0x1c4>)
 8012626:	4013      	ands	r3, r2
 8012628:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 801262a:	4b43      	ldr	r3, [pc, #268]	; (8012738 <HAL_GPIO_DeInit+0x1c4>)
 801262c:	685a      	ldr	r2, [r3, #4]
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	43db      	mvns	r3, r3
 8012632:	4941      	ldr	r1, [pc, #260]	; (8012738 <HAL_GPIO_DeInit+0x1c4>)
 8012634:	4013      	ands	r3, r2
 8012636:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8012638:	4b3f      	ldr	r3, [pc, #252]	; (8012738 <HAL_GPIO_DeInit+0x1c4>)
 801263a:	689a      	ldr	r2, [r3, #8]
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	43db      	mvns	r3, r3
 8012640:	493d      	ldr	r1, [pc, #244]	; (8012738 <HAL_GPIO_DeInit+0x1c4>)
 8012642:	4013      	ands	r3, r2
 8012644:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8012646:	4b3c      	ldr	r3, [pc, #240]	; (8012738 <HAL_GPIO_DeInit+0x1c4>)
 8012648:	68da      	ldr	r2, [r3, #12]
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	43db      	mvns	r3, r3
 801264e:	493a      	ldr	r1, [pc, #232]	; (8012738 <HAL_GPIO_DeInit+0x1c4>)
 8012650:	4013      	ands	r3, r2
 8012652:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8012654:	697b      	ldr	r3, [r7, #20]
 8012656:	f003 0303 	and.w	r3, r3, #3
 801265a:	009b      	lsls	r3, r3, #2
 801265c:	220f      	movs	r2, #15
 801265e:	fa02 f303 	lsl.w	r3, r2, r3
 8012662:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8012664:	4a2e      	ldr	r2, [pc, #184]	; (8012720 <HAL_GPIO_DeInit+0x1ac>)
 8012666:	697b      	ldr	r3, [r7, #20]
 8012668:	089b      	lsrs	r3, r3, #2
 801266a:	3302      	adds	r3, #2
 801266c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8012670:	68bb      	ldr	r3, [r7, #8]
 8012672:	43da      	mvns	r2, r3
 8012674:	482a      	ldr	r0, [pc, #168]	; (8012720 <HAL_GPIO_DeInit+0x1ac>)
 8012676:	697b      	ldr	r3, [r7, #20]
 8012678:	089b      	lsrs	r3, r3, #2
 801267a:	400a      	ands	r2, r1
 801267c:	3302      	adds	r3, #2
 801267e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	681a      	ldr	r2, [r3, #0]
 8012686:	697b      	ldr	r3, [r7, #20]
 8012688:	005b      	lsls	r3, r3, #1
 801268a:	2103      	movs	r1, #3
 801268c:	fa01 f303 	lsl.w	r3, r1, r3
 8012690:	43db      	mvns	r3, r3
 8012692:	401a      	ands	r2, r3
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8012698:	697b      	ldr	r3, [r7, #20]
 801269a:	08da      	lsrs	r2, r3, #3
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	3208      	adds	r2, #8
 80126a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80126a4:	697b      	ldr	r3, [r7, #20]
 80126a6:	f003 0307 	and.w	r3, r3, #7
 80126aa:	009b      	lsls	r3, r3, #2
 80126ac:	220f      	movs	r2, #15
 80126ae:	fa02 f303 	lsl.w	r3, r2, r3
 80126b2:	43db      	mvns	r3, r3
 80126b4:	697a      	ldr	r2, [r7, #20]
 80126b6:	08d2      	lsrs	r2, r2, #3
 80126b8:	4019      	ands	r1, r3
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	3208      	adds	r2, #8
 80126be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	68da      	ldr	r2, [r3, #12]
 80126c6:	697b      	ldr	r3, [r7, #20]
 80126c8:	005b      	lsls	r3, r3, #1
 80126ca:	2103      	movs	r1, #3
 80126cc:	fa01 f303 	lsl.w	r3, r1, r3
 80126d0:	43db      	mvns	r3, r3
 80126d2:	401a      	ands	r2, r3
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	685a      	ldr	r2, [r3, #4]
 80126dc:	2101      	movs	r1, #1
 80126de:	697b      	ldr	r3, [r7, #20]
 80126e0:	fa01 f303 	lsl.w	r3, r1, r3
 80126e4:	43db      	mvns	r3, r3
 80126e6:	401a      	ands	r2, r3
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	689a      	ldr	r2, [r3, #8]
 80126f0:	697b      	ldr	r3, [r7, #20]
 80126f2:	005b      	lsls	r3, r3, #1
 80126f4:	2103      	movs	r1, #3
 80126f6:	fa01 f303 	lsl.w	r3, r1, r3
 80126fa:	43db      	mvns	r3, r3
 80126fc:	401a      	ands	r2, r3
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012702:	697b      	ldr	r3, [r7, #20]
 8012704:	3301      	adds	r3, #1
 8012706:	617b      	str	r3, [r7, #20]
 8012708:	697b      	ldr	r3, [r7, #20]
 801270a:	2b0f      	cmp	r3, #15
 801270c:	f67f af40 	bls.w	8012590 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8012710:	bf00      	nop
 8012712:	bf00      	nop
 8012714:	371c      	adds	r7, #28
 8012716:	46bd      	mov	sp, r7
 8012718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271c:	4770      	bx	lr
 801271e:	bf00      	nop
 8012720:	40013800 	.word	0x40013800
 8012724:	40020000 	.word	0x40020000
 8012728:	40020400 	.word	0x40020400
 801272c:	40020800 	.word	0x40020800
 8012730:	40020c00 	.word	0x40020c00
 8012734:	40021000 	.word	0x40021000
 8012738:	40013c00 	.word	0x40013c00

0801273c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801273c:	b480      	push	{r7}
 801273e:	b085      	sub	sp, #20
 8012740:	af00      	add	r7, sp, #0
 8012742:	6078      	str	r0, [r7, #4]
 8012744:	460b      	mov	r3, r1
 8012746:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	691a      	ldr	r2, [r3, #16]
 801274c:	887b      	ldrh	r3, [r7, #2]
 801274e:	4013      	ands	r3, r2
 8012750:	2b00      	cmp	r3, #0
 8012752:	d002      	beq.n	801275a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8012754:	2301      	movs	r3, #1
 8012756:	73fb      	strb	r3, [r7, #15]
 8012758:	e001      	b.n	801275e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801275a:	2300      	movs	r3, #0
 801275c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801275e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012760:	4618      	mov	r0, r3
 8012762:	3714      	adds	r7, #20
 8012764:	46bd      	mov	sp, r7
 8012766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276a:	4770      	bx	lr

0801276c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801276c:	b480      	push	{r7}
 801276e:	b083      	sub	sp, #12
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
 8012774:	460b      	mov	r3, r1
 8012776:	807b      	strh	r3, [r7, #2]
 8012778:	4613      	mov	r3, r2
 801277a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801277c:	787b      	ldrb	r3, [r7, #1]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d003      	beq.n	801278a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8012782:	887a      	ldrh	r2, [r7, #2]
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8012788:	e003      	b.n	8012792 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801278a:	887b      	ldrh	r3, [r7, #2]
 801278c:	041a      	lsls	r2, r3, #16
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	619a      	str	r2, [r3, #24]
}
 8012792:	bf00      	nop
 8012794:	370c      	adds	r7, #12
 8012796:	46bd      	mov	sp, r7
 8012798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801279c:	4770      	bx	lr
	...

080127a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80127a0:	b580      	push	{r7, lr}
 80127a2:	b084      	sub	sp, #16
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d101      	bne.n	80127b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80127ae:	2301      	movs	r3, #1
 80127b0:	e12b      	b.n	8012a0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80127b8:	b2db      	uxtb	r3, r3
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d106      	bne.n	80127cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	2200      	movs	r2, #0
 80127c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80127c6:	6878      	ldr	r0, [r7, #4]
 80127c8:	f7ee fbe8 	bl	8000f9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	2224      	movs	r2, #36	; 0x24
 80127d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	681a      	ldr	r2, [r3, #0]
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	f022 0201 	bic.w	r2, r2, #1
 80127e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	681a      	ldr	r2, [r3, #0]
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80127f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	681a      	ldr	r2, [r3, #0]
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012802:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8012804:	f001 fbf8 	bl	8013ff8 <HAL_RCC_GetPCLK1Freq>
 8012808:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	685b      	ldr	r3, [r3, #4]
 801280e:	4a81      	ldr	r2, [pc, #516]	; (8012a14 <HAL_I2C_Init+0x274>)
 8012810:	4293      	cmp	r3, r2
 8012812:	d807      	bhi.n	8012824 <HAL_I2C_Init+0x84>
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	4a80      	ldr	r2, [pc, #512]	; (8012a18 <HAL_I2C_Init+0x278>)
 8012818:	4293      	cmp	r3, r2
 801281a:	bf94      	ite	ls
 801281c:	2301      	movls	r3, #1
 801281e:	2300      	movhi	r3, #0
 8012820:	b2db      	uxtb	r3, r3
 8012822:	e006      	b.n	8012832 <HAL_I2C_Init+0x92>
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	4a7d      	ldr	r2, [pc, #500]	; (8012a1c <HAL_I2C_Init+0x27c>)
 8012828:	4293      	cmp	r3, r2
 801282a:	bf94      	ite	ls
 801282c:	2301      	movls	r3, #1
 801282e:	2300      	movhi	r3, #0
 8012830:	b2db      	uxtb	r3, r3
 8012832:	2b00      	cmp	r3, #0
 8012834:	d001      	beq.n	801283a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8012836:	2301      	movs	r3, #1
 8012838:	e0e7      	b.n	8012a0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	4a78      	ldr	r2, [pc, #480]	; (8012a20 <HAL_I2C_Init+0x280>)
 801283e:	fba2 2303 	umull	r2, r3, r2, r3
 8012842:	0c9b      	lsrs	r3, r3, #18
 8012844:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	685b      	ldr	r3, [r3, #4]
 801284c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	68ba      	ldr	r2, [r7, #8]
 8012856:	430a      	orrs	r2, r1
 8012858:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	6a1b      	ldr	r3, [r3, #32]
 8012860:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	685b      	ldr	r3, [r3, #4]
 8012868:	4a6a      	ldr	r2, [pc, #424]	; (8012a14 <HAL_I2C_Init+0x274>)
 801286a:	4293      	cmp	r3, r2
 801286c:	d802      	bhi.n	8012874 <HAL_I2C_Init+0xd4>
 801286e:	68bb      	ldr	r3, [r7, #8]
 8012870:	3301      	adds	r3, #1
 8012872:	e009      	b.n	8012888 <HAL_I2C_Init+0xe8>
 8012874:	68bb      	ldr	r3, [r7, #8]
 8012876:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801287a:	fb02 f303 	mul.w	r3, r2, r3
 801287e:	4a69      	ldr	r2, [pc, #420]	; (8012a24 <HAL_I2C_Init+0x284>)
 8012880:	fba2 2303 	umull	r2, r3, r2, r3
 8012884:	099b      	lsrs	r3, r3, #6
 8012886:	3301      	adds	r3, #1
 8012888:	687a      	ldr	r2, [r7, #4]
 801288a:	6812      	ldr	r2, [r2, #0]
 801288c:	430b      	orrs	r3, r1
 801288e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	69db      	ldr	r3, [r3, #28]
 8012896:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 801289a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	685b      	ldr	r3, [r3, #4]
 80128a2:	495c      	ldr	r1, [pc, #368]	; (8012a14 <HAL_I2C_Init+0x274>)
 80128a4:	428b      	cmp	r3, r1
 80128a6:	d819      	bhi.n	80128dc <HAL_I2C_Init+0x13c>
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	1e59      	subs	r1, r3, #1
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	685b      	ldr	r3, [r3, #4]
 80128b0:	005b      	lsls	r3, r3, #1
 80128b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80128b6:	1c59      	adds	r1, r3, #1
 80128b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80128bc:	400b      	ands	r3, r1
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d00a      	beq.n	80128d8 <HAL_I2C_Init+0x138>
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	1e59      	subs	r1, r3, #1
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	685b      	ldr	r3, [r3, #4]
 80128ca:	005b      	lsls	r3, r3, #1
 80128cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80128d0:	3301      	adds	r3, #1
 80128d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80128d6:	e051      	b.n	801297c <HAL_I2C_Init+0x1dc>
 80128d8:	2304      	movs	r3, #4
 80128da:	e04f      	b.n	801297c <HAL_I2C_Init+0x1dc>
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	689b      	ldr	r3, [r3, #8]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d111      	bne.n	8012908 <HAL_I2C_Init+0x168>
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	1e58      	subs	r0, r3, #1
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	6859      	ldr	r1, [r3, #4]
 80128ec:	460b      	mov	r3, r1
 80128ee:	005b      	lsls	r3, r3, #1
 80128f0:	440b      	add	r3, r1
 80128f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80128f6:	3301      	adds	r3, #1
 80128f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	bf0c      	ite	eq
 8012900:	2301      	moveq	r3, #1
 8012902:	2300      	movne	r3, #0
 8012904:	b2db      	uxtb	r3, r3
 8012906:	e012      	b.n	801292e <HAL_I2C_Init+0x18e>
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	1e58      	subs	r0, r3, #1
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	6859      	ldr	r1, [r3, #4]
 8012910:	460b      	mov	r3, r1
 8012912:	009b      	lsls	r3, r3, #2
 8012914:	440b      	add	r3, r1
 8012916:	0099      	lsls	r1, r3, #2
 8012918:	440b      	add	r3, r1
 801291a:	fbb0 f3f3 	udiv	r3, r0, r3
 801291e:	3301      	adds	r3, #1
 8012920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012924:	2b00      	cmp	r3, #0
 8012926:	bf0c      	ite	eq
 8012928:	2301      	moveq	r3, #1
 801292a:	2300      	movne	r3, #0
 801292c:	b2db      	uxtb	r3, r3
 801292e:	2b00      	cmp	r3, #0
 8012930:	d001      	beq.n	8012936 <HAL_I2C_Init+0x196>
 8012932:	2301      	movs	r3, #1
 8012934:	e022      	b.n	801297c <HAL_I2C_Init+0x1dc>
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	689b      	ldr	r3, [r3, #8]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d10e      	bne.n	801295c <HAL_I2C_Init+0x1bc>
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	1e58      	subs	r0, r3, #1
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	6859      	ldr	r1, [r3, #4]
 8012946:	460b      	mov	r3, r1
 8012948:	005b      	lsls	r3, r3, #1
 801294a:	440b      	add	r3, r1
 801294c:	fbb0 f3f3 	udiv	r3, r0, r3
 8012950:	3301      	adds	r3, #1
 8012952:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801295a:	e00f      	b.n	801297c <HAL_I2C_Init+0x1dc>
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	1e58      	subs	r0, r3, #1
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	6859      	ldr	r1, [r3, #4]
 8012964:	460b      	mov	r3, r1
 8012966:	009b      	lsls	r3, r3, #2
 8012968:	440b      	add	r3, r1
 801296a:	0099      	lsls	r1, r3, #2
 801296c:	440b      	add	r3, r1
 801296e:	fbb0 f3f3 	udiv	r3, r0, r3
 8012972:	3301      	adds	r3, #1
 8012974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012978:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801297c:	6879      	ldr	r1, [r7, #4]
 801297e:	6809      	ldr	r1, [r1, #0]
 8012980:	4313      	orrs	r3, r2
 8012982:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	69da      	ldr	r2, [r3, #28]
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	6a1b      	ldr	r3, [r3, #32]
 8012996:	431a      	orrs	r2, r3
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	430a      	orrs	r2, r1
 801299e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	689b      	ldr	r3, [r3, #8]
 80129a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80129aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80129ae:	687a      	ldr	r2, [r7, #4]
 80129b0:	6911      	ldr	r1, [r2, #16]
 80129b2:	687a      	ldr	r2, [r7, #4]
 80129b4:	68d2      	ldr	r2, [r2, #12]
 80129b6:	4311      	orrs	r1, r2
 80129b8:	687a      	ldr	r2, [r7, #4]
 80129ba:	6812      	ldr	r2, [r2, #0]
 80129bc:	430b      	orrs	r3, r1
 80129be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	68db      	ldr	r3, [r3, #12]
 80129c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	695a      	ldr	r2, [r3, #20]
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	699b      	ldr	r3, [r3, #24]
 80129d2:	431a      	orrs	r2, r3
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	430a      	orrs	r2, r1
 80129da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	681a      	ldr	r2, [r3, #0]
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	f042 0201 	orr.w	r2, r2, #1
 80129ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	2200      	movs	r2, #0
 80129f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	2220      	movs	r2, #32
 80129f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	2200      	movs	r2, #0
 80129fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	2200      	movs	r2, #0
 8012a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8012a08:	2300      	movs	r3, #0
}
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	3710      	adds	r7, #16
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bd80      	pop	{r7, pc}
 8012a12:	bf00      	nop
 8012a14:	000186a0 	.word	0x000186a0
 8012a18:	001e847f 	.word	0x001e847f
 8012a1c:	003d08ff 	.word	0x003d08ff
 8012a20:	431bde83 	.word	0x431bde83
 8012a24:	10624dd3 	.word	0x10624dd3

08012a28 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b082      	sub	sp, #8
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d101      	bne.n	8012a3a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8012a36:	2301      	movs	r3, #1
 8012a38:	e021      	b.n	8012a7e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	2224      	movs	r2, #36	; 0x24
 8012a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	681a      	ldr	r2, [r3, #0]
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	f022 0201 	bic.w	r2, r2, #1
 8012a50:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8012a52:	6878      	ldr	r0, [r7, #4]
 8012a54:	f7ee fb0c 	bl	8001070 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	2200      	movs	r2, #0
 8012a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	2200      	movs	r2, #0
 8012a6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	2200      	movs	r2, #0
 8012a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	2200      	movs	r2, #0
 8012a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012a7c:	2300      	movs	r3, #0
}
 8012a7e:	4618      	mov	r0, r3
 8012a80:	3708      	adds	r7, #8
 8012a82:	46bd      	mov	sp, r7
 8012a84:	bd80      	pop	{r7, pc}
	...

08012a88 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b088      	sub	sp, #32
 8012a8c:	af02      	add	r7, sp, #8
 8012a8e:	60f8      	str	r0, [r7, #12]
 8012a90:	607a      	str	r2, [r7, #4]
 8012a92:	461a      	mov	r2, r3
 8012a94:	460b      	mov	r3, r1
 8012a96:	817b      	strh	r3, [r7, #10]
 8012a98:	4613      	mov	r3, r2
 8012a9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8012a9c:	f7ff fad0 	bl	8012040 <HAL_GetTick>
 8012aa0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012aa8:	b2db      	uxtb	r3, r3
 8012aaa:	2b20      	cmp	r3, #32
 8012aac:	f040 80e0 	bne.w	8012c70 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8012ab0:	697b      	ldr	r3, [r7, #20]
 8012ab2:	9300      	str	r3, [sp, #0]
 8012ab4:	2319      	movs	r3, #25
 8012ab6:	2201      	movs	r2, #1
 8012ab8:	4970      	ldr	r1, [pc, #448]	; (8012c7c <HAL_I2C_Master_Transmit+0x1f4>)
 8012aba:	68f8      	ldr	r0, [r7, #12]
 8012abc:	f000 fc72 	bl	80133a4 <I2C_WaitOnFlagUntilTimeout>
 8012ac0:	4603      	mov	r3, r0
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d001      	beq.n	8012aca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8012ac6:	2302      	movs	r3, #2
 8012ac8:	e0d3      	b.n	8012c72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012ad0:	2b01      	cmp	r3, #1
 8012ad2:	d101      	bne.n	8012ad8 <HAL_I2C_Master_Transmit+0x50>
 8012ad4:	2302      	movs	r3, #2
 8012ad6:	e0cc      	b.n	8012c72 <HAL_I2C_Master_Transmit+0x1ea>
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	2201      	movs	r2, #1
 8012adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	f003 0301 	and.w	r3, r3, #1
 8012aea:	2b01      	cmp	r3, #1
 8012aec:	d007      	beq.n	8012afe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	681a      	ldr	r2, [r3, #0]
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	f042 0201 	orr.w	r2, r2, #1
 8012afc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	681a      	ldr	r2, [r3, #0]
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012b0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	2221      	movs	r2, #33	; 0x21
 8012b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	2210      	movs	r2, #16
 8012b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	2200      	movs	r2, #0
 8012b22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	687a      	ldr	r2, [r7, #4]
 8012b28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	893a      	ldrh	r2, [r7, #8]
 8012b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012b34:	b29a      	uxth	r2, r3
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	4a50      	ldr	r2, [pc, #320]	; (8012c80 <HAL_I2C_Master_Transmit+0x1f8>)
 8012b3e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8012b40:	8979      	ldrh	r1, [r7, #10]
 8012b42:	697b      	ldr	r3, [r7, #20]
 8012b44:	6a3a      	ldr	r2, [r7, #32]
 8012b46:	68f8      	ldr	r0, [r7, #12]
 8012b48:	f000 fadc 	bl	8013104 <I2C_MasterRequestWrite>
 8012b4c:	4603      	mov	r3, r0
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d001      	beq.n	8012b56 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8012b52:	2301      	movs	r3, #1
 8012b54:	e08d      	b.n	8012c72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012b56:	2300      	movs	r3, #0
 8012b58:	613b      	str	r3, [r7, #16]
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	695b      	ldr	r3, [r3, #20]
 8012b60:	613b      	str	r3, [r7, #16]
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	699b      	ldr	r3, [r3, #24]
 8012b68:	613b      	str	r3, [r7, #16]
 8012b6a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8012b6c:	e066      	b.n	8012c3c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012b6e:	697a      	ldr	r2, [r7, #20]
 8012b70:	6a39      	ldr	r1, [r7, #32]
 8012b72:	68f8      	ldr	r0, [r7, #12]
 8012b74:	f000 fcec 	bl	8013550 <I2C_WaitOnTXEFlagUntilTimeout>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d00d      	beq.n	8012b9a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b82:	2b04      	cmp	r3, #4
 8012b84:	d107      	bne.n	8012b96 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	681a      	ldr	r2, [r3, #0]
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012b94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8012b96:	2301      	movs	r3, #1
 8012b98:	e06b      	b.n	8012c72 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b9e:	781a      	ldrb	r2, [r3, #0]
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012baa:	1c5a      	adds	r2, r3, #1
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012bb4:	b29b      	uxth	r3, r3
 8012bb6:	3b01      	subs	r3, #1
 8012bb8:	b29a      	uxth	r2, r3
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012bc2:	3b01      	subs	r3, #1
 8012bc4:	b29a      	uxth	r2, r3
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	695b      	ldr	r3, [r3, #20]
 8012bd0:	f003 0304 	and.w	r3, r3, #4
 8012bd4:	2b04      	cmp	r3, #4
 8012bd6:	d11b      	bne.n	8012c10 <HAL_I2C_Master_Transmit+0x188>
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d017      	beq.n	8012c10 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012be4:	781a      	ldrb	r2, [r3, #0]
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bf0:	1c5a      	adds	r2, r3, #1
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012bfa:	b29b      	uxth	r3, r3
 8012bfc:	3b01      	subs	r3, #1
 8012bfe:	b29a      	uxth	r2, r3
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012c08:	3b01      	subs	r3, #1
 8012c0a:	b29a      	uxth	r2, r3
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012c10:	697a      	ldr	r2, [r7, #20]
 8012c12:	6a39      	ldr	r1, [r7, #32]
 8012c14:	68f8      	ldr	r0, [r7, #12]
 8012c16:	f000 fcdc 	bl	80135d2 <I2C_WaitOnBTFFlagUntilTimeout>
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d00d      	beq.n	8012c3c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c24:	2b04      	cmp	r3, #4
 8012c26:	d107      	bne.n	8012c38 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	681a      	ldr	r2, [r3, #0]
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012c36:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8012c38:	2301      	movs	r3, #1
 8012c3a:	e01a      	b.n	8012c72 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d194      	bne.n	8012b6e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	681a      	ldr	r2, [r3, #0]
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012c52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	2220      	movs	r2, #32
 8012c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	2200      	movs	r2, #0
 8012c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	2200      	movs	r2, #0
 8012c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	e000      	b.n	8012c72 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8012c70:	2302      	movs	r3, #2
  }
}
 8012c72:	4618      	mov	r0, r3
 8012c74:	3718      	adds	r7, #24
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bd80      	pop	{r7, pc}
 8012c7a:	bf00      	nop
 8012c7c:	00100002 	.word	0x00100002
 8012c80:	ffff0000 	.word	0xffff0000

08012c84 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b08c      	sub	sp, #48	; 0x30
 8012c88:	af02      	add	r7, sp, #8
 8012c8a:	60f8      	str	r0, [r7, #12]
 8012c8c:	607a      	str	r2, [r7, #4]
 8012c8e:	461a      	mov	r2, r3
 8012c90:	460b      	mov	r3, r1
 8012c92:	817b      	strh	r3, [r7, #10]
 8012c94:	4613      	mov	r3, r2
 8012c96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8012c98:	f7ff f9d2 	bl	8012040 <HAL_GetTick>
 8012c9c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012ca4:	b2db      	uxtb	r3, r3
 8012ca6:	2b20      	cmp	r3, #32
 8012ca8:	f040 820b 	bne.w	80130c2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8012cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cae:	9300      	str	r3, [sp, #0]
 8012cb0:	2319      	movs	r3, #25
 8012cb2:	2201      	movs	r2, #1
 8012cb4:	497c      	ldr	r1, [pc, #496]	; (8012ea8 <HAL_I2C_Master_Receive+0x224>)
 8012cb6:	68f8      	ldr	r0, [r7, #12]
 8012cb8:	f000 fb74 	bl	80133a4 <I2C_WaitOnFlagUntilTimeout>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d001      	beq.n	8012cc6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8012cc2:	2302      	movs	r3, #2
 8012cc4:	e1fe      	b.n	80130c4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012ccc:	2b01      	cmp	r3, #1
 8012cce:	d101      	bne.n	8012cd4 <HAL_I2C_Master_Receive+0x50>
 8012cd0:	2302      	movs	r3, #2
 8012cd2:	e1f7      	b.n	80130c4 <HAL_I2C_Master_Receive+0x440>
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	2201      	movs	r2, #1
 8012cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	f003 0301 	and.w	r3, r3, #1
 8012ce6:	2b01      	cmp	r3, #1
 8012ce8:	d007      	beq.n	8012cfa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	681a      	ldr	r2, [r3, #0]
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	f042 0201 	orr.w	r2, r2, #1
 8012cf8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	681a      	ldr	r2, [r3, #0]
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012d08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	2222      	movs	r2, #34	; 0x22
 8012d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	2210      	movs	r2, #16
 8012d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	687a      	ldr	r2, [r7, #4]
 8012d24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	893a      	ldrh	r2, [r7, #8]
 8012d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012d30:	b29a      	uxth	r2, r3
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	4a5c      	ldr	r2, [pc, #368]	; (8012eac <HAL_I2C_Master_Receive+0x228>)
 8012d3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8012d3c:	8979      	ldrh	r1, [r7, #10]
 8012d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d42:	68f8      	ldr	r0, [r7, #12]
 8012d44:	f000 fa60 	bl	8013208 <I2C_MasterRequestRead>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d001      	beq.n	8012d52 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8012d4e:	2301      	movs	r3, #1
 8012d50:	e1b8      	b.n	80130c4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d113      	bne.n	8012d82 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	623b      	str	r3, [r7, #32]
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	695b      	ldr	r3, [r3, #20]
 8012d64:	623b      	str	r3, [r7, #32]
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	699b      	ldr	r3, [r3, #24]
 8012d6c:	623b      	str	r3, [r7, #32]
 8012d6e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	681a      	ldr	r2, [r3, #0]
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012d7e:	601a      	str	r2, [r3, #0]
 8012d80:	e18c      	b.n	801309c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d86:	2b01      	cmp	r3, #1
 8012d88:	d11b      	bne.n	8012dc2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	681a      	ldr	r2, [r3, #0]
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012d98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	61fb      	str	r3, [r7, #28]
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	695b      	ldr	r3, [r3, #20]
 8012da4:	61fb      	str	r3, [r7, #28]
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	699b      	ldr	r3, [r3, #24]
 8012dac:	61fb      	str	r3, [r7, #28]
 8012dae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	681a      	ldr	r2, [r3, #0]
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012dbe:	601a      	str	r2, [r3, #0]
 8012dc0:	e16c      	b.n	801309c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012dc6:	2b02      	cmp	r3, #2
 8012dc8:	d11b      	bne.n	8012e02 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	681a      	ldr	r2, [r3, #0]
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012dd8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	681a      	ldr	r2, [r3, #0]
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012de8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012dea:	2300      	movs	r3, #0
 8012dec:	61bb      	str	r3, [r7, #24]
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	695b      	ldr	r3, [r3, #20]
 8012df4:	61bb      	str	r3, [r7, #24]
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	699b      	ldr	r3, [r3, #24]
 8012dfc:	61bb      	str	r3, [r7, #24]
 8012dfe:	69bb      	ldr	r3, [r7, #24]
 8012e00:	e14c      	b.n	801309c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	681a      	ldr	r2, [r3, #0]
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012e10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012e12:	2300      	movs	r3, #0
 8012e14:	617b      	str	r3, [r7, #20]
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	695b      	ldr	r3, [r3, #20]
 8012e1c:	617b      	str	r3, [r7, #20]
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	699b      	ldr	r3, [r3, #24]
 8012e24:	617b      	str	r3, [r7, #20]
 8012e26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8012e28:	e138      	b.n	801309c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e2e:	2b03      	cmp	r3, #3
 8012e30:	f200 80f1 	bhi.w	8013016 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e38:	2b01      	cmp	r3, #1
 8012e3a:	d123      	bne.n	8012e84 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012e40:	68f8      	ldr	r0, [r7, #12]
 8012e42:	f000 fc07 	bl	8013654 <I2C_WaitOnRXNEFlagUntilTimeout>
 8012e46:	4603      	mov	r3, r0
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d001      	beq.n	8012e50 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8012e4c:	2301      	movs	r3, #1
 8012e4e:	e139      	b.n	80130c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	691a      	ldr	r2, [r3, #16]
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e5a:	b2d2      	uxtb	r2, r2
 8012e5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e62:	1c5a      	adds	r2, r3, #1
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e6c:	3b01      	subs	r3, #1
 8012e6e:	b29a      	uxth	r2, r3
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012e78:	b29b      	uxth	r3, r3
 8012e7a:	3b01      	subs	r3, #1
 8012e7c:	b29a      	uxth	r2, r3
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012e82:	e10b      	b.n	801309c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e88:	2b02      	cmp	r3, #2
 8012e8a:	d14e      	bne.n	8012f2a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8012e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e8e:	9300      	str	r3, [sp, #0]
 8012e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e92:	2200      	movs	r2, #0
 8012e94:	4906      	ldr	r1, [pc, #24]	; (8012eb0 <HAL_I2C_Master_Receive+0x22c>)
 8012e96:	68f8      	ldr	r0, [r7, #12]
 8012e98:	f000 fa84 	bl	80133a4 <I2C_WaitOnFlagUntilTimeout>
 8012e9c:	4603      	mov	r3, r0
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d008      	beq.n	8012eb4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8012ea2:	2301      	movs	r3, #1
 8012ea4:	e10e      	b.n	80130c4 <HAL_I2C_Master_Receive+0x440>
 8012ea6:	bf00      	nop
 8012ea8:	00100002 	.word	0x00100002
 8012eac:	ffff0000 	.word	0xffff0000
 8012eb0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	681a      	ldr	r2, [r3, #0]
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012ec2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	691a      	ldr	r2, [r3, #16]
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ece:	b2d2      	uxtb	r2, r2
 8012ed0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ed6:	1c5a      	adds	r2, r3, #1
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012ee0:	3b01      	subs	r3, #1
 8012ee2:	b29a      	uxth	r2, r3
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012eec:	b29b      	uxth	r3, r3
 8012eee:	3b01      	subs	r3, #1
 8012ef0:	b29a      	uxth	r2, r3
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	691a      	ldr	r2, [r3, #16]
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f00:	b2d2      	uxtb	r2, r2
 8012f02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f08:	1c5a      	adds	r2, r3, #1
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012f12:	3b01      	subs	r3, #1
 8012f14:	b29a      	uxth	r2, r3
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012f1e:	b29b      	uxth	r3, r3
 8012f20:	3b01      	subs	r3, #1
 8012f22:	b29a      	uxth	r2, r3
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012f28:	e0b8      	b.n	801309c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8012f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f2c:	9300      	str	r3, [sp, #0]
 8012f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f30:	2200      	movs	r2, #0
 8012f32:	4966      	ldr	r1, [pc, #408]	; (80130cc <HAL_I2C_Master_Receive+0x448>)
 8012f34:	68f8      	ldr	r0, [r7, #12]
 8012f36:	f000 fa35 	bl	80133a4 <I2C_WaitOnFlagUntilTimeout>
 8012f3a:	4603      	mov	r3, r0
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d001      	beq.n	8012f44 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8012f40:	2301      	movs	r3, #1
 8012f42:	e0bf      	b.n	80130c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	681a      	ldr	r2, [r3, #0]
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012f52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	691a      	ldr	r2, [r3, #16]
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f5e:	b2d2      	uxtb	r2, r2
 8012f60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f66:	1c5a      	adds	r2, r3, #1
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012f70:	3b01      	subs	r3, #1
 8012f72:	b29a      	uxth	r2, r3
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012f7c:	b29b      	uxth	r3, r3
 8012f7e:	3b01      	subs	r3, #1
 8012f80:	b29a      	uxth	r2, r3
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8012f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f88:	9300      	str	r3, [sp, #0]
 8012f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	494f      	ldr	r1, [pc, #316]	; (80130cc <HAL_I2C_Master_Receive+0x448>)
 8012f90:	68f8      	ldr	r0, [r7, #12]
 8012f92:	f000 fa07 	bl	80133a4 <I2C_WaitOnFlagUntilTimeout>
 8012f96:	4603      	mov	r3, r0
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d001      	beq.n	8012fa0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8012f9c:	2301      	movs	r3, #1
 8012f9e:	e091      	b.n	80130c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	681a      	ldr	r2, [r3, #0]
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012fae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	691a      	ldr	r2, [r3, #16]
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fba:	b2d2      	uxtb	r2, r2
 8012fbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fc2:	1c5a      	adds	r2, r3, #1
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012fcc:	3b01      	subs	r3, #1
 8012fce:	b29a      	uxth	r2, r3
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012fd8:	b29b      	uxth	r3, r3
 8012fda:	3b01      	subs	r3, #1
 8012fdc:	b29a      	uxth	r2, r3
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	691a      	ldr	r2, [r3, #16]
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fec:	b2d2      	uxtb	r2, r2
 8012fee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ff4:	1c5a      	adds	r2, r3, #1
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012ffe:	3b01      	subs	r3, #1
 8013000:	b29a      	uxth	r2, r3
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801300a:	b29b      	uxth	r3, r3
 801300c:	3b01      	subs	r3, #1
 801300e:	b29a      	uxth	r2, r3
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013014:	e042      	b.n	801309c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8013016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013018:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801301a:	68f8      	ldr	r0, [r7, #12]
 801301c:	f000 fb1a 	bl	8013654 <I2C_WaitOnRXNEFlagUntilTimeout>
 8013020:	4603      	mov	r3, r0
 8013022:	2b00      	cmp	r3, #0
 8013024:	d001      	beq.n	801302a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8013026:	2301      	movs	r3, #1
 8013028:	e04c      	b.n	80130c4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	691a      	ldr	r2, [r3, #16]
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013034:	b2d2      	uxtb	r2, r2
 8013036:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801303c:	1c5a      	adds	r2, r3, #1
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013046:	3b01      	subs	r3, #1
 8013048:	b29a      	uxth	r2, r3
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013052:	b29b      	uxth	r3, r3
 8013054:	3b01      	subs	r3, #1
 8013056:	b29a      	uxth	r2, r3
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	695b      	ldr	r3, [r3, #20]
 8013062:	f003 0304 	and.w	r3, r3, #4
 8013066:	2b04      	cmp	r3, #4
 8013068:	d118      	bne.n	801309c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	691a      	ldr	r2, [r3, #16]
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013074:	b2d2      	uxtb	r2, r2
 8013076:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801307c:	1c5a      	adds	r2, r3, #1
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013086:	3b01      	subs	r3, #1
 8013088:	b29a      	uxth	r2, r3
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013092:	b29b      	uxth	r3, r3
 8013094:	3b01      	subs	r3, #1
 8013096:	b29a      	uxth	r2, r3
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	f47f aec2 	bne.w	8012e2a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	2220      	movs	r2, #32
 80130aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	2200      	movs	r2, #0
 80130b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	2200      	movs	r2, #0
 80130ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80130be:	2300      	movs	r3, #0
 80130c0:	e000      	b.n	80130c4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80130c2:	2302      	movs	r3, #2
  }
}
 80130c4:	4618      	mov	r0, r3
 80130c6:	3728      	adds	r7, #40	; 0x28
 80130c8:	46bd      	mov	sp, r7
 80130ca:	bd80      	pop	{r7, pc}
 80130cc:	00010004 	.word	0x00010004

080130d0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80130d0:	b480      	push	{r7}
 80130d2:	b083      	sub	sp, #12
 80130d4:	af00      	add	r7, sp, #0
 80130d6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80130de:	b2db      	uxtb	r3, r3
}
 80130e0:	4618      	mov	r0, r3
 80130e2:	370c      	adds	r7, #12
 80130e4:	46bd      	mov	sp, r7
 80130e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ea:	4770      	bx	lr

080130ec <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80130ec:	b480      	push	{r7}
 80130ee:	b083      	sub	sp, #12
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80130f8:	4618      	mov	r0, r3
 80130fa:	370c      	adds	r7, #12
 80130fc:	46bd      	mov	sp, r7
 80130fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013102:	4770      	bx	lr

08013104 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b088      	sub	sp, #32
 8013108:	af02      	add	r7, sp, #8
 801310a:	60f8      	str	r0, [r7, #12]
 801310c:	607a      	str	r2, [r7, #4]
 801310e:	603b      	str	r3, [r7, #0]
 8013110:	460b      	mov	r3, r1
 8013112:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013118:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 801311a:	697b      	ldr	r3, [r7, #20]
 801311c:	2b08      	cmp	r3, #8
 801311e:	d006      	beq.n	801312e <I2C_MasterRequestWrite+0x2a>
 8013120:	697b      	ldr	r3, [r7, #20]
 8013122:	2b01      	cmp	r3, #1
 8013124:	d003      	beq.n	801312e <I2C_MasterRequestWrite+0x2a>
 8013126:	697b      	ldr	r3, [r7, #20]
 8013128:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801312c:	d108      	bne.n	8013140 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	681a      	ldr	r2, [r3, #0]
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801313c:	601a      	str	r2, [r3, #0]
 801313e:	e00b      	b.n	8013158 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013144:	2b12      	cmp	r3, #18
 8013146:	d107      	bne.n	8013158 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	681a      	ldr	r2, [r3, #0]
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013156:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8013158:	683b      	ldr	r3, [r7, #0]
 801315a:	9300      	str	r3, [sp, #0]
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	2200      	movs	r2, #0
 8013160:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8013164:	68f8      	ldr	r0, [r7, #12]
 8013166:	f000 f91d 	bl	80133a4 <I2C_WaitOnFlagUntilTimeout>
 801316a:	4603      	mov	r3, r0
 801316c:	2b00      	cmp	r3, #0
 801316e:	d00d      	beq.n	801318c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801317a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801317e:	d103      	bne.n	8013188 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013186:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8013188:	2303      	movs	r3, #3
 801318a:	e035      	b.n	80131f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	691b      	ldr	r3, [r3, #16]
 8013190:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013194:	d108      	bne.n	80131a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8013196:	897b      	ldrh	r3, [r7, #10]
 8013198:	b2db      	uxtb	r3, r3
 801319a:	461a      	mov	r2, r3
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80131a4:	611a      	str	r2, [r3, #16]
 80131a6:	e01b      	b.n	80131e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80131a8:	897b      	ldrh	r3, [r7, #10]
 80131aa:	11db      	asrs	r3, r3, #7
 80131ac:	b2db      	uxtb	r3, r3
 80131ae:	f003 0306 	and.w	r3, r3, #6
 80131b2:	b2db      	uxtb	r3, r3
 80131b4:	f063 030f 	orn	r3, r3, #15
 80131b8:	b2da      	uxtb	r2, r3
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80131c0:	683b      	ldr	r3, [r7, #0]
 80131c2:	687a      	ldr	r2, [r7, #4]
 80131c4:	490e      	ldr	r1, [pc, #56]	; (8013200 <I2C_MasterRequestWrite+0xfc>)
 80131c6:	68f8      	ldr	r0, [r7, #12]
 80131c8:	f000 f943 	bl	8013452 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80131cc:	4603      	mov	r3, r0
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d001      	beq.n	80131d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80131d2:	2301      	movs	r3, #1
 80131d4:	e010      	b.n	80131f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80131d6:	897b      	ldrh	r3, [r7, #10]
 80131d8:	b2da      	uxtb	r2, r3
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80131e0:	683b      	ldr	r3, [r7, #0]
 80131e2:	687a      	ldr	r2, [r7, #4]
 80131e4:	4907      	ldr	r1, [pc, #28]	; (8013204 <I2C_MasterRequestWrite+0x100>)
 80131e6:	68f8      	ldr	r0, [r7, #12]
 80131e8:	f000 f933 	bl	8013452 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80131ec:	4603      	mov	r3, r0
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d001      	beq.n	80131f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80131f2:	2301      	movs	r3, #1
 80131f4:	e000      	b.n	80131f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80131f6:	2300      	movs	r3, #0
}
 80131f8:	4618      	mov	r0, r3
 80131fa:	3718      	adds	r7, #24
 80131fc:	46bd      	mov	sp, r7
 80131fe:	bd80      	pop	{r7, pc}
 8013200:	00010008 	.word	0x00010008
 8013204:	00010002 	.word	0x00010002

08013208 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8013208:	b580      	push	{r7, lr}
 801320a:	b088      	sub	sp, #32
 801320c:	af02      	add	r7, sp, #8
 801320e:	60f8      	str	r0, [r7, #12]
 8013210:	607a      	str	r2, [r7, #4]
 8013212:	603b      	str	r3, [r7, #0]
 8013214:	460b      	mov	r3, r1
 8013216:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801321c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	681a      	ldr	r2, [r3, #0]
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801322c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 801322e:	697b      	ldr	r3, [r7, #20]
 8013230:	2b08      	cmp	r3, #8
 8013232:	d006      	beq.n	8013242 <I2C_MasterRequestRead+0x3a>
 8013234:	697b      	ldr	r3, [r7, #20]
 8013236:	2b01      	cmp	r3, #1
 8013238:	d003      	beq.n	8013242 <I2C_MasterRequestRead+0x3a>
 801323a:	697b      	ldr	r3, [r7, #20]
 801323c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8013240:	d108      	bne.n	8013254 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	681a      	ldr	r2, [r3, #0]
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013250:	601a      	str	r2, [r3, #0]
 8013252:	e00b      	b.n	801326c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013258:	2b11      	cmp	r3, #17
 801325a:	d107      	bne.n	801326c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	681a      	ldr	r2, [r3, #0]
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801326a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801326c:	683b      	ldr	r3, [r7, #0]
 801326e:	9300      	str	r3, [sp, #0]
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	2200      	movs	r2, #0
 8013274:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8013278:	68f8      	ldr	r0, [r7, #12]
 801327a:	f000 f893 	bl	80133a4 <I2C_WaitOnFlagUntilTimeout>
 801327e:	4603      	mov	r3, r0
 8013280:	2b00      	cmp	r3, #0
 8013282:	d00d      	beq.n	80132a0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801328e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013292:	d103      	bne.n	801329c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	f44f 7200 	mov.w	r2, #512	; 0x200
 801329a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801329c:	2303      	movs	r3, #3
 801329e:	e079      	b.n	8013394 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	691b      	ldr	r3, [r3, #16]
 80132a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80132a8:	d108      	bne.n	80132bc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80132aa:	897b      	ldrh	r3, [r7, #10]
 80132ac:	b2db      	uxtb	r3, r3
 80132ae:	f043 0301 	orr.w	r3, r3, #1
 80132b2:	b2da      	uxtb	r2, r3
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	611a      	str	r2, [r3, #16]
 80132ba:	e05f      	b.n	801337c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80132bc:	897b      	ldrh	r3, [r7, #10]
 80132be:	11db      	asrs	r3, r3, #7
 80132c0:	b2db      	uxtb	r3, r3
 80132c2:	f003 0306 	and.w	r3, r3, #6
 80132c6:	b2db      	uxtb	r3, r3
 80132c8:	f063 030f 	orn	r3, r3, #15
 80132cc:	b2da      	uxtb	r2, r3
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80132d4:	683b      	ldr	r3, [r7, #0]
 80132d6:	687a      	ldr	r2, [r7, #4]
 80132d8:	4930      	ldr	r1, [pc, #192]	; (801339c <I2C_MasterRequestRead+0x194>)
 80132da:	68f8      	ldr	r0, [r7, #12]
 80132dc:	f000 f8b9 	bl	8013452 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80132e0:	4603      	mov	r3, r0
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d001      	beq.n	80132ea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80132e6:	2301      	movs	r3, #1
 80132e8:	e054      	b.n	8013394 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80132ea:	897b      	ldrh	r3, [r7, #10]
 80132ec:	b2da      	uxtb	r2, r3
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80132f4:	683b      	ldr	r3, [r7, #0]
 80132f6:	687a      	ldr	r2, [r7, #4]
 80132f8:	4929      	ldr	r1, [pc, #164]	; (80133a0 <I2C_MasterRequestRead+0x198>)
 80132fa:	68f8      	ldr	r0, [r7, #12]
 80132fc:	f000 f8a9 	bl	8013452 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8013300:	4603      	mov	r3, r0
 8013302:	2b00      	cmp	r3, #0
 8013304:	d001      	beq.n	801330a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8013306:	2301      	movs	r3, #1
 8013308:	e044      	b.n	8013394 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801330a:	2300      	movs	r3, #0
 801330c:	613b      	str	r3, [r7, #16]
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	695b      	ldr	r3, [r3, #20]
 8013314:	613b      	str	r3, [r7, #16]
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	699b      	ldr	r3, [r3, #24]
 801331c:	613b      	str	r3, [r7, #16]
 801331e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	681a      	ldr	r2, [r3, #0]
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801332e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8013330:	683b      	ldr	r3, [r7, #0]
 8013332:	9300      	str	r3, [sp, #0]
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	2200      	movs	r2, #0
 8013338:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801333c:	68f8      	ldr	r0, [r7, #12]
 801333e:	f000 f831 	bl	80133a4 <I2C_WaitOnFlagUntilTimeout>
 8013342:	4603      	mov	r3, r0
 8013344:	2b00      	cmp	r3, #0
 8013346:	d00d      	beq.n	8013364 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013356:	d103      	bne.n	8013360 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801335e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8013360:	2303      	movs	r3, #3
 8013362:	e017      	b.n	8013394 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8013364:	897b      	ldrh	r3, [r7, #10]
 8013366:	11db      	asrs	r3, r3, #7
 8013368:	b2db      	uxtb	r3, r3
 801336a:	f003 0306 	and.w	r3, r3, #6
 801336e:	b2db      	uxtb	r3, r3
 8013370:	f063 030e 	orn	r3, r3, #14
 8013374:	b2da      	uxtb	r2, r3
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801337c:	683b      	ldr	r3, [r7, #0]
 801337e:	687a      	ldr	r2, [r7, #4]
 8013380:	4907      	ldr	r1, [pc, #28]	; (80133a0 <I2C_MasterRequestRead+0x198>)
 8013382:	68f8      	ldr	r0, [r7, #12]
 8013384:	f000 f865 	bl	8013452 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8013388:	4603      	mov	r3, r0
 801338a:	2b00      	cmp	r3, #0
 801338c:	d001      	beq.n	8013392 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 801338e:	2301      	movs	r3, #1
 8013390:	e000      	b.n	8013394 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8013392:	2300      	movs	r3, #0
}
 8013394:	4618      	mov	r0, r3
 8013396:	3718      	adds	r7, #24
 8013398:	46bd      	mov	sp, r7
 801339a:	bd80      	pop	{r7, pc}
 801339c:	00010008 	.word	0x00010008
 80133a0:	00010002 	.word	0x00010002

080133a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b084      	sub	sp, #16
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	60f8      	str	r0, [r7, #12]
 80133ac:	60b9      	str	r1, [r7, #8]
 80133ae:	603b      	str	r3, [r7, #0]
 80133b0:	4613      	mov	r3, r2
 80133b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80133b4:	e025      	b.n	8013402 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80133b6:	683b      	ldr	r3, [r7, #0]
 80133b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133bc:	d021      	beq.n	8013402 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80133be:	f7fe fe3f 	bl	8012040 <HAL_GetTick>
 80133c2:	4602      	mov	r2, r0
 80133c4:	69bb      	ldr	r3, [r7, #24]
 80133c6:	1ad3      	subs	r3, r2, r3
 80133c8:	683a      	ldr	r2, [r7, #0]
 80133ca:	429a      	cmp	r2, r3
 80133cc:	d302      	bcc.n	80133d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d116      	bne.n	8013402 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	2200      	movs	r2, #0
 80133d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	2220      	movs	r2, #32
 80133de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	2200      	movs	r2, #0
 80133e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133ee:	f043 0220 	orr.w	r2, r3, #32
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	2200      	movs	r2, #0
 80133fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80133fe:	2301      	movs	r3, #1
 8013400:	e023      	b.n	801344a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8013402:	68bb      	ldr	r3, [r7, #8]
 8013404:	0c1b      	lsrs	r3, r3, #16
 8013406:	b2db      	uxtb	r3, r3
 8013408:	2b01      	cmp	r3, #1
 801340a:	d10d      	bne.n	8013428 <I2C_WaitOnFlagUntilTimeout+0x84>
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	695b      	ldr	r3, [r3, #20]
 8013412:	43da      	mvns	r2, r3
 8013414:	68bb      	ldr	r3, [r7, #8]
 8013416:	4013      	ands	r3, r2
 8013418:	b29b      	uxth	r3, r3
 801341a:	2b00      	cmp	r3, #0
 801341c:	bf0c      	ite	eq
 801341e:	2301      	moveq	r3, #1
 8013420:	2300      	movne	r3, #0
 8013422:	b2db      	uxtb	r3, r3
 8013424:	461a      	mov	r2, r3
 8013426:	e00c      	b.n	8013442 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	699b      	ldr	r3, [r3, #24]
 801342e:	43da      	mvns	r2, r3
 8013430:	68bb      	ldr	r3, [r7, #8]
 8013432:	4013      	ands	r3, r2
 8013434:	b29b      	uxth	r3, r3
 8013436:	2b00      	cmp	r3, #0
 8013438:	bf0c      	ite	eq
 801343a:	2301      	moveq	r3, #1
 801343c:	2300      	movne	r3, #0
 801343e:	b2db      	uxtb	r3, r3
 8013440:	461a      	mov	r2, r3
 8013442:	79fb      	ldrb	r3, [r7, #7]
 8013444:	429a      	cmp	r2, r3
 8013446:	d0b6      	beq.n	80133b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8013448:	2300      	movs	r3, #0
}
 801344a:	4618      	mov	r0, r3
 801344c:	3710      	adds	r7, #16
 801344e:	46bd      	mov	sp, r7
 8013450:	bd80      	pop	{r7, pc}

08013452 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8013452:	b580      	push	{r7, lr}
 8013454:	b084      	sub	sp, #16
 8013456:	af00      	add	r7, sp, #0
 8013458:	60f8      	str	r0, [r7, #12]
 801345a:	60b9      	str	r1, [r7, #8]
 801345c:	607a      	str	r2, [r7, #4]
 801345e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8013460:	e051      	b.n	8013506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	695b      	ldr	r3, [r3, #20]
 8013468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801346c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013470:	d123      	bne.n	80134ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	681a      	ldr	r2, [r3, #0]
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013480:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801348a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	2200      	movs	r2, #0
 8013490:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	2220      	movs	r2, #32
 8013496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	2200      	movs	r2, #0
 801349e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134a6:	f043 0204 	orr.w	r2, r3, #4
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	2200      	movs	r2, #0
 80134b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80134b6:	2301      	movs	r3, #1
 80134b8:	e046      	b.n	8013548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134c0:	d021      	beq.n	8013506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80134c2:	f7fe fdbd 	bl	8012040 <HAL_GetTick>
 80134c6:	4602      	mov	r2, r0
 80134c8:	683b      	ldr	r3, [r7, #0]
 80134ca:	1ad3      	subs	r3, r2, r3
 80134cc:	687a      	ldr	r2, [r7, #4]
 80134ce:	429a      	cmp	r2, r3
 80134d0:	d302      	bcc.n	80134d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d116      	bne.n	8013506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	2200      	movs	r2, #0
 80134dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	2220      	movs	r2, #32
 80134e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	2200      	movs	r2, #0
 80134ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134f2:	f043 0220 	orr.w	r2, r3, #32
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	2200      	movs	r2, #0
 80134fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8013502:	2301      	movs	r3, #1
 8013504:	e020      	b.n	8013548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8013506:	68bb      	ldr	r3, [r7, #8]
 8013508:	0c1b      	lsrs	r3, r3, #16
 801350a:	b2db      	uxtb	r3, r3
 801350c:	2b01      	cmp	r3, #1
 801350e:	d10c      	bne.n	801352a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	695b      	ldr	r3, [r3, #20]
 8013516:	43da      	mvns	r2, r3
 8013518:	68bb      	ldr	r3, [r7, #8]
 801351a:	4013      	ands	r3, r2
 801351c:	b29b      	uxth	r3, r3
 801351e:	2b00      	cmp	r3, #0
 8013520:	bf14      	ite	ne
 8013522:	2301      	movne	r3, #1
 8013524:	2300      	moveq	r3, #0
 8013526:	b2db      	uxtb	r3, r3
 8013528:	e00b      	b.n	8013542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	699b      	ldr	r3, [r3, #24]
 8013530:	43da      	mvns	r2, r3
 8013532:	68bb      	ldr	r3, [r7, #8]
 8013534:	4013      	ands	r3, r2
 8013536:	b29b      	uxth	r3, r3
 8013538:	2b00      	cmp	r3, #0
 801353a:	bf14      	ite	ne
 801353c:	2301      	movne	r3, #1
 801353e:	2300      	moveq	r3, #0
 8013540:	b2db      	uxtb	r3, r3
 8013542:	2b00      	cmp	r3, #0
 8013544:	d18d      	bne.n	8013462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8013546:	2300      	movs	r3, #0
}
 8013548:	4618      	mov	r0, r3
 801354a:	3710      	adds	r7, #16
 801354c:	46bd      	mov	sp, r7
 801354e:	bd80      	pop	{r7, pc}

08013550 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8013550:	b580      	push	{r7, lr}
 8013552:	b084      	sub	sp, #16
 8013554:	af00      	add	r7, sp, #0
 8013556:	60f8      	str	r0, [r7, #12]
 8013558:	60b9      	str	r1, [r7, #8]
 801355a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801355c:	e02d      	b.n	80135ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801355e:	68f8      	ldr	r0, [r7, #12]
 8013560:	f000 f8ce 	bl	8013700 <I2C_IsAcknowledgeFailed>
 8013564:	4603      	mov	r3, r0
 8013566:	2b00      	cmp	r3, #0
 8013568:	d001      	beq.n	801356e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801356a:	2301      	movs	r3, #1
 801356c:	e02d      	b.n	80135ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801356e:	68bb      	ldr	r3, [r7, #8]
 8013570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013574:	d021      	beq.n	80135ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013576:	f7fe fd63 	bl	8012040 <HAL_GetTick>
 801357a:	4602      	mov	r2, r0
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	1ad3      	subs	r3, r2, r3
 8013580:	68ba      	ldr	r2, [r7, #8]
 8013582:	429a      	cmp	r2, r3
 8013584:	d302      	bcc.n	801358c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8013586:	68bb      	ldr	r3, [r7, #8]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d116      	bne.n	80135ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	2200      	movs	r2, #0
 8013590:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	2220      	movs	r2, #32
 8013596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	2200      	movs	r2, #0
 801359e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135a6:	f043 0220 	orr.w	r2, r3, #32
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	2200      	movs	r2, #0
 80135b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80135b6:	2301      	movs	r3, #1
 80135b8:	e007      	b.n	80135ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	695b      	ldr	r3, [r3, #20]
 80135c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80135c4:	2b80      	cmp	r3, #128	; 0x80
 80135c6:	d1ca      	bne.n	801355e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80135c8:	2300      	movs	r3, #0
}
 80135ca:	4618      	mov	r0, r3
 80135cc:	3710      	adds	r7, #16
 80135ce:	46bd      	mov	sp, r7
 80135d0:	bd80      	pop	{r7, pc}

080135d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80135d2:	b580      	push	{r7, lr}
 80135d4:	b084      	sub	sp, #16
 80135d6:	af00      	add	r7, sp, #0
 80135d8:	60f8      	str	r0, [r7, #12]
 80135da:	60b9      	str	r1, [r7, #8]
 80135dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80135de:	e02d      	b.n	801363c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80135e0:	68f8      	ldr	r0, [r7, #12]
 80135e2:	f000 f88d 	bl	8013700 <I2C_IsAcknowledgeFailed>
 80135e6:	4603      	mov	r3, r0
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d001      	beq.n	80135f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80135ec:	2301      	movs	r3, #1
 80135ee:	e02d      	b.n	801364c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80135f0:	68bb      	ldr	r3, [r7, #8]
 80135f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135f6:	d021      	beq.n	801363c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80135f8:	f7fe fd22 	bl	8012040 <HAL_GetTick>
 80135fc:	4602      	mov	r2, r0
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	1ad3      	subs	r3, r2, r3
 8013602:	68ba      	ldr	r2, [r7, #8]
 8013604:	429a      	cmp	r2, r3
 8013606:	d302      	bcc.n	801360e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8013608:	68bb      	ldr	r3, [r7, #8]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d116      	bne.n	801363c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	2200      	movs	r2, #0
 8013612:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	2220      	movs	r2, #32
 8013618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	2200      	movs	r2, #0
 8013620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013628:	f043 0220 	orr.w	r2, r3, #32
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	2200      	movs	r2, #0
 8013634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8013638:	2301      	movs	r3, #1
 801363a:	e007      	b.n	801364c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	695b      	ldr	r3, [r3, #20]
 8013642:	f003 0304 	and.w	r3, r3, #4
 8013646:	2b04      	cmp	r3, #4
 8013648:	d1ca      	bne.n	80135e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801364a:	2300      	movs	r3, #0
}
 801364c:	4618      	mov	r0, r3
 801364e:	3710      	adds	r7, #16
 8013650:	46bd      	mov	sp, r7
 8013652:	bd80      	pop	{r7, pc}

08013654 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8013654:	b580      	push	{r7, lr}
 8013656:	b084      	sub	sp, #16
 8013658:	af00      	add	r7, sp, #0
 801365a:	60f8      	str	r0, [r7, #12]
 801365c:	60b9      	str	r1, [r7, #8]
 801365e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8013660:	e042      	b.n	80136e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	695b      	ldr	r3, [r3, #20]
 8013668:	f003 0310 	and.w	r3, r3, #16
 801366c:	2b10      	cmp	r3, #16
 801366e:	d119      	bne.n	80136a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	f06f 0210 	mvn.w	r2, #16
 8013678:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	2200      	movs	r2, #0
 801367e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	2220      	movs	r2, #32
 8013684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	2200      	movs	r2, #0
 801368c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	2200      	movs	r2, #0
 801369c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80136a0:	2301      	movs	r3, #1
 80136a2:	e029      	b.n	80136f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80136a4:	f7fe fccc 	bl	8012040 <HAL_GetTick>
 80136a8:	4602      	mov	r2, r0
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	1ad3      	subs	r3, r2, r3
 80136ae:	68ba      	ldr	r2, [r7, #8]
 80136b0:	429a      	cmp	r2, r3
 80136b2:	d302      	bcc.n	80136ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80136b4:	68bb      	ldr	r3, [r7, #8]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d116      	bne.n	80136e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	2200      	movs	r2, #0
 80136be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	2220      	movs	r2, #32
 80136c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	2200      	movs	r2, #0
 80136cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136d4:	f043 0220 	orr.w	r2, r3, #32
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	2200      	movs	r2, #0
 80136e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80136e4:	2301      	movs	r3, #1
 80136e6:	e007      	b.n	80136f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	695b      	ldr	r3, [r3, #20]
 80136ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80136f2:	2b40      	cmp	r3, #64	; 0x40
 80136f4:	d1b5      	bne.n	8013662 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80136f6:	2300      	movs	r3, #0
}
 80136f8:	4618      	mov	r0, r3
 80136fa:	3710      	adds	r7, #16
 80136fc:	46bd      	mov	sp, r7
 80136fe:	bd80      	pop	{r7, pc}

08013700 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8013700:	b480      	push	{r7}
 8013702:	b083      	sub	sp, #12
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	695b      	ldr	r3, [r3, #20]
 801370e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013716:	d11b      	bne.n	8013750 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8013720:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	2200      	movs	r2, #0
 8013726:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	2220      	movs	r2, #32
 801372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	2200      	movs	r2, #0
 8013734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801373c:	f043 0204 	orr.w	r2, r3, #4
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	2200      	movs	r2, #0
 8013748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801374c:	2301      	movs	r3, #1
 801374e:	e000      	b.n	8013752 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8013750:	2300      	movs	r3, #0
}
 8013752:	4618      	mov	r0, r3
 8013754:	370c      	adds	r7, #12
 8013756:	46bd      	mov	sp, r7
 8013758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801375c:	4770      	bx	lr
	...

08013760 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8013760:	b580      	push	{r7, lr}
 8013762:	b086      	sub	sp, #24
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d101      	bne.n	8013772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801376e:	2301      	movs	r3, #1
 8013770:	e264      	b.n	8013c3c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	f003 0301 	and.w	r3, r3, #1
 801377a:	2b00      	cmp	r3, #0
 801377c:	d075      	beq.n	801386a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801377e:	4ba3      	ldr	r3, [pc, #652]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 8013780:	689b      	ldr	r3, [r3, #8]
 8013782:	f003 030c 	and.w	r3, r3, #12
 8013786:	2b04      	cmp	r3, #4
 8013788:	d00c      	beq.n	80137a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801378a:	4ba0      	ldr	r3, [pc, #640]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 801378c:	689b      	ldr	r3, [r3, #8]
 801378e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8013792:	2b08      	cmp	r3, #8
 8013794:	d112      	bne.n	80137bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8013796:	4b9d      	ldr	r3, [pc, #628]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 8013798:	685b      	ldr	r3, [r3, #4]
 801379a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801379e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80137a2:	d10b      	bne.n	80137bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80137a4:	4b99      	ldr	r3, [pc, #612]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d05b      	beq.n	8013868 <HAL_RCC_OscConfig+0x108>
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	685b      	ldr	r3, [r3, #4]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d157      	bne.n	8013868 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80137b8:	2301      	movs	r3, #1
 80137ba:	e23f      	b.n	8013c3c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	685b      	ldr	r3, [r3, #4]
 80137c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80137c4:	d106      	bne.n	80137d4 <HAL_RCC_OscConfig+0x74>
 80137c6:	4b91      	ldr	r3, [pc, #580]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	4a90      	ldr	r2, [pc, #576]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 80137cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80137d0:	6013      	str	r3, [r2, #0]
 80137d2:	e01d      	b.n	8013810 <HAL_RCC_OscConfig+0xb0>
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	685b      	ldr	r3, [r3, #4]
 80137d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80137dc:	d10c      	bne.n	80137f8 <HAL_RCC_OscConfig+0x98>
 80137de:	4b8b      	ldr	r3, [pc, #556]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	4a8a      	ldr	r2, [pc, #552]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 80137e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80137e8:	6013      	str	r3, [r2, #0]
 80137ea:	4b88      	ldr	r3, [pc, #544]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	4a87      	ldr	r2, [pc, #540]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 80137f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80137f4:	6013      	str	r3, [r2, #0]
 80137f6:	e00b      	b.n	8013810 <HAL_RCC_OscConfig+0xb0>
 80137f8:	4b84      	ldr	r3, [pc, #528]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	4a83      	ldr	r2, [pc, #524]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 80137fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013802:	6013      	str	r3, [r2, #0]
 8013804:	4b81      	ldr	r3, [pc, #516]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	4a80      	ldr	r2, [pc, #512]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 801380a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801380e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	685b      	ldr	r3, [r3, #4]
 8013814:	2b00      	cmp	r3, #0
 8013816:	d013      	beq.n	8013840 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013818:	f7fe fc12 	bl	8012040 <HAL_GetTick>
 801381c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801381e:	e008      	b.n	8013832 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013820:	f7fe fc0e 	bl	8012040 <HAL_GetTick>
 8013824:	4602      	mov	r2, r0
 8013826:	693b      	ldr	r3, [r7, #16]
 8013828:	1ad3      	subs	r3, r2, r3
 801382a:	2b64      	cmp	r3, #100	; 0x64
 801382c:	d901      	bls.n	8013832 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801382e:	2303      	movs	r3, #3
 8013830:	e204      	b.n	8013c3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013832:	4b76      	ldr	r3, [pc, #472]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801383a:	2b00      	cmp	r3, #0
 801383c:	d0f0      	beq.n	8013820 <HAL_RCC_OscConfig+0xc0>
 801383e:	e014      	b.n	801386a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013840:	f7fe fbfe 	bl	8012040 <HAL_GetTick>
 8013844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013846:	e008      	b.n	801385a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013848:	f7fe fbfa 	bl	8012040 <HAL_GetTick>
 801384c:	4602      	mov	r2, r0
 801384e:	693b      	ldr	r3, [r7, #16]
 8013850:	1ad3      	subs	r3, r2, r3
 8013852:	2b64      	cmp	r3, #100	; 0x64
 8013854:	d901      	bls.n	801385a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8013856:	2303      	movs	r3, #3
 8013858:	e1f0      	b.n	8013c3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801385a:	4b6c      	ldr	r3, [pc, #432]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013862:	2b00      	cmp	r3, #0
 8013864:	d1f0      	bne.n	8013848 <HAL_RCC_OscConfig+0xe8>
 8013866:	e000      	b.n	801386a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	f003 0302 	and.w	r3, r3, #2
 8013872:	2b00      	cmp	r3, #0
 8013874:	d063      	beq.n	801393e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8013876:	4b65      	ldr	r3, [pc, #404]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 8013878:	689b      	ldr	r3, [r3, #8]
 801387a:	f003 030c 	and.w	r3, r3, #12
 801387e:	2b00      	cmp	r3, #0
 8013880:	d00b      	beq.n	801389a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013882:	4b62      	ldr	r3, [pc, #392]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 8013884:	689b      	ldr	r3, [r3, #8]
 8013886:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801388a:	2b08      	cmp	r3, #8
 801388c:	d11c      	bne.n	80138c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801388e:	4b5f      	ldr	r3, [pc, #380]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 8013890:	685b      	ldr	r3, [r3, #4]
 8013892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013896:	2b00      	cmp	r3, #0
 8013898:	d116      	bne.n	80138c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801389a:	4b5c      	ldr	r3, [pc, #368]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	f003 0302 	and.w	r3, r3, #2
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d005      	beq.n	80138b2 <HAL_RCC_OscConfig+0x152>
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	68db      	ldr	r3, [r3, #12]
 80138aa:	2b01      	cmp	r3, #1
 80138ac:	d001      	beq.n	80138b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80138ae:	2301      	movs	r3, #1
 80138b0:	e1c4      	b.n	8013c3c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80138b2:	4b56      	ldr	r3, [pc, #344]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	691b      	ldr	r3, [r3, #16]
 80138be:	00db      	lsls	r3, r3, #3
 80138c0:	4952      	ldr	r1, [pc, #328]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 80138c2:	4313      	orrs	r3, r2
 80138c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80138c6:	e03a      	b.n	801393e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	68db      	ldr	r3, [r3, #12]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d020      	beq.n	8013912 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80138d0:	4b4f      	ldr	r3, [pc, #316]	; (8013a10 <HAL_RCC_OscConfig+0x2b0>)
 80138d2:	2201      	movs	r2, #1
 80138d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80138d6:	f7fe fbb3 	bl	8012040 <HAL_GetTick>
 80138da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80138dc:	e008      	b.n	80138f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80138de:	f7fe fbaf 	bl	8012040 <HAL_GetTick>
 80138e2:	4602      	mov	r2, r0
 80138e4:	693b      	ldr	r3, [r7, #16]
 80138e6:	1ad3      	subs	r3, r2, r3
 80138e8:	2b02      	cmp	r3, #2
 80138ea:	d901      	bls.n	80138f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80138ec:	2303      	movs	r3, #3
 80138ee:	e1a5      	b.n	8013c3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80138f0:	4b46      	ldr	r3, [pc, #280]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	f003 0302 	and.w	r3, r3, #2
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d0f0      	beq.n	80138de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80138fc:	4b43      	ldr	r3, [pc, #268]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	691b      	ldr	r3, [r3, #16]
 8013908:	00db      	lsls	r3, r3, #3
 801390a:	4940      	ldr	r1, [pc, #256]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 801390c:	4313      	orrs	r3, r2
 801390e:	600b      	str	r3, [r1, #0]
 8013910:	e015      	b.n	801393e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8013912:	4b3f      	ldr	r3, [pc, #252]	; (8013a10 <HAL_RCC_OscConfig+0x2b0>)
 8013914:	2200      	movs	r2, #0
 8013916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013918:	f7fe fb92 	bl	8012040 <HAL_GetTick>
 801391c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801391e:	e008      	b.n	8013932 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013920:	f7fe fb8e 	bl	8012040 <HAL_GetTick>
 8013924:	4602      	mov	r2, r0
 8013926:	693b      	ldr	r3, [r7, #16]
 8013928:	1ad3      	subs	r3, r2, r3
 801392a:	2b02      	cmp	r3, #2
 801392c:	d901      	bls.n	8013932 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801392e:	2303      	movs	r3, #3
 8013930:	e184      	b.n	8013c3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013932:	4b36      	ldr	r3, [pc, #216]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	f003 0302 	and.w	r3, r3, #2
 801393a:	2b00      	cmp	r3, #0
 801393c:	d1f0      	bne.n	8013920 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	f003 0308 	and.w	r3, r3, #8
 8013946:	2b00      	cmp	r3, #0
 8013948:	d030      	beq.n	80139ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	695b      	ldr	r3, [r3, #20]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d016      	beq.n	8013980 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8013952:	4b30      	ldr	r3, [pc, #192]	; (8013a14 <HAL_RCC_OscConfig+0x2b4>)
 8013954:	2201      	movs	r2, #1
 8013956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013958:	f7fe fb72 	bl	8012040 <HAL_GetTick>
 801395c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801395e:	e008      	b.n	8013972 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013960:	f7fe fb6e 	bl	8012040 <HAL_GetTick>
 8013964:	4602      	mov	r2, r0
 8013966:	693b      	ldr	r3, [r7, #16]
 8013968:	1ad3      	subs	r3, r2, r3
 801396a:	2b02      	cmp	r3, #2
 801396c:	d901      	bls.n	8013972 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801396e:	2303      	movs	r3, #3
 8013970:	e164      	b.n	8013c3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013972:	4b26      	ldr	r3, [pc, #152]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 8013974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013976:	f003 0302 	and.w	r3, r3, #2
 801397a:	2b00      	cmp	r3, #0
 801397c:	d0f0      	beq.n	8013960 <HAL_RCC_OscConfig+0x200>
 801397e:	e015      	b.n	80139ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013980:	4b24      	ldr	r3, [pc, #144]	; (8013a14 <HAL_RCC_OscConfig+0x2b4>)
 8013982:	2200      	movs	r2, #0
 8013984:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013986:	f7fe fb5b 	bl	8012040 <HAL_GetTick>
 801398a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801398c:	e008      	b.n	80139a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801398e:	f7fe fb57 	bl	8012040 <HAL_GetTick>
 8013992:	4602      	mov	r2, r0
 8013994:	693b      	ldr	r3, [r7, #16]
 8013996:	1ad3      	subs	r3, r2, r3
 8013998:	2b02      	cmp	r3, #2
 801399a:	d901      	bls.n	80139a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801399c:	2303      	movs	r3, #3
 801399e:	e14d      	b.n	8013c3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80139a0:	4b1a      	ldr	r3, [pc, #104]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 80139a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80139a4:	f003 0302 	and.w	r3, r3, #2
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d1f0      	bne.n	801398e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	f003 0304 	and.w	r3, r3, #4
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	f000 80a0 	beq.w	8013afa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80139ba:	2300      	movs	r3, #0
 80139bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80139be:	4b13      	ldr	r3, [pc, #76]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 80139c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d10f      	bne.n	80139ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80139ca:	2300      	movs	r3, #0
 80139cc:	60bb      	str	r3, [r7, #8]
 80139ce:	4b0f      	ldr	r3, [pc, #60]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 80139d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139d2:	4a0e      	ldr	r2, [pc, #56]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 80139d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80139d8:	6413      	str	r3, [r2, #64]	; 0x40
 80139da:	4b0c      	ldr	r3, [pc, #48]	; (8013a0c <HAL_RCC_OscConfig+0x2ac>)
 80139dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80139e2:	60bb      	str	r3, [r7, #8]
 80139e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80139e6:	2301      	movs	r3, #1
 80139e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80139ea:	4b0b      	ldr	r3, [pc, #44]	; (8013a18 <HAL_RCC_OscConfig+0x2b8>)
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d121      	bne.n	8013a3a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80139f6:	4b08      	ldr	r3, [pc, #32]	; (8013a18 <HAL_RCC_OscConfig+0x2b8>)
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	4a07      	ldr	r2, [pc, #28]	; (8013a18 <HAL_RCC_OscConfig+0x2b8>)
 80139fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013a00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8013a02:	f7fe fb1d 	bl	8012040 <HAL_GetTick>
 8013a06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013a08:	e011      	b.n	8013a2e <HAL_RCC_OscConfig+0x2ce>
 8013a0a:	bf00      	nop
 8013a0c:	40023800 	.word	0x40023800
 8013a10:	42470000 	.word	0x42470000
 8013a14:	42470e80 	.word	0x42470e80
 8013a18:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013a1c:	f7fe fb10 	bl	8012040 <HAL_GetTick>
 8013a20:	4602      	mov	r2, r0
 8013a22:	693b      	ldr	r3, [r7, #16]
 8013a24:	1ad3      	subs	r3, r2, r3
 8013a26:	2b02      	cmp	r3, #2
 8013a28:	d901      	bls.n	8013a2e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8013a2a:	2303      	movs	r3, #3
 8013a2c:	e106      	b.n	8013c3c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013a2e:	4b85      	ldr	r3, [pc, #532]	; (8013c44 <HAL_RCC_OscConfig+0x4e4>)
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d0f0      	beq.n	8013a1c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	689b      	ldr	r3, [r3, #8]
 8013a3e:	2b01      	cmp	r3, #1
 8013a40:	d106      	bne.n	8013a50 <HAL_RCC_OscConfig+0x2f0>
 8013a42:	4b81      	ldr	r3, [pc, #516]	; (8013c48 <HAL_RCC_OscConfig+0x4e8>)
 8013a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a46:	4a80      	ldr	r2, [pc, #512]	; (8013c48 <HAL_RCC_OscConfig+0x4e8>)
 8013a48:	f043 0301 	orr.w	r3, r3, #1
 8013a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8013a4e:	e01c      	b.n	8013a8a <HAL_RCC_OscConfig+0x32a>
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	689b      	ldr	r3, [r3, #8]
 8013a54:	2b05      	cmp	r3, #5
 8013a56:	d10c      	bne.n	8013a72 <HAL_RCC_OscConfig+0x312>
 8013a58:	4b7b      	ldr	r3, [pc, #492]	; (8013c48 <HAL_RCC_OscConfig+0x4e8>)
 8013a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a5c:	4a7a      	ldr	r2, [pc, #488]	; (8013c48 <HAL_RCC_OscConfig+0x4e8>)
 8013a5e:	f043 0304 	orr.w	r3, r3, #4
 8013a62:	6713      	str	r3, [r2, #112]	; 0x70
 8013a64:	4b78      	ldr	r3, [pc, #480]	; (8013c48 <HAL_RCC_OscConfig+0x4e8>)
 8013a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a68:	4a77      	ldr	r2, [pc, #476]	; (8013c48 <HAL_RCC_OscConfig+0x4e8>)
 8013a6a:	f043 0301 	orr.w	r3, r3, #1
 8013a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8013a70:	e00b      	b.n	8013a8a <HAL_RCC_OscConfig+0x32a>
 8013a72:	4b75      	ldr	r3, [pc, #468]	; (8013c48 <HAL_RCC_OscConfig+0x4e8>)
 8013a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a76:	4a74      	ldr	r2, [pc, #464]	; (8013c48 <HAL_RCC_OscConfig+0x4e8>)
 8013a78:	f023 0301 	bic.w	r3, r3, #1
 8013a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8013a7e:	4b72      	ldr	r3, [pc, #456]	; (8013c48 <HAL_RCC_OscConfig+0x4e8>)
 8013a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a82:	4a71      	ldr	r2, [pc, #452]	; (8013c48 <HAL_RCC_OscConfig+0x4e8>)
 8013a84:	f023 0304 	bic.w	r3, r3, #4
 8013a88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	689b      	ldr	r3, [r3, #8]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d015      	beq.n	8013abe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013a92:	f7fe fad5 	bl	8012040 <HAL_GetTick>
 8013a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013a98:	e00a      	b.n	8013ab0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013a9a:	f7fe fad1 	bl	8012040 <HAL_GetTick>
 8013a9e:	4602      	mov	r2, r0
 8013aa0:	693b      	ldr	r3, [r7, #16]
 8013aa2:	1ad3      	subs	r3, r2, r3
 8013aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8013aa8:	4293      	cmp	r3, r2
 8013aaa:	d901      	bls.n	8013ab0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8013aac:	2303      	movs	r3, #3
 8013aae:	e0c5      	b.n	8013c3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013ab0:	4b65      	ldr	r3, [pc, #404]	; (8013c48 <HAL_RCC_OscConfig+0x4e8>)
 8013ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ab4:	f003 0302 	and.w	r3, r3, #2
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d0ee      	beq.n	8013a9a <HAL_RCC_OscConfig+0x33a>
 8013abc:	e014      	b.n	8013ae8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013abe:	f7fe fabf 	bl	8012040 <HAL_GetTick>
 8013ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013ac4:	e00a      	b.n	8013adc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013ac6:	f7fe fabb 	bl	8012040 <HAL_GetTick>
 8013aca:	4602      	mov	r2, r0
 8013acc:	693b      	ldr	r3, [r7, #16]
 8013ace:	1ad3      	subs	r3, r2, r3
 8013ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8013ad4:	4293      	cmp	r3, r2
 8013ad6:	d901      	bls.n	8013adc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8013ad8:	2303      	movs	r3, #3
 8013ada:	e0af      	b.n	8013c3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013adc:	4b5a      	ldr	r3, [pc, #360]	; (8013c48 <HAL_RCC_OscConfig+0x4e8>)
 8013ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ae0:	f003 0302 	and.w	r3, r3, #2
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d1ee      	bne.n	8013ac6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8013ae8:	7dfb      	ldrb	r3, [r7, #23]
 8013aea:	2b01      	cmp	r3, #1
 8013aec:	d105      	bne.n	8013afa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8013aee:	4b56      	ldr	r3, [pc, #344]	; (8013c48 <HAL_RCC_OscConfig+0x4e8>)
 8013af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013af2:	4a55      	ldr	r2, [pc, #340]	; (8013c48 <HAL_RCC_OscConfig+0x4e8>)
 8013af4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013af8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	699b      	ldr	r3, [r3, #24]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	f000 809b 	beq.w	8013c3a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8013b04:	4b50      	ldr	r3, [pc, #320]	; (8013c48 <HAL_RCC_OscConfig+0x4e8>)
 8013b06:	689b      	ldr	r3, [r3, #8]
 8013b08:	f003 030c 	and.w	r3, r3, #12
 8013b0c:	2b08      	cmp	r3, #8
 8013b0e:	d05c      	beq.n	8013bca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	699b      	ldr	r3, [r3, #24]
 8013b14:	2b02      	cmp	r3, #2
 8013b16:	d141      	bne.n	8013b9c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013b18:	4b4c      	ldr	r3, [pc, #304]	; (8013c4c <HAL_RCC_OscConfig+0x4ec>)
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013b1e:	f7fe fa8f 	bl	8012040 <HAL_GetTick>
 8013b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013b24:	e008      	b.n	8013b38 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013b26:	f7fe fa8b 	bl	8012040 <HAL_GetTick>
 8013b2a:	4602      	mov	r2, r0
 8013b2c:	693b      	ldr	r3, [r7, #16]
 8013b2e:	1ad3      	subs	r3, r2, r3
 8013b30:	2b02      	cmp	r3, #2
 8013b32:	d901      	bls.n	8013b38 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8013b34:	2303      	movs	r3, #3
 8013b36:	e081      	b.n	8013c3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013b38:	4b43      	ldr	r3, [pc, #268]	; (8013c48 <HAL_RCC_OscConfig+0x4e8>)
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d1f0      	bne.n	8013b26 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	69da      	ldr	r2, [r3, #28]
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	6a1b      	ldr	r3, [r3, #32]
 8013b4c:	431a      	orrs	r2, r3
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b52:	019b      	lsls	r3, r3, #6
 8013b54:	431a      	orrs	r2, r3
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b5a:	085b      	lsrs	r3, r3, #1
 8013b5c:	3b01      	subs	r3, #1
 8013b5e:	041b      	lsls	r3, r3, #16
 8013b60:	431a      	orrs	r2, r3
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b66:	061b      	lsls	r3, r3, #24
 8013b68:	4937      	ldr	r1, [pc, #220]	; (8013c48 <HAL_RCC_OscConfig+0x4e8>)
 8013b6a:	4313      	orrs	r3, r2
 8013b6c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8013b6e:	4b37      	ldr	r3, [pc, #220]	; (8013c4c <HAL_RCC_OscConfig+0x4ec>)
 8013b70:	2201      	movs	r2, #1
 8013b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013b74:	f7fe fa64 	bl	8012040 <HAL_GetTick>
 8013b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013b7a:	e008      	b.n	8013b8e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013b7c:	f7fe fa60 	bl	8012040 <HAL_GetTick>
 8013b80:	4602      	mov	r2, r0
 8013b82:	693b      	ldr	r3, [r7, #16]
 8013b84:	1ad3      	subs	r3, r2, r3
 8013b86:	2b02      	cmp	r3, #2
 8013b88:	d901      	bls.n	8013b8e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8013b8a:	2303      	movs	r3, #3
 8013b8c:	e056      	b.n	8013c3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013b8e:	4b2e      	ldr	r3, [pc, #184]	; (8013c48 <HAL_RCC_OscConfig+0x4e8>)
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d0f0      	beq.n	8013b7c <HAL_RCC_OscConfig+0x41c>
 8013b9a:	e04e      	b.n	8013c3a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013b9c:	4b2b      	ldr	r3, [pc, #172]	; (8013c4c <HAL_RCC_OscConfig+0x4ec>)
 8013b9e:	2200      	movs	r2, #0
 8013ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013ba2:	f7fe fa4d 	bl	8012040 <HAL_GetTick>
 8013ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013ba8:	e008      	b.n	8013bbc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013baa:	f7fe fa49 	bl	8012040 <HAL_GetTick>
 8013bae:	4602      	mov	r2, r0
 8013bb0:	693b      	ldr	r3, [r7, #16]
 8013bb2:	1ad3      	subs	r3, r2, r3
 8013bb4:	2b02      	cmp	r3, #2
 8013bb6:	d901      	bls.n	8013bbc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8013bb8:	2303      	movs	r3, #3
 8013bba:	e03f      	b.n	8013c3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013bbc:	4b22      	ldr	r3, [pc, #136]	; (8013c48 <HAL_RCC_OscConfig+0x4e8>)
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d1f0      	bne.n	8013baa <HAL_RCC_OscConfig+0x44a>
 8013bc8:	e037      	b.n	8013c3a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	699b      	ldr	r3, [r3, #24]
 8013bce:	2b01      	cmp	r3, #1
 8013bd0:	d101      	bne.n	8013bd6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8013bd2:	2301      	movs	r3, #1
 8013bd4:	e032      	b.n	8013c3c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8013bd6:	4b1c      	ldr	r3, [pc, #112]	; (8013c48 <HAL_RCC_OscConfig+0x4e8>)
 8013bd8:	685b      	ldr	r3, [r3, #4]
 8013bda:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	699b      	ldr	r3, [r3, #24]
 8013be0:	2b01      	cmp	r3, #1
 8013be2:	d028      	beq.n	8013c36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013bee:	429a      	cmp	r2, r3
 8013bf0:	d121      	bne.n	8013c36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013bfc:	429a      	cmp	r2, r3
 8013bfe:	d11a      	bne.n	8013c36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8013c00:	68fa      	ldr	r2, [r7, #12]
 8013c02:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8013c06:	4013      	ands	r3, r2
 8013c08:	687a      	ldr	r2, [r7, #4]
 8013c0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013c0c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8013c0e:	4293      	cmp	r3, r2
 8013c10:	d111      	bne.n	8013c36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c1c:	085b      	lsrs	r3, r3, #1
 8013c1e:	3b01      	subs	r3, #1
 8013c20:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8013c22:	429a      	cmp	r2, r3
 8013c24:	d107      	bne.n	8013c36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c30:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8013c32:	429a      	cmp	r2, r3
 8013c34:	d001      	beq.n	8013c3a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8013c36:	2301      	movs	r3, #1
 8013c38:	e000      	b.n	8013c3c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8013c3a:	2300      	movs	r3, #0
}
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	3718      	adds	r7, #24
 8013c40:	46bd      	mov	sp, r7
 8013c42:	bd80      	pop	{r7, pc}
 8013c44:	40007000 	.word	0x40007000
 8013c48:	40023800 	.word	0x40023800
 8013c4c:	42470060 	.word	0x42470060

08013c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013c50:	b580      	push	{r7, lr}
 8013c52:	b084      	sub	sp, #16
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	6078      	str	r0, [r7, #4]
 8013c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d101      	bne.n	8013c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013c60:	2301      	movs	r3, #1
 8013c62:	e0cc      	b.n	8013dfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8013c64:	4b68      	ldr	r3, [pc, #416]	; (8013e08 <HAL_RCC_ClockConfig+0x1b8>)
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	f003 0307 	and.w	r3, r3, #7
 8013c6c:	683a      	ldr	r2, [r7, #0]
 8013c6e:	429a      	cmp	r2, r3
 8013c70:	d90c      	bls.n	8013c8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013c72:	4b65      	ldr	r3, [pc, #404]	; (8013e08 <HAL_RCC_ClockConfig+0x1b8>)
 8013c74:	683a      	ldr	r2, [r7, #0]
 8013c76:	b2d2      	uxtb	r2, r2
 8013c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013c7a:	4b63      	ldr	r3, [pc, #396]	; (8013e08 <HAL_RCC_ClockConfig+0x1b8>)
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	f003 0307 	and.w	r3, r3, #7
 8013c82:	683a      	ldr	r2, [r7, #0]
 8013c84:	429a      	cmp	r2, r3
 8013c86:	d001      	beq.n	8013c8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8013c88:	2301      	movs	r3, #1
 8013c8a:	e0b8      	b.n	8013dfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	f003 0302 	and.w	r3, r3, #2
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d020      	beq.n	8013cda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	f003 0304 	and.w	r3, r3, #4
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d005      	beq.n	8013cb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8013ca4:	4b59      	ldr	r3, [pc, #356]	; (8013e0c <HAL_RCC_ClockConfig+0x1bc>)
 8013ca6:	689b      	ldr	r3, [r3, #8]
 8013ca8:	4a58      	ldr	r2, [pc, #352]	; (8013e0c <HAL_RCC_ClockConfig+0x1bc>)
 8013caa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8013cae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	f003 0308 	and.w	r3, r3, #8
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d005      	beq.n	8013cc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8013cbc:	4b53      	ldr	r3, [pc, #332]	; (8013e0c <HAL_RCC_ClockConfig+0x1bc>)
 8013cbe:	689b      	ldr	r3, [r3, #8]
 8013cc0:	4a52      	ldr	r2, [pc, #328]	; (8013e0c <HAL_RCC_ClockConfig+0x1bc>)
 8013cc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8013cc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013cc8:	4b50      	ldr	r3, [pc, #320]	; (8013e0c <HAL_RCC_ClockConfig+0x1bc>)
 8013cca:	689b      	ldr	r3, [r3, #8]
 8013ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	689b      	ldr	r3, [r3, #8]
 8013cd4:	494d      	ldr	r1, [pc, #308]	; (8013e0c <HAL_RCC_ClockConfig+0x1bc>)
 8013cd6:	4313      	orrs	r3, r2
 8013cd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	f003 0301 	and.w	r3, r3, #1
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d044      	beq.n	8013d70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	685b      	ldr	r3, [r3, #4]
 8013cea:	2b01      	cmp	r3, #1
 8013cec:	d107      	bne.n	8013cfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013cee:	4b47      	ldr	r3, [pc, #284]	; (8013e0c <HAL_RCC_ClockConfig+0x1bc>)
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d119      	bne.n	8013d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013cfa:	2301      	movs	r3, #1
 8013cfc:	e07f      	b.n	8013dfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	685b      	ldr	r3, [r3, #4]
 8013d02:	2b02      	cmp	r3, #2
 8013d04:	d003      	beq.n	8013d0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013d0a:	2b03      	cmp	r3, #3
 8013d0c:	d107      	bne.n	8013d1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013d0e:	4b3f      	ldr	r3, [pc, #252]	; (8013e0c <HAL_RCC_ClockConfig+0x1bc>)
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d109      	bne.n	8013d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013d1a:	2301      	movs	r3, #1
 8013d1c:	e06f      	b.n	8013dfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013d1e:	4b3b      	ldr	r3, [pc, #236]	; (8013e0c <HAL_RCC_ClockConfig+0x1bc>)
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	f003 0302 	and.w	r3, r3, #2
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d101      	bne.n	8013d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013d2a:	2301      	movs	r3, #1
 8013d2c:	e067      	b.n	8013dfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8013d2e:	4b37      	ldr	r3, [pc, #220]	; (8013e0c <HAL_RCC_ClockConfig+0x1bc>)
 8013d30:	689b      	ldr	r3, [r3, #8]
 8013d32:	f023 0203 	bic.w	r2, r3, #3
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	685b      	ldr	r3, [r3, #4]
 8013d3a:	4934      	ldr	r1, [pc, #208]	; (8013e0c <HAL_RCC_ClockConfig+0x1bc>)
 8013d3c:	4313      	orrs	r3, r2
 8013d3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8013d40:	f7fe f97e 	bl	8012040 <HAL_GetTick>
 8013d44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013d46:	e00a      	b.n	8013d5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013d48:	f7fe f97a 	bl	8012040 <HAL_GetTick>
 8013d4c:	4602      	mov	r2, r0
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	1ad3      	subs	r3, r2, r3
 8013d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8013d56:	4293      	cmp	r3, r2
 8013d58:	d901      	bls.n	8013d5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8013d5a:	2303      	movs	r3, #3
 8013d5c:	e04f      	b.n	8013dfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013d5e:	4b2b      	ldr	r3, [pc, #172]	; (8013e0c <HAL_RCC_ClockConfig+0x1bc>)
 8013d60:	689b      	ldr	r3, [r3, #8]
 8013d62:	f003 020c 	and.w	r2, r3, #12
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	685b      	ldr	r3, [r3, #4]
 8013d6a:	009b      	lsls	r3, r3, #2
 8013d6c:	429a      	cmp	r2, r3
 8013d6e:	d1eb      	bne.n	8013d48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8013d70:	4b25      	ldr	r3, [pc, #148]	; (8013e08 <HAL_RCC_ClockConfig+0x1b8>)
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	f003 0307 	and.w	r3, r3, #7
 8013d78:	683a      	ldr	r2, [r7, #0]
 8013d7a:	429a      	cmp	r2, r3
 8013d7c:	d20c      	bcs.n	8013d98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013d7e:	4b22      	ldr	r3, [pc, #136]	; (8013e08 <HAL_RCC_ClockConfig+0x1b8>)
 8013d80:	683a      	ldr	r2, [r7, #0]
 8013d82:	b2d2      	uxtb	r2, r2
 8013d84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013d86:	4b20      	ldr	r3, [pc, #128]	; (8013e08 <HAL_RCC_ClockConfig+0x1b8>)
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	f003 0307 	and.w	r3, r3, #7
 8013d8e:	683a      	ldr	r2, [r7, #0]
 8013d90:	429a      	cmp	r2, r3
 8013d92:	d001      	beq.n	8013d98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8013d94:	2301      	movs	r3, #1
 8013d96:	e032      	b.n	8013dfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	f003 0304 	and.w	r3, r3, #4
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d008      	beq.n	8013db6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013da4:	4b19      	ldr	r3, [pc, #100]	; (8013e0c <HAL_RCC_ClockConfig+0x1bc>)
 8013da6:	689b      	ldr	r3, [r3, #8]
 8013da8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	68db      	ldr	r3, [r3, #12]
 8013db0:	4916      	ldr	r1, [pc, #88]	; (8013e0c <HAL_RCC_ClockConfig+0x1bc>)
 8013db2:	4313      	orrs	r3, r2
 8013db4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	f003 0308 	and.w	r3, r3, #8
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d009      	beq.n	8013dd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8013dc2:	4b12      	ldr	r3, [pc, #72]	; (8013e0c <HAL_RCC_ClockConfig+0x1bc>)
 8013dc4:	689b      	ldr	r3, [r3, #8]
 8013dc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	691b      	ldr	r3, [r3, #16]
 8013dce:	00db      	lsls	r3, r3, #3
 8013dd0:	490e      	ldr	r1, [pc, #56]	; (8013e0c <HAL_RCC_ClockConfig+0x1bc>)
 8013dd2:	4313      	orrs	r3, r2
 8013dd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8013dd6:	f000 f821 	bl	8013e1c <HAL_RCC_GetSysClockFreq>
 8013dda:	4602      	mov	r2, r0
 8013ddc:	4b0b      	ldr	r3, [pc, #44]	; (8013e0c <HAL_RCC_ClockConfig+0x1bc>)
 8013dde:	689b      	ldr	r3, [r3, #8]
 8013de0:	091b      	lsrs	r3, r3, #4
 8013de2:	f003 030f 	and.w	r3, r3, #15
 8013de6:	490a      	ldr	r1, [pc, #40]	; (8013e10 <HAL_RCC_ClockConfig+0x1c0>)
 8013de8:	5ccb      	ldrb	r3, [r1, r3]
 8013dea:	fa22 f303 	lsr.w	r3, r2, r3
 8013dee:	4a09      	ldr	r2, [pc, #36]	; (8013e14 <HAL_RCC_ClockConfig+0x1c4>)
 8013df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8013df2:	4b09      	ldr	r3, [pc, #36]	; (8013e18 <HAL_RCC_ClockConfig+0x1c8>)
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	4618      	mov	r0, r3
 8013df8:	f7fe f8de 	bl	8011fb8 <HAL_InitTick>

  return HAL_OK;
 8013dfc:	2300      	movs	r3, #0
}
 8013dfe:	4618      	mov	r0, r3
 8013e00:	3710      	adds	r7, #16
 8013e02:	46bd      	mov	sp, r7
 8013e04:	bd80      	pop	{r7, pc}
 8013e06:	bf00      	nop
 8013e08:	40023c00 	.word	0x40023c00
 8013e0c:	40023800 	.word	0x40023800
 8013e10:	08016308 	.word	0x08016308
 8013e14:	20000018 	.word	0x20000018
 8013e18:	20000080 	.word	0x20000080

08013e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013e1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8013e20:	b084      	sub	sp, #16
 8013e22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8013e24:	2300      	movs	r3, #0
 8013e26:	607b      	str	r3, [r7, #4]
 8013e28:	2300      	movs	r3, #0
 8013e2a:	60fb      	str	r3, [r7, #12]
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8013e30:	2300      	movs	r3, #0
 8013e32:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8013e34:	4b67      	ldr	r3, [pc, #412]	; (8013fd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013e36:	689b      	ldr	r3, [r3, #8]
 8013e38:	f003 030c 	and.w	r3, r3, #12
 8013e3c:	2b08      	cmp	r3, #8
 8013e3e:	d00d      	beq.n	8013e5c <HAL_RCC_GetSysClockFreq+0x40>
 8013e40:	2b08      	cmp	r3, #8
 8013e42:	f200 80bd 	bhi.w	8013fc0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d002      	beq.n	8013e50 <HAL_RCC_GetSysClockFreq+0x34>
 8013e4a:	2b04      	cmp	r3, #4
 8013e4c:	d003      	beq.n	8013e56 <HAL_RCC_GetSysClockFreq+0x3a>
 8013e4e:	e0b7      	b.n	8013fc0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8013e50:	4b61      	ldr	r3, [pc, #388]	; (8013fd8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8013e52:	60bb      	str	r3, [r7, #8]
       break;
 8013e54:	e0b7      	b.n	8013fc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8013e56:	4b61      	ldr	r3, [pc, #388]	; (8013fdc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8013e58:	60bb      	str	r3, [r7, #8]
      break;
 8013e5a:	e0b4      	b.n	8013fc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8013e5c:	4b5d      	ldr	r3, [pc, #372]	; (8013fd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013e5e:	685b      	ldr	r3, [r3, #4]
 8013e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013e64:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8013e66:	4b5b      	ldr	r3, [pc, #364]	; (8013fd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013e68:	685b      	ldr	r3, [r3, #4]
 8013e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d04d      	beq.n	8013f0e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013e72:	4b58      	ldr	r3, [pc, #352]	; (8013fd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013e74:	685b      	ldr	r3, [r3, #4]
 8013e76:	099b      	lsrs	r3, r3, #6
 8013e78:	461a      	mov	r2, r3
 8013e7a:	f04f 0300 	mov.w	r3, #0
 8013e7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8013e82:	f04f 0100 	mov.w	r1, #0
 8013e86:	ea02 0800 	and.w	r8, r2, r0
 8013e8a:	ea03 0901 	and.w	r9, r3, r1
 8013e8e:	4640      	mov	r0, r8
 8013e90:	4649      	mov	r1, r9
 8013e92:	f04f 0200 	mov.w	r2, #0
 8013e96:	f04f 0300 	mov.w	r3, #0
 8013e9a:	014b      	lsls	r3, r1, #5
 8013e9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8013ea0:	0142      	lsls	r2, r0, #5
 8013ea2:	4610      	mov	r0, r2
 8013ea4:	4619      	mov	r1, r3
 8013ea6:	ebb0 0008 	subs.w	r0, r0, r8
 8013eaa:	eb61 0109 	sbc.w	r1, r1, r9
 8013eae:	f04f 0200 	mov.w	r2, #0
 8013eb2:	f04f 0300 	mov.w	r3, #0
 8013eb6:	018b      	lsls	r3, r1, #6
 8013eb8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8013ebc:	0182      	lsls	r2, r0, #6
 8013ebe:	1a12      	subs	r2, r2, r0
 8013ec0:	eb63 0301 	sbc.w	r3, r3, r1
 8013ec4:	f04f 0000 	mov.w	r0, #0
 8013ec8:	f04f 0100 	mov.w	r1, #0
 8013ecc:	00d9      	lsls	r1, r3, #3
 8013ece:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8013ed2:	00d0      	lsls	r0, r2, #3
 8013ed4:	4602      	mov	r2, r0
 8013ed6:	460b      	mov	r3, r1
 8013ed8:	eb12 0208 	adds.w	r2, r2, r8
 8013edc:	eb43 0309 	adc.w	r3, r3, r9
 8013ee0:	f04f 0000 	mov.w	r0, #0
 8013ee4:	f04f 0100 	mov.w	r1, #0
 8013ee8:	0259      	lsls	r1, r3, #9
 8013eea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8013eee:	0250      	lsls	r0, r2, #9
 8013ef0:	4602      	mov	r2, r0
 8013ef2:	460b      	mov	r3, r1
 8013ef4:	4610      	mov	r0, r2
 8013ef6:	4619      	mov	r1, r3
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	461a      	mov	r2, r3
 8013efc:	f04f 0300 	mov.w	r3, #0
 8013f00:	f7ec fa0e 	bl	8000320 <__aeabi_uldivmod>
 8013f04:	4602      	mov	r2, r0
 8013f06:	460b      	mov	r3, r1
 8013f08:	4613      	mov	r3, r2
 8013f0a:	60fb      	str	r3, [r7, #12]
 8013f0c:	e04a      	b.n	8013fa4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013f0e:	4b31      	ldr	r3, [pc, #196]	; (8013fd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013f10:	685b      	ldr	r3, [r3, #4]
 8013f12:	099b      	lsrs	r3, r3, #6
 8013f14:	461a      	mov	r2, r3
 8013f16:	f04f 0300 	mov.w	r3, #0
 8013f1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8013f1e:	f04f 0100 	mov.w	r1, #0
 8013f22:	ea02 0400 	and.w	r4, r2, r0
 8013f26:	ea03 0501 	and.w	r5, r3, r1
 8013f2a:	4620      	mov	r0, r4
 8013f2c:	4629      	mov	r1, r5
 8013f2e:	f04f 0200 	mov.w	r2, #0
 8013f32:	f04f 0300 	mov.w	r3, #0
 8013f36:	014b      	lsls	r3, r1, #5
 8013f38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8013f3c:	0142      	lsls	r2, r0, #5
 8013f3e:	4610      	mov	r0, r2
 8013f40:	4619      	mov	r1, r3
 8013f42:	1b00      	subs	r0, r0, r4
 8013f44:	eb61 0105 	sbc.w	r1, r1, r5
 8013f48:	f04f 0200 	mov.w	r2, #0
 8013f4c:	f04f 0300 	mov.w	r3, #0
 8013f50:	018b      	lsls	r3, r1, #6
 8013f52:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8013f56:	0182      	lsls	r2, r0, #6
 8013f58:	1a12      	subs	r2, r2, r0
 8013f5a:	eb63 0301 	sbc.w	r3, r3, r1
 8013f5e:	f04f 0000 	mov.w	r0, #0
 8013f62:	f04f 0100 	mov.w	r1, #0
 8013f66:	00d9      	lsls	r1, r3, #3
 8013f68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8013f6c:	00d0      	lsls	r0, r2, #3
 8013f6e:	4602      	mov	r2, r0
 8013f70:	460b      	mov	r3, r1
 8013f72:	1912      	adds	r2, r2, r4
 8013f74:	eb45 0303 	adc.w	r3, r5, r3
 8013f78:	f04f 0000 	mov.w	r0, #0
 8013f7c:	f04f 0100 	mov.w	r1, #0
 8013f80:	0299      	lsls	r1, r3, #10
 8013f82:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8013f86:	0290      	lsls	r0, r2, #10
 8013f88:	4602      	mov	r2, r0
 8013f8a:	460b      	mov	r3, r1
 8013f8c:	4610      	mov	r0, r2
 8013f8e:	4619      	mov	r1, r3
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	461a      	mov	r2, r3
 8013f94:	f04f 0300 	mov.w	r3, #0
 8013f98:	f7ec f9c2 	bl	8000320 <__aeabi_uldivmod>
 8013f9c:	4602      	mov	r2, r0
 8013f9e:	460b      	mov	r3, r1
 8013fa0:	4613      	mov	r3, r2
 8013fa2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8013fa4:	4b0b      	ldr	r3, [pc, #44]	; (8013fd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013fa6:	685b      	ldr	r3, [r3, #4]
 8013fa8:	0c1b      	lsrs	r3, r3, #16
 8013faa:	f003 0303 	and.w	r3, r3, #3
 8013fae:	3301      	adds	r3, #1
 8013fb0:	005b      	lsls	r3, r3, #1
 8013fb2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8013fb4:	68fa      	ldr	r2, [r7, #12]
 8013fb6:	683b      	ldr	r3, [r7, #0]
 8013fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8013fbc:	60bb      	str	r3, [r7, #8]
      break;
 8013fbe:	e002      	b.n	8013fc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8013fc0:	4b05      	ldr	r3, [pc, #20]	; (8013fd8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8013fc2:	60bb      	str	r3, [r7, #8]
      break;
 8013fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8013fc6:	68bb      	ldr	r3, [r7, #8]
}
 8013fc8:	4618      	mov	r0, r3
 8013fca:	3710      	adds	r7, #16
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8013fd2:	bf00      	nop
 8013fd4:	40023800 	.word	0x40023800
 8013fd8:	00f42400 	.word	0x00f42400
 8013fdc:	007a1200 	.word	0x007a1200

08013fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013fe0:	b480      	push	{r7}
 8013fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8013fe4:	4b03      	ldr	r3, [pc, #12]	; (8013ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8013fe6:	681b      	ldr	r3, [r3, #0]
}
 8013fe8:	4618      	mov	r0, r3
 8013fea:	46bd      	mov	sp, r7
 8013fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff0:	4770      	bx	lr
 8013ff2:	bf00      	nop
 8013ff4:	20000018 	.word	0x20000018

08013ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8013ffc:	f7ff fff0 	bl	8013fe0 <HAL_RCC_GetHCLKFreq>
 8014000:	4602      	mov	r2, r0
 8014002:	4b05      	ldr	r3, [pc, #20]	; (8014018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8014004:	689b      	ldr	r3, [r3, #8]
 8014006:	0a9b      	lsrs	r3, r3, #10
 8014008:	f003 0307 	and.w	r3, r3, #7
 801400c:	4903      	ldr	r1, [pc, #12]	; (801401c <HAL_RCC_GetPCLK1Freq+0x24>)
 801400e:	5ccb      	ldrb	r3, [r1, r3]
 8014010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014014:	4618      	mov	r0, r3
 8014016:	bd80      	pop	{r7, pc}
 8014018:	40023800 	.word	0x40023800
 801401c:	08016318 	.word	0x08016318

08014020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8014020:	b580      	push	{r7, lr}
 8014022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8014024:	f7ff ffdc 	bl	8013fe0 <HAL_RCC_GetHCLKFreq>
 8014028:	4602      	mov	r2, r0
 801402a:	4b05      	ldr	r3, [pc, #20]	; (8014040 <HAL_RCC_GetPCLK2Freq+0x20>)
 801402c:	689b      	ldr	r3, [r3, #8]
 801402e:	0b5b      	lsrs	r3, r3, #13
 8014030:	f003 0307 	and.w	r3, r3, #7
 8014034:	4903      	ldr	r1, [pc, #12]	; (8014044 <HAL_RCC_GetPCLK2Freq+0x24>)
 8014036:	5ccb      	ldrb	r3, [r1, r3]
 8014038:	fa22 f303 	lsr.w	r3, r2, r3
}
 801403c:	4618      	mov	r0, r3
 801403e:	bd80      	pop	{r7, pc}
 8014040:	40023800 	.word	0x40023800
 8014044:	08016318 	.word	0x08016318

08014048 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8014048:	b580      	push	{r7, lr}
 801404a:	b082      	sub	sp, #8
 801404c:	af00      	add	r7, sp, #0
 801404e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	2b00      	cmp	r3, #0
 8014054:	d101      	bne.n	801405a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8014056:	2301      	movs	r3, #1
 8014058:	e041      	b.n	80140de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014060:	b2db      	uxtb	r3, r3
 8014062:	2b00      	cmp	r3, #0
 8014064:	d106      	bne.n	8014074 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	2200      	movs	r2, #0
 801406a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801406e:	6878      	ldr	r0, [r7, #4]
 8014070:	f7ed f824 	bl	80010bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	2202      	movs	r2, #2
 8014078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	681a      	ldr	r2, [r3, #0]
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	3304      	adds	r3, #4
 8014084:	4619      	mov	r1, r3
 8014086:	4610      	mov	r0, r2
 8014088:	f000 fa04 	bl	8014494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	2201      	movs	r2, #1
 8014090:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	2201      	movs	r2, #1
 8014098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	2201      	movs	r2, #1
 80140a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	2201      	movs	r2, #1
 80140a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	2201      	movs	r2, #1
 80140b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	2201      	movs	r2, #1
 80140b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	2201      	movs	r2, #1
 80140c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	2201      	movs	r2, #1
 80140c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	2201      	movs	r2, #1
 80140d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	2201      	movs	r2, #1
 80140d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80140dc:	2300      	movs	r3, #0
}
 80140de:	4618      	mov	r0, r3
 80140e0:	3708      	adds	r7, #8
 80140e2:	46bd      	mov	sp, r7
 80140e4:	bd80      	pop	{r7, pc}
	...

080140e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b084      	sub	sp, #16
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	6078      	str	r0, [r7, #4]
 80140f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80140f2:	683b      	ldr	r3, [r7, #0]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d109      	bne.n	801410c <HAL_TIM_PWM_Start+0x24>
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80140fe:	b2db      	uxtb	r3, r3
 8014100:	2b01      	cmp	r3, #1
 8014102:	bf14      	ite	ne
 8014104:	2301      	movne	r3, #1
 8014106:	2300      	moveq	r3, #0
 8014108:	b2db      	uxtb	r3, r3
 801410a:	e022      	b.n	8014152 <HAL_TIM_PWM_Start+0x6a>
 801410c:	683b      	ldr	r3, [r7, #0]
 801410e:	2b04      	cmp	r3, #4
 8014110:	d109      	bne.n	8014126 <HAL_TIM_PWM_Start+0x3e>
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8014118:	b2db      	uxtb	r3, r3
 801411a:	2b01      	cmp	r3, #1
 801411c:	bf14      	ite	ne
 801411e:	2301      	movne	r3, #1
 8014120:	2300      	moveq	r3, #0
 8014122:	b2db      	uxtb	r3, r3
 8014124:	e015      	b.n	8014152 <HAL_TIM_PWM_Start+0x6a>
 8014126:	683b      	ldr	r3, [r7, #0]
 8014128:	2b08      	cmp	r3, #8
 801412a:	d109      	bne.n	8014140 <HAL_TIM_PWM_Start+0x58>
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014132:	b2db      	uxtb	r3, r3
 8014134:	2b01      	cmp	r3, #1
 8014136:	bf14      	ite	ne
 8014138:	2301      	movne	r3, #1
 801413a:	2300      	moveq	r3, #0
 801413c:	b2db      	uxtb	r3, r3
 801413e:	e008      	b.n	8014152 <HAL_TIM_PWM_Start+0x6a>
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014146:	b2db      	uxtb	r3, r3
 8014148:	2b01      	cmp	r3, #1
 801414a:	bf14      	ite	ne
 801414c:	2301      	movne	r3, #1
 801414e:	2300      	moveq	r3, #0
 8014150:	b2db      	uxtb	r3, r3
 8014152:	2b00      	cmp	r3, #0
 8014154:	d001      	beq.n	801415a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8014156:	2301      	movs	r3, #1
 8014158:	e068      	b.n	801422c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801415a:	683b      	ldr	r3, [r7, #0]
 801415c:	2b00      	cmp	r3, #0
 801415e:	d104      	bne.n	801416a <HAL_TIM_PWM_Start+0x82>
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	2202      	movs	r2, #2
 8014164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014168:	e013      	b.n	8014192 <HAL_TIM_PWM_Start+0xaa>
 801416a:	683b      	ldr	r3, [r7, #0]
 801416c:	2b04      	cmp	r3, #4
 801416e:	d104      	bne.n	801417a <HAL_TIM_PWM_Start+0x92>
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	2202      	movs	r2, #2
 8014174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014178:	e00b      	b.n	8014192 <HAL_TIM_PWM_Start+0xaa>
 801417a:	683b      	ldr	r3, [r7, #0]
 801417c:	2b08      	cmp	r3, #8
 801417e:	d104      	bne.n	801418a <HAL_TIM_PWM_Start+0xa2>
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	2202      	movs	r2, #2
 8014184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014188:	e003      	b.n	8014192 <HAL_TIM_PWM_Start+0xaa>
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	2202      	movs	r2, #2
 801418e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	2201      	movs	r2, #1
 8014198:	6839      	ldr	r1, [r7, #0]
 801419a:	4618      	mov	r0, r3
 801419c:	f000 fb86 	bl	80148ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	4a23      	ldr	r2, [pc, #140]	; (8014234 <HAL_TIM_PWM_Start+0x14c>)
 80141a6:	4293      	cmp	r3, r2
 80141a8:	d107      	bne.n	80141ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80141b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	4a1d      	ldr	r2, [pc, #116]	; (8014234 <HAL_TIM_PWM_Start+0x14c>)
 80141c0:	4293      	cmp	r3, r2
 80141c2:	d018      	beq.n	80141f6 <HAL_TIM_PWM_Start+0x10e>
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80141cc:	d013      	beq.n	80141f6 <HAL_TIM_PWM_Start+0x10e>
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	4a19      	ldr	r2, [pc, #100]	; (8014238 <HAL_TIM_PWM_Start+0x150>)
 80141d4:	4293      	cmp	r3, r2
 80141d6:	d00e      	beq.n	80141f6 <HAL_TIM_PWM_Start+0x10e>
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	4a17      	ldr	r2, [pc, #92]	; (801423c <HAL_TIM_PWM_Start+0x154>)
 80141de:	4293      	cmp	r3, r2
 80141e0:	d009      	beq.n	80141f6 <HAL_TIM_PWM_Start+0x10e>
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	4a16      	ldr	r2, [pc, #88]	; (8014240 <HAL_TIM_PWM_Start+0x158>)
 80141e8:	4293      	cmp	r3, r2
 80141ea:	d004      	beq.n	80141f6 <HAL_TIM_PWM_Start+0x10e>
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	4a14      	ldr	r2, [pc, #80]	; (8014244 <HAL_TIM_PWM_Start+0x15c>)
 80141f2:	4293      	cmp	r3, r2
 80141f4:	d111      	bne.n	801421a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	689b      	ldr	r3, [r3, #8]
 80141fc:	f003 0307 	and.w	r3, r3, #7
 8014200:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	2b06      	cmp	r3, #6
 8014206:	d010      	beq.n	801422a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	681a      	ldr	r2, [r3, #0]
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	f042 0201 	orr.w	r2, r2, #1
 8014216:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014218:	e007      	b.n	801422a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	681a      	ldr	r2, [r3, #0]
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	f042 0201 	orr.w	r2, r2, #1
 8014228:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801422a:	2300      	movs	r3, #0
}
 801422c:	4618      	mov	r0, r3
 801422e:	3710      	adds	r7, #16
 8014230:	46bd      	mov	sp, r7
 8014232:	bd80      	pop	{r7, pc}
 8014234:	40010000 	.word	0x40010000
 8014238:	40000400 	.word	0x40000400
 801423c:	40000800 	.word	0x40000800
 8014240:	40000c00 	.word	0x40000c00
 8014244:	40014000 	.word	0x40014000

08014248 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014248:	b580      	push	{r7, lr}
 801424a:	b082      	sub	sp, #8
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]
 8014250:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	2200      	movs	r2, #0
 8014258:	6839      	ldr	r1, [r7, #0]
 801425a:	4618      	mov	r0, r3
 801425c:	f000 fb26 	bl	80148ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	4a29      	ldr	r2, [pc, #164]	; (801430c <HAL_TIM_PWM_Stop+0xc4>)
 8014266:	4293      	cmp	r3, r2
 8014268:	d117      	bne.n	801429a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	6a1a      	ldr	r2, [r3, #32]
 8014270:	f241 1311 	movw	r3, #4369	; 0x1111
 8014274:	4013      	ands	r3, r2
 8014276:	2b00      	cmp	r3, #0
 8014278:	d10f      	bne.n	801429a <HAL_TIM_PWM_Stop+0x52>
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	6a1a      	ldr	r2, [r3, #32]
 8014280:	f240 4344 	movw	r3, #1092	; 0x444
 8014284:	4013      	ands	r3, r2
 8014286:	2b00      	cmp	r3, #0
 8014288:	d107      	bne.n	801429a <HAL_TIM_PWM_Stop+0x52>
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8014298:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	6a1a      	ldr	r2, [r3, #32]
 80142a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80142a4:	4013      	ands	r3, r2
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d10f      	bne.n	80142ca <HAL_TIM_PWM_Stop+0x82>
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	6a1a      	ldr	r2, [r3, #32]
 80142b0:	f240 4344 	movw	r3, #1092	; 0x444
 80142b4:	4013      	ands	r3, r2
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d107      	bne.n	80142ca <HAL_TIM_PWM_Stop+0x82>
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	681a      	ldr	r2, [r3, #0]
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	f022 0201 	bic.w	r2, r2, #1
 80142c8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80142ca:	683b      	ldr	r3, [r7, #0]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d104      	bne.n	80142da <HAL_TIM_PWM_Stop+0x92>
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	2201      	movs	r2, #1
 80142d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80142d8:	e013      	b.n	8014302 <HAL_TIM_PWM_Stop+0xba>
 80142da:	683b      	ldr	r3, [r7, #0]
 80142dc:	2b04      	cmp	r3, #4
 80142de:	d104      	bne.n	80142ea <HAL_TIM_PWM_Stop+0xa2>
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	2201      	movs	r2, #1
 80142e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80142e8:	e00b      	b.n	8014302 <HAL_TIM_PWM_Stop+0xba>
 80142ea:	683b      	ldr	r3, [r7, #0]
 80142ec:	2b08      	cmp	r3, #8
 80142ee:	d104      	bne.n	80142fa <HAL_TIM_PWM_Stop+0xb2>
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	2201      	movs	r2, #1
 80142f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80142f8:	e003      	b.n	8014302 <HAL_TIM_PWM_Stop+0xba>
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	2201      	movs	r2, #1
 80142fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8014302:	2300      	movs	r3, #0
}
 8014304:	4618      	mov	r0, r3
 8014306:	3708      	adds	r7, #8
 8014308:	46bd      	mov	sp, r7
 801430a:	bd80      	pop	{r7, pc}
 801430c:	40010000 	.word	0x40010000

08014310 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8014310:	b580      	push	{r7, lr}
 8014312:	b086      	sub	sp, #24
 8014314:	af00      	add	r7, sp, #0
 8014316:	60f8      	str	r0, [r7, #12]
 8014318:	60b9      	str	r1, [r7, #8]
 801431a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801431c:	2300      	movs	r3, #0
 801431e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014326:	2b01      	cmp	r3, #1
 8014328:	d101      	bne.n	801432e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801432a:	2302      	movs	r3, #2
 801432c:	e0ae      	b.n	801448c <HAL_TIM_PWM_ConfigChannel+0x17c>
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	2201      	movs	r2, #1
 8014332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	2b0c      	cmp	r3, #12
 801433a:	f200 809f 	bhi.w	801447c <HAL_TIM_PWM_ConfigChannel+0x16c>
 801433e:	a201      	add	r2, pc, #4	; (adr r2, 8014344 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8014340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014344:	08014379 	.word	0x08014379
 8014348:	0801447d 	.word	0x0801447d
 801434c:	0801447d 	.word	0x0801447d
 8014350:	0801447d 	.word	0x0801447d
 8014354:	080143b9 	.word	0x080143b9
 8014358:	0801447d 	.word	0x0801447d
 801435c:	0801447d 	.word	0x0801447d
 8014360:	0801447d 	.word	0x0801447d
 8014364:	080143fb 	.word	0x080143fb
 8014368:	0801447d 	.word	0x0801447d
 801436c:	0801447d 	.word	0x0801447d
 8014370:	0801447d 	.word	0x0801447d
 8014374:	0801443b 	.word	0x0801443b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	68b9      	ldr	r1, [r7, #8]
 801437e:	4618      	mov	r0, r3
 8014380:	f000 f908 	bl	8014594 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	699a      	ldr	r2, [r3, #24]
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	f042 0208 	orr.w	r2, r2, #8
 8014392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	699a      	ldr	r2, [r3, #24]
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	f022 0204 	bic.w	r2, r2, #4
 80143a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	6999      	ldr	r1, [r3, #24]
 80143aa:	68bb      	ldr	r3, [r7, #8]
 80143ac:	691a      	ldr	r2, [r3, #16]
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	430a      	orrs	r2, r1
 80143b4:	619a      	str	r2, [r3, #24]
      break;
 80143b6:	e064      	b.n	8014482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	68b9      	ldr	r1, [r7, #8]
 80143be:	4618      	mov	r0, r3
 80143c0:	f000 f94e 	bl	8014660 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	699a      	ldr	r2, [r3, #24]
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80143d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	699a      	ldr	r2, [r3, #24]
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80143e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	6999      	ldr	r1, [r3, #24]
 80143ea:	68bb      	ldr	r3, [r7, #8]
 80143ec:	691b      	ldr	r3, [r3, #16]
 80143ee:	021a      	lsls	r2, r3, #8
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	430a      	orrs	r2, r1
 80143f6:	619a      	str	r2, [r3, #24]
      break;
 80143f8:	e043      	b.n	8014482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	68b9      	ldr	r1, [r7, #8]
 8014400:	4618      	mov	r0, r3
 8014402:	f000 f999 	bl	8014738 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	69da      	ldr	r2, [r3, #28]
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	f042 0208 	orr.w	r2, r2, #8
 8014414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	69da      	ldr	r2, [r3, #28]
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	f022 0204 	bic.w	r2, r2, #4
 8014424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	69d9      	ldr	r1, [r3, #28]
 801442c:	68bb      	ldr	r3, [r7, #8]
 801442e:	691a      	ldr	r2, [r3, #16]
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	430a      	orrs	r2, r1
 8014436:	61da      	str	r2, [r3, #28]
      break;
 8014438:	e023      	b.n	8014482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	68b9      	ldr	r1, [r7, #8]
 8014440:	4618      	mov	r0, r3
 8014442:	f000 f9e3 	bl	801480c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8014446:	68fb      	ldr	r3, [r7, #12]
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	69da      	ldr	r2, [r3, #28]
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	69da      	ldr	r2, [r3, #28]
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	69d9      	ldr	r1, [r3, #28]
 801446c:	68bb      	ldr	r3, [r7, #8]
 801446e:	691b      	ldr	r3, [r3, #16]
 8014470:	021a      	lsls	r2, r3, #8
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	430a      	orrs	r2, r1
 8014478:	61da      	str	r2, [r3, #28]
      break;
 801447a:	e002      	b.n	8014482 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 801447c:	2301      	movs	r3, #1
 801447e:	75fb      	strb	r3, [r7, #23]
      break;
 8014480:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	2200      	movs	r2, #0
 8014486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801448a:	7dfb      	ldrb	r3, [r7, #23]
}
 801448c:	4618      	mov	r0, r3
 801448e:	3718      	adds	r7, #24
 8014490:	46bd      	mov	sp, r7
 8014492:	bd80      	pop	{r7, pc}

08014494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8014494:	b480      	push	{r7}
 8014496:	b085      	sub	sp, #20
 8014498:	af00      	add	r7, sp, #0
 801449a:	6078      	str	r0, [r7, #4]
 801449c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	4a34      	ldr	r2, [pc, #208]	; (8014578 <TIM_Base_SetConfig+0xe4>)
 80144a8:	4293      	cmp	r3, r2
 80144aa:	d00f      	beq.n	80144cc <TIM_Base_SetConfig+0x38>
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80144b2:	d00b      	beq.n	80144cc <TIM_Base_SetConfig+0x38>
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	4a31      	ldr	r2, [pc, #196]	; (801457c <TIM_Base_SetConfig+0xe8>)
 80144b8:	4293      	cmp	r3, r2
 80144ba:	d007      	beq.n	80144cc <TIM_Base_SetConfig+0x38>
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	4a30      	ldr	r2, [pc, #192]	; (8014580 <TIM_Base_SetConfig+0xec>)
 80144c0:	4293      	cmp	r3, r2
 80144c2:	d003      	beq.n	80144cc <TIM_Base_SetConfig+0x38>
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	4a2f      	ldr	r2, [pc, #188]	; (8014584 <TIM_Base_SetConfig+0xf0>)
 80144c8:	4293      	cmp	r3, r2
 80144ca:	d108      	bne.n	80144de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80144d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80144d4:	683b      	ldr	r3, [r7, #0]
 80144d6:	685b      	ldr	r3, [r3, #4]
 80144d8:	68fa      	ldr	r2, [r7, #12]
 80144da:	4313      	orrs	r3, r2
 80144dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	4a25      	ldr	r2, [pc, #148]	; (8014578 <TIM_Base_SetConfig+0xe4>)
 80144e2:	4293      	cmp	r3, r2
 80144e4:	d01b      	beq.n	801451e <TIM_Base_SetConfig+0x8a>
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80144ec:	d017      	beq.n	801451e <TIM_Base_SetConfig+0x8a>
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	4a22      	ldr	r2, [pc, #136]	; (801457c <TIM_Base_SetConfig+0xe8>)
 80144f2:	4293      	cmp	r3, r2
 80144f4:	d013      	beq.n	801451e <TIM_Base_SetConfig+0x8a>
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	4a21      	ldr	r2, [pc, #132]	; (8014580 <TIM_Base_SetConfig+0xec>)
 80144fa:	4293      	cmp	r3, r2
 80144fc:	d00f      	beq.n	801451e <TIM_Base_SetConfig+0x8a>
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	4a20      	ldr	r2, [pc, #128]	; (8014584 <TIM_Base_SetConfig+0xf0>)
 8014502:	4293      	cmp	r3, r2
 8014504:	d00b      	beq.n	801451e <TIM_Base_SetConfig+0x8a>
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	4a1f      	ldr	r2, [pc, #124]	; (8014588 <TIM_Base_SetConfig+0xf4>)
 801450a:	4293      	cmp	r3, r2
 801450c:	d007      	beq.n	801451e <TIM_Base_SetConfig+0x8a>
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	4a1e      	ldr	r2, [pc, #120]	; (801458c <TIM_Base_SetConfig+0xf8>)
 8014512:	4293      	cmp	r3, r2
 8014514:	d003      	beq.n	801451e <TIM_Base_SetConfig+0x8a>
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	4a1d      	ldr	r2, [pc, #116]	; (8014590 <TIM_Base_SetConfig+0xfc>)
 801451a:	4293      	cmp	r3, r2
 801451c:	d108      	bne.n	8014530 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014526:	683b      	ldr	r3, [r7, #0]
 8014528:	68db      	ldr	r3, [r3, #12]
 801452a:	68fa      	ldr	r2, [r7, #12]
 801452c:	4313      	orrs	r3, r2
 801452e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8014536:	683b      	ldr	r3, [r7, #0]
 8014538:	695b      	ldr	r3, [r3, #20]
 801453a:	4313      	orrs	r3, r2
 801453c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	68fa      	ldr	r2, [r7, #12]
 8014542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014544:	683b      	ldr	r3, [r7, #0]
 8014546:	689a      	ldr	r2, [r3, #8]
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801454c:	683b      	ldr	r3, [r7, #0]
 801454e:	681a      	ldr	r2, [r3, #0]
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	4a08      	ldr	r2, [pc, #32]	; (8014578 <TIM_Base_SetConfig+0xe4>)
 8014558:	4293      	cmp	r3, r2
 801455a:	d103      	bne.n	8014564 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801455c:	683b      	ldr	r3, [r7, #0]
 801455e:	691a      	ldr	r2, [r3, #16]
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	2201      	movs	r2, #1
 8014568:	615a      	str	r2, [r3, #20]
}
 801456a:	bf00      	nop
 801456c:	3714      	adds	r7, #20
 801456e:	46bd      	mov	sp, r7
 8014570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014574:	4770      	bx	lr
 8014576:	bf00      	nop
 8014578:	40010000 	.word	0x40010000
 801457c:	40000400 	.word	0x40000400
 8014580:	40000800 	.word	0x40000800
 8014584:	40000c00 	.word	0x40000c00
 8014588:	40014000 	.word	0x40014000
 801458c:	40014400 	.word	0x40014400
 8014590:	40014800 	.word	0x40014800

08014594 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014594:	b480      	push	{r7}
 8014596:	b087      	sub	sp, #28
 8014598:	af00      	add	r7, sp, #0
 801459a:	6078      	str	r0, [r7, #4]
 801459c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	6a1b      	ldr	r3, [r3, #32]
 80145a2:	f023 0201 	bic.w	r2, r3, #1
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	6a1b      	ldr	r3, [r3, #32]
 80145ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	685b      	ldr	r3, [r3, #4]
 80145b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	699b      	ldr	r3, [r3, #24]
 80145ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80145c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	f023 0303 	bic.w	r3, r3, #3
 80145ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80145cc:	683b      	ldr	r3, [r7, #0]
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	68fa      	ldr	r2, [r7, #12]
 80145d2:	4313      	orrs	r3, r2
 80145d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80145d6:	697b      	ldr	r3, [r7, #20]
 80145d8:	f023 0302 	bic.w	r3, r3, #2
 80145dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80145de:	683b      	ldr	r3, [r7, #0]
 80145e0:	689b      	ldr	r3, [r3, #8]
 80145e2:	697a      	ldr	r2, [r7, #20]
 80145e4:	4313      	orrs	r3, r2
 80145e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	4a1c      	ldr	r2, [pc, #112]	; (801465c <TIM_OC1_SetConfig+0xc8>)
 80145ec:	4293      	cmp	r3, r2
 80145ee:	d10c      	bne.n	801460a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80145f0:	697b      	ldr	r3, [r7, #20]
 80145f2:	f023 0308 	bic.w	r3, r3, #8
 80145f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80145f8:	683b      	ldr	r3, [r7, #0]
 80145fa:	68db      	ldr	r3, [r3, #12]
 80145fc:	697a      	ldr	r2, [r7, #20]
 80145fe:	4313      	orrs	r3, r2
 8014600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8014602:	697b      	ldr	r3, [r7, #20]
 8014604:	f023 0304 	bic.w	r3, r3, #4
 8014608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	4a13      	ldr	r2, [pc, #76]	; (801465c <TIM_OC1_SetConfig+0xc8>)
 801460e:	4293      	cmp	r3, r2
 8014610:	d111      	bne.n	8014636 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8014612:	693b      	ldr	r3, [r7, #16]
 8014614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801461a:	693b      	ldr	r3, [r7, #16]
 801461c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8014622:	683b      	ldr	r3, [r7, #0]
 8014624:	695b      	ldr	r3, [r3, #20]
 8014626:	693a      	ldr	r2, [r7, #16]
 8014628:	4313      	orrs	r3, r2
 801462a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801462c:	683b      	ldr	r3, [r7, #0]
 801462e:	699b      	ldr	r3, [r3, #24]
 8014630:	693a      	ldr	r2, [r7, #16]
 8014632:	4313      	orrs	r3, r2
 8014634:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	693a      	ldr	r2, [r7, #16]
 801463a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	68fa      	ldr	r2, [r7, #12]
 8014640:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8014642:	683b      	ldr	r3, [r7, #0]
 8014644:	685a      	ldr	r2, [r3, #4]
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	697a      	ldr	r2, [r7, #20]
 801464e:	621a      	str	r2, [r3, #32]
}
 8014650:	bf00      	nop
 8014652:	371c      	adds	r7, #28
 8014654:	46bd      	mov	sp, r7
 8014656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801465a:	4770      	bx	lr
 801465c:	40010000 	.word	0x40010000

08014660 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014660:	b480      	push	{r7}
 8014662:	b087      	sub	sp, #28
 8014664:	af00      	add	r7, sp, #0
 8014666:	6078      	str	r0, [r7, #4]
 8014668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	6a1b      	ldr	r3, [r3, #32]
 801466e:	f023 0210 	bic.w	r2, r3, #16
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	6a1b      	ldr	r3, [r3, #32]
 801467a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	685b      	ldr	r3, [r3, #4]
 8014680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	699b      	ldr	r3, [r3, #24]
 8014686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801468e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014696:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014698:	683b      	ldr	r3, [r7, #0]
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	021b      	lsls	r3, r3, #8
 801469e:	68fa      	ldr	r2, [r7, #12]
 80146a0:	4313      	orrs	r3, r2
 80146a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80146a4:	697b      	ldr	r3, [r7, #20]
 80146a6:	f023 0320 	bic.w	r3, r3, #32
 80146aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80146ac:	683b      	ldr	r3, [r7, #0]
 80146ae:	689b      	ldr	r3, [r3, #8]
 80146b0:	011b      	lsls	r3, r3, #4
 80146b2:	697a      	ldr	r2, [r7, #20]
 80146b4:	4313      	orrs	r3, r2
 80146b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	4a1e      	ldr	r2, [pc, #120]	; (8014734 <TIM_OC2_SetConfig+0xd4>)
 80146bc:	4293      	cmp	r3, r2
 80146be:	d10d      	bne.n	80146dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80146c0:	697b      	ldr	r3, [r7, #20]
 80146c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80146c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80146c8:	683b      	ldr	r3, [r7, #0]
 80146ca:	68db      	ldr	r3, [r3, #12]
 80146cc:	011b      	lsls	r3, r3, #4
 80146ce:	697a      	ldr	r2, [r7, #20]
 80146d0:	4313      	orrs	r3, r2
 80146d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80146d4:	697b      	ldr	r3, [r7, #20]
 80146d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80146da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	4a15      	ldr	r2, [pc, #84]	; (8014734 <TIM_OC2_SetConfig+0xd4>)
 80146e0:	4293      	cmp	r3, r2
 80146e2:	d113      	bne.n	801470c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80146e4:	693b      	ldr	r3, [r7, #16]
 80146e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80146ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80146ec:	693b      	ldr	r3, [r7, #16]
 80146ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80146f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80146f4:	683b      	ldr	r3, [r7, #0]
 80146f6:	695b      	ldr	r3, [r3, #20]
 80146f8:	009b      	lsls	r3, r3, #2
 80146fa:	693a      	ldr	r2, [r7, #16]
 80146fc:	4313      	orrs	r3, r2
 80146fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8014700:	683b      	ldr	r3, [r7, #0]
 8014702:	699b      	ldr	r3, [r3, #24]
 8014704:	009b      	lsls	r3, r3, #2
 8014706:	693a      	ldr	r2, [r7, #16]
 8014708:	4313      	orrs	r3, r2
 801470a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	693a      	ldr	r2, [r7, #16]
 8014710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	68fa      	ldr	r2, [r7, #12]
 8014716:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8014718:	683b      	ldr	r3, [r7, #0]
 801471a:	685a      	ldr	r2, [r3, #4]
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	697a      	ldr	r2, [r7, #20]
 8014724:	621a      	str	r2, [r3, #32]
}
 8014726:	bf00      	nop
 8014728:	371c      	adds	r7, #28
 801472a:	46bd      	mov	sp, r7
 801472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014730:	4770      	bx	lr
 8014732:	bf00      	nop
 8014734:	40010000 	.word	0x40010000

08014738 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014738:	b480      	push	{r7}
 801473a:	b087      	sub	sp, #28
 801473c:	af00      	add	r7, sp, #0
 801473e:	6078      	str	r0, [r7, #4]
 8014740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	6a1b      	ldr	r3, [r3, #32]
 8014746:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	6a1b      	ldr	r3, [r3, #32]
 8014752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	685b      	ldr	r3, [r3, #4]
 8014758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	69db      	ldr	r3, [r3, #28]
 801475e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	f023 0303 	bic.w	r3, r3, #3
 801476e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014770:	683b      	ldr	r3, [r7, #0]
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	68fa      	ldr	r2, [r7, #12]
 8014776:	4313      	orrs	r3, r2
 8014778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801477a:	697b      	ldr	r3, [r7, #20]
 801477c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8014782:	683b      	ldr	r3, [r7, #0]
 8014784:	689b      	ldr	r3, [r3, #8]
 8014786:	021b      	lsls	r3, r3, #8
 8014788:	697a      	ldr	r2, [r7, #20]
 801478a:	4313      	orrs	r3, r2
 801478c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	4a1d      	ldr	r2, [pc, #116]	; (8014808 <TIM_OC3_SetConfig+0xd0>)
 8014792:	4293      	cmp	r3, r2
 8014794:	d10d      	bne.n	80147b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8014796:	697b      	ldr	r3, [r7, #20]
 8014798:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801479c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801479e:	683b      	ldr	r3, [r7, #0]
 80147a0:	68db      	ldr	r3, [r3, #12]
 80147a2:	021b      	lsls	r3, r3, #8
 80147a4:	697a      	ldr	r2, [r7, #20]
 80147a6:	4313      	orrs	r3, r2
 80147a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80147aa:	697b      	ldr	r3, [r7, #20]
 80147ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80147b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	4a14      	ldr	r2, [pc, #80]	; (8014808 <TIM_OC3_SetConfig+0xd0>)
 80147b6:	4293      	cmp	r3, r2
 80147b8:	d113      	bne.n	80147e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80147ba:	693b      	ldr	r3, [r7, #16]
 80147bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80147c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80147c2:	693b      	ldr	r3, [r7, #16]
 80147c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80147c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80147ca:	683b      	ldr	r3, [r7, #0]
 80147cc:	695b      	ldr	r3, [r3, #20]
 80147ce:	011b      	lsls	r3, r3, #4
 80147d0:	693a      	ldr	r2, [r7, #16]
 80147d2:	4313      	orrs	r3, r2
 80147d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80147d6:	683b      	ldr	r3, [r7, #0]
 80147d8:	699b      	ldr	r3, [r3, #24]
 80147da:	011b      	lsls	r3, r3, #4
 80147dc:	693a      	ldr	r2, [r7, #16]
 80147de:	4313      	orrs	r3, r2
 80147e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	693a      	ldr	r2, [r7, #16]
 80147e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	68fa      	ldr	r2, [r7, #12]
 80147ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80147ee:	683b      	ldr	r3, [r7, #0]
 80147f0:	685a      	ldr	r2, [r3, #4]
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	697a      	ldr	r2, [r7, #20]
 80147fa:	621a      	str	r2, [r3, #32]
}
 80147fc:	bf00      	nop
 80147fe:	371c      	adds	r7, #28
 8014800:	46bd      	mov	sp, r7
 8014802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014806:	4770      	bx	lr
 8014808:	40010000 	.word	0x40010000

0801480c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801480c:	b480      	push	{r7}
 801480e:	b087      	sub	sp, #28
 8014810:	af00      	add	r7, sp, #0
 8014812:	6078      	str	r0, [r7, #4]
 8014814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	6a1b      	ldr	r3, [r3, #32]
 801481a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	6a1b      	ldr	r3, [r3, #32]
 8014826:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	685b      	ldr	r3, [r3, #4]
 801482c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	69db      	ldr	r3, [r3, #28]
 8014832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801483a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014844:	683b      	ldr	r3, [r7, #0]
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	021b      	lsls	r3, r3, #8
 801484a:	68fa      	ldr	r2, [r7, #12]
 801484c:	4313      	orrs	r3, r2
 801484e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8014850:	693b      	ldr	r3, [r7, #16]
 8014852:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014856:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8014858:	683b      	ldr	r3, [r7, #0]
 801485a:	689b      	ldr	r3, [r3, #8]
 801485c:	031b      	lsls	r3, r3, #12
 801485e:	693a      	ldr	r2, [r7, #16]
 8014860:	4313      	orrs	r3, r2
 8014862:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	4a10      	ldr	r2, [pc, #64]	; (80148a8 <TIM_OC4_SetConfig+0x9c>)
 8014868:	4293      	cmp	r3, r2
 801486a:	d109      	bne.n	8014880 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801486c:	697b      	ldr	r3, [r7, #20]
 801486e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014872:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014874:	683b      	ldr	r3, [r7, #0]
 8014876:	695b      	ldr	r3, [r3, #20]
 8014878:	019b      	lsls	r3, r3, #6
 801487a:	697a      	ldr	r2, [r7, #20]
 801487c:	4313      	orrs	r3, r2
 801487e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	697a      	ldr	r2, [r7, #20]
 8014884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	68fa      	ldr	r2, [r7, #12]
 801488a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801488c:	683b      	ldr	r3, [r7, #0]
 801488e:	685a      	ldr	r2, [r3, #4]
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	693a      	ldr	r2, [r7, #16]
 8014898:	621a      	str	r2, [r3, #32]
}
 801489a:	bf00      	nop
 801489c:	371c      	adds	r7, #28
 801489e:	46bd      	mov	sp, r7
 80148a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148a4:	4770      	bx	lr
 80148a6:	bf00      	nop
 80148a8:	40010000 	.word	0x40010000

080148ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80148ac:	b480      	push	{r7}
 80148ae:	b087      	sub	sp, #28
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	60f8      	str	r0, [r7, #12]
 80148b4:	60b9      	str	r1, [r7, #8]
 80148b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80148b8:	68bb      	ldr	r3, [r7, #8]
 80148ba:	f003 031f 	and.w	r3, r3, #31
 80148be:	2201      	movs	r2, #1
 80148c0:	fa02 f303 	lsl.w	r3, r2, r3
 80148c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	6a1a      	ldr	r2, [r3, #32]
 80148ca:	697b      	ldr	r3, [r7, #20]
 80148cc:	43db      	mvns	r3, r3
 80148ce:	401a      	ands	r2, r3
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	6a1a      	ldr	r2, [r3, #32]
 80148d8:	68bb      	ldr	r3, [r7, #8]
 80148da:	f003 031f 	and.w	r3, r3, #31
 80148de:	6879      	ldr	r1, [r7, #4]
 80148e0:	fa01 f303 	lsl.w	r3, r1, r3
 80148e4:	431a      	orrs	r2, r3
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	621a      	str	r2, [r3, #32]
}
 80148ea:	bf00      	nop
 80148ec:	371c      	adds	r7, #28
 80148ee:	46bd      	mov	sp, r7
 80148f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148f4:	4770      	bx	lr
	...

080148f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80148f8:	b480      	push	{r7}
 80148fa:	b085      	sub	sp, #20
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
 8014900:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014908:	2b01      	cmp	r3, #1
 801490a:	d101      	bne.n	8014910 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801490c:	2302      	movs	r3, #2
 801490e:	e050      	b.n	80149b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	2201      	movs	r2, #1
 8014914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	2202      	movs	r2, #2
 801491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	685b      	ldr	r3, [r3, #4]
 8014926:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	689b      	ldr	r3, [r3, #8]
 801492e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014936:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8014938:	683b      	ldr	r3, [r7, #0]
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	68fa      	ldr	r2, [r7, #12]
 801493e:	4313      	orrs	r3, r2
 8014940:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	68fa      	ldr	r2, [r7, #12]
 8014948:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	4a1c      	ldr	r2, [pc, #112]	; (80149c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8014950:	4293      	cmp	r3, r2
 8014952:	d018      	beq.n	8014986 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801495c:	d013      	beq.n	8014986 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	4a18      	ldr	r2, [pc, #96]	; (80149c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8014964:	4293      	cmp	r3, r2
 8014966:	d00e      	beq.n	8014986 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	4a16      	ldr	r2, [pc, #88]	; (80149c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 801496e:	4293      	cmp	r3, r2
 8014970:	d009      	beq.n	8014986 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	4a15      	ldr	r2, [pc, #84]	; (80149cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8014978:	4293      	cmp	r3, r2
 801497a:	d004      	beq.n	8014986 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	4a13      	ldr	r2, [pc, #76]	; (80149d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8014982:	4293      	cmp	r3, r2
 8014984:	d10c      	bne.n	80149a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8014986:	68bb      	ldr	r3, [r7, #8]
 8014988:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801498c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801498e:	683b      	ldr	r3, [r7, #0]
 8014990:	685b      	ldr	r3, [r3, #4]
 8014992:	68ba      	ldr	r2, [r7, #8]
 8014994:	4313      	orrs	r3, r2
 8014996:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	68ba      	ldr	r2, [r7, #8]
 801499e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	2201      	movs	r2, #1
 80149a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	2200      	movs	r2, #0
 80149ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80149b0:	2300      	movs	r3, #0
}
 80149b2:	4618      	mov	r0, r3
 80149b4:	3714      	adds	r7, #20
 80149b6:	46bd      	mov	sp, r7
 80149b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149bc:	4770      	bx	lr
 80149be:	bf00      	nop
 80149c0:	40010000 	.word	0x40010000
 80149c4:	40000400 	.word	0x40000400
 80149c8:	40000800 	.word	0x40000800
 80149cc:	40000c00 	.word	0x40000c00
 80149d0:	40014000 	.word	0x40014000

080149d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80149d4:	b580      	push	{r7, lr}
 80149d6:	b082      	sub	sp, #8
 80149d8:	af00      	add	r7, sp, #0
 80149da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d101      	bne.n	80149e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80149e2:	2301      	movs	r3, #1
 80149e4:	e03f      	b.n	8014a66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80149ec:	b2db      	uxtb	r3, r3
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d106      	bne.n	8014a00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	2200      	movs	r2, #0
 80149f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80149fa:	6878      	ldr	r0, [r7, #4]
 80149fc:	f7ec fbba 	bl	8001174 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	2224      	movs	r2, #36	; 0x24
 8014a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	68da      	ldr	r2, [r3, #12]
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014a16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8014a18:	6878      	ldr	r0, [r7, #4]
 8014a1a:	f000 f999 	bl	8014d50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	691a      	ldr	r2, [r3, #16]
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8014a2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	695a      	ldr	r2, [r3, #20]
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8014a3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	68da      	ldr	r2, [r3, #12]
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014a4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	2200      	movs	r2, #0
 8014a52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	2220      	movs	r2, #32
 8014a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	2220      	movs	r2, #32
 8014a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8014a64:	2300      	movs	r3, #0
}
 8014a66:	4618      	mov	r0, r3
 8014a68:	3708      	adds	r7, #8
 8014a6a:	46bd      	mov	sp, r7
 8014a6c:	bd80      	pop	{r7, pc}

08014a6e <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8014a6e:	b580      	push	{r7, lr}
 8014a70:	b084      	sub	sp, #16
 8014a72:	af00      	add	r7, sp, #0
 8014a74:	60f8      	str	r0, [r7, #12]
 8014a76:	460b      	mov	r3, r1
 8014a78:	607a      	str	r2, [r7, #4]
 8014a7a:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d101      	bne.n	8014a86 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8014a82:	2301      	movs	r3, #1
 8014a84:	e05f      	b.n	8014b46 <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014a8c:	b2db      	uxtb	r3, r3
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d106      	bne.n	8014aa0 <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	2200      	movs	r2, #0
 8014a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014a9a:	68f8      	ldr	r0, [r7, #12]
 8014a9c:	f7ec fb6a 	bl	8001174 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	2224      	movs	r2, #36	; 0x24
 8014aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	68da      	ldr	r2, [r3, #12]
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014ab6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8014ab8:	68f8      	ldr	r0, [r7, #12]
 8014aba:	f000 f949 	bl	8014d50 <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	691a      	ldr	r2, [r3, #16]
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8014acc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	695a      	ldr	r2, [r3, #20]
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8014adc:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	691a      	ldr	r2, [r3, #16]
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	f022 020f 	bic.w	r2, r2, #15
 8014aec:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	6919      	ldr	r1, [r3, #16]
 8014af4:	7afa      	ldrb	r2, [r7, #11]
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	430a      	orrs	r2, r1
 8014afc:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	68da      	ldr	r2, [r3, #12]
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8014b0c:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	68d9      	ldr	r1, [r3, #12]
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	687a      	ldr	r2, [r7, #4]
 8014b1a:	430a      	orrs	r2, r1
 8014b1c:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	68da      	ldr	r2, [r3, #12]
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014b2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	2200      	movs	r2, #0
 8014b32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	2220      	movs	r2, #32
 8014b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	2220      	movs	r2, #32
 8014b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8014b44:	2300      	movs	r3, #0
}
 8014b46:	4618      	mov	r0, r3
 8014b48:	3710      	adds	r7, #16
 8014b4a:	46bd      	mov	sp, r7
 8014b4c:	bd80      	pop	{r7, pc}

08014b4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014b4e:	b580      	push	{r7, lr}
 8014b50:	b08a      	sub	sp, #40	; 0x28
 8014b52:	af02      	add	r7, sp, #8
 8014b54:	60f8      	str	r0, [r7, #12]
 8014b56:	60b9      	str	r1, [r7, #8]
 8014b58:	603b      	str	r3, [r7, #0]
 8014b5a:	4613      	mov	r3, r2
 8014b5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8014b5e:	2300      	movs	r3, #0
 8014b60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014b68:	b2db      	uxtb	r3, r3
 8014b6a:	2b20      	cmp	r3, #32
 8014b6c:	d17c      	bne.n	8014c68 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8014b6e:	68bb      	ldr	r3, [r7, #8]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d002      	beq.n	8014b7a <HAL_UART_Transmit+0x2c>
 8014b74:	88fb      	ldrh	r3, [r7, #6]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d101      	bne.n	8014b7e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8014b7a:	2301      	movs	r3, #1
 8014b7c:	e075      	b.n	8014c6a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014b84:	2b01      	cmp	r3, #1
 8014b86:	d101      	bne.n	8014b8c <HAL_UART_Transmit+0x3e>
 8014b88:	2302      	movs	r3, #2
 8014b8a:	e06e      	b.n	8014c6a <HAL_UART_Transmit+0x11c>
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	2201      	movs	r2, #1
 8014b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	2200      	movs	r2, #0
 8014b98:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	2221      	movs	r2, #33	; 0x21
 8014b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014ba2:	f7fd fa4d 	bl	8012040 <HAL_GetTick>
 8014ba6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	88fa      	ldrh	r2, [r7, #6]
 8014bac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	88fa      	ldrh	r2, [r7, #6]
 8014bb2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	689b      	ldr	r3, [r3, #8]
 8014bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014bbc:	d108      	bne.n	8014bd0 <HAL_UART_Transmit+0x82>
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	691b      	ldr	r3, [r3, #16]
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d104      	bne.n	8014bd0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8014bc6:	2300      	movs	r3, #0
 8014bc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8014bca:	68bb      	ldr	r3, [r7, #8]
 8014bcc:	61bb      	str	r3, [r7, #24]
 8014bce:	e003      	b.n	8014bd8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8014bd0:	68bb      	ldr	r3, [r7, #8]
 8014bd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014bd4:	2300      	movs	r3, #0
 8014bd6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	2200      	movs	r2, #0
 8014bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8014be0:	e02a      	b.n	8014c38 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8014be2:	683b      	ldr	r3, [r7, #0]
 8014be4:	9300      	str	r3, [sp, #0]
 8014be6:	697b      	ldr	r3, [r7, #20]
 8014be8:	2200      	movs	r2, #0
 8014bea:	2180      	movs	r1, #128	; 0x80
 8014bec:	68f8      	ldr	r0, [r7, #12]
 8014bee:	f000 f840 	bl	8014c72 <UART_WaitOnFlagUntilTimeout>
 8014bf2:	4603      	mov	r3, r0
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d001      	beq.n	8014bfc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8014bf8:	2303      	movs	r3, #3
 8014bfa:	e036      	b.n	8014c6a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8014bfc:	69fb      	ldr	r3, [r7, #28]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d10b      	bne.n	8014c1a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8014c02:	69bb      	ldr	r3, [r7, #24]
 8014c04:	881b      	ldrh	r3, [r3, #0]
 8014c06:	461a      	mov	r2, r3
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014c10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8014c12:	69bb      	ldr	r3, [r7, #24]
 8014c14:	3302      	adds	r3, #2
 8014c16:	61bb      	str	r3, [r7, #24]
 8014c18:	e007      	b.n	8014c2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8014c1a:	69fb      	ldr	r3, [r7, #28]
 8014c1c:	781a      	ldrb	r2, [r3, #0]
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8014c24:	69fb      	ldr	r3, [r7, #28]
 8014c26:	3301      	adds	r3, #1
 8014c28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014c2e:	b29b      	uxth	r3, r3
 8014c30:	3b01      	subs	r3, #1
 8014c32:	b29a      	uxth	r2, r3
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014c3c:	b29b      	uxth	r3, r3
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d1cf      	bne.n	8014be2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8014c42:	683b      	ldr	r3, [r7, #0]
 8014c44:	9300      	str	r3, [sp, #0]
 8014c46:	697b      	ldr	r3, [r7, #20]
 8014c48:	2200      	movs	r2, #0
 8014c4a:	2140      	movs	r1, #64	; 0x40
 8014c4c:	68f8      	ldr	r0, [r7, #12]
 8014c4e:	f000 f810 	bl	8014c72 <UART_WaitOnFlagUntilTimeout>
 8014c52:	4603      	mov	r3, r0
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d001      	beq.n	8014c5c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8014c58:	2303      	movs	r3, #3
 8014c5a:	e006      	b.n	8014c6a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	2220      	movs	r2, #32
 8014c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8014c64:	2300      	movs	r3, #0
 8014c66:	e000      	b.n	8014c6a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8014c68:	2302      	movs	r3, #2
  }
}
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	3720      	adds	r7, #32
 8014c6e:	46bd      	mov	sp, r7
 8014c70:	bd80      	pop	{r7, pc}

08014c72 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8014c72:	b580      	push	{r7, lr}
 8014c74:	b090      	sub	sp, #64	; 0x40
 8014c76:	af00      	add	r7, sp, #0
 8014c78:	60f8      	str	r0, [r7, #12]
 8014c7a:	60b9      	str	r1, [r7, #8]
 8014c7c:	603b      	str	r3, [r7, #0]
 8014c7e:	4613      	mov	r3, r2
 8014c80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014c82:	e050      	b.n	8014d26 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c8a:	d04c      	beq.n	8014d26 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8014c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d007      	beq.n	8014ca2 <UART_WaitOnFlagUntilTimeout+0x30>
 8014c92:	f7fd f9d5 	bl	8012040 <HAL_GetTick>
 8014c96:	4602      	mov	r2, r0
 8014c98:	683b      	ldr	r3, [r7, #0]
 8014c9a:	1ad3      	subs	r3, r2, r3
 8014c9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014c9e:	429a      	cmp	r2, r3
 8014ca0:	d241      	bcs.n	8014d26 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	330c      	adds	r3, #12
 8014ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cac:	e853 3f00 	ldrex	r3, [r3]
 8014cb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cb4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8014cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	330c      	adds	r3, #12
 8014cc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014cc2:	637a      	str	r2, [r7, #52]	; 0x34
 8014cc4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014cc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014cc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014cca:	e841 2300 	strex	r3, r2, [r1]
 8014cce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8014cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d1e5      	bne.n	8014ca2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	3314      	adds	r3, #20
 8014cdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014cde:	697b      	ldr	r3, [r7, #20]
 8014ce0:	e853 3f00 	ldrex	r3, [r3]
 8014ce4:	613b      	str	r3, [r7, #16]
   return(result);
 8014ce6:	693b      	ldr	r3, [r7, #16]
 8014ce8:	f023 0301 	bic.w	r3, r3, #1
 8014cec:	63bb      	str	r3, [r7, #56]	; 0x38
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	3314      	adds	r3, #20
 8014cf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014cf6:	623a      	str	r2, [r7, #32]
 8014cf8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014cfa:	69f9      	ldr	r1, [r7, #28]
 8014cfc:	6a3a      	ldr	r2, [r7, #32]
 8014cfe:	e841 2300 	strex	r3, r2, [r1]
 8014d02:	61bb      	str	r3, [r7, #24]
   return(result);
 8014d04:	69bb      	ldr	r3, [r7, #24]
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d1e5      	bne.n	8014cd6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	2220      	movs	r2, #32
 8014d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	2220      	movs	r2, #32
 8014d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	2200      	movs	r2, #0
 8014d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8014d22:	2303      	movs	r3, #3
 8014d24:	e00f      	b.n	8014d46 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	681a      	ldr	r2, [r3, #0]
 8014d2c:	68bb      	ldr	r3, [r7, #8]
 8014d2e:	4013      	ands	r3, r2
 8014d30:	68ba      	ldr	r2, [r7, #8]
 8014d32:	429a      	cmp	r2, r3
 8014d34:	bf0c      	ite	eq
 8014d36:	2301      	moveq	r3, #1
 8014d38:	2300      	movne	r3, #0
 8014d3a:	b2db      	uxtb	r3, r3
 8014d3c:	461a      	mov	r2, r3
 8014d3e:	79fb      	ldrb	r3, [r7, #7]
 8014d40:	429a      	cmp	r2, r3
 8014d42:	d09f      	beq.n	8014c84 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8014d44:	2300      	movs	r3, #0
}
 8014d46:	4618      	mov	r0, r3
 8014d48:	3740      	adds	r7, #64	; 0x40
 8014d4a:	46bd      	mov	sp, r7
 8014d4c:	bd80      	pop	{r7, pc}
	...

08014d50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d54:	b09f      	sub	sp, #124	; 0x7c
 8014d56:	af00      	add	r7, sp, #0
 8014d58:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	691b      	ldr	r3, [r3, #16]
 8014d60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8014d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014d66:	68d9      	ldr	r1, [r3, #12]
 8014d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014d6a:	681a      	ldr	r2, [r3, #0]
 8014d6c:	ea40 0301 	orr.w	r3, r0, r1
 8014d70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8014d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014d74:	689a      	ldr	r2, [r3, #8]
 8014d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014d78:	691b      	ldr	r3, [r3, #16]
 8014d7a:	431a      	orrs	r2, r3
 8014d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014d7e:	695b      	ldr	r3, [r3, #20]
 8014d80:	431a      	orrs	r2, r3
 8014d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014d84:	69db      	ldr	r3, [r3, #28]
 8014d86:	4313      	orrs	r3, r2
 8014d88:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8014d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	68db      	ldr	r3, [r3, #12]
 8014d90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8014d94:	f021 010c 	bic.w	r1, r1, #12
 8014d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014d9a:	681a      	ldr	r2, [r3, #0]
 8014d9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014d9e:	430b      	orrs	r3, r1
 8014da0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8014da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	695b      	ldr	r3, [r3, #20]
 8014da8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8014dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014dae:	6999      	ldr	r1, [r3, #24]
 8014db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014db2:	681a      	ldr	r2, [r3, #0]
 8014db4:	ea40 0301 	orr.w	r3, r0, r1
 8014db8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8014dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014dbc:	681a      	ldr	r2, [r3, #0]
 8014dbe:	4bc5      	ldr	r3, [pc, #788]	; (80150d4 <UART_SetConfig+0x384>)
 8014dc0:	429a      	cmp	r2, r3
 8014dc2:	d004      	beq.n	8014dce <UART_SetConfig+0x7e>
 8014dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014dc6:	681a      	ldr	r2, [r3, #0]
 8014dc8:	4bc3      	ldr	r3, [pc, #780]	; (80150d8 <UART_SetConfig+0x388>)
 8014dca:	429a      	cmp	r2, r3
 8014dcc:	d103      	bne.n	8014dd6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8014dce:	f7ff f927 	bl	8014020 <HAL_RCC_GetPCLK2Freq>
 8014dd2:	6778      	str	r0, [r7, #116]	; 0x74
 8014dd4:	e002      	b.n	8014ddc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8014dd6:	f7ff f90f 	bl	8013ff8 <HAL_RCC_GetPCLK1Freq>
 8014dda:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014dde:	69db      	ldr	r3, [r3, #28]
 8014de0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014de4:	f040 80b6 	bne.w	8014f54 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8014de8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014dea:	461c      	mov	r4, r3
 8014dec:	f04f 0500 	mov.w	r5, #0
 8014df0:	4622      	mov	r2, r4
 8014df2:	462b      	mov	r3, r5
 8014df4:	1891      	adds	r1, r2, r2
 8014df6:	6439      	str	r1, [r7, #64]	; 0x40
 8014df8:	415b      	adcs	r3, r3
 8014dfa:	647b      	str	r3, [r7, #68]	; 0x44
 8014dfc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8014e00:	1912      	adds	r2, r2, r4
 8014e02:	eb45 0303 	adc.w	r3, r5, r3
 8014e06:	f04f 0000 	mov.w	r0, #0
 8014e0a:	f04f 0100 	mov.w	r1, #0
 8014e0e:	00d9      	lsls	r1, r3, #3
 8014e10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014e14:	00d0      	lsls	r0, r2, #3
 8014e16:	4602      	mov	r2, r0
 8014e18:	460b      	mov	r3, r1
 8014e1a:	1911      	adds	r1, r2, r4
 8014e1c:	6639      	str	r1, [r7, #96]	; 0x60
 8014e1e:	416b      	adcs	r3, r5
 8014e20:	667b      	str	r3, [r7, #100]	; 0x64
 8014e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014e24:	685b      	ldr	r3, [r3, #4]
 8014e26:	461a      	mov	r2, r3
 8014e28:	f04f 0300 	mov.w	r3, #0
 8014e2c:	1891      	adds	r1, r2, r2
 8014e2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8014e30:	415b      	adcs	r3, r3
 8014e32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014e34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8014e38:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8014e3c:	f7eb fa70 	bl	8000320 <__aeabi_uldivmod>
 8014e40:	4602      	mov	r2, r0
 8014e42:	460b      	mov	r3, r1
 8014e44:	4ba5      	ldr	r3, [pc, #660]	; (80150dc <UART_SetConfig+0x38c>)
 8014e46:	fba3 2302 	umull	r2, r3, r3, r2
 8014e4a:	095b      	lsrs	r3, r3, #5
 8014e4c:	011e      	lsls	r6, r3, #4
 8014e4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014e50:	461c      	mov	r4, r3
 8014e52:	f04f 0500 	mov.w	r5, #0
 8014e56:	4622      	mov	r2, r4
 8014e58:	462b      	mov	r3, r5
 8014e5a:	1891      	adds	r1, r2, r2
 8014e5c:	6339      	str	r1, [r7, #48]	; 0x30
 8014e5e:	415b      	adcs	r3, r3
 8014e60:	637b      	str	r3, [r7, #52]	; 0x34
 8014e62:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8014e66:	1912      	adds	r2, r2, r4
 8014e68:	eb45 0303 	adc.w	r3, r5, r3
 8014e6c:	f04f 0000 	mov.w	r0, #0
 8014e70:	f04f 0100 	mov.w	r1, #0
 8014e74:	00d9      	lsls	r1, r3, #3
 8014e76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014e7a:	00d0      	lsls	r0, r2, #3
 8014e7c:	4602      	mov	r2, r0
 8014e7e:	460b      	mov	r3, r1
 8014e80:	1911      	adds	r1, r2, r4
 8014e82:	65b9      	str	r1, [r7, #88]	; 0x58
 8014e84:	416b      	adcs	r3, r5
 8014e86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014e8a:	685b      	ldr	r3, [r3, #4]
 8014e8c:	461a      	mov	r2, r3
 8014e8e:	f04f 0300 	mov.w	r3, #0
 8014e92:	1891      	adds	r1, r2, r2
 8014e94:	62b9      	str	r1, [r7, #40]	; 0x28
 8014e96:	415b      	adcs	r3, r3
 8014e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014e9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8014e9e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8014ea2:	f7eb fa3d 	bl	8000320 <__aeabi_uldivmod>
 8014ea6:	4602      	mov	r2, r0
 8014ea8:	460b      	mov	r3, r1
 8014eaa:	4b8c      	ldr	r3, [pc, #560]	; (80150dc <UART_SetConfig+0x38c>)
 8014eac:	fba3 1302 	umull	r1, r3, r3, r2
 8014eb0:	095b      	lsrs	r3, r3, #5
 8014eb2:	2164      	movs	r1, #100	; 0x64
 8014eb4:	fb01 f303 	mul.w	r3, r1, r3
 8014eb8:	1ad3      	subs	r3, r2, r3
 8014eba:	00db      	lsls	r3, r3, #3
 8014ebc:	3332      	adds	r3, #50	; 0x32
 8014ebe:	4a87      	ldr	r2, [pc, #540]	; (80150dc <UART_SetConfig+0x38c>)
 8014ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8014ec4:	095b      	lsrs	r3, r3, #5
 8014ec6:	005b      	lsls	r3, r3, #1
 8014ec8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8014ecc:	441e      	add	r6, r3
 8014ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	f04f 0100 	mov.w	r1, #0
 8014ed6:	4602      	mov	r2, r0
 8014ed8:	460b      	mov	r3, r1
 8014eda:	1894      	adds	r4, r2, r2
 8014edc:	623c      	str	r4, [r7, #32]
 8014ede:	415b      	adcs	r3, r3
 8014ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8014ee2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8014ee6:	1812      	adds	r2, r2, r0
 8014ee8:	eb41 0303 	adc.w	r3, r1, r3
 8014eec:	f04f 0400 	mov.w	r4, #0
 8014ef0:	f04f 0500 	mov.w	r5, #0
 8014ef4:	00dd      	lsls	r5, r3, #3
 8014ef6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8014efa:	00d4      	lsls	r4, r2, #3
 8014efc:	4622      	mov	r2, r4
 8014efe:	462b      	mov	r3, r5
 8014f00:	1814      	adds	r4, r2, r0
 8014f02:	653c      	str	r4, [r7, #80]	; 0x50
 8014f04:	414b      	adcs	r3, r1
 8014f06:	657b      	str	r3, [r7, #84]	; 0x54
 8014f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014f0a:	685b      	ldr	r3, [r3, #4]
 8014f0c:	461a      	mov	r2, r3
 8014f0e:	f04f 0300 	mov.w	r3, #0
 8014f12:	1891      	adds	r1, r2, r2
 8014f14:	61b9      	str	r1, [r7, #24]
 8014f16:	415b      	adcs	r3, r3
 8014f18:	61fb      	str	r3, [r7, #28]
 8014f1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8014f1e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8014f22:	f7eb f9fd 	bl	8000320 <__aeabi_uldivmod>
 8014f26:	4602      	mov	r2, r0
 8014f28:	460b      	mov	r3, r1
 8014f2a:	4b6c      	ldr	r3, [pc, #432]	; (80150dc <UART_SetConfig+0x38c>)
 8014f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8014f30:	095b      	lsrs	r3, r3, #5
 8014f32:	2164      	movs	r1, #100	; 0x64
 8014f34:	fb01 f303 	mul.w	r3, r1, r3
 8014f38:	1ad3      	subs	r3, r2, r3
 8014f3a:	00db      	lsls	r3, r3, #3
 8014f3c:	3332      	adds	r3, #50	; 0x32
 8014f3e:	4a67      	ldr	r2, [pc, #412]	; (80150dc <UART_SetConfig+0x38c>)
 8014f40:	fba2 2303 	umull	r2, r3, r2, r3
 8014f44:	095b      	lsrs	r3, r3, #5
 8014f46:	f003 0207 	and.w	r2, r3, #7
 8014f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	4432      	add	r2, r6
 8014f50:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8014f52:	e0b9      	b.n	80150c8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8014f54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014f56:	461c      	mov	r4, r3
 8014f58:	f04f 0500 	mov.w	r5, #0
 8014f5c:	4622      	mov	r2, r4
 8014f5e:	462b      	mov	r3, r5
 8014f60:	1891      	adds	r1, r2, r2
 8014f62:	6139      	str	r1, [r7, #16]
 8014f64:	415b      	adcs	r3, r3
 8014f66:	617b      	str	r3, [r7, #20]
 8014f68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8014f6c:	1912      	adds	r2, r2, r4
 8014f6e:	eb45 0303 	adc.w	r3, r5, r3
 8014f72:	f04f 0000 	mov.w	r0, #0
 8014f76:	f04f 0100 	mov.w	r1, #0
 8014f7a:	00d9      	lsls	r1, r3, #3
 8014f7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014f80:	00d0      	lsls	r0, r2, #3
 8014f82:	4602      	mov	r2, r0
 8014f84:	460b      	mov	r3, r1
 8014f86:	eb12 0804 	adds.w	r8, r2, r4
 8014f8a:	eb43 0905 	adc.w	r9, r3, r5
 8014f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014f90:	685b      	ldr	r3, [r3, #4]
 8014f92:	4618      	mov	r0, r3
 8014f94:	f04f 0100 	mov.w	r1, #0
 8014f98:	f04f 0200 	mov.w	r2, #0
 8014f9c:	f04f 0300 	mov.w	r3, #0
 8014fa0:	008b      	lsls	r3, r1, #2
 8014fa2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8014fa6:	0082      	lsls	r2, r0, #2
 8014fa8:	4640      	mov	r0, r8
 8014faa:	4649      	mov	r1, r9
 8014fac:	f7eb f9b8 	bl	8000320 <__aeabi_uldivmod>
 8014fb0:	4602      	mov	r2, r0
 8014fb2:	460b      	mov	r3, r1
 8014fb4:	4b49      	ldr	r3, [pc, #292]	; (80150dc <UART_SetConfig+0x38c>)
 8014fb6:	fba3 2302 	umull	r2, r3, r3, r2
 8014fba:	095b      	lsrs	r3, r3, #5
 8014fbc:	011e      	lsls	r6, r3, #4
 8014fbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	f04f 0100 	mov.w	r1, #0
 8014fc6:	4602      	mov	r2, r0
 8014fc8:	460b      	mov	r3, r1
 8014fca:	1894      	adds	r4, r2, r2
 8014fcc:	60bc      	str	r4, [r7, #8]
 8014fce:	415b      	adcs	r3, r3
 8014fd0:	60fb      	str	r3, [r7, #12]
 8014fd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014fd6:	1812      	adds	r2, r2, r0
 8014fd8:	eb41 0303 	adc.w	r3, r1, r3
 8014fdc:	f04f 0400 	mov.w	r4, #0
 8014fe0:	f04f 0500 	mov.w	r5, #0
 8014fe4:	00dd      	lsls	r5, r3, #3
 8014fe6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8014fea:	00d4      	lsls	r4, r2, #3
 8014fec:	4622      	mov	r2, r4
 8014fee:	462b      	mov	r3, r5
 8014ff0:	1814      	adds	r4, r2, r0
 8014ff2:	64bc      	str	r4, [r7, #72]	; 0x48
 8014ff4:	414b      	adcs	r3, r1
 8014ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014ffa:	685b      	ldr	r3, [r3, #4]
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	f04f 0100 	mov.w	r1, #0
 8015002:	f04f 0200 	mov.w	r2, #0
 8015006:	f04f 0300 	mov.w	r3, #0
 801500a:	008b      	lsls	r3, r1, #2
 801500c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8015010:	0082      	lsls	r2, r0, #2
 8015012:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8015016:	f7eb f983 	bl	8000320 <__aeabi_uldivmod>
 801501a:	4602      	mov	r2, r0
 801501c:	460b      	mov	r3, r1
 801501e:	4b2f      	ldr	r3, [pc, #188]	; (80150dc <UART_SetConfig+0x38c>)
 8015020:	fba3 1302 	umull	r1, r3, r3, r2
 8015024:	095b      	lsrs	r3, r3, #5
 8015026:	2164      	movs	r1, #100	; 0x64
 8015028:	fb01 f303 	mul.w	r3, r1, r3
 801502c:	1ad3      	subs	r3, r2, r3
 801502e:	011b      	lsls	r3, r3, #4
 8015030:	3332      	adds	r3, #50	; 0x32
 8015032:	4a2a      	ldr	r2, [pc, #168]	; (80150dc <UART_SetConfig+0x38c>)
 8015034:	fba2 2303 	umull	r2, r3, r2, r3
 8015038:	095b      	lsrs	r3, r3, #5
 801503a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801503e:	441e      	add	r6, r3
 8015040:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015042:	4618      	mov	r0, r3
 8015044:	f04f 0100 	mov.w	r1, #0
 8015048:	4602      	mov	r2, r0
 801504a:	460b      	mov	r3, r1
 801504c:	1894      	adds	r4, r2, r2
 801504e:	603c      	str	r4, [r7, #0]
 8015050:	415b      	adcs	r3, r3
 8015052:	607b      	str	r3, [r7, #4]
 8015054:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015058:	1812      	adds	r2, r2, r0
 801505a:	eb41 0303 	adc.w	r3, r1, r3
 801505e:	f04f 0400 	mov.w	r4, #0
 8015062:	f04f 0500 	mov.w	r5, #0
 8015066:	00dd      	lsls	r5, r3, #3
 8015068:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801506c:	00d4      	lsls	r4, r2, #3
 801506e:	4622      	mov	r2, r4
 8015070:	462b      	mov	r3, r5
 8015072:	eb12 0a00 	adds.w	sl, r2, r0
 8015076:	eb43 0b01 	adc.w	fp, r3, r1
 801507a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801507c:	685b      	ldr	r3, [r3, #4]
 801507e:	4618      	mov	r0, r3
 8015080:	f04f 0100 	mov.w	r1, #0
 8015084:	f04f 0200 	mov.w	r2, #0
 8015088:	f04f 0300 	mov.w	r3, #0
 801508c:	008b      	lsls	r3, r1, #2
 801508e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8015092:	0082      	lsls	r2, r0, #2
 8015094:	4650      	mov	r0, sl
 8015096:	4659      	mov	r1, fp
 8015098:	f7eb f942 	bl	8000320 <__aeabi_uldivmod>
 801509c:	4602      	mov	r2, r0
 801509e:	460b      	mov	r3, r1
 80150a0:	4b0e      	ldr	r3, [pc, #56]	; (80150dc <UART_SetConfig+0x38c>)
 80150a2:	fba3 1302 	umull	r1, r3, r3, r2
 80150a6:	095b      	lsrs	r3, r3, #5
 80150a8:	2164      	movs	r1, #100	; 0x64
 80150aa:	fb01 f303 	mul.w	r3, r1, r3
 80150ae:	1ad3      	subs	r3, r2, r3
 80150b0:	011b      	lsls	r3, r3, #4
 80150b2:	3332      	adds	r3, #50	; 0x32
 80150b4:	4a09      	ldr	r2, [pc, #36]	; (80150dc <UART_SetConfig+0x38c>)
 80150b6:	fba2 2303 	umull	r2, r3, r2, r3
 80150ba:	095b      	lsrs	r3, r3, #5
 80150bc:	f003 020f 	and.w	r2, r3, #15
 80150c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	4432      	add	r2, r6
 80150c6:	609a      	str	r2, [r3, #8]
}
 80150c8:	bf00      	nop
 80150ca:	377c      	adds	r7, #124	; 0x7c
 80150cc:	46bd      	mov	sp, r7
 80150ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150d2:	bf00      	nop
 80150d4:	40011000 	.word	0x40011000
 80150d8:	40011400 	.word	0x40011400
 80150dc:	51eb851f 	.word	0x51eb851f

080150e0 <__errno>:
 80150e0:	4b01      	ldr	r3, [pc, #4]	; (80150e8 <__errno+0x8>)
 80150e2:	6818      	ldr	r0, [r3, #0]
 80150e4:	4770      	bx	lr
 80150e6:	bf00      	nop
 80150e8:	20000088 	.word	0x20000088

080150ec <__libc_init_array>:
 80150ec:	b570      	push	{r4, r5, r6, lr}
 80150ee:	4d0d      	ldr	r5, [pc, #52]	; (8015124 <__libc_init_array+0x38>)
 80150f0:	4c0d      	ldr	r4, [pc, #52]	; (8015128 <__libc_init_array+0x3c>)
 80150f2:	1b64      	subs	r4, r4, r5
 80150f4:	10a4      	asrs	r4, r4, #2
 80150f6:	2600      	movs	r6, #0
 80150f8:	42a6      	cmp	r6, r4
 80150fa:	d109      	bne.n	8015110 <__libc_init_array+0x24>
 80150fc:	4d0b      	ldr	r5, [pc, #44]	; (801512c <__libc_init_array+0x40>)
 80150fe:	4c0c      	ldr	r4, [pc, #48]	; (8015130 <__libc_init_array+0x44>)
 8015100:	f001 f80e 	bl	8016120 <_init>
 8015104:	1b64      	subs	r4, r4, r5
 8015106:	10a4      	asrs	r4, r4, #2
 8015108:	2600      	movs	r6, #0
 801510a:	42a6      	cmp	r6, r4
 801510c:	d105      	bne.n	801511a <__libc_init_array+0x2e>
 801510e:	bd70      	pop	{r4, r5, r6, pc}
 8015110:	f855 3b04 	ldr.w	r3, [r5], #4
 8015114:	4798      	blx	r3
 8015116:	3601      	adds	r6, #1
 8015118:	e7ee      	b.n	80150f8 <__libc_init_array+0xc>
 801511a:	f855 3b04 	ldr.w	r3, [r5], #4
 801511e:	4798      	blx	r3
 8015120:	3601      	adds	r6, #1
 8015122:	e7f2      	b.n	801510a <__libc_init_array+0x1e>
 8015124:	080163c0 	.word	0x080163c0
 8015128:	080163c0 	.word	0x080163c0
 801512c:	080163c0 	.word	0x080163c0
 8015130:	080163c4 	.word	0x080163c4

08015134 <memcpy>:
 8015134:	440a      	add	r2, r1
 8015136:	4291      	cmp	r1, r2
 8015138:	f100 33ff 	add.w	r3, r0, #4294967295
 801513c:	d100      	bne.n	8015140 <memcpy+0xc>
 801513e:	4770      	bx	lr
 8015140:	b510      	push	{r4, lr}
 8015142:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015146:	f803 4f01 	strb.w	r4, [r3, #1]!
 801514a:	4291      	cmp	r1, r2
 801514c:	d1f9      	bne.n	8015142 <memcpy+0xe>
 801514e:	bd10      	pop	{r4, pc}

08015150 <memset>:
 8015150:	4402      	add	r2, r0
 8015152:	4603      	mov	r3, r0
 8015154:	4293      	cmp	r3, r2
 8015156:	d100      	bne.n	801515a <memset+0xa>
 8015158:	4770      	bx	lr
 801515a:	f803 1b01 	strb.w	r1, [r3], #1
 801515e:	e7f9      	b.n	8015154 <memset+0x4>

08015160 <iprintf>:
 8015160:	b40f      	push	{r0, r1, r2, r3}
 8015162:	4b0a      	ldr	r3, [pc, #40]	; (801518c <iprintf+0x2c>)
 8015164:	b513      	push	{r0, r1, r4, lr}
 8015166:	681c      	ldr	r4, [r3, #0]
 8015168:	b124      	cbz	r4, 8015174 <iprintf+0x14>
 801516a:	69a3      	ldr	r3, [r4, #24]
 801516c:	b913      	cbnz	r3, 8015174 <iprintf+0x14>
 801516e:	4620      	mov	r0, r4
 8015170:	f000 fa72 	bl	8015658 <__sinit>
 8015174:	ab05      	add	r3, sp, #20
 8015176:	9a04      	ldr	r2, [sp, #16]
 8015178:	68a1      	ldr	r1, [r4, #8]
 801517a:	9301      	str	r3, [sp, #4]
 801517c:	4620      	mov	r0, r4
 801517e:	f000 fc43 	bl	8015a08 <_vfiprintf_r>
 8015182:	b002      	add	sp, #8
 8015184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015188:	b004      	add	sp, #16
 801518a:	4770      	bx	lr
 801518c:	20000088 	.word	0x20000088

08015190 <_puts_r>:
 8015190:	b570      	push	{r4, r5, r6, lr}
 8015192:	460e      	mov	r6, r1
 8015194:	4605      	mov	r5, r0
 8015196:	b118      	cbz	r0, 80151a0 <_puts_r+0x10>
 8015198:	6983      	ldr	r3, [r0, #24]
 801519a:	b90b      	cbnz	r3, 80151a0 <_puts_r+0x10>
 801519c:	f000 fa5c 	bl	8015658 <__sinit>
 80151a0:	69ab      	ldr	r3, [r5, #24]
 80151a2:	68ac      	ldr	r4, [r5, #8]
 80151a4:	b913      	cbnz	r3, 80151ac <_puts_r+0x1c>
 80151a6:	4628      	mov	r0, r5
 80151a8:	f000 fa56 	bl	8015658 <__sinit>
 80151ac:	4b2c      	ldr	r3, [pc, #176]	; (8015260 <_puts_r+0xd0>)
 80151ae:	429c      	cmp	r4, r3
 80151b0:	d120      	bne.n	80151f4 <_puts_r+0x64>
 80151b2:	686c      	ldr	r4, [r5, #4]
 80151b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80151b6:	07db      	lsls	r3, r3, #31
 80151b8:	d405      	bmi.n	80151c6 <_puts_r+0x36>
 80151ba:	89a3      	ldrh	r3, [r4, #12]
 80151bc:	0598      	lsls	r0, r3, #22
 80151be:	d402      	bmi.n	80151c6 <_puts_r+0x36>
 80151c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80151c2:	f000 fae7 	bl	8015794 <__retarget_lock_acquire_recursive>
 80151c6:	89a3      	ldrh	r3, [r4, #12]
 80151c8:	0719      	lsls	r1, r3, #28
 80151ca:	d51d      	bpl.n	8015208 <_puts_r+0x78>
 80151cc:	6923      	ldr	r3, [r4, #16]
 80151ce:	b1db      	cbz	r3, 8015208 <_puts_r+0x78>
 80151d0:	3e01      	subs	r6, #1
 80151d2:	68a3      	ldr	r3, [r4, #8]
 80151d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80151d8:	3b01      	subs	r3, #1
 80151da:	60a3      	str	r3, [r4, #8]
 80151dc:	bb39      	cbnz	r1, 801522e <_puts_r+0x9e>
 80151de:	2b00      	cmp	r3, #0
 80151e0:	da38      	bge.n	8015254 <_puts_r+0xc4>
 80151e2:	4622      	mov	r2, r4
 80151e4:	210a      	movs	r1, #10
 80151e6:	4628      	mov	r0, r5
 80151e8:	f000 f85c 	bl	80152a4 <__swbuf_r>
 80151ec:	3001      	adds	r0, #1
 80151ee:	d011      	beq.n	8015214 <_puts_r+0x84>
 80151f0:	250a      	movs	r5, #10
 80151f2:	e011      	b.n	8015218 <_puts_r+0x88>
 80151f4:	4b1b      	ldr	r3, [pc, #108]	; (8015264 <_puts_r+0xd4>)
 80151f6:	429c      	cmp	r4, r3
 80151f8:	d101      	bne.n	80151fe <_puts_r+0x6e>
 80151fa:	68ac      	ldr	r4, [r5, #8]
 80151fc:	e7da      	b.n	80151b4 <_puts_r+0x24>
 80151fe:	4b1a      	ldr	r3, [pc, #104]	; (8015268 <_puts_r+0xd8>)
 8015200:	429c      	cmp	r4, r3
 8015202:	bf08      	it	eq
 8015204:	68ec      	ldreq	r4, [r5, #12]
 8015206:	e7d5      	b.n	80151b4 <_puts_r+0x24>
 8015208:	4621      	mov	r1, r4
 801520a:	4628      	mov	r0, r5
 801520c:	f000 f89c 	bl	8015348 <__swsetup_r>
 8015210:	2800      	cmp	r0, #0
 8015212:	d0dd      	beq.n	80151d0 <_puts_r+0x40>
 8015214:	f04f 35ff 	mov.w	r5, #4294967295
 8015218:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801521a:	07da      	lsls	r2, r3, #31
 801521c:	d405      	bmi.n	801522a <_puts_r+0x9a>
 801521e:	89a3      	ldrh	r3, [r4, #12]
 8015220:	059b      	lsls	r3, r3, #22
 8015222:	d402      	bmi.n	801522a <_puts_r+0x9a>
 8015224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015226:	f000 fab6 	bl	8015796 <__retarget_lock_release_recursive>
 801522a:	4628      	mov	r0, r5
 801522c:	bd70      	pop	{r4, r5, r6, pc}
 801522e:	2b00      	cmp	r3, #0
 8015230:	da04      	bge.n	801523c <_puts_r+0xac>
 8015232:	69a2      	ldr	r2, [r4, #24]
 8015234:	429a      	cmp	r2, r3
 8015236:	dc06      	bgt.n	8015246 <_puts_r+0xb6>
 8015238:	290a      	cmp	r1, #10
 801523a:	d004      	beq.n	8015246 <_puts_r+0xb6>
 801523c:	6823      	ldr	r3, [r4, #0]
 801523e:	1c5a      	adds	r2, r3, #1
 8015240:	6022      	str	r2, [r4, #0]
 8015242:	7019      	strb	r1, [r3, #0]
 8015244:	e7c5      	b.n	80151d2 <_puts_r+0x42>
 8015246:	4622      	mov	r2, r4
 8015248:	4628      	mov	r0, r5
 801524a:	f000 f82b 	bl	80152a4 <__swbuf_r>
 801524e:	3001      	adds	r0, #1
 8015250:	d1bf      	bne.n	80151d2 <_puts_r+0x42>
 8015252:	e7df      	b.n	8015214 <_puts_r+0x84>
 8015254:	6823      	ldr	r3, [r4, #0]
 8015256:	250a      	movs	r5, #10
 8015258:	1c5a      	adds	r2, r3, #1
 801525a:	6022      	str	r2, [r4, #0]
 801525c:	701d      	strb	r5, [r3, #0]
 801525e:	e7db      	b.n	8015218 <_puts_r+0x88>
 8015260:	08016344 	.word	0x08016344
 8015264:	08016364 	.word	0x08016364
 8015268:	08016324 	.word	0x08016324

0801526c <puts>:
 801526c:	4b02      	ldr	r3, [pc, #8]	; (8015278 <puts+0xc>)
 801526e:	4601      	mov	r1, r0
 8015270:	6818      	ldr	r0, [r3, #0]
 8015272:	f7ff bf8d 	b.w	8015190 <_puts_r>
 8015276:	bf00      	nop
 8015278:	20000088 	.word	0x20000088

0801527c <strncpy>:
 801527c:	b510      	push	{r4, lr}
 801527e:	3901      	subs	r1, #1
 8015280:	4603      	mov	r3, r0
 8015282:	b132      	cbz	r2, 8015292 <strncpy+0x16>
 8015284:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015288:	f803 4b01 	strb.w	r4, [r3], #1
 801528c:	3a01      	subs	r2, #1
 801528e:	2c00      	cmp	r4, #0
 8015290:	d1f7      	bne.n	8015282 <strncpy+0x6>
 8015292:	441a      	add	r2, r3
 8015294:	2100      	movs	r1, #0
 8015296:	4293      	cmp	r3, r2
 8015298:	d100      	bne.n	801529c <strncpy+0x20>
 801529a:	bd10      	pop	{r4, pc}
 801529c:	f803 1b01 	strb.w	r1, [r3], #1
 80152a0:	e7f9      	b.n	8015296 <strncpy+0x1a>
	...

080152a4 <__swbuf_r>:
 80152a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152a6:	460e      	mov	r6, r1
 80152a8:	4614      	mov	r4, r2
 80152aa:	4605      	mov	r5, r0
 80152ac:	b118      	cbz	r0, 80152b6 <__swbuf_r+0x12>
 80152ae:	6983      	ldr	r3, [r0, #24]
 80152b0:	b90b      	cbnz	r3, 80152b6 <__swbuf_r+0x12>
 80152b2:	f000 f9d1 	bl	8015658 <__sinit>
 80152b6:	4b21      	ldr	r3, [pc, #132]	; (801533c <__swbuf_r+0x98>)
 80152b8:	429c      	cmp	r4, r3
 80152ba:	d12b      	bne.n	8015314 <__swbuf_r+0x70>
 80152bc:	686c      	ldr	r4, [r5, #4]
 80152be:	69a3      	ldr	r3, [r4, #24]
 80152c0:	60a3      	str	r3, [r4, #8]
 80152c2:	89a3      	ldrh	r3, [r4, #12]
 80152c4:	071a      	lsls	r2, r3, #28
 80152c6:	d52f      	bpl.n	8015328 <__swbuf_r+0x84>
 80152c8:	6923      	ldr	r3, [r4, #16]
 80152ca:	b36b      	cbz	r3, 8015328 <__swbuf_r+0x84>
 80152cc:	6923      	ldr	r3, [r4, #16]
 80152ce:	6820      	ldr	r0, [r4, #0]
 80152d0:	1ac0      	subs	r0, r0, r3
 80152d2:	6963      	ldr	r3, [r4, #20]
 80152d4:	b2f6      	uxtb	r6, r6
 80152d6:	4283      	cmp	r3, r0
 80152d8:	4637      	mov	r7, r6
 80152da:	dc04      	bgt.n	80152e6 <__swbuf_r+0x42>
 80152dc:	4621      	mov	r1, r4
 80152de:	4628      	mov	r0, r5
 80152e0:	f000 f926 	bl	8015530 <_fflush_r>
 80152e4:	bb30      	cbnz	r0, 8015334 <__swbuf_r+0x90>
 80152e6:	68a3      	ldr	r3, [r4, #8]
 80152e8:	3b01      	subs	r3, #1
 80152ea:	60a3      	str	r3, [r4, #8]
 80152ec:	6823      	ldr	r3, [r4, #0]
 80152ee:	1c5a      	adds	r2, r3, #1
 80152f0:	6022      	str	r2, [r4, #0]
 80152f2:	701e      	strb	r6, [r3, #0]
 80152f4:	6963      	ldr	r3, [r4, #20]
 80152f6:	3001      	adds	r0, #1
 80152f8:	4283      	cmp	r3, r0
 80152fa:	d004      	beq.n	8015306 <__swbuf_r+0x62>
 80152fc:	89a3      	ldrh	r3, [r4, #12]
 80152fe:	07db      	lsls	r3, r3, #31
 8015300:	d506      	bpl.n	8015310 <__swbuf_r+0x6c>
 8015302:	2e0a      	cmp	r6, #10
 8015304:	d104      	bne.n	8015310 <__swbuf_r+0x6c>
 8015306:	4621      	mov	r1, r4
 8015308:	4628      	mov	r0, r5
 801530a:	f000 f911 	bl	8015530 <_fflush_r>
 801530e:	b988      	cbnz	r0, 8015334 <__swbuf_r+0x90>
 8015310:	4638      	mov	r0, r7
 8015312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015314:	4b0a      	ldr	r3, [pc, #40]	; (8015340 <__swbuf_r+0x9c>)
 8015316:	429c      	cmp	r4, r3
 8015318:	d101      	bne.n	801531e <__swbuf_r+0x7a>
 801531a:	68ac      	ldr	r4, [r5, #8]
 801531c:	e7cf      	b.n	80152be <__swbuf_r+0x1a>
 801531e:	4b09      	ldr	r3, [pc, #36]	; (8015344 <__swbuf_r+0xa0>)
 8015320:	429c      	cmp	r4, r3
 8015322:	bf08      	it	eq
 8015324:	68ec      	ldreq	r4, [r5, #12]
 8015326:	e7ca      	b.n	80152be <__swbuf_r+0x1a>
 8015328:	4621      	mov	r1, r4
 801532a:	4628      	mov	r0, r5
 801532c:	f000 f80c 	bl	8015348 <__swsetup_r>
 8015330:	2800      	cmp	r0, #0
 8015332:	d0cb      	beq.n	80152cc <__swbuf_r+0x28>
 8015334:	f04f 37ff 	mov.w	r7, #4294967295
 8015338:	e7ea      	b.n	8015310 <__swbuf_r+0x6c>
 801533a:	bf00      	nop
 801533c:	08016344 	.word	0x08016344
 8015340:	08016364 	.word	0x08016364
 8015344:	08016324 	.word	0x08016324

08015348 <__swsetup_r>:
 8015348:	4b32      	ldr	r3, [pc, #200]	; (8015414 <__swsetup_r+0xcc>)
 801534a:	b570      	push	{r4, r5, r6, lr}
 801534c:	681d      	ldr	r5, [r3, #0]
 801534e:	4606      	mov	r6, r0
 8015350:	460c      	mov	r4, r1
 8015352:	b125      	cbz	r5, 801535e <__swsetup_r+0x16>
 8015354:	69ab      	ldr	r3, [r5, #24]
 8015356:	b913      	cbnz	r3, 801535e <__swsetup_r+0x16>
 8015358:	4628      	mov	r0, r5
 801535a:	f000 f97d 	bl	8015658 <__sinit>
 801535e:	4b2e      	ldr	r3, [pc, #184]	; (8015418 <__swsetup_r+0xd0>)
 8015360:	429c      	cmp	r4, r3
 8015362:	d10f      	bne.n	8015384 <__swsetup_r+0x3c>
 8015364:	686c      	ldr	r4, [r5, #4]
 8015366:	89a3      	ldrh	r3, [r4, #12]
 8015368:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801536c:	0719      	lsls	r1, r3, #28
 801536e:	d42c      	bmi.n	80153ca <__swsetup_r+0x82>
 8015370:	06dd      	lsls	r5, r3, #27
 8015372:	d411      	bmi.n	8015398 <__swsetup_r+0x50>
 8015374:	2309      	movs	r3, #9
 8015376:	6033      	str	r3, [r6, #0]
 8015378:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801537c:	81a3      	strh	r3, [r4, #12]
 801537e:	f04f 30ff 	mov.w	r0, #4294967295
 8015382:	e03e      	b.n	8015402 <__swsetup_r+0xba>
 8015384:	4b25      	ldr	r3, [pc, #148]	; (801541c <__swsetup_r+0xd4>)
 8015386:	429c      	cmp	r4, r3
 8015388:	d101      	bne.n	801538e <__swsetup_r+0x46>
 801538a:	68ac      	ldr	r4, [r5, #8]
 801538c:	e7eb      	b.n	8015366 <__swsetup_r+0x1e>
 801538e:	4b24      	ldr	r3, [pc, #144]	; (8015420 <__swsetup_r+0xd8>)
 8015390:	429c      	cmp	r4, r3
 8015392:	bf08      	it	eq
 8015394:	68ec      	ldreq	r4, [r5, #12]
 8015396:	e7e6      	b.n	8015366 <__swsetup_r+0x1e>
 8015398:	0758      	lsls	r0, r3, #29
 801539a:	d512      	bpl.n	80153c2 <__swsetup_r+0x7a>
 801539c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801539e:	b141      	cbz	r1, 80153b2 <__swsetup_r+0x6a>
 80153a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80153a4:	4299      	cmp	r1, r3
 80153a6:	d002      	beq.n	80153ae <__swsetup_r+0x66>
 80153a8:	4630      	mov	r0, r6
 80153aa:	f000 fa59 	bl	8015860 <_free_r>
 80153ae:	2300      	movs	r3, #0
 80153b0:	6363      	str	r3, [r4, #52]	; 0x34
 80153b2:	89a3      	ldrh	r3, [r4, #12]
 80153b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80153b8:	81a3      	strh	r3, [r4, #12]
 80153ba:	2300      	movs	r3, #0
 80153bc:	6063      	str	r3, [r4, #4]
 80153be:	6923      	ldr	r3, [r4, #16]
 80153c0:	6023      	str	r3, [r4, #0]
 80153c2:	89a3      	ldrh	r3, [r4, #12]
 80153c4:	f043 0308 	orr.w	r3, r3, #8
 80153c8:	81a3      	strh	r3, [r4, #12]
 80153ca:	6923      	ldr	r3, [r4, #16]
 80153cc:	b94b      	cbnz	r3, 80153e2 <__swsetup_r+0x9a>
 80153ce:	89a3      	ldrh	r3, [r4, #12]
 80153d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80153d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80153d8:	d003      	beq.n	80153e2 <__swsetup_r+0x9a>
 80153da:	4621      	mov	r1, r4
 80153dc:	4630      	mov	r0, r6
 80153de:	f000 f9ff 	bl	80157e0 <__smakebuf_r>
 80153e2:	89a0      	ldrh	r0, [r4, #12]
 80153e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80153e8:	f010 0301 	ands.w	r3, r0, #1
 80153ec:	d00a      	beq.n	8015404 <__swsetup_r+0xbc>
 80153ee:	2300      	movs	r3, #0
 80153f0:	60a3      	str	r3, [r4, #8]
 80153f2:	6963      	ldr	r3, [r4, #20]
 80153f4:	425b      	negs	r3, r3
 80153f6:	61a3      	str	r3, [r4, #24]
 80153f8:	6923      	ldr	r3, [r4, #16]
 80153fa:	b943      	cbnz	r3, 801540e <__swsetup_r+0xc6>
 80153fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015400:	d1ba      	bne.n	8015378 <__swsetup_r+0x30>
 8015402:	bd70      	pop	{r4, r5, r6, pc}
 8015404:	0781      	lsls	r1, r0, #30
 8015406:	bf58      	it	pl
 8015408:	6963      	ldrpl	r3, [r4, #20]
 801540a:	60a3      	str	r3, [r4, #8]
 801540c:	e7f4      	b.n	80153f8 <__swsetup_r+0xb0>
 801540e:	2000      	movs	r0, #0
 8015410:	e7f7      	b.n	8015402 <__swsetup_r+0xba>
 8015412:	bf00      	nop
 8015414:	20000088 	.word	0x20000088
 8015418:	08016344 	.word	0x08016344
 801541c:	08016364 	.word	0x08016364
 8015420:	08016324 	.word	0x08016324

08015424 <__sflush_r>:
 8015424:	898a      	ldrh	r2, [r1, #12]
 8015426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801542a:	4605      	mov	r5, r0
 801542c:	0710      	lsls	r0, r2, #28
 801542e:	460c      	mov	r4, r1
 8015430:	d458      	bmi.n	80154e4 <__sflush_r+0xc0>
 8015432:	684b      	ldr	r3, [r1, #4]
 8015434:	2b00      	cmp	r3, #0
 8015436:	dc05      	bgt.n	8015444 <__sflush_r+0x20>
 8015438:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801543a:	2b00      	cmp	r3, #0
 801543c:	dc02      	bgt.n	8015444 <__sflush_r+0x20>
 801543e:	2000      	movs	r0, #0
 8015440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015444:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015446:	2e00      	cmp	r6, #0
 8015448:	d0f9      	beq.n	801543e <__sflush_r+0x1a>
 801544a:	2300      	movs	r3, #0
 801544c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015450:	682f      	ldr	r7, [r5, #0]
 8015452:	602b      	str	r3, [r5, #0]
 8015454:	d032      	beq.n	80154bc <__sflush_r+0x98>
 8015456:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015458:	89a3      	ldrh	r3, [r4, #12]
 801545a:	075a      	lsls	r2, r3, #29
 801545c:	d505      	bpl.n	801546a <__sflush_r+0x46>
 801545e:	6863      	ldr	r3, [r4, #4]
 8015460:	1ac0      	subs	r0, r0, r3
 8015462:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015464:	b10b      	cbz	r3, 801546a <__sflush_r+0x46>
 8015466:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015468:	1ac0      	subs	r0, r0, r3
 801546a:	2300      	movs	r3, #0
 801546c:	4602      	mov	r2, r0
 801546e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015470:	6a21      	ldr	r1, [r4, #32]
 8015472:	4628      	mov	r0, r5
 8015474:	47b0      	blx	r6
 8015476:	1c43      	adds	r3, r0, #1
 8015478:	89a3      	ldrh	r3, [r4, #12]
 801547a:	d106      	bne.n	801548a <__sflush_r+0x66>
 801547c:	6829      	ldr	r1, [r5, #0]
 801547e:	291d      	cmp	r1, #29
 8015480:	d82c      	bhi.n	80154dc <__sflush_r+0xb8>
 8015482:	4a2a      	ldr	r2, [pc, #168]	; (801552c <__sflush_r+0x108>)
 8015484:	40ca      	lsrs	r2, r1
 8015486:	07d6      	lsls	r6, r2, #31
 8015488:	d528      	bpl.n	80154dc <__sflush_r+0xb8>
 801548a:	2200      	movs	r2, #0
 801548c:	6062      	str	r2, [r4, #4]
 801548e:	04d9      	lsls	r1, r3, #19
 8015490:	6922      	ldr	r2, [r4, #16]
 8015492:	6022      	str	r2, [r4, #0]
 8015494:	d504      	bpl.n	80154a0 <__sflush_r+0x7c>
 8015496:	1c42      	adds	r2, r0, #1
 8015498:	d101      	bne.n	801549e <__sflush_r+0x7a>
 801549a:	682b      	ldr	r3, [r5, #0]
 801549c:	b903      	cbnz	r3, 80154a0 <__sflush_r+0x7c>
 801549e:	6560      	str	r0, [r4, #84]	; 0x54
 80154a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80154a2:	602f      	str	r7, [r5, #0]
 80154a4:	2900      	cmp	r1, #0
 80154a6:	d0ca      	beq.n	801543e <__sflush_r+0x1a>
 80154a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80154ac:	4299      	cmp	r1, r3
 80154ae:	d002      	beq.n	80154b6 <__sflush_r+0x92>
 80154b0:	4628      	mov	r0, r5
 80154b2:	f000 f9d5 	bl	8015860 <_free_r>
 80154b6:	2000      	movs	r0, #0
 80154b8:	6360      	str	r0, [r4, #52]	; 0x34
 80154ba:	e7c1      	b.n	8015440 <__sflush_r+0x1c>
 80154bc:	6a21      	ldr	r1, [r4, #32]
 80154be:	2301      	movs	r3, #1
 80154c0:	4628      	mov	r0, r5
 80154c2:	47b0      	blx	r6
 80154c4:	1c41      	adds	r1, r0, #1
 80154c6:	d1c7      	bne.n	8015458 <__sflush_r+0x34>
 80154c8:	682b      	ldr	r3, [r5, #0]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d0c4      	beq.n	8015458 <__sflush_r+0x34>
 80154ce:	2b1d      	cmp	r3, #29
 80154d0:	d001      	beq.n	80154d6 <__sflush_r+0xb2>
 80154d2:	2b16      	cmp	r3, #22
 80154d4:	d101      	bne.n	80154da <__sflush_r+0xb6>
 80154d6:	602f      	str	r7, [r5, #0]
 80154d8:	e7b1      	b.n	801543e <__sflush_r+0x1a>
 80154da:	89a3      	ldrh	r3, [r4, #12]
 80154dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80154e0:	81a3      	strh	r3, [r4, #12]
 80154e2:	e7ad      	b.n	8015440 <__sflush_r+0x1c>
 80154e4:	690f      	ldr	r7, [r1, #16]
 80154e6:	2f00      	cmp	r7, #0
 80154e8:	d0a9      	beq.n	801543e <__sflush_r+0x1a>
 80154ea:	0793      	lsls	r3, r2, #30
 80154ec:	680e      	ldr	r6, [r1, #0]
 80154ee:	bf08      	it	eq
 80154f0:	694b      	ldreq	r3, [r1, #20]
 80154f2:	600f      	str	r7, [r1, #0]
 80154f4:	bf18      	it	ne
 80154f6:	2300      	movne	r3, #0
 80154f8:	eba6 0807 	sub.w	r8, r6, r7
 80154fc:	608b      	str	r3, [r1, #8]
 80154fe:	f1b8 0f00 	cmp.w	r8, #0
 8015502:	dd9c      	ble.n	801543e <__sflush_r+0x1a>
 8015504:	6a21      	ldr	r1, [r4, #32]
 8015506:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015508:	4643      	mov	r3, r8
 801550a:	463a      	mov	r2, r7
 801550c:	4628      	mov	r0, r5
 801550e:	47b0      	blx	r6
 8015510:	2800      	cmp	r0, #0
 8015512:	dc06      	bgt.n	8015522 <__sflush_r+0xfe>
 8015514:	89a3      	ldrh	r3, [r4, #12]
 8015516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801551a:	81a3      	strh	r3, [r4, #12]
 801551c:	f04f 30ff 	mov.w	r0, #4294967295
 8015520:	e78e      	b.n	8015440 <__sflush_r+0x1c>
 8015522:	4407      	add	r7, r0
 8015524:	eba8 0800 	sub.w	r8, r8, r0
 8015528:	e7e9      	b.n	80154fe <__sflush_r+0xda>
 801552a:	bf00      	nop
 801552c:	20400001 	.word	0x20400001

08015530 <_fflush_r>:
 8015530:	b538      	push	{r3, r4, r5, lr}
 8015532:	690b      	ldr	r3, [r1, #16]
 8015534:	4605      	mov	r5, r0
 8015536:	460c      	mov	r4, r1
 8015538:	b913      	cbnz	r3, 8015540 <_fflush_r+0x10>
 801553a:	2500      	movs	r5, #0
 801553c:	4628      	mov	r0, r5
 801553e:	bd38      	pop	{r3, r4, r5, pc}
 8015540:	b118      	cbz	r0, 801554a <_fflush_r+0x1a>
 8015542:	6983      	ldr	r3, [r0, #24]
 8015544:	b90b      	cbnz	r3, 801554a <_fflush_r+0x1a>
 8015546:	f000 f887 	bl	8015658 <__sinit>
 801554a:	4b14      	ldr	r3, [pc, #80]	; (801559c <_fflush_r+0x6c>)
 801554c:	429c      	cmp	r4, r3
 801554e:	d11b      	bne.n	8015588 <_fflush_r+0x58>
 8015550:	686c      	ldr	r4, [r5, #4]
 8015552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015556:	2b00      	cmp	r3, #0
 8015558:	d0ef      	beq.n	801553a <_fflush_r+0xa>
 801555a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801555c:	07d0      	lsls	r0, r2, #31
 801555e:	d404      	bmi.n	801556a <_fflush_r+0x3a>
 8015560:	0599      	lsls	r1, r3, #22
 8015562:	d402      	bmi.n	801556a <_fflush_r+0x3a>
 8015564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015566:	f000 f915 	bl	8015794 <__retarget_lock_acquire_recursive>
 801556a:	4628      	mov	r0, r5
 801556c:	4621      	mov	r1, r4
 801556e:	f7ff ff59 	bl	8015424 <__sflush_r>
 8015572:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015574:	07da      	lsls	r2, r3, #31
 8015576:	4605      	mov	r5, r0
 8015578:	d4e0      	bmi.n	801553c <_fflush_r+0xc>
 801557a:	89a3      	ldrh	r3, [r4, #12]
 801557c:	059b      	lsls	r3, r3, #22
 801557e:	d4dd      	bmi.n	801553c <_fflush_r+0xc>
 8015580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015582:	f000 f908 	bl	8015796 <__retarget_lock_release_recursive>
 8015586:	e7d9      	b.n	801553c <_fflush_r+0xc>
 8015588:	4b05      	ldr	r3, [pc, #20]	; (80155a0 <_fflush_r+0x70>)
 801558a:	429c      	cmp	r4, r3
 801558c:	d101      	bne.n	8015592 <_fflush_r+0x62>
 801558e:	68ac      	ldr	r4, [r5, #8]
 8015590:	e7df      	b.n	8015552 <_fflush_r+0x22>
 8015592:	4b04      	ldr	r3, [pc, #16]	; (80155a4 <_fflush_r+0x74>)
 8015594:	429c      	cmp	r4, r3
 8015596:	bf08      	it	eq
 8015598:	68ec      	ldreq	r4, [r5, #12]
 801559a:	e7da      	b.n	8015552 <_fflush_r+0x22>
 801559c:	08016344 	.word	0x08016344
 80155a0:	08016364 	.word	0x08016364
 80155a4:	08016324 	.word	0x08016324

080155a8 <std>:
 80155a8:	2300      	movs	r3, #0
 80155aa:	b510      	push	{r4, lr}
 80155ac:	4604      	mov	r4, r0
 80155ae:	e9c0 3300 	strd	r3, r3, [r0]
 80155b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80155b6:	6083      	str	r3, [r0, #8]
 80155b8:	8181      	strh	r1, [r0, #12]
 80155ba:	6643      	str	r3, [r0, #100]	; 0x64
 80155bc:	81c2      	strh	r2, [r0, #14]
 80155be:	6183      	str	r3, [r0, #24]
 80155c0:	4619      	mov	r1, r3
 80155c2:	2208      	movs	r2, #8
 80155c4:	305c      	adds	r0, #92	; 0x5c
 80155c6:	f7ff fdc3 	bl	8015150 <memset>
 80155ca:	4b05      	ldr	r3, [pc, #20]	; (80155e0 <std+0x38>)
 80155cc:	6263      	str	r3, [r4, #36]	; 0x24
 80155ce:	4b05      	ldr	r3, [pc, #20]	; (80155e4 <std+0x3c>)
 80155d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80155d2:	4b05      	ldr	r3, [pc, #20]	; (80155e8 <std+0x40>)
 80155d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80155d6:	4b05      	ldr	r3, [pc, #20]	; (80155ec <std+0x44>)
 80155d8:	6224      	str	r4, [r4, #32]
 80155da:	6323      	str	r3, [r4, #48]	; 0x30
 80155dc:	bd10      	pop	{r4, pc}
 80155de:	bf00      	nop
 80155e0:	08015fb1 	.word	0x08015fb1
 80155e4:	08015fd3 	.word	0x08015fd3
 80155e8:	0801600b 	.word	0x0801600b
 80155ec:	0801602f 	.word	0x0801602f

080155f0 <_cleanup_r>:
 80155f0:	4901      	ldr	r1, [pc, #4]	; (80155f8 <_cleanup_r+0x8>)
 80155f2:	f000 b8af 	b.w	8015754 <_fwalk_reent>
 80155f6:	bf00      	nop
 80155f8:	08015531 	.word	0x08015531

080155fc <__sfmoreglue>:
 80155fc:	b570      	push	{r4, r5, r6, lr}
 80155fe:	1e4a      	subs	r2, r1, #1
 8015600:	2568      	movs	r5, #104	; 0x68
 8015602:	4355      	muls	r5, r2
 8015604:	460e      	mov	r6, r1
 8015606:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801560a:	f000 f979 	bl	8015900 <_malloc_r>
 801560e:	4604      	mov	r4, r0
 8015610:	b140      	cbz	r0, 8015624 <__sfmoreglue+0x28>
 8015612:	2100      	movs	r1, #0
 8015614:	e9c0 1600 	strd	r1, r6, [r0]
 8015618:	300c      	adds	r0, #12
 801561a:	60a0      	str	r0, [r4, #8]
 801561c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015620:	f7ff fd96 	bl	8015150 <memset>
 8015624:	4620      	mov	r0, r4
 8015626:	bd70      	pop	{r4, r5, r6, pc}

08015628 <__sfp_lock_acquire>:
 8015628:	4801      	ldr	r0, [pc, #4]	; (8015630 <__sfp_lock_acquire+0x8>)
 801562a:	f000 b8b3 	b.w	8015794 <__retarget_lock_acquire_recursive>
 801562e:	bf00      	nop
 8015630:	200074d8 	.word	0x200074d8

08015634 <__sfp_lock_release>:
 8015634:	4801      	ldr	r0, [pc, #4]	; (801563c <__sfp_lock_release+0x8>)
 8015636:	f000 b8ae 	b.w	8015796 <__retarget_lock_release_recursive>
 801563a:	bf00      	nop
 801563c:	200074d8 	.word	0x200074d8

08015640 <__sinit_lock_acquire>:
 8015640:	4801      	ldr	r0, [pc, #4]	; (8015648 <__sinit_lock_acquire+0x8>)
 8015642:	f000 b8a7 	b.w	8015794 <__retarget_lock_acquire_recursive>
 8015646:	bf00      	nop
 8015648:	200074d3 	.word	0x200074d3

0801564c <__sinit_lock_release>:
 801564c:	4801      	ldr	r0, [pc, #4]	; (8015654 <__sinit_lock_release+0x8>)
 801564e:	f000 b8a2 	b.w	8015796 <__retarget_lock_release_recursive>
 8015652:	bf00      	nop
 8015654:	200074d3 	.word	0x200074d3

08015658 <__sinit>:
 8015658:	b510      	push	{r4, lr}
 801565a:	4604      	mov	r4, r0
 801565c:	f7ff fff0 	bl	8015640 <__sinit_lock_acquire>
 8015660:	69a3      	ldr	r3, [r4, #24]
 8015662:	b11b      	cbz	r3, 801566c <__sinit+0x14>
 8015664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015668:	f7ff bff0 	b.w	801564c <__sinit_lock_release>
 801566c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015670:	6523      	str	r3, [r4, #80]	; 0x50
 8015672:	4b13      	ldr	r3, [pc, #76]	; (80156c0 <__sinit+0x68>)
 8015674:	4a13      	ldr	r2, [pc, #76]	; (80156c4 <__sinit+0x6c>)
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	62a2      	str	r2, [r4, #40]	; 0x28
 801567a:	42a3      	cmp	r3, r4
 801567c:	bf04      	itt	eq
 801567e:	2301      	moveq	r3, #1
 8015680:	61a3      	streq	r3, [r4, #24]
 8015682:	4620      	mov	r0, r4
 8015684:	f000 f820 	bl	80156c8 <__sfp>
 8015688:	6060      	str	r0, [r4, #4]
 801568a:	4620      	mov	r0, r4
 801568c:	f000 f81c 	bl	80156c8 <__sfp>
 8015690:	60a0      	str	r0, [r4, #8]
 8015692:	4620      	mov	r0, r4
 8015694:	f000 f818 	bl	80156c8 <__sfp>
 8015698:	2200      	movs	r2, #0
 801569a:	60e0      	str	r0, [r4, #12]
 801569c:	2104      	movs	r1, #4
 801569e:	6860      	ldr	r0, [r4, #4]
 80156a0:	f7ff ff82 	bl	80155a8 <std>
 80156a4:	68a0      	ldr	r0, [r4, #8]
 80156a6:	2201      	movs	r2, #1
 80156a8:	2109      	movs	r1, #9
 80156aa:	f7ff ff7d 	bl	80155a8 <std>
 80156ae:	68e0      	ldr	r0, [r4, #12]
 80156b0:	2202      	movs	r2, #2
 80156b2:	2112      	movs	r1, #18
 80156b4:	f7ff ff78 	bl	80155a8 <std>
 80156b8:	2301      	movs	r3, #1
 80156ba:	61a3      	str	r3, [r4, #24]
 80156bc:	e7d2      	b.n	8015664 <__sinit+0xc>
 80156be:	bf00      	nop
 80156c0:	08016320 	.word	0x08016320
 80156c4:	080155f1 	.word	0x080155f1

080156c8 <__sfp>:
 80156c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156ca:	4607      	mov	r7, r0
 80156cc:	f7ff ffac 	bl	8015628 <__sfp_lock_acquire>
 80156d0:	4b1e      	ldr	r3, [pc, #120]	; (801574c <__sfp+0x84>)
 80156d2:	681e      	ldr	r6, [r3, #0]
 80156d4:	69b3      	ldr	r3, [r6, #24]
 80156d6:	b913      	cbnz	r3, 80156de <__sfp+0x16>
 80156d8:	4630      	mov	r0, r6
 80156da:	f7ff ffbd 	bl	8015658 <__sinit>
 80156de:	3648      	adds	r6, #72	; 0x48
 80156e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80156e4:	3b01      	subs	r3, #1
 80156e6:	d503      	bpl.n	80156f0 <__sfp+0x28>
 80156e8:	6833      	ldr	r3, [r6, #0]
 80156ea:	b30b      	cbz	r3, 8015730 <__sfp+0x68>
 80156ec:	6836      	ldr	r6, [r6, #0]
 80156ee:	e7f7      	b.n	80156e0 <__sfp+0x18>
 80156f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80156f4:	b9d5      	cbnz	r5, 801572c <__sfp+0x64>
 80156f6:	4b16      	ldr	r3, [pc, #88]	; (8015750 <__sfp+0x88>)
 80156f8:	60e3      	str	r3, [r4, #12]
 80156fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80156fe:	6665      	str	r5, [r4, #100]	; 0x64
 8015700:	f000 f847 	bl	8015792 <__retarget_lock_init_recursive>
 8015704:	f7ff ff96 	bl	8015634 <__sfp_lock_release>
 8015708:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801570c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015710:	6025      	str	r5, [r4, #0]
 8015712:	61a5      	str	r5, [r4, #24]
 8015714:	2208      	movs	r2, #8
 8015716:	4629      	mov	r1, r5
 8015718:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801571c:	f7ff fd18 	bl	8015150 <memset>
 8015720:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015724:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015728:	4620      	mov	r0, r4
 801572a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801572c:	3468      	adds	r4, #104	; 0x68
 801572e:	e7d9      	b.n	80156e4 <__sfp+0x1c>
 8015730:	2104      	movs	r1, #4
 8015732:	4638      	mov	r0, r7
 8015734:	f7ff ff62 	bl	80155fc <__sfmoreglue>
 8015738:	4604      	mov	r4, r0
 801573a:	6030      	str	r0, [r6, #0]
 801573c:	2800      	cmp	r0, #0
 801573e:	d1d5      	bne.n	80156ec <__sfp+0x24>
 8015740:	f7ff ff78 	bl	8015634 <__sfp_lock_release>
 8015744:	230c      	movs	r3, #12
 8015746:	603b      	str	r3, [r7, #0]
 8015748:	e7ee      	b.n	8015728 <__sfp+0x60>
 801574a:	bf00      	nop
 801574c:	08016320 	.word	0x08016320
 8015750:	ffff0001 	.word	0xffff0001

08015754 <_fwalk_reent>:
 8015754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015758:	4606      	mov	r6, r0
 801575a:	4688      	mov	r8, r1
 801575c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015760:	2700      	movs	r7, #0
 8015762:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015766:	f1b9 0901 	subs.w	r9, r9, #1
 801576a:	d505      	bpl.n	8015778 <_fwalk_reent+0x24>
 801576c:	6824      	ldr	r4, [r4, #0]
 801576e:	2c00      	cmp	r4, #0
 8015770:	d1f7      	bne.n	8015762 <_fwalk_reent+0xe>
 8015772:	4638      	mov	r0, r7
 8015774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015778:	89ab      	ldrh	r3, [r5, #12]
 801577a:	2b01      	cmp	r3, #1
 801577c:	d907      	bls.n	801578e <_fwalk_reent+0x3a>
 801577e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015782:	3301      	adds	r3, #1
 8015784:	d003      	beq.n	801578e <_fwalk_reent+0x3a>
 8015786:	4629      	mov	r1, r5
 8015788:	4630      	mov	r0, r6
 801578a:	47c0      	blx	r8
 801578c:	4307      	orrs	r7, r0
 801578e:	3568      	adds	r5, #104	; 0x68
 8015790:	e7e9      	b.n	8015766 <_fwalk_reent+0x12>

08015792 <__retarget_lock_init_recursive>:
 8015792:	4770      	bx	lr

08015794 <__retarget_lock_acquire_recursive>:
 8015794:	4770      	bx	lr

08015796 <__retarget_lock_release_recursive>:
 8015796:	4770      	bx	lr

08015798 <__swhatbuf_r>:
 8015798:	b570      	push	{r4, r5, r6, lr}
 801579a:	460e      	mov	r6, r1
 801579c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157a0:	2900      	cmp	r1, #0
 80157a2:	b096      	sub	sp, #88	; 0x58
 80157a4:	4614      	mov	r4, r2
 80157a6:	461d      	mov	r5, r3
 80157a8:	da07      	bge.n	80157ba <__swhatbuf_r+0x22>
 80157aa:	2300      	movs	r3, #0
 80157ac:	602b      	str	r3, [r5, #0]
 80157ae:	89b3      	ldrh	r3, [r6, #12]
 80157b0:	061a      	lsls	r2, r3, #24
 80157b2:	d410      	bmi.n	80157d6 <__swhatbuf_r+0x3e>
 80157b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80157b8:	e00e      	b.n	80157d8 <__swhatbuf_r+0x40>
 80157ba:	466a      	mov	r2, sp
 80157bc:	f000 fc5e 	bl	801607c <_fstat_r>
 80157c0:	2800      	cmp	r0, #0
 80157c2:	dbf2      	blt.n	80157aa <__swhatbuf_r+0x12>
 80157c4:	9a01      	ldr	r2, [sp, #4]
 80157c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80157ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80157ce:	425a      	negs	r2, r3
 80157d0:	415a      	adcs	r2, r3
 80157d2:	602a      	str	r2, [r5, #0]
 80157d4:	e7ee      	b.n	80157b4 <__swhatbuf_r+0x1c>
 80157d6:	2340      	movs	r3, #64	; 0x40
 80157d8:	2000      	movs	r0, #0
 80157da:	6023      	str	r3, [r4, #0]
 80157dc:	b016      	add	sp, #88	; 0x58
 80157de:	bd70      	pop	{r4, r5, r6, pc}

080157e0 <__smakebuf_r>:
 80157e0:	898b      	ldrh	r3, [r1, #12]
 80157e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80157e4:	079d      	lsls	r5, r3, #30
 80157e6:	4606      	mov	r6, r0
 80157e8:	460c      	mov	r4, r1
 80157ea:	d507      	bpl.n	80157fc <__smakebuf_r+0x1c>
 80157ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80157f0:	6023      	str	r3, [r4, #0]
 80157f2:	6123      	str	r3, [r4, #16]
 80157f4:	2301      	movs	r3, #1
 80157f6:	6163      	str	r3, [r4, #20]
 80157f8:	b002      	add	sp, #8
 80157fa:	bd70      	pop	{r4, r5, r6, pc}
 80157fc:	ab01      	add	r3, sp, #4
 80157fe:	466a      	mov	r2, sp
 8015800:	f7ff ffca 	bl	8015798 <__swhatbuf_r>
 8015804:	9900      	ldr	r1, [sp, #0]
 8015806:	4605      	mov	r5, r0
 8015808:	4630      	mov	r0, r6
 801580a:	f000 f879 	bl	8015900 <_malloc_r>
 801580e:	b948      	cbnz	r0, 8015824 <__smakebuf_r+0x44>
 8015810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015814:	059a      	lsls	r2, r3, #22
 8015816:	d4ef      	bmi.n	80157f8 <__smakebuf_r+0x18>
 8015818:	f023 0303 	bic.w	r3, r3, #3
 801581c:	f043 0302 	orr.w	r3, r3, #2
 8015820:	81a3      	strh	r3, [r4, #12]
 8015822:	e7e3      	b.n	80157ec <__smakebuf_r+0xc>
 8015824:	4b0d      	ldr	r3, [pc, #52]	; (801585c <__smakebuf_r+0x7c>)
 8015826:	62b3      	str	r3, [r6, #40]	; 0x28
 8015828:	89a3      	ldrh	r3, [r4, #12]
 801582a:	6020      	str	r0, [r4, #0]
 801582c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015830:	81a3      	strh	r3, [r4, #12]
 8015832:	9b00      	ldr	r3, [sp, #0]
 8015834:	6163      	str	r3, [r4, #20]
 8015836:	9b01      	ldr	r3, [sp, #4]
 8015838:	6120      	str	r0, [r4, #16]
 801583a:	b15b      	cbz	r3, 8015854 <__smakebuf_r+0x74>
 801583c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015840:	4630      	mov	r0, r6
 8015842:	f000 fc2d 	bl	80160a0 <_isatty_r>
 8015846:	b128      	cbz	r0, 8015854 <__smakebuf_r+0x74>
 8015848:	89a3      	ldrh	r3, [r4, #12]
 801584a:	f023 0303 	bic.w	r3, r3, #3
 801584e:	f043 0301 	orr.w	r3, r3, #1
 8015852:	81a3      	strh	r3, [r4, #12]
 8015854:	89a0      	ldrh	r0, [r4, #12]
 8015856:	4305      	orrs	r5, r0
 8015858:	81a5      	strh	r5, [r4, #12]
 801585a:	e7cd      	b.n	80157f8 <__smakebuf_r+0x18>
 801585c:	080155f1 	.word	0x080155f1

08015860 <_free_r>:
 8015860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015862:	2900      	cmp	r1, #0
 8015864:	d048      	beq.n	80158f8 <_free_r+0x98>
 8015866:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801586a:	9001      	str	r0, [sp, #4]
 801586c:	2b00      	cmp	r3, #0
 801586e:	f1a1 0404 	sub.w	r4, r1, #4
 8015872:	bfb8      	it	lt
 8015874:	18e4      	addlt	r4, r4, r3
 8015876:	f000 fc35 	bl	80160e4 <__malloc_lock>
 801587a:	4a20      	ldr	r2, [pc, #128]	; (80158fc <_free_r+0x9c>)
 801587c:	9801      	ldr	r0, [sp, #4]
 801587e:	6813      	ldr	r3, [r2, #0]
 8015880:	4615      	mov	r5, r2
 8015882:	b933      	cbnz	r3, 8015892 <_free_r+0x32>
 8015884:	6063      	str	r3, [r4, #4]
 8015886:	6014      	str	r4, [r2, #0]
 8015888:	b003      	add	sp, #12
 801588a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801588e:	f000 bc2f 	b.w	80160f0 <__malloc_unlock>
 8015892:	42a3      	cmp	r3, r4
 8015894:	d90b      	bls.n	80158ae <_free_r+0x4e>
 8015896:	6821      	ldr	r1, [r4, #0]
 8015898:	1862      	adds	r2, r4, r1
 801589a:	4293      	cmp	r3, r2
 801589c:	bf04      	itt	eq
 801589e:	681a      	ldreq	r2, [r3, #0]
 80158a0:	685b      	ldreq	r3, [r3, #4]
 80158a2:	6063      	str	r3, [r4, #4]
 80158a4:	bf04      	itt	eq
 80158a6:	1852      	addeq	r2, r2, r1
 80158a8:	6022      	streq	r2, [r4, #0]
 80158aa:	602c      	str	r4, [r5, #0]
 80158ac:	e7ec      	b.n	8015888 <_free_r+0x28>
 80158ae:	461a      	mov	r2, r3
 80158b0:	685b      	ldr	r3, [r3, #4]
 80158b2:	b10b      	cbz	r3, 80158b8 <_free_r+0x58>
 80158b4:	42a3      	cmp	r3, r4
 80158b6:	d9fa      	bls.n	80158ae <_free_r+0x4e>
 80158b8:	6811      	ldr	r1, [r2, #0]
 80158ba:	1855      	adds	r5, r2, r1
 80158bc:	42a5      	cmp	r5, r4
 80158be:	d10b      	bne.n	80158d8 <_free_r+0x78>
 80158c0:	6824      	ldr	r4, [r4, #0]
 80158c2:	4421      	add	r1, r4
 80158c4:	1854      	adds	r4, r2, r1
 80158c6:	42a3      	cmp	r3, r4
 80158c8:	6011      	str	r1, [r2, #0]
 80158ca:	d1dd      	bne.n	8015888 <_free_r+0x28>
 80158cc:	681c      	ldr	r4, [r3, #0]
 80158ce:	685b      	ldr	r3, [r3, #4]
 80158d0:	6053      	str	r3, [r2, #4]
 80158d2:	4421      	add	r1, r4
 80158d4:	6011      	str	r1, [r2, #0]
 80158d6:	e7d7      	b.n	8015888 <_free_r+0x28>
 80158d8:	d902      	bls.n	80158e0 <_free_r+0x80>
 80158da:	230c      	movs	r3, #12
 80158dc:	6003      	str	r3, [r0, #0]
 80158de:	e7d3      	b.n	8015888 <_free_r+0x28>
 80158e0:	6825      	ldr	r5, [r4, #0]
 80158e2:	1961      	adds	r1, r4, r5
 80158e4:	428b      	cmp	r3, r1
 80158e6:	bf04      	itt	eq
 80158e8:	6819      	ldreq	r1, [r3, #0]
 80158ea:	685b      	ldreq	r3, [r3, #4]
 80158ec:	6063      	str	r3, [r4, #4]
 80158ee:	bf04      	itt	eq
 80158f0:	1949      	addeq	r1, r1, r5
 80158f2:	6021      	streq	r1, [r4, #0]
 80158f4:	6054      	str	r4, [r2, #4]
 80158f6:	e7c7      	b.n	8015888 <_free_r+0x28>
 80158f8:	b003      	add	sp, #12
 80158fa:	bd30      	pop	{r4, r5, pc}
 80158fc:	20007030 	.word	0x20007030

08015900 <_malloc_r>:
 8015900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015902:	1ccd      	adds	r5, r1, #3
 8015904:	f025 0503 	bic.w	r5, r5, #3
 8015908:	3508      	adds	r5, #8
 801590a:	2d0c      	cmp	r5, #12
 801590c:	bf38      	it	cc
 801590e:	250c      	movcc	r5, #12
 8015910:	2d00      	cmp	r5, #0
 8015912:	4606      	mov	r6, r0
 8015914:	db01      	blt.n	801591a <_malloc_r+0x1a>
 8015916:	42a9      	cmp	r1, r5
 8015918:	d903      	bls.n	8015922 <_malloc_r+0x22>
 801591a:	230c      	movs	r3, #12
 801591c:	6033      	str	r3, [r6, #0]
 801591e:	2000      	movs	r0, #0
 8015920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015922:	f000 fbdf 	bl	80160e4 <__malloc_lock>
 8015926:	4921      	ldr	r1, [pc, #132]	; (80159ac <_malloc_r+0xac>)
 8015928:	680a      	ldr	r2, [r1, #0]
 801592a:	4614      	mov	r4, r2
 801592c:	b99c      	cbnz	r4, 8015956 <_malloc_r+0x56>
 801592e:	4f20      	ldr	r7, [pc, #128]	; (80159b0 <_malloc_r+0xb0>)
 8015930:	683b      	ldr	r3, [r7, #0]
 8015932:	b923      	cbnz	r3, 801593e <_malloc_r+0x3e>
 8015934:	4621      	mov	r1, r4
 8015936:	4630      	mov	r0, r6
 8015938:	f000 fb2a 	bl	8015f90 <_sbrk_r>
 801593c:	6038      	str	r0, [r7, #0]
 801593e:	4629      	mov	r1, r5
 8015940:	4630      	mov	r0, r6
 8015942:	f000 fb25 	bl	8015f90 <_sbrk_r>
 8015946:	1c43      	adds	r3, r0, #1
 8015948:	d123      	bne.n	8015992 <_malloc_r+0x92>
 801594a:	230c      	movs	r3, #12
 801594c:	6033      	str	r3, [r6, #0]
 801594e:	4630      	mov	r0, r6
 8015950:	f000 fbce 	bl	80160f0 <__malloc_unlock>
 8015954:	e7e3      	b.n	801591e <_malloc_r+0x1e>
 8015956:	6823      	ldr	r3, [r4, #0]
 8015958:	1b5b      	subs	r3, r3, r5
 801595a:	d417      	bmi.n	801598c <_malloc_r+0x8c>
 801595c:	2b0b      	cmp	r3, #11
 801595e:	d903      	bls.n	8015968 <_malloc_r+0x68>
 8015960:	6023      	str	r3, [r4, #0]
 8015962:	441c      	add	r4, r3
 8015964:	6025      	str	r5, [r4, #0]
 8015966:	e004      	b.n	8015972 <_malloc_r+0x72>
 8015968:	6863      	ldr	r3, [r4, #4]
 801596a:	42a2      	cmp	r2, r4
 801596c:	bf0c      	ite	eq
 801596e:	600b      	streq	r3, [r1, #0]
 8015970:	6053      	strne	r3, [r2, #4]
 8015972:	4630      	mov	r0, r6
 8015974:	f000 fbbc 	bl	80160f0 <__malloc_unlock>
 8015978:	f104 000b 	add.w	r0, r4, #11
 801597c:	1d23      	adds	r3, r4, #4
 801597e:	f020 0007 	bic.w	r0, r0, #7
 8015982:	1ac2      	subs	r2, r0, r3
 8015984:	d0cc      	beq.n	8015920 <_malloc_r+0x20>
 8015986:	1a1b      	subs	r3, r3, r0
 8015988:	50a3      	str	r3, [r4, r2]
 801598a:	e7c9      	b.n	8015920 <_malloc_r+0x20>
 801598c:	4622      	mov	r2, r4
 801598e:	6864      	ldr	r4, [r4, #4]
 8015990:	e7cc      	b.n	801592c <_malloc_r+0x2c>
 8015992:	1cc4      	adds	r4, r0, #3
 8015994:	f024 0403 	bic.w	r4, r4, #3
 8015998:	42a0      	cmp	r0, r4
 801599a:	d0e3      	beq.n	8015964 <_malloc_r+0x64>
 801599c:	1a21      	subs	r1, r4, r0
 801599e:	4630      	mov	r0, r6
 80159a0:	f000 faf6 	bl	8015f90 <_sbrk_r>
 80159a4:	3001      	adds	r0, #1
 80159a6:	d1dd      	bne.n	8015964 <_malloc_r+0x64>
 80159a8:	e7cf      	b.n	801594a <_malloc_r+0x4a>
 80159aa:	bf00      	nop
 80159ac:	20007030 	.word	0x20007030
 80159b0:	20007034 	.word	0x20007034

080159b4 <__sfputc_r>:
 80159b4:	6893      	ldr	r3, [r2, #8]
 80159b6:	3b01      	subs	r3, #1
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	b410      	push	{r4}
 80159bc:	6093      	str	r3, [r2, #8]
 80159be:	da08      	bge.n	80159d2 <__sfputc_r+0x1e>
 80159c0:	6994      	ldr	r4, [r2, #24]
 80159c2:	42a3      	cmp	r3, r4
 80159c4:	db01      	blt.n	80159ca <__sfputc_r+0x16>
 80159c6:	290a      	cmp	r1, #10
 80159c8:	d103      	bne.n	80159d2 <__sfputc_r+0x1e>
 80159ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80159ce:	f7ff bc69 	b.w	80152a4 <__swbuf_r>
 80159d2:	6813      	ldr	r3, [r2, #0]
 80159d4:	1c58      	adds	r0, r3, #1
 80159d6:	6010      	str	r0, [r2, #0]
 80159d8:	7019      	strb	r1, [r3, #0]
 80159da:	4608      	mov	r0, r1
 80159dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80159e0:	4770      	bx	lr

080159e2 <__sfputs_r>:
 80159e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159e4:	4606      	mov	r6, r0
 80159e6:	460f      	mov	r7, r1
 80159e8:	4614      	mov	r4, r2
 80159ea:	18d5      	adds	r5, r2, r3
 80159ec:	42ac      	cmp	r4, r5
 80159ee:	d101      	bne.n	80159f4 <__sfputs_r+0x12>
 80159f0:	2000      	movs	r0, #0
 80159f2:	e007      	b.n	8015a04 <__sfputs_r+0x22>
 80159f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80159f8:	463a      	mov	r2, r7
 80159fa:	4630      	mov	r0, r6
 80159fc:	f7ff ffda 	bl	80159b4 <__sfputc_r>
 8015a00:	1c43      	adds	r3, r0, #1
 8015a02:	d1f3      	bne.n	80159ec <__sfputs_r+0xa>
 8015a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015a08 <_vfiprintf_r>:
 8015a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a0c:	460d      	mov	r5, r1
 8015a0e:	b09d      	sub	sp, #116	; 0x74
 8015a10:	4614      	mov	r4, r2
 8015a12:	4698      	mov	r8, r3
 8015a14:	4606      	mov	r6, r0
 8015a16:	b118      	cbz	r0, 8015a20 <_vfiprintf_r+0x18>
 8015a18:	6983      	ldr	r3, [r0, #24]
 8015a1a:	b90b      	cbnz	r3, 8015a20 <_vfiprintf_r+0x18>
 8015a1c:	f7ff fe1c 	bl	8015658 <__sinit>
 8015a20:	4b89      	ldr	r3, [pc, #548]	; (8015c48 <_vfiprintf_r+0x240>)
 8015a22:	429d      	cmp	r5, r3
 8015a24:	d11b      	bne.n	8015a5e <_vfiprintf_r+0x56>
 8015a26:	6875      	ldr	r5, [r6, #4]
 8015a28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015a2a:	07d9      	lsls	r1, r3, #31
 8015a2c:	d405      	bmi.n	8015a3a <_vfiprintf_r+0x32>
 8015a2e:	89ab      	ldrh	r3, [r5, #12]
 8015a30:	059a      	lsls	r2, r3, #22
 8015a32:	d402      	bmi.n	8015a3a <_vfiprintf_r+0x32>
 8015a34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015a36:	f7ff fead 	bl	8015794 <__retarget_lock_acquire_recursive>
 8015a3a:	89ab      	ldrh	r3, [r5, #12]
 8015a3c:	071b      	lsls	r3, r3, #28
 8015a3e:	d501      	bpl.n	8015a44 <_vfiprintf_r+0x3c>
 8015a40:	692b      	ldr	r3, [r5, #16]
 8015a42:	b9eb      	cbnz	r3, 8015a80 <_vfiprintf_r+0x78>
 8015a44:	4629      	mov	r1, r5
 8015a46:	4630      	mov	r0, r6
 8015a48:	f7ff fc7e 	bl	8015348 <__swsetup_r>
 8015a4c:	b1c0      	cbz	r0, 8015a80 <_vfiprintf_r+0x78>
 8015a4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015a50:	07dc      	lsls	r4, r3, #31
 8015a52:	d50e      	bpl.n	8015a72 <_vfiprintf_r+0x6a>
 8015a54:	f04f 30ff 	mov.w	r0, #4294967295
 8015a58:	b01d      	add	sp, #116	; 0x74
 8015a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a5e:	4b7b      	ldr	r3, [pc, #492]	; (8015c4c <_vfiprintf_r+0x244>)
 8015a60:	429d      	cmp	r5, r3
 8015a62:	d101      	bne.n	8015a68 <_vfiprintf_r+0x60>
 8015a64:	68b5      	ldr	r5, [r6, #8]
 8015a66:	e7df      	b.n	8015a28 <_vfiprintf_r+0x20>
 8015a68:	4b79      	ldr	r3, [pc, #484]	; (8015c50 <_vfiprintf_r+0x248>)
 8015a6a:	429d      	cmp	r5, r3
 8015a6c:	bf08      	it	eq
 8015a6e:	68f5      	ldreq	r5, [r6, #12]
 8015a70:	e7da      	b.n	8015a28 <_vfiprintf_r+0x20>
 8015a72:	89ab      	ldrh	r3, [r5, #12]
 8015a74:	0598      	lsls	r0, r3, #22
 8015a76:	d4ed      	bmi.n	8015a54 <_vfiprintf_r+0x4c>
 8015a78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015a7a:	f7ff fe8c 	bl	8015796 <__retarget_lock_release_recursive>
 8015a7e:	e7e9      	b.n	8015a54 <_vfiprintf_r+0x4c>
 8015a80:	2300      	movs	r3, #0
 8015a82:	9309      	str	r3, [sp, #36]	; 0x24
 8015a84:	2320      	movs	r3, #32
 8015a86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015a8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8015a8e:	2330      	movs	r3, #48	; 0x30
 8015a90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015c54 <_vfiprintf_r+0x24c>
 8015a94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015a98:	f04f 0901 	mov.w	r9, #1
 8015a9c:	4623      	mov	r3, r4
 8015a9e:	469a      	mov	sl, r3
 8015aa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015aa4:	b10a      	cbz	r2, 8015aaa <_vfiprintf_r+0xa2>
 8015aa6:	2a25      	cmp	r2, #37	; 0x25
 8015aa8:	d1f9      	bne.n	8015a9e <_vfiprintf_r+0x96>
 8015aaa:	ebba 0b04 	subs.w	fp, sl, r4
 8015aae:	d00b      	beq.n	8015ac8 <_vfiprintf_r+0xc0>
 8015ab0:	465b      	mov	r3, fp
 8015ab2:	4622      	mov	r2, r4
 8015ab4:	4629      	mov	r1, r5
 8015ab6:	4630      	mov	r0, r6
 8015ab8:	f7ff ff93 	bl	80159e2 <__sfputs_r>
 8015abc:	3001      	adds	r0, #1
 8015abe:	f000 80aa 	beq.w	8015c16 <_vfiprintf_r+0x20e>
 8015ac2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015ac4:	445a      	add	r2, fp
 8015ac6:	9209      	str	r2, [sp, #36]	; 0x24
 8015ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	f000 80a2 	beq.w	8015c16 <_vfiprintf_r+0x20e>
 8015ad2:	2300      	movs	r3, #0
 8015ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8015ad8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015adc:	f10a 0a01 	add.w	sl, sl, #1
 8015ae0:	9304      	str	r3, [sp, #16]
 8015ae2:	9307      	str	r3, [sp, #28]
 8015ae4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015ae8:	931a      	str	r3, [sp, #104]	; 0x68
 8015aea:	4654      	mov	r4, sl
 8015aec:	2205      	movs	r2, #5
 8015aee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015af2:	4858      	ldr	r0, [pc, #352]	; (8015c54 <_vfiprintf_r+0x24c>)
 8015af4:	f7ea fb74 	bl	80001e0 <memchr>
 8015af8:	9a04      	ldr	r2, [sp, #16]
 8015afa:	b9d8      	cbnz	r0, 8015b34 <_vfiprintf_r+0x12c>
 8015afc:	06d1      	lsls	r1, r2, #27
 8015afe:	bf44      	itt	mi
 8015b00:	2320      	movmi	r3, #32
 8015b02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015b06:	0713      	lsls	r3, r2, #28
 8015b08:	bf44      	itt	mi
 8015b0a:	232b      	movmi	r3, #43	; 0x2b
 8015b0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015b10:	f89a 3000 	ldrb.w	r3, [sl]
 8015b14:	2b2a      	cmp	r3, #42	; 0x2a
 8015b16:	d015      	beq.n	8015b44 <_vfiprintf_r+0x13c>
 8015b18:	9a07      	ldr	r2, [sp, #28]
 8015b1a:	4654      	mov	r4, sl
 8015b1c:	2000      	movs	r0, #0
 8015b1e:	f04f 0c0a 	mov.w	ip, #10
 8015b22:	4621      	mov	r1, r4
 8015b24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015b28:	3b30      	subs	r3, #48	; 0x30
 8015b2a:	2b09      	cmp	r3, #9
 8015b2c:	d94e      	bls.n	8015bcc <_vfiprintf_r+0x1c4>
 8015b2e:	b1b0      	cbz	r0, 8015b5e <_vfiprintf_r+0x156>
 8015b30:	9207      	str	r2, [sp, #28]
 8015b32:	e014      	b.n	8015b5e <_vfiprintf_r+0x156>
 8015b34:	eba0 0308 	sub.w	r3, r0, r8
 8015b38:	fa09 f303 	lsl.w	r3, r9, r3
 8015b3c:	4313      	orrs	r3, r2
 8015b3e:	9304      	str	r3, [sp, #16]
 8015b40:	46a2      	mov	sl, r4
 8015b42:	e7d2      	b.n	8015aea <_vfiprintf_r+0xe2>
 8015b44:	9b03      	ldr	r3, [sp, #12]
 8015b46:	1d19      	adds	r1, r3, #4
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	9103      	str	r1, [sp, #12]
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	bfbb      	ittet	lt
 8015b50:	425b      	neglt	r3, r3
 8015b52:	f042 0202 	orrlt.w	r2, r2, #2
 8015b56:	9307      	strge	r3, [sp, #28]
 8015b58:	9307      	strlt	r3, [sp, #28]
 8015b5a:	bfb8      	it	lt
 8015b5c:	9204      	strlt	r2, [sp, #16]
 8015b5e:	7823      	ldrb	r3, [r4, #0]
 8015b60:	2b2e      	cmp	r3, #46	; 0x2e
 8015b62:	d10c      	bne.n	8015b7e <_vfiprintf_r+0x176>
 8015b64:	7863      	ldrb	r3, [r4, #1]
 8015b66:	2b2a      	cmp	r3, #42	; 0x2a
 8015b68:	d135      	bne.n	8015bd6 <_vfiprintf_r+0x1ce>
 8015b6a:	9b03      	ldr	r3, [sp, #12]
 8015b6c:	1d1a      	adds	r2, r3, #4
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	9203      	str	r2, [sp, #12]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	bfb8      	it	lt
 8015b76:	f04f 33ff 	movlt.w	r3, #4294967295
 8015b7a:	3402      	adds	r4, #2
 8015b7c:	9305      	str	r3, [sp, #20]
 8015b7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015c64 <_vfiprintf_r+0x25c>
 8015b82:	7821      	ldrb	r1, [r4, #0]
 8015b84:	2203      	movs	r2, #3
 8015b86:	4650      	mov	r0, sl
 8015b88:	f7ea fb2a 	bl	80001e0 <memchr>
 8015b8c:	b140      	cbz	r0, 8015ba0 <_vfiprintf_r+0x198>
 8015b8e:	2340      	movs	r3, #64	; 0x40
 8015b90:	eba0 000a 	sub.w	r0, r0, sl
 8015b94:	fa03 f000 	lsl.w	r0, r3, r0
 8015b98:	9b04      	ldr	r3, [sp, #16]
 8015b9a:	4303      	orrs	r3, r0
 8015b9c:	3401      	adds	r4, #1
 8015b9e:	9304      	str	r3, [sp, #16]
 8015ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ba4:	482c      	ldr	r0, [pc, #176]	; (8015c58 <_vfiprintf_r+0x250>)
 8015ba6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015baa:	2206      	movs	r2, #6
 8015bac:	f7ea fb18 	bl	80001e0 <memchr>
 8015bb0:	2800      	cmp	r0, #0
 8015bb2:	d03f      	beq.n	8015c34 <_vfiprintf_r+0x22c>
 8015bb4:	4b29      	ldr	r3, [pc, #164]	; (8015c5c <_vfiprintf_r+0x254>)
 8015bb6:	bb1b      	cbnz	r3, 8015c00 <_vfiprintf_r+0x1f8>
 8015bb8:	9b03      	ldr	r3, [sp, #12]
 8015bba:	3307      	adds	r3, #7
 8015bbc:	f023 0307 	bic.w	r3, r3, #7
 8015bc0:	3308      	adds	r3, #8
 8015bc2:	9303      	str	r3, [sp, #12]
 8015bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bc6:	443b      	add	r3, r7
 8015bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8015bca:	e767      	b.n	8015a9c <_vfiprintf_r+0x94>
 8015bcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8015bd0:	460c      	mov	r4, r1
 8015bd2:	2001      	movs	r0, #1
 8015bd4:	e7a5      	b.n	8015b22 <_vfiprintf_r+0x11a>
 8015bd6:	2300      	movs	r3, #0
 8015bd8:	3401      	adds	r4, #1
 8015bda:	9305      	str	r3, [sp, #20]
 8015bdc:	4619      	mov	r1, r3
 8015bde:	f04f 0c0a 	mov.w	ip, #10
 8015be2:	4620      	mov	r0, r4
 8015be4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015be8:	3a30      	subs	r2, #48	; 0x30
 8015bea:	2a09      	cmp	r2, #9
 8015bec:	d903      	bls.n	8015bf6 <_vfiprintf_r+0x1ee>
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d0c5      	beq.n	8015b7e <_vfiprintf_r+0x176>
 8015bf2:	9105      	str	r1, [sp, #20]
 8015bf4:	e7c3      	b.n	8015b7e <_vfiprintf_r+0x176>
 8015bf6:	fb0c 2101 	mla	r1, ip, r1, r2
 8015bfa:	4604      	mov	r4, r0
 8015bfc:	2301      	movs	r3, #1
 8015bfe:	e7f0      	b.n	8015be2 <_vfiprintf_r+0x1da>
 8015c00:	ab03      	add	r3, sp, #12
 8015c02:	9300      	str	r3, [sp, #0]
 8015c04:	462a      	mov	r2, r5
 8015c06:	4b16      	ldr	r3, [pc, #88]	; (8015c60 <_vfiprintf_r+0x258>)
 8015c08:	a904      	add	r1, sp, #16
 8015c0a:	4630      	mov	r0, r6
 8015c0c:	f3af 8000 	nop.w
 8015c10:	4607      	mov	r7, r0
 8015c12:	1c78      	adds	r0, r7, #1
 8015c14:	d1d6      	bne.n	8015bc4 <_vfiprintf_r+0x1bc>
 8015c16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015c18:	07d9      	lsls	r1, r3, #31
 8015c1a:	d405      	bmi.n	8015c28 <_vfiprintf_r+0x220>
 8015c1c:	89ab      	ldrh	r3, [r5, #12]
 8015c1e:	059a      	lsls	r2, r3, #22
 8015c20:	d402      	bmi.n	8015c28 <_vfiprintf_r+0x220>
 8015c22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015c24:	f7ff fdb7 	bl	8015796 <__retarget_lock_release_recursive>
 8015c28:	89ab      	ldrh	r3, [r5, #12]
 8015c2a:	065b      	lsls	r3, r3, #25
 8015c2c:	f53f af12 	bmi.w	8015a54 <_vfiprintf_r+0x4c>
 8015c30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015c32:	e711      	b.n	8015a58 <_vfiprintf_r+0x50>
 8015c34:	ab03      	add	r3, sp, #12
 8015c36:	9300      	str	r3, [sp, #0]
 8015c38:	462a      	mov	r2, r5
 8015c3a:	4b09      	ldr	r3, [pc, #36]	; (8015c60 <_vfiprintf_r+0x258>)
 8015c3c:	a904      	add	r1, sp, #16
 8015c3e:	4630      	mov	r0, r6
 8015c40:	f000 f880 	bl	8015d44 <_printf_i>
 8015c44:	e7e4      	b.n	8015c10 <_vfiprintf_r+0x208>
 8015c46:	bf00      	nop
 8015c48:	08016344 	.word	0x08016344
 8015c4c:	08016364 	.word	0x08016364
 8015c50:	08016324 	.word	0x08016324
 8015c54:	08016384 	.word	0x08016384
 8015c58:	0801638e 	.word	0x0801638e
 8015c5c:	00000000 	.word	0x00000000
 8015c60:	080159e3 	.word	0x080159e3
 8015c64:	0801638a 	.word	0x0801638a

08015c68 <_printf_common>:
 8015c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c6c:	4616      	mov	r6, r2
 8015c6e:	4699      	mov	r9, r3
 8015c70:	688a      	ldr	r2, [r1, #8]
 8015c72:	690b      	ldr	r3, [r1, #16]
 8015c74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015c78:	4293      	cmp	r3, r2
 8015c7a:	bfb8      	it	lt
 8015c7c:	4613      	movlt	r3, r2
 8015c7e:	6033      	str	r3, [r6, #0]
 8015c80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015c84:	4607      	mov	r7, r0
 8015c86:	460c      	mov	r4, r1
 8015c88:	b10a      	cbz	r2, 8015c8e <_printf_common+0x26>
 8015c8a:	3301      	adds	r3, #1
 8015c8c:	6033      	str	r3, [r6, #0]
 8015c8e:	6823      	ldr	r3, [r4, #0]
 8015c90:	0699      	lsls	r1, r3, #26
 8015c92:	bf42      	ittt	mi
 8015c94:	6833      	ldrmi	r3, [r6, #0]
 8015c96:	3302      	addmi	r3, #2
 8015c98:	6033      	strmi	r3, [r6, #0]
 8015c9a:	6825      	ldr	r5, [r4, #0]
 8015c9c:	f015 0506 	ands.w	r5, r5, #6
 8015ca0:	d106      	bne.n	8015cb0 <_printf_common+0x48>
 8015ca2:	f104 0a19 	add.w	sl, r4, #25
 8015ca6:	68e3      	ldr	r3, [r4, #12]
 8015ca8:	6832      	ldr	r2, [r6, #0]
 8015caa:	1a9b      	subs	r3, r3, r2
 8015cac:	42ab      	cmp	r3, r5
 8015cae:	dc26      	bgt.n	8015cfe <_printf_common+0x96>
 8015cb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015cb4:	1e13      	subs	r3, r2, #0
 8015cb6:	6822      	ldr	r2, [r4, #0]
 8015cb8:	bf18      	it	ne
 8015cba:	2301      	movne	r3, #1
 8015cbc:	0692      	lsls	r2, r2, #26
 8015cbe:	d42b      	bmi.n	8015d18 <_printf_common+0xb0>
 8015cc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015cc4:	4649      	mov	r1, r9
 8015cc6:	4638      	mov	r0, r7
 8015cc8:	47c0      	blx	r8
 8015cca:	3001      	adds	r0, #1
 8015ccc:	d01e      	beq.n	8015d0c <_printf_common+0xa4>
 8015cce:	6823      	ldr	r3, [r4, #0]
 8015cd0:	68e5      	ldr	r5, [r4, #12]
 8015cd2:	6832      	ldr	r2, [r6, #0]
 8015cd4:	f003 0306 	and.w	r3, r3, #6
 8015cd8:	2b04      	cmp	r3, #4
 8015cda:	bf08      	it	eq
 8015cdc:	1aad      	subeq	r5, r5, r2
 8015cde:	68a3      	ldr	r3, [r4, #8]
 8015ce0:	6922      	ldr	r2, [r4, #16]
 8015ce2:	bf0c      	ite	eq
 8015ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015ce8:	2500      	movne	r5, #0
 8015cea:	4293      	cmp	r3, r2
 8015cec:	bfc4      	itt	gt
 8015cee:	1a9b      	subgt	r3, r3, r2
 8015cf0:	18ed      	addgt	r5, r5, r3
 8015cf2:	2600      	movs	r6, #0
 8015cf4:	341a      	adds	r4, #26
 8015cf6:	42b5      	cmp	r5, r6
 8015cf8:	d11a      	bne.n	8015d30 <_printf_common+0xc8>
 8015cfa:	2000      	movs	r0, #0
 8015cfc:	e008      	b.n	8015d10 <_printf_common+0xa8>
 8015cfe:	2301      	movs	r3, #1
 8015d00:	4652      	mov	r2, sl
 8015d02:	4649      	mov	r1, r9
 8015d04:	4638      	mov	r0, r7
 8015d06:	47c0      	blx	r8
 8015d08:	3001      	adds	r0, #1
 8015d0a:	d103      	bne.n	8015d14 <_printf_common+0xac>
 8015d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8015d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d14:	3501      	adds	r5, #1
 8015d16:	e7c6      	b.n	8015ca6 <_printf_common+0x3e>
 8015d18:	18e1      	adds	r1, r4, r3
 8015d1a:	1c5a      	adds	r2, r3, #1
 8015d1c:	2030      	movs	r0, #48	; 0x30
 8015d1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015d22:	4422      	add	r2, r4
 8015d24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015d28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015d2c:	3302      	adds	r3, #2
 8015d2e:	e7c7      	b.n	8015cc0 <_printf_common+0x58>
 8015d30:	2301      	movs	r3, #1
 8015d32:	4622      	mov	r2, r4
 8015d34:	4649      	mov	r1, r9
 8015d36:	4638      	mov	r0, r7
 8015d38:	47c0      	blx	r8
 8015d3a:	3001      	adds	r0, #1
 8015d3c:	d0e6      	beq.n	8015d0c <_printf_common+0xa4>
 8015d3e:	3601      	adds	r6, #1
 8015d40:	e7d9      	b.n	8015cf6 <_printf_common+0x8e>
	...

08015d44 <_printf_i>:
 8015d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015d48:	460c      	mov	r4, r1
 8015d4a:	4691      	mov	r9, r2
 8015d4c:	7e27      	ldrb	r7, [r4, #24]
 8015d4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015d50:	2f78      	cmp	r7, #120	; 0x78
 8015d52:	4680      	mov	r8, r0
 8015d54:	469a      	mov	sl, r3
 8015d56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015d5a:	d807      	bhi.n	8015d6c <_printf_i+0x28>
 8015d5c:	2f62      	cmp	r7, #98	; 0x62
 8015d5e:	d80a      	bhi.n	8015d76 <_printf_i+0x32>
 8015d60:	2f00      	cmp	r7, #0
 8015d62:	f000 80d8 	beq.w	8015f16 <_printf_i+0x1d2>
 8015d66:	2f58      	cmp	r7, #88	; 0x58
 8015d68:	f000 80a3 	beq.w	8015eb2 <_printf_i+0x16e>
 8015d6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015d70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015d74:	e03a      	b.n	8015dec <_printf_i+0xa8>
 8015d76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015d7a:	2b15      	cmp	r3, #21
 8015d7c:	d8f6      	bhi.n	8015d6c <_printf_i+0x28>
 8015d7e:	a001      	add	r0, pc, #4	; (adr r0, 8015d84 <_printf_i+0x40>)
 8015d80:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8015d84:	08015ddd 	.word	0x08015ddd
 8015d88:	08015df1 	.word	0x08015df1
 8015d8c:	08015d6d 	.word	0x08015d6d
 8015d90:	08015d6d 	.word	0x08015d6d
 8015d94:	08015d6d 	.word	0x08015d6d
 8015d98:	08015d6d 	.word	0x08015d6d
 8015d9c:	08015df1 	.word	0x08015df1
 8015da0:	08015d6d 	.word	0x08015d6d
 8015da4:	08015d6d 	.word	0x08015d6d
 8015da8:	08015d6d 	.word	0x08015d6d
 8015dac:	08015d6d 	.word	0x08015d6d
 8015db0:	08015efd 	.word	0x08015efd
 8015db4:	08015e21 	.word	0x08015e21
 8015db8:	08015edf 	.word	0x08015edf
 8015dbc:	08015d6d 	.word	0x08015d6d
 8015dc0:	08015d6d 	.word	0x08015d6d
 8015dc4:	08015f1f 	.word	0x08015f1f
 8015dc8:	08015d6d 	.word	0x08015d6d
 8015dcc:	08015e21 	.word	0x08015e21
 8015dd0:	08015d6d 	.word	0x08015d6d
 8015dd4:	08015d6d 	.word	0x08015d6d
 8015dd8:	08015ee7 	.word	0x08015ee7
 8015ddc:	680b      	ldr	r3, [r1, #0]
 8015dde:	1d1a      	adds	r2, r3, #4
 8015de0:	681b      	ldr	r3, [r3, #0]
 8015de2:	600a      	str	r2, [r1, #0]
 8015de4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015de8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015dec:	2301      	movs	r3, #1
 8015dee:	e0a3      	b.n	8015f38 <_printf_i+0x1f4>
 8015df0:	6825      	ldr	r5, [r4, #0]
 8015df2:	6808      	ldr	r0, [r1, #0]
 8015df4:	062e      	lsls	r6, r5, #24
 8015df6:	f100 0304 	add.w	r3, r0, #4
 8015dfa:	d50a      	bpl.n	8015e12 <_printf_i+0xce>
 8015dfc:	6805      	ldr	r5, [r0, #0]
 8015dfe:	600b      	str	r3, [r1, #0]
 8015e00:	2d00      	cmp	r5, #0
 8015e02:	da03      	bge.n	8015e0c <_printf_i+0xc8>
 8015e04:	232d      	movs	r3, #45	; 0x2d
 8015e06:	426d      	negs	r5, r5
 8015e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015e0c:	485e      	ldr	r0, [pc, #376]	; (8015f88 <_printf_i+0x244>)
 8015e0e:	230a      	movs	r3, #10
 8015e10:	e019      	b.n	8015e46 <_printf_i+0x102>
 8015e12:	f015 0f40 	tst.w	r5, #64	; 0x40
 8015e16:	6805      	ldr	r5, [r0, #0]
 8015e18:	600b      	str	r3, [r1, #0]
 8015e1a:	bf18      	it	ne
 8015e1c:	b22d      	sxthne	r5, r5
 8015e1e:	e7ef      	b.n	8015e00 <_printf_i+0xbc>
 8015e20:	680b      	ldr	r3, [r1, #0]
 8015e22:	6825      	ldr	r5, [r4, #0]
 8015e24:	1d18      	adds	r0, r3, #4
 8015e26:	6008      	str	r0, [r1, #0]
 8015e28:	0628      	lsls	r0, r5, #24
 8015e2a:	d501      	bpl.n	8015e30 <_printf_i+0xec>
 8015e2c:	681d      	ldr	r5, [r3, #0]
 8015e2e:	e002      	b.n	8015e36 <_printf_i+0xf2>
 8015e30:	0669      	lsls	r1, r5, #25
 8015e32:	d5fb      	bpl.n	8015e2c <_printf_i+0xe8>
 8015e34:	881d      	ldrh	r5, [r3, #0]
 8015e36:	4854      	ldr	r0, [pc, #336]	; (8015f88 <_printf_i+0x244>)
 8015e38:	2f6f      	cmp	r7, #111	; 0x6f
 8015e3a:	bf0c      	ite	eq
 8015e3c:	2308      	moveq	r3, #8
 8015e3e:	230a      	movne	r3, #10
 8015e40:	2100      	movs	r1, #0
 8015e42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015e46:	6866      	ldr	r6, [r4, #4]
 8015e48:	60a6      	str	r6, [r4, #8]
 8015e4a:	2e00      	cmp	r6, #0
 8015e4c:	bfa2      	ittt	ge
 8015e4e:	6821      	ldrge	r1, [r4, #0]
 8015e50:	f021 0104 	bicge.w	r1, r1, #4
 8015e54:	6021      	strge	r1, [r4, #0]
 8015e56:	b90d      	cbnz	r5, 8015e5c <_printf_i+0x118>
 8015e58:	2e00      	cmp	r6, #0
 8015e5a:	d04d      	beq.n	8015ef8 <_printf_i+0x1b4>
 8015e5c:	4616      	mov	r6, r2
 8015e5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8015e62:	fb03 5711 	mls	r7, r3, r1, r5
 8015e66:	5dc7      	ldrb	r7, [r0, r7]
 8015e68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015e6c:	462f      	mov	r7, r5
 8015e6e:	42bb      	cmp	r3, r7
 8015e70:	460d      	mov	r5, r1
 8015e72:	d9f4      	bls.n	8015e5e <_printf_i+0x11a>
 8015e74:	2b08      	cmp	r3, #8
 8015e76:	d10b      	bne.n	8015e90 <_printf_i+0x14c>
 8015e78:	6823      	ldr	r3, [r4, #0]
 8015e7a:	07df      	lsls	r7, r3, #31
 8015e7c:	d508      	bpl.n	8015e90 <_printf_i+0x14c>
 8015e7e:	6923      	ldr	r3, [r4, #16]
 8015e80:	6861      	ldr	r1, [r4, #4]
 8015e82:	4299      	cmp	r1, r3
 8015e84:	bfde      	ittt	le
 8015e86:	2330      	movle	r3, #48	; 0x30
 8015e88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015e8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015e90:	1b92      	subs	r2, r2, r6
 8015e92:	6122      	str	r2, [r4, #16]
 8015e94:	f8cd a000 	str.w	sl, [sp]
 8015e98:	464b      	mov	r3, r9
 8015e9a:	aa03      	add	r2, sp, #12
 8015e9c:	4621      	mov	r1, r4
 8015e9e:	4640      	mov	r0, r8
 8015ea0:	f7ff fee2 	bl	8015c68 <_printf_common>
 8015ea4:	3001      	adds	r0, #1
 8015ea6:	d14c      	bne.n	8015f42 <_printf_i+0x1fe>
 8015ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8015eac:	b004      	add	sp, #16
 8015eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015eb2:	4835      	ldr	r0, [pc, #212]	; (8015f88 <_printf_i+0x244>)
 8015eb4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015eb8:	6823      	ldr	r3, [r4, #0]
 8015eba:	680e      	ldr	r6, [r1, #0]
 8015ebc:	061f      	lsls	r7, r3, #24
 8015ebe:	f856 5b04 	ldr.w	r5, [r6], #4
 8015ec2:	600e      	str	r6, [r1, #0]
 8015ec4:	d514      	bpl.n	8015ef0 <_printf_i+0x1ac>
 8015ec6:	07d9      	lsls	r1, r3, #31
 8015ec8:	bf44      	itt	mi
 8015eca:	f043 0320 	orrmi.w	r3, r3, #32
 8015ece:	6023      	strmi	r3, [r4, #0]
 8015ed0:	b91d      	cbnz	r5, 8015eda <_printf_i+0x196>
 8015ed2:	6823      	ldr	r3, [r4, #0]
 8015ed4:	f023 0320 	bic.w	r3, r3, #32
 8015ed8:	6023      	str	r3, [r4, #0]
 8015eda:	2310      	movs	r3, #16
 8015edc:	e7b0      	b.n	8015e40 <_printf_i+0xfc>
 8015ede:	6823      	ldr	r3, [r4, #0]
 8015ee0:	f043 0320 	orr.w	r3, r3, #32
 8015ee4:	6023      	str	r3, [r4, #0]
 8015ee6:	2378      	movs	r3, #120	; 0x78
 8015ee8:	4828      	ldr	r0, [pc, #160]	; (8015f8c <_printf_i+0x248>)
 8015eea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015eee:	e7e3      	b.n	8015eb8 <_printf_i+0x174>
 8015ef0:	065e      	lsls	r6, r3, #25
 8015ef2:	bf48      	it	mi
 8015ef4:	b2ad      	uxthmi	r5, r5
 8015ef6:	e7e6      	b.n	8015ec6 <_printf_i+0x182>
 8015ef8:	4616      	mov	r6, r2
 8015efa:	e7bb      	b.n	8015e74 <_printf_i+0x130>
 8015efc:	680b      	ldr	r3, [r1, #0]
 8015efe:	6826      	ldr	r6, [r4, #0]
 8015f00:	6960      	ldr	r0, [r4, #20]
 8015f02:	1d1d      	adds	r5, r3, #4
 8015f04:	600d      	str	r5, [r1, #0]
 8015f06:	0635      	lsls	r5, r6, #24
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	d501      	bpl.n	8015f10 <_printf_i+0x1cc>
 8015f0c:	6018      	str	r0, [r3, #0]
 8015f0e:	e002      	b.n	8015f16 <_printf_i+0x1d2>
 8015f10:	0671      	lsls	r1, r6, #25
 8015f12:	d5fb      	bpl.n	8015f0c <_printf_i+0x1c8>
 8015f14:	8018      	strh	r0, [r3, #0]
 8015f16:	2300      	movs	r3, #0
 8015f18:	6123      	str	r3, [r4, #16]
 8015f1a:	4616      	mov	r6, r2
 8015f1c:	e7ba      	b.n	8015e94 <_printf_i+0x150>
 8015f1e:	680b      	ldr	r3, [r1, #0]
 8015f20:	1d1a      	adds	r2, r3, #4
 8015f22:	600a      	str	r2, [r1, #0]
 8015f24:	681e      	ldr	r6, [r3, #0]
 8015f26:	6862      	ldr	r2, [r4, #4]
 8015f28:	2100      	movs	r1, #0
 8015f2a:	4630      	mov	r0, r6
 8015f2c:	f7ea f958 	bl	80001e0 <memchr>
 8015f30:	b108      	cbz	r0, 8015f36 <_printf_i+0x1f2>
 8015f32:	1b80      	subs	r0, r0, r6
 8015f34:	6060      	str	r0, [r4, #4]
 8015f36:	6863      	ldr	r3, [r4, #4]
 8015f38:	6123      	str	r3, [r4, #16]
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015f40:	e7a8      	b.n	8015e94 <_printf_i+0x150>
 8015f42:	6923      	ldr	r3, [r4, #16]
 8015f44:	4632      	mov	r2, r6
 8015f46:	4649      	mov	r1, r9
 8015f48:	4640      	mov	r0, r8
 8015f4a:	47d0      	blx	sl
 8015f4c:	3001      	adds	r0, #1
 8015f4e:	d0ab      	beq.n	8015ea8 <_printf_i+0x164>
 8015f50:	6823      	ldr	r3, [r4, #0]
 8015f52:	079b      	lsls	r3, r3, #30
 8015f54:	d413      	bmi.n	8015f7e <_printf_i+0x23a>
 8015f56:	68e0      	ldr	r0, [r4, #12]
 8015f58:	9b03      	ldr	r3, [sp, #12]
 8015f5a:	4298      	cmp	r0, r3
 8015f5c:	bfb8      	it	lt
 8015f5e:	4618      	movlt	r0, r3
 8015f60:	e7a4      	b.n	8015eac <_printf_i+0x168>
 8015f62:	2301      	movs	r3, #1
 8015f64:	4632      	mov	r2, r6
 8015f66:	4649      	mov	r1, r9
 8015f68:	4640      	mov	r0, r8
 8015f6a:	47d0      	blx	sl
 8015f6c:	3001      	adds	r0, #1
 8015f6e:	d09b      	beq.n	8015ea8 <_printf_i+0x164>
 8015f70:	3501      	adds	r5, #1
 8015f72:	68e3      	ldr	r3, [r4, #12]
 8015f74:	9903      	ldr	r1, [sp, #12]
 8015f76:	1a5b      	subs	r3, r3, r1
 8015f78:	42ab      	cmp	r3, r5
 8015f7a:	dcf2      	bgt.n	8015f62 <_printf_i+0x21e>
 8015f7c:	e7eb      	b.n	8015f56 <_printf_i+0x212>
 8015f7e:	2500      	movs	r5, #0
 8015f80:	f104 0619 	add.w	r6, r4, #25
 8015f84:	e7f5      	b.n	8015f72 <_printf_i+0x22e>
 8015f86:	bf00      	nop
 8015f88:	08016395 	.word	0x08016395
 8015f8c:	080163a6 	.word	0x080163a6

08015f90 <_sbrk_r>:
 8015f90:	b538      	push	{r3, r4, r5, lr}
 8015f92:	4d06      	ldr	r5, [pc, #24]	; (8015fac <_sbrk_r+0x1c>)
 8015f94:	2300      	movs	r3, #0
 8015f96:	4604      	mov	r4, r0
 8015f98:	4608      	mov	r0, r1
 8015f9a:	602b      	str	r3, [r5, #0]
 8015f9c:	f7eb fbea 	bl	8001774 <_sbrk>
 8015fa0:	1c43      	adds	r3, r0, #1
 8015fa2:	d102      	bne.n	8015faa <_sbrk_r+0x1a>
 8015fa4:	682b      	ldr	r3, [r5, #0]
 8015fa6:	b103      	cbz	r3, 8015faa <_sbrk_r+0x1a>
 8015fa8:	6023      	str	r3, [r4, #0]
 8015faa:	bd38      	pop	{r3, r4, r5, pc}
 8015fac:	200074dc 	.word	0x200074dc

08015fb0 <__sread>:
 8015fb0:	b510      	push	{r4, lr}
 8015fb2:	460c      	mov	r4, r1
 8015fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015fb8:	f000 f8a0 	bl	80160fc <_read_r>
 8015fbc:	2800      	cmp	r0, #0
 8015fbe:	bfab      	itete	ge
 8015fc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015fc2:	89a3      	ldrhlt	r3, [r4, #12]
 8015fc4:	181b      	addge	r3, r3, r0
 8015fc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015fca:	bfac      	ite	ge
 8015fcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8015fce:	81a3      	strhlt	r3, [r4, #12]
 8015fd0:	bd10      	pop	{r4, pc}

08015fd2 <__swrite>:
 8015fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fd6:	461f      	mov	r7, r3
 8015fd8:	898b      	ldrh	r3, [r1, #12]
 8015fda:	05db      	lsls	r3, r3, #23
 8015fdc:	4605      	mov	r5, r0
 8015fde:	460c      	mov	r4, r1
 8015fe0:	4616      	mov	r6, r2
 8015fe2:	d505      	bpl.n	8015ff0 <__swrite+0x1e>
 8015fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015fe8:	2302      	movs	r3, #2
 8015fea:	2200      	movs	r2, #0
 8015fec:	f000 f868 	bl	80160c0 <_lseek_r>
 8015ff0:	89a3      	ldrh	r3, [r4, #12]
 8015ff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015ff6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015ffa:	81a3      	strh	r3, [r4, #12]
 8015ffc:	4632      	mov	r2, r6
 8015ffe:	463b      	mov	r3, r7
 8016000:	4628      	mov	r0, r5
 8016002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016006:	f000 b817 	b.w	8016038 <_write_r>

0801600a <__sseek>:
 801600a:	b510      	push	{r4, lr}
 801600c:	460c      	mov	r4, r1
 801600e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016012:	f000 f855 	bl	80160c0 <_lseek_r>
 8016016:	1c43      	adds	r3, r0, #1
 8016018:	89a3      	ldrh	r3, [r4, #12]
 801601a:	bf15      	itete	ne
 801601c:	6560      	strne	r0, [r4, #84]	; 0x54
 801601e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016022:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016026:	81a3      	strheq	r3, [r4, #12]
 8016028:	bf18      	it	ne
 801602a:	81a3      	strhne	r3, [r4, #12]
 801602c:	bd10      	pop	{r4, pc}

0801602e <__sclose>:
 801602e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016032:	f000 b813 	b.w	801605c <_close_r>
	...

08016038 <_write_r>:
 8016038:	b538      	push	{r3, r4, r5, lr}
 801603a:	4d07      	ldr	r5, [pc, #28]	; (8016058 <_write_r+0x20>)
 801603c:	4604      	mov	r4, r0
 801603e:	4608      	mov	r0, r1
 8016040:	4611      	mov	r1, r2
 8016042:	2200      	movs	r2, #0
 8016044:	602a      	str	r2, [r5, #0]
 8016046:	461a      	mov	r2, r3
 8016048:	f7eb fb43 	bl	80016d2 <_write>
 801604c:	1c43      	adds	r3, r0, #1
 801604e:	d102      	bne.n	8016056 <_write_r+0x1e>
 8016050:	682b      	ldr	r3, [r5, #0]
 8016052:	b103      	cbz	r3, 8016056 <_write_r+0x1e>
 8016054:	6023      	str	r3, [r4, #0]
 8016056:	bd38      	pop	{r3, r4, r5, pc}
 8016058:	200074dc 	.word	0x200074dc

0801605c <_close_r>:
 801605c:	b538      	push	{r3, r4, r5, lr}
 801605e:	4d06      	ldr	r5, [pc, #24]	; (8016078 <_close_r+0x1c>)
 8016060:	2300      	movs	r3, #0
 8016062:	4604      	mov	r4, r0
 8016064:	4608      	mov	r0, r1
 8016066:	602b      	str	r3, [r5, #0]
 8016068:	f7eb fb4f 	bl	800170a <_close>
 801606c:	1c43      	adds	r3, r0, #1
 801606e:	d102      	bne.n	8016076 <_close_r+0x1a>
 8016070:	682b      	ldr	r3, [r5, #0]
 8016072:	b103      	cbz	r3, 8016076 <_close_r+0x1a>
 8016074:	6023      	str	r3, [r4, #0]
 8016076:	bd38      	pop	{r3, r4, r5, pc}
 8016078:	200074dc 	.word	0x200074dc

0801607c <_fstat_r>:
 801607c:	b538      	push	{r3, r4, r5, lr}
 801607e:	4d07      	ldr	r5, [pc, #28]	; (801609c <_fstat_r+0x20>)
 8016080:	2300      	movs	r3, #0
 8016082:	4604      	mov	r4, r0
 8016084:	4608      	mov	r0, r1
 8016086:	4611      	mov	r1, r2
 8016088:	602b      	str	r3, [r5, #0]
 801608a:	f7eb fb4a 	bl	8001722 <_fstat>
 801608e:	1c43      	adds	r3, r0, #1
 8016090:	d102      	bne.n	8016098 <_fstat_r+0x1c>
 8016092:	682b      	ldr	r3, [r5, #0]
 8016094:	b103      	cbz	r3, 8016098 <_fstat_r+0x1c>
 8016096:	6023      	str	r3, [r4, #0]
 8016098:	bd38      	pop	{r3, r4, r5, pc}
 801609a:	bf00      	nop
 801609c:	200074dc 	.word	0x200074dc

080160a0 <_isatty_r>:
 80160a0:	b538      	push	{r3, r4, r5, lr}
 80160a2:	4d06      	ldr	r5, [pc, #24]	; (80160bc <_isatty_r+0x1c>)
 80160a4:	2300      	movs	r3, #0
 80160a6:	4604      	mov	r4, r0
 80160a8:	4608      	mov	r0, r1
 80160aa:	602b      	str	r3, [r5, #0]
 80160ac:	f7eb fb49 	bl	8001742 <_isatty>
 80160b0:	1c43      	adds	r3, r0, #1
 80160b2:	d102      	bne.n	80160ba <_isatty_r+0x1a>
 80160b4:	682b      	ldr	r3, [r5, #0]
 80160b6:	b103      	cbz	r3, 80160ba <_isatty_r+0x1a>
 80160b8:	6023      	str	r3, [r4, #0]
 80160ba:	bd38      	pop	{r3, r4, r5, pc}
 80160bc:	200074dc 	.word	0x200074dc

080160c0 <_lseek_r>:
 80160c0:	b538      	push	{r3, r4, r5, lr}
 80160c2:	4d07      	ldr	r5, [pc, #28]	; (80160e0 <_lseek_r+0x20>)
 80160c4:	4604      	mov	r4, r0
 80160c6:	4608      	mov	r0, r1
 80160c8:	4611      	mov	r1, r2
 80160ca:	2200      	movs	r2, #0
 80160cc:	602a      	str	r2, [r5, #0]
 80160ce:	461a      	mov	r2, r3
 80160d0:	f7eb fb42 	bl	8001758 <_lseek>
 80160d4:	1c43      	adds	r3, r0, #1
 80160d6:	d102      	bne.n	80160de <_lseek_r+0x1e>
 80160d8:	682b      	ldr	r3, [r5, #0]
 80160da:	b103      	cbz	r3, 80160de <_lseek_r+0x1e>
 80160dc:	6023      	str	r3, [r4, #0]
 80160de:	bd38      	pop	{r3, r4, r5, pc}
 80160e0:	200074dc 	.word	0x200074dc

080160e4 <__malloc_lock>:
 80160e4:	4801      	ldr	r0, [pc, #4]	; (80160ec <__malloc_lock+0x8>)
 80160e6:	f7ff bb55 	b.w	8015794 <__retarget_lock_acquire_recursive>
 80160ea:	bf00      	nop
 80160ec:	200074d4 	.word	0x200074d4

080160f0 <__malloc_unlock>:
 80160f0:	4801      	ldr	r0, [pc, #4]	; (80160f8 <__malloc_unlock+0x8>)
 80160f2:	f7ff bb50 	b.w	8015796 <__retarget_lock_release_recursive>
 80160f6:	bf00      	nop
 80160f8:	200074d4 	.word	0x200074d4

080160fc <_read_r>:
 80160fc:	b538      	push	{r3, r4, r5, lr}
 80160fe:	4d07      	ldr	r5, [pc, #28]	; (801611c <_read_r+0x20>)
 8016100:	4604      	mov	r4, r0
 8016102:	4608      	mov	r0, r1
 8016104:	4611      	mov	r1, r2
 8016106:	2200      	movs	r2, #0
 8016108:	602a      	str	r2, [r5, #0]
 801610a:	461a      	mov	r2, r3
 801610c:	f7eb fac4 	bl	8001698 <_read>
 8016110:	1c43      	adds	r3, r0, #1
 8016112:	d102      	bne.n	801611a <_read_r+0x1e>
 8016114:	682b      	ldr	r3, [r5, #0]
 8016116:	b103      	cbz	r3, 801611a <_read_r+0x1e>
 8016118:	6023      	str	r3, [r4, #0]
 801611a:	bd38      	pop	{r3, r4, r5, pc}
 801611c:	200074dc 	.word	0x200074dc

08016120 <_init>:
 8016120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016122:	bf00      	nop
 8016124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016126:	bc08      	pop	{r3}
 8016128:	469e      	mov	lr, r3
 801612a:	4770      	bx	lr

0801612c <_fini>:
 801612c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801612e:	bf00      	nop
 8016130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016132:	bc08      	pop	{r3}
 8016134:	469e      	mov	lr, r3
 8016136:	4770      	bx	lr
