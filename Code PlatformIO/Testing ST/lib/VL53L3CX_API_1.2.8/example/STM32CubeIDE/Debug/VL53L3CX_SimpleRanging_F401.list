
VL53L3CX_SimpleRanging_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c338  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  0800c4d8  0800c4d8  0001c4d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c9f4  0800c9f4  0001c9f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c9fc  0800c9fc  0001c9fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ca00  0800ca00  0001ca00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000020c  20000000  0800ca04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002db4  20000210  0800cc10  00020210  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  20002fc4  0800cc10  00022fc4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 10 .debug_line   0002bca5  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   0005696d  00000000  00000000  0004bee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005dac  00000000  00000000  000a284e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001480  00000000  00000000  000a8600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    000b4359  00000000  00000000  000a9a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001af8  00000000  00000000  0015dde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0002ac46  00000000  00000000  0015f8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ef9f  00000000  00000000  0018a51e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001a94bd  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000525c  00000000  00000000  001a9510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stab         000000b4  00000000  00000000  001ae76c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      00000183  00000000  00000000  001ae820  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000210 	.word	0x20000210
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c4c0 	.word	0x0800c4c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000214 	.word	0x20000214
 80001dc:	0800c4c0 	.word	0x0800c4c0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_ldivmod>:
 8000bb8:	b97b      	cbnz	r3, 8000bda <__aeabi_ldivmod+0x22>
 8000bba:	b972      	cbnz	r2, 8000bda <__aeabi_ldivmod+0x22>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bfbe      	ittt	lt
 8000bc0:	2000      	movlt	r0, #0
 8000bc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bc6:	e006      	blt.n	8000bd6 <__aeabi_ldivmod+0x1e>
 8000bc8:	bf08      	it	eq
 8000bca:	2800      	cmpeq	r0, #0
 8000bcc:	bf1c      	itt	ne
 8000bce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd6:	f000 b9b9 	b.w	8000f4c <__aeabi_idiv0>
 8000bda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be2:	2900      	cmp	r1, #0
 8000be4:	db09      	blt.n	8000bfa <__aeabi_ldivmod+0x42>
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db1a      	blt.n	8000c20 <__aeabi_ldivmod+0x68>
 8000bea:	f000 f84d 	bl	8000c88 <__udivmoddi4>
 8000bee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf6:	b004      	add	sp, #16
 8000bf8:	4770      	bx	lr
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db1b      	blt.n	8000c3c <__aeabi_ldivmod+0x84>
 8000c04:	f000 f840 	bl	8000c88 <__udivmoddi4>
 8000c08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c10:	b004      	add	sp, #16
 8000c12:	4240      	negs	r0, r0
 8000c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c18:	4252      	negs	r2, r2
 8000c1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c1e:	4770      	bx	lr
 8000c20:	4252      	negs	r2, r2
 8000c22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c26:	f000 f82f 	bl	8000c88 <__udivmoddi4>
 8000c2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c32:	b004      	add	sp, #16
 8000c34:	4240      	negs	r0, r0
 8000c36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3a:	4770      	bx	lr
 8000c3c:	4252      	negs	r2, r2
 8000c3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c42:	f000 f821 	bl	8000c88 <__udivmoddi4>
 8000c46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4e:	b004      	add	sp, #16
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f56:	e003      	b.n	8000f60 <LoopCopyDataInit>

08000f58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f5e:	3104      	adds	r1, #4

08000f60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f60:	480b      	ldr	r0, [pc, #44]	; (8000f90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f68:	d3f6      	bcc.n	8000f58 <CopyDataInit>
  ldr  r2, =_sbss
 8000f6a:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f6c:	e002      	b.n	8000f74 <LoopFillZerobss>

08000f6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f70:	f842 3b04 	str.w	r3, [r2], #4

08000f74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f78:	d3f9      	bcc.n	8000f6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f7a:	f007 fae3 	bl	8008544 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7e:	f008 fc59 	bl	8009834 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f82:	f000 f8f7 	bl	8001174 <main>
  bx  lr    
 8000f86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f88:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000f8c:	0800ca04 	.word	0x0800ca04
  ldr  r0, =_sdata
 8000f90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f94:	2000020c 	.word	0x2000020c
  ldr  r2, =_sbss
 8000f98:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 8000f9c:	20002fc4 	.word	0x20002fc4

08000fa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa0:	e7fe      	b.n	8000fa0 <ADC_IRQHandler>
	...

08000fa4 <fputc>:

/* USER CODE BEGIN 0 */
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)

PUTCHAR_PROTOTYPE
{
 8000fa4:	b507      	push	{r0, r1, r2, lr}
  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
 8000fa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 8000faa:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
 8000fac:	2201      	movs	r2, #1
 8000fae:	a901      	add	r1, sp, #4
 8000fb0:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <fputc+0x1c>)
 8000fb2:	f008 fbe3 	bl	800977c <HAL_UART_Transmit>
  return ch;
}
 8000fb6:	9801      	ldr	r0, [sp, #4]
 8000fb8:	b003      	add	sp, #12
 8000fba:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fbe:	bf00      	nop
 8000fc0:	20002d18 	.word	0x20002d18

08000fc4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin==VL53L1X_INT_Pin)
 8000fc4:	2810      	cmp	r0, #16
  {
    IntCount++;
 8000fc6:	bf01      	itttt	eq
 8000fc8:	4a02      	ldreq	r2, [pc, #8]	; (8000fd4 <HAL_GPIO_EXTI_Callback+0x10>)
 8000fca:	6813      	ldreq	r3, [r2, #0]
 8000fcc:	3301      	addeq	r3, #1
 8000fce:	6013      	streq	r3, [r2, #0]
  }
}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20002d14 	.word	0x20002d14

08000fd8 <SystemClock_Config>:
/** System Clock Configuration
*/
#ifdef STM32F401xE

void SystemClock_Config(void)
{
 8000fd8:	b530      	push	{r4, r5, lr}
 8000fda:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  
  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fdc:	4b27      	ldr	r3, [pc, #156]	; (800107c <SystemClock_Config+0xa4>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	9201      	str	r2, [sp, #4]
 8000fe2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000fe4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000fe8:	6419      	str	r1, [r3, #64]	; 0x40
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fec:	4924      	ldr	r1, [pc, #144]	; (8001080 <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ff6:	9202      	str	r2, [sp, #8]
 8000ff8:	680b      	ldr	r3, [r1, #0]
 8000ffa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001002:	600b      	str	r3, [r1, #0]
 8001004:	680b      	ldr	r3, [r1, #0]
 8001006:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800100a:	9302      	str	r3, [sp, #8]
 800100c:	9b02      	ldr	r3, [sp, #8]
  
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800100e:	2101      	movs	r1, #1
 8001010:	2310      	movs	r3, #16
 8001012:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001016:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001018:	2504      	movs	r5, #4
 800101a:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800101e:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001020:	e9cd 3511 	strd	r3, r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001024:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001026:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001028:	e9cd 420e 	strd	r4, r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800102c:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800102e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001030:	f008 f848 	bl	80090c4 <HAL_RCC_OscConfig>
 8001034:	b100      	cbz	r0, 8001038 <SystemClock_Config+0x60>
*/
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 8001036:	e7fe      	b.n	8001036 <SystemClock_Config+0x5e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001038:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103a:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800103e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001042:	e9cd 3006 	strd	r3, r0, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001046:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001048:	4621      	mov	r1, r4
 800104a:	a803      	add	r0, sp, #12
 800104c:	f008 fa10 	bl	8009470 <HAL_RCC_ClockConfig>
 8001050:	4604      	mov	r4, r0
 8001052:	b100      	cbz	r0, 8001056 <SystemClock_Config+0x7e>
  while(1) 
 8001054:	e7fe      	b.n	8001054 <SystemClock_Config+0x7c>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001056:	f008 faa7 	bl	80095a8 <HAL_RCC_GetHCLKFreq>
 800105a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001062:	f007 fb31 	bl	80086c8 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001066:	4628      	mov	r0, r5
 8001068:	f007 fb44 	bl	80086f4 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800106c:	4622      	mov	r2, r4
 800106e:	4621      	mov	r1, r4
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f007 fae8 	bl	8008648 <HAL_NVIC_SetPriority>
}
 8001078:	b015      	add	sp, #84	; 0x54
 800107a:	bd30      	pop	{r4, r5, pc}
 800107c:	40023800 	.word	0x40023800
 8001080:	40007000 	.word	0x40007000

08001084 <RangingLoop>:
{
 8001084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  status = VL53LX_WaitDeviceBooted(Dev);
 8001088:	4e30      	ldr	r6, [pc, #192]	; (800114c <RangingLoop+0xc8>)
  printf("Ranging loop starts\n");
 800108a:	4831      	ldr	r0, [pc, #196]	; (8001150 <RangingLoop+0xcc>)
  status = VL53LX_WaitDeviceBooted(Dev);
 800108c:	4d31      	ldr	r5, [pc, #196]	; (8001154 <RangingLoop+0xd0>)
{
 800108e:	b09d      	sub	sp, #116	; 0x74
  printf("Ranging loop starts\n");
 8001090:	f009 f910 	bl	800a2b4 <puts>
  status = VL53LX_WaitDeviceBooted(Dev);
 8001094:	6830      	ldr	r0, [r6, #0]
 8001096:	f000 fcc9 	bl	8001a2c <VL53LX_WaitDeviceBooted>
 800109a:	6028      	str	r0, [r5, #0]
  status = VL53LX_DataInit(Dev);
 800109c:	6830      	ldr	r0, [r6, #0]
 800109e:	f000 ff09 	bl	8001eb4 <VL53LX_DataInit>
 80010a2:	6028      	str	r0, [r5, #0]
  status = VL53LX_StartMeasurement(Dev);
 80010a4:	6830      	ldr	r0, [r6, #0]
 80010a6:	f000 fd03 	bl	8001ab0 <VL53LX_StartMeasurement>
 80010aa:	4601      	mov	r1, r0
 80010ac:	6028      	str	r0, [r5, #0]
  if(status){
 80010ae:	bb38      	cbnz	r0, 8001100 <RangingLoop+0x7c>
      if(IntCount !=0 ){
 80010b0:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8001170 <RangingLoop+0xec>
      __WFI();
 80010b4:	bf30      	wfi
      if(IntCount !=0 ){
 80010b6:	f8d8 3000 	ldr.w	r3, [r8]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0fa      	beq.n	80010b4 <RangingLoop+0x30>
        status = VL53LX_GetMultiRangingData(Dev, pMultiRangingData);
 80010be:	a905      	add	r1, sp, #20
 80010c0:	6830      	ldr	r0, [r6, #0]
        IntCount=0;
 80010c2:	2700      	movs	r7, #0
 80010c4:	f8c8 7000 	str.w	r7, [r8]
        status = VL53LX_GetMultiRangingData(Dev, pMultiRangingData);
 80010c8:	f000 fd14 	bl	8001af4 <VL53LX_GetMultiRangingData>
        no_of_object_found=pMultiRangingData->NumberOfObjectsFound;
 80010cc:	f89d 9019 	ldrb.w	r9, [sp, #25]
        printf("Count=%5d, ", pMultiRangingData->StreamCount);
 80010d0:	f89d 1018 	ldrb.w	r1, [sp, #24]
        status = VL53LX_GetMultiRangingData(Dev, pMultiRangingData);
 80010d4:	6028      	str	r0, [r5, #0]
        printf("Count=%5d, ", pMultiRangingData->StreamCount);
 80010d6:	4820      	ldr	r0, [pc, #128]	; (8001158 <RangingLoop+0xd4>)
 80010d8:	f009 f850 	bl	800a17c <iprintf>
        printf("#Objs=%1d ", no_of_object_found);
 80010dc:	481f      	ldr	r0, [pc, #124]	; (800115c <RangingLoop+0xd8>)
 80010de:	4649      	mov	r1, r9
 80010e0:	f009 f84c 	bl	800a17c <iprintf>
        for(j=0;j<no_of_object_found;j++){
 80010e4:	ac05      	add	r4, sp, #20
 80010e6:	45b9      	cmp	r9, r7
 80010e8:	dc0e      	bgt.n	8001108 <RangingLoop+0x84>
        printf ("\n");
 80010ea:	200a      	movs	r0, #10
 80010ec:	f009 f85e 	bl	800a1ac <putchar>
        if (status==0){
 80010f0:	682b      	ldr	r3, [r5, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1de      	bne.n	80010b4 <RangingLoop+0x30>
          status = VL53LX_ClearInterruptAndStartMeasurement(Dev);
 80010f6:	6830      	ldr	r0, [r6, #0]
 80010f8:	f000 fcf8 	bl	8001aec <VL53LX_ClearInterruptAndStartMeasurement>
 80010fc:	6028      	str	r0, [r5, #0]
 80010fe:	e7d9      	b.n	80010b4 <RangingLoop+0x30>
    printf("VL53LX_StartMeasurement failed: error = %d \n", status);
 8001100:	4817      	ldr	r0, [pc, #92]	; (8001160 <RangingLoop+0xdc>)
 8001102:	f009 f83b 	bl	800a17c <iprintf>
    while(1);
 8001106:	e7fe      	b.n	8001106 <RangingLoop+0x82>
          if(j!=0)printf("\n                     ");
 8001108:	b117      	cbz	r7, 8001110 <RangingLoop+0x8c>
 800110a:	4816      	ldr	r0, [pc, #88]	; (8001164 <RangingLoop+0xe0>)
 800110c:	f009 f836 	bl	800a17c <iprintf>
          printf("status=%d, D=%5dmm, Signal=%2.2f Mcps, Ambient=%2.2f Mcps",
 8001110:	6920      	ldr	r0, [r4, #16]
 8001112:	f9b4 b018 	ldrsh.w	fp, [r4, #24]
 8001116:	f894 a01a 	ldrb.w	sl, [r4, #26]
 800111a:	f7ff f9fb 	bl	8000514 <__aeabi_ui2d>
 800111e:	4b12      	ldr	r3, [pc, #72]	; (8001168 <RangingLoop+0xe4>)
 8001120:	2200      	movs	r2, #0
 8001122:	f7ff fa71 	bl	8000608 <__aeabi_dmul>
 8001126:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800112a:	68e0      	ldr	r0, [r4, #12]
 800112c:	f7ff f9f2 	bl	8000514 <__aeabi_ui2d>
 8001130:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <RangingLoop+0xe4>)
 8001132:	2200      	movs	r2, #0
 8001134:	f7ff fa68 	bl	8000608 <__aeabi_dmul>
 8001138:	465a      	mov	r2, fp
 800113a:	e9cd 0100 	strd	r0, r1, [sp]
 800113e:	480b      	ldr	r0, [pc, #44]	; (800116c <RangingLoop+0xe8>)
 8001140:	4651      	mov	r1, sl
 8001142:	f009 f81b 	bl	800a17c <iprintf>
        for(j=0;j<no_of_object_found;j++){
 8001146:	3701      	adds	r7, #1
 8001148:	3414      	adds	r4, #20
 800114a:	e7cc      	b.n	80010e6 <RangingLoop+0x62>
 800114c:	20000000 	.word	0x20000000
 8001150:	0800c50c 	.word	0x0800c50c
 8001154:	20002d58 	.word	0x20002d58
 8001158:	0800c54d 	.word	0x0800c54d
 800115c:	0800c559 	.word	0x0800c559
 8001160:	0800c520 	.word	0x0800c520
 8001164:	0800c564 	.word	0x0800c564
 8001168:	3ef00000 	.word	0x3ef00000
 800116c:	0800c57b 	.word	0x0800c57b
 8001170:	20002d14 	.word	0x20002d14

08001174 <main>:
{
 8001174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001176:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001178:	2400      	movs	r4, #0
  HAL_Init();
 800117a:	f007 fa13 	bl	80085a4 <HAL_Init>
  SystemClock_Config();
 800117e:	f7ff ff2b 	bl	8000fd8 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001182:	4b5d      	ldr	r3, [pc, #372]	; (80012f8 <main+0x184>)
 8001184:	9401      	str	r4, [sp, #4]
 8001186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001188:	485c      	ldr	r0, [pc, #368]	; (80012fc <main+0x188>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800118a:	4d5d      	ldr	r5, [pc, #372]	; (8001300 <main+0x18c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800118c:	f042 0204 	orr.w	r2, r2, #4
 8001190:	631a      	str	r2, [r3, #48]	; 0x30
 8001192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001194:	f002 0204 	and.w	r2, r2, #4
 8001198:	9201      	str	r2, [sp, #4]
 800119a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800119c:	9402      	str	r4, [sp, #8]
 800119e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011a4:	631a      	str	r2, [r3, #48]	; 0x30
 80011a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011a8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80011ac:	9202      	str	r2, [sp, #8]
 80011ae:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	9403      	str	r4, [sp, #12]
 80011b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011b4:	f042 0201 	orr.w	r2, r2, #1
 80011b8:	631a      	str	r2, [r3, #48]	; 0x30
 80011ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011bc:	f002 0201 	and.w	r2, r2, #1
 80011c0:	9203      	str	r2, [sp, #12]
 80011c2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c4:	9404      	str	r4, [sp, #16]
 80011c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011c8:	f042 0202 	orr.w	r2, r2, #2
 80011cc:	631a      	str	r2, [r3, #48]	; 0x30
 80011ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d0:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011d4:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011d8:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011da:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011dc:	f007 fb6e 	bl	80088bc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011e4:	4847      	ldr	r0, [pc, #284]	; (8001304 <main+0x190>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011e8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ea:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ee:	2601      	movs	r6, #1
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f007 fa92 	bl	8008718 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VL53L1X_INT_Pin;
 80011f4:	2310      	movs	r3, #16
  HAL_GPIO_Init(VL53L1X_INT_GPIO_Port, &GPIO_InitStruct);
 80011f6:	4841      	ldr	r0, [pc, #260]	; (80012fc <main+0x188>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f8:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(VL53L1X_INT_GPIO_Port, &GPIO_InitStruct);
 80011fa:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011fc:	e9cd 3505 	strd	r3, r5, [sp, #20]
  HAL_GPIO_Init(VL53L1X_INT_GPIO_Port, &GPIO_InitStruct);
 8001200:	f007 fa8a 	bl	8008718 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8001204:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001206:	483d      	ldr	r0, [pc, #244]	; (80012fc <main+0x188>)
 8001208:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120a:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001212:	f007 fa81 	bl	8008718 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001216:	4621      	mov	r1, r4
 8001218:	4622      	mov	r2, r4
 800121a:	200a      	movs	r0, #10
 800121c:	f007 fa14 	bl	8008648 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001220:	200a      	movs	r0, #10
 8001222:	f007 fa43 	bl	80086ac <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 8001226:	4838      	ldr	r0, [pc, #224]	; (8001308 <main+0x194>)
  huart2.Init.BaudRate = 115200;
 8001228:	4938      	ldr	r1, [pc, #224]	; (800130c <main+0x198>)
  huart2.Init.Parity = UART_PARITY_NONE;
 800122a:	6104      	str	r4, [r0, #16]
  huart2.Init.BaudRate = 115200;
 800122c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001230:	e9c0 1300 	strd	r1, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001234:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001236:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123a:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800123e:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001240:	f008 fa6e 	bl	8009720 <HAL_UART_Init>
 8001244:	b100      	cbz	r0, 8001248 <main+0xd4>
  while(1) 
 8001246:	e7fe      	b.n	8001246 <main+0xd2>
  hi2c1.Instance = I2C1;
 8001248:	4c31      	ldr	r4, [pc, #196]	; (8001310 <main+0x19c>)
  hi2c1.Init.ClockSpeed = 100000;
 800124a:	4a32      	ldr	r2, [pc, #200]	; (8001314 <main+0x1a0>)
 800124c:	4b32      	ldr	r3, [pc, #200]	; (8001318 <main+0x1a4>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800124e:	6220      	str	r0, [r4, #32]
  hi2c1.Init.ClockSpeed = 100000;
 8001250:	e9c4 2300 	strd	r2, r3, [r4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001254:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8001258:	e9c4 0002 	strd	r0, r0, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800125c:	e9c4 3004 	strd	r3, r0, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001260:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001264:	4620      	mov	r0, r4
 8001266:	f007 fc3d 	bl	8008ae4 <HAL_I2C_Init>
 800126a:	4607      	mov	r7, r0
 800126c:	b100      	cbz	r0, 8001270 <main+0xfc>
  while(1) 
 800126e:	e7fe      	b.n	800126e <main+0xfa>
  Dev->I2cHandle = &hi2c1;
 8001270:	4d2a      	ldr	r5, [pc, #168]	; (800131c <main+0x1a8>)
  XNUCLEO53L3A2_Init();
 8001272:	f000 fb21 	bl	80018b8 <XNUCLEO53L3A2_Init>
  printf("VL53L1X Examples...\n");
 8001276:	482a      	ldr	r0, [pc, #168]	; (8001320 <main+0x1ac>)
 8001278:	f009 f81c 	bl	800a2b4 <puts>
  Dev->I2cHandle = &hi2c1;
 800127c:	682b      	ldr	r3, [r5, #0]
 800127e:	f642 224c 	movw	r2, #10828	; 0x2a4c
  Dev->I2cDevAddr = 0x52;
 8001282:	2152      	movs	r1, #82	; 0x52
  Dev->I2cHandle = &hi2c1;
 8001284:	509c      	str	r4, [r3, r2]
  Dev->I2cDevAddr = 0x52;
 8001286:	f642 2250 	movw	r2, #10832	; 0x2a50
  status = XNUCLEO53L3A2_ResetId(ToFSensor, 0); // Reset ToF sensor
 800128a:	4630      	mov	r0, r6
  Dev->I2cDevAddr = 0x52;
 800128c:	5499      	strb	r1, [r3, r2]
  status = XNUCLEO53L3A2_ResetId(ToFSensor, 0); // Reset ToF sensor
 800128e:	4639      	mov	r1, r7
 8001290:	f000 fb58 	bl	8001944 <XNUCLEO53L3A2_ResetId>
 8001294:	4c23      	ldr	r4, [pc, #140]	; (8001324 <main+0x1b0>)
 8001296:	6020      	str	r0, [r4, #0]
  HAL_Delay(2);
 8001298:	2002      	movs	r0, #2
 800129a:	f007 f9af 	bl	80085fc <HAL_Delay>
  status = XNUCLEO53L3A2_ResetId(ToFSensor, 1); // Reset ToF sensor
 800129e:	4631      	mov	r1, r6
 80012a0:	4630      	mov	r0, r6
 80012a2:	f000 fb4f 	bl	8001944 <XNUCLEO53L3A2_ResetId>
 80012a6:	6020      	str	r0, [r4, #0]
  HAL_Delay(2);
 80012a8:	2002      	movs	r0, #2
 80012aa:	f007 f9a7 	bl	80085fc <HAL_Delay>
  VL53LX_RdByte(Dev, 0x010F, &byteData);
 80012ae:	f10d 0203 	add.w	r2, sp, #3
 80012b2:	f240 110f 	movw	r1, #271	; 0x10f
 80012b6:	6828      	ldr	r0, [r5, #0]
 80012b8:	f000 f960 	bl	800157c <VL53LX_RdByte>
  printf("VL53LX Model_ID: %02X\n\r", byteData);
 80012bc:	f89d 1003 	ldrb.w	r1, [sp, #3]
 80012c0:	4819      	ldr	r0, [pc, #100]	; (8001328 <main+0x1b4>)
 80012c2:	f008 ff5b 	bl	800a17c <iprintf>
  VL53LX_RdByte(Dev, 0x0110, &byteData);
 80012c6:	f10d 0203 	add.w	r2, sp, #3
 80012ca:	f44f 7188 	mov.w	r1, #272	; 0x110
 80012ce:	6828      	ldr	r0, [r5, #0]
 80012d0:	f000 f954 	bl	800157c <VL53LX_RdByte>
  printf("VL53LX Module_Type: %02X\n\r", byteData);
 80012d4:	f89d 1003 	ldrb.w	r1, [sp, #3]
 80012d8:	4814      	ldr	r0, [pc, #80]	; (800132c <main+0x1b8>)
 80012da:	f008 ff4f 	bl	800a17c <iprintf>
  VL53LX_RdWord(Dev, 0x010F, &wordData);
 80012de:	aa05      	add	r2, sp, #20
 80012e0:	f240 110f 	movw	r1, #271	; 0x10f
 80012e4:	6828      	ldr	r0, [r5, #0]
 80012e6:	f000 f961 	bl	80015ac <VL53LX_RdWord>
  printf("VL53LX: %02X\n\r", wordData);
 80012ea:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80012ee:	4810      	ldr	r0, [pc, #64]	; (8001330 <main+0x1bc>)
 80012f0:	f008 ff44 	bl	800a17c <iprintf>
  RangingLoop();
 80012f4:	f7ff fec6 	bl	8001084 <RangingLoop>
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40020000 	.word	0x40020000
 8001300:	10210000 	.word	0x10210000
 8001304:	40020800 	.word	0x40020800
 8001308:	20002d18 	.word	0x20002d18
 800130c:	40004400 	.word	0x40004400
 8001310:	20002cc0 	.word	0x20002cc0
 8001314:	40005400 	.word	0x40005400
 8001318:	000186a0 	.word	0x000186a0
 800131c:	20000000 	.word	0x20000000
 8001320:	0800c5b5 	.word	0x0800c5b5
 8001324:	20002d58 	.word	0x20002d58
 8001328:	0800c5c9 	.word	0x0800c5c9
 800132c:	0800c5e1 	.word	0x0800c5e1
 8001330:	0800c5fc 	.word	0x0800c5fc

08001334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001334:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001336:	2007      	movs	r0, #7
 8001338:	f007 f974 	bl	8008624 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800133c:	2200      	movs	r2, #0
 800133e:	4611      	mov	r1, r2
 8001340:	f06f 000b 	mvn.w	r0, #11
 8001344:	f007 f980 	bl	8008648 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001348:	2200      	movs	r2, #0
 800134a:	4611      	mov	r1, r2
 800134c:	f06f 000a 	mvn.w	r0, #10
 8001350:	f007 f97a 	bl	8008648 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001354:	2200      	movs	r2, #0
 8001356:	4611      	mov	r1, r2
 8001358:	f06f 0009 	mvn.w	r0, #9
 800135c:	f007 f974 	bl	8008648 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001360:	2200      	movs	r2, #0
 8001362:	4611      	mov	r1, r2
 8001364:	f06f 0004 	mvn.w	r0, #4
 8001368:	f007 f96e 	bl	8008648 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800136c:	2200      	movs	r2, #0
 800136e:	4611      	mov	r1, r2
 8001370:	f06f 0003 	mvn.w	r0, #3
 8001374:	f007 f968 	bl	8008648 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001378:	2200      	movs	r2, #0
 800137a:	4611      	mov	r1, r2
 800137c:	f06f 0001 	mvn.w	r0, #1
 8001380:	f007 f962 	bl	8008648 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001384:	2200      	movs	r2, #0

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001386:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800138a:	4611      	mov	r1, r2
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	f007 b95a 	b.w	8008648 <HAL_NVIC_SetPriority>

08001394 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001394:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8001396:	6802      	ldr	r2, [r0, #0]
 8001398:	4b10      	ldr	r3, [pc, #64]	; (80013dc <HAL_I2C_MspInit+0x48>)
 800139a:	429a      	cmp	r2, r3
 800139c:	d11b      	bne.n	80013d6 <HAL_I2C_MspInit+0x42>
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800139e:	f44f 7240 	mov.w	r2, #768	; 0x300
 80013a2:	2312      	movs	r3, #18
 80013a4:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	2101      	movs	r1, #1
 80013aa:	2303      	movs	r3, #3
 80013ac:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013b0:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b2:	eb0d 0103 	add.w	r1, sp, r3
 80013b6:	480a      	ldr	r0, [pc, #40]	; (80013e0 <HAL_I2C_MspInit+0x4c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013b8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	f007 f9ad 	bl	8008718 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <HAL_I2C_MspInit+0x50>)
 80013c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013c6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80013ca:	641a      	str	r2, [r3, #64]	; 0x40
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013d6:	b007      	add	sp, #28
 80013d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80013dc:	40005400 	.word	0x40005400
 80013e0:	40020400 	.word	0x40020400
 80013e4:	40023800 	.word	0x40023800

080013e8 <HAL_UART_MspInit>:
  /* USER CODE END I2C1_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80013ea:	6802      	ldr	r2, [r0, #0]
 80013ec:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <HAL_UART_MspInit+0x40>)
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d117      	bne.n	8001422 <HAL_UART_MspInit+0x3a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013f2:	4a0e      	ldr	r2, [pc, #56]	; (800142c <HAL_UART_MspInit+0x44>)
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f4:	480e      	ldr	r0, [pc, #56]	; (8001430 <HAL_UART_MspInit+0x48>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80013fc:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001400:	6411      	str	r1, [r2, #64]	; 0x40
 8001402:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001404:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001408:	9200      	str	r2, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	210c      	movs	r1, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 800140c:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140e:	2202      	movs	r2, #2
 8001410:	e9cd 1201 	strd	r1, r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	e9cd 3303 	strd	r3, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001418:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800141a:	2307      	movs	r3, #7
 800141c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141e:	f007 f97b 	bl	8008718 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001422:	b007      	add	sp, #28
 8001424:	f85d fb04 	ldr.w	pc, [sp], #4
 8001428:	40004400 	.word	0x40004400
 800142c:	40023800 	.word	0x40023800
 8001430:	40020000 	.word	0x40020000

08001434 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001434:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001436:	f007 f8cf 	bl	80085d8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800143a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800143e:	f007 b966 	b.w	800870e <HAL_SYSTICK_IRQHandler>

08001442 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001442:	2010      	movs	r0, #16
 8001444:	f007 ba40 	b.w	80088c8 <HAL_GPIO_EXTI_IRQHandler>

08001448 <_write>:

extern int fputc(int ch) __attribute__((weak));


int _write(int file, char *ptr, int len)
{
 8001448:	b570      	push	{r4, r5, r6, lr}
 800144a:	460e      	mov	r6, r1
 800144c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144e:	2500      	movs	r5, #0
 8001450:	42a5      	cmp	r5, r4
 8001452:	db01      	blt.n	8001458 <_write+0x10>
	{
		fputc(*ptr++);
	}
	return len;
}
 8001454:	4620      	mov	r0, r4
 8001456:	bd70      	pop	{r4, r5, r6, pc}
		fputc(*ptr++);
 8001458:	5d70      	ldrb	r0, [r6, r5]
 800145a:	f7ff fda3 	bl	8000fa4 <fputc>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145e:	3501      	adds	r5, #1
 8001460:	e7f6      	b.n	8001450 <_write+0x8>
	...

08001464 <_I2CWrite>:
#   define VL53LX_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 8001464:	b513      	push	{r0, r1, r4, lr}
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
//    int i;
    i2cwriteCount+=count;
 8001466:	4c09      	ldr	r4, [pc, #36]	; (800148c <_I2CWrite+0x28>)
 8001468:	6823      	ldr	r3, [r4, #0]
 800146a:	4413      	add	r3, r2
 800146c:	6023      	str	r3, [r4, #0]
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800146e:	f102 030a 	add.w	r3, r2, #10
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	f642 244c 	movw	r4, #10828	; 0x2a4c
 8001478:	b293      	uxth	r3, r2
 800147a:	460a      	mov	r2, r1
 800147c:	f642 2150 	movw	r1, #10832	; 0x2a50
 8001480:	5c41      	ldrb	r1, [r0, r1]
 8001482:	5900      	ldr	r0, [r0, r4]
 8001484:	f007 fbd6 	bl	8008c34 <HAL_I2C_Master_Transmit>
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
}
 8001488:	b002      	add	sp, #8
 800148a:	bd10      	pop	{r4, pc}
 800148c:	2000022c 	.word	0x2000022c

08001490 <_I2CRead>:

int _I2CRead(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 8001490:	b513      	push	{r0, r1, r4, lr}
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;

    i2creadCount+=count;
 8001492:	4c0a      	ldr	r4, [pc, #40]	; (80014bc <_I2CRead+0x2c>)
 8001494:	6863      	ldr	r3, [r4, #4]
 8001496:	4413      	add	r3, r2
 8001498:	6063      	str	r3, [r4, #4]
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800149a:	f642 2350 	movw	r3, #10832	; 0x2a50
 800149e:	5cc4      	ldrb	r4, [r0, r3]
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80014a0:	f102 030a 	add.w	r3, r2, #10
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	b293      	uxth	r3, r2
 80014a8:	460a      	mov	r2, r1
 80014aa:	f044 0101 	orr.w	r1, r4, #1
 80014ae:	f642 244c 	movw	r4, #10828	; 0x2a4c
 80014b2:	5900      	ldr	r0, [r0, r4]
 80014b4:	f007 fc96 	bl	8008de4 <HAL_I2C_Master_Receive>
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
}
 80014b8:	b002      	add	sp, #8
 80014ba:	bd10      	pop	{r4, pc}
 80014bc:	2000022c 	.word	0x2000022c

080014c0 <VL53LX_WriteMulti>:

VL53LX_Error VL53LX_WriteMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
    int status_int;
    VL53LX_Error Status = VL53LX_ERROR_NONE;
    if (count > sizeof(_I2CBuffer) - 1) {
 80014c0:	2bff      	cmp	r3, #255	; 0xff
VL53LX_Error VL53LX_WriteMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80014c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014c4:	460e      	mov	r6, r1
 80014c6:	4607      	mov	r7, r0
 80014c8:	4611      	mov	r1, r2
 80014ca:	461c      	mov	r4, r3
    if (count > sizeof(_I2CBuffer) - 1) {
 80014cc:	d812      	bhi.n	80014f4 <VL53LX_WriteMulti+0x34>
        return VL53LX_ERROR_INVALID_PARAMS;
    }
    _I2CBuffer[0] = index>>8;
 80014ce:	4d0b      	ldr	r5, [pc, #44]	; (80014fc <VL53LX_WriteMulti+0x3c>)
 80014d0:	0a33      	lsrs	r3, r6, #8
    _I2CBuffer[1] = index&0xFF;
    memcpy(&_I2CBuffer[2], pdata, count);
 80014d2:	4622      	mov	r2, r4
 80014d4:	1ca8      	adds	r0, r5, #2
    _I2CBuffer[0] = index>>8;
 80014d6:	702b      	strb	r3, [r5, #0]
    _I2CBuffer[1] = index&0xFF;
 80014d8:	706e      	strb	r6, [r5, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 80014da:	f008 f9cf 	bl	800987c <memcpy>
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 80014de:	1ca2      	adds	r2, r4, #2
 80014e0:	4629      	mov	r1, r5
 80014e2:	4638      	mov	r0, r7
 80014e4:	f7ff ffbe 	bl	8001464 <_I2CWrite>
    if (status_int != 0) {
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80014e8:	2800      	cmp	r0, #0
 80014ea:	bf0c      	ite	eq
 80014ec:	2000      	moveq	r0, #0
 80014ee:	f06f 000c 	mvnne.w	r0, #12
    }
    VL53LX_PutI2cBus();
    return Status;
}
 80014f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return VL53LX_ERROR_INVALID_PARAMS;
 80014f4:	f06f 0003 	mvn.w	r0, #3
 80014f8:	e7fb      	b.n	80014f2 <VL53LX_WriteMulti+0x32>
 80014fa:	bf00      	nop
 80014fc:	20002d5c 	.word	0x20002d5c

08001500 <VL53LX_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53LX_Error VL53LX_ReadMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8001500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001502:	460c      	mov	r4, r1
    VL53LX_Error Status = VL53LX_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8001504:	4909      	ldr	r1, [pc, #36]	; (800152c <VL53LX_ReadMulti+0x2c>)
VL53LX_Error VL53LX_ReadMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8001506:	4616      	mov	r6, r2
 8001508:	461f      	mov	r7, r3
    _I2CBuffer[1] = index&0xFF;
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800150a:	2202      	movs	r2, #2
    _I2CBuffer[0] = index>>8;
 800150c:	0a23      	lsrs	r3, r4, #8
VL53LX_Error VL53LX_ReadMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800150e:	4605      	mov	r5, r0
    _I2CBuffer[0] = index>>8;
 8001510:	700b      	strb	r3, [r1, #0]
    _I2CBuffer[1] = index&0xFF;
 8001512:	704c      	strb	r4, [r1, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8001514:	f7ff ffa6 	bl	8001464 <_I2CWrite>
    if (status_int != 0) {
 8001518:	b928      	cbnz	r0, 8001526 <VL53LX_ReadMulti+0x26>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    status_int = _I2CRead(Dev, pdata, count);
 800151a:	463a      	mov	r2, r7
 800151c:	4631      	mov	r1, r6
 800151e:	4628      	mov	r0, r5
 8001520:	f7ff ffb6 	bl	8001490 <_I2CRead>
    if (status_int != 0) {
 8001524:	b108      	cbz	r0, 800152a <VL53LX_ReadMulti+0x2a>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8001526:	f06f 000c 	mvn.w	r0, #12
    }
done:
    VL53LX_PutI2cBus();
    return Status;
}
 800152a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800152c:	20002d5c 	.word	0x20002d5c

08001530 <VL53LX_WrByte>:

VL53LX_Error VL53LX_WrByte(VL53LX_DEV Dev, uint16_t index, uint8_t data) {
 8001530:	460b      	mov	r3, r1
    VL53LX_Error Status = VL53LX_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8001532:	4907      	ldr	r1, [pc, #28]	; (8001550 <VL53LX_WrByte+0x20>)
VL53LX_Error VL53LX_WrByte(VL53LX_DEV Dev, uint16_t index, uint8_t data) {
 8001534:	b510      	push	{r4, lr}
    _I2CBuffer[0] = index>>8;
 8001536:	0a1c      	lsrs	r4, r3, #8
    _I2CBuffer[1] = index&0xFF;
    _I2CBuffer[2] = data;
 8001538:	708a      	strb	r2, [r1, #2]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800153a:	2203      	movs	r2, #3
    _I2CBuffer[0] = index>>8;
 800153c:	700c      	strb	r4, [r1, #0]
    _I2CBuffer[1] = index&0xFF;
 800153e:	704b      	strb	r3, [r1, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8001540:	f7ff ff90 	bl	8001464 <_I2CWrite>
    if (status_int != 0) {
 8001544:	2800      	cmp	r0, #0
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
    }
    VL53LX_PutI2cBus();
    return Status;
}
 8001546:	bf14      	ite	ne
 8001548:	f06f 000c 	mvnne.w	r0, #12
 800154c:	2000      	moveq	r0, #0
 800154e:	bd10      	pop	{r4, pc}
 8001550:	20002d5c 	.word	0x20002d5c

08001554 <VL53LX_WrWord>:

VL53LX_Error VL53LX_WrWord(VL53LX_DEV Dev, uint16_t index, uint16_t data) {
 8001554:	460b      	mov	r3, r1
    VL53LX_Error Status = VL53LX_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8001556:	4908      	ldr	r1, [pc, #32]	; (8001578 <VL53LX_WrWord+0x24>)
VL53LX_Error VL53LX_WrWord(VL53LX_DEV Dev, uint16_t index, uint16_t data) {
 8001558:	b510      	push	{r4, lr}
    _I2CBuffer[0] = index>>8;
 800155a:	0a1c      	lsrs	r4, r3, #8
    _I2CBuffer[1] = index&0xFF;
 800155c:	704b      	strb	r3, [r1, #1]
    _I2CBuffer[2] = data >> 8;
    _I2CBuffer[3] = data & 0x00FF;
 800155e:	70ca      	strb	r2, [r1, #3]
    _I2CBuffer[2] = data >> 8;
 8001560:	0a13      	lsrs	r3, r2, #8

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 8001562:	2204      	movs	r2, #4
    _I2CBuffer[0] = index>>8;
 8001564:	700c      	strb	r4, [r1, #0]
    _I2CBuffer[2] = data >> 8;
 8001566:	708b      	strb	r3, [r1, #2]
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 8001568:	f7ff ff7c 	bl	8001464 <_I2CWrite>
    if (status_int != 0) {
 800156c:	2800      	cmp	r0, #0
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
    }
    VL53LX_PutI2cBus();
    return Status;
}
 800156e:	bf14      	ite	ne
 8001570:	f06f 000c 	mvnne.w	r0, #12
 8001574:	2000      	moveq	r0, #0
 8001576:	bd10      	pop	{r4, pc}
 8001578:	20002d5c 	.word	0x20002d5c

0800157c <VL53LX_RdByte>:
    Status = VL53LX_WrByte(Dev, index, data);
done:
    return Status;
}

VL53LX_Error VL53LX_RdByte(VL53LX_DEV Dev, uint16_t index, uint8_t *data) {
 800157c:	b538      	push	{r3, r4, r5, lr}
 800157e:	460b      	mov	r3, r1
    VL53LX_Error Status = VL53LX_ERROR_NONE;
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8001580:	4909      	ldr	r1, [pc, #36]	; (80015a8 <VL53LX_RdByte+0x2c>)
VL53LX_Error VL53LX_RdByte(VL53LX_DEV Dev, uint16_t index, uint8_t *data) {
 8001582:	4615      	mov	r5, r2
	_I2CBuffer[0] = index>>8;
 8001584:	0a1a      	lsrs	r2, r3, #8
 8001586:	700a      	strb	r2, [r1, #0]
	_I2CBuffer[1] = index&0xFF;
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8001588:	2202      	movs	r2, #2
VL53LX_Error VL53LX_RdByte(VL53LX_DEV Dev, uint16_t index, uint8_t *data) {
 800158a:	4604      	mov	r4, r0
	_I2CBuffer[1] = index&0xFF;
 800158c:	704b      	strb	r3, [r1, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800158e:	f7ff ff69 	bl	8001464 <_I2CWrite>
    if( status_int ){
 8001592:	b928      	cbnz	r0, 80015a0 <VL53LX_RdByte+0x24>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    status_int = _I2CRead(Dev, data, 1);
 8001594:	2201      	movs	r2, #1
 8001596:	4629      	mov	r1, r5
 8001598:	4620      	mov	r0, r4
 800159a:	f7ff ff79 	bl	8001490 <_I2CRead>
    if (status_int != 0) {
 800159e:	b108      	cbz	r0, 80015a4 <VL53LX_RdByte+0x28>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80015a0:	f06f 000c 	mvn.w	r0, #12
    }
done:
    VL53LX_PutI2cBus();
    return Status;
}
 80015a4:	bd38      	pop	{r3, r4, r5, pc}
 80015a6:	bf00      	nop
 80015a8:	20002d5c 	.word	0x20002d5c

080015ac <VL53LX_RdWord>:

VL53LX_Error VL53LX_RdWord(VL53LX_DEV Dev, uint16_t index, uint16_t *data) {
 80015ac:	b570      	push	{r4, r5, r6, lr}
    VL53LX_Error Status = VL53LX_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80015ae:	4c0d      	ldr	r4, [pc, #52]	; (80015e4 <VL53LX_RdWord+0x38>)
 80015b0:	0a0b      	lsrs	r3, r1, #8
VL53LX_Error VL53LX_RdWord(VL53LX_DEV Dev, uint16_t index, uint16_t *data) {
 80015b2:	4615      	mov	r5, r2
	_I2CBuffer[1] = index&0xFF;
 80015b4:	7061      	strb	r1, [r4, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80015b6:	2202      	movs	r2, #2
 80015b8:	4621      	mov	r1, r4
VL53LX_Error VL53LX_RdWord(VL53LX_DEV Dev, uint16_t index, uint16_t *data) {
 80015ba:	4606      	mov	r6, r0
    _I2CBuffer[0] = index>>8;
 80015bc:	7023      	strb	r3, [r4, #0]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80015be:	f7ff ff51 	bl	8001464 <_I2CWrite>

    if( status_int ){
 80015c2:	b110      	cbz	r0, 80015ca <VL53LX_RdWord+0x1e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80015c4:	f06f 000c 	mvn.w	r0, #12

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
done:
    VL53LX_PutI2cBus();
    return Status;
}
 80015c8:	bd70      	pop	{r4, r5, r6, pc}
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80015ca:	2202      	movs	r2, #2
 80015cc:	4621      	mov	r1, r4
 80015ce:	4630      	mov	r0, r6
 80015d0:	f7ff ff5e 	bl	8001490 <_I2CRead>
    if (status_int != 0) {
 80015d4:	2800      	cmp	r0, #0
 80015d6:	d1f5      	bne.n	80015c4 <VL53LX_RdWord+0x18>
    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80015d8:	7822      	ldrb	r2, [r4, #0]
 80015da:	7863      	ldrb	r3, [r4, #1]
 80015dc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80015e0:	802b      	strh	r3, [r5, #0]
 80015e2:	e7f1      	b.n	80015c8 <VL53LX_RdWord+0x1c>
 80015e4:	20002d5c 	.word	0x20002d5c

080015e8 <VL53LX_WaitUs>:
	(void)pdev;
	HAL_Delay(wait_ms);
    return VL53LX_ERROR_NONE;
}

VL53LX_Error VL53LX_WaitUs(VL53LX_Dev_t *pdev, int32_t wait_us){
 80015e8:	b508      	push	{r3, lr}
	(void)pdev;
	HAL_Delay(wait_us/1000);
 80015ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ee:	fb91 f0f0 	sdiv	r0, r1, r0
 80015f2:	f007 f803 	bl	80085fc <HAL_Delay>
    return VL53LX_ERROR_NONE;
}
 80015f6:	2000      	movs	r0, #0
 80015f8:	bd08      	pop	{r3, pc}
	...

080015fc <VL53LX_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 80015fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001600:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 8001604:	4606      	mov	r6, r0
 8001606:	460f      	mov	r7, r1
 8001608:	4690      	mov	r8, r2

	VL53LX_Error status         = VL53LX_ERROR_NONE;
	uint32_t     start_time_ms = 0;
	uint32_t     current_time_ms = 0;
	uint32_t     polling_time_ms = 0;
	uint8_t      byte_value      = 0;
 800160a:	2400      	movs	r4, #0
#ifdef PAL_EXTENDED
	VL53LX_get_register_name(
			index,
			register_name);
#else
	VL53LX_COPYSTRING(register_name, "");
 800160c:	4919      	ldr	r1, [pc, #100]	; (8001674 <VL53LX_WaitValueMaskEx+0x78>)
{
 800160e:	f89d b230 	ldrb.w	fp, [sp, #560]	; 0x230
 8001612:	f8dd a234 	ldr.w	sl, [sp, #564]	; 0x234
	uint8_t      byte_value      = 0;
 8001616:	f88d 4007 	strb.w	r4, [sp, #7]
	VL53LX_COPYSTRING(register_name, "");
 800161a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800161e:	a802      	add	r0, sp, #8
{
 8001620:	4699      	mov	r9, r3
	VL53LX_COPYSTRING(register_name, "");
 8001622:	f008 fe4f 	bl	800a2c4 <strncpy>
	VL53LX_set_trace_functions(VL53LX_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53LX_ERROR_NONE) &&
 8001626:	b1f7      	cbz	r7, 8001666 <VL53LX_WaitValueMaskEx+0x6a>
		   (polling_time_ms < timeout_ms) &&
 8001628:	b124      	cbz	r4, 8001634 <VL53LX_WaitValueMaskEx+0x38>
 800162a:	2000      	movs	r0, #0

	if (found == 0 && status == VL53LX_ERROR_NONE)
		status = VL53LX_ERROR_TIME_OUT;

	return status;
}
 800162c:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
 8001630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			status = VL53LX_RdByte(
 8001634:	f10d 0207 	add.w	r2, sp, #7
 8001638:	4641      	mov	r1, r8
 800163a:	4630      	mov	r0, r6
 800163c:	f7ff ff9e 	bl	800157c <VL53LX_RdByte>
		if ((byte_value & mask) == value)
 8001640:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001644:	ea0b 0303 	and.w	r3, fp, r3
 8001648:	454b      	cmp	r3, r9
 800164a:	d103      	bne.n	8001654 <VL53LX_WaitValueMaskEx+0x58>
	while ((status == VL53LX_ERROR_NONE) &&
 800164c:	2800      	cmp	r0, #0
 800164e:	d1ed      	bne.n	800162c <VL53LX_WaitValueMaskEx+0x30>
 8001650:	2401      	movs	r4, #1
 8001652:	e7e8      	b.n	8001626 <VL53LX_WaitValueMaskEx+0x2a>
		if (status == VL53LX_ERROR_NONE  &&
 8001654:	2800      	cmp	r0, #0
 8001656:	d1e9      	bne.n	800162c <VL53LX_WaitValueMaskEx+0x30>
			found == 0 &&
 8001658:	f1ba 0f00 	cmp.w	sl, #0
 800165c:	d0e3      	beq.n	8001626 <VL53LX_WaitValueMaskEx+0x2a>
	HAL_Delay(wait_ms);
 800165e:	4650      	mov	r0, sl
 8001660:	f006 ffcc 	bl	80085fc <HAL_Delay>
	while ((status == VL53LX_ERROR_NONE) &&
 8001664:	e7df      	b.n	8001626 <VL53LX_WaitValueMaskEx+0x2a>
		status = VL53LX_ERROR_TIME_OUT;
 8001666:	2c00      	cmp	r4, #0
 8001668:	bf14      	ite	ne
 800166a:	2000      	movne	r0, #0
 800166c:	f06f 0006 	mvneq.w	r0, #6
 8001670:	e7dc      	b.n	800162c <VL53LX_WaitValueMaskEx+0x30>
 8001672:	bf00      	nop
 8001674:	0800c612 	.word	0x0800c612

08001678 <VL53LX_ipp_hist_process_data>:
	VL53LX_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53LX_range_results_t            *presults)
{
 8001678:	b4f0      	push	{r4, r5, r6, r7}
 800167a:	4608      	mov	r0, r1
 800167c:	e9dd 5606 	ldrd	r5, r6, [sp, #24]
 8001680:	4611      	mov	r1, r2
 8001682:	461a      	mov	r2, r3
 8001684:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
	VL53LX_Error status         = VL53LX_ERROR_NONE;

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53LX_hist_process_data(
 8001688:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800168a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800168e:	e9cd 6706 	strd	r6, r7, [sp, #24]
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
}
 8001692:	bcf0      	pop	{r4, r5, r6, r7}
		VL53LX_hist_process_data(
 8001694:	f005 be4c 	b.w	8007330 <VL53LX_hist_process_data>

08001698 <_ExpanderRd>:
 * @param index      register index
 * @param data       read data buffer
 * @param n_data     number of byte to read
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderRd(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 8001698:	b570      	push	{r4, r5, r6, lr}
 800169a:	b086      	sub	sp, #24
    int status;
    uint8_t RegAddr;
    RegAddr = index;
    XNUCLEO53L3A2_GetI2cBus();
    do {
        status = HAL_I2C_Master_Transmit(&XNUCLEO53L3A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 800169c:	2564      	movs	r5, #100	; 0x64
    RegAddr = index;
 800169e:	f88d 1017 	strb.w	r1, [sp, #23]
static int _ExpanderRd(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 80016a2:	4616      	mov	r6, r2
        status = HAL_I2C_Master_Transmit(&XNUCLEO53L3A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 80016a4:	b281      	uxth	r1, r0
static int _ExpanderRd(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 80016a6:	461c      	mov	r4, r3
        status = HAL_I2C_Master_Transmit(&XNUCLEO53L3A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 80016a8:	4809      	ldr	r0, [pc, #36]	; (80016d0 <_ExpanderRd+0x38>)
 80016aa:	9500      	str	r5, [sp, #0]
 80016ac:	2301      	movs	r3, #1
 80016ae:	f10d 0217 	add.w	r2, sp, #23
 80016b2:	9103      	str	r1, [sp, #12]
 80016b4:	f007 fabe 	bl	8008c34 <HAL_I2C_Master_Transmit>
        if (status)
 80016b8:	9903      	ldr	r1, [sp, #12]
 80016ba:	b930      	cbnz	r0, 80016ca <_ExpanderRd+0x32>
            break;
        status = HAL_I2C_Master_Receive(&XNUCLEO53L3A2_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 80016bc:	4365      	muls	r5, r4
 80016be:	4804      	ldr	r0, [pc, #16]	; (80016d0 <_ExpanderRd+0x38>)
 80016c0:	9500      	str	r5, [sp, #0]
 80016c2:	b2a3      	uxth	r3, r4
 80016c4:	4632      	mov	r2, r6
 80016c6:	f007 fb8d 	bl	8008de4 <HAL_I2C_Master_Receive>
    } while (0);
    XNUCLEO53L3A2_PutI2cBus();
    return status;
}
 80016ca:	b006      	add	sp, #24
 80016cc:	bd70      	pop	{r4, r5, r6, pc}
 80016ce:	bf00      	nop
 80016d0:	20002f5c 	.word	0x20002f5c

080016d4 <_ExpanderWR>:
 * @param index      register index
 * @param data       data buffer
 * @param n_data     number of byte to write
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderWR(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 80016d4:	b530      	push	{r4, r5, lr}
 80016d6:	b087      	sub	sp, #28
 80016d8:	4605      	mov	r5, r0
 80016da:	4608      	mov	r0, r1
 80016dc:	461c      	mov	r4, r3
 80016de:	4611      	mov	r1, r2

    int status;
    uint8_t RegAddr[0x10];
    RegAddr[0] = index;
 80016e0:	f88d 0008 	strb.w	r0, [sp, #8]
    memcpy(RegAddr + 1, data, n_data);
 80016e4:	461a      	mov	r2, r3
 80016e6:	f10d 0009 	add.w	r0, sp, #9
 80016ea:	f008 f8c7 	bl	800987c <memcpy>
    XNUCLEO53L3A2_GetI2cBus();
    status = HAL_I2C_Master_Transmit(&XNUCLEO53L3A2_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 80016ee:	1c63      	adds	r3, r4, #1
 80016f0:	2264      	movs	r2, #100	; 0x64
 80016f2:	9200      	str	r2, [sp, #0]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	aa02      	add	r2, sp, #8
 80016f8:	b2a9      	uxth	r1, r5
 80016fa:	4802      	ldr	r0, [pc, #8]	; (8001704 <_ExpanderWR+0x30>)
 80016fc:	f007 fa9a 	bl	8008c34 <HAL_I2C_Master_Transmit>
    XNUCLEO53L3A2_PutI2cBus();
    return status;
}
 8001700:	b007      	add	sp, #28
 8001702:	bd30      	pop	{r4, r5, pc}
 8001704:	20002f5c 	.word	0x20002f5c

08001708 <_ExpandersSetAllIO>:
static int _ExpandersSetAllIO(void){
 8001708:	b510      	push	{r4, lr}
    status = _ExpanderWR(I2cExpAddr0, GPSR, &CurIOVal.bytes[0], 2);
 800170a:	4a08      	ldr	r2, [pc, #32]	; (800172c <_ExpandersSetAllIO+0x24>)
 800170c:	2302      	movs	r3, #2
 800170e:	2112      	movs	r1, #18
 8001710:	2086      	movs	r0, #134	; 0x86
 8001712:	f7ff ffdf 	bl	80016d4 <_ExpanderWR>
    if( status ){
 8001716:	b938      	cbnz	r0, 8001728 <_ExpandersSetAllIO+0x20>
}
 8001718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    status = _ExpanderWR(I2cExpAddr1, GPSR, &CurIOVal.bytes[2], 2);
 800171c:	4a04      	ldr	r2, [pc, #16]	; (8001730 <_ExpandersSetAllIO+0x28>)
 800171e:	2302      	movs	r3, #2
 8001720:	2112      	movs	r1, #18
 8001722:	2084      	movs	r0, #132	; 0x84
 8001724:	f7ff bfd6 	b.w	80016d4 <_ExpanderWR>
}
 8001728:	bd10      	pop	{r4, pc}
 800172a:	bf00      	nop
 800172c:	20000234 	.word	0x20000234
 8001730:	20000236 	.word	0x20000236

08001734 <XNUCLEO53L3A2_I2C1Configure>:
int XNUCLEO53L3A2_I2C1Configure() {
 8001734:	b570      	push	{r4, r5, r6, lr}
 8001736:	b088      	sub	sp, #32
    __GPIOB_CLK_ENABLE();
 8001738:	2300      	movs	r3, #0
 800173a:	9301      	str	r3, [sp, #4]
 800173c:	4b58      	ldr	r3, [pc, #352]	; (80018a0 <XNUCLEO53L3A2_I2C1Configure+0x16c>)
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800173e:	4859      	ldr	r0, [pc, #356]	; (80018a4 <XNUCLEO53L3A2_I2C1Configure+0x170>)
    __GPIOB_CLK_ENABLE();
 8001740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001742:	f042 0202 	orr.w	r2, r2, #2
 8001746:	631a      	str	r2, [r3, #48]	; 0x30
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	9301      	str	r3, [sp, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001750:	2201      	movs	r2, #1
 8001752:	f44f 7180 	mov.w	r1, #256	; 0x100
    __GPIOB_CLK_ENABLE();
 8001756:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001758:	f007 f8b0 	bl	80088bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800175c:	4851      	ldr	r0, [pc, #324]	; (80018a4 <XNUCLEO53L3A2_I2C1Configure+0x170>)
 800175e:	2201      	movs	r2, #1
 8001760:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001764:	f007 f8aa 	bl	80088bc <HAL_GPIO_WritePin>
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001768:	f44f 7540 	mov.w	r5, #768	; 0x300
 800176c:	2311      	movs	r3, #17
 800176e:	e9cd 5303 	strd	r5, r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001772:	484c      	ldr	r0, [pc, #304]	; (80018a4 <XNUCLEO53L3A2_I2C1Configure+0x170>)
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001774:	4d4b      	ldr	r5, [pc, #300]	; (80018a4 <XNUCLEO53L3A2_I2C1Configure+0x170>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001776:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001778:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800177a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	f006 ffcc 	bl	8008718 <HAL_GPIO_Init>
 8001780:	2408      	movs	r4, #8
 8001782:	260a      	movs	r6, #10
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001784:	2200      	movs	r2, #0
 8001786:	f44f 7180 	mov.w	r1, #256	; 0x100
 800178a:	4628      	mov	r0, r5
 800178c:	f007 f896 	bl	80088bc <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001790:	2001      	movs	r0, #1
 8001792:	f006 ff33 	bl	80085fc <HAL_Delay>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001796:	2201      	movs	r2, #1
 8001798:	f44f 7180 	mov.w	r1, #256	; 0x100
 800179c:	4628      	mov	r0, r5
 800179e:	f007 f88d 	bl	80088bc <HAL_GPIO_WritePin>
            HAL_Delay(1);
 80017a2:	2001      	movs	r0, #1
 80017a4:	f006 ff2a 	bl	80085fc <HAL_Delay>
        for( i=0; i<10; i++){
 80017a8:	3e01      	subs	r6, #1
 80017aa:	d1eb      	bne.n	8001784 <XNUCLEO53L3A2_I2C1Configure+0x50>
    }while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 && nRetry++<7);
 80017ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017b0:	4628      	mov	r0, r5
 80017b2:	f007 f87d 	bl	80088b0 <HAL_GPIO_ReadPin>
 80017b6:	b908      	cbnz	r0, 80017bc <XNUCLEO53L3A2_I2C1Configure+0x88>
 80017b8:	3c01      	subs	r4, #1
 80017ba:	d1e2      	bne.n	8001782 <XNUCLEO53L3A2_I2C1Configure+0x4e>
    if( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 ){
 80017bc:	4839      	ldr	r0, [pc, #228]	; (80018a4 <XNUCLEO53L3A2_I2C1Configure+0x170>)
 80017be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017c2:	f007 f875 	bl	80088b0 <HAL_GPIO_ReadPin>
 80017c6:	4b36      	ldr	r3, [pc, #216]	; (80018a0 <XNUCLEO53L3A2_I2C1Configure+0x16c>)
 80017c8:	bba8      	cbnz	r0, 8001836 <XNUCLEO53L3A2_I2C1Configure+0x102>
        __GPIOA_CLK_ENABLE();
 80017ca:	9002      	str	r0, [sp, #8]
 80017cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017ce:	f042 0201 	orr.w	r2, r2, #1
 80017d2:	631a      	str	r2, [r3, #48]	; 0x30
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	9005      	str	r0, [sp, #20]
        __GPIOA_CLK_ENABLE();
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	9302      	str	r3, [sp, #8]
 80017de:	9b02      	ldr	r3, [sp, #8]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e0:	4831      	ldr	r0, [pc, #196]	; (80018a8 <XNUCLEO53L3A2_I2C1Configure+0x174>)
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e2:	2420      	movs	r4, #32
 80017e4:	2301      	movs	r3, #1
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e6:	a903      	add	r1, sp, #12
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e8:	e9cd 4303 	strd	r4, r3, [sp, #12]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ec:	f006 ff94 	bl	8008718 <HAL_GPIO_Init>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80017f0:	4c2d      	ldr	r4, [pc, #180]	; (80018a8 <XNUCLEO53L3A2_I2C1Configure+0x174>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	2120      	movs	r1, #32
 80017f6:	4620      	mov	r0, r4
 80017f8:	f007 f860 	bl	80088bc <HAL_GPIO_WritePin>
            HAL_Delay(33);
 80017fc:	2021      	movs	r0, #33	; 0x21
 80017fe:	f006 fefd 	bl	80085fc <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001802:	2200      	movs	r2, #0
 8001804:	2120      	movs	r1, #32
 8001806:	4620      	mov	r0, r4
 8001808:	f007 f858 	bl	80088bc <HAL_GPIO_WritePin>
            HAL_Delay(33);
 800180c:	2021      	movs	r0, #33	; 0x21
 800180e:	f006 fef5 	bl	80085fc <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001812:	2201      	movs	r2, #1
 8001814:	2120      	movs	r1, #32
 8001816:	4620      	mov	r0, r4
 8001818:	f007 f850 	bl	80088bc <HAL_GPIO_WritePin>
            HAL_Delay(33);
 800181c:	2021      	movs	r0, #33	; 0x21
 800181e:	f006 feed 	bl	80085fc <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001822:	4620      	mov	r0, r4
 8001824:	2200      	movs	r2, #0
 8001826:	2120      	movs	r1, #32
 8001828:	f007 f848 	bl	80088bc <HAL_GPIO_WritePin>
            HAL_Delay(33*20);
 800182c:	f44f 7025 	mov.w	r0, #660	; 0x294
 8001830:	f006 fee4 	bl	80085fc <HAL_Delay>
        }while(1);
 8001834:	e7dd      	b.n	80017f2 <XNUCLEO53L3A2_I2C1Configure+0xbe>
    __GPIOB_CLK_ENABLE();
 8001836:	2400      	movs	r4, #0
 8001838:	9400      	str	r4, [sp, #0]
 800183a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183c:	4819      	ldr	r0, [pc, #100]	; (80018a4 <XNUCLEO53L3A2_I2C1Configure+0x170>)
    __GPIOB_CLK_ENABLE();
 800183e:	f042 0202 	orr.w	r2, r2, #2
 8001842:	631a      	str	r2, [r3, #48]	; 0x30
 8001844:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001846:	f002 0202 	and.w	r2, r2, #2
 800184a:	9200      	str	r2, [sp, #0]
 800184c:	9a00      	ldr	r2, [sp, #0]
    __I2C1_CLK_ENABLE();
 800184e:	9402      	str	r4, [sp, #8]
 8001850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001852:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001856:	641a      	str	r2, [r3, #64]	; 0x40
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800185e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001860:	f44f 7240 	mov.w	r2, #768	; 0x300
    __I2C1_CLK_ENABLE();
 8001864:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001866:	2312      	movs	r3, #18
 8001868:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800186e:	2304      	movs	r3, #4
 8001870:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8001872:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001876:	f006 ff4f 	bl	8008718 <HAL_GPIO_Init>
    XNUCLEO53L3A2_hi2c.Instance = I2C1;
 800187a:	480c      	ldr	r0, [pc, #48]	; (80018ac <XNUCLEO53L3A2_I2C1Configure+0x178>)
    XNUCLEO53L3A2_hi2c.Init.ClockSpeed = 400000;
 800187c:	490c      	ldr	r1, [pc, #48]	; (80018b0 <XNUCLEO53L3A2_I2C1Configure+0x17c>)
 800187e:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <XNUCLEO53L3A2_I2C1Configure+0x180>)
    XNUCLEO53L3A2_hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8001880:	6204      	str	r4, [r0, #32]
    XNUCLEO53L3A2_hi2c.Init.ClockSpeed = 400000;
 8001882:	e9c0 1300 	strd	r1, r3, [r0]
    XNUCLEO53L3A2_hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001886:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    XNUCLEO53L3A2_hi2c.Init.OwnAddress1 = 0;
 800188a:	e9c0 4402 	strd	r4, r4, [r0, #8]
    XNUCLEO53L3A2_hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 800188e:	e9c0 3404 	strd	r3, r4, [r0, #16]
    XNUCLEO53L3A2_hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8001892:	e9c0 4406 	strd	r4, r4, [r0, #24]
    status = HAL_I2C_Init(&XNUCLEO53L3A2_hi2c);
 8001896:	f007 f925 	bl	8008ae4 <HAL_I2C_Init>
}
 800189a:	b008      	add	sp, #32
 800189c:	bd70      	pop	{r4, r5, r6, pc}
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40020400 	.word	0x40020400
 80018a8:	40020000 	.word	0x40020000
 80018ac:	20002f5c 	.word	0x20002f5c
 80018b0:	40005400 	.word	0x40005400
 80018b4:	00061a80 	.word	0x00061a80

080018b8 <XNUCLEO53L3A2_Init>:
int XNUCLEO53L3A2_Init(void) {
 80018b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    XNUCLEO53L3A2_I2C1Configure();
 80018ba:	f7ff ff3b 	bl	8001734 <XNUCLEO53L3A2_I2C1Configure>
    status = _ExpanderRd( I2cExpAddr0, 0, ExpanderData, 2);
 80018be:	2302      	movs	r3, #2
 80018c0:	aa01      	add	r2, sp, #4
 80018c2:	2100      	movs	r1, #0
 80018c4:	2086      	movs	r0, #134	; 0x86
 80018c6:	f7ff fee7 	bl	8001698 <_ExpanderRd>
    if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 80018ca:	4604      	mov	r4, r0
 80018cc:	bba0      	cbnz	r0, 8001938 <XNUCLEO53L3A2_Init+0x80>
 80018ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80018d2:	bb8b      	cbnz	r3, 8001938 <XNUCLEO53L3A2_Init+0x80>
 80018d4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80018d8:	2b16      	cmp	r3, #22
 80018da:	d12d      	bne.n	8001938 <XNUCLEO53L3A2_Init+0x80>
    status = _ExpanderRd( I2cExpAddr1, 0, ExpanderData, 2);
 80018dc:	4601      	mov	r1, r0
 80018de:	2302      	movs	r3, #2
 80018e0:	aa01      	add	r2, sp, #4
 80018e2:	2084      	movs	r0, #132	; 0x84
 80018e4:	f7ff fed8 	bl	8001698 <_ExpanderRd>
    if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 80018e8:	bb28      	cbnz	r0, 8001936 <XNUCLEO53L3A2_Init+0x7e>
 80018ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80018ee:	bb1b      	cbnz	r3, 8001938 <XNUCLEO53L3A2_Init+0x80>
 80018f0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80018f4:	2b16      	cmp	r3, #22
 80018f6:	d11f      	bne.n	8001938 <XNUCLEO53L3A2_Init+0x80>
    ExpanderData[0] = 0xFF;
 80018f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    CurIOVal.u32=0x0;
 80018fc:	4d10      	ldr	r5, [pc, #64]	; (8001940 <XNUCLEO53L3A2_Init+0x88>)
    ExpanderData[0] = 0xFF;
 80018fe:	f8ad 3004 	strh.w	r3, [sp, #4]
    status = _ExpanderWR(I2cExpAddr0, GPDR, ExpanderData, 2);
 8001902:	aa01      	add	r2, sp, #4
 8001904:	2302      	movs	r3, #2
 8001906:	2114      	movs	r1, #20
 8001908:	2086      	movs	r0, #134	; 0x86
    CurIOVal.u32=0x0;
 800190a:	602c      	str	r4, [r5, #0]
    status = _ExpanderWR(I2cExpAddr0, GPDR, ExpanderData, 2);
 800190c:	f7ff fee2 	bl	80016d4 <_ExpanderWR>
    if (status) {
 8001910:	4604      	mov	r4, r0
 8001912:	b988      	cbnz	r0, 8001938 <XNUCLEO53L3A2_Init+0x80>
    ExpanderData[0] = 0xFF;
 8001914:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8001918:	f8ad 3004 	strh.w	r3, [sp, #4]
    status = _ExpanderWR(I2cExpAddr1, GPDR, ExpanderData, 2);
 800191c:	aa01      	add	r2, sp, #4
 800191e:	2302      	movs	r3, #2
 8001920:	2114      	movs	r1, #20
 8001922:	2084      	movs	r0, #132	; 0x84
 8001924:	f7ff fed6 	bl	80016d4 <_ExpanderWR>
    if (status) {
 8001928:	4604      	mov	r4, r0
 800192a:	b928      	cbnz	r0, 8001938 <XNUCLEO53L3A2_Init+0x80>
    CurIOVal.u32=0x7F + (0x7F<<7) + (0x7F<<16)+(0x7F<<(16+7));
 800192c:	f06f 23c0 	mvn.w	r3, #3221274624	; 0xc000c000
 8001930:	602b      	str	r3, [r5, #0]
    status= _ExpandersSetAllIO();
 8001932:	f7ff fee9 	bl	8001708 <_ExpandersSetAllIO>
 8001936:	4604      	mov	r4, r0
}
 8001938:	4620      	mov	r0, r4
 800193a:	b003      	add	sp, #12
 800193c:	bd30      	pop	{r4, r5, pc}
 800193e:	bf00      	nop
 8001940:	20000234 	.word	0x20000234

08001944 <XNUCLEO53L3A2_ResetId>:
    switch( DevNo ){
 8001944:	2863      	cmp	r0, #99	; 0x63
 8001946:	d014      	beq.n	8001972 <XNUCLEO53L3A2_ResetId+0x2e>
 8001948:	dc07      	bgt.n	800195a <XNUCLEO53L3A2_ResetId+0x16>
 800194a:	2801      	cmp	r0, #1
 800194c:	d011      	beq.n	8001972 <XNUCLEO53L3A2_ResetId+0x2e>
 800194e:	2802      	cmp	r0, #2
 8001950:	d007      	beq.n	8001962 <XNUCLEO53L3A2_ResetId+0x1e>
 8001952:	b1e8      	cbz	r0, 8001990 <XNUCLEO53L3A2_ResetId+0x4c>
}
 8001954:	f04f 30ff 	mov.w	r0, #4294967295
 8001958:	4770      	bx	lr
    switch( DevNo ){
 800195a:	286c      	cmp	r0, #108	; 0x6c
 800195c:	d018      	beq.n	8001990 <XNUCLEO53L3A2_ResetId+0x4c>
 800195e:	2872      	cmp	r0, #114	; 0x72
 8001960:	d1f8      	bne.n	8001954 <XNUCLEO53L3A2_ResetId+0x10>
        CurIOVal.bytes[1]&=~0x80; /* bit 15 expender 0  => byte #1 */
 8001962:	4a12      	ldr	r2, [pc, #72]	; (80019ac <XNUCLEO53L3A2_ResetId+0x68>)
 8001964:	7853      	ldrb	r3, [r2, #1]
 8001966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
        if( state )
 800196a:	b1b1      	cbz	r1, 800199a <XNUCLEO53L3A2_ResetId+0x56>
            CurIOVal.bytes[1]|=0x80; /* bit 15 expender 0 => byte #1*/
 800196c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001970:	e013      	b.n	800199a <XNUCLEO53L3A2_ResetId+0x56>
        CurIOVal.bytes[3]&=~0x80; /* bit 15 expender 1  => byte #3 */
 8001972:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <XNUCLEO53L3A2_ResetId+0x68>)
 8001974:	78d3      	ldrb	r3, [r2, #3]
 8001976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
        if( state )
 800197a:	b931      	cbnz	r1, 800198a <XNUCLEO53L3A2_ResetId+0x46>
            CurIOVal.bytes[3]|=0x80; /* bit 15 expender 1  => byte #3 */
 800197c:	70d3      	strb	r3, [r2, #3]
        status= _ExpanderWR(I2cExpAddr1, GPSR+1, &CurIOVal.bytes[3], 1);
 800197e:	4a0c      	ldr	r2, [pc, #48]	; (80019b0 <XNUCLEO53L3A2_ResetId+0x6c>)
 8001980:	2301      	movs	r3, #1
 8001982:	2113      	movs	r1, #19
 8001984:	2084      	movs	r0, #132	; 0x84
        status= _ExpanderWR(I2cExpAddr0, GPSR+1, &CurIOVal.bytes[1], 1);
 8001986:	f7ff bea5 	b.w	80016d4 <_ExpanderWR>
            CurIOVal.bytes[3]|=0x80; /* bit 15 expender 1  => byte #3 */
 800198a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800198e:	e7f5      	b.n	800197c <XNUCLEO53L3A2_ResetId+0x38>
        CurIOVal.bytes[1]&=~0x40; /* bit 14 expender 0 => byte #1*/
 8001990:	4a06      	ldr	r2, [pc, #24]	; (80019ac <XNUCLEO53L3A2_ResetId+0x68>)
 8001992:	7853      	ldrb	r3, [r2, #1]
 8001994:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
        if( state )
 8001998:	b929      	cbnz	r1, 80019a6 <XNUCLEO53L3A2_ResetId+0x62>
            CurIOVal.bytes[1]|=0x80; /* bit 15 expender 0 => byte #1*/
 800199a:	7053      	strb	r3, [r2, #1]
        status= _ExpanderWR(I2cExpAddr0, GPSR+1, &CurIOVal.bytes[1], 1);
 800199c:	2113      	movs	r1, #19
 800199e:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <XNUCLEO53L3A2_ResetId+0x70>)
 80019a0:	2301      	movs	r3, #1
 80019a2:	2086      	movs	r0, #134	; 0x86
 80019a4:	e7ef      	b.n	8001986 <XNUCLEO53L3A2_ResetId+0x42>
            CurIOVal.bytes[1]|=0x40; /* bit 14 expender 0 => byte #1*/
 80019a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019aa:	e7f6      	b.n	800199a <XNUCLEO53L3A2_ResetId+0x56>
 80019ac:	20000234 	.word	0x20000234
 80019b0:	20000237 	.word	0x20000237
 80019b4:	20000235 	.word	0x20000235

080019b8 <SetPresetModeL3CX>:
}

static VL53LX_Error SetPresetModeL3CX(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 80019b8:	b530      	push	{r4, r5, lr}
 80019ba:	4615      	mov	r5, r2
	VL53LX_DevicePresetModes RangingModes[3] = {
 80019bc:	4a1a      	ldr	r2, [pc, #104]	; (8001a28 <SetPresetModeL3CX+0x70>)
{
 80019be:	b08d      	sub	sp, #52	; 0x34
	VL53LX_Error Status = VL53LX_ERROR_NONE;
	VL53LX_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 80019c0:	2300      	movs	r3, #0
{
 80019c2:	4604      	mov	r4, r0
	switch (DistanceMode) {
 80019c4:	2901      	cmp	r1, #1
	VL53LX_DevicePresetModes RangingModes[3] = {
 80019c6:	8810      	ldrh	r0, [r2, #0]
 80019c8:	7892      	ldrb	r2, [r2, #2]
	uint16_t dss_config__target_total_rate_mcps = 0;
 80019ca:	f8ad 301e 	strh.w	r3, [sp, #30]
	uint32_t phasecal_config_timeout_us = 0;
	uint32_t mm_config_timeout_us = 0;
 80019ce:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
	uint32_t lld_range_config_timeout_us = 0;
 80019d2:	930b      	str	r3, [sp, #44]	; 0x2c
	VL53LX_DevicePresetModes RangingModes[3] = {
 80019d4:	f8ad 0020 	strh.w	r0, [sp, #32]
 80019d8:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
	switch (DistanceMode) {
 80019dc:	d003      	beq.n	80019e6 <SetPresetModeL3CX+0x2e>
 80019de:	2902      	cmp	r1, #2
 80019e0:	bf14      	ite	ne
 80019e2:	2302      	movne	r3, #2
 80019e4:	2301      	moveq	r3, #1
	*pDevicePresetMode = RangingModes[DistIdx];
 80019e6:	aa0c      	add	r2, sp, #48	; 0x30
 80019e8:	4413      	add	r3, r2

	Status = ComputeDevicePresetMode(DistanceMode,
			&device_preset_mode);

	if (Status == VL53LX_ERROR_NONE)
		Status =  VL53LX_get_preset_mode_timing_cfg(Dev,
 80019ea:	4620      	mov	r0, r4
	*pDevicePresetMode = RangingModes[DistIdx];
 80019ec:	f813 1c10 	ldrb.w	r1, [r3, #-16]
		Status =  VL53LX_get_preset_mode_timing_cfg(Dev,
 80019f0:	9105      	str	r1, [sp, #20]
 80019f2:	ab0b      	add	r3, sp, #44	; 0x2c
 80019f4:	9301      	str	r3, [sp, #4]
 80019f6:	ab0a      	add	r3, sp, #40	; 0x28
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	f10d 021e 	add.w	r2, sp, #30
 80019fe:	ab09      	add	r3, sp, #36	; 0x24
 8001a00:	f000 fbb4 	bl	800216c <VL53LX_get_preset_mode_timing_cfg>
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53LX_ERROR_NONE)
 8001a04:	9905      	ldr	r1, [sp, #20]
 8001a06:	b968      	cbnz	r0, 8001a24 <SetPresetModeL3CX+0x6c>
		Status = VL53LX_set_preset_mode(
 8001a08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001a0a:	9301      	str	r3, [sp, #4]
 8001a0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8001a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a16:	9502      	str	r5, [sp, #8]
 8001a18:	4620      	mov	r0, r4
 8001a1a:	f000 fbcd 	bl	80021b8 <VL53LX_set_preset_mode>
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 8001a1e:	b908      	cbnz	r0, 8001a24 <SetPresetModeL3CX+0x6c>
		VL53LXDevDataSet(Dev, LLData.measurement_mode,
 8001a20:	2320      	movs	r3, #32
 8001a22:	70e3      	strb	r3, [r4, #3]
				measurement_mode);

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001a24:	b00d      	add	sp, #52	; 0x34
 8001a26:	bd30      	pop	{r4, r5, pc}
 8001a28:	0800c60b 	.word	0x0800c60b

08001a2c <VL53LX_WaitDeviceBooted>:
	Status = VL53LX_poll_for_boot_completion(Dev,
 8001a2c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001a30:	f006 bc74 	b.w	800831c <VL53LX_poll_for_boot_completion>

08001a34 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>:
}


VL53LX_Error VL53LX_SetMeasurementTimingBudgetMicroSeconds(VL53LX_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8001a34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	VL53LX_Error Status = VL53LX_ERROR_NONE;
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8001a36:	2300      	movs	r3, #0
	uint32_t MmTimeoutUs = 0;
 8001a38:	e9cd 3301 	strd	r3, r3, [sp, #4]
	uint32_t PhaseCalTimeoutUs = 0;
 8001a3c:	9303      	str	r3, [sp, #12]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8001a3e:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x70>)
 8001a40:	4299      	cmp	r1, r3
{
 8001a42:	4604      	mov	r4, r0
 8001a44:	460d      	mov	r5, r1
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8001a46:	d827      	bhi.n	8001a98 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x64>
		Status = VL53LX_ERROR_INVALID_PARAMS;

	if (Status == VL53LX_ERROR_NONE)
		Status = VL53LX_get_timeouts_us(Dev,
 8001a48:	ab01      	add	r3, sp, #4
 8001a4a:	aa02      	add	r2, sp, #8
 8001a4c:	a903      	add	r1, sp, #12
 8001a4e:	f000 fa7f 	bl	8001f50 <VL53LX_get_timeouts_us>
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8001a52:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x74>)
	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 8001a54:	f8b4 63ca 	ldrh.w	r6, [r4, #970]	; 0x3ca
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8001a58:	4a14      	ldr	r2, [pc, #80]	; (8001aac <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x78>)
 8001a5a:	f64a 21eb 	movw	r1, #43755	; 0xaaeb
 8001a5e:	428e      	cmp	r6, r1
 8001a60:	bf18      	it	ne
 8001a62:	461a      	movne	r2, r3
	divisor = 6;

	if (IsL4(Dev))
		FDAMaxTimingBudgetUs = L4_FDA_MAX_TIMING_BUDGET_US;

	if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8001a64:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8001a68:	429d      	cmp	r5, r3
 8001a6a:	d918      	bls.n	8001a9e <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x6a>
	else {
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
				- TimingGuard);
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001a6c:	b990      	cbnz	r0, 8001a94 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x60>
				- TimingGuard);
 8001a6e:	f2a5 63a4 	subw	r3, r5, #1700	; 0x6a4
		if (TimingBudget > FDAMaxTimingBudgetUs)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d813      	bhi.n	8001a9e <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x6a>
			Status = VL53LX_ERROR_INVALID_PARAMS;
		else {
			TimingBudget /= divisor;
 8001a76:	2206      	movs	r2, #6
			Status = VL53LX_set_timeouts_us(
 8001a78:	4620      	mov	r0, r4
			TimingBudget /= divisor;
 8001a7a:	fbb3 f3f2 	udiv	r3, r3, r2
			Status = VL53LX_set_timeouts_us(
 8001a7e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
			TimingBudget /= divisor;
 8001a82:	9301      	str	r3, [sp, #4]
			Status = VL53LX_set_timeouts_us(
 8001a84:	f000 fa4c 	bl	8001f20 <VL53LX_set_timeouts_us>
				PhaseCalTimeoutUs,
				MmTimeoutUs,
				TimingBudget);
		}

		if (Status == VL53LX_ERROR_NONE)
 8001a88:	b920      	cbnz	r0, 8001a94 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x60>
			VL53LXDevDataSet(Dev,
 8001a8a:	9b01      	ldr	r3, [sp, #4]
 8001a8c:	6123      	str	r3, [r4, #16]
				LLData.range_config_timeout_us,
				TimingBudget);
	}

	if (Status == VL53LX_ERROR_NONE) {
		VL53LXDevDataSet(Dev,
 8001a8e:	f642 2344 	movw	r3, #10820	; 0x2a44
 8001a92:	50e5      	str	r5, [r4, r3]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001a94:	b004      	add	sp, #16
 8001a96:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001a98:	f06f 0003 	mvn.w	r0, #3
 8001a9c:	e7d9      	b.n	8001a52 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x1e>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001a9e:	f06f 0003 	mvn.w	r0, #3
 8001aa2:	e7f7      	b.n	8001a94 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x60>
 8001aa4:	00989680 	.word	0x00989680
 8001aa8:	00086470 	.word	0x00086470
 8001aac:	00030d40 	.word	0x00030d40

08001ab0 <VL53LX_StartMeasurement>:




VL53LX_Error VL53LX_StartMeasurement(VL53LX_DEV Dev)
{
 8001ab0:	b538      	push	{r3, r4, r5, lr}
 8001ab2:	4604      	mov	r4, r0
	uint8_t i;
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	VL53LX_load_patch(Dev);
 8001ab4:	f001 fb78 	bl	80031a8 <VL53LX_load_patch>
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8001ab8:	f504 5303 	add.w	r3, r4, #8384	; 0x20c0
 8001abc:	f504 5203 	add.w	r2, r4, #8384	; 0x20c0
 8001ac0:	3310      	adds	r3, #16
 8001ac2:	3208      	adds	r2, #8
 8001ac4:	4618      	mov	r0, r3
		pdev->PreviousRangeMilliMeter[i] = 0;
 8001ac6:	2100      	movs	r1, #0
		pdev->PreviousRangeStatus[i] = 255;
 8001ac8:	25ff      	movs	r5, #255	; 0xff
		pdev->PreviousRangeMilliMeter[i] = 0;
 8001aca:	f822 1b02 	strh.w	r1, [r2], #2
		pdev->PreviousRangeStatus[i] = 255;
 8001ace:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8001ad2:	4282      	cmp	r2, r0
		pdev->PreviousExtendedRange[i] = 0;
 8001ad4:	70d9      	strb	r1, [r3, #3]
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8001ad6:	d1f8      	bne.n	8001aca <VL53LX_StartMeasurement+0x1a>
	}
	pdev->PreviousStreamCount = 0;
 8001ad8:	f242 03d8 	movw	r3, #8408	; 0x20d8

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);

	if (Status == VL53LX_ERROR_NONE)
		Status = VL53LX_init_and_start_range(
 8001adc:	4620      	mov	r0, r4
	pdev->PreviousStreamCount = 0;
 8001ade:	54e1      	strb	r1, [r4, r3]
		Status = VL53LX_init_and_start_range(
 8001ae0:	2206      	movs	r2, #6
 8001ae2:	78e1      	ldrb	r1, [r4, #3]
				DeviceMeasurementMode,
				VL53LX_DEVICECONFIGLEVEL_FULL);

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		Status = VL53LX_init_and_start_range(
 8001ae8:	f000 bdce 	b.w	8002688 <VL53LX_init_and_start_range>

08001aec <VL53LX_ClearInterruptAndStartMeasurement>:

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);

	Status = VL53LX_clear_interrupt_and_enable_next_range(Dev,
 8001aec:	78c1      	ldrb	r1, [r0, #3]
 8001aee:	f000 bec5 	b.w	800287c <VL53LX_clear_interrupt_and_enable_next_range>
	...

08001af4 <VL53LX_GetMultiRangingData>:
}


VL53LX_Error VL53LX_GetMultiRangingData(VL53LX_DEV Dev,
		VL53LX_MultiRangingData_t *pMultiRangingData)
{
 8001af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001af8:	4604      	mov	r4, r0
 8001afa:	4688      	mov	r8, r1
	VL53LX_Error Status = VL53LX_ERROR_NONE;
	VL53LX_LLDriverData_t *pdev =
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_range_results_t *presults =
 8001afc:	f504 5aa1 	add.w	sl, r4, #5152	; 0x1420
{
 8001b00:	b087      	sub	sp, #28
	VL53LX_range_results_t *presults =
 8001b02:	f10a 0a18 	add.w	sl, sl, #24
			(VL53LX_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 8001b06:	225c      	movs	r2, #92	; 0x5c
 8001b08:	21ff      	movs	r1, #255	; 0xff
 8001b0a:	4640      	mov	r0, r8
 8001b0c:	f007 fec4 	bl	8009898 <memset>
		sizeof(VL53LX_MultiRangingData_t));


	Status = VL53LX_get_device_results(
 8001b10:	4652      	mov	r2, sl
 8001b12:	2102      	movs	r1, #2
 8001b14:	4620      	mov	r0, r4
 8001b16:	f001 fd85 	bl	8003624 <VL53LX_get_device_results>
	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 8001b1a:	f89a 3012 	ldrb.w	r3, [sl, #18]
 8001b1e:	f888 3005 	strb.w	r3, [r8, #5]
 8001b22:	9300      	str	r3, [sp, #0]
	pMultiRangingData->TimeStamp = 0;
 8001b24:	2200      	movs	r2, #0
	pMultiRangingData->HasXtalkValueChanged =
 8001b26:	f89a 3196 	ldrb.w	r3, [sl, #406]	; 0x196
 8001b2a:	f888 3058 	strb.w	r3, [r8, #88]	; 0x58
	pMultiRangingData->TimeStamp = 0;
 8001b2e:	f8c8 2000 	str.w	r2, [r8]
	pMultiRangingData->StreamCount = presults->stream_count;
 8001b32:	f89a 3003 	ldrb.w	r3, [sl, #3]
 8001b36:	f888 3004 	strb.w	r3, [r8, #4]
	if (ActiveResults < 1)
 8001b3a:	9b00      	ldr	r3, [sp, #0]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	bf38      	it	cc
 8001b40:	2301      	movcc	r3, #1
 8001b42:	f504 5903 	add.w	r9, r4, #8384	; 0x20c0
 8001b46:	469b      	mov	fp, r3
	for (i = 0; i < iteration; i++) {
 8001b48:	f109 0910 	add.w	r9, r9, #16
 8001b4c:	eb09 010b 	add.w	r1, r9, fp
	int32_t ExtendedRangeEnabled = 0;
 8001b50:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8001b54:	f504 57a3 	add.w	r7, r4, #5216	; 0x1460
 8001b58:	f504 5303 	add.w	r3, r4, #8384	; 0x20c0
 8001b5c:	3702      	adds	r7, #2
 8001b5e:	4645      	mov	r5, r8
 8001b60:	3308      	adds	r3, #8
	SignalRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8001b62:	8b78      	ldrh	r0, [r7, #26]
	int32_t ExtendedRangeEnabled = 0;
 8001b64:	9a01      	ldr	r2, [sp, #4]
			Status = SetTargetData(Dev, ActiveResults,
 8001b66:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8001b6a:	f898 6004 	ldrb.w	r6, [r8, #4]
	int32_t ExtendedRangeEnabled = 0;
 8001b6e:	9205      	str	r2, [sp, #20]
	SignalRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8001b70:	0240      	lsls	r0, r0, #9
	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8001b72:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
		= SignalRate;
 8001b76:	60e8      	str	r0, [r5, #12]
	AmbientRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8001b78:	8bf8      	ldrh	r0, [r7, #30]
 8001b7a:	0240      	lsls	r0, r0, #9
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8001b7c:	6128      	str	r0, [r5, #16]
	TempFix1616 = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8001b7e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001b80:	0240      	lsls	r0, r0, #9
	pRangeData->SigmaMilliMeter = TempFix1616;
 8001b82:	6168      	str	r0, [r5, #20]
	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8001b84:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 8001b86:	8328      	strh	r0, [r5, #24]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 8001b88:	8e78      	ldrh	r0, [r7, #50]	; 0x32
 8001b8a:	8128      	strh	r0, [r5, #8]
	switch (device_status) {
 8001b8c:	290d      	cmp	r1, #13
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 8001b8e:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 8001b90:	8168      	strh	r0, [r5, #10]
	switch (device_status) {
 8001b92:	d015      	beq.n	8001bc0 <VL53LX_GetMultiRangingData+0xcc>
 8001b94:	d805      	bhi.n	8001ba2 <VL53LX_GetMultiRangingData+0xae>
 8001b96:	3901      	subs	r1, #1
 8001b98:	2902      	cmp	r1, #2
 8001b9a:	d804      	bhi.n	8001ba6 <VL53LX_GetMultiRangingData+0xb2>
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_HARDWARE_FAIL;
 8001b9c:	2205      	movs	r2, #5
		pRangeData->RangeStatus =
 8001b9e:	76aa      	strb	r2, [r5, #26]
 8001ba0:	e00f      	b.n	8001bc2 <VL53LX_GetMultiRangingData+0xce>
	switch (device_status) {
 8001ba2:	2911      	cmp	r1, #17
 8001ba4:	d0fa      	beq.n	8001b9c <VL53LX_GetMultiRangingData+0xa8>
	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8001ba6:	9900      	ldr	r1, [sp, #0]
 8001ba8:	2900      	cmp	r1, #0
 8001baa:	f000 8095 	beq.w	8001cd8 <VL53LX_GetMultiRangingData+0x1e4>
	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8001bae:	f002 021f 	and.w	r2, r2, #31
 8001bb2:	3a05      	subs	r2, #5
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	2a12      	cmp	r2, #18
 8001bb8:	f240 8099 	bls.w	8001cee <VL53LX_GetMultiRangingData+0x1fa>
 8001bbc:	22ff      	movs	r2, #255	; 0xff
 8001bbe:	e7ee      	b.n	8001b9e <VL53LX_GetMultiRangingData+0xaa>
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_MIN_RANGE_FAIL;
 8001bc0:	76a9      	strb	r1, [r5, #26]
	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_UWR_ENABLE,
 8001bc2:	aa05      	add	r2, sp, #20
 8001bc4:	f248 0191 	movw	r1, #32913	; 0x8091
 8001bc8:	4620      	mov	r0, r4
 8001bca:	9303      	str	r3, [sp, #12]
 8001bcc:	f000 fe6f 	bl	80028ae <VL53LX_get_tuning_parm>
	if (ExtendedRangeEnabled &&
 8001bd0:	9a05      	ldr	r2, [sp, #20]
	pRangeData->ExtendedRange = 0;
 8001bd2:	9b01      	ldr	r3, [sp, #4]
 8001bd4:	76eb      	strb	r3, [r5, #27]
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 8001bd6:	f9b5 e018 	ldrsh.w	lr, [r5, #24]
	if (ExtendedRangeEnabled &&
 8001bda:	9b03      	ldr	r3, [sp, #12]
 8001bdc:	2a00      	cmp	r2, #0
 8001bde:	d043      	beq.n	8001c68 <VL53LX_GetMultiRangingData+0x174>
		(pRangeData->RangeStatus ==
 8001be0:	7eaa      	ldrb	r2, [r5, #26]
	if (ExtendedRangeEnabled &&
 8001be2:	2a07      	cmp	r2, #7
 8001be4:	d001      	beq.n	8001bea <VL53LX_GetMultiRangingData+0xf6>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 8001be6:	2a04      	cmp	r2, #4
 8001be8:	d13e      	bne.n	8001c68 <VL53LX_GetMultiRangingData+0x174>
		&& (pdev->PreviousRangeStatus[iteration] ==
 8001bea:	f899 2000 	ldrb.w	r2, [r9]
 8001bee:	2a07      	cmp	r2, #7
 8001bf0:	d007      	beq.n	8001c02 <VL53LX_GetMultiRangingData+0x10e>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 8001bf2:	2a04      	cmp	r2, #4
 8001bf4:	d005      	beq.n	8001c02 <VL53LX_GetMultiRangingData+0x10e>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 8001bf6:	2a00      	cmp	r2, #0
 8001bf8:	d136      	bne.n	8001c68 <VL53LX_GetMultiRangingData+0x174>
			VL53LX_RANGESTATUS_RANGE_VALID &&
 8001bfa:	f899 2004 	ldrb.w	r2, [r9, #4]
 8001bfe:	2a01      	cmp	r2, #1
 8001c00:	d132      	bne.n	8001c68 <VL53LX_GetMultiRangingData+0x174>
		if (((pdev->PreviousStreamCount) ==
 8001c02:	f242 02d8 	movw	r2, #8408	; 0x20d8
 8001c06:	5ca1      	ldrb	r1, [r4, r2]
			(pdev->hist_data.result__stream_count - 1 ))
 8001c08:	f894 2477 	ldrb.w	r2, [r4, #1143]	; 0x477
 8001c0c:	1e50      	subs	r0, r2, #1
		if (((pdev->PreviousStreamCount) ==
 8001c0e:	4281      	cmp	r1, r0
 8001c10:	d002      	beq.n	8001c18 <VL53LX_GetMultiRangingData+0x124>
			(pdev->hist_data.result__stream_count + 127)))
 8001c12:	327f      	adds	r2, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 8001c14:	4291      	cmp	r1, r2
 8001c16:	d127      	bne.n	8001c68 <VL53LX_GetMultiRangingData+0x174>
		RangeDiff = pRangeData->RangeMilliMeter -
 8001c18:	881a      	ldrh	r2, [r3, #0]
		switch (pdev->preset_mode) {
 8001c1a:	7860      	ldrb	r0, [r4, #1]
		RangeDiff = pRangeData->RangeMilliMeter -
 8001c1c:	fa1f f18e 	uxth.w	r1, lr
 8001c20:	1a8a      	subs	r2, r1, r2
		switch (pdev->preset_mode) {
 8001c22:	281b      	cmp	r0, #27
	sequency = streamcount % 2;
 8001c24:	f006 0601 	and.w	r6, r6, #1
		RangeDiff = pRangeData->RangeMilliMeter -
 8001c28:	b212      	sxth	r2, r2
		switch (pdev->preset_mode) {
 8001c2a:	f000 80c4 	beq.w	8001db6 <VL53LX_GetMultiRangingData+0x2c2>
 8001c2e:	281e      	cmp	r0, #30
 8001c30:	d11a      	bne.n	8001c68 <VL53LX_GetMultiRangingData+0x174>
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8001c32:	f9b4 01be 	ldrsh.w	r0, [r4, #446]	; 0x1be
 8001c36:	4282      	cmp	r2, r0
 8001c38:	dd5c      	ble.n	8001cf4 <VL53LX_GetMultiRangingData+0x200>
 8001c3a:	f9b4 c1c0 	ldrsh.w	ip, [r4, #448]	; 0x1c0
 8001c3e:	4594      	cmp	ip, r2
 8001c40:	dd58      	ble.n	8001cf4 <VL53LX_GetMultiRangingData+0x200>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8001c42:	2e00      	cmp	r6, #0
 8001c44:	d056      	beq.n	8001cf4 <VL53LX_GetMultiRangingData+0x200>
					AddOffset =
 8001c46:	f9b4 21d4 	ldrsh.w	r2, [r4, #468]	; 0x1d4
			pRangeData->RangeMilliMeter += AddOffset;
 8001c4a:	fa11 f182 	uxtah	r1, r1, r2
 8001c4e:	8329      	strh	r1, [r5, #24]
			pRangeData->RangeMinMilliMeter += AddOffset;
 8001c50:	8969      	ldrh	r1, [r5, #10]
 8001c52:	fa11 f182 	uxtah	r1, r1, r2
 8001c56:	8169      	strh	r1, [r5, #10]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 8001c58:	8929      	ldrh	r1, [r5, #8]
 8001c5a:	fa11 f282 	uxtah	r2, r1, r2
 8001c5e:	812a      	strh	r2, [r5, #8]
			pRangeData->ExtendedRange = 1;
 8001c60:	2201      	movs	r2, #1
 8001c62:	76ea      	strb	r2, [r5, #27]
			pRangeData->RangeStatus = 0;
 8001c64:	9a01      	ldr	r2, [sp, #4]
 8001c66:	76aa      	strb	r2, [r5, #26]
	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 8001c68:	f823 eb02 	strh.w	lr, [r3], #2
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 8001c6c:	7eaa      	ldrb	r2, [r5, #26]
 8001c6e:	f809 2b01 	strb.w	r2, [r9], #1
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 8001c72:	7ee9      	ldrb	r1, [r5, #27]
 8001c74:	f889 1003 	strb.w	r1, [r9, #3]
	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8001c78:	b952      	cbnz	r2, 8001c90 <VL53LX_GetMultiRangingData+0x19c>
	Range = pRangeData->RangeMilliMeter;
 8001c7a:	f9b5 1018 	ldrsh.w	r1, [r5, #24]
	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8001c7e:	2900      	cmp	r1, #0
 8001c80:	da06      	bge.n	8001c90 <VL53LX_GetMultiRangingData+0x19c>
		if (Range < BDTable[VL53LX_TUNING_PROXY_MIN])
 8001c82:	4871      	ldr	r0, [pc, #452]	; (8001e48 <VL53LX_GetMultiRangingData+0x354>)
 8001c84:	6840      	ldr	r0, [r0, #4]
 8001c86:	4281      	cmp	r1, r0
			pRangeData->RangeStatus =
 8001c88:	bfba      	itte	lt
 8001c8a:	220e      	movlt	r2, #14
 8001c8c:	76aa      	strblt	r2, [r5, #26]
			pRangeData->RangeMilliMeter = 0;
 8001c8e:	832a      	strhge	r2, [r5, #24]
		pMultiRangingData->EffectiveSpadRtnCount =
 8001c90:	f837 2b4c 	ldrh.w	r2, [r7], #76
 8001c94:	f8a8 205a 	strh.w	r2, [r8, #90]	; 0x5a
	for (i = 0; i < iteration; i++) {
 8001c98:	9a02      	ldr	r2, [sp, #8]
 8001c9a:	454a      	cmp	r2, r9
 8001c9c:	f105 0514 	add.w	r5, r5, #20
 8001ca0:	f47f af5f 	bne.w	8001b62 <VL53LX_GetMultiRangingData+0x6e>
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 8001ca4:	f242 03d8 	movw	r3, #8408	; 0x20d8
 8001ca8:	f894 2477 	ldrb.w	r2, [r4, #1143]	; 0x477
 8001cac:	54e2      	strb	r2, [r4, r3]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8001cae:	f50b 5303 	add.w	r3, fp, #8384	; 0x20c0
 8001cb2:	3314      	adds	r3, #20
 8001cb4:	4423      	add	r3, r4
		pdev->PreviousRangeMilliMeter[i] = 0;
 8001cb6:	f1c4 447f 	rsb	r4, r4, #4278190080	; 0xff000000
 8001cba:	f504 047f 	add.w	r4, r4, #16711680	; 0xff0000
 8001cbe:	f504 445f 	add.w	r4, r4, #57088	; 0xdf00
 8001cc2:	3420      	adds	r4, #32
 8001cc4:	2200      	movs	r2, #0
		pdev->PreviousRangeStatus[i] = 255;
 8001cc6:	21ff      	movs	r1, #255	; 0xff
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8001cc8:	f1bb 0f04 	cmp.w	fp, #4
 8001ccc:	f040 80b0 	bne.w	8001e30 <VL53LX_GetMultiRangingData+0x33c>
					presults,
					pMultiRangingData);

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	b007      	add	sp, #28
 8001cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_NONE;
 8001cd8:	22ff      	movs	r2, #255	; 0xff
 8001cda:	76aa      	strb	r2, [r5, #26]
		pRangeData->SignalRateRtnMegaCps = 0;
 8001cdc:	9a00      	ldr	r2, [sp, #0]
 8001cde:	60ea      	str	r2, [r5, #12]
		pRangeData->SigmaMilliMeter = 0;
 8001ce0:	616a      	str	r2, [r5, #20]
		pRangeData->RangeMilliMeter = 8191;
 8001ce2:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001ce6:	832a      	strh	r2, [r5, #24]
		pRangeData->RangeMaxMilliMeter = 8191;
 8001ce8:	812a      	strh	r2, [r5, #8]
		pRangeData->RangeMinMilliMeter = 8191;
 8001cea:	816a      	strh	r2, [r5, #10]
	if (pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID)
 8001cec:	e769      	b.n	8001bc2 <VL53LX_GetMultiRangingData+0xce>
 8001cee:	4957      	ldr	r1, [pc, #348]	; (8001e4c <VL53LX_GetMultiRangingData+0x358>)
 8001cf0:	5c8a      	ldrb	r2, [r1, r2]
 8001cf2:	e754      	b.n	8001b9e <VL53LX_GetMultiRangingData+0xaa>
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8001cf4:	4240      	negs	r0, r0
 8001cf6:	4282      	cmp	r2, r0
 8001cf8:	da08      	bge.n	8001d0c <VL53LX_GetMultiRangingData+0x218>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8001cfa:	f9b4 01c0 	ldrsh.w	r0, [r4, #448]	; 0x1c0
 8001cfe:	4240      	negs	r0, r0
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8001d00:	4282      	cmp	r2, r0
 8001d02:	dd03      	ble.n	8001d0c <VL53LX_GetMultiRangingData+0x218>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8001d04:	b916      	cbnz	r6, 8001d0c <VL53LX_GetMultiRangingData+0x218>
					AddOffset =
 8001d06:	f9b4 21d2 	ldrsh.w	r2, [r4, #466]	; 0x1d2
		if (uwr_status) {
 8001d0a:	e79e      	b.n	8001c4a <VL53LX_GetMultiRangingData+0x156>
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8001d0c:	f9b4 01c2 	ldrsh.w	r0, [r4, #450]	; 0x1c2
 8001d10:	4282      	cmp	r2, r0
 8001d12:	dd07      	ble.n	8001d24 <VL53LX_GetMultiRangingData+0x230>
 8001d14:	f9b4 c1c4 	ldrsh.w	ip, [r4, #452]	; 0x1c4
 8001d18:	4594      	cmp	ip, r2
 8001d1a:	dd03      	ble.n	8001d24 <VL53LX_GetMultiRangingData+0x230>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8001d1c:	b916      	cbnz	r6, 8001d24 <VL53LX_GetMultiRangingData+0x230>
					AddOffset =
 8001d1e:	f9b4 21d6 	ldrsh.w	r2, [r4, #470]	; 0x1d6
		if (uwr_status) {
 8001d22:	e792      	b.n	8001c4a <VL53LX_GetMultiRangingData+0x156>
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8001d24:	4240      	negs	r0, r0
 8001d26:	4282      	cmp	r2, r0
 8001d28:	da08      	bge.n	8001d3c <VL53LX_GetMultiRangingData+0x248>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8001d2a:	f9b4 01c4 	ldrsh.w	r0, [r4, #452]	; 0x1c4
 8001d2e:	4240      	negs	r0, r0
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8001d30:	4282      	cmp	r2, r0
 8001d32:	dd03      	ble.n	8001d3c <VL53LX_GetMultiRangingData+0x248>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8001d34:	b116      	cbz	r6, 8001d3c <VL53LX_GetMultiRangingData+0x248>
					AddOffset =
 8001d36:	f9b4 21d8 	ldrsh.w	r2, [r4, #472]	; 0x1d8
		if (uwr_status) {
 8001d3a:	e786      	b.n	8001c4a <VL53LX_GetMultiRangingData+0x156>
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8001d3c:	f9b4 01c6 	ldrsh.w	r0, [r4, #454]	; 0x1c6
 8001d40:	4282      	cmp	r2, r0
 8001d42:	dd07      	ble.n	8001d54 <VL53LX_GetMultiRangingData+0x260>
 8001d44:	f9b4 c1c8 	ldrsh.w	ip, [r4, #456]	; 0x1c8
 8001d48:	4594      	cmp	ip, r2
 8001d4a:	dd03      	ble.n	8001d54 <VL53LX_GetMultiRangingData+0x260>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8001d4c:	b116      	cbz	r6, 8001d54 <VL53LX_GetMultiRangingData+0x260>
					AddOffset =
 8001d4e:	f9b4 21dc 	ldrsh.w	r2, [r4, #476]	; 0x1dc
		if (uwr_status) {
 8001d52:	e77a      	b.n	8001c4a <VL53LX_GetMultiRangingData+0x156>
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8001d54:	4240      	negs	r0, r0
 8001d56:	4282      	cmp	r2, r0
 8001d58:	da08      	bge.n	8001d6c <VL53LX_GetMultiRangingData+0x278>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8001d5a:	f9b4 01c8 	ldrsh.w	r0, [r4, #456]	; 0x1c8
 8001d5e:	4240      	negs	r0, r0
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8001d60:	4282      	cmp	r2, r0
 8001d62:	dd03      	ble.n	8001d6c <VL53LX_GetMultiRangingData+0x278>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8001d64:	b916      	cbnz	r6, 8001d6c <VL53LX_GetMultiRangingData+0x278>
					AddOffset =
 8001d66:	f9b4 21da 	ldrsh.w	r2, [r4, #474]	; 0x1da
		if (uwr_status) {
 8001d6a:	e76e      	b.n	8001c4a <VL53LX_GetMultiRangingData+0x156>
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8001d6c:	f9b4 01ca 	ldrsh.w	r0, [r4, #458]	; 0x1ca
 8001d70:	4282      	cmp	r2, r0
 8001d72:	dd07      	ble.n	8001d84 <VL53LX_GetMultiRangingData+0x290>
 8001d74:	f9b4 c1cc 	ldrsh.w	ip, [r4, #460]	; 0x1cc
 8001d78:	4594      	cmp	ip, r2
 8001d7a:	dd03      	ble.n	8001d84 <VL53LX_GetMultiRangingData+0x290>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8001d7c:	b916      	cbnz	r6, 8001d84 <VL53LX_GetMultiRangingData+0x290>
					AddOffset =
 8001d7e:	f9b4 21de 	ldrsh.w	r2, [r4, #478]	; 0x1de
		if (uwr_status) {
 8001d82:	e762      	b.n	8001c4a <VL53LX_GetMultiRangingData+0x156>
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8001d84:	4240      	negs	r0, r0
 8001d86:	4282      	cmp	r2, r0
 8001d88:	da08      	bge.n	8001d9c <VL53LX_GetMultiRangingData+0x2a8>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8001d8a:	f9b4 01cc 	ldrsh.w	r0, [r4, #460]	; 0x1cc
 8001d8e:	4240      	negs	r0, r0
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8001d90:	4282      	cmp	r2, r0
 8001d92:	dd03      	ble.n	8001d9c <VL53LX_GetMultiRangingData+0x2a8>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8001d94:	b116      	cbz	r6, 8001d9c <VL53LX_GetMultiRangingData+0x2a8>
					AddOffset =
 8001d96:	f9b4 21e0 	ldrsh.w	r2, [r4, #480]	; 0x1e0
		if (uwr_status) {
 8001d9a:	e756      	b.n	8001c4a <VL53LX_GetMultiRangingData+0x156>
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8001d9c:	f9b4 01d0 	ldrsh.w	r0, [r4, #464]	; 0x1d0
 8001da0:	4290      	cmp	r0, r2
 8001da2:	f77f af61 	ble.w	8001c68 <VL53LX_GetMultiRangingData+0x174>
 8001da6:	f9b4 01ce 	ldrsh.w	r0, [r4, #462]	; 0x1ce
 8001daa:	4290      	cmp	r0, r2
 8001dac:	f6bf af5c 	bge.w	8001c68 <VL53LX_GetMultiRangingData+0x174>
					AddOffset =
 8001db0:	f9b4 21e2 	ldrsh.w	r2, [r4, #482]	; 0x1e2
		if (uwr_status) {
 8001db4:	e749      	b.n	8001c4a <VL53LX_GetMultiRangingData+0x156>
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8001db6:	f9b4 01e6 	ldrsh.w	r0, [r4, #486]	; 0x1e6
 8001dba:	4282      	cmp	r2, r0
 8001dbc:	dd07      	ble.n	8001dce <VL53LX_GetMultiRangingData+0x2da>
 8001dbe:	f9b4 c1e8 	ldrsh.w	ip, [r4, #488]	; 0x1e8
 8001dc2:	4594      	cmp	ip, r2
 8001dc4:	dd03      	ble.n	8001dce <VL53LX_GetMultiRangingData+0x2da>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8001dc6:	b916      	cbnz	r6, 8001dce <VL53LX_GetMultiRangingData+0x2da>
					AddOffset =
 8001dc8:	f9b4 21fa 	ldrsh.w	r2, [r4, #506]	; 0x1fa
		if (uwr_status) {
 8001dcc:	e73d      	b.n	8001c4a <VL53LX_GetMultiRangingData+0x156>
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8001dce:	4240      	negs	r0, r0
 8001dd0:	4282      	cmp	r2, r0
 8001dd2:	da08      	bge.n	8001de6 <VL53LX_GetMultiRangingData+0x2f2>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8001dd4:	f9b4 01e8 	ldrsh.w	r0, [r4, #488]	; 0x1e8
 8001dd8:	4240      	negs	r0, r0
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8001dda:	4282      	cmp	r2, r0
 8001ddc:	dd03      	ble.n	8001de6 <VL53LX_GetMultiRangingData+0x2f2>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8001dde:	b116      	cbz	r6, 8001de6 <VL53LX_GetMultiRangingData+0x2f2>
					AddOffset =
 8001de0:	f9b4 21fc 	ldrsh.w	r2, [r4, #508]	; 0x1fc
		if (uwr_status) {
 8001de4:	e731      	b.n	8001c4a <VL53LX_GetMultiRangingData+0x156>
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8001de6:	f9b4 01ea 	ldrsh.w	r0, [r4, #490]	; 0x1ea
 8001dea:	4282      	cmp	r2, r0
 8001dec:	dd07      	ble.n	8001dfe <VL53LX_GetMultiRangingData+0x30a>
 8001dee:	f9b4 c1ec 	ldrsh.w	ip, [r4, #492]	; 0x1ec
 8001df2:	4594      	cmp	ip, r2
 8001df4:	dd03      	ble.n	8001dfe <VL53LX_GetMultiRangingData+0x30a>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8001df6:	b116      	cbz	r6, 8001dfe <VL53LX_GetMultiRangingData+0x30a>
					AddOffset =
 8001df8:	f9b4 2200 	ldrsh.w	r2, [r4, #512]	; 0x200
		if (uwr_status) {
 8001dfc:	e725      	b.n	8001c4a <VL53LX_GetMultiRangingData+0x156>
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8001dfe:	4240      	negs	r0, r0
 8001e00:	4282      	cmp	r2, r0
 8001e02:	da08      	bge.n	8001e16 <VL53LX_GetMultiRangingData+0x322>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8001e04:	f9b4 01ec 	ldrsh.w	r0, [r4, #492]	; 0x1ec
 8001e08:	4240      	negs	r0, r0
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8001e0a:	4282      	cmp	r2, r0
 8001e0c:	dd03      	ble.n	8001e16 <VL53LX_GetMultiRangingData+0x322>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8001e0e:	b916      	cbnz	r6, 8001e16 <VL53LX_GetMultiRangingData+0x322>
					AddOffset =
 8001e10:	f9b4 21fe 	ldrsh.w	r2, [r4, #510]	; 0x1fe
		if (uwr_status) {
 8001e14:	e719      	b.n	8001c4a <VL53LX_GetMultiRangingData+0x156>
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8001e16:	f9b4 01f0 	ldrsh.w	r0, [r4, #496]	; 0x1f0
 8001e1a:	4290      	cmp	r0, r2
 8001e1c:	f77f af24 	ble.w	8001c68 <VL53LX_GetMultiRangingData+0x174>
 8001e20:	f9b4 01ee 	ldrsh.w	r0, [r4, #494]	; 0x1ee
 8001e24:	4290      	cmp	r0, r2
 8001e26:	f6bf af1f 	bge.w	8001c68 <VL53LX_GetMultiRangingData+0x174>
					AddOffset =
 8001e2a:	f9b4 2202 	ldrsh.w	r2, [r4, #514]	; 0x202
		if (uwr_status) {
 8001e2e:	e70c      	b.n	8001c4a <VL53LX_GetMultiRangingData+0x156>
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8001e30:	f10b 0001 	add.w	r0, fp, #1
		pdev->PreviousRangeMilliMeter[i] = 0;
 8001e34:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8001e38:	fa5f fb80 	uxtb.w	fp, r0
		pdev->PreviousRangeStatus[i] = 255;
 8001e3c:	f803 1c04 	strb.w	r1, [r3, #-4]
		pdev->PreviousExtendedRange[i] = 0;
 8001e40:	f803 2b01 	strb.w	r2, [r3], #1
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8001e44:	e740      	b.n	8001cc8 <VL53LX_GetMultiRangingData+0x1d4>
 8001e46:	bf00      	nop
 8001e48:	20000004 	.word	0x20000004
 8001e4c:	0800c4d8 	.word	0x0800c4d8

08001e50 <VL53LX_SmudgeCorrectionEnable>:
}


VL53LX_Error VL53LX_SmudgeCorrectionEnable(VL53LX_DEV Dev,
		VL53LX_SmudgeCorrectionModes Mode)
{
 8001e50:	b570      	push	{r4, r5, r6, lr}
 8001e52:	4605      	mov	r5, r0
 8001e54:	2903      	cmp	r1, #3
 8001e56:	d82a      	bhi.n	8001eae <VL53LX_SmudgeCorrectionEnable+0x5e>
 8001e58:	e8df f001 	tbb	[pc, r1]
 8001e5c:	21140902 	.word	0x21140902

	LOG_FUNCTION_START("");

	switch (Mode) {
	case VL53LX_SMUDGE_CORRECTION_NONE:
		s1 = VL53LX_dynamic_xtalk_correction_disable(Dev);
 8001e60:	f001 fe64 	bl	8003b2c <VL53LX_dynamic_xtalk_correction_disable>
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_enable(Dev);
		break;
	case VL53LX_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8001e64:	4606      	mov	r6, r0
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 8001e66:	4628      	mov	r0, r5
 8001e68:	f001 fe66 	bl	8003b38 <VL53LX_dynamic_xtalk_correction_apply_disable>
 8001e6c:	e005      	b.n	8001e7a <VL53LX_SmudgeCorrectionEnable+0x2a>
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8001e6e:	f001 fe57 	bl	8003b20 <VL53LX_dynamic_xtalk_correction_enable>
 8001e72:	4606      	mov	r6, r0
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 8001e74:	4628      	mov	r0, r5
 8001e76:	f001 fe71 	bl	8003b5c <VL53LX_dynamic_xtalk_correction_apply_enable>
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 8001e7a:	4604      	mov	r4, r0
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8001e7c:	4628      	mov	r0, r5
 8001e7e:	f001 fe67 	bl	8003b50 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
		break;
 8001e82:	e009      	b.n	8001e98 <VL53LX_SmudgeCorrectionEnable+0x48>
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8001e84:	f001 fe4c 	bl	8003b20 <VL53LX_dynamic_xtalk_correction_enable>
 8001e88:	4606      	mov	r6, r0
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 8001e8a:	4628      	mov	r0, r5
 8001e8c:	f001 fe66 	bl	8003b5c <VL53LX_dynamic_xtalk_correction_apply_enable>
 8001e90:	4604      	mov	r4, r0
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_enable(Dev);
 8001e92:	4628      	mov	r0, r5
 8001e94:	f001 fe56 	bl	8003b44 <VL53LX_dynamic_xtalk_correction_single_apply_enable>
		break;
	}

	if (Status == VL53LX_ERROR_NONE) {
		Status = s1;
		if (Status == VL53LX_ERROR_NONE)
 8001e98:	b126      	cbz	r6, 8001ea4 <VL53LX_SmudgeCorrectionEnable+0x54>
 8001e9a:	4634      	mov	r4, r6
		if (Status == VL53LX_ERROR_NONE)
			Status = s3;
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001e9c:	e005      	b.n	8001eaa <VL53LX_SmudgeCorrectionEnable+0x5a>
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8001e9e:	f001 fe3f 	bl	8003b20 <VL53LX_dynamic_xtalk_correction_enable>
 8001ea2:	e7df      	b.n	8001e64 <VL53LX_SmudgeCorrectionEnable+0x14>
		if (Status == VL53LX_ERROR_NONE)
 8001ea4:	2c00      	cmp	r4, #0
 8001ea6:	bf08      	it	eq
 8001ea8:	4604      	moveq	r4, r0
}
 8001eaa:	4620      	mov	r0, r4
 8001eac:	bd70      	pop	{r4, r5, r6, pc}
		if (Status == VL53LX_ERROR_NONE)
 8001eae:	f06f 0403 	mvn.w	r4, #3
 8001eb2:	e7fa      	b.n	8001eaa <VL53LX_SmudgeCorrectionEnable+0x5a>

08001eb4 <VL53LX_DataInit>:
{
 8001eb4:	b510      	push	{r4, lr}
		Status = VL53LX_data_init(Dev, 1);
 8001eb6:	2101      	movs	r1, #1
{
 8001eb8:	4604      	mov	r4, r0
		Status = VL53LX_data_init(Dev, 1);
 8001eba:	f000 f9fb 	bl	80022b4 <VL53LX_data_init>
	if (Status == VL53LX_ERROR_NONE)
 8001ebe:	b9d8      	cbnz	r0, 8001ef8 <VL53LX_DataInit+0x44>
		Status = SetPresetModeL3CX(Dev,
 8001ec0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ec4:	2102      	movs	r1, #2
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	f7ff fd76 	bl	80019b8 <SetPresetModeL3CX>
	if (Status == VL53LX_ERROR_NONE)
 8001ecc:	b9a0      	cbnz	r0, 8001ef8 <VL53LX_DataInit+0x44>
		Status = VL53LX_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8001ece:	f248 2135 	movw	r1, #33333	; 0x8235
 8001ed2:	4620      	mov	r0, r4
 8001ed4:	f7ff fdae 	bl	8001a34 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
	if (Status == VL53LX_ERROR_NONE) {
 8001ed8:	b970      	cbnz	r0, 8001ef8 <VL53LX_DataInit+0x44>
		memset(&pdev->per_vcsel_cal_data, 0,
 8001eda:	f641 4238 	movw	r2, #7224	; 0x1c38
 8001ede:	18a3      	adds	r3, r4, r2
 8001ee0:	50a0      	str	r0, [r4, r2]
		Status = VL53LX_set_dmax_mode(Dev,
 8001ee2:	2102      	movs	r1, #2
		memset(&pdev->per_vcsel_cal_data, 0,
 8001ee4:	6058      	str	r0, [r3, #4]
 8001ee6:	6098      	str	r0, [r3, #8]
		Status = VL53LX_set_dmax_mode(Dev,
 8001ee8:	4620      	mov	r0, r4
 8001eea:	f000 fcca 	bl	8002882 <VL53LX_set_dmax_mode>
	if (Status == VL53LX_ERROR_NONE)
 8001eee:	b918      	cbnz	r0, 8001ef8 <VL53LX_DataInit+0x44>
		Status = VL53LX_SmudgeCorrectionEnable(Dev,
 8001ef0:	4601      	mov	r1, r0
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	f7ff ffac 	bl	8001e50 <VL53LX_SmudgeCorrectionEnable>
	VL53LXDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8001ef8:	2320      	movs	r3, #32
 8001efa:	70e3      	strb	r3, [r4, #3]
	VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 8001efc:	f504 5429 	add.w	r4, r4, #10816	; 0x2a40
 8001f00:	2302      	movs	r3, #2
 8001f02:	7023      	strb	r3, [r4, #0]
}
 8001f04:	bd10      	pop	{r4, pc}

08001f06 <VL53LX_set_inter_measurement_period_ms>:
	VL53LX_Error  status = VL53LX_ERROR_NONE;
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8001f06:	f241 339c 	movw	r3, #5020	; 0x139c
 8001f0a:	5ac3      	ldrh	r3, [r0, r3]
 8001f0c:	b12b      	cbz	r3, 8001f1a <VL53LX_set_inter_measurement_period_ms+0x14>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;

	if (status == VL53LX_ERROR_NONE) {
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8001f0e:	6141      	str	r1, [r0, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
 8001f10:	4359      	muls	r1, r3
		pdev->tim_cfg.system__intermeasurement_period =
 8001f12:	f8c0 137c 	str.w	r1, [r0, #892]	; 0x37c
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8001f16:	2000      	movs	r0, #0
 8001f18:	4770      	bx	lr
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8001f1a:	f06f 000e 	mvn.w	r0, #14
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8001f1e:	4770      	bx	lr

08001f20 <VL53LX_set_timeouts_us>:
VL53LX_Error VL53LX_set_timeouts_us(
	VL53LX_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8001f20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001f22:	4604      	mov	r4, r0
 8001f24:	4608      	mov	r0, r1
 8001f26:	4611      	mov	r1, r2
 8001f28:	461a      	mov	r2, r3
	VL53LX_LLDriverData_t *pdev =
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8001f2a:	f8b4 3316 	ldrh.w	r3, [r4, #790]	; 0x316
 8001f2e:	b163      	cbz	r3, 8001f4a <VL53LX_set_timeouts_us+0x2a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;

	if (status == VL53LX_ERROR_NONE) {

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8001f30:	e9c4 0102 	strd	r0, r1, [r4, #8]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8001f34:	6122      	str	r2, [r4, #16]

		status =
		VL53LX_calc_timeout_register_values(
 8001f36:	f504 755b 	add.w	r5, r4, #876	; 0x36c
 8001f3a:	f204 3456 	addw	r4, r4, #854	; 0x356
 8001f3e:	9501      	str	r5, [sp, #4]
 8001f40:	9400      	str	r4, [sp, #0]
 8001f42:	f002 fca6 	bl	8004892 <VL53LX_calc_timeout_register_values>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8001f46:	b003      	add	sp, #12
 8001f48:	bd30      	pop	{r4, r5, pc}
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8001f4a:	f06f 000e 	mvn.w	r0, #14
 8001f4e:	e7fa      	b.n	8001f46 <VL53LX_set_timeouts_us+0x26>

08001f50 <VL53LX_get_timeouts_us>:
VL53LX_Error VL53LX_get_timeouts_us(
	VL53LX_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8001f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f52:	4604      	mov	r4, r0
	uint32_t  macro_period_us = 0;
	uint16_t  timeout_encoded = 0;

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8001f54:	f8b0 0316 	ldrh.w	r0, [r0, #790]	; 0x316
{
 8001f58:	460f      	mov	r7, r1
 8001f5a:	4616      	mov	r6, r2
 8001f5c:	461d      	mov	r5, r3
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8001f5e:	b348      	cbz	r0, 8001fb4 <VL53LX_get_timeouts_us+0x64>

	if (status == VL53LX_ERROR_NONE) {


		macro_period_us =
			VL53LX_calc_macro_period_us(
 8001f60:	f894 1372 	ldrb.w	r1, [r4, #882]	; 0x372
 8001f64:	f002 fc20 	bl	80047a8 <VL53LX_calc_macro_period_us>
 8001f68:	4601      	mov	r1, r0
			pdev->tim_cfg.range_config__vcsel_period_a);



		*pphasecal_config_timeout_us =
			VL53LX_calc_timeout_us(
 8001f6a:	9001      	str	r0, [sp, #4]
 8001f6c:	f894 035d 	ldrb.w	r0, [r4, #861]	; 0x35d
 8001f70:	f002 fc5a 	bl	8004828 <VL53LX_calc_timeout_us>
		*pphasecal_config_timeout_us =
 8001f74:	6038      	str	r0, [r7, #0]
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
			macro_period_us);



		timeout_encoded =
 8001f76:	f894 336c 	ldrb.w	r3, [r4, #876]	; 0x36c
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
		timeout_encoded = (timeout_encoded << 8) +
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8001f7a:	f894 036d 	ldrb.w	r0, [r4, #877]	; 0x36d

		*pmm_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 8001f7e:	9901      	ldr	r1, [sp, #4]
		timeout_encoded = (timeout_encoded << 8) +
 8001f80:	eb00 2003 	add.w	r0, r0, r3, lsl #8
			VL53LX_calc_decoded_timeout_us(
 8001f84:	b280      	uxth	r0, r0
 8001f86:	f002 fc78 	bl	800487a <VL53LX_calc_decoded_timeout_us>
		*pmm_config_timeout_us =
 8001f8a:	6030      	str	r0, [r6, #0]
				timeout_encoded,
				macro_period_us);



		timeout_encoded =
 8001f8c:	f894 3370 	ldrb.w	r3, [r4, #880]	; 0x370
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
		timeout_encoded = (timeout_encoded << 8) +
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8001f90:	f894 0371 	ldrb.w	r0, [r4, #881]	; 0x371

		*prange_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 8001f94:	9901      	ldr	r1, [sp, #4]
		timeout_encoded = (timeout_encoded << 8) +
 8001f96:	eb00 2003 	add.w	r0, r0, r3, lsl #8
			VL53LX_calc_decoded_timeout_us(
 8001f9a:	b280      	uxth	r0, r0
 8001f9c:	f002 fc6d 	bl	800487a <VL53LX_calc_decoded_timeout_us>
		*prange_config_timeout_us =
 8001fa0:	6028      	str	r0, [r5, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	60a3      	str	r3, [r4, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8001fa6:	6833      	ldr	r3, [r6, #0]
 8001fa8:	60e3      	str	r3, [r4, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8001faa:	682b      	ldr	r3, [r5, #0]
 8001fac:	6123      	str	r3, [r4, #16]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8001fae:	2000      	movs	r0, #0
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8001fb0:	b003      	add	sp, #12
 8001fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8001fb4:	f06f 000e 	mvn.w	r0, #14
 8001fb8:	e7fa      	b.n	8001fb0 <VL53LX_get_timeouts_us+0x60>

08001fba <VL53LX_set_user_zone>:


VL53LX_Error VL53LX_set_user_zone(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *puser_zone)
{
 8001fba:	b538      	push	{r3, r4, r5, lr}
 8001fbc:	460c      	mov	r4, r1
 8001fbe:	4605      	mov	r5, r0
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");


	VL53LX_encode_row_col(
 8001fc0:	f200 3293 	addw	r2, r0, #915	; 0x393
 8001fc4:	7809      	ldrb	r1, [r1, #0]
 8001fc6:	7860      	ldrb	r0, [r4, #1]
 8001fc8:	f002 ff36 	bl	8004e38 <VL53LX_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53LX_encode_zone_size(
 8001fcc:	78a0      	ldrb	r0, [r4, #2]
 8001fce:	78e1      	ldrb	r1, [r4, #3]
 8001fd0:	f505 7265 	add.w	r2, r5, #916	; 0x394
 8001fd4:	f002 ff3c 	bl	8004e50 <VL53LX_encode_zone_size>


	LOG_FUNCTION_END(status);

	return status;
}
 8001fd8:	2000      	movs	r0, #0
 8001fda:	bd38      	pop	{r3, r4, r5, pc}

08001fdc <VL53LX_get_mode_mitigation_roi>:


VL53LX_Error VL53LX_get_mode_mitigation_roi(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *pmm_roi)
{
 8001fdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001fde:	460c      	mov	r4, r1


	VL53LX_Error  status = VL53LX_ERROR_NONE;
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	uint8_t  x       = 0;
 8001fe0:	2600      	movs	r6, #0
{
 8001fe2:	4605      	mov	r5, r0
	uint8_t  xy_size = 0;

	LOG_FUNCTION_START("");


	VL53LX_decode_row_col(
 8001fe4:	f10d 0206 	add.w	r2, sp, #6
 8001fe8:	f890 03fa 	ldrb.w	r0, [r0, #1018]	; 0x3fa
	uint8_t  x       = 0;
 8001fec:	f88d 6006 	strb.w	r6, [sp, #6]
	VL53LX_decode_row_col(
 8001ff0:	f10d 0107 	add.w	r1, sp, #7
	uint8_t  y       = 0;
 8001ff4:	f88d 6007 	strb.w	r6, [sp, #7]
	VL53LX_decode_row_col(
 8001ff8:	f003 ffe6 	bl	8005fc8 <VL53LX_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8001ffc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002000:	7023      	strb	r3, [r4, #0]
	pmm_roi->y_centre = y;
 8002002:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002006:	7063      	strb	r3, [r4, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8002008:	f895 33fb 	ldrb.w	r3, [r5, #1019]	; 0x3fb
	pmm_roi->width  = xy_size & 0x0F;

	LOG_FUNCTION_END(status);

	return status;
}
 800200c:	4630      	mov	r0, r6
	pmm_roi->height = xy_size >> 4;
 800200e:	091a      	lsrs	r2, r3, #4
	pmm_roi->width  = xy_size & 0x0F;
 8002010:	f003 030f 	and.w	r3, r3, #15
	pmm_roi->height = xy_size >> 4;
 8002014:	70e2      	strb	r2, [r4, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8002016:	70a3      	strb	r3, [r4, #2]
}
 8002018:	b002      	add	sp, #8
 800201a:	bd70      	pop	{r4, r5, r6, pc}

0800201c <VL53LX_read_p2p_data>:
{
 800201c:	b5f0      	push	{r4, r5, r6, r7, lr}
		status = VL53LX_get_static_nvm_managed(
 800201e:	f500 7144 	add.w	r1, r0, #784	; 0x310
{
 8002022:	b089      	sub	sp, #36	; 0x24
 8002024:	4604      	mov	r4, r0
		status = VL53LX_get_static_nvm_managed(
 8002026:	f005 fbf0 	bl	800780a <VL53LX_get_static_nvm_managed>
	if (status == VL53LX_ERROR_NONE)
 800202a:	4605      	mov	r5, r0
 800202c:	2800      	cmp	r0, #0
 800202e:	d17d      	bne.n	800212c <VL53LX_read_p2p_data+0x110>
		status = VL53LX_get_customer_nvm_managed(
 8002030:	f104 0148 	add.w	r1, r4, #72	; 0x48
 8002034:	4620      	mov	r0, r4
 8002036:	f005 fc95 	bl	8007964 <VL53LX_get_customer_nvm_managed>
	if (status == VL53LX_ERROR_NONE) {
 800203a:	4605      	mov	r5, r0
 800203c:	2800      	cmp	r0, #0
 800203e:	d175      	bne.n	800212c <VL53LX_read_p2p_data+0x110>
		status = VL53LX_get_nvm_copy_data(
 8002040:	f204 37ca 	addw	r7, r4, #970	; 0x3ca
 8002044:	4639      	mov	r1, r7
 8002046:	4620      	mov	r0, r4
 8002048:	f006 f846 	bl	80080d8 <VL53LX_get_nvm_copy_data>
		if (status == VL53LX_ERROR_NONE)
 800204c:	4605      	mov	r5, r0
 800204e:	2800      	cmp	r0, #0
 8002050:	d16c      	bne.n	800212c <VL53LX_read_p2p_data+0x110>
			VL53LX_copy_rtn_good_spads_to_buffer(
 8002052:	f504 7604 	add.w	r6, r4, #528	; 0x210
 8002056:	4631      	mov	r1, r6
 8002058:	4638      	mov	r0, r7
 800205a:	f002 fa23 	bl	80044a4 <VL53LX_copy_rtn_good_spads_to_buffer>
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 800205e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002062:	f8c4 3278 	str.w	r3, [r4, #632]	; 0x278
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8002066:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
 800206a:	f8a4 327c 	strh.w	r3, [r4, #636]	; 0x27c
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800206e:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8002072:	f8a4 327e 	strh.w	r3, [r4, #638]	; 0x27e
			VL53LX_read_nvm_optical_centre(
 8002076:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
 800207a:	4620      	mov	r0, r4
 800207c:	f005 fb25 	bl	80076ca <VL53LX_read_nvm_optical_centre>
	if (status == VL53LX_ERROR_NONE)
 8002080:	4605      	mov	r5, r0
 8002082:	2800      	cmp	r0, #0
 8002084:	d152      	bne.n	800212c <VL53LX_read_p2p_data+0x110>
			VL53LX_read_nvm_cal_peak_rate_map(
 8002086:	f104 0160 	add.w	r1, r4, #96	; 0x60
 800208a:	4620      	mov	r0, r4
 800208c:	f005 fb34 	bl	80076f8 <VL53LX_read_nvm_cal_peak_rate_map>
	if (status == VL53LX_ERROR_NONE) {
 8002090:	4605      	mov	r5, r0
 8002092:	2800      	cmp	r0, #0
 8002094:	d14a      	bne.n	800212c <VL53LX_read_p2p_data+0x110>
	VL53LX_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 8002096:	f104 079c 	add.w	r7, r4, #156	; 0x9c
			VL53LX_read_nvm_additional_offset_cal_data(
 800209a:	4639      	mov	r1, r7
 800209c:	4620      	mov	r0, r4
 800209e:	f005 fb3b 	bl	8007718 <VL53LX_read_nvm_additional_offset_cal_data>
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 80020a2:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
			VL53LX_read_nvm_additional_offset_cal_data(
 80020a6:	4605      	mov	r5, r0
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 80020a8:	b9c3      	cbnz	r3, 80020dc <VL53LX_read_p2p_data+0xc0>
 80020aa:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
 80020ae:	b9ab      	cbnz	r3, 80020dc <VL53LX_read_p2p_data+0xc0>
					= 0x0080;
 80020b0:	2380      	movs	r3, #128	; 0x80
 80020b2:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
					= 0x0180;
 80020b6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80020ba:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			VL53LX_calc_mm_effective_spads(
 80020be:	f104 039e 	add.w	r3, r4, #158	; 0x9e
 80020c2:	e9cd 7302 	strd	r7, r3, [sp, #8]
 80020c6:	2338      	movs	r3, #56	; 0x38
 80020c8:	e9cd 6300 	strd	r6, r3, [sp]
 80020cc:	f894 13fb 	ldrb.w	r1, [r4, #1019]	; 0x3fb
 80020d0:	f894 03fa 	ldrb.w	r0, [r4, #1018]	; 0x3fa
 80020d4:	23ff      	movs	r3, #255	; 0xff
 80020d6:	22c7      	movs	r2, #199	; 0xc7
 80020d8:	f002 ff51 	bl	8004f7e <VL53LX_calc_mm_effective_spads>
	if (status == VL53LX_ERROR_NONE) {
 80020dc:	bb35      	cbnz	r5, 800212c <VL53LX_read_p2p_data+0x110>
			VL53LX_read_nvm_fmt_range_results_data(
 80020de:	aa04      	add	r2, sp, #16
 80020e0:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80020e4:	4620      	mov	r0, r4
 80020e6:	f005 fb26 	bl	8007736 <VL53LX_read_nvm_fmt_range_results_data>
		if (status == VL53LX_ERROR_NONE) {
 80020ea:	4605      	mov	r5, r0
 80020ec:	b9f0      	cbnz	r0, 800212c <VL53LX_read_p2p_data+0x110>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 80020ee:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80020f2:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 80020f6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80020fa:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
 80020fe:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8002102:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 8002106:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800210a:	2b00      	cmp	r3, #0
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 800210c:	bf08      	it	eq
 800210e:	2314      	moveq	r3, #20
 8002110:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			VL53LX_RdWord(
 8002114:	f504 529c 	add.w	r2, r4, #4992	; 0x1380
			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 8002118:	f44f 7380 	mov.w	r3, #256	; 0x100
 800211c:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
			VL53LX_RdWord(
 8002120:	321c      	adds	r2, #28
 8002122:	21de      	movs	r1, #222	; 0xde
 8002124:	4620      	mov	r0, r4
 8002126:	f7ff fa41 	bl	80015ac <VL53LX_RdWord>
 800212a:	4605      	mov	r5, r0
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 800212c:	f8b4 3316 	ldrh.w	r3, [r4, #790]	; 0x316
 8002130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8002134:	bf3c      	itt	cc
 8002136:	f64b 43cc 	movwcc	r3, #48332	; 0xbccc
 800213a:	f8a4 3316 	strhcc.w	r3, [r4, #790]	; 0x316
	if (status == VL53LX_ERROR_NONE)
 800213e:	b92d      	cbnz	r5, 800214c <VL53LX_read_p2p_data+0x130>
			VL53LX_get_mode_mitigation_roi(
 8002140:	f104 01bc 	add.w	r1, r4, #188	; 0xbc
 8002144:	4620      	mov	r0, r4
 8002146:	f7ff ff49 	bl	8001fdc <VL53LX_get_mode_mitigation_roi>
 800214a:	4605      	mov	r5, r0
	if (pdev->optical_centre.x_centre == 0 &&
 800214c:	f8b4 30c0 	ldrh.w	r3, [r4, #192]	; 0xc0
 8002150:	b94b      	cbnz	r3, 8002166 <VL53LX_read_p2p_data+0x14a>
				pdev->mm_roi.x_centre << 4;
 8002152:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 8002156:	011b      	lsls	r3, r3, #4
		pdev->optical_centre.x_centre =
 8002158:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
				pdev->mm_roi.y_centre << 4;
 800215c:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
 8002160:	011b      	lsls	r3, r3, #4
		pdev->optical_centre.y_centre =
 8002162:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
}
 8002166:	4628      	mov	r0, r5
 8002168:	b009      	add	sp, #36	; 0x24
 800216a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800216c <VL53LX_get_preset_mode_timing_cfg>:
	VL53LX_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 800216c:	b530      	push	{r4, r5, lr}
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 800216e:	291e      	cmp	r1, #30
{
 8002170:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
	switch (device_preset_mode) {
 8002174:	d011      	beq.n	800219a <VL53LX_get_preset_mode_timing_cfg+0x2e>
 8002176:	2921      	cmp	r1, #33	; 0x21
 8002178:	d015      	beq.n	80021a6 <VL53LX_get_preset_mode_timing_cfg+0x3a>
 800217a:	291b      	cmp	r1, #27
 800217c:	d119      	bne.n	80021b2 <VL53LX_get_preset_mode_timing_cfg+0x46>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 800217e:	f8b0 115e 	ldrh.w	r1, [r0, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8002182:	8011      	strh	r1, [r2, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8002184:	f8d0 216c 	ldr.w	r2, [r0, #364]	; 0x16c
	break;

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
		*pphasecal_config_timeout_us =
 8002188:	601a      	str	r2, [r3, #0]
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 800218a:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
		*pmm_config_timeout_us =
 800218e:	602b      	str	r3, [r5, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 8002190:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
		*prange_config_timeout_us =
 8002194:	6023      	str	r3, [r4, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002196:	2000      	movs	r0, #0
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8002198:	bd30      	pop	{r4, r5, pc}
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 800219a:	f8b0 115e 	ldrh.w	r1, [r0, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 800219e:	8011      	strh	r1, [r2, #0]
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 80021a0:	f8d0 2170 	ldr.w	r2, [r0, #368]	; 0x170
 80021a4:	e7f0      	b.n	8002188 <VL53LX_get_preset_mode_timing_cfg+0x1c>
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 80021a6:	f8b0 115e 	ldrh.w	r1, [r0, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 80021aa:	8011      	strh	r1, [r2, #0]
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 80021ac:	f8d0 2174 	ldr.w	r2, [r0, #372]	; 0x174
 80021b0:	e7ea      	b.n	8002188 <VL53LX_get_preset_mode_timing_cfg+0x1c>
	switch (device_preset_mode) {
 80021b2:	f06f 0003 	mvn.w	r0, #3
 80021b6:	e7ef      	b.n	8002198 <VL53LX_get_preset_mode_timing_cfg+0x2c>

080021b8 <VL53LX_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 80021b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021bc:	ed2d 8b02 	vpush	{d8}
 80021c0:	b08b      	sub	sp, #44	; 0x2c
 80021c2:	ee08 3a10 	vmov	s16, r3
	VL53LX_hist_post_process_config_t *phistpostprocess =
			&(pdev->histpostprocess);

	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
	VL53LX_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 80021c6:	f200 3356 	addw	r3, r0, #854	; 0x356
 80021ca:	9308      	str	r3, [sp, #32]
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 80021cc:	f500 7361 	add.w	r3, r0, #900	; 0x384
 80021d0:	9306      	str	r3, [sp, #24]

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 80021d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80021d4:	60c3      	str	r3, [r0, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 80021d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80021d8:	6103      	str	r3, [r0, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80021da:	9b18      	ldr	r3, [sp, #96]	; 0x60
{
 80021dc:	9207      	str	r2, [sp, #28]
 80021de:	4688      	mov	r8, r1
	VL53LX_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 80021e0:	f500 7247 	add.w	r2, r0, #796	; 0x31c
	pdev->preset_mode                 = device_preset_mode;
 80021e4:	7041      	strb	r1, [r0, #1]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80021e6:	6143      	str	r3, [r0, #20]



	VL53LX_init_ll_driver_state(
 80021e8:	2103      	movs	r1, #3
	VL53LX_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 80021ea:	9209      	str	r2, [sp, #36]	; 0x24
{
 80021ec:	4604      	mov	r4, r0
	VL53LX_hist_post_process_config_t *phistpostprocess =
 80021ee:	f500 7513 	add.w	r5, r0, #588	; 0x24c
	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 80021f2:	f200 3636 	addw	r6, r0, #822	; 0x336
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 80021f6:	f500 775b 	add.w	r7, r0, #876	; 0x36c
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 80021fa:	f500 7966 	add.w	r9, r0, #920	; 0x398
	VL53LX_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 80021fe:	f100 0bc2 	add.w	fp, r0, #194	; 0xc2
	VL53LX_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8002202:	f500 7a98 	add.w	sl, r0, #304	; 0x130
	VL53LX_init_ll_driver_state(
 8002206:	f002 f8e7 	bl	80043d8 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 800220a:	f1b8 0f1e 	cmp.w	r8, #30
 800220e:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8002212:	d033      	beq.n	800227c <VL53LX_set_preset_mode+0xc4>
 8002214:	f1b8 0f21 	cmp.w	r8, #33	; 0x21
 8002218:	d03c      	beq.n	8002294 <VL53LX_set_preset_mode+0xdc>
 800221a:	f1b8 0f1b 	cmp.w	r8, #27
 800221e:	d145      	bne.n	80022ac <VL53LX_set_preset_mode+0xf4>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:

		status = VL53LX_preset_mode_histogram_long_range(
 8002220:	9906      	ldr	r1, [sp, #24]
 8002222:	f8cd 9008 	str.w	r9, [sp, #8]
 8002226:	e9cd 7100 	strd	r7, r1, [sp]
 800222a:	e9cd ab03 	strd	sl, fp, [sp, #12]
 800222e:	4631      	mov	r1, r6
 8002230:	4628      	mov	r0, r5
 8002232:	f001 ff61 	bl	80040f8 <VL53LX_preset_mode_histogram_long_range>
					ptuning_parms,
					pzone_cfg);
		break;

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53LX_preset_mode_histogram_short_range(
 8002236:	4605      	mov	r5, r0

	}



	if (status == VL53LX_ERROR_NONE) {
 8002238:	b988      	cbnz	r0, 800225e <VL53LX_set_preset_mode+0xa6>

		pstatic->dss_config__target_total_rate_mcps =
 800223a:	9b07      	ldr	r3, [sp, #28]
 800223c:	f8a4 3336 	strh.w	r3, [r4, #822]	; 0x336
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8002240:	8323      	strh	r3, [r4, #24]



	if (status == VL53LX_ERROR_NONE)
		status =
			VL53LX_set_timeouts_us(
 8002242:	ee18 1a10 	vmov	r1, s16
 8002246:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800224a:	4620      	mov	r0, r4
 800224c:	f7ff fe68 	bl	8001f20 <VL53LX_set_timeouts_us>
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53LX_ERROR_NONE)
 8002250:	4605      	mov	r5, r0
 8002252:	b920      	cbnz	r0, 800225e <VL53LX_set_preset_mode+0xa6>
		status =
			VL53LX_set_inter_measurement_period_ms(
 8002254:	9918      	ldr	r1, [sp, #96]	; 0x60
 8002256:	4620      	mov	r0, r4
 8002258:	f7ff fe55 	bl	8001f06 <VL53LX_set_inter_measurement_period_ms>
 800225c:	4605      	mov	r5, r0
				Dev,
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
 800225e:	f894 00c3 	ldrb.w	r0, [r4, #195]	; 0xc3
 8002262:	f504 510c 	add.w	r1, r4, #8960	; 0x2300
 8002266:	3001      	adds	r0, #1
 8002268:	3124      	adds	r1, #36	; 0x24
 800226a:	b2c0      	uxtb	r0, r0
 800226c:	f002 f985 	bl	800457a <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
}
 8002270:	4628      	mov	r0, r5
 8002272:	b00b      	add	sp, #44	; 0x2c
 8002274:	ecbd 8b02 	vpop	{d8}
 8002278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = VL53LX_preset_mode_histogram_medium_range(
 800227c:	9906      	ldr	r1, [sp, #24]
 800227e:	f8cd 9008 	str.w	r9, [sp, #8]
 8002282:	e9cd 7100 	strd	r7, r1, [sp]
 8002286:	e9cd ab03 	strd	sl, fp, [sp, #12]
 800228a:	4631      	mov	r1, r6
 800228c:	4628      	mov	r0, r5
 800228e:	f001 ff9f 	bl	80041d0 <VL53LX_preset_mode_histogram_medium_range>
 8002292:	e7d0      	b.n	8002236 <VL53LX_set_preset_mode+0x7e>
		status = VL53LX_preset_mode_histogram_short_range(
 8002294:	9906      	ldr	r1, [sp, #24]
 8002296:	f8cd 9008 	str.w	r9, [sp, #8]
 800229a:	e9cd 7100 	strd	r7, r1, [sp]
 800229e:	e9cd ab03 	strd	sl, fp, [sp, #12]
 80022a2:	4631      	mov	r1, r6
 80022a4:	4628      	mov	r0, r5
 80022a6:	f001 fffb 	bl	80042a0 <VL53LX_preset_mode_histogram_short_range>
 80022aa:	e7c4      	b.n	8002236 <VL53LX_set_preset_mode+0x7e>
	switch (device_preset_mode) {
 80022ac:	f06f 0503 	mvn.w	r5, #3
 80022b0:	e7d5      	b.n	800225e <VL53LX_set_preset_mode+0xa6>
	...

080022b4 <VL53LX_data_init>:
{
 80022b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80022b6:	4604      	mov	r4, r0
 80022b8:	460e      	mov	r6, r1
	VL53LX_init_ll_driver_state(
 80022ba:	2162      	movs	r1, #98	; 0x62
 80022bc:	f002 f88c 	bl	80043d8 <VL53LX_init_ll_driver_state>
	pres->range_results.max_results    = VL53LX_MAX_RANGE_RESULTS;
 80022c0:	f504 5003 	add.w	r0, r4, #8384	; 0x20c0
 80022c4:	3020      	adds	r0, #32
 80022c6:	2304      	movs	r3, #4
 80022c8:	7443      	strb	r3, [r0, #17]
	pres->zone_results.max_zones       = VL53LX_MAX_USER_ZONES;
 80022ca:	f242 3324 	movw	r3, #8996	; 0x2324
 80022ce:	2110      	movs	r1, #16
	pres->range_results.active_results = 0;
 80022d0:	2200      	movs	r2, #0
 80022d2:	7482      	strb	r2, [r0, #18]
	pres->zone_results.max_zones       = VL53LX_MAX_USER_ZONES;
 80022d4:	52e1      	strh	r1, [r4, r3]
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80022d6:	f504 530d 	add.w	r3, r4, #9024	; 0x2340
 80022da:	f504 511e 	add.w	r1, r4, #10112	; 0x2780
 80022de:	3320      	adds	r3, #32
 80022e0:	3120      	adds	r1, #32
		pobjects->xmonitor.VL53LX_p_011          = 0;
 80022e2:	811a      	strh	r2, [r3, #8]
		pobjects->xmonitor.range_status =
 80022e4:	729a      	strb	r2, [r3, #10]
		pobjects->xmonitor.VL53LX_p_017  = 0;
 80022e6:	e9c3 2200 	strd	r2, r2, [r3]
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80022ea:	3344      	adds	r3, #68	; 0x44
 80022ec:	4299      	cmp	r1, r3
 80022ee:	d1f8      	bne.n	80022e2 <VL53LX_data_init+0x2e>
	pres->zone_hists.max_zones         = VL53LX_MAX_USER_ZONES;
 80022f0:	f242 7168 	movw	r1, #10088	; 0x2768
 80022f4:	2310      	movs	r3, #16
 80022f6:	5263      	strh	r3, [r4, r1]
		pres->zone_cal.VL53LX_p_003[i].no_of_samples   = 0;
 80022f8:	2500      	movs	r5, #0
	pres->zone_cal.max_zones           = VL53LX_MAX_USER_ZONES;
 80022fa:	f880 379b 	strb.w	r3, [r0, #1947]	; 0x79b
	pres->zone_cal.active_zones        = 0;
 80022fe:	f880 279c 	strb.w	r2, [r0, #1948]	; 0x79c
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8002302:	f504 5322 	add.w	r3, r4, #10368	; 0x2880
 8002306:	f504 5229 	add.w	r2, r4, #10816	; 0x2a40
		pres->zone_cal.VL53LX_p_003[i].peak_rate_mcps  = 0;
 800230a:	609d      	str	r5, [r3, #8]
		pres->zone_cal.VL53LX_p_003[i].effective_spads = 0;
 800230c:	e9c3 5500 	strd	r5, r5, [r3]
		pres->zone_cal.VL53LX_p_003[i].range_mm_offset = 0;
 8002310:	e9c3 5505 	strd	r5, r5, [r3, #20]
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8002314:	331c      	adds	r3, #28
 8002316:	4293      	cmp	r3, r2
 8002318:	d1f7      	bne.n	800230a <VL53LX_data_init+0x56>
	pdev->wait_method             = VL53LX_WAIT_METHOD_BLOCKING;
 800231a:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800231e:	6023      	str	r3, [r4, #0]
	pdev->offset_calibration_mode =
 8002320:	f240 1301 	movw	r3, #257	; 0x101
 8002324:	80a3      	strh	r3, [r4, #4]
	pdev->dmax_mode  =
 8002326:	2301      	movs	r3, #1
 8002328:	71a3      	strb	r3, [r4, #6]
	pdev->mm_config_timeout_us        =  2000;
 800232a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800232e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002332:	e9c4 2302 	strd	r2, r3, [r4, #8]
	pdev->inter_measurement_period_ms =   100;
 8002336:	f243 21c8 	movw	r1, #13000	; 0x32c8
 800233a:	2364      	movs	r3, #100	; 0x64
 800233c:	e9c4 1304 	strd	r1, r3, [r4, #16]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8002340:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002344:	8323      	strh	r3, [r4, #24]
	pdev->offset_results.max_results    = VL53LX_MAX_OFFSET_RANGE_RESULTS;
 8002346:	f241 331a 	movw	r3, #4890	; 0x131a
 800234a:	2203      	movs	r2, #3
	pdev->debug_mode                  =  0x00;
 800234c:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
	pdev->offset_results.max_results    = VL53LX_MAX_OFFSET_RANGE_RESULTS;
 8002350:	52e2      	strh	r2, [r4, r3]
	pdev->gain_cal.standard_ranging_gain_factor =
 8002352:	4b41      	ldr	r3, [pc, #260]	; (8002458 <VL53LX_data_init+0x1a4>)
 8002354:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
	VL53LX_init_version(Dev);
 8002358:	4620      	mov	r0, r4
 800235a:	f002 f834 	bl	80043c6 <VL53LX_init_version>
	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 800235e:	f504 50e2 	add.w	r0, r4, #7232	; 0x1c40
 8002362:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8002366:	2100      	movs	r1, #0
 8002368:	3008      	adds	r0, #8
 800236a:	f007 fa95 	bl	8009898 <memset>
	pdev->bin_rec_pos = 0;
 800236e:	f641 4344 	movw	r3, #7236	; 0x1c44
 8002372:	52e5      	strh	r5, [r4, r3]
	if (read_p2p_data > 0 && status == VL53LX_ERROR_NONE)
 8002374:	2e00      	cmp	r6, #0
 8002376:	d14a      	bne.n	800240e <VL53LX_data_init+0x15a>
		status = VL53LX_init_refspadchar_config_struct(
 8002378:	f504 700c 	add.w	r0, r4, #560	; 0x230
 800237c:	f001 fbf4 	bl	8003b68 <VL53LX_init_refspadchar_config_struct>
	if (status == VL53LX_ERROR_NONE)
 8002380:	4605      	mov	r5, r0
 8002382:	2800      	cmp	r0, #0
 8002384:	d149      	bne.n	800241a <VL53LX_data_init+0x166>
		status = VL53LX_init_ssc_config_struct(
 8002386:	f504 7010 	add.w	r0, r4, #576	; 0x240
 800238a:	f001 fbfd 	bl	8003b88 <VL53LX_init_ssc_config_struct>
	if (status == VL53LX_ERROR_NONE)
 800238e:	4605      	mov	r5, r0
 8002390:	2800      	cmp	r0, #0
 8002392:	d142      	bne.n	800241a <VL53LX_data_init+0x166>
		status = VL53LX_init_xtalk_config_struct(
 8002394:	f504 7131 	add.w	r1, r4, #708	; 0x2c4
 8002398:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800239c:	f001 fc00 	bl	8003ba0 <VL53LX_init_xtalk_config_struct>
	if (status == VL53LX_ERROR_NONE)
 80023a0:	4605      	mov	r5, r0
 80023a2:	2800      	cmp	r0, #0
 80023a4:	d139      	bne.n	800241a <VL53LX_data_init+0x166>
		status = VL53LX_init_xtalk_extract_config_struct(
 80023a6:	f504 702a 	add.w	r0, r4, #680	; 0x2a8
 80023aa:	f001 fc23 	bl	8003bf4 <VL53LX_init_xtalk_extract_config_struct>
	if (status == VL53LX_ERROR_NONE)
 80023ae:	4605      	mov	r5, r0
 80023b0:	bb98      	cbnz	r0, 800241a <VL53LX_data_init+0x166>
		status = VL53LX_init_offset_cal_config_struct(
 80023b2:	f504 703a 	add.w	r0, r4, #744	; 0x2e8
 80023b6:	f001 fc37 	bl	8003c28 <VL53LX_init_offset_cal_config_struct>
	if (status == VL53LX_ERROR_NONE)
 80023ba:	4605      	mov	r5, r0
 80023bc:	bb68      	cbnz	r0, 800241a <VL53LX_data_init+0x166>
		status = VL53LX_init_zone_cal_config_struct(
 80023be:	f504 703f 	add.w	r0, r4, #764	; 0x2fc
 80023c2:	f001 fc43 	bl	8003c4c <VL53LX_init_zone_cal_config_struct>
	if (status == VL53LX_ERROR_NONE)
 80023c6:	4605      	mov	r5, r0
 80023c8:	bb38      	cbnz	r0, 800241a <VL53LX_data_init+0x166>
		status = VL53LX_init_hist_post_process_config_struct(
 80023ca:	f894 02d4 	ldrb.w	r0, [r4, #724]	; 0x2d4
 80023ce:	f504 7113 	add.w	r1, r4, #588	; 0x24c
 80023d2:	f001 fc4d 	bl	8003c70 <VL53LX_init_hist_post_process_config_struct>
	if (status == VL53LX_ERROR_NONE)
 80023d6:	4605      	mov	r5, r0
 80023d8:	b9f8      	cbnz	r0, 800241a <VL53LX_data_init+0x166>
		status = VL53LX_init_hist_gen3_dmax_config_struct(
 80023da:	f504 7023 	add.w	r0, r4, #652	; 0x28c
 80023de:	f001 fd1f 	bl	8003e20 <VL53LX_init_hist_gen3_dmax_config_struct>
	if (status == VL53LX_ERROR_NONE)
 80023e2:	4605      	mov	r5, r0
 80023e4:	b9c8      	cbnz	r0, 800241a <VL53LX_data_init+0x166>
		status = VL53LX_init_tuning_parm_storage_struct(
 80023e6:	f504 7098 	add.w	r0, r4, #304	; 0x130
 80023ea:	f001 fc73 	bl	8003cd4 <VL53LX_init_tuning_parm_storage_struct>
	if (status == VL53LX_ERROR_NONE)
 80023ee:	4605      	mov	r5, r0
 80023f0:	b998      	cbnz	r0, 800241a <VL53LX_data_init+0x166>
		status = VL53LX_set_preset_mode(
 80023f2:	6963      	ldr	r3, [r4, #20]
 80023f4:	9302      	str	r3, [sp, #8]
 80023f6:	6923      	ldr	r3, [r4, #16]
 80023f8:	9301      	str	r3, [sp, #4]
 80023fa:	68e3      	ldr	r3, [r4, #12]
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	8b22      	ldrh	r2, [r4, #24]
 8002400:	68a3      	ldr	r3, [r4, #8]
 8002402:	7861      	ldrb	r1, [r4, #1]
 8002404:	4620      	mov	r0, r4
 8002406:	f7ff fed7 	bl	80021b8 <VL53LX_set_preset_mode>
 800240a:	4605      	mov	r5, r0
 800240c:	e005      	b.n	800241a <VL53LX_data_init+0x166>
		status = VL53LX_read_p2p_data(Dev);
 800240e:	4620      	mov	r0, r4
 8002410:	f7ff fe04 	bl	800201c <VL53LX_read_p2p_data>
	if (status == VL53LX_ERROR_NONE)
 8002414:	4605      	mov	r5, r0
 8002416:	2800      	cmp	r0, #0
 8002418:	d0ae      	beq.n	8002378 <VL53LX_data_init+0xc4>
	VL53LX_init_histogram_bin_data_struct(
 800241a:	f504 727f 	add.w	r2, r4, #1020	; 0x3fc
 800241e:	2118      	movs	r1, #24
 8002420:	2000      	movs	r0, #0
 8002422:	f003 fd99 	bl	8005f58 <VL53LX_init_histogram_bin_data_struct>
	VL53LX_init_histogram_bin_data_struct(
 8002426:	f504 6295 	add.w	r2, r4, #1192	; 0x4a8
 800242a:	2118      	movs	r1, #24
 800242c:	2000      	movs	r0, #0
 800242e:	f003 fd93 	bl	8005f58 <VL53LX_init_histogram_bin_data_struct>
	VL53LX_init_xtalk_bin_data_struct(
 8002432:	f204 5254 	addw	r2, r4, #1364	; 0x554
 8002436:	210c      	movs	r1, #12
 8002438:	2000      	movs	r0, #0
 800243a:	f002 f93a 	bl	80046b2 <VL53LX_init_xtalk_bin_data_struct>
	VL53LX_xtalk_cal_data_init(
 800243e:	4620      	mov	r0, r4
 8002440:	f003 f95a 	bl	80056f8 <VL53LX_xtalk_cal_data_init>
	VL53LX_dynamic_xtalk_correction_data_init(
 8002444:	4620      	mov	r0, r4
 8002446:	f003 f8ed 	bl	8005624 <VL53LX_dynamic_xtalk_correction_data_init>
	VL53LX_low_power_auto_data_init(
 800244a:	4620      	mov	r0, r4
 800244c:	f003 f965 	bl	800571a <VL53LX_low_power_auto_data_init>
}
 8002450:	4628      	mov	r0, r5
 8002452:	b004      	add	sp, #16
 8002454:	bd70      	pop	{r4, r5, r6, pc}
 8002456:	bf00      	nop
 8002458:	07c307db 	.word	0x07c307db

0800245c <VL53LX_get_measurement_results>:


VL53LX_Error VL53LX_get_measurement_results(
	VL53LX_DEV                     Dev,
	VL53LX_DeviceResultsLevel      device_results_level)
{
 800245c:	b530      	push	{r4, r5, lr}

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 800245e:	2901      	cmp	r1, #1
{
 8002460:	b0c1      	sub	sp, #260	; 0x104
 8002462:	4604      	mov	r4, r0
 8002464:	460d      	mov	r5, r1
	switch (device_results_level) {
 8002466:	d01c      	beq.n	80024a2 <VL53LX_get_measurement_results+0x46>
				(VL53LX_CORE_RESULTS_I2C_INDEX +
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
	default:
		i2c_buffer_size_bytes =
 8002468:	2902      	cmp	r1, #2
 800246a:	bf0c      	ite	eq
 800246c:	2386      	moveq	r3, #134	; 0x86
 800246e:	232c      	movne	r3, #44	; 0x2c



	if (status == VL53LX_ERROR_NONE)
		status =
			VL53LX_ReadMulti(
 8002470:	466a      	mov	r2, sp
 8002472:	2188      	movs	r1, #136	; 0x88
 8002474:	4620      	mov	r0, r4
 8002476:	f7ff f843 	bl	8001500 <VL53LX_ReadMulti>
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_FULL &&
 800247a:	2d01      	cmp	r5, #1
 800247c:	d913      	bls.n	80024a6 <VL53LX_get_measurement_results+0x4a>
 800247e:	b9d8      	cbnz	r0, 80024b8 <VL53LX_get_measurement_results+0x5c>

		i2c_buffer_offset_bytes =
				VL53LX_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_debug_results(
 8002480:	f504 529c 	add.w	r2, r4, #4992	; 0x1380
 8002484:	3214      	adds	r2, #20
 8002486:	f10d 014e 	add.w	r1, sp, #78	; 0x4e
 800248a:	2038      	movs	r0, #56	; 0x38
 800248c:	f005 fca6 	bl	8007ddc <VL53LX_i2c_decode_debug_results>
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
				pdebug_results);
	}

	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_UPTO_CORE &&
 8002490:	b990      	cbnz	r0, 80024b8 <VL53LX_get_measurement_results+0x5c>

		i2c_buffer_offset_bytes =
				VL53LX_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_core_results(
 8002492:	f504 529b 	add.w	r2, r4, #4960	; 0x1360
 8002496:	3210      	adds	r2, #16
 8002498:	a90b      	add	r1, sp, #44	; 0x2c
 800249a:	2021      	movs	r0, #33	; 0x21
 800249c:	f005 fc63 	bl	8007d66 <VL53LX_i2c_decode_core_results>
 80024a0:	e003      	b.n	80024aa <VL53LX_get_measurement_results+0x4e>
		i2c_buffer_size_bytes =
 80024a2:	234d      	movs	r3, #77	; 0x4d
 80024a4:	e7e4      	b.n	8002470 <VL53LX_get_measurement_results+0x14>
	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_UPTO_CORE &&
 80024a6:	2d00      	cmp	r5, #0
 80024a8:	d1f2      	bne.n	8002490 <VL53LX_get_measurement_results+0x34>
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
				pcore_results);
	}

	if (status == VL53LX_ERROR_NONE) {
 80024aa:	b928      	cbnz	r0, 80024b8 <VL53LX_get_measurement_results+0x5c>

		i2c_buffer_offset_bytes = 0;
		status =
			VL53LX_i2c_decode_system_results(
 80024ac:	f204 329e 	addw	r2, r4, #926	; 0x39e
 80024b0:	4669      	mov	r1, sp
 80024b2:	202c      	movs	r0, #44	; 0x2c
 80024b4:	f005 fbc8 	bl	8007c48 <VL53LX_i2c_decode_system_results>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80024b8:	b041      	add	sp, #260	; 0x104
 80024ba:	bd30      	pop	{r4, r5, pc}

080024bc <VL53LX_copy_sys_and_core_results_to_range_results>:
void VL53LX_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore,
	VL53LX_range_results_t           *presults)
{
 80024bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 80024c0:	2500      	movs	r5, #0
 80024c2:	709d      	strb	r5, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
	presults->wrap_dmax_mm    = 0;
	presults->max_results     = VL53LX_MAX_RANGE_RESULTS;
 80024c4:	2404      	movs	r4, #4
	presults->stream_count    = psys->result__stream_count;
 80024c6:	f891 8003 	ldrb.w	r8, [r1, #3]
	presults->max_results     = VL53LX_MAX_RANGE_RESULTS;
 80024ca:	745c      	strb	r4, [r3, #17]
	presults->active_results  = 1;
 80024cc:	2401      	movs	r4, #1
	presults->stream_count    = psys->result__stream_count;
 80024ce:	f883 8003 	strb.w	r8, [r3, #3]
	presults->active_results  = 1;
 80024d2:	749c      	strb	r4, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 80024d4:	8a0c      	ldrh	r4, [r1, #16]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 80024d6:	f8b1 9014 	ldrh.w	r9, [r1, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 80024da:	f8b1 a012 	ldrh.w	sl, [r1, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 80024de:	9401      	str	r4, [sp, #4]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
		presults->VL53LX_p_022[i] = 0;
 80024e0:	e9c3 5501 	strd	r5, r5, [r3, #4]
{
 80024e4:	9000      	str	r0, [sp, #0]
		presults->VL53LX_p_022[i] = 0;
 80024e6:	60dd      	str	r5, [r3, #12]

	pdata = &(presults->VL53LX_p_003[0]);

	for (i = 0; i < 2; i++) {
 80024e8:	f103 0460 	add.w	r4, r3, #96	; 0x60

		pdata->range_id     = i;
		pdata->time_stamp   = 0;
 80024ec:	462f      	mov	r7, r5

			pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd1;
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
			pdata->avg_signal_count_rate_mcps =
 80024ee:	f64f 7eff 	movw	lr, #65535	; 0xffff
		pdata->range_id     = i;
 80024f2:	f804 5c4c 	strb.w	r5, [r4, #-76]
		pdata->time_stamp   = 0;
 80024f6:	f844 7c48 	str.w	r7, [r4, #-72]
		if ((psys->result__stream_count == 0) &&
 80024fa:	784e      	ldrb	r6, [r1, #1]
 80024fc:	f006 061f 	and.w	r6, r6, #31
 8002500:	f1b8 0f00 	cmp.w	r8, #0
 8002504:	d168      	bne.n	80025d8 <VL53LX_copy_sys_and_core_results_to_range_results+0x11c>
 8002506:	2e09      	cmp	r6, #9
 8002508:	bf14      	ite	ne
 800250a:	46b4      	movne	ip, r6
 800250c:	f04f 0c13 	moveq.w	ip, #19
 8002510:	f804 cc02 	strb.w	ip, [r4, #-2]
		pdata->VL53LX_p_012 = 0;
 8002514:	f804 7c44 	strb.w	r7, [r4, #-68]
		pdata->VL53LX_p_019    = 0;
 8002518:	f804 7c43 	strb.w	r7, [r4, #-67]
		pdata->VL53LX_p_023   = 0;
 800251c:	f804 7c42 	strb.w	r7, [r4, #-66]
		pdata->VL53LX_p_024     = 0;
 8002520:	f804 7c41 	strb.w	r7, [r4, #-65]
		pdata->VL53LX_p_013   = 0;
 8002524:	f804 7c40 	strb.w	r7, [r4, #-64]
		pdata->VL53LX_p_025    = 0;
 8002528:	f804 7c3f 	strb.w	r7, [r4, #-63]
		switch (i) {
 800252c:	2d00      	cmp	r5, #0
 800252e:	d15f      	bne.n	80025f0 <VL53LX_copy_sys_and_core_results_to_range_results+0x134>
			if (psys->result__report_status ==
 8002530:	f891 c002 	ldrb.w	ip, [r1, #2]
 8002534:	f1bc 0f07 	cmp.w	ip, #7
 8002538:	d150      	bne.n	80025dc <VL53LX_copy_sys_and_core_results_to_range_results+0x120>
				pdata->VL53LX_p_004 =
 800253a:	f824 ac36 	strh.w	sl, [r4, #-54]
			pdata->peak_signal_count_rate_mcps =
 800253e:	9801      	ldr	r0, [sp, #4]
 8002540:	f824 0c1c 	strh.w	r0, [r4, #-28]
				psys->result__avg_signal_count_rate_mcps_sd0;
 8002544:	f8b1 c016 	ldrh.w	ip, [r1, #22]
			pdata->avg_signal_count_rate_mcps =
 8002548:	f824 cc1a 	strh.w	ip, [r4, #-26]
				psys->result__ambient_count_rate_mcps_sd0;
 800254c:	f8b1 c008 	ldrh.w	ip, [r1, #8]
			pdata->ambient_count_rate_mcps =
 8002550:	f824 cc18 	strh.w	ip, [r4, #-24]
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8002554:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
			range_mm *= gain_factor;
 8002558:	9800      	ldr	r0, [sp, #0]
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800255a:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 800255e:	45f4      	cmp	ip, lr
 8002560:	bf28      	it	cs
 8002562:	46f4      	movcs	ip, lr
 8002564:	f824 cc10 	strh.w	ip, [r4, #-16]
				psys->result__phase_sd0;
 8002568:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
			pdata->VL53LX_p_011 =
 800256c:	f824 cc0c 	strh.w	ip, [r4, #-12]
			range_mm = (int32_t)(
 8002570:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
			range_mm *= gain_factor;
 8002574:	fb0c fc00 	mul.w	ip, ip, r0
			pdata->VL53LX_p_017 =
 8002578:	6850      	ldr	r0, [r2, #4]
 800257a:	f844 0c24 	str.w	r0, [r4, #-36]
			pdata->VL53LX_p_010 =
 800257e:	6890      	ldr	r0, [r2, #8]
 8002580:	f844 0c20 	str.w	r0, [r4, #-32]
			pdata->total_periods_elapsed =
 8002584:	68d0      	ldr	r0, [r2, #12]
 8002586:	f844 0c34 	str.w	r0, [r4, #-52]
			range_mm /= 0x0800;
 800258a:	f51c 6b80 	adds.w	fp, ip, #1024	; 0x400
 800258e:	bf48      	it	mi
 8002590:	f60c 3bff 	addwmi	fp, ip, #3071	; 0xbff
 8002594:	ea4f 2beb 	mov.w	fp, fp, asr #11
			pdata->VL53LX_p_016 =
 8002598:	6810      	ldr	r0, [r2, #0]
			pdata->median_range_mm = (int16_t)range_mm;
 800259a:	f824 bc06 	strh.w	fp, [r4, #-6]

			break;
		}


		pdata->VL53LX_p_026    = pdata->VL53LX_p_011;
 800259e:	f834 cc0c 	ldrh.w	ip, [r4, #-12]
 80025a2:	f824 cc0e 	strh.w	ip, [r4, #-14]
		pdata->VL53LX_p_027    = pdata->VL53LX_p_011;
 80025a6:	f824 cc0a 	strh.w	ip, [r4, #-10]
		pdata->min_range_mm = pdata->median_range_mm;
 80025aa:	f934 cc06 	ldrsh.w	ip, [r4, #-6]
			pdata->VL53LX_p_016 =
 80025ae:	f844 0c28 	str.w	r0, [r4, #-40]
		pdata->min_range_mm = pdata->median_range_mm;
 80025b2:	f824 cc08 	strh.w	ip, [r4, #-8]
		pdata->max_range_mm = pdata->median_range_mm;
 80025b6:	f824 cc04 	strh.w	ip, [r4, #-4]
	for (i = 0; i < 2; i++) {
 80025ba:	344c      	adds	r4, #76	; 0x4c
 80025bc:	b155      	cbz	r5, 80025d4 <VL53LX_copy_sys_and_core_results_to_range_results+0x118>

	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;



	switch (psys->result__range_status &
 80025be:	2e11      	cmp	r6, #17
 80025c0:	d803      	bhi.n	80025ca <VL53LX_copy_sys_and_core_results_to_range_results+0x10e>
 80025c2:	4a28      	ldr	r2, [pc, #160]	; (8002664 <VL53LX_copy_sys_and_core_results_to_range_results+0x1a8>)
 80025c4:	40b5      	lsls	r5, r6
 80025c6:	4215      	tst	r5, r2
 80025c8:	d146      	bne.n	8002658 <VL53LX_copy_sys_and_core_results_to_range_results+0x19c>
	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 80025ca:	2200      	movs	r2, #0
 80025cc:	741a      	strb	r2, [r3, #16]
	break;

	}

	LOG_FUNCTION_END(0);
}
 80025ce:	b003      	add	sp, #12
 80025d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025d4:	2501      	movs	r5, #1
 80025d6:	e78c      	b.n	80024f2 <VL53LX_copy_sys_and_core_results_to_range_results+0x36>
 80025d8:	46b4      	mov	ip, r6
 80025da:	e799      	b.n	8002510 <VL53LX_copy_sys_and_core_results_to_range_results+0x54>
			else if (psys->result__report_status ==
 80025dc:	f1bc 0f08 	cmp.w	ip, #8
				psys->result__dss_actual_effective_spads_sd0;
 80025e0:	bf16      	itet	ne
 80025e2:	f8b1 c004 	ldrhne.w	ip, [r1, #4]
				pdata->VL53LX_p_004 =
 80025e6:	f824 9c36 	strheq.w	r9, [r4, #-54]
				pdata->VL53LX_p_004 =
 80025ea:	f824 cc36 	strhne.w	ip, [r4, #-54]
 80025ee:	e7a6      	b.n	800253e <VL53LX_copy_sys_and_core_results_to_range_results+0x82>
				psys->result__dss_actual_effective_spads_sd1;
 80025f0:	f8b1 c018 	ldrh.w	ip, [r1, #24]
			pdata->VL53LX_p_004 =
 80025f4:	f824 cc36 	strh.w	ip, [r4, #-54]
				psys->result__peak_signal_count_rate_mcps_sd1;
 80025f8:	f8b1 c01a 	ldrh.w	ip, [r1, #26]
			pdata->peak_signal_count_rate_mcps =
 80025fc:	f824 cc1c 	strh.w	ip, [r4, #-28]
			pdata->avg_signal_count_rate_mcps =
 8002600:	f824 ec1a 	strh.w	lr, [r4, #-26]
				psys->result__ambient_count_rate_mcps_sd1;
 8002604:	f8b1 c01c 	ldrh.w	ip, [r1, #28]
			pdata->ambient_count_rate_mcps =
 8002608:	f824 cc18 	strh.w	ip, [r4, #-24]
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800260c:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
			range_mm *= gain_factor;
 8002610:	9800      	ldr	r0, [sp, #0]
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8002612:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 8002616:	45f4      	cmp	ip, lr
 8002618:	bf28      	it	cs
 800261a:	46f4      	movcs	ip, lr
 800261c:	f824 cc10 	strh.w	ip, [r4, #-16]
				psys->result__phase_sd1;
 8002620:	f8b1 c020 	ldrh.w	ip, [r1, #32]
			pdata->VL53LX_p_011 =
 8002624:	f824 cc0c 	strh.w	ip, [r4, #-12]
			range_mm = (int32_t)(
 8002628:	f8b1 c022 	ldrh.w	ip, [r1, #34]	; 0x22
			range_mm *= gain_factor;
 800262c:	fb00 fc0c 	mul.w	ip, r0, ip
			pdata->VL53LX_p_017 =
 8002630:	6950      	ldr	r0, [r2, #20]
 8002632:	f844 0c24 	str.w	r0, [r4, #-36]
			pdata->VL53LX_p_010 =
 8002636:	6990      	ldr	r0, [r2, #24]
 8002638:	f844 0c20 	str.w	r0, [r4, #-32]
			range_mm /= 0x0800;
 800263c:	f51c 6b80 	adds.w	fp, ip, #1024	; 0x400
			pdata->total_periods_elapsed  =
 8002640:	69d0      	ldr	r0, [r2, #28]
 8002642:	f844 0c34 	str.w	r0, [r4, #-52]
			range_mm /= 0x0800;
 8002646:	bf48      	it	mi
 8002648:	f60c 3bff 	addwmi	fp, ip, #3071	; 0xbff
 800264c:	ea4f 2beb 	mov.w	fp, fp, asr #11
			pdata->VL53LX_p_016 =
 8002650:	6910      	ldr	r0, [r2, #16]
			pdata->median_range_mm = (int16_t)range_mm;
 8002652:	f824 bc06 	strh.w	fp, [r4, #-6]
			pdata->VL53LX_p_016 =
 8002656:	e7a2      	b.n	800259e <VL53LX_copy_sys_and_core_results_to_range_results+0xe2>
		presults->VL53LX_p_003[0].range_status =
 8002658:	2200      	movs	r2, #0
		presults->device_status = (psys->result__range_status &
 800265a:	741e      	strb	r6, [r3, #16]
		presults->VL53LX_p_003[0].range_status =
 800265c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
}
 8002660:	e7b5      	b.n	80025ce <VL53LX_copy_sys_and_core_results_to_range_results+0x112>
 8002662:	bf00      	nop
 8002664:	0002200e 	.word	0x0002200e

08002668 <VL53LX_set_zone_dss_config>:
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 8002668:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800266c:	2b05      	cmp	r3, #5
		VL53LX_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 800266e:	bf01      	itttt	eq
 8002670:	2302      	moveq	r3, #2
 8002672:	f880 3360 	strbeq.w	r3, [r0, #864]	; 0x360
		VL53LX_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8002676:	888b      	ldrheq	r3, [r1, #4]
 8002678:	f8a0 3366 	strheq.w	r3, [r0, #870]	; 0x366
			pzone_dyn_cfg->dss_requested_effective_spad_count;
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 800267c:	bf1c      	itt	ne
 800267e:	2301      	movne	r3, #1
 8002680:	f880 3360 	strbne.w	r3, [r0, #864]	; 0x360
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
}
 8002684:	2000      	movs	r0, #0
 8002686:	4770      	bx	lr

08002688 <VL53LX_init_and_start_range>:
{
 8002688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		(psystem->system__mode_start &
 800268c:	f890 339c 	ldrb.w	r3, [r0, #924]	; 0x39c
	pdev->measurement_mode = measurement_mode;
 8002690:	70c1      	strb	r1, [r0, #3]
		(psystem->system__mode_start &
 8002692:	f003 030f 	and.w	r3, r3, #15
		VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8002696:	4319      	orrs	r1, r3
	psystem->system__mode_start =
 8002698:	f880 139c 	strb.w	r1, [r0, #924]	; 0x39c
		VL53LX_set_user_zone(
 800269c:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
{
 80026a0:	4604      	mov	r4, r0
		VL53LX_set_user_zone(
 80026a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
{
 80026a6:	b0c0      	sub	sp, #256	; 0x100
		VL53LX_set_user_zone(
 80026a8:	31de      	adds	r1, #222	; 0xde
{
 80026aa:	4615      	mov	r5, r2
		VL53LX_set_user_zone(
 80026ac:	f7ff fc85 	bl	8001fba <VL53LX_set_user_zone>
	if (pdev->zone_cfg.active_zones > 0) {
 80026b0:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
 80026b4:	b153      	cbz	r3, 80026cc <VL53LX_init_and_start_range+0x44>
		VL53LX_set_zone_dss_config(
 80026b6:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
 80026ba:	230a      	movs	r3, #10
 80026bc:	fb03 4101 	mla	r1, r3, r1, r4
 80026c0:	f501 510a 	add.w	r1, r1, #8832	; 0x2280
 80026c4:	3102      	adds	r1, #2
 80026c6:	4620      	mov	r0, r4
 80026c8:	f7ff ffce 	bl	8002668 <VL53LX_set_zone_dss_config>
	if (((pdev->sys_ctrl.system__mode_start &
 80026cc:	f894 339c 	ldrb.w	r3, [r4, #924]	; 0x39c
 80026d0:	079a      	lsls	r2, r3, #30
 80026d2:	d407      	bmi.n	80026e4 <VL53LX_init_and_start_range+0x5c>
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 80026d4:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
 80026d8:	2b01      	cmp	r3, #1
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 80026da:	bf04      	itt	eq
 80026dc:	f8b4 32dc 	ldrheq.w	r3, [r4, #732]	; 0x2dc
 80026e0:	f8a4 334e 	strheq.w	r3, [r4, #846]	; 0x34e
	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 80026e4:	f241 432a 	movw	r3, #5162	; 0x142a
 80026e8:	5ce2      	ldrb	r2, [r4, r3]
 80026ea:	2aff      	cmp	r2, #255	; 0xff
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 80026ec:	bf04      	itt	eq
 80026ee:	2200      	moveq	r2, #0
 80026f0:	54e2      	strbeq	r2, [r4, r3]
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80026f2:	f241 4328 	movw	r3, #5160	; 0x1428
 80026f6:	58e3      	ldr	r3, [r4, r3]
 80026f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80026fc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002700:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002704:	d116      	bne.n	8002734 <VL53LX_init_and_start_range+0xac>
		pdev->low_power_auto_data.saved_interrupt_config =
 8002706:	f241 432b 	movw	r3, #5163	; 0x142b
 800270a:	f894 2358 	ldrb.w	r2, [r4, #856]	; 0x358
 800270e:	54e2      	strb	r2, [r4, r3]
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8002710:	2320      	movs	r3, #32
 8002712:	f884 3358 	strb.w	r3, [r4, #856]	; 0x358
		if ((pdev->dyn_cfg.system__sequence_config & (
 8002716:	f894 3395 	ldrb.w	r3, [r4, #917]	; 0x395
 800271a:	f013 0f60 	tst.w	r3, #96	; 0x60
			(pN->mm_config__outer_offset_mm << 2);
 800271e:	bf03      	ittte	eq
 8002720:	f9b4 305e 	ldrsheq.w	r3, [r4, #94]	; 0x5e
 8002724:	009b      	lsleq	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 8002726:	b21b      	sxtheq	r3, r3
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8002728:	2300      	movne	r3, #0
 800272a:	2d05      	cmp	r5, #5
 800272c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
		if (device_config_level <
 8002730:	bf38      	it	cc
 8002732:	2505      	movcc	r5, #5
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8002734:	f241 4328 	movw	r3, #5160	; 0x1428
 8002738:	4a4e      	ldr	r2, [pc, #312]	; (8002874 <VL53LX_init_and_start_range+0x1ec>)
 800273a:	58e3      	ldr	r3, [r4, r3]
 800273c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002740:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002744:	4293      	cmp	r3, r2
			pdev->low_power_auto_data.saved_interrupt_config;
 8002746:	bf01      	itttt	eq
 8002748:	f241 432b 	movweq	r3, #5163	; 0x142b
		device_config_level = VL53LX_DEVICECONFIGLEVEL_FULL;
 800274c:	2506      	moveq	r5, #6
		pdev->gen_cfg.system__interrupt_config_gpio =
 800274e:	5ce3      	ldrbeq	r3, [r4, r3]
 8002750:	f884 3358 	strbeq.w	r3, [r4, #856]	; 0x358
	if (status == VL53LX_ERROR_NONE)
 8002754:	b910      	cbnz	r0, 800275c <VL53LX_init_and_start_range+0xd4>
		status = VL53LX_save_cfg_data(Dev);
 8002756:	4620      	mov	r0, r4
 8002758:	f002 fd37 	bl	80051ca <VL53LX_save_cfg_data>
	switch (device_config_level) {
 800275c:	1e6b      	subs	r3, r5, #1
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b05      	cmp	r3, #5
 8002762:	bf9a      	itte	ls
 8002764:	4a44      	ldrls	r2, [pc, #272]	; (8002878 <VL53LX_init_and_start_range+0x1f0>)
 8002766:	5cd6      	ldrbls	r6, [r2, r3]
		device_config_level = VL53LX_DEVICECONFIGLEVEL_FULL;
 8002768:	2683      	movhi	r6, #131	; 0x83
	i2c_buffer_size_bytes =
 800276a:	f1c6 0888 	rsb	r8, r6, #136	; 0x88
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 800276e:	2300      	movs	r3, #0
	pbuffer = &buffer[0];
 8002770:	466a      	mov	r2, sp
	i2c_buffer_size_bytes =
 8002772:	fa1f f888 	uxth.w	r8, r8
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8002776:	4617      	mov	r7, r2
		*pbuffer++ = 0;
 8002778:	4619      	mov	r1, r3
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 800277a:	3301      	adds	r3, #1
 800277c:	b29b      	uxth	r3, r3
 800277e:	4598      	cmp	r8, r3
		*pbuffer++ = 0;
 8002780:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8002784:	d1f9      	bne.n	800277a <VL53LX_init_and_start_range+0xf2>
	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_FULL &&
 8002786:	2d05      	cmp	r5, #5
 8002788:	d94f      	bls.n	800282a <VL53LX_init_and_start_range+0x1a2>
 800278a:	2800      	cmp	r0, #0
 800278c:	d16f      	bne.n	800286e <VL53LX_init_and_start_range+0x1e6>
		i2c_buffer_offset_bytes =
 800278e:	f1c6 0201 	rsb	r2, r6, #1
			VL53LX_i2c_encode_static_nvm_managed(
 8002792:	fa17 f282 	uxtah	r2, r7, r2
 8002796:	210b      	movs	r1, #11
 8002798:	f504 7044 	add.w	r0, r4, #784	; 0x310
 800279c:	f004 ffdb 	bl	8007756 <VL53LX_i2c_encode_static_nvm_managed>
	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 80027a0:	2800      	cmp	r0, #0
 80027a2:	d164      	bne.n	800286e <VL53LX_init_and_start_range+0x1e6>
		i2c_buffer_offset_bytes =
 80027a4:	f1c6 020d 	rsb	r2, r6, #13
			VL53LX_i2c_encode_customer_nvm_managed(
 80027a8:	fa17 f282 	uxtah	r2, r7, r2
 80027ac:	2117      	movs	r1, #23
 80027ae:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80027b2:	f005 f839 	bl	8007828 <VL53LX_i2c_encode_customer_nvm_managed>
	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 80027b6:	2800      	cmp	r0, #0
 80027b8:	d159      	bne.n	800286e <VL53LX_init_and_start_range+0x1e6>
		i2c_buffer_offset_bytes =
 80027ba:	f1c6 0224 	rsb	r2, r6, #36	; 0x24
			VL53LX_i2c_encode_static_config(
 80027be:	fa17 f282 	uxtah	r2, r7, r2
 80027c2:	2120      	movs	r1, #32
 80027c4:	f204 3036 	addw	r0, r4, #822	; 0x336
 80027c8:	f005 f8ed 	bl	80079a6 <VL53LX_i2c_encode_static_config>
	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 80027cc:	2800      	cmp	r0, #0
 80027ce:	d14e      	bne.n	800286e <VL53LX_init_and_start_range+0x1e6>
		i2c_buffer_offset_bytes =
 80027d0:	f1c6 0244 	rsb	r2, r6, #68	; 0x44
			VL53LX_i2c_encode_general_config(
 80027d4:	fa17 f282 	uxtah	r2, r7, r2
 80027d8:	2116      	movs	r1, #22
 80027da:	f204 3056 	addw	r0, r4, #854	; 0x356
 80027de:	f005 f950 	bl	8007a82 <VL53LX_i2c_encode_general_config>
	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 80027e2:	2800      	cmp	r0, #0
 80027e4:	d143      	bne.n	800286e <VL53LX_init_and_start_range+0x1e6>
		i2c_buffer_offset_bytes =
 80027e6:	f1c6 025a 	rsb	r2, r6, #90	; 0x5a
			VL53LX_i2c_encode_timing_config(
 80027ea:	fa17 f282 	uxtah	r2, r7, r2
 80027ee:	2117      	movs	r1, #23
 80027f0:	f504 705b 	add.w	r0, r4, #876	; 0x36c
 80027f4:	f005 f98a 	bl	8007b0c <VL53LX_i2c_encode_timing_config>
	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 80027f8:	bbc8      	cbnz	r0, 800286e <VL53LX_init_and_start_range+0x1e6>
		if ((psystem->system__mode_start &
 80027fa:	f894 339c 	ldrb.w	r3, [r4, #924]	; 0x39c
		i2c_buffer_offset_bytes =
 80027fe:	f1c6 0271 	rsb	r2, r6, #113	; 0x71
		if ((psystem->system__mode_start &
 8002802:	069b      	lsls	r3, r3, #26
		i2c_buffer_offset_bytes =
 8002804:	b292      	uxth	r2, r2
		if ((psystem->system__mode_start &
 8002806:	d509      	bpl.n	800281c <VL53LX_init_and_start_range+0x194>
					pstate->cfg_gph_id | 0x01;
 8002808:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
			pdynamic->system__grouped_parameter_hold   =
 800280c:	f884 3396 	strb.w	r3, [r4, #918]	; 0x396
			pdynamic->system__grouped_parameter_hold_0 =
 8002810:	f043 0101 	orr.w	r1, r3, #1
 8002814:	f884 1384 	strb.w	r1, [r4, #900]	; 0x384
			pdynamic->system__grouped_parameter_hold_1 =
 8002818:	f884 1390 	strb.w	r1, [r4, #912]	; 0x390
			VL53LX_i2c_encode_dynamic_config(
 800281c:	443a      	add	r2, r7
 800281e:	2112      	movs	r1, #18
 8002820:	f504 7061 	add.w	r0, r4, #900	; 0x384
 8002824:	f005 f9b5 	bl	8007b92 <VL53LX_i2c_encode_dynamic_config>
 8002828:	e008      	b.n	800283c <VL53LX_init_and_start_range+0x1b4>
	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800282a:	d0b9      	beq.n	80027a0 <VL53LX_init_and_start_range+0x118>
	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800282c:	2d04      	cmp	r5, #4
 800282e:	d0c2      	beq.n	80027b6 <VL53LX_init_and_start_range+0x12e>
	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8002830:	2d03      	cmp	r5, #3
 8002832:	d0cb      	beq.n	80027cc <VL53LX_init_and_start_range+0x144>
	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8002834:	2d02      	cmp	r5, #2
 8002836:	d0d4      	beq.n	80027e2 <VL53LX_init_and_start_range+0x15a>
	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8002838:	2d00      	cmp	r5, #0
 800283a:	d1dd      	bne.n	80027f8 <VL53LX_init_and_start_range+0x170>
	if (status == VL53LX_ERROR_NONE) {
 800283c:	b9b8      	cbnz	r0, 800286e <VL53LX_init_and_start_range+0x1e6>
		i2c_buffer_offset_bytes =
 800283e:	f1c6 0283 	rsb	r2, r6, #131	; 0x83
			VL53LX_i2c_encode_system_control(
 8002842:	fa17 f282 	uxtah	r2, r7, r2
 8002846:	2105      	movs	r1, #5
 8002848:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800284c:	f005 f9e3 	bl	8007c16 <VL53LX_i2c_encode_system_control>
	if (status == VL53LX_ERROR_NONE) {
 8002850:	b968      	cbnz	r0, 800286e <VL53LX_init_and_start_range+0x1e6>
			VL53LX_WriteMulti(
 8002852:	4643      	mov	r3, r8
 8002854:	463a      	mov	r2, r7
 8002856:	4631      	mov	r1, r6
 8002858:	4620      	mov	r0, r4
 800285a:	f7fe fe31 	bl	80014c0 <VL53LX_WriteMulti>
	if (status == VL53LX_ERROR_NONE)
 800285e:	b930      	cbnz	r0, 800286e <VL53LX_init_and_start_range+0x1e6>
		status = VL53LX_update_ll_driver_rd_state(Dev);
 8002860:	4620      	mov	r0, r4
 8002862:	f002 fd4a 	bl	80052fa <VL53LX_update_ll_driver_rd_state>
	if (status == VL53LX_ERROR_NONE)
 8002866:	b910      	cbnz	r0, 800286e <VL53LX_init_and_start_range+0x1e6>
		status = VL53LX_update_ll_driver_cfg_state(Dev);
 8002868:	4620      	mov	r0, r4
 800286a:	f002 fdce 	bl	800540a <VL53LX_update_ll_driver_cfg_state>
}
 800286e:	b040      	add	sp, #256	; 0x100
 8002870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002874:	00010100 	.word	0x00010100
 8002878:	0800c4eb 	.word	0x0800c4eb

0800287c <VL53LX_clear_interrupt_and_enable_next_range>:
		status = VL53LX_init_and_start_range(
 800287c:	2203      	movs	r2, #3
 800287e:	f7ff bf03 	b.w	8002688 <VL53LX_init_and_start_range>

08002882 <VL53LX_set_dmax_mode>:

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 8002882:	7181      	strb	r1, [r0, #6]

	LOG_FUNCTION_END(status);

	return status;
}
 8002884:	2000      	movs	r0, #0
 8002886:	4770      	bx	lr

08002888 <VL53LX_get_dmax_calibration_data>:
	VL53LX_LLDriverData_t    *pdev =
		VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 8002888:	2901      	cmp	r1, #1
 800288a:	d00a      	beq.n	80028a2 <VL53LX_get_dmax_calibration_data+0x1a>
 800288c:	2902      	cmp	r1, #2
 800288e:	d10b      	bne.n	80028a8 <VL53LX_get_dmax_calibration_data+0x20>

	case VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
 8002890:	f850 3fae 	ldr.w	r3, [r0, #174]!
			&(pdev->cust_dmax_cal),
			sizeof(VL53LX_dmax_calibration_data_t));
	break;

	case VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	6843      	ldr	r3, [r0, #4]
 8002898:	6053      	str	r3, [r2, #4]
 800289a:	8903      	ldrh	r3, [r0, #8]
 800289c:	8113      	strh	r3, [r2, #8]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800289e:	2000      	movs	r0, #0
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 80028a0:	4770      	bx	lr
		memcpy(
 80028a2:	f850 3fa4 	ldr.w	r3, [r0, #164]!
 80028a6:	e7f5      	b.n	8002894 <VL53LX_get_dmax_calibration_data+0xc>
	switch (dmax_mode) {
 80028a8:	f06f 0003 	mvn.w	r0, #3
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80028ac:	4770      	bx	lr

080028ae <VL53LX_get_tuning_parm>:
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
	VL53LX_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 80028ae:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 80028b2:	29b9      	cmp	r1, #185	; 0xb9
 80028b4:	f200 8472 	bhi.w	800319c <VL53LX_get_tuning_parm+0x8ee>
 80028b8:	e8df f011 	tbh	[pc, r1, lsl #1]
 80028bc:	00bf00ba 	.word	0x00bf00ba
 80028c0:	00c900c4 	.word	0x00c900c4
 80028c4:	00d300ce 	.word	0x00d300ce
 80028c8:	00dd00d8 	.word	0x00dd00d8
 80028cc:	00e700e2 	.word	0x00e700e2
 80028d0:	00f100ec 	.word	0x00f100ec
 80028d4:	00fb00f6 	.word	0x00fb00f6
 80028d8:	01050100 	.word	0x01050100
 80028dc:	010f010a 	.word	0x010f010a
 80028e0:	01190114 	.word	0x01190114
 80028e4:	0123011e 	.word	0x0123011e
 80028e8:	012d0128 	.word	0x012d0128
 80028ec:	01370132 	.word	0x01370132
 80028f0:	0141013c 	.word	0x0141013c
 80028f4:	014b0146 	.word	0x014b0146
 80028f8:	01550150 	.word	0x01550150
 80028fc:	015f015a 	.word	0x015f015a
 8002900:	01690164 	.word	0x01690164
 8002904:	0173016e 	.word	0x0173016e
 8002908:	017d0178 	.word	0x017d0178
 800290c:	01870182 	.word	0x01870182
 8002910:	0191018c 	.word	0x0191018c
 8002914:	019b0196 	.word	0x019b0196
 8002918:	01a501a0 	.word	0x01a501a0
 800291c:	01af01aa 	.word	0x01af01aa
 8002920:	01b901b4 	.word	0x01b901b4
 8002924:	01c301be 	.word	0x01c301be
 8002928:	01cd01c8 	.word	0x01cd01c8
 800292c:	01d701d2 	.word	0x01d701d2
 8002930:	01e101dc 	.word	0x01e101dc
 8002934:	01eb01e6 	.word	0x01eb01e6
 8002938:	01f501f0 	.word	0x01f501f0
 800293c:	01ff01fa 	.word	0x01ff01fa
 8002940:	02090204 	.word	0x02090204
 8002944:	0213020e 	.word	0x0213020e
 8002948:	021d0218 	.word	0x021d0218
 800294c:	02270222 	.word	0x02270222
 8002950:	0231022c 	.word	0x0231022c
 8002954:	023b0236 	.word	0x023b0236
 8002958:	02450240 	.word	0x02450240
 800295c:	024f024a 	.word	0x024f024a
 8002960:	02590254 	.word	0x02590254
 8002964:	0263025e 	.word	0x0263025e
 8002968:	026d0268 	.word	0x026d0268
 800296c:	02770272 	.word	0x02770272
 8002970:	0281027c 	.word	0x0281027c
 8002974:	028b0286 	.word	0x028b0286
 8002978:	02950290 	.word	0x02950290
 800297c:	029f029a 	.word	0x029f029a
 8002980:	02a902a4 	.word	0x02a902a4
 8002984:	02b302ae 	.word	0x02b302ae
 8002988:	02bd02b8 	.word	0x02bd02b8
 800298c:	02c702c2 	.word	0x02c702c2
 8002990:	02d102cc 	.word	0x02d102cc
 8002994:	02db02d6 	.word	0x02db02d6
 8002998:	02e502e0 	.word	0x02e502e0
 800299c:	02ef02ea 	.word	0x02ef02ea
 80029a0:	02f902f4 	.word	0x02f902f4
 80029a4:	030302fe 	.word	0x030302fe
 80029a8:	030e0308 	.word	0x030e0308
 80029ac:	031a0314 	.word	0x031a0314
 80029b0:	03260320 	.word	0x03260320
 80029b4:	0332032c 	.word	0x0332032c
 80029b8:	033e0338 	.word	0x033e0338
 80029bc:	034a0344 	.word	0x034a0344
 80029c0:	03560350 	.word	0x03560350
 80029c4:	0362035c 	.word	0x0362035c
 80029c8:	036e0368 	.word	0x036e0368
 80029cc:	037a0374 	.word	0x037a0374
 80029d0:	0384037f 	.word	0x0384037f
 80029d4:	038e0389 	.word	0x038e0389
 80029d8:	03980393 	.word	0x03980393
 80029dc:	03a3039d 	.word	0x03a3039d
 80029e0:	03ad03a8 	.word	0x03ad03a8
 80029e4:	03b703b2 	.word	0x03b703b2
 80029e8:	03c103bc 	.word	0x03c103bc
 80029ec:	03cb03c6 	.word	0x03cb03c6
 80029f0:	03d503d0 	.word	0x03d503d0
 80029f4:	03df03da 	.word	0x03df03da
 80029f8:	03e903e4 	.word	0x03e903e4
 80029fc:	03f303ee 	.word	0x03f303ee
 8002a00:	03fd03f8 	.word	0x03fd03f8
 8002a04:	04070402 	.word	0x04070402
 8002a08:	0411040c 	.word	0x0411040c
 8002a0c:	041b0416 	.word	0x041b0416
 8002a10:	04250420 	.word	0x04250420
 8002a14:	042f042a 	.word	0x042f042a
 8002a18:	04390434 	.word	0x04390434
 8002a1c:	0443043e 	.word	0x0443043e
 8002a20:	044d0448 	.word	0x044d0448
 8002a24:	04570452 	.word	0x04570452
 8002a28:	0461045c 	.word	0x0461045c
 8002a2c:	046b0466 	.word	0x046b0466

	case VL53LX_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8002a30:	f8b0 3130 	ldrh.w	r3, [r0, #304]	; 0x130
 8002a34:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002a36:	2000      	movs	r0, #0
	break;
 8002a38:	4770      	bx	lr
	case VL53LX_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8002a3a:	f8b0 3132 	ldrh.w	r3, [r0, #306]	; 0x132
 8002a3e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002a40:	2000      	movs	r0, #0
	break;
 8002a42:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8002a44:	f8b0 3134 	ldrh.w	r3, [r0, #308]	; 0x134
 8002a48:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002a4a:	2000      	movs	r0, #0
	break;
 8002a4c:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 8002a4e:	f890 324c 	ldrb.w	r3, [r0, #588]	; 0x24c
 8002a52:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002a54:	2000      	movs	r0, #0
	break;
 8002a56:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 8002a58:	f890 324d 	ldrb.w	r3, [r0, #589]	; 0x24d
 8002a5c:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002a5e:	2000      	movs	r0, #0
	break;
 8002a60:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 8002a62:	f890 324e 	ldrb.w	r3, [r0, #590]	; 0x24e
 8002a66:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002a68:	2000      	movs	r0, #0
	break;
 8002a6a:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 8002a6c:	f890 324f 	ldrb.w	r3, [r0, #591]	; 0x24f
 8002a70:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002a72:	2000      	movs	r0, #0
	break;
 8002a74:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 8002a76:	f890 3250 	ldrb.w	r3, [r0, #592]	; 0x250
 8002a7a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002a7c:	2000      	movs	r0, #0
	break;
 8002a7e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 8002a80:	f890 3251 	ldrb.w	r3, [r0, #593]	; 0x251
 8002a84:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002a86:	2000      	movs	r0, #0
	break;
 8002a88:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 8002a8a:	f890 3252 	ldrb.w	r3, [r0, #594]	; 0x252
 8002a8e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002a90:	2000      	movs	r0, #0
	break;
 8002a92:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 8002a94:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
		*ptuning_parm_value =
 8002a98:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002a9a:	2000      	movs	r0, #0
	break;
 8002a9c:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 8002a9e:	f8b0 3254 	ldrh.w	r3, [r0, #596]	; 0x254
 8002aa2:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002aa4:	2000      	movs	r0, #0
	break;
 8002aa6:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 8002aa8:	f8b0 325c 	ldrh.w	r3, [r0, #604]	; 0x25c
 8002aac:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002aae:	2000      	movs	r0, #0
	break;
 8002ab0:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 8002ab2:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		*ptuning_parm_value =
 8002ab6:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ab8:	2000      	movs	r0, #0
	break;
 8002aba:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 8002abc:	f890 3264 	ldrb.w	r3, [r0, #612]	; 0x264
 8002ac0:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ac2:	2000      	movs	r0, #0
	break;
 8002ac4:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 8002ac6:	f8b0 3266 	ldrh.w	r3, [r0, #614]	; 0x266
 8002aca:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002acc:	2000      	movs	r0, #0
	break;
 8002ace:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 8002ad0:	f8b0 30ba 	ldrh.w	r3, [r0, #186]	; 0xba
 8002ad4:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ad6:	2000      	movs	r0, #0
	break;
 8002ad8:	4770      	bx	lr
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 8002ada:	f890 326e 	ldrb.w	r3, [r0, #622]	; 0x26e
 8002ade:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ae0:	2000      	movs	r0, #0
	break;
 8002ae2:	4770      	bx	lr
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 8002ae4:	f8b0 3272 	ldrh.w	r3, [r0, #626]	; 0x272
 8002ae8:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002aea:	2000      	movs	r0, #0
	break;
 8002aec:	4770      	bx	lr
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 8002aee:	f890 326f 	ldrb.w	r3, [r0, #623]	; 0x26f
 8002af2:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002af4:	2000      	movs	r0, #0
	break;
 8002af6:	4770      	bx	lr
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 8002af8:	f8b0 3270 	ldrh.w	r3, [r0, #624]	; 0x270
 8002afc:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002afe:	2000      	movs	r0, #0
	break;
 8002b00:	4770      	bx	lr
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 8002b02:	f890 313c 	ldrb.w	r3, [r0, #316]	; 0x13c
 8002b06:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b08:	2000      	movs	r0, #0
	break;
 8002b0a:	4770      	bx	lr
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 8002b0c:	f890 313d 	ldrb.w	r3, [r0, #317]	; 0x13d
 8002b10:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b12:	2000      	movs	r0, #0
	break;
 8002b14:	4770      	bx	lr
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 8002b16:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
 8002b1a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b1c:	2000      	movs	r0, #0
	break;
 8002b1e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 8002b20:	f890 313f 	ldrb.w	r3, [r0, #319]	; 0x13f
 8002b24:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b26:	2000      	movs	r0, #0
	break;
 8002b28:	4770      	bx	lr
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 8002b2a:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8002b2e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b30:	2000      	movs	r0, #0
	break;
 8002b32:	4770      	bx	lr
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 8002b34:	f890 3141 	ldrb.w	r3, [r0, #321]	; 0x141
 8002b38:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b3a:	2000      	movs	r0, #0
	break;
 8002b3c:	4770      	bx	lr
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
 8002b3e:	f9b0 32de 	ldrsh.w	r3, [r0, #734]	; 0x2de
 8002b42:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b44:	2000      	movs	r0, #0
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
	break;
 8002b46:	4770      	bx	lr
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
 8002b48:	f9b0 32e0 	ldrsh.w	r3, [r0, #736]	; 0x2e0
 8002b4c:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b4e:	2000      	movs	r0, #0
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
	break;
 8002b50:	4770      	bx	lr
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 8002b52:	f8b0 32e4 	ldrh.w	r3, [r0, #740]	; 0x2e4
 8002b56:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b58:	2000      	movs	r0, #0
	break;
 8002b5a:	4770      	bx	lr
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 8002b5c:	f8b0 328a 	ldrh.w	r3, [r0, #650]	; 0x28a
 8002b60:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b62:	2000      	movs	r0, #0
	break;
 8002b64:	4770      	bx	lr
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
 8002b66:	f8b0 32e2 	ldrh.w	r3, [r0, #738]	; 0x2e2
 8002b6a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b6c:	2000      	movs	r0, #0
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
	break;
 8002b6e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 8002b70:	f890 3288 	ldrb.w	r3, [r0, #648]	; 0x288
 8002b74:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b76:	2000      	movs	r0, #0
	break;
 8002b78:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 8002b7a:	f9b0 32d6 	ldrsh.w	r3, [r0, #726]	; 0x2d6
 8002b7e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b80:	2000      	movs	r0, #0
	break;
 8002b82:	4770      	bx	lr
	case VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8002b84:	f890 3142 	ldrb.w	r3, [r0, #322]	; 0x142
 8002b88:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b8a:	2000      	movs	r0, #0
	break;
 8002b8c:	4770      	bx	lr
	case VL53LX_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8002b8e:	f890 3143 	ldrb.w	r3, [r0, #323]	; 0x143
 8002b92:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b94:	2000      	movs	r0, #0
	break;
 8002b96:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8002b98:	f8b0 3144 	ldrh.w	r3, [r0, #324]	; 0x144
 8002b9c:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002b9e:	2000      	movs	r0, #0
	break;
 8002ba0:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8002ba2:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
 8002ba6:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ba8:	2000      	movs	r0, #0
	break;
 8002baa:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8002bac:	f890 3146 	ldrb.w	r3, [r0, #326]	; 0x146
 8002bb0:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002bb2:	2000      	movs	r0, #0
	break;
 8002bb4:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8002bb6:	f8b0 3148 	ldrh.w	r3, [r0, #328]	; 0x148
 8002bba:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002bbc:	2000      	movs	r0, #0
	break;
 8002bbe:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8002bc0:	f8b0 314a 	ldrh.w	r3, [r0, #330]	; 0x14a
 8002bc4:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002bc6:	2000      	movs	r0, #0
	break;
 8002bc8:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8002bca:	f8b0 314c 	ldrh.w	r3, [r0, #332]	; 0x14c
 8002bce:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002bd0:	2000      	movs	r0, #0
	break;
 8002bd2:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
 8002bd4:	f8b0 314e 	ldrh.w	r3, [r0, #334]	; 0x14e
 8002bd8:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002bda:	2000      	movs	r0, #0
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
	break;
 8002bdc:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8002bde:	f8b0 3150 	ldrh.w	r3, [r0, #336]	; 0x150
 8002be2:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002be4:	2000      	movs	r0, #0
	break;
 8002be6:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
 8002be8:	f8b0 3152 	ldrh.w	r3, [r0, #338]	; 0x152
 8002bec:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002bee:	2000      	movs	r0, #0
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
	break;
 8002bf0:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8002bf2:	f890 3154 	ldrb.w	r3, [r0, #340]	; 0x154
 8002bf6:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002bf8:	2000      	movs	r0, #0
	break;
 8002bfa:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8002bfc:	f890 3155 	ldrb.w	r3, [r0, #341]	; 0x155
 8002c00:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c02:	2000      	movs	r0, #0
	break;
 8002c04:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8002c06:	f890 3156 	ldrb.w	r3, [r0, #342]	; 0x156
 8002c0a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c0c:	2000      	movs	r0, #0
	break;
 8002c0e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8002c10:	f890 32da 	ldrb.w	r3, [r0, #730]	; 0x2da
 8002c14:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c16:	2000      	movs	r0, #0
	break;
 8002c18:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 8002c1a:	f890 3157 	ldrb.w	r3, [r0, #343]	; 0x157
 8002c1e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c20:	2000      	movs	r0, #0
	break;
 8002c22:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8002c24:	f890 3159 	ldrb.w	r3, [r0, #345]	; 0x159
 8002c28:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c2a:	2000      	movs	r0, #0
	break;
 8002c2c:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8002c2e:	f890 315a 	ldrb.w	r3, [r0, #346]	; 0x15a
 8002c32:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c34:	2000      	movs	r0, #0
	break;
 8002c36:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8002c38:	f9b0 32d8 	ldrsh.w	r3, [r0, #728]	; 0x2d8
 8002c3c:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c3e:	2000      	movs	r0, #0
	break;
 8002c40:	4770      	bx	lr
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8002c42:	f890 3136 	ldrb.w	r3, [r0, #310]	; 0x136
 8002c46:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c48:	2000      	movs	r0, #0
	break;
 8002c4a:	4770      	bx	lr
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8002c4c:	f890 3137 	ldrb.w	r3, [r0, #311]	; 0x137
 8002c50:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c52:	2000      	movs	r0, #0
	break;
 8002c54:	4770      	bx	lr
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8002c56:	f890 3138 	ldrb.w	r3, [r0, #312]	; 0x138
 8002c5a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c5c:	2000      	movs	r0, #0
	break;
 8002c5e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8002c60:	f890 3139 	ldrb.w	r3, [r0, #313]	; 0x139
 8002c64:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c66:	2000      	movs	r0, #0
	break;
 8002c68:	4770      	bx	lr
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8002c6a:	f890 313a 	ldrb.w	r3, [r0, #314]	; 0x13a
 8002c6e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c70:	2000      	movs	r0, #0
	break;
 8002c72:	4770      	bx	lr
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8002c74:	f890 313b 	ldrb.w	r3, [r0, #315]	; 0x13b
 8002c78:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c7a:	2000      	movs	r0, #0
	break;
 8002c7c:	4770      	bx	lr
	case VL53LX_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8002c7e:	f890 3158 	ldrb.w	r3, [r0, #344]	; 0x158
 8002c82:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c84:	2000      	movs	r0, #0
	break;
 8002c86:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 8002c88:	f890 328c 	ldrb.w	r3, [r0, #652]	; 0x28c
 8002c8c:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c8e:	2000      	movs	r0, #0
	break;
 8002c90:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 8002c92:	f8b0 3298 	ldrh.w	r3, [r0, #664]	; 0x298
 8002c96:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002c98:	2000      	movs	r0, #0
	break;
 8002c9a:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 8002c9c:	f8b0 329a 	ldrh.w	r3, [r0, #666]	; 0x29a
 8002ca0:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ca2:	2000      	movs	r0, #0
	break;
 8002ca4:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 8002ca6:	f8b0 329c 	ldrh.w	r3, [r0, #668]	; 0x29c
 8002caa:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002cac:	2000      	movs	r0, #0
	break;
 8002cae:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 8002cb0:	f8b0 329e 	ldrh.w	r3, [r0, #670]	; 0x29e
 8002cb4:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002cb6:	2000      	movs	r0, #0
	break;
 8002cb8:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 8002cba:	f8b0 32a0 	ldrh.w	r3, [r0, #672]	; 0x2a0
 8002cbe:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002cc0:	2000      	movs	r0, #0
	break;
 8002cc2:	4770      	bx	lr
	case VL53LX_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8002cc4:	f890 3318 	ldrb.w	r3, [r0, #792]	; 0x318
 8002cc8:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002cca:	2000      	movs	r0, #0
	break;
 8002ccc:	4770      	bx	lr
	case VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 8002cce:	f890 3230 	ldrb.w	r3, [r0, #560]	; 0x230
 8002cd2:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002cd4:	2000      	movs	r0, #0
	break;
 8002cd6:	4770      	bx	lr
	case VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53LX_p_005;
 8002cd8:	f890 3231 	ldrb.w	r3, [r0, #561]	; 0x231
 8002cdc:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002cde:	2000      	movs	r0, #0
	break;
 8002ce0:	4770      	bx	lr
	case VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
 8002ce2:	f8d0 3234 	ldr.w	r3, [r0, #564]	; 0x234
 8002ce6:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ce8:	2000      	movs	r0, #0
		(int32_t)pdev->refspadchar.timeout_us;
	break;
 8002cea:	4770      	bx	lr
	case VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8002cec:	f8b0 3238 	ldrh.w	r3, [r0, #568]	; 0x238
 8002cf0:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002cf2:	2000      	movs	r0, #0
	break;
 8002cf4:	4770      	bx	lr
	case VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8002cf6:	f8b0 323a 	ldrh.w	r3, [r0, #570]	; 0x23a
 8002cfa:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002cfc:	2000      	movs	r0, #0
	break;
 8002cfe:	4770      	bx	lr
	case VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8002d00:	f8b0 323c 	ldrh.w	r3, [r0, #572]	; 0x23c
 8002d04:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d06:	2000      	movs	r0, #0
	break;
 8002d08:	4770      	bx	lr
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 8002d0a:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8002d0e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d10:	2000      	movs	r0, #0
	break;
 8002d12:	4770      	bx	lr
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 8002d14:	f9b0 32ba 	ldrsh.w	r3, [r0, #698]	; 0x2ba
 8002d18:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d1a:	2000      	movs	r0, #0
	break;
 8002d1c:	4770      	bx	lr
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 8002d1e:	f9b0 32bc 	ldrsh.w	r3, [r0, #700]	; 0x2bc
 8002d22:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d24:	2000      	movs	r0, #0
	break;
 8002d26:	4770      	bx	lr
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8002d28:	f8b0 32a8 	ldrh.w	r3, [r0, #680]	; 0x2a8
 8002d2c:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d2e:	2000      	movs	r0, #0
	break;
 8002d30:	4770      	bx	lr
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
 8002d32:	f8d0 32ac 	ldr.w	r3, [r0, #684]	; 0x2ac
 8002d36:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d38:	2000      	movs	r0, #0
		(int32_t)pXC->phasecal_config_timeout_us;
	break;
 8002d3a:	4770      	bx	lr
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 8002d3c:	f8b0 32be 	ldrh.w	r3, [r0, #702]	; 0x2be
 8002d40:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d42:	2000      	movs	r0, #0
	break;
 8002d44:	4770      	bx	lr
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 8002d46:	f8b0 32c0 	ldrh.w	r3, [r0, #704]	; 0x2c0
 8002d4a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d4c:	2000      	movs	r0, #0
	break;
 8002d4e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
 8002d50:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002d54:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d56:	2000      	movs	r0, #0
		(int32_t)pXC->mm_config_timeout_us;
	break;
 8002d58:	4770      	bx	lr
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
 8002d5a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002d5e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d60:	2000      	movs	r0, #0
		(int32_t)pXC->range_config_timeout_us;
	break;
 8002d62:	4770      	bx	lr
	case VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 8002d64:	f8b0 32e8 	ldrh.w	r3, [r0, #744]	; 0x2e8
 8002d68:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d6a:	2000      	movs	r0, #0
	break;
 8002d6c:	4770      	bx	lr
	case VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
 8002d6e:	f8d0 32ec 	ldr.w	r3, [r0, #748]	; 0x2ec
 8002d72:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d74:	2000      	movs	r0, #0
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
	break;
 8002d76:	4770      	bx	lr
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
 8002d78:	f8d0 32f4 	ldr.w	r3, [r0, #756]	; 0x2f4
 8002d7c:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d7e:	2000      	movs	r0, #0
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
	break;
 8002d80:	4770      	bx	lr
	case VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
 8002d82:	f8d0 32f0 	ldr.w	r3, [r0, #752]	; 0x2f0
 8002d86:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d88:	2000      	movs	r0, #0
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
	break;
 8002d8a:	4770      	bx	lr
	case VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8002d8c:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8002d90:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d92:	2000      	movs	r0, #0
	break;
 8002d94:	4770      	bx	lr
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8002d96:	f890 32f9 	ldrb.w	r3, [r0, #761]	; 0x2f9
 8002d9a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002d9c:	2000      	movs	r0, #0
	break;
 8002d9e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8002da0:	f890 32fa 	ldrb.w	r3, [r0, #762]	; 0x2fa
 8002da4:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002da6:	2000      	movs	r0, #0
	break;
 8002da8:	4770      	bx	lr
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 8002daa:	f8b0 32fc 	ldrh.w	r3, [r0, #764]	; 0x2fc
 8002dae:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002db0:	2000      	movs	r0, #0
	break;
 8002db2:	4770      	bx	lr
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
 8002db4:	f8d0 3300 	ldr.w	r3, [r0, #768]	; 0x300
 8002db8:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002dba:	2000      	movs	r0, #0
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
	break;
 8002dbc:	4770      	bx	lr
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
 8002dbe:	f8d0 3304 	ldr.w	r3, [r0, #772]	; 0x304
 8002dc2:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002dc4:	2000      	movs	r0, #0
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
	break;
 8002dc6:	4770      	bx	lr
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 8002dc8:	f8b0 330c 	ldrh.w	r3, [r0, #780]	; 0x30c
 8002dcc:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002dce:	2000      	movs	r0, #0
	break;
 8002dd0:	4770      	bx	lr
	case VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
 8002dd2:	f8d0 3308 	ldr.w	r3, [r0, #776]	; 0x308
 8002dd6:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002dd8:	2000      	movs	r0, #0
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
	break;
 8002dda:	4770      	bx	lr
	case VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 8002ddc:	f8b0 330e 	ldrh.w	r3, [r0, #782]	; 0x30e
 8002de0:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002de2:	2000      	movs	r0, #0
	break;
 8002de4:	4770      	bx	lr
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53LX_p_005;
 8002de6:	f890 3241 	ldrb.w	r3, [r0, #577]	; 0x241
 8002dea:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002dec:	2000      	movs	r0, #0
	break;
 8002dee:	4770      	bx	lr
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 8002df0:	f890 3242 	ldrb.w	r3, [r0, #578]	; 0x242
 8002df4:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002df6:	2000      	movs	r0, #0
	break;
 8002df8:	4770      	bx	lr
	case VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8002dfa:	f8b0 3248 	ldrh.w	r3, [r0, #584]	; 0x248
 8002dfe:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e00:	2000      	movs	r0, #0
	break;
 8002e02:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8002e04:	f8b0 315c 	ldrh.w	r3, [r0, #348]	; 0x15c
 8002e08:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e0a:	2000      	movs	r0, #0
	break;
 8002e0c:	4770      	bx	lr
	case VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 8002e0e:	f8b0 315e 	ldrh.w	r3, [r0, #350]	; 0x15e
 8002e12:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e14:	2000      	movs	r0, #0
	break;
 8002e16:	4770      	bx	lr
	case VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8002e18:	f8b0 3160 	ldrh.w	r3, [r0, #352]	; 0x160
 8002e1c:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e1e:	2000      	movs	r0, #0
	break;
 8002e20:	4770      	bx	lr
	case VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8002e22:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
 8002e26:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e28:	2000      	movs	r0, #0
	break;
 8002e2a:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002e2c:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
 8002e30:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e32:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
	break;
 8002e34:	4770      	bx	lr
	case VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002e36:	f8d0 316c 	ldr.w	r3, [r0, #364]	; 0x16c
 8002e3a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e3c:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
	break;
 8002e3e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002e40:	f8d0 3170 	ldr.w	r3, [r0, #368]	; 0x170
 8002e44:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e46:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
	break;
 8002e48:	4770      	bx	lr
	case VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002e4a:	f8d0 3174 	ldr.w	r3, [r0, #372]	; 0x174
 8002e4e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e50:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
	break;
 8002e52:	4770      	bx	lr
	case VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002e54:	f8d0 3178 	ldr.w	r3, [r0, #376]	; 0x178
 8002e58:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e5a:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
	break;
 8002e5c:	4770      	bx	lr
	case VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002e5e:	f8d0 317c 	ldr.w	r3, [r0, #380]	; 0x17c
 8002e62:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e64:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
	break;
 8002e66:	4770      	bx	lr
	case VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002e68:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
 8002e6c:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e6e:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
	break;
 8002e70:	4770      	bx	lr
	case VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002e72:	f8d0 3184 	ldr.w	r3, [r0, #388]	; 0x184
 8002e76:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e78:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
	break;
 8002e7a:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002e7c:	f8d0 3188 	ldr.w	r3, [r0, #392]	; 0x188
 8002e80:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e82:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
	break;
 8002e84:	4770      	bx	lr
	case VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002e86:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
 8002e8a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e8c:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
	break;
 8002e8e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002e90:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190
 8002e94:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002e96:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
	break;
 8002e98:	4770      	bx	lr
	case VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002e9a:	f8d0 3194 	ldr.w	r3, [r0, #404]	; 0x194
 8002e9e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ea0:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
	break;
 8002ea2:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002ea4:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
 8002ea8:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002eaa:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
	break;
 8002eac:	4770      	bx	lr
	case VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002eae:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 8002eb2:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002eb4:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
	break;
 8002eb6:	4770      	bx	lr
	case VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002eb8:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 8002ebc:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ebe:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
	break;
 8002ec0:	4770      	bx	lr
	case VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002ec2:	f8d0 31a8 	ldr.w	r3, [r0, #424]	; 0x1a8
 8002ec6:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ec8:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
	break;
 8002eca:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 8002ecc:	f241 33d0 	movw	r3, #5072	; 0x13d0
 8002ed0:	5ac3      	ldrh	r3, [r0, r3]
 8002ed2:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ed4:	2000      	movs	r0, #0
	break;
 8002ed6:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 8002ed8:	f241 33d4 	movw	r3, #5076	; 0x13d4
		*ptuning_parm_value =
 8002edc:	58c3      	ldr	r3, [r0, r3]
 8002ede:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ee0:	2000      	movs	r0, #0
	break;
 8002ee2:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 8002ee4:	f241 33d8 	movw	r3, #5080	; 0x13d8
		*ptuning_parm_value =
 8002ee8:	58c3      	ldr	r3, [r0, r3]
 8002eea:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002eec:	2000      	movs	r0, #0
	break;
 8002eee:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 8002ef0:	f241 33dc 	movw	r3, #5084	; 0x13dc
 8002ef4:	5cc3      	ldrb	r3, [r0, r3]
 8002ef6:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ef8:	2000      	movs	r0, #0
	break;
 8002efa:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 8002efc:	f500 509f 	add.w	r0, r0, #5088	; 0x13e0
		*ptuning_parm_value =
 8002f00:	6803      	ldr	r3, [r0, #0]
 8002f02:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002f04:	2000      	movs	r0, #0
	break;
 8002f06:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 8002f08:	f241 33e4 	movw	r3, #5092	; 0x13e4
		*ptuning_parm_value =
 8002f0c:	58c3      	ldr	r3, [r0, r3]
 8002f0e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002f10:	2000      	movs	r0, #0
	break;
 8002f12:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 8002f14:	f241 33e8 	movw	r3, #5096	; 0x13e8
		*ptuning_parm_value =
 8002f18:	58c3      	ldr	r3, [r0, r3]
 8002f1a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002f1c:	2000      	movs	r0, #0
	break;
 8002f1e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 8002f20:	f241 33ec 	movw	r3, #5100	; 0x13ec
		*ptuning_parm_value =
 8002f24:	58c3      	ldr	r3, [r0, r3]
 8002f26:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002f28:	2000      	movs	r0, #0
	break;
 8002f2a:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 8002f2c:	f241 33f4 	movw	r3, #5108	; 0x13f4
 8002f30:	5cc3      	ldrb	r3, [r0, r3]
 8002f32:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002f34:	2000      	movs	r0, #0
	break;
 8002f36:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 8002f38:	f241 33f6 	movw	r3, #5110	; 0x13f6
 8002f3c:	5ec3      	ldrsh	r3, [r0, r3]
 8002f3e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002f40:	2000      	movs	r0, #0
	break;
 8002f42:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 8002f44:	f241 33f8 	movw	r3, #5112	; 0x13f8
 8002f48:	5ec3      	ldrsh	r3, [r0, r3]
 8002f4a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002f4c:	2000      	movs	r0, #0
	break;
 8002f4e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 8002f50:	f241 33fa 	movw	r3, #5114	; 0x13fa
 8002f54:	5cc3      	ldrb	r3, [r0, r3]
 8002f56:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002f58:	2000      	movs	r0, #0
	break;
 8002f5a:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 8002f5c:	f241 33ce 	movw	r3, #5070	; 0x13ce
 8002f60:	5cc3      	ldrb	r3, [r0, r3]
 8002f62:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002f64:	2000      	movs	r0, #0
	break;
 8002f66:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 8002f68:	f241 33f0 	movw	r3, #5104	; 0x13f0
		*ptuning_parm_value = (int32_t)(
 8002f6c:	58c3      	ldr	r3, [r0, r3]
 8002f6e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002f70:	2000      	movs	r0, #0
	break;
 8002f72:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 8002f74:	f241 33fc 	movw	r3, #5116	; 0x13fc
		*ptuning_parm_value =
 8002f78:	58c3      	ldr	r3, [r0, r3]
 8002f7a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002f7c:	2000      	movs	r0, #0
	break;
 8002f7e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 8002f80:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
		*ptuning_parm_value =
 8002f84:	6803      	ldr	r3, [r0, #0]
 8002f86:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002f88:	2000      	movs	r0, #0
	break;
 8002f8a:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 8002f8c:	f241 4304 	movw	r3, #5124	; 0x1404
		*ptuning_parm_value =
 8002f90:	58c3      	ldr	r3, [r0, r3]
 8002f92:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002f94:	2000      	movs	r0, #0
	break;
 8002f96:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 8002f98:	f241 4308 	movw	r3, #5128	; 0x1408
 8002f9c:	5ac3      	ldrh	r3, [r0, r3]
 8002f9e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002fa0:	2000      	movs	r0, #0
	break;
 8002fa2:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8002fa4:	f241 4328 	movw	r3, #5160	; 0x1428
 8002fa8:	5cc3      	ldrb	r3, [r0, r3]
 8002faa:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002fac:	2000      	movs	r0, #0
	break;
 8002fae:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002fb0:	f8d0 3198 	ldr.w	r3, [r0, #408]	; 0x198
 8002fb4:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002fb6:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
	break;
 8002fb8:	4770      	bx	lr
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 8002fba:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
 8002fbe:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002fc0:	2000      	movs	r0, #0
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
	break;
 8002fc2:	4770      	bx	lr
	case VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 8002fc4:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
 8002fc8:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002fca:	2000      	movs	r0, #0
	break;
 8002fcc:	4770      	bx	lr
	case VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
 8002fce:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
 8002fd2:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002fd4:	2000      	movs	r0, #0
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
	break;
 8002fd6:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 8002fd8:	f890 31b4 	ldrb.w	r3, [r0, #436]	; 0x1b4
 8002fdc:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002fde:	2000      	movs	r0, #0
	break;
 8002fe0:	4770      	bx	lr
	case VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
 8002fe2:	f8d0 31b8 	ldr.w	r3, [r0, #440]	; 0x1b8
 8002fe6:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002fe8:	2000      	movs	r0, #0
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
	break;
 8002fea:	4770      	bx	lr
	case VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 8002fec:	f890 31bc 	ldrb.w	r3, [r0, #444]	; 0x1bc
 8002ff0:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ff2:	2000      	movs	r0, #0
	break;
 8002ff4:	4770      	bx	lr
	case VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 8002ff6:	f241 430c 	movw	r3, #5132	; 0x140c
		*ptuning_parm_value =
 8002ffa:	58c3      	ldr	r3, [r0, r3]
 8002ffc:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8002ffe:	2000      	movs	r0, #0
	break;
 8003000:	4770      	bx	lr

	case VL53LX_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 8003002:	f890 31bd 	ldrb.w	r3, [r0, #445]	; 0x1bd
 8003006:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003008:	2000      	movs	r0, #0
	break;
 800300a:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 800300c:	f9b0 31be 	ldrsh.w	r3, [r0, #446]	; 0x1be
 8003010:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003012:	2000      	movs	r0, #0
	break;
 8003014:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 8003016:	f9b0 31c0 	ldrsh.w	r3, [r0, #448]	; 0x1c0
 800301a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800301c:	2000      	movs	r0, #0
	break;
 800301e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 8003020:	f9b0 31c2 	ldrsh.w	r3, [r0, #450]	; 0x1c2
 8003024:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003026:	2000      	movs	r0, #0
	break;
 8003028:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 800302a:	f9b0 31c4 	ldrsh.w	r3, [r0, #452]	; 0x1c4
 800302e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003030:	2000      	movs	r0, #0
	break;
 8003032:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 8003034:	f9b0 31c6 	ldrsh.w	r3, [r0, #454]	; 0x1c6
 8003038:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800303a:	2000      	movs	r0, #0
	break;
 800303c:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 800303e:	f9b0 31c8 	ldrsh.w	r3, [r0, #456]	; 0x1c8
 8003042:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003044:	2000      	movs	r0, #0
	break;
 8003046:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 8003048:	f9b0 31ca 	ldrsh.w	r3, [r0, #458]	; 0x1ca
 800304c:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800304e:	2000      	movs	r0, #0
	break;
 8003050:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 8003052:	f9b0 31cc 	ldrsh.w	r3, [r0, #460]	; 0x1cc
 8003056:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003058:	2000      	movs	r0, #0
	break;
 800305a:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 800305c:	f9b0 31ce 	ldrsh.w	r3, [r0, #462]	; 0x1ce
 8003060:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003062:	2000      	movs	r0, #0
	break;
 8003064:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 8003066:	f9b0 31d0 	ldrsh.w	r3, [r0, #464]	; 0x1d0
 800306a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800306c:	2000      	movs	r0, #0
	break;
 800306e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 8003070:	f9b0 31d2 	ldrsh.w	r3, [r0, #466]	; 0x1d2
 8003074:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003076:	2000      	movs	r0, #0
	break;
 8003078:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 800307a:	f9b0 31d4 	ldrsh.w	r3, [r0, #468]	; 0x1d4
 800307e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003080:	2000      	movs	r0, #0
	break;
 8003082:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 8003084:	f9b0 31d6 	ldrsh.w	r3, [r0, #470]	; 0x1d6
 8003088:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800308a:	2000      	movs	r0, #0
	break;
 800308c:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 800308e:	f9b0 31d8 	ldrsh.w	r3, [r0, #472]	; 0x1d8
 8003092:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003094:	2000      	movs	r0, #0
	break;
 8003096:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 8003098:	f9b0 31da 	ldrsh.w	r3, [r0, #474]	; 0x1da
 800309c:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800309e:	2000      	movs	r0, #0
	break;
 80030a0:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 80030a2:	f9b0 31dc 	ldrsh.w	r3, [r0, #476]	; 0x1dc
 80030a6:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80030a8:	2000      	movs	r0, #0
	break;
 80030aa:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 80030ac:	f9b0 31de 	ldrsh.w	r3, [r0, #478]	; 0x1de
 80030b0:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80030b2:	2000      	movs	r0, #0
	break;
 80030b4:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 80030b6:	f9b0 31e0 	ldrsh.w	r3, [r0, #480]	; 0x1e0
 80030ba:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80030bc:	2000      	movs	r0, #0
	break;
 80030be:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 80030c0:	f9b0 31e2 	ldrsh.w	r3, [r0, #482]	; 0x1e2
 80030c4:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80030c6:	2000      	movs	r0, #0
	break;
 80030c8:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 80030ca:	f9b0 31e4 	ldrsh.w	r3, [r0, #484]	; 0x1e4
 80030ce:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80030d0:	2000      	movs	r0, #0
	break;
 80030d2:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 80030d4:	f9b0 31e6 	ldrsh.w	r3, [r0, #486]	; 0x1e6
 80030d8:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80030da:	2000      	movs	r0, #0
	break;
 80030dc:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 80030de:	f9b0 31e8 	ldrsh.w	r3, [r0, #488]	; 0x1e8
 80030e2:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80030e4:	2000      	movs	r0, #0
	break;
 80030e6:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 80030e8:	f9b0 31ea 	ldrsh.w	r3, [r0, #490]	; 0x1ea
 80030ec:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80030ee:	2000      	movs	r0, #0
	break;
 80030f0:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 80030f2:	f9b0 31ec 	ldrsh.w	r3, [r0, #492]	; 0x1ec
 80030f6:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80030f8:	2000      	movs	r0, #0
	break;
 80030fa:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 80030fc:	f9b0 31ee 	ldrsh.w	r3, [r0, #494]	; 0x1ee
 8003100:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003102:	2000      	movs	r0, #0
	break;
 8003104:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 8003106:	f9b0 31f0 	ldrsh.w	r3, [r0, #496]	; 0x1f0
 800310a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800310c:	2000      	movs	r0, #0
	break;
 800310e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 8003110:	f9b0 31f2 	ldrsh.w	r3, [r0, #498]	; 0x1f2
 8003114:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003116:	2000      	movs	r0, #0
	break;
 8003118:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 800311a:	f9b0 31f4 	ldrsh.w	r3, [r0, #500]	; 0x1f4
 800311e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003120:	2000      	movs	r0, #0
	break;
 8003122:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 8003124:	f9b0 31f6 	ldrsh.w	r3, [r0, #502]	; 0x1f6
 8003128:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800312a:	2000      	movs	r0, #0
	break;
 800312c:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 800312e:	f9b0 31f8 	ldrsh.w	r3, [r0, #504]	; 0x1f8
 8003132:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003134:	2000      	movs	r0, #0
	break;
 8003136:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 8003138:	f9b0 31fa 	ldrsh.w	r3, [r0, #506]	; 0x1fa
 800313c:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800313e:	2000      	movs	r0, #0
	break;
 8003140:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 8003142:	f9b0 31fc 	ldrsh.w	r3, [r0, #508]	; 0x1fc
 8003146:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003148:	2000      	movs	r0, #0
	break;
 800314a:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 800314c:	f9b0 31fe 	ldrsh.w	r3, [r0, #510]	; 0x1fe
 8003150:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003152:	2000      	movs	r0, #0
	break;
 8003154:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 8003156:	f9b0 3200 	ldrsh.w	r3, [r0, #512]	; 0x200
 800315a:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800315c:	2000      	movs	r0, #0
	break;
 800315e:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 8003160:	f9b0 3202 	ldrsh.w	r3, [r0, #514]	; 0x202
 8003164:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003166:	2000      	movs	r0, #0
	break;
 8003168:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 800316a:	f9b0 3204 	ldrsh.w	r3, [r0, #516]	; 0x204
 800316e:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003170:	2000      	movs	r0, #0
	break;
 8003172:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 8003174:	f9b0 3206 	ldrsh.w	r3, [r0, #518]	; 0x206
 8003178:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800317a:	2000      	movs	r0, #0
	break;
 800317c:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 800317e:	f9b0 3208 	ldrsh.w	r3, [r0, #520]	; 0x208
 8003182:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003184:	2000      	movs	r0, #0
	break;
 8003186:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 8003188:	f9b0 320a 	ldrsh.w	r3, [r0, #522]	; 0x20a
 800318c:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800318e:	2000      	movs	r0, #0
	break;
 8003190:	4770      	bx	lr
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 8003192:	f9b0 320c 	ldrsh.w	r3, [r0, #524]	; 0x20c
 8003196:	6013      	str	r3, [r2, #0]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003198:	2000      	movs	r0, #0
	break;
 800319a:	4770      	bx	lr

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800319c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80031a0:	6013      	str	r3, [r2, #0]
		status = VL53LX_ERROR_INVALID_PARAMS;
 80031a2:	f06f 0003 	mvn.w	r0, #3
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80031a6:	4770      	bx	lr

080031a8 <VL53LX_load_patch>:
{
 80031a8:	b570      	push	{r4, r5, r6, lr}
 80031aa:	b0c2      	sub	sp, #264	; 0x108
	int32_t patch_tuning = 0;
 80031ac:	2200      	movs	r2, #0
		status = VL53LX_WrByte(Dev,
 80031ae:	2185      	movs	r1, #133	; 0x85
{
 80031b0:	4605      	mov	r5, r0
	int32_t patch_tuning = 0;
 80031b2:	9201      	str	r2, [sp, #4]
		status = VL53LX_WrByte(Dev,
 80031b4:	f7fe f9bc 	bl	8001530 <VL53LX_WrByte>
	if (status == VL53LX_ERROR_NONE)
 80031b8:	4604      	mov	r4, r0
 80031ba:	b910      	cbnz	r0, 80031c2 <VL53LX_load_patch+0x1a>
		VL53LX_enable_powerforce(Dev);
 80031bc:	4628      	mov	r0, r5
 80031be:	f001 faed 	bl	800479c <VL53LX_enable_powerforce>
	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER,
 80031c2:	aa01      	add	r2, sp, #4
 80031c4:	f248 018c 	movw	r1, #32908	; 0x808c
 80031c8:	4628      	mov	r0, r5
 80031ca:	f7ff fb70 	bl	80028ae <VL53LX_get_tuning_parm>
	switch (patch_tuning) {
 80031ce:	9b01      	ldr	r3, [sp, #4]
 80031d0:	3b01      	subs	r3, #1
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	bf9b      	ittet	ls
 80031d6:	4a27      	ldrls	r2, [pc, #156]	; (8003274 <VL53LX_load_patch+0xcc>)
 80031d8:	189b      	addls	r3, r3, r2
 80031da:	2300      	movhi	r3, #0
 80031dc:	799b      	ldrbls	r3, [r3, #6]
	if (status == VL53LX_ERROR_NONE) {
 80031de:	2c00      	cmp	r4, #0
 80031e0:	d144      	bne.n	800326c <VL53LX_load_patch+0xc4>
		comms_buffer[0] = 0x29;
 80031e2:	4a25      	ldr	r2, [pc, #148]	; (8003278 <VL53LX_load_patch+0xd0>)
 80031e4:	9202      	str	r2, [sp, #8]
		comms_buffer[4] = 0x28;
 80031e6:	2228      	movs	r2, #40	; 0x28
 80031e8:	f88d 200c 	strb.w	r2, [sp, #12]
		comms_buffer[5] = patch_power;
 80031ec:	f88d 300d 	strb.w	r3, [sp, #13]
		status = VL53LX_WriteMulti(Dev,
 80031f0:	aa02      	add	r2, sp, #8
 80031f2:	2306      	movs	r3, #6
 80031f4:	f240 4176 	movw	r1, #1142	; 0x476
 80031f8:	4628      	mov	r0, r5
 80031fa:	f7fe f961 	bl	80014c0 <VL53LX_WriteMulti>
	if (status == VL53LX_ERROR_NONE) {
 80031fe:	4604      	mov	r4, r0
 8003200:	bba0      	cbnz	r0, 800326c <VL53LX_load_patch+0xc4>
		comms_buffer[0] = 0x03;
 8003202:	4b1e      	ldr	r3, [pc, #120]	; (800327c <VL53LX_load_patch+0xd4>)
 8003204:	9302      	str	r3, [sp, #8]
		comms_buffer[4] = 0x07;
 8003206:	f642 1307 	movw	r3, #10503	; 0x2907
 800320a:	f8ad 300c 	strh.w	r3, [sp, #12]
		status = VL53LX_WriteMulti(Dev,
 800320e:	aa02      	add	r2, sp, #8
 8003210:	2306      	movs	r3, #6
 8003212:	f240 4196 	movw	r1, #1174	; 0x496
 8003216:	4628      	mov	r0, r5
 8003218:	f7fe f952 	bl	80014c0 <VL53LX_WriteMulti>
	if (status == VL53LX_ERROR_NONE) {
 800321c:	4604      	mov	r4, r0
 800321e:	bb28      	cbnz	r0, 800326c <VL53LX_load_patch+0xc4>
		comms_buffer[0] = 0x00;
 8003220:	f44f 66e0 	mov.w	r6, #1792	; 0x700
		status = VL53LX_WriteMulti(Dev,
 8003224:	2302      	movs	r3, #2
 8003226:	aa02      	add	r2, sp, #8
 8003228:	f240 4172 	movw	r1, #1138	; 0x472
 800322c:	4628      	mov	r0, r5
		comms_buffer[0] = 0x00;
 800322e:	f8ad 6008 	strh.w	r6, [sp, #8]
		status = VL53LX_WriteMulti(Dev,
 8003232:	f7fe f945 	bl	80014c0 <VL53LX_WriteMulti>
	if (status == VL53LX_ERROR_NONE) {
 8003236:	4604      	mov	r4, r0
 8003238:	b9c0      	cbnz	r0, 800326c <VL53LX_load_patch+0xc4>
		status = VL53LX_WriteMulti(Dev,
 800323a:	2302      	movs	r3, #2
 800323c:	aa02      	add	r2, sp, #8
 800323e:	f240 4174 	movw	r1, #1140	; 0x474
 8003242:	4628      	mov	r0, r5
		comms_buffer[0] = 0x00;
 8003244:	f8ad 6008 	strh.w	r6, [sp, #8]
		status = VL53LX_WriteMulti(Dev,
 8003248:	f7fe f93a 	bl	80014c0 <VL53LX_WriteMulti>
	if (status == VL53LX_ERROR_NONE)
 800324c:	4604      	mov	r4, r0
 800324e:	b968      	cbnz	r0, 800326c <VL53LX_load_patch+0xc4>
		status = VL53LX_WrByte(Dev,
 8003250:	2201      	movs	r2, #1
 8003252:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8003256:	4628      	mov	r0, r5
 8003258:	f7fe f96a 	bl	8001530 <VL53LX_WrByte>
	if (status == VL53LX_ERROR_NONE)
 800325c:	4604      	mov	r4, r0
 800325e:	b928      	cbnz	r0, 800326c <VL53LX_load_patch+0xc4>
		status = VL53LX_WrByte(Dev,
 8003260:	2201      	movs	r2, #1
 8003262:	2185      	movs	r1, #133	; 0x85
 8003264:	4628      	mov	r0, r5
 8003266:	f7fe f963 	bl	8001530 <VL53LX_WrByte>
 800326a:	4604      	mov	r4, r0
}
 800326c:	4620      	mov	r0, r4
 800326e:	b042      	add	sp, #264	; 0x108
 8003270:	bd70      	pop	{r4, r5, r6, pc}
 8003272:	bf00      	nop
 8003274:	0800c4eb 	.word	0x0800c4eb
 8003278:	400ec929 	.word	0x400ec929
 800327c:	6f036d03 	.word	0x6f036d03

08003280 <VL53LX_get_histogram_bin_data>:
{
 8003280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003284:	b0cb      	sub	sp, #300	; 0x12c
	int32_t    hist_merge				= 0;
 8003286:	2300      	movs	r3, #0
{
 8003288:	460d      	mov	r5, r1
		status = VL53LX_ReadMulti(
 800328a:	aa0a      	add	r2, sp, #40	; 0x28
	int32_t    hist_merge				= 0;
 800328c:	9307      	str	r3, [sp, #28]
		status = VL53LX_ReadMulti(
 800328e:	2188      	movs	r1, #136	; 0x88
 8003290:	2353      	movs	r3, #83	; 0x53
{
 8003292:	4604      	mov	r4, r0
		status = VL53LX_ReadMulti(
 8003294:	f7fe f934 	bl	8001500 <VL53LX_ReadMulti>
	pdata->result__interrupt_status               = *(pbuffer +   0);
 8003298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800329a:	67ab      	str	r3, [r5, #120]	; 0x78
		status = VL53LX_ReadMulti(
 800329c:	9005      	str	r0, [sp, #20]
		VL53LX_i2c_decode_uint16_t(2, pbuffer +   4);
 800329e:	a90b      	add	r1, sp, #44	; 0x2c
 80032a0:	2002      	movs	r0, #2
 80032a2:	f001 fa28 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
			VL53LX_i2c_decode_uint16_t(2, pbuffer);
 80032a6:	f10d 0176 	add.w	r1, sp, #118	; 0x76
	pdata->result__dss_actual_effective_spads =
 80032aa:	f8a5 007c 	strh.w	r0, [r5, #124]	; 0x7c
			VL53LX_i2c_decode_uint16_t(2, pbuffer);
 80032ae:	2002      	movs	r0, #2
 80032b0:	f001 fa21 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 80032b4:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 80032b8:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
	pdev->dbg_results.phasecal_result__reference_phase =
 80032bc:	f241 3394 	movw	r3, #5012	; 0x1394
	pdata->phasecal_result__reference_phase =
 80032c0:	f8a5 007e 	strh.w	r0, [r5, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 80032c4:	52e0      	strh	r0, [r4, r3]
	pdev->dbg_results.phasecal_result__vcsel_start =
 80032c6:	f241 3396 	movw	r3, #5014	; 0x1396
			pdata->phasecal_result__vcsel_start;
 80032ca:	f895 2080 	ldrb.w	r2, [r5, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 80032ce:	54e2      	strb	r2, [r4, r3]
	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 80032d0:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 80032d4:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 80032d8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80032dc:	f105 0618 	add.w	r6, r5, #24
	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 80032e0:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 80032e4:	f105 0378 	add.w	r3, r5, #120	; 0x78
 80032e8:	46b0      	mov	r8, r6
 80032ea:	9303      	str	r3, [sp, #12]
	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 80032ec:	4637      	mov	r7, r6
	pbuffer = &buffer[i2c_buffer_offset_bytes];
 80032ee:	f10d 092e 	add.w	r9, sp, #46	; 0x2e
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 80032f2:	4649      	mov	r1, r9
 80032f4:	2003      	movs	r0, #3
 80032f6:	f001 fa28 	bl	800474a <VL53LX_i2c_decode_uint32_t>
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 80032fa:	9b03      	ldr	r3, [sp, #12]
		pdata->bin_data[bin] =
 80032fc:	f847 0b04 	str.w	r0, [r7], #4
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8003300:	429f      	cmp	r7, r3
		pbuffer += 3;
 8003302:	f109 0903 	add.w	r9, r9, #3
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8003306:	d1f4      	bne.n	80032f2 <VL53LX_get_histogram_bin_data+0x72>
	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE, &hist_merge);
 8003308:	aa07      	add	r2, sp, #28
 800330a:	f248 018d 	movw	r1, #32909	; 0x808d
 800330e:	4620      	mov	r0, r4
 8003310:	f7ff facd 	bl	80028ae <VL53LX_get_tuning_parm>
	if (pdata->result__stream_count == 0) {
 8003314:	f895 707b 	ldrb.w	r7, [r5, #123]	; 0x7b
 8003318:	b957      	cbnz	r7, 8003330 <VL53LX_get_histogram_bin_data+0xb0>
		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 800331a:	f504 50e2 	add.w	r0, r4, #7232	; 0x1c40
 800331e:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8003322:	4639      	mov	r1, r7
 8003324:	3008      	adds	r0, #8
 8003326:	f006 fab7 	bl	8009898 <memset>
		pdev->bin_rec_pos = 0;
 800332a:	f641 4344 	movw	r3, #7236	; 0x1c44
 800332e:	52e7      	strh	r7, [r4, r3]
	if (hist_merge == 1)
 8003330:	9b07      	ldr	r3, [sp, #28]
 8003332:	2b01      	cmp	r3, #1
 8003334:	f040 80e2 	bne.w	80034fc <VL53LX_get_histogram_bin_data+0x27c>
	int32_t    TuningBinRecSize		    = 0;
 8003338:	2300      	movs	r3, #0
	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 800333a:	aa08      	add	r2, sp, #32
 800333c:	f248 018f 	movw	r1, #32911	; 0x808f
 8003340:	4620      	mov	r0, r4
	int32_t    rmt  = 0;
 8003342:	e9cd 3308 	strd	r3, r3, [sp, #32]
	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 8003346:	f7ff fab2 	bl	80028ae <VL53LX_get_tuning_parm>
	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD,
 800334a:	f248 018e 	movw	r1, #32910	; 0x808e
 800334e:	aa09      	add	r2, sp, #36	; 0x24
 8003350:	4620      	mov	r0, r4
 8003352:	f7ff faac 	bl	80028ae <VL53LX_get_tuning_parm>
	if (pdev->pos_before_next_recom == 0) {
 8003356:	f641 4345 	movw	r3, #7237	; 0x1c45
 800335a:	5ce1      	ldrb	r1, [r4, r3]
 800335c:	2900      	cmp	r1, #0
 800335e:	f040 814e 	bne.w	80035fe <VL53LX_get_histogram_bin_data+0x37e>
		if (pdev->bin_rec_pos > 0)
 8003362:	f641 4344 	movw	r3, #7236	; 0x1c44
 8003366:	f895 707b 	ldrb.w	r7, [r5, #123]	; 0x7b
 800336a:	5ce3      	ldrb	r3, [r4, r3]
 800336c:	9301      	str	r3, [sp, #4]
 800336e:	9b08      	ldr	r3, [sp, #32]
 8003370:	9302      	str	r3, [sp, #8]
 8003372:	9b01      	ldr	r3, [sp, #4]
 8003374:	f007 0701 	and.w	r7, r7, #1
 8003378:	f087 0901 	eor.w	r9, r7, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d07c      	beq.n	800347a <VL53LX_get_histogram_bin_data+0x1fa>
			prev_pos = (TuningBinRecSize - 1);
 8003380:	1e58      	subs	r0, r3, #1
 8003382:	b2c0      	uxtb	r0, r0
		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 8003384:	23c0      	movs	r3, #192	; 0xc0
 8003386:	f04f 0c60 	mov.w	ip, #96	; 0x60
 800338a:	4343      	muls	r3, r0
 800338c:	fb0c 3309 	mla	r3, ip, r9, r3
 8003390:	4423      	add	r3, r4
 8003392:	f641 4258 	movw	r2, #7256	; 0x1c58
 8003396:	589b      	ldr	r3, [r3, r2]
 8003398:	2b00      	cmp	r3, #0
 800339a:	dd78      	ble.n	800348e <VL53LX_get_histogram_bin_data+0x20e>
	for (bin = timing * 4; bin < HighIndex; bin++) {
 800339c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80033a0:	0180      	lsls	r0, r0, #6
 80033a2:	fb1c 0c09 	smlabb	ip, ip, r9, r0
		HighIndex = BuffSize - timing * 4;
 80033a6:	ea4f 0389 	mov.w	r3, r9, lsl #2
 80033aa:	f50c 5ce2 	add.w	ip, ip, #7232	; 0x1c40
 80033ae:	f1c3 0218 	rsb	r2, r3, #24
 80033b2:	f10c 0c08 	add.w	ip, ip, #8
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	eb04 0b0c 	add.w	fp, r4, ip
	for (bin = timing * 4; bin < HighIndex; bin++) {
 80033be:	4618      	mov	r0, r3
	total_rate_cur = 0;
 80033c0:	f04f 0c00 	mov.w	ip, #0
	for (bin = timing * 4; bin < HighIndex; bin++) {
 80033c4:	f002 03fc 	and.w	r3, r2, #252	; 0xfc
	total_rate_pre = 0;
 80033c8:	46e6      	mov	lr, ip
	for (bin = timing * 4; bin < HighIndex; bin++) {
 80033ca:	9304      	str	r3, [sp, #16]
 80033cc:	9b04      	ldr	r3, [sp, #16]
 80033ce:	b282      	uxth	r2, r0
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d854      	bhi.n	800347e <VL53LX_get_histogram_bin_data+0x1fe>
	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 80033d4:	f1be 0f00 	cmp.w	lr, #0
 80033d8:	d059      	beq.n	800348e <VL53LX_get_histogram_bin_data+0x20e>
 80033da:	f1bc 0f00 	cmp.w	ip, #0
 80033de:	d059      	beq.n	8003494 <VL53LX_get_histogram_bin_data+0x214>
		diff_histo_stddev = 0;
 80033e0:	f04f 0a00 	mov.w	sl, #0
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 80033e4:	9b00      	ldr	r3, [sp, #0]
 80033e6:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
 80033ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033ee:	4603      	mov	r3, r0
 80033f0:	4342      	muls	r2, r0
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 80033f2:	9800      	ldr	r0, [sp, #0]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 80033f4:	fb92 f2fe 	sdiv	r2, r2, lr
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 80033f8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80033fc:	4358      	muls	r0, r3
 80033fe:	9b00      	ldr	r3, [sp, #0]
 8003400:	fb90 f0fc 	sdiv	r0, r0, ip
 8003404:	3301      	adds	r3, #1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8003406:	1a12      	subs	r2, r2, r0
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	fb02 aa02 	mla	sl, r2, r2, sl
		for (bin = timing * 4; bin < HighIndex; bin++) {
 800340e:	9b04      	ldr	r3, [sp, #16]
 8003410:	f8bd 2000 	ldrh.w	r2, [sp]
 8003414:	4293      	cmp	r3, r2
 8003416:	d8e5      	bhi.n	80033e4 <VL53LX_get_histogram_bin_data+0x164>
		if (diff_histo_stddev >= rmt) {
 8003418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800341a:	4553      	cmp	r3, sl
 800341c:	f641 4048 	movw	r0, #7240	; 0x1c48
 8003420:	dc3e      	bgt.n	80034a0 <VL53LX_get_histogram_bin_data+0x220>
			memset(pdev->multi_bins_rec, 0,
 8003422:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8003426:	2100      	movs	r1, #0
 8003428:	4420      	add	r0, r4
 800342a:	f006 fa35 	bl	8009898 <memset>
			pdev->bin_rec_pos = 0;
 800342e:	f641 4344 	movw	r3, #7236	; 0x1c44
 8003432:	2200      	movs	r2, #0
 8003434:	54e2      	strb	r2, [r4, r3]
			if (timing == 0)
 8003436:	f641 4345 	movw	r3, #7237	; 0x1c45
 800343a:	b36f      	cbz	r7, 8003498 <VL53LX_get_histogram_bin_data+0x218>
				pdev->pos_before_next_recom =
 800343c:	2206      	movs	r2, #6
 800343e:	54e2      	strb	r2, [r4, r3]
			recom_been_reset = 1;
 8003440:	4639      	mov	r1, r7
		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 8003442:	f641 4244 	movw	r2, #7236	; 0x1c44
 8003446:	9802      	ldr	r0, [sp, #8]
 8003448:	5ca3      	ldrb	r3, [r4, r2]
 800344a:	3801      	subs	r0, #1
 800344c:	4283      	cmp	r3, r0
 800344e:	d138      	bne.n	80034c2 <VL53LX_get_histogram_bin_data+0x242>
 8003450:	2f00      	cmp	r7, #0
 8003452:	f040 80e1 	bne.w	8003618 <VL53LX_get_histogram_bin_data+0x398>
			pdev->bin_rec_pos = 0;
 8003456:	54a7      	strb	r7, [r4, r2]
			 (pdev->pos_before_next_recom == 0)) {
 8003458:	f641 4345 	movw	r3, #7237	; 0x1c45
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 800345c:	5ce3      	ldrb	r3, [r4, r3]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d14c      	bne.n	80034fc <VL53LX_get_histogram_bin_data+0x27c>
				pdata->bin_data[bin] = 0;
 8003462:	f846 3b04 	str.w	r3, [r6], #4
			for (bin = 0; bin < BuffSize; bin++)
 8003466:	9a03      	ldr	r2, [sp, #12]
 8003468:	4296      	cmp	r6, r2
 800346a:	d1fa      	bne.n	8003462 <VL53LX_get_histogram_bin_data+0x1e2>
					(pdev->multi_bins_rec[i][timing][bin]);
 800346c:	2318      	movs	r3, #24
 800346e:	2200      	movs	r2, #0
 8003470:	fb03 f909 	mul.w	r9, r3, r9
 8003474:	2630      	movs	r6, #48	; 0x30
 8003476:	2000      	movs	r0, #0
 8003478:	e035      	b.n	80034e6 <VL53LX_get_histogram_bin_data+0x266>
			prev_pos = (TuningBinRecSize - 1);
 800347a:	9b02      	ldr	r3, [sp, #8]
 800347c:	e780      	b.n	8003380 <VL53LX_get_histogram_bin_data+0x100>
		total_rate_pre +=
 800347e:	f85b 2020 	ldr.w	r2, [fp, r0, lsl #2]
 8003482:	4496      	add	lr, r2
		total_rate_cur += pdata->bin_data[bin];
 8003484:	f856 2020 	ldr.w	r2, [r6, r0, lsl #2]
 8003488:	3001      	adds	r0, #1
 800348a:	4494      	add	ip, r2
	for (bin = timing * 4; bin < HighIndex; bin++) {
 800348c:	e79e      	b.n	80033cc <VL53LX_get_histogram_bin_data+0x14c>
		diff_histo_stddev = 0;
 800348e:	f04f 0a00 	mov.w	sl, #0
 8003492:	e7c1      	b.n	8003418 <VL53LX_get_histogram_bin_data+0x198>
 8003494:	46e2      	mov	sl, ip
 8003496:	e7bf      	b.n	8003418 <VL53LX_get_histogram_bin_data+0x198>
				pdev->pos_before_next_recom =
 8003498:	2207      	movs	r2, #7
 800349a:	54e2      	strb	r2, [r4, r3]
			recom_been_reset = 1;
 800349c:	2101      	movs	r1, #1
 800349e:	e7d0      	b.n	8003442 <VL53LX_get_histogram_bin_data+0x1c2>
 80034a0:	9a01      	ldr	r2, [sp, #4]
 80034a2:	23c0      	movs	r3, #192	; 0xc0
 80034a4:	fb13 0302 	smlabb	r3, r3, r2, r0
 80034a8:	2060      	movs	r0, #96	; 0x60
 80034aa:	fb10 3009 	smlabb	r0, r0, r9, r3
 80034ae:	4420      	add	r0, r4
		if (diff_histo_stddev >= rmt) {
 80034b0:	4633      	mov	r3, r6
					pdata->bin_data[i];
 80034b2:	f853 2b04 	ldr.w	r2, [r3], #4
				pdev->multi_bins_rec[pos][timing][i] =
 80034b6:	f840 2b04 	str.w	r2, [r0], #4
			for (i = 0; i < BuffSize; i++)
 80034ba:	9a03      	ldr	r2, [sp, #12]
 80034bc:	4293      	cmp	r3, r2
 80034be:	d1f8      	bne.n	80034b2 <VL53LX_get_histogram_bin_data+0x232>
 80034c0:	e7bf      	b.n	8003442 <VL53LX_get_histogram_bin_data+0x1c2>
		else if (timing == 1)
 80034c2:	2f00      	cmp	r7, #0
 80034c4:	f040 80a8 	bne.w	8003618 <VL53LX_get_histogram_bin_data+0x398>
			pdev->bin_rec_pos++;
 80034c8:	3301      	adds	r3, #1
 80034ca:	54a3      	strb	r3, [r4, r2]
 80034cc:	e7c4      	b.n	8003458 <VL53LX_get_histogram_bin_data+0x1d8>
					(pdev->multi_bins_rec[i][timing][bin]);
 80034ce:	fb06 9303 	mla	r3, r6, r3, r9
 80034d2:	4413      	add	r3, r2
 80034d4:	f203 7312 	addw	r3, r3, #1810	; 0x712
					pdata->bin_data[bin] +=
 80034d8:	f8d8 1000 	ldr.w	r1, [r8]
 80034dc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80034e0:	4419      	add	r1, r3
 80034e2:	f8c8 1000 	str.w	r1, [r8]
				for (i = 0; i < TuningBinRecSize; i++)
 80034e6:	9902      	ldr	r1, [sp, #8]
 80034e8:	b2c3      	uxtb	r3, r0
 80034ea:	428b      	cmp	r3, r1
 80034ec:	f100 0001 	add.w	r0, r0, #1
 80034f0:	dbed      	blt.n	80034ce <VL53LX_get_histogram_bin_data+0x24e>
			for (bin = 0; bin < BuffSize; bin++)
 80034f2:	3201      	adds	r2, #1
 80034f4:	2a18      	cmp	r2, #24
 80034f6:	f108 0804 	add.w	r8, r8, #4
 80034fa:	d1bc      	bne.n	8003476 <VL53LX_get_histogram_bin_data+0x1f6>
	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 80034fc:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8003500:	70ab      	strb	r3, [r5, #2]
	pdata->VL53LX_p_019               = 0;
 8003502:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003506:	812b      	strh	r3, [r5, #8]
	pdata->VL53LX_p_021          = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8003508:	2318      	movs	r3, #24
 800350a:	72ab      	strb	r3, [r5, #10]
	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 800350c:	f894 3359 	ldrb.w	r3, [r4, #857]	; 0x359
 8003510:	f885 3081 	strb.w	r3, [r5, #129]	; 0x81
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 8003514:	f894 235c 	ldrb.w	r2, [r4, #860]	; 0x35c
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 8003518:	f894 3346 	ldrb.w	r3, [r4, #838]	; 0x346
	pdata->vcsel_width +=
 800351c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8003520:	f8a5 3082 	strh.w	r3, [r5, #130]	; 0x82
	pdata->VL53LX_p_015 =
 8003524:	f8b4 3316 	ldrh.w	r3, [r4, #790]	; 0x316
 8003528:	f8a5 3086 	strh.w	r3, [r5, #134]	; 0x86
	VL53LX_hist_get_bin_sequence_config(Dev, pdata);
 800352c:	4629      	mov	r1, r5
 800352e:	4620      	mov	r0, r4
 8003530:	f001 fa31 	bl	8004996 <VL53LX_hist_get_bin_sequence_config>
	if (pdev->ll_state.rd_timing_status == 0) {
 8003534:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8003538:	2b00      	cmp	r3, #0
 800353a:	d163      	bne.n	8003604 <VL53LX_get_histogram_bin_data+0x384>
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 800353c:	f894 3370 	ldrb.w	r3, [r4, #880]	; 0x370
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 8003540:	f894 0371 	ldrb.w	r0, [r4, #881]	; 0x371
		encoded_timeout =
 8003544:	eb00 2003 	add.w	r0, r0, r3, lsl #8
		pdata->VL53LX_p_005 =  ptim_cfg->range_config__vcsel_period_a;
 8003548:	f894 3372 	ldrb.w	r3, [r4, #882]	; 0x372
		encoded_timeout =
 800354c:	b280      	uxth	r0, r0
		pdata->VL53LX_p_005 =  ptim_cfg->range_config__vcsel_period_a;
 800354e:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
	pdata->number_of_ambient_bins  = 0;
 8003552:	2300      	movs	r3, #0
 8003554:	72eb      	strb	r3, [r5, #11]
	for (i = 0; i < 6; i++) {
 8003556:	f105 0112 	add.w	r1, r5, #18
 800355a:	f105 030c 	add.w	r3, r5, #12
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 800355e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003562:	f002 0207 	and.w	r2, r2, #7
 8003566:	2a07      	cmp	r2, #7
					pdata->number_of_ambient_bins + 0x04;
 8003568:	bf02      	ittt	eq
 800356a:	7aea      	ldrbeq	r2, [r5, #11]
 800356c:	3204      	addeq	r2, #4
			pdata->number_of_ambient_bins  =
 800356e:	72ea      	strbeq	r2, [r5, #11]
	for (i = 0; i < 6; i++) {
 8003570:	4299      	cmp	r1, r3
 8003572:	d1f4      	bne.n	800355e <VL53LX_get_histogram_bin_data+0x2de>
		VL53LX_decode_timeout(encoded_timeout);
 8003574:	f001 f97b 	bl	800486e <VL53LX_decode_timeout>
	pdata->total_periods_elapsed =
 8003578:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
		VL53LX_calc_pll_period_us(pdata->VL53LX_p_015);
 800357c:	f8b5 0086 	ldrh.w	r0, [r5, #134]	; 0x86
 8003580:	f002 fb88 	bl	8005c94 <VL53LX_calc_pll_period_us>
	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 8003584:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
		VL53LX_duration_maths(
 8003588:	f8b5 1082 	ldrh.w	r1, [r5, #130]	; 0x82
 800358c:	3301      	adds	r3, #1
 800358e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003592:	f002 fb85 	bl	8005ca0 <VL53LX_duration_maths>
	pdata->woi_duration_us     = 0;
 8003596:	2600      	movs	r6, #0
	pdata->peak_duration_us =
 8003598:	f8c5 008c 	str.w	r0, [r5, #140]	; 0x8c
	pdata->woi_duration_us     = 0;
 800359c:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
	VL53LX_hist_calc_zero_distance_phase(pdata);
 80035a0:	4628      	mov	r0, r5
 80035a2:	f002 fbc3 	bl	8005d2c <VL53LX_hist_calc_zero_distance_phase>
	VL53LX_hist_estimate_ambient_from_ambient_bins(pdata);
 80035a6:	4628      	mov	r0, r5
 80035a8:	f002 fd75 	bl	8006096 <VL53LX_hist_estimate_ambient_from_ambient_bins>
	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 80035ac:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80035b0:	702b      	strb	r3, [r5, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 80035b2:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 80035b6:	706b      	strb	r3, [r5, #1]
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 80035b8:	f504 5403 	add.w	r4, r4, #8384	; 0x20c0
	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53LX_p_003[pdata->zone_id]);
 80035bc:	78ab      	ldrb	r3, [r5, #2]
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 80035be:	3420      	adds	r4, #32
 80035c0:	220a      	movs	r2, #10
 80035c2:	fb02 4303 	mla	r3, r2, r3, r4
	pdata->roi_config__user_roi_centre_spad =
 80035c6:	f893 21aa 	ldrb.w	r2, [r3, #426]	; 0x1aa
 80035ca:	f885 20a8 	strb.w	r2, [r5, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
 80035ce:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 80035d2:	f885 30a9 	strb.w	r3, [r5, #169]	; 0xa9
	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 80035d6:	7426      	strb	r6, [r4, #16]
	switch (pdata->result__range_status &
 80035d8:	f895 3079 	ldrb.w	r3, [r5, #121]	; 0x79
 80035dc:	f003 031f 	and.w	r3, r3, #31
 80035e0:	2b11      	cmp	r3, #17
 80035e2:	d808      	bhi.n	80035f6 <VL53LX_get_histogram_bin_data+0x376>
 80035e4:	490e      	ldr	r1, [pc, #56]	; (8003620 <VL53LX_get_histogram_bin_data+0x3a0>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	409a      	lsls	r2, r3
 80035ea:	420a      	tst	r2, r1
 80035ec:	d003      	beq.n	80035f6 <VL53LX_get_histogram_bin_data+0x376>
		presults->device_status = (pdata->result__range_status &
 80035ee:	7423      	strb	r3, [r4, #16]
		status = VL53LX_ERROR_RANGE_ERROR;
 80035f0:	f06f 0305 	mvn.w	r3, #5
 80035f4:	9305      	str	r3, [sp, #20]
}
 80035f6:	9805      	ldr	r0, [sp, #20]
 80035f8:	b04b      	add	sp, #300	; 0x12c
 80035fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pdev->pos_before_next_recom--;
 80035fe:	3901      	subs	r1, #1
 8003600:	54e1      	strb	r1, [r4, r3]
}
 8003602:	e77b      	b.n	80034fc <VL53LX_get_histogram_bin_data+0x27c>
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 8003604:	f894 3373 	ldrb.w	r3, [r4, #883]	; 0x373
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 8003608:	f894 0374 	ldrb.w	r0, [r4, #884]	; 0x374
		encoded_timeout =
 800360c:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8003610:	b280      	uxth	r0, r0
		pdata->VL53LX_p_005 = ptim_cfg->range_config__vcsel_period_b;
 8003612:	f894 3375 	ldrb.w	r3, [r4, #885]	; 0x375
 8003616:	e79a      	b.n	800354e <VL53LX_get_histogram_bin_data+0x2ce>
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8003618:	2901      	cmp	r1, #1
 800361a:	f47f af1d 	bne.w	8003458 <VL53LX_get_histogram_bin_data+0x1d8>
 800361e:	e76d      	b.n	80034fc <VL53LX_get_histogram_bin_data+0x27c>
 8003620:	0002200e 	.word	0x0002200e

08003624 <VL53LX_get_device_results>:
{
 8003624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003628:	ed2d 8b02 	vpush	{d8}
	if ((pdev->sys_ctrl.system__mode_start &
 800362c:	f890 339c 	ldrb.w	r3, [r0, #924]	; 0x39c
	VL53LX_range_results_t   *presults =
 8003630:	f500 5603 	add.w	r6, r0, #8384	; 0x20c0
	if ((pdev->sys_ctrl.system__mode_start &
 8003634:	079b      	lsls	r3, r3, #30
{
 8003636:	ee08 2a10 	vmov	s16, r2
 800363a:	b08b      	sub	sp, #44	; 0x2c
 800363c:	4604      	mov	r4, r0
	VL53LX_range_results_t   *presults =
 800363e:	f106 0620 	add.w	r6, r6, #32
	if ((pdev->sys_ctrl.system__mode_start &
 8003642:	f140 81eb 	bpl.w	8003a1c <VL53LX_get_device_results+0x3f8>
	VL53LX_histogram_bin_data_t *pHD = &(pdev->hist_data);
 8003646:	f500 787f 	add.w	r8, r0, #1020	; 0x3fc
		status = VL53LX_get_histogram_bin_data(
 800364a:	4641      	mov	r1, r8
 800364c:	f7ff fe18 	bl	8003280 <VL53LX_get_histogram_bin_data>
		if (status == VL53LX_ERROR_NONE &&
 8003650:	4605      	mov	r5, r0
 8003652:	2800      	cmp	r0, #0
 8003654:	d16e      	bne.n	8003734 <VL53LX_get_device_results+0x110>
 8003656:	f894 3407 	ldrb.w	r3, [r4, #1031]	; 0x407
 800365a:	2b00      	cmp	r3, #0
 800365c:	d05d      	beq.n	800371a <VL53LX_get_device_results+0xf6>
		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800365e:	f10d 071b 	add.w	r7, sp, #27
 8003662:	4639      	mov	r1, r7
 8003664:	4620      	mov	r0, r4
 8003666:	f002 f8bb 	bl	80057e0 <VL53LX_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 800366a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 80b0 	beq.w	80037d4 <VL53LX_get_device_results+0x1b0>
		if (pdev->tuning_parms.tp_hist_merge == 1)
 8003674:	f894 31b4 	ldrb.w	r3, [r4, #436]	; 0x1b4
 8003678:	2b01      	cmp	r3, #1
 800367a:	d10b      	bne.n	8003694 <VL53LX_get_device_results+0x70>
		idx = histo_merge_nb - 1;
 800367c:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8003680:	3b01      	subs	r3, #1
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 8003682:	f504 5293 	add.w	r2, r4, #4704	; 0x1260
 8003686:	b2db      	uxtb	r3, r3
 8003688:	3214      	adds	r2, #20
 800368a:	3302      	adds	r3, #2
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 800368c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003690:	f8c4 32c4 	str.w	r3, [r4, #708]	; 0x2c4
		pHP->gain_factor =
 8003694:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
		VL53LX_calc_crosstalk_plane_offset_with_margin(
 8003698:	f9b4 12d6 	ldrsh.w	r1, [r4, #726]	; 0x2d6
		pHP->gain_factor =
 800369c:	f8a4 326a 	strh.w	r3, [r4, #618]	; 0x26a
		VL53LX_calc_crosstalk_plane_offset_with_margin(
 80036a0:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 80036a4:	f001 f8c9 	bl	800483a <VL53LX_calc_crosstalk_plane_offset_with_margin>
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80036a8:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
 80036ac:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
		pdev->dmax_cfg.ambient_thresh_sigma =
 80036b0:	f894 3252 	ldrb.w	r3, [r4, #594]	; 0x252
 80036b4:	f884 328d 	strb.w	r3, [r4, #653]	; 0x28d
		pdev->dmax_cfg.min_ambient_thresh_events =
 80036b8:	f8d4 3258 	ldr.w	r3, [r4, #600]	; 0x258
 80036bc:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
		pdev->dmax_cfg.signal_total_events_limit =
 80036c0:	f8d4 3260 	ldr.w	r3, [r4, #608]	; 0x260
 80036c4:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 80036c8:	f8b4 3336 	ldrh.w	r3, [r4, #822]	; 0x336
 80036cc:	f8a4 32a4 	strh.w	r3, [r4, #676]	; 0x2a4
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 80036d0:	f894 3369 	ldrb.w	r3, [r4, #873]	; 0x369
 80036d4:	f884 32a6 	strb.w	r3, [r4, #678]	; 0x2a6
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 80036d8:	f8b4 32e0 	ldrh.w	r3, [r4, #736]	; 0x2e0
 80036dc:	f8a4 3282 	strh.w	r3, [r4, #642]	; 0x282
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 80036e0:	f8b4 32de 	ldrh.w	r3, [r4, #734]	; 0x2de
 80036e4:	f8a4 3280 	strh.w	r3, [r4, #640]	; 0x280
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 80036e8:	f8b4 32e2 	ldrh.w	r3, [r4, #738]	; 0x2e2
 80036ec:	f8a4 3284 	strh.w	r3, [r4, #644]	; 0x284
		VL53LX_copy_rtn_good_spads_to_buffer(
 80036f0:	f504 7504 	add.w	r5, r4, #528	; 0x210
		pHP->algo__crosstalk_detect_max_sigma_mm =
 80036f4:	f8b4 32e4 	ldrh.w	r3, [r4, #740]	; 0x2e4
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 80036f8:	f8c4 0278 	str.w	r0, [r4, #632]	; 0x278
		pHP->algo__crosstalk_detect_max_sigma_mm =
 80036fc:	f8a4 3286 	strh.w	r3, [r4, #646]	; 0x286
		VL53LX_copy_rtn_good_spads_to_buffer(
 8003700:	4629      	mov	r1, r5
 8003702:	f204 30ca 	addw	r0, r4, #970	; 0x3ca
 8003706:	f000 fecd 	bl	80044a4 <VL53LX_copy_rtn_good_spads_to_buffer>
		switch (pdev->offset_correction_mode) {
 800370a:	7963      	ldrb	r3, [r4, #5]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d065      	beq.n	80037dc <VL53LX_get_device_results+0x1b8>
 8003710:	2b03      	cmp	r3, #3
 8003712:	f000 8121 	beq.w	8003958 <VL53LX_get_device_results+0x334>
			pHP->range_offset_mm = 0;
 8003716:	2300      	movs	r3, #0
 8003718:	e13d      	b.n	8003996 <VL53LX_get_device_results+0x372>
			status = VL53LX_hist_copy_and_scale_ambient_info(
 800371a:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 800371e:	eb04 1000 	add.w	r0, r4, r0, lsl #4
 8003722:	f500 501d 	add.w	r0, r0, #10048	; 0x2740
 8003726:	4641      	mov	r1, r8
 8003728:	302c      	adds	r0, #44	; 0x2c
 800372a:	f001 f8ed 	bl	8004908 <VL53LX_hist_copy_and_scale_ambient_info>
		if (status != VL53LX_ERROR_NONE)
 800372e:	4605      	mov	r5, r0
 8003730:	2800      	cmp	r0, #0
 8003732:	d094      	beq.n	800365e <VL53LX_get_device_results+0x3a>
		if (pzone_cfg->active_zones > 0) {
 8003734:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
 8003738:	b1eb      	cbz	r3, 8003776 <VL53LX_get_device_results+0x152>
			if (pstate->rd_device_state !=
 800373a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 800373e:	2b06      	cmp	r3, #6
 8003740:	d005      	beq.n	800374e <VL53LX_get_device_results+0x12a>
				if (status == VL53LX_ERROR_NONE) {
 8003742:	b925      	cbnz	r5, 800374e <VL53LX_get_device_results+0x12a>
					status = VL53LX_dynamic_zone_update(
 8003744:	4631      	mov	r1, r6
 8003746:	4620      	mov	r0, r4
 8003748:	f001 fd59 	bl	80051fe <VL53LX_dynamic_zone_update>
 800374c:	4605      	mov	r5, r0
			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 800374e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8003752:	f013 0f01 	tst.w	r3, #1
 8003756:	bf14      	ite	ne
 8003758:	2103      	movne	r1, #3
 800375a:	2101      	moveq	r1, #1
 800375c:	f504 738f 	add.w	r3, r4, #286	; 0x11e
 8003760:	f504 7297 	add.w	r2, r4, #302	; 0x12e
				pzone_cfg->bin_config[i] =
 8003764:	f803 1b01 	strb.w	r1, [r3], #1
			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003768:	429a      	cmp	r2, r3
 800376a:	d1fb      	bne.n	8003764 <VL53LX_get_device_results+0x140>
			if (status == VL53LX_ERROR_NONE)
 800376c:	b945      	cbnz	r5, 8003780 <VL53LX_get_device_results+0x15c>
				status = VL53LX_multizone_hist_bins_update(Dev);
 800376e:	4620      	mov	r0, r4
 8003770:	f001 fd6f 	bl	8005252 <VL53LX_multizone_hist_bins_update>
 8003774:	4605      	mov	r5, r0
		if (status == VL53LX_ERROR_NONE)
 8003776:	b91d      	cbnz	r5, 8003780 <VL53LX_get_device_results+0x15c>
			status = VL53LX_dynamic_xtalk_correction_corrector(Dev);
 8003778:	4620      	mov	r0, r4
 800377a:	f002 f935 	bl	80059e8 <VL53LX_dynamic_xtalk_correction_corrector>
 800377e:	4605      	mov	r5, r0
		if (pdev->tuning_parms.tp_hist_merge == 1)
 8003780:	f894 31b4 	ldrb.w	r3, [r4, #436]	; 0x1b4
 8003784:	2b01      	cmp	r3, #1
 8003786:	d105      	bne.n	8003794 <VL53LX_get_device_results+0x170>
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 8003788:	f504 5393 	add.w	r3, r4, #4704	; 0x1260
 800378c:	3314      	adds	r3, #20
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f8c4 32c4 	str.w	r3, [r4, #708]	; 0x2c4
	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8003794:	f242 03e0 	movw	r3, #8416	; 0x20e0
 8003798:	f894 702c 	ldrb.w	r7, [r4, #44]	; 0x2c
 800379c:	54e7      	strb	r7, [r4, r3]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800379e:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
 80037a2:	7070      	strb	r0, [r6, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 80037a4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80037a8:	70b3      	strb	r3, [r6, #2]
	if (status == VL53LX_ERROR_NONE) {
 80037aa:	2d00      	cmp	r5, #0
 80037ac:	f000 8167 	beq.w	8003a7e <VL53LX_get_device_results+0x45a>
	memcpy(
 80037b0:	ee18 0a10 	vmov	r0, s16
 80037b4:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80037b8:	4631      	mov	r1, r6
 80037ba:	f006 f85f 	bl	800987c <memcpy>
	if (status == VL53LX_ERROR_NONE)
 80037be:	b91d      	cbnz	r5, 80037c8 <VL53LX_get_device_results+0x1a4>
		status = VL53LX_check_ll_driver_rd_state(Dev);
 80037c0:	4620      	mov	r0, r4
 80037c2:	f000 fe20 	bl	8004406 <VL53LX_check_ll_driver_rd_state>
 80037c6:	4605      	mov	r5, r0
}
 80037c8:	4628      	mov	r0, r5
 80037ca:	b00b      	add	sp, #44	; 0x2c
 80037cc:	ecbd 8b02 	vpop	{d8}
 80037d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			histo_merge_nb = 1;
 80037d4:	2301      	movs	r3, #1
 80037d6:	f88d 301b 	strb.w	r3, [sp, #27]
 80037da:	e74b      	b.n	8003674 <VL53LX_get_device_results+0x50>
			VL53LX_hist_combine_mm1_mm2_offsets(
 80037dc:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80037e0:	9305      	str	r3, [sp, #20]
 80037e2:	f894 3369 	ldrb.w	r3, [r4, #873]	; 0x369
 80037e6:	f894 23fa 	ldrb.w	r2, [r4, #1018]	; 0x3fa
 80037ea:	f9b4 105e 	ldrsh.w	r1, [r4, #94]	; 0x5e
 80037ee:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 80037f2:	e9cd 5303 	strd	r5, r3, [sp, #12]
 80037f6:	f104 039c 	add.w	r3, r4, #156	; 0x9c
 80037fa:	9302      	str	r3, [sp, #8]
 80037fc:	f894 34a5 	ldrb.w	r3, [r4, #1189]	; 0x4a5
 8003800:	9301      	str	r3, [sp, #4]
 8003802:	f894 34a4 	ldrb.w	r3, [r4, #1188]	; 0x4a4
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	f894 33fb 	ldrb.w	r3, [r4, #1019]	; 0x3fb
 800380c:	f001 fc36 	bl	800507c <VL53LX_hist_combine_mm1_mm2_offsets>
		VL53LX_calc_max_effective_spads(
 8003810:	f204 23a2 	addw	r3, r4, #674	; 0x2a2
 8003814:	462a      	mov	r2, r5
 8003816:	f894 14a5 	ldrb.w	r1, [r4, #1189]	; 0x4a5
 800381a:	f894 04a4 	ldrb.w	r0, [r4, #1188]	; 0x4a4
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	f894 3369 	ldrb.w	r3, [r4, #873]	; 0x369
 8003824:	f001 fb5a 	bl	8004edc <VL53LX_calc_max_effective_spads>
			VL53LX_get_dmax_calibration_data(
 8003828:	79a1      	ldrb	r1, [r4, #6]
 800382a:	aa07      	add	r2, sp, #28
 800382c:	4620      	mov	r0, r4
 800382e:	f7ff f82b 	bl	8002888 <VL53LX_get_dmax_calibration_data>
		if (status != VL53LX_ERROR_NONE)
 8003832:	4605      	mov	r5, r0
 8003834:	2800      	cmp	r0, #0
 8003836:	f47f af7d 	bne.w	8003734 <VL53LX_get_device_results+0x110>
				pdev->wArea2,
 800383a:	f504 53d1 	add.w	r3, r4, #6688	; 0x1a20
 800383e:	3318      	adds	r3, #24
		status = VL53LX_ipp_hist_process_data(
 8003840:	9303      	str	r3, [sp, #12]
				pdev->wArea1,
 8003842:	f504 53a1 	add.w	r3, r4, #5152	; 0x1420
 8003846:	3318      	adds	r3, #24
		status = VL53LX_ipp_hist_process_data(
 8003848:	9302      	str	r3, [sp, #8]
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 800384a:	f504 7913 	add.w	r9, r4, #588	; 0x24c
		status = VL53LX_ipp_hist_process_data(
 800384e:	f204 5354 	addw	r3, r4, #1364	; 0x554
 8003852:	e9cd 8300 	strd	r8, r3, [sp]
 8003856:	e9cd 7604 	strd	r7, r6, [sp, #16]
 800385a:	464b      	mov	r3, r9
 800385c:	f504 7223 	add.w	r2, r4, #652	; 0x28c
 8003860:	a907      	add	r1, sp, #28
 8003862:	4620      	mov	r0, r4
 8003864:	f7fd ff08 	bl	8001678 <VL53LX_ipp_hist_process_data>
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 8003868:	f894 31b4 	ldrb.w	r3, [r4, #436]	; 0x1b4
 800386c:	2b01      	cmp	r3, #1
		status = VL53LX_ipp_hist_process_data(
 800386e:	4605      	mov	r5, r0
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 8003870:	f000 809c 	beq.w	80039ac <VL53LX_get_device_results+0x388>
		if (status != VL53LX_ERROR_NONE)
 8003874:	2d00      	cmp	r5, #0
 8003876:	f47f af5d 	bne.w	8003734 <VL53LX_get_device_results+0x110>
		status = VL53LX_hist_wrap_dmax(
 800387a:	f106 020e 	add.w	r2, r6, #14
 800387e:	4641      	mov	r1, r8
 8003880:	4648      	mov	r0, r9
 8003882:	f001 fac5 	bl	8004e10 <VL53LX_hist_wrap_dmax>
		if (status != VL53LX_ERROR_NONE)
 8003886:	4605      	mov	r5, r0
 8003888:	2800      	cmp	r0, #0
 800388a:	f47f af53 	bne.w	8003734 <VL53LX_get_device_results+0x110>
		zid = pdev->ll_state.rd_zone_id;
 800388e:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
		status = VL53LX_hist_phase_consistency_check(
 8003892:	f44f 7312 	mov.w	r3, #584	; 0x248
 8003896:	2004      	movs	r0, #4
 8003898:	f242 7a68 	movw	sl, #10088	; 0x2768
 800389c:	f04f 0944 	mov.w	r9, #68	; 0x44
 80038a0:	f04f 0b10 	mov.w	fp, #16
 80038a4:	fb19 3201 	smlabb	r2, r9, r1, r3
 80038a8:	eb04 070a 	add.w	r7, r4, sl
 80038ac:	fb1b 0101 	smlabb	r1, fp, r1, r0
 80038b0:	4633      	mov	r3, r6
 80038b2:	4432      	add	r2, r6
 80038b4:	4439      	add	r1, r7
 80038b6:	4620      	mov	r0, r4
 80038b8:	f001 f9f8 	bl	8004cac <VL53LX_hist_phase_consistency_check>
		if (status != VL53LX_ERROR_NONE)
 80038bc:	4605      	mov	r5, r0
 80038be:	2800      	cmp	r0, #0
 80038c0:	f47f af38 	bne.w	8003734 <VL53LX_get_device_results+0x110>
		zid = pdev->ll_state.rd_zone_id;
 80038c4:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
		status = VL53LX_hist_xmonitor_consistency_check(
 80038c8:	f44f 7312 	mov.w	r3, #584	; 0x248
 80038cc:	2004      	movs	r0, #4
 80038ce:	fb19 3201 	smlabb	r2, r9, r1, r3
 80038d2:	fb1b 0101 	smlabb	r1, fp, r1, r0
 80038d6:	f506 73a2 	add.w	r3, r6, #324	; 0x144
 80038da:	4432      	add	r2, r6
 80038dc:	4439      	add	r1, r7
 80038de:	4620      	mov	r0, r4
 80038e0:	f001 fa6a 	bl	8004db8 <VL53LX_hist_xmonitor_consistency_check>
		if (status != VL53LX_ERROR_NONE)
 80038e4:	4605      	mov	r5, r0
 80038e6:	2800      	cmp	r0, #0
 80038e8:	f47f af24 	bne.w	8003734 <VL53LX_get_device_results+0x110>
		zid = pdev->ll_state.rd_zone_id;
 80038ec:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		pZH->max_zones    = VL53LX_MAX_USER_ZONES;
 80038f0:	f804 b00a 	strb.w	fp, [r4, sl]
				pdev->zone_cfg.active_zones+1;
 80038f4:	f894 20c3 	ldrb.w	r2, [r4, #195]	; 0xc3
 80038f8:	3201      	adds	r2, #1
		pZH->active_zones =
 80038fa:	707a      	strb	r2, [r7, #1]
		pHD->zone_id       = zid;
 80038fc:	f884 33fe 	strb.w	r3, [r4, #1022]	; 0x3fe
		if (zid <
 8003900:	f896 2244 	ldrb.w	r2, [r6, #580]	; 0x244
 8003904:	429a      	cmp	r2, r3
 8003906:	d91d      	bls.n	8003944 <VL53LX_get_device_results+0x320>
			phist_info->rd_device_state =
 8003908:	eb04 1203 	add.w	r2, r4, r3, lsl #4
 800390c:	f242 716c 	movw	r1, #10092	; 0x276c
 8003910:	f894 03fd 	ldrb.w	r0, [r4, #1021]	; 0x3fd
 8003914:	5450      	strb	r0, [r2, r1]
			phist_info->number_of_ambient_bins =
 8003916:	f242 716d 	movw	r1, #10093	; 0x276d
 800391a:	f894 0407 	ldrb.w	r0, [r4, #1031]	; 0x407
 800391e:	5450      	strb	r0, [r2, r1]
			phist_info->result__dss_actual_effective_spads =
 8003920:	f242 716e 	movw	r1, #10094	; 0x276e
 8003924:	f8b4 0478 	ldrh.w	r0, [r4, #1144]	; 0x478
 8003928:	5250      	strh	r0, [r2, r1]
			phist_info->total_periods_elapsed =
 800392a:	eb07 1703 	add.w	r7, r7, r3, lsl #4
			phist_info->VL53LX_p_005 =
 800392e:	f242 7170 	movw	r1, #10096	; 0x2770
 8003932:	f894 0480 	ldrb.w	r0, [r4, #1152]	; 0x480
			phist_info->total_periods_elapsed =
 8003936:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
			phist_info->VL53LX_p_005 =
 800393a:	5450      	strb	r0, [r2, r1]
			phist_info->total_periods_elapsed =
 800393c:	60fb      	str	r3, [r7, #12]
			phist_info->ambient_events_sum =
 800393e:	f8d4 349c 	ldr.w	r3, [r4, #1180]	; 0x49c
 8003942:	613b      	str	r3, [r7, #16]
		VL53LX_hist_copy_results_to_sys_and_core(
 8003944:	f504 539b 	add.w	r3, r4, #4960	; 0x1360
 8003948:	3310      	adds	r3, #16
 800394a:	f204 329e 	addw	r2, r4, #926	; 0x39e
 800394e:	4631      	mov	r1, r6
 8003950:	4640      	mov	r0, r8
 8003952:	f001 fbeb 	bl	800512c <VL53LX_hist_copy_results_to_sys_and_core>
 8003956:	e6ed      	b.n	8003734 <VL53LX_get_device_results+0x110>
	switch (pdev->preset_mode) {
 8003958:	7863      	ldrb	r3, [r4, #1]
 800395a:	2b1e      	cmp	r3, #30
 800395c:	d01e      	beq.n	800399c <VL53LX_get_device_results+0x378>
 800395e:	2b21      	cmp	r3, #33	; 0x21
 8003960:	d008      	beq.n	8003974 <VL53LX_get_device_results+0x350>
 8003962:	2b1b      	cmp	r3, #27
 8003964:	d120      	bne.n	80039a8 <VL53LX_get_device_results+0x384>
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8003966:	f504 53e2 	add.w	r3, r4, #7232	; 0x1c40
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 800396a:	f641 4242 	movw	r2, #7234	; 0x1c42
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 800396e:	f9b3 3000 	ldrsh.w	r3, [r3]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8003972:	e004      	b.n	800397e <VL53LX_get_device_results+0x35a>
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 8003974:	f641 4338 	movw	r3, #7224	; 0x1c38
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 8003978:	f641 423a 	movw	r2, #7226	; 0x1c3a
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 800397c:	5ee3      	ldrsh	r3, [r4, r3]
		*poffset = (isc & 0x01) ? tA : tB;
 800397e:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8003982:	5ea2      	ldrsh	r2, [r4, r2]
		*poffset = (isc & 0x01) ? tA : tB;
 8003984:	f011 0f01 	tst.w	r1, #1
 8003988:	bf08      	it	eq
 800398a:	4613      	moveq	r3, r2
		*poffset = 0;
 800398c:	f8a4 3268 	strh.w	r3, [r4, #616]	; 0x268
			pHP->range_offset_mm *= 4;
 8003990:	f8b4 3268 	ldrh.w	r3, [r4, #616]	; 0x268
 8003994:	009b      	lsls	r3, r3, #2
			pHP->range_offset_mm = 0;
 8003996:	f8a4 3268 	strh.w	r3, [r4, #616]	; 0x268
		break;
 800399a:	e739      	b.n	8003810 <VL53LX_get_device_results+0x1ec>
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 800399c:	f641 433c 	movw	r3, #7228	; 0x1c3c
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 80039a0:	f641 423e 	movw	r2, #7230	; 0x1c3e
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 80039a4:	5ee3      	ldrsh	r3, [r4, r3]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 80039a6:	e7ea      	b.n	800397e <VL53LX_get_device_results+0x35a>
		*poffset = 0;
 80039a8:	2300      	movs	r3, #0
 80039aa:	e7ef      	b.n	800398c <VL53LX_get_device_results+0x368>
			(histo_merge_nb > 1))
 80039ac:	f89d 101b 	ldrb.w	r1, [sp, #27]
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 80039b0:	2901      	cmp	r1, #1
 80039b2:	f67f af5f 	bls.w	8003874 <VL53LX_get_device_results+0x250>
 80039b6:	f504 5204 	add.w	r2, r4, #8448	; 0x2100
 80039ba:	f504 5009 	add.w	r0, r4, #8768	; 0x2240
 80039be:	3218      	adds	r2, #24
 80039c0:	3008      	adds	r0, #8
			pdata->VL53LX_p_016 /= histo_merge_nb;
 80039c2:	6813      	ldr	r3, [r2, #0]
 80039c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80039c8:	324c      	adds	r2, #76	; 0x4c
 80039ca:	f842 3c4c 	str.w	r3, [r2, #-76]
			pdata->VL53LX_p_017 /= histo_merge_nb;
 80039ce:	f852 3c48 	ldr.w	r3, [r2, #-72]
 80039d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80039d6:	f842 3c48 	str.w	r3, [r2, #-72]
			pdata->VL53LX_p_010 /= histo_merge_nb;
 80039da:	f852 3c44 	ldr.w	r3, [r2, #-68]
 80039de:	fb93 f3f1 	sdiv	r3, r3, r1
 80039e2:	f842 3c44 	str.w	r3, [r2, #-68]
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 80039e6:	f832 3c40 	ldrh.w	r3, [r2, #-64]
 80039ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80039ee:	f822 3c40 	strh.w	r3, [r2, #-64]
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 80039f2:	f832 3c3e 	ldrh.w	r3, [r2, #-62]
 80039f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80039fa:	f822 3c3e 	strh.w	r3, [r2, #-62]
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 80039fe:	f832 3c3c 	ldrh.w	r3, [r2, #-60]
 8003a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a06:	f822 3c3c 	strh.w	r3, [r2, #-60]
			pdata->VL53LX_p_009 /= histo_merge_nb;
 8003a0a:	f852 3c38 	ldr.w	r3, [r2, #-56]
 8003a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a12:	f842 3c38 	str.w	r3, [r2, #-56]
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8003a16:	4290      	cmp	r0, r2
 8003a18:	d1d3      	bne.n	80039c2 <VL53LX_get_device_results+0x39e>
 8003a1a:	e72b      	b.n	8003874 <VL53LX_get_device_results+0x250>
			status = VL53LX_get_measurement_results(
 8003a1c:	f7fe fd1e 	bl	800245c <VL53LX_get_measurement_results>
		if (status == VL53LX_ERROR_NONE)
 8003a20:	4605      	mov	r5, r0
 8003a22:	b948      	cbnz	r0, 8003a38 <VL53LX_get_device_results+0x414>
			VL53LX_copy_sys_and_core_results_to_range_results(
 8003a24:	f504 529b 	add.w	r2, r4, #4960	; 0x1360
 8003a28:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
 8003a2c:	4633      	mov	r3, r6
 8003a2e:	3210      	adds	r2, #16
 8003a30:	f204 319e 	addw	r1, r4, #926	; 0x39e
 8003a34:	f7fe fd42 	bl	80024bc <VL53LX_copy_sys_and_core_results_to_range_results>
		if (pL->is_low_power_auto_mode == 1) {
 8003a38:	f504 57a1 	add.w	r7, r4, #5152	; 0x1420
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	f897 8001 	ldrb.w	r8, [r7, #1]
 8003a42:	f1b8 0f01 	cmp.w	r8, #1
 8003a46:	f47f aea5 	bne.w	8003794 <VL53LX_get_device_results+0x170>
			if ((status == VL53LX_ERROR_NONE) &&
 8003a4a:	b93d      	cbnz	r5, 8003a5c <VL53LX_get_device_results+0x438>
 8003a4c:	78bb      	ldrb	r3, [r7, #2]
 8003a4e:	b98b      	cbnz	r3, 8003a74 <VL53LX_get_device_results+0x450>
				VL53LX_low_power_auto_setup_manual_calibration(
 8003a50:	4620      	mov	r0, r4
 8003a52:	f001 fe75 	bl	8005740 <VL53LX_low_power_auto_setup_manual_calibration>
				pL->low_power_auto_range_count = 1;
 8003a56:	f887 8002 	strb.w	r8, [r7, #2]
				VL53LX_low_power_auto_setup_manual_calibration(
 8003a5a:	4605      	mov	r5, r0
			if ((pL->low_power_auto_range_count != 0xFF) &&
 8003a5c:	78bb      	ldrb	r3, [r7, #2]
 8003a5e:	2bff      	cmp	r3, #255	; 0xff
 8003a60:	f43f ae98 	beq.w	8003794 <VL53LX_get_device_results+0x170>
 8003a64:	2d00      	cmp	r5, #0
 8003a66:	f47f ae95 	bne.w	8003794 <VL53LX_get_device_results+0x170>
				status = VL53LX_low_power_auto_update_DSS(
 8003a6a:	4620      	mov	r0, r4
 8003a6c:	f001 fe8c 	bl	8005788 <VL53LX_low_power_auto_update_DSS>
 8003a70:	4605      	mov	r5, r0
 8003a72:	e68f      	b.n	8003794 <VL53LX_get_device_results+0x170>
			} else if ((status == VL53LX_ERROR_NONE) &&
 8003a74:	2b01      	cmp	r3, #1
				pL->low_power_auto_range_count = 2;
 8003a76:	bf04      	itt	eq
 8003a78:	2302      	moveq	r3, #2
 8003a7a:	70bb      	strbeq	r3, [r7, #2]
 8003a7c:	e7ee      	b.n	8003a5c <VL53LX_get_device_results+0x438>
		pres->zone_results.max_zones    = VL53LX_MAX_USER_ZONES;
 8003a7e:	2210      	movs	r2, #16
 8003a80:	f886 2244 	strb.w	r2, [r6, #580]	; 0x244
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 8003a84:	f894 20c3 	ldrb.w	r2, [r4, #195]	; 0xc3
		if (zid < pres->zone_results.max_zones) {
 8003a88:	2b0f      	cmp	r3, #15
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 8003a8a:	f102 0201 	add.w	r2, r2, #1
 8003a8e:	f886 2245 	strb.w	r2, [r6, #581]	; 0x245
		if (zid < pres->zone_results.max_zones) {
 8003a92:	f63f ae8d 	bhi.w	80037b0 <VL53LX_get_device_results+0x18c>
			pobjects->cfg_device_state  =
 8003a96:	2144      	movs	r1, #68	; 0x44
 8003a98:	fb01 6203 	mla	r2, r1, r3, r6
			pobjects->zone_id           = presults->zone_id;
 8003a9c:	f882 324a 	strb.w	r3, [r2, #586]	; 0x24a
			pobjects->cfg_device_state  =
 8003aa0:	f882 7248 	strb.w	r7, [r2, #584]	; 0x248
			pobjects->rd_device_state   = presults->rd_device_state;
 8003aa4:	f882 0249 	strb.w	r0, [r2, #585]	; 0x249
			pobjects->stream_count      = presults->stream_count;
 8003aa8:	78f0      	ldrb	r0, [r6, #3]
 8003aaa:	f882 024b 	strb.w	r0, [r2, #587]	; 0x24b
			pobjects->xmonitor.VL53LX_p_016 =
 8003aae:	f8d6 0168 	ldr.w	r0, [r6, #360]	; 0x168
 8003ab2:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
			pobjects->xmonitor.VL53LX_p_017 =
 8003ab6:	f8d6 016c 	ldr.w	r0, [r6, #364]	; 0x16c
 8003aba:	f8c2 0284 	str.w	r0, [r2, #644]	; 0x284
			pobjects->xmonitor.VL53LX_p_011 =
 8003abe:	f8b6 0184 	ldrh.w	r0, [r6, #388]	; 0x184
 8003ac2:	f8a2 0288 	strh.w	r0, [r2, #648]	; 0x288
			pobjects->xmonitor.range_status =
 8003ac6:	f896 018e 	ldrb.w	r0, [r6, #398]	; 0x18e
 8003aca:	f882 028a 	strb.w	r0, [r2, #650]	; 0x28a
			pobjects->max_objects      = presults->max_results;
 8003ace:	7c70      	ldrb	r0, [r6, #17]
 8003ad0:	f882 024c 	strb.w	r0, [r2, #588]	; 0x24c
			pobjects->active_objects   = presults->active_results;
 8003ad4:	fb01 4303 	mla	r3, r1, r3, r4
 8003ad8:	7cb7      	ldrb	r7, [r6, #18]
 8003ada:	f882 724d 	strb.w	r7, [r2, #589]	; 0x24d
			for (i = 0; i < presults->active_results; i++) {
 8003ade:	f503 530c 	add.w	r3, r3, #8960	; 0x2300
 8003ae2:	f504 5204 	add.w	r2, r4, #8448	; 0x2100
 8003ae6:	3218      	adds	r2, #24
 8003ae8:	3330      	adds	r3, #48	; 0x30
 8003aea:	4629      	mov	r1, r5
 8003aec:	b2c8      	uxtb	r0, r1
 8003aee:	4287      	cmp	r7, r0
 8003af0:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8003af4:	f103 030c 	add.w	r3, r3, #12
 8003af8:	f67f ae5a 	bls.w	80037b0 <VL53LX_get_device_results+0x18c>
					presults->VL53LX_p_003[i].VL53LX_p_016;
 8003afc:	f852 0c4c 	ldr.w	r0, [r2, #-76]
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8003b00:	f843 0c0c 	str.w	r0, [r3, #-12]
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8003b04:	f852 0c48 	ldr.w	r0, [r2, #-72]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8003b08:	f843 0c08 	str.w	r0, [r3, #-8]
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8003b0c:	f832 0c30 	ldrh.w	r0, [r2, #-48]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8003b10:	f823 0c04 	strh.w	r0, [r3, #-4]
					presults->VL53LX_p_003[i].range_status;
 8003b14:	f812 0c26 	ldrb.w	r0, [r2, #-38]
				pobjects->VL53LX_p_003[i].range_status =
 8003b18:	f803 0c02 	strb.w	r0, [r3, #-2]
			for (i = 0; i < presults->active_results; i++) {
 8003b1c:	3101      	adds	r1, #1
 8003b1e:	e7e5      	b.n	8003aec <VL53LX_get_device_results+0x4c8>

08003b20 <VL53LX_dynamic_xtalk_correction_enable>:

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 8003b20:	f241 33cc 	movw	r3, #5068	; 0x13cc
 8003b24:	2201      	movs	r2, #1
 8003b26:	54c2      	strb	r2, [r0, r3]

	LOG_FUNCTION_END(status);

	return status;
}
 8003b28:	2000      	movs	r0, #0
 8003b2a:	4770      	bx	lr

08003b2c <VL53LX_dynamic_xtalk_correction_disable>:

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 8003b2c:	f241 32cc 	movw	r2, #5068	; 0x13cc
 8003b30:	2300      	movs	r3, #0
 8003b32:	5483      	strb	r3, [r0, r2]

	LOG_FUNCTION_END(status);

	return status;
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	4770      	bx	lr

08003b38 <VL53LX_dynamic_xtalk_correction_apply_disable>:

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 8003b38:	f241 32cd 	movw	r2, #5069	; 0x13cd
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	5483      	strb	r3, [r0, r2]

	LOG_FUNCTION_END(status);

	return status;
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	4770      	bx	lr

08003b44 <VL53LX_dynamic_xtalk_correction_single_apply_enable>:

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 8003b44:	f241 33ce 	movw	r3, #5070	; 0x13ce
 8003b48:	2201      	movs	r2, #1
 8003b4a:	54c2      	strb	r2, [r0, r3]

	LOG_FUNCTION_END(status);

	return status;
}
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	4770      	bx	lr

08003b50 <VL53LX_dynamic_xtalk_correction_single_apply_disable>:

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 8003b50:	f241 32ce 	movw	r2, #5070	; 0x13ce
 8003b54:	2300      	movs	r3, #0
 8003b56:	5483      	strb	r3, [r0, r2]

	LOG_FUNCTION_END(status);

	return status;
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	4770      	bx	lr

08003b5c <VL53LX_dynamic_xtalk_correction_apply_enable>:

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 8003b5c:	f241 33cd 	movw	r3, #5069	; 0x13cd
 8003b60:	2201      	movs	r2, #1
 8003b62:	54c2      	strb	r2, [r0, r3]

	LOG_FUNCTION_END(status);

	return status;
}
 8003b64:	2000      	movs	r0, #0
 8003b66:	4770      	bx	lr

08003b68 <VL53LX_init_refspadchar_config_struct>:

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 8003b68:	f640 3308 	movw	r3, #2824	; 0xb08
 8003b6c:	8003      	strh	r3, [r0, #0]
		VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53LX_p_005              =
		VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
		VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8003b6e:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <VL53LX_init_refspadchar_config_struct+0x1c>)
 8003b70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b74:	e9c0 2301 	strd	r2, r3, [r0, #4]
		VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
		VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8003b78:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003b7c:	8183      	strh	r3, [r0, #12]
		VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8003b7e:	2000      	movs	r0, #0
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	05000a00 	.word	0x05000a00

08003b88 <VL53LX_init_ssc_config_struct>:


	pdata->vcsel_width = 0x02;


	pdata->timeout_us   = 36000;
 8003b88:	4a04      	ldr	r2, [pc, #16]	; (8003b9c <VL53LX_init_ssc_config_struct+0x14>)
 8003b8a:	f648 43a0 	movw	r3, #36000	; 0x8ca0
 8003b8e:	e9c0 2300 	strd	r2, r3, [r0]


	pdata->rate_limit_mcps =
 8003b92:	230c      	movs	r3, #12
 8003b94:	8103      	strh	r3, [r0, #8]
			VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8003b96:	2000      	movs	r0, #0
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	020f1200 	.word	0x020f1200

08003ba0 <VL53LX_init_xtalk_config_struct>:


VL53LX_Error VL53LX_init_xtalk_config_struct(
	VL53LX_customer_nvm_managed_t *pnvm,
	VL53LX_xtalk_config_t   *pdata)
{
 8003ba0:	b538      	push	{r3, r4, r5, lr}
 8003ba2:	460c      	mov	r4, r1




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8003ba4:	8945      	ldrh	r5, [r0, #10]
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8003ba6:	600d      	str	r5, [r1, #0]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;

	pdata->histogram_mode_crosstalk_margin_kcps                =
 8003ba8:	2300      	movs	r3, #0
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8003baa:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8003bae:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
	pdata->histogram_mode_crosstalk_margin_kcps                =
 8003bb2:	8263      	strh	r3, [r4, #18]
			VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 8003bb4:	82a3      	strh	r3, [r4, #20]
			VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 8003bb6:	2340      	movs	r3, #64	; 0x40
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8003bb8:	80a1      	strh	r1, [r4, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8003bba:	80e2      	strh	r2, [r4, #6]
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8003bbc:	60a5      	str	r5, [r4, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 8003bbe:	81a1      	strh	r1, [r4, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8003bc0:	81e2      	strh	r2, [r4, #14]
	pdata->crosstalk_range_ignore_threshold_mult =
 8003bc2:	75a3      	strb	r3, [r4, #22]
			VL53LX_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8003bc4:	b90d      	cbnz	r5, 8003bca <VL53LX_init_xtalk_config_struct+0x2a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 8003bc6:	6863      	ldr	r3, [r4, #4]
 8003bc8:	b17b      	cbz	r3, 8003bea <VL53LX_init_xtalk_config_struct+0x4a>
 8003bca:	2301      	movs	r3, #1
 8003bcc:	7423      	strb	r3, [r4, #16]


	if ((status == VL53LX_ERROR_NONE) &&
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53LX_calc_range_ignore_threshold(
 8003bce:	4628      	mov	r0, r5
 8003bd0:	2340      	movs	r3, #64	; 0x40
 8003bd2:	f000 fdf9 	bl	80047c8 <VL53LX_calc_range_ignore_threshold>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8003bd6:	8320      	strh	r0, [r4, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8003bd8:	f64f 73ce 	movw	r3, #65486	; 0xffce
 8003bdc:	8363      	strh	r3, [r4, #26]
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8003bde:	4b04      	ldr	r3, [pc, #16]	; (8003bf0 <VL53LX_init_xtalk_config_struct+0x50>)
 8003be0:	61e3      	str	r3, [r4, #28]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8003be2:	238c      	movs	r3, #140	; 0x8c
 8003be4:	8423      	strh	r3, [r4, #32]
			VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8003be6:	2000      	movs	r0, #0
 8003be8:	bd38      	pop	{r3, r4, r5, pc}
 8003bea:	7423      	strb	r3, [r4, #16]
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8003bec:	8323      	strh	r3, [r4, #24]
 8003bee:	e7f3      	b.n	8003bd8 <VL53LX_init_xtalk_config_struct+0x38>
 8003bf0:	01900032 	.word	0x01900032

08003bf4 <VL53LX_init_xtalk_extract_config_struct>:

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8003bf4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003bf8:	8003      	strh	r3, [r0, #0]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8003bfa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003bfe:	6083      	str	r3, [r0, #8]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 8003c00:	2307      	movs	r3, #7
 8003c02:	7403      	strb	r3, [r0, #16]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8003c04:	f643 2398 	movw	r3, #15000	; 0x3a98
 8003c08:	6043      	str	r3, [r0, #4]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8003c0a:	f242 7310 	movw	r3, #10000	; 0x2710
 8003c0e:	60c3      	str	r3, [r0, #12]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 8003c10:	f64f 73ba 	movw	r3, #65466	; 0xffba
 8003c14:	8243      	strh	r3, [r0, #18]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 8003c16:	4b03      	ldr	r3, [pc, #12]	; (8003c24 <VL53LX_init_xtalk_extract_config_struct+0x30>)
 8003c18:	6143      	str	r3, [r0, #20]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 8003c1a:	238c      	movs	r3, #140	; 0x8c
 8003c1c:	8303      	strh	r3, [r0, #24]


	LOG_FUNCTION_END(status);

	return status;
}
 8003c1e:	2000      	movs	r0, #0
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	02800046 	.word	0x02800046

08003c28 <VL53LX_init_offset_cal_config_struct>:

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8003c28:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003c2c:	8003      	strh	r3, [r0, #0]
			VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
		VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8003c2e:	f643 2298 	movw	r2, #15000	; 0x3a98
 8003c32:	f243 23c8 	movw	r3, #13000	; 0x32c8
 8003c36:	e9c0 2301 	strd	r2, r3, [r0, #4]
			VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8003c3a:	60c3      	str	r3, [r0, #12]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 8003c3c:	f642 0308 	movw	r3, #10248	; 0x2808
 8003c40:	8203      	strh	r3, [r0, #16]
			VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
			VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8003c42:	2309      	movs	r3, #9
 8003c44:	7483      	strb	r3, [r0, #18]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8003c46:	2000      	movs	r0, #0
 8003c48:	4770      	bx	lr
	...

08003c4c <VL53LX_init_zone_cal_config_struct>:

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8003c4c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003c50:	8003      	strh	r3, [r0, #0]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
			VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8003c52:	f643 2298 	movw	r2, #15000	; 0x3a98
 8003c56:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003c5a:	e9c0 2301 	strd	r2, r3, [r0, #4]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 8003c5e:	4b03      	ldr	r3, [pc, #12]	; (8003c6c <VL53LX_init_zone_cal_config_struct+0x20>)
 8003c60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003c64:	e9c0 1303 	strd	r1, r3, [r0, #12]
			VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8003c68:	2000      	movs	r0, #0
 8003c6a:	4770      	bx	lr
 8003c6c:	00080010 	.word	0x00080010

08003c70 <VL53LX_init_hist_post_process_config_struct>:
	pdata->hist_amb_est_method =
			VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 8003c70:	2264      	movs	r2, #100	; 0x64
 8003c72:	718a      	strb	r2, [r1, #6]
			VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
			VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 8003c74:	614a      	str	r2, [r1, #20]
		VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 8003c76:	2201      	movs	r2, #1
 8003c78:	760a      	strb	r2, [r1, #24]
		VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 8003c7a:	22b4      	movs	r2, #180	; 0xb4
	pdata->gain_factor                =
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 8003c7c:	f8df c050 	ldr.w	ip, [pc, #80]	; 8003cd0 <VL53LX_init_hist_post_process_config_struct+0x60>
	pdata->sigma_thresh                  =
 8003c80:	834a      	strh	r2, [r1, #26]
	pdata->valid_phase_low = 0x08;
 8003c82:	4a0f      	ldr	r2, [pc, #60]	; (8003cc0 <VL53LX_init_hist_post_process_config_struct+0x50>)
	pdata->hist_algo_select =
 8003c84:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <VL53LX_init_hist_post_process_config_struct+0x54>)
 8003c86:	600b      	str	r3, [r1, #0]
	pdata->valid_phase_low = 0x08;
 8003c88:	e9c1 c207 	strd	ip, r2, [r1, #28]
	pdata->hist_amb_est_method =
 8003c8c:	f245 0301 	movw	r3, #20481	; 0x5001

	pdata->algo__consistency_check__event_sigma =
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 8003c90:	f44f 6200 	mov.w	r2, #2048	; 0x800
	pdata->hist_amb_est_method =
 8003c94:	808b      	strh	r3, [r1, #4]
	pdata->algo__consistency_check__event_min_spad_count =
 8003c96:	624a      	str	r2, [r1, #36]	; 0x24
	pdata->ambient_thresh_events_scaler     =
 8003c98:	f241 033d 	movw	r3, #4157	; 0x103d

	pdata->algo__crosstalk_detect_min_valid_range_mm  =
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8003c9c:	4a0a      	ldr	r2, [pc, #40]	; (8003cc8 <VL53LX_init_hist_post_process_config_struct+0x58>)
	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 8003c9e:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8003ca2:	480a      	ldr	r0, [pc, #40]	; (8003ccc <VL53LX_init_hist_post_process_config_struct+0x5c>)
	pdata->ambient_thresh_events_scaler     =
 8003ca4:	810b      	strh	r3, [r1, #8]
	pdata->min_ambient_thresh_events     =
 8003ca6:	2310      	movs	r3, #16
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8003ca8:	e9c1 020d 	strd	r0, r2, [r1, #52]	; 0x34
	pdata->min_ambient_thresh_events     =
 8003cac:	60cb      	str	r3, [r1, #12]





	pdata->algo__crosstalk_detect_event_sigma       =
 8003cae:	2250      	movs	r2, #80	; 0x50
	pdata->noise_threshold               =
 8003cb0:	2332      	movs	r3, #50	; 0x32
 8003cb2:	820b      	strh	r3, [r1, #16]
	pdata->algo__crosstalk_detect_event_sigma       =
 8003cb4:	f881 203c 	strb.w	r2, [r1, #60]	; 0x3c
		VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 8003cb8:	87cb      	strh	r3, [r1, #62]	; 0x3e


	LOG_FUNCTION_END(status);

	return status;
}
 8003cba:	2000      	movs	r0, #0
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	00088808 	.word	0x00088808
 8003cc4:	02010104 	.word	0x02010104
 8003cc8:	008c0190 	.word	0x008c0190
 8003ccc:	0032ffce 	.word	0x0032ffce
 8003cd0:	07c30000 	.word	0x07c30000

08003cd4 <VL53LX_init_tuning_parm_storage_struct>:

	pdata->tp_tuning_parm_version              =
			VL53LX_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
			VL53LX_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8003cd4:	4a43      	ldr	r2, [pc, #268]	; (8003de4 <VL53LX_init_tuning_parm_storage_struct+0x110>)
 8003cd6:	4b44      	ldr	r3, [pc, #272]	; (8003de8 <VL53LX_init_tuning_parm_storage_struct+0x114>)
			VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;
	pdata->tp_uwr_enable =
		VL53LX_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 8003cd8:	f8df c140 	ldr.w	ip, [pc, #320]	; 8003e1c <VL53LX_init_tuning_parm_storage_struct+0x148>
{
 8003cdc:	b530      	push	{r4, r5, lr}
	pdata->tp_tuning_parm_lld_version          =
 8003cde:	e9c0 2300 	strd	r2, r3, [r0]
	pdata->tp_lite_long_sigma_thresh_mm        =
 8003ce2:	f04f 123c 	mov.w	r2, #3932220	; 0x3c003c
 8003ce6:	6182      	str	r2, [r0, #24]
	pdata->tp_lite_short_sigma_thresh_mm       =
 8003ce8:	f502 0288 	add.w	r2, r2, #4456448	; 0x440000
 8003cec:	61c2      	str	r2, [r0, #28]
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8003cee:	4a3f      	ldr	r2, [pc, #252]	; (8003dec <VL53LX_init_tuning_parm_storage_struct+0x118>)
	pdata->tp_init_phase_rtn_lite_short        =
 8003cf0:	4b3f      	ldr	r3, [pc, #252]	; (8003df0 <VL53LX_init_tuning_parm_storage_struct+0x11c>)
 8003cf2:	6083      	str	r3, [r0, #8]
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8003cf4:	f04f 1180 	mov.w	r1, #8388736	; 0x800080
 8003cf8:	e9c0 1208 	strd	r1, r2, [r0, #32]
	pdata->tp_timed_seed_cfg                     =
 8003cfc:	f240 2201 	movw	r2, #513	; 0x201
	VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
	VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
		VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 8003d00:	f643 2198 	movw	r1, #15000	; 0x3a98
	pdata->tp_timed_seed_cfg                     =
 8003d04:	8502      	strh	r2, [r0, #40]	; 0x28
	VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
	VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 8003d06:	f241 7470 	movw	r4, #6000	; 0x1770
	pdata->tp_phasecal_timeout_hist_long_us      =
 8003d0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d0e:	e9c0 210e 	strd	r2, r1, [r0, #56]	; 0x38
	VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
		VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
		VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 8003d12:	e9c0 4214 	strd	r4, r2, [r0, #80]	; 0x50
	pdata->tp_phasecal_timeout_hist_short_us     =
 8003d16:	f242 3528 	movw	r5, #9000	; 0x2328
		VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8003d1a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
	pdata->tp_phasecal_timeout_hist_short_us     =
 8003d1e:	e9c0 5410 	strd	r5, r4, [r0, #64]	; 0x40
			VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 8003d22:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
			VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
			VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8003d26:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
			VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
			VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 8003d2a:	f24f 6418 	movw	r4, #63000	; 0xf618
 8003d2e:	f640 12c4 	movw	r2, #2500	; 0x9c4
	pdata->tp_init_phase_rtn_hist_long         =
 8003d32:	f5a3 23e1 	sub.w	r3, r3, #460800	; 0x70800
	pdata->tp_range_timeout_histo_us             =
 8003d36:	e9c0 421b 	strd	r4, r2, [r0, #108]	; 0x6c
	pdata->tp_init_phase_rtn_hist_long         =
 8003d3a:	3bfd      	subs	r3, #253	; 0xfd



	pdata->tp_mm_timeout_lpa_us =
		VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8003d3c:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
	pdata->tp_phasecal_timeout_mz_med_us         =
 8003d40:	e9c0 1512 	strd	r1, r5, [r0, #72]	; 0x48
	pdata->tp_init_phase_rtn_hist_long         =
 8003d44:	60c3      	str	r3, [r0, #12]
	pdata->tp_range_timeout_mz_us                =
 8003d46:	6742      	str	r2, [r0, #116]	; 0x74
	pdata->tp_range_timeout_lpa_us =
 8003d48:	67c4      	str	r4, [r0, #124]	; 0x7c
	pdata->tp_init_phase_ref_hist_med          =
 8003d4a:	4b2a      	ldr	r3, [pc, #168]	; (8003df4 <VL53LX_init_tuning_parm_storage_struct+0x120>)
	pdata->tp_dss_target_histo_mz_mcps           =
 8003d4c:	4d2a      	ldr	r5, [pc, #168]	; (8003df8 <VL53LX_init_tuning_parm_storage_struct+0x124>)
 8003d4e:	4c2b      	ldr	r4, [pc, #172]	; (8003dfc <VL53LX_init_tuning_parm_storage_struct+0x128>)
	pdata->tp_init_phase_ref_hist_med          =
 8003d50:	6103      	str	r3, [r0, #16]
	pdata->tp_range_timeout_timed_us             =
 8003d52:	f243 22c8 	movw	r2, #13000	; 0x32c8
	pdata->tp_cal_repeat_rate                  =
 8003d56:	2300      	movs	r3, #0
	pdata->tp_range_timeout_timed_us             =
 8003d58:	6782      	str	r2, [r0, #120]	; 0x78
	pdata->tp_mm_timeout_lpa_us =
 8003d5a:	2201      	movs	r2, #1
	pdata->tp_cal_repeat_rate                  =
 8003d5c:	8283      	strh	r3, [r0, #20]
	pdata->tp_lite_min_clip                    =
 8003d5e:	7583      	strb	r3, [r0, #22]
	pdata->tp_lite_first_order_select            =
 8003d60:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
	pdata->tp_mm_timeout_lpa_us =
 8003d64:	6682      	str	r2, [r0, #104]	; 0x68
	pdata->tp_dss_target_histo_mz_mcps           =
 8003d66:	e9c0 540b 	strd	r5, r4, [r0, #44]	; 0x2c
		VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
		VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 8003d6a:	f880 2084 	strb.w	r2, [r0, #132]	; 0x84
	pdata->tp_uwr_med_z_1_max =
 8003d6e:	4a24      	ldr	r2, [pc, #144]	; (8003e00 <VL53LX_init_tuning_parm_storage_struct+0x12c>)
		VL53LX_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 8003d70:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
	pdata->tp_uwr_med_z_1_max =
 8003d74:	e9c0 c223 	strd	ip, r2, [r0, #140]	; 0x8c
	pdata->tp_uwr_med_z_2_max =
 8003d78:	4a22      	ldr	r2, [pc, #136]	; (8003e04 <VL53LX_init_tuning_parm_storage_struct+0x130>)
 8003d7a:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	pdata->tp_uwr_med_z_3_max =
 8003d7e:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
 8003d82:	f8c0 2098 	str.w	r2, [r0, #152]	; 0x98
	pdata->tp_uwr_med_z_4_max =
 8003d86:	f102 427a 	add.w	r2, r2, #4194304000	; 0xfa000000
 8003d8a:	f502 02ac 	add.w	r2, r2, #5636096	; 0x560000
 8003d8e:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	pdata->tp_uwr_med_z_5_max =
 8003d92:	4a1d      	ldr	r2, [pc, #116]	; (8003e08 <VL53LX_init_tuning_parm_storage_struct+0x134>)
 8003d94:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	pdata->tp_uwr_med_corr_z_1_rangeb =
 8003d98:	3ac8      	subs	r2, #200	; 0xc8
 8003d9a:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	pdata->tp_uwr_med_corr_z_2_rangeb =
 8003d9e:	4a1b      	ldr	r2, [pc, #108]	; (8003e0c <VL53LX_init_tuning_parm_storage_struct+0x138>)
	pdata->tp_phasecal_patch_power =
 8003da0:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	pdata->tp_uwr_med_corr_z_3_rangeb =
 8003da4:	e9c0 222a 	strd	r2, r2, [r0, #168]	; 0xa8
	pdata->tp_dss_target_very_short_mcps =
 8003da8:	f44f 5420 	mov.w	r4, #10240	; 0x2800
	pdata->tp_uwr_med_corr_z_5_rangeb =
 8003dac:	f641 0138 	movw	r1, #6200	; 0x1838
 8003db0:	f44f 027a 	mov.w	r2, #16384000	; 0xfa0000
 8003db4:	e9c0 122c 	strd	r1, r2, [r0, #176]	; 0xb0
	pdata->tp_dss_target_very_short_mcps =
 8003db8:	8684      	strh	r4, [r0, #52]	; 0x34
	pdata->tp_uwr_lng_z_2_max =
 8003dba:	4a15      	ldr	r2, [pc, #84]	; (8003e10 <VL53LX_init_tuning_parm_storage_struct+0x13c>)
 8003dbc:	4c15      	ldr	r4, [pc, #84]	; (8003e14 <VL53LX_init_tuning_parm_storage_struct+0x140>)
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 8003dbe:	f8a0 30dc 	strh.w	r3, [r0, #220]	; 0xdc
	pdata->tp_uwr_lng_z_2_max =
 8003dc2:	e9c0 422e 	strd	r4, r2, [r0, #184]	; 0xb8
	pdata->tp_uwr_lng_z_3_max =
 8003dc6:	22c8      	movs	r2, #200	; 0xc8
	pdata->tp_uwr_lng_z_4_max =
 8003dc8:	e9c0 2330 	strd	r2, r3, [r0, #192]	; 0xc0
	pdata->tp_uwr_lng_z_5_max =
 8003dcc:	4a12      	ldr	r2, [pc, #72]	; (8003e18 <VL53LX_init_tuning_parm_storage_struct+0x144>)
 8003dce:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 8003dd2:	f502 528f 	add.w	r2, r2, #4576	; 0x11e0
 8003dd6:	3218      	adds	r2, #24
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 8003dd8:	e9c0 2333 	strd	r2, r3, [r0, #204]	; 0xcc
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 8003ddc:	e9c0 3335 	strd	r3, r3, [r0, #212]	; 0xd4
		VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	bd30      	pop	{r4, r5, pc}
 8003de4:	000e001e 	.word	0x000e001e
 8003de8:	0a0e2f94 	.word	0x0a0e2f94
 8003dec:	02011008 	.word	0x02011008
 8003df0:	060a0e06 	.word	0x060a0e06
 8003df4:	21020606 	.word	0x21020606
 8003df8:	14000a00 	.word	0x14000a00
 8003dfc:	0a001400 	.word	0x0a001400
 8003e00:	00fa0abe 	.word	0x00fa0abe
 8003e04:	04e203e8 	.word	0x04e203e8
 8003e08:	08fc00c8 	.word	0x08fc00c8
 8003e0c:	11f80bea 	.word	0x11f80bea
 8003e10:	ff381194 	.word	0xff381194
 8003e14:	0cb204e2 	.word	0x0cb204e2
 8003e18:	0f0a0000 	.word	0x0f0a0000
 8003e1c:	07d00106 	.word	0x07d00106

08003e20 <VL53LX_init_hist_gen3_dmax_config_struct>:


	pdata->dss_config__target_total_rate_mcps = 0x1400;
	pdata->dss_config__aperture_attenuation = 0x38;

	pdata->signal_thresh_sigma                 =
 8003e20:	f247 0320 	movw	r3, #28704	; 0x7020
 8003e24:	8003      	strh	r3, [r0, #0]
			VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
	pdata->min_ambient_thresh_events           = 16;
	pdata->signal_total_events_limit           = 100;
 8003e26:	2210      	movs	r2, #16
 8003e28:	2364      	movs	r3, #100	; 0x64
 8003e2a:	e9c0 2301 	strd	r2, r3, [r0, #4]

	pdata->target_reflectance_for_dmax_calc[0] =
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 8003e2e:	4906      	ldr	r1, [pc, #24]	; (8003e48 <VL53LX_init_hist_gen3_dmax_config_struct+0x28>)
 8003e30:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <VL53LX_init_hist_gen3_dmax_config_struct+0x2c>)
 8003e32:	e9c0 1303 	strd	r1, r3, [r0, #12]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 8003e36:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <VL53LX_init_hist_gen3_dmax_config_struct+0x30>)
 8003e38:	6143      	str	r3, [r0, #20]
	pdata->dss_config__target_total_rate_mcps = 0x1400;
 8003e3a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003e3e:	8303      	strh	r3, [r0, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 8003e40:	2338      	movs	r3, #56	; 0x38
 8003e42:	7683      	strb	r3, [r0, #26]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 8003e44:	2000      	movs	r0, #0
 8003e46:	4770      	bx	lr
 8003e48:	0034000f 	.word	0x0034000f
 8003e4c:	016c00c8 	.word	0x016c00c8
 8003e50:	ffff0190 	.word	0xffff0190

08003e54 <VL53LX_preset_mode_standard_ranging>:
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic,
	VL53LX_system_control_t   *psystem,
	VL53LX_tuning_parm_storage_t *ptuning_parms,
	VL53LX_zone_config_t      *pzone_cfg)
{
 8003e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}


	pstatic->gpio_hv_pad__ctrl = 0x00;


	pstatic->gpio_hv_mux__ctrl  =
 8003e58:	f240 2711 	movw	r7, #529	; 0x211
{
 8003e5c:	e9dd 6e08 	ldrd	r6, lr, [sp, #32]
	pstatic->gpio_hv_mux__ctrl  =
 8003e60:	8187      	strh	r7, [r0, #12]
	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8003e62:	f44f 6420 	mov.w	r4, #2560	; 0xa00
			VL53LX_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53LX_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
	pstatic->gpio__fio_hv_status = 0x00;
 8003e66:	f44f 7700 	mov.w	r7, #512	; 0x200
	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8003e6a:	8004      	strh	r4, [r0, #0]
	pstatic->gpio__fio_hv_status = 0x00;
 8003e6c:	81c7      	strh	r7, [r0, #14]
	pstatic->debug__ctrl = 0x00;
 8003e6e:	2400      	movs	r4, #0
	pstatic->ana_config__spad_sel_pswidth = 0x02;
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8003e70:	2708      	movs	r7, #8
	pstatic->debug__ctrl = 0x00;
 8003e72:	8044      	strh	r4, [r0, #2]
	pstatic->clk_gating__ctrl = 0x00;
 8003e74:	8084      	strh	r4, [r0, #4]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8003e76:	80c4      	strh	r4, [r0, #6]
	pstatic->host_if__status = 0x00;
 8003e78:	8104      	strh	r4, [r0, #8]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8003e7a:	8144      	strh	r4, [r0, #10]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8003e7c:	8207      	strh	r7, [r0, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;

	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8003e7e:	f896 7024 	ldrb.w	r7, [r6, #36]	; 0x24
 8003e82:	7487      	strb	r7, [r0, #18]
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8003e84:	f896 7025 	ldrb.w	r7, [r6, #37]	; 0x25
 8003e88:	74c7      	strb	r7, [r0, #19]
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8003e8a:	f896 7026 	ldrb.w	r7, [r6, #38]	; 0x26
 8003e8e:	7507      	strb	r7, [r0, #20]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8003e90:	f04f 08ff 	mov.w	r8, #255	; 0xff
	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 8003e94:	2701      	movs	r7, #1
 8003e96:	7547      	strb	r7, [r0, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8003e98:	82c4      	strh	r4, [r0, #22]
	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8003e9a:	8304      	strh	r4, [r0, #24]
	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8003e9c:	f880 801a 	strb.w	r8, [r0, #26]
	pstatic->algo__range_min_clip                             =
 8003ea0:	f896 8016 	ldrb.w	r8, [r6, #22]
 8003ea4:	f880 801b 	strb.w	r8, [r0, #27]
			ptuning_parms->tp_lite_min_clip;

	pstatic->algo__consistency_check__tolerance               =
 8003ea8:	f896 8012 	ldrb.w	r8, [r6, #18]
 8003eac:	f880 801c 	strb.w	r8, [r0, #28]
			ptuning_parms->tp_consistency_lite_phase_tolerance;
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 8003eb0:	7744      	strb	r4, [r0, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8003eb2:	83c4      	strh	r4, [r0, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;

	pgeneral->gph_config__stream_count_update_value = 0x00;
	pgeneral->global_config__stream_divider = 0x00;
	pgeneral->system__interrupt_config_gpio =
 8003eb4:	f44f 6032 	mov.w	r0, #2848	; 0xb20
	pgeneral->gph_config__stream_count_update_value = 0x00;
 8003eb8:	8014      	strh	r4, [r2, #0]
	pgeneral->system__interrupt_config_gpio =
 8003eba:	8050      	strh	r0, [r2, #2]
{
 8003ebc:	e9dd 5c06 	ldrd	r5, ip, [sp, #24]
			VL53LX_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;


	pgeneral->cal_config__repeat_rate                         =
 8003ec0:	8ab0      	ldrh	r0, [r6, #20]
 8003ec2:	8090      	strh	r0, [r2, #4]
			ptuning_parms->tp_cal_repeat_rate;
	pgeneral->global_config__vcsel_width = 0x02;
 8003ec4:	f640 5002 	movw	r0, #3330	; 0xd02
 8003ec8:	80d0      	strh	r0, [r2, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;

	pgeneral->phasecal_config__target                         =
 8003eca:	7cf0      	ldrb	r0, [r6, #19]
 8003ecc:	7210      	strb	r0, [r2, #8]
			VL53LX_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
	pgeneral->system__thresh_rate_low = 0x0000;

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 8003ece:	f44f 400c 	mov.w	r0, #35840	; 0x8c00
 8003ed2:	8210      	strh	r0, [r2, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 8003ed4:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8003ed8:	8250      	strh	r0, [r2, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8003eda:	f240 10ff 	movw	r0, #511	; 0x1ff
	pgeneral->phasecal_config__override = 0x00;
 8003ede:	7254      	strb	r4, [r2, #9]
	pgeneral->dss_config__roi_mode_control =
 8003ee0:	7297      	strb	r7, [r2, #10]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8003ee2:	8290      	strh	r0, [r2, #20]
	pgeneral->system__thresh_rate_high = 0x0000;
 8003ee4:	8194      	strh	r4, [r2, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 8003ee6:	81d4      	strh	r4, [r2, #14]
	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8003ee8:	4830      	ldr	r0, [pc, #192]	; (8003fac <VL53LX_preset_mode_standard_ranging+0x158>)
 8003eea:	4a31      	ldr	r2, [pc, #196]	; (8003fb0 <VL53LX_preset_mode_standard_ranging+0x15c>)
 8003eec:	e9c3 0200 	strd	r0, r2, [r3]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;

	ptiming->range_config__vcsel_period_a = 0x0B;

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8003ef0:	f640 12f5 	movw	r2, #2549	; 0x9f5
 8003ef4:	811a      	strh	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;

	ptiming->range_config__sigma_thresh                       =
 8003ef6:	8b72      	ldrh	r2, [r6, #26]
 8003ef8:	815a      	strh	r2, [r3, #10]
			ptuning_parms->tp_lite_med_sigma_thresh_mm;

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8003efa:	8c32      	ldrh	r2, [r6, #32]
 8003efc:	819a      	strh	r2, [r3, #12]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 8003efe:	f240 7854 	movw	r8, #1876	; 0x754
	ptiming->range_config__valid_phase_low = 0x08;
 8003f02:	f647 0208 	movw	r2, #30728	; 0x7808
 8003f06:	81da      	strh	r2, [r3, #14]
	ptiming->system__intermeasurement_period = 0x00000000;
 8003f08:	611c      	str	r4, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 8003f0a:	751c      	strb	r4, [r3, #20]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 8003f0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 8003f10:	f8a1 8006 	strh.w	r8, [r1, #6]
	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8003f14:	f44f 7804 	mov.w	r8, #528	; 0x210
	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 8003f18:	82cb      	strh	r3, [r1, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 8003f1a:	830b      	strh	r3, [r1, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 8003f1c:	f44f 60e0 	mov.w	r0, #1792	; 0x700
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8003f20:	f244 3321 	movw	r3, #17185	; 0x4321
	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8003f24:	f243 2210 	movw	r2, #12816	; 0x3210
	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8003f28:	f8a1 800a 	strh.w	r8, [r1, #10]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8003f2c:	f240 5843 	movw	r8, #1347	; 0x543
	phistogram->histogram_config__spad_array_selection = 0x00;
 8003f30:	8008      	strh	r0, [r1, #0]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8003f32:	804b      	strh	r3, [r1, #2]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 8003f34:	810b      	strh	r3, [r1, #8]
	phistogram->histogram_config__user_bin_offset = 0x00;
 8003f36:	81c8      	strh	r0, [r1, #14]
	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8003f38:	808a      	strh	r2, [r1, #4]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8003f3a:	f8a1 800c 	strh.w	r8, [r1, #12]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 8003f3e:	820b      	strh	r3, [r1, #16]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 8003f40:	2354      	movs	r3, #84	; 0x54
 8003f42:	750b      	strb	r3, [r1, #20]


	pzone_cfg->max_zones                     = VL53LX_MAX_USER_ZONES;
 8003f44:	2310      	movs	r3, #16
	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 8003f46:	824a      	strh	r2, [r1, #18]
	pzone_cfg->max_zones                     = VL53LX_MAX_USER_ZONES;
 8003f48:	f8ae 3000 	strh.w	r3, [lr]
	pzone_cfg->active_zones = 0x00;
	pzone_cfg->user_zones[0].height = 0x0f;
	pzone_cfg->user_zones[0].width = 0x0f;
	pzone_cfg->user_zones[0].x_centre = 0x08;
 8003f4c:	f640 0308 	movw	r3, #2056	; 0x808
 8003f50:	f8ae 301c 	strh.w	r3, [lr, #28]
	pzone_cfg->user_zones[0].width = 0x0f;
 8003f54:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003f58:	f8ae 301e 	strh.w	r3, [lr, #30]
	pzone_cfg->user_zones[0].y_centre = 0x08;



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8003f5c:	702f      	strb	r7, [r5, #0]

	pdynamic->system__thresh_high = 0x0000;
 8003f5e:	806c      	strh	r4, [r5, #2]
	pdynamic->system__thresh_low = 0x0000;
 8003f60:	80ac      	strh	r4, [r5, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 8003f62:	71ac      	strb	r4, [r5, #6]
	pdynamic->system__seed_config =
 8003f64:	f896 3027 	ldrb.w	r3, [r6, #39]	; 0x27
 8003f68:	71eb      	strb	r3, [r5, #7]
			ptuning_parms->tp_lite_seed_cfg;


	pdynamic->sd_config__woi_sd0 = 0x0B;
 8003f6a:	f640 130b 	movw	r3, #2315	; 0x90b
 8003f6e:	812b      	strh	r3, [r5, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;

	pdynamic->sd_config__initial_phase_sd0                     =
 8003f70:	79f3      	ldrb	r3, [r6, #7]
 8003f72:	72ab      	strb	r3, [r5, #10]
			ptuning_parms->tp_init_phase_rtn_lite_med;
	pdynamic->sd_config__initial_phase_sd1                     =
 8003f74:	7ab3      	ldrb	r3, [r6, #10]
 8003f76:	72eb      	strb	r3, [r5, #11]
			ptuning_parms->tp_init_phase_ref_lite_med;

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 8003f78:	732f      	strb	r7, [r5, #12]



	pdynamic->sd_config__first_order_select =
 8003f7a:	f896 302a 	ldrb.w	r3, [r6, #42]	; 0x2a
 8003f7e:	736b      	strb	r3, [r5, #13]
			ptuning_parms->tp_lite_first_order_select;
	pdynamic->sd_config__quantifier         =
 8003f80:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 8003f84:	73ab      	strb	r3, [r5, #14]
			ptuning_parms->tp_lite_quantifier;


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8003f86:	23c7      	movs	r3, #199	; 0xc7
 8003f88:	73eb      	strb	r3, [r5, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8003f8a:	f64d 33ff 	movw	r3, #56319	; 0xdbff
 8003f8e:	822b      	strh	r3, [r5, #16]
			VL53LX_SEQUENCE_DSS1_EN |
			VL53LX_SEQUENCE_DSS2_EN |
			VL53LX_SEQUENCE_MM2_EN |
			VL53LX_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 8003f90:	2302      	movs	r3, #2
 8003f92:	74ab      	strb	r3, [r5, #18]
	psystem->system__stream_count_ctrl = 0x00;
	psystem->firmware__enable = 0x01;
	psystem->system__interrupt_clear                           =
			VL53LX_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 8003f94:	2321      	movs	r3, #33	; 0x21
	psystem->system__stream_count_ctrl = 0x00;
 8003f96:	f88c 4001 	strb.w	r4, [ip, #1]
	psystem->firmware__enable = 0x01;
 8003f9a:	f88c 7002 	strb.w	r7, [ip, #2]
	psystem->system__interrupt_clear                           =
 8003f9e:	f88c 7003 	strb.w	r7, [ip, #3]
	psystem->system__mode_start                                =
 8003fa2:	f88c 3004 	strb.w	r3, [ip, #4]
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
}
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fac:	20001a00 	.word	0x20001a00
 8003fb0:	010bcc01 	.word	0x010bcc01

08003fb4 <VL53LX_copy_hist_cfg_to_static_cfg>:
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_general_config_t   *pgeneral,
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic)
{
 8003fb4:	b530      	push	{r4, r5, lr}

	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
 8003fb6:	7bc4      	ldrb	r4, [r0, #15]
 8003fb8:	748c      	strb	r4, [r1, #18]
			phistogram->histogram_config__high_amb_even_bin_0_1;
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8003fba:	7c04      	ldrb	r4, [r0, #16]
 8003fbc:	74cc      	strb	r4, [r1, #19]
			phistogram->histogram_config__high_amb_even_bin_2_3;
	pstatic->sigma_estimator__sigma_ref_mm =
 8003fbe:	7c44      	ldrb	r4, [r0, #17]
 8003fc0:	750c      	strb	r4, [r1, #20]
			phistogram->histogram_config__high_amb_even_bin_4_5;

	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8003fc2:	7c84      	ldrb	r4, [r0, #18]
 8003fc4:	754c      	strb	r4, [r1, #21]
			phistogram->histogram_config__high_amb_odd_bin_0_1;

	pstatic->spare_host_config__static_config_spare_0 =
 8003fc6:	7cc4      	ldrb	r4, [r0, #19]
 8003fc8:	758c      	strb	r4, [r1, #22]
			phistogram->histogram_config__high_amb_odd_bin_2_3;
	pstatic->spare_host_config__static_config_spare_1 =
 8003fca:	7d04      	ldrb	r4, [r0, #20]
 8003fcc:	75cc      	strb	r4, [r1, #23]
			phistogram->histogram_config__high_amb_odd_bin_4_5;

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 8003fce:	79c5      	ldrb	r5, [r0, #7]
				<< 8)
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 8003fd0:	7a04      	ldrb	r4, [r0, #8]
{
 8003fd2:	9a03      	ldr	r2, [sp, #12]
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 8003fd4:	eb04 2405 	add.w	r4, r4, r5, lsl #8
	pstatic->algo__range_ignore_threshold_mcps =
 8003fd8:	830c      	strh	r4, [r1, #24]

	pstatic->algo__range_ignore_valid_height_mm =
 8003fda:	7a44      	ldrb	r4, [r0, #9]
 8003fdc:	768c      	strb	r4, [r1, #26]
			phistogram->histogram_config__mid_amb_even_bin_4_5;
	pstatic->algo__range_min_clip =
 8003fde:	7a84      	ldrb	r4, [r0, #10]
 8003fe0:	76cc      	strb	r4, [r1, #27]
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
	pstatic->algo__consistency_check__tolerance =
 8003fe2:	7ac4      	ldrb	r4, [r0, #11]
 8003fe4:	770c      	strb	r4, [r1, #28]
			phistogram->histogram_config__mid_amb_odd_bin_2;

	pstatic->spare_host_config__static_config_spare_2 =
 8003fe6:	7b04      	ldrb	r4, [r0, #12]
 8003fe8:	774c      	strb	r4, [r1, #29]
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
	pstatic->sd_config__reset_stages_msb =
 8003fea:	7b44      	ldrb	r4, [r0, #13]
 8003fec:	778c      	strb	r4, [r1, #30]
			phistogram->histogram_config__mid_amb_odd_bin_5;

	pstatic->sd_config__reset_stages_lsb =
 8003fee:	7b84      	ldrb	r4, [r0, #14]
 8003ff0:	77cc      	strb	r4, [r1, #31]
			phistogram->histogram_config__user_bin_offset;

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 8003ff2:	7844      	ldrb	r4, [r0, #1]
				<< 8)
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 8003ff4:	7881      	ldrb	r1, [r0, #2]
 8003ff6:	eb01 2104 	add.w	r1, r1, r4, lsl #8
	ptiming->range_config__sigma_thresh =
 8003ffa:	8159      	strh	r1, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 8003ffc:	78c4      	ldrb	r4, [r0, #3]
				<< 8)
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 8003ffe:	7901      	ldrb	r1, [r0, #4]
 8004000:	eb01 2104 	add.w	r1, r1, r4, lsl #8
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8004004:	8199      	strh	r1, [r3, #12]

	ptiming->range_config__valid_phase_low =
 8004006:	7941      	ldrb	r1, [r0, #5]
 8004008:	7399      	strb	r1, [r3, #14]
			phistogram->histogram_config__low_amb_odd_bin_2_3;
	ptiming->range_config__valid_phase_high =
 800400a:	7981      	ldrb	r1, [r0, #6]
 800400c:	73d9      	strb	r1, [r3, #15]
			phistogram->histogram_config__low_amb_odd_bin_4_5;

	pdynamic->system__thresh_high =
 800400e:	8ac3      	ldrh	r3, [r0, #22]
 8004010:	8053      	strh	r3, [r2, #2]
			phistogram->histogram_config__amb_thresh_low;

	pdynamic->system__thresh_low =
 8004012:	8b03      	ldrh	r3, [r0, #24]
 8004014:	8093      	strh	r3, [r2, #4]
			phistogram->histogram_config__amb_thresh_high;

	pdynamic->system__enable_xtalk_per_quadrant =
 8004016:	7803      	ldrb	r3, [r0, #0]
 8004018:	7193      	strb	r3, [r2, #6]
			phistogram->histogram_config__spad_array_selection;

	LOG_FUNCTION_END(0);

}
 800401a:	bd30      	pop	{r4, r5, pc}

0800401c <VL53LX_preset_mode_histogram_ranging>:
{
 800401c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004020:	b08d      	sub	sp, #52	; 0x34
 8004022:	4698      	mov	r8, r3
		VL53LX_preset_mode_standard_ranging(
 8004024:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004026:	9303      	str	r3, [sp, #12]
 8004028:	9b19      	ldr	r3, [sp, #100]	; 0x64
{
 800402a:	9d16      	ldr	r5, [sp, #88]	; 0x58
		VL53LX_preset_mode_standard_ranging(
 800402c:	9302      	str	r3, [sp, #8]
 800402e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004030:	9301      	str	r3, [sp, #4]
{
 8004032:	460f      	mov	r7, r1
		VL53LX_preset_mode_standard_ranging(
 8004034:	9b17      	ldr	r3, [sp, #92]	; 0x5c
{
 8004036:	900b      	str	r0, [sp, #44]	; 0x2c
 8004038:	4616      	mov	r6, r2
		VL53LX_preset_mode_standard_ranging(
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	4642      	mov	r2, r8
 800403e:	462b      	mov	r3, r5
 8004040:	4631      	mov	r1, r6
 8004042:	4638      	mov	r0, r7
 8004044:	f7ff ff06 	bl	8003e54 <VL53LX_preset_mode_standard_ranging>
	if (status == VL53LX_ERROR_NONE) {
 8004048:	4604      	mov	r4, r0
 800404a:	2800      	cmp	r0, #0
 800404c:	d14e      	bne.n	80040ec <VL53LX_preset_mode_histogram_ranging+0xd0>
		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 800404e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
		VL53LX_init_histogram_config_structure(
 8004052:	f04f 0a04 	mov.w	sl, #4
 8004056:	f04f 0903 	mov.w	r9, #3
 800405a:	2201      	movs	r2, #1
		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 800405c:	803b      	strh	r3, [r7, #0]
		VL53LX_init_histogram_config_structure(
 800405e:	f04f 0b05 	mov.w	fp, #5
 8004062:	2302      	movs	r3, #2
 8004064:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8004068:	4601      	mov	r1, r0
 800406a:	e9cd 3904 	strd	r3, r9, [sp, #16]
 800406e:	2007      	movs	r0, #7
 8004070:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8004074:	e9cd 9a00 	strd	r9, sl, [sp]
 8004078:	9608      	str	r6, [sp, #32]
 800407a:	f000 fa8f 	bl	800459c <VL53LX_init_histogram_config_structure>
		VL53LX_init_histogram_multizone_config_structure(
 800407e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004080:	f8cd 9000 	str.w	r9, [sp]
 8004084:	1c99      	adds	r1, r3, #2
 8004086:	2201      	movs	r2, #1
 8004088:	2302      	movs	r3, #2
 800408a:	e9cd 2303 	strd	r2, r3, [sp, #12]
 800408e:	e9cd b107 	strd	fp, r1, [sp, #28]
 8004092:	2007      	movs	r0, #7
 8004094:	4621      	mov	r1, r4
 8004096:	e9cd 9a05 	strd	r9, sl, [sp, #20]
 800409a:	e9cd a401 	strd	sl, r4, [sp, #4]
 800409e:	f000 fac7 	bl	8004630 <VL53LX_init_histogram_multizone_config_structure>
		ptiming->range_config__vcsel_period_a = 0x09;
 80040a2:	2309      	movs	r3, #9
 80040a4:	71ab      	strb	r3, [r5, #6]
		pdynamic->sd_config__woi_sd0 = 0x09;
 80040a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
		ptiming->range_config__vcsel_period_b = 0x0B;
 80040a8:	230b      	movs	r3, #11
 80040aa:	726b      	strb	r3, [r5, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 80040ac:	f640 3309 	movw	r3, #2825	; 0xb09
 80040b0:	8113      	strh	r3, [r2, #8]
		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80040b2:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <VL53LX_preset_mode_histogram_ranging+0xd8>)
 80040b4:	602b      	str	r3, [r5, #0]
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80040b6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80040ba:	80ab      	strh	r3, [r5, #4]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 80040bc:	2321      	movs	r3, #33	; 0x21
 80040be:	722b      	strb	r3, [r5, #8]
		phistpostprocess->valid_phase_low = 0x08;
 80040c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80040c2:	71ec      	strb	r4, [r5, #7]
		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80040c4:	23f5      	movs	r3, #245	; 0xf5
 80040c6:	f888 3007 	strb.w	r3, [r8, #7]
		phistpostprocess->valid_phase_low = 0x08;
 80040ca:	f648 0308 	movw	r3, #34824	; 0x8808
 80040ce:	8413      	strh	r3, [r2, #32]
		VL53LX_copy_hist_cfg_to_static_cfg(
 80040d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	4642      	mov	r2, r8
 80040d6:	462b      	mov	r3, r5
 80040d8:	4639      	mov	r1, r7
 80040da:	4630      	mov	r0, r6
 80040dc:	f7ff ff6a 	bl	8003fb4 <VL53LX_copy_hist_cfg_to_static_cfg>
		pdynamic->system__sequence_config =
 80040e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80040e2:	239b      	movs	r3, #155	; 0x9b
 80040e4:	7453      	strb	r3, [r2, #17]
		psystem->system__mode_start =
 80040e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80040e8:	2326      	movs	r3, #38	; 0x26
 80040ea:	7113      	strb	r3, [r2, #4]
}
 80040ec:	4620      	mov	r0, r4
 80040ee:	b00d      	add	sp, #52	; 0x34
 80040f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040f4:	1a002000 	.word	0x1a002000

080040f8 <VL53LX_preset_mode_histogram_long_range>:
{
 80040f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040fc:	b08d      	sub	sp, #52	; 0x34
 80040fe:	e9dd 7516 	ldrd	r7, r5, [sp, #88]	; 0x58
		VL53LX_preset_mode_histogram_ranging(
 8004102:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8004104:	9404      	str	r4, [sp, #16]
 8004106:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8004108:	9403      	str	r4, [sp, #12]
 800410a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800410c:	9700      	str	r7, [sp, #0]
 800410e:	e9cd 5401 	strd	r5, r4, [sp, #4]
{
 8004112:	900b      	str	r0, [sp, #44]	; 0x2c
 8004114:	468b      	mov	fp, r1
 8004116:	4690      	mov	r8, r2
 8004118:	461e      	mov	r6, r3
		VL53LX_preset_mode_histogram_ranging(
 800411a:	f7ff ff7f 	bl	800401c <VL53LX_preset_mode_histogram_ranging>
	if (status == VL53LX_ERROR_NONE) {
 800411e:	4604      	mov	r4, r0
 8004120:	2800      	cmp	r0, #0
 8004122:	d14c      	bne.n	80041be <VL53LX_preset_mode_histogram_long_range+0xc6>
		VL53LX_init_histogram_config_structure(
 8004124:	f04f 0a04 	mov.w	sl, #4
 8004128:	2305      	movs	r3, #5
 800412a:	f04f 0903 	mov.w	r9, #3
 800412e:	2201      	movs	r2, #1
 8004130:	e9cd a306 	strd	sl, r3, [sp, #24]
 8004134:	2302      	movs	r3, #2
 8004136:	e9cd 0202 	strd	r0, r2, [sp, #8]
 800413a:	4601      	mov	r1, r0
 800413c:	e9cd 3904 	strd	r3, r9, [sp, #16]
 8004140:	2007      	movs	r0, #7
 8004142:	e9cd 9a00 	strd	r9, sl, [sp]
 8004146:	f8cd 8020 	str.w	r8, [sp, #32]
 800414a:	f000 fa27 	bl	800459c <VL53LX_init_histogram_config_structure>
		VL53LX_init_histogram_multizone_config_structure(
 800414e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004150:	f8cd 9014 	str.w	r9, [sp, #20]
 8004154:	1c99      	adds	r1, r3, #2
 8004156:	2305      	movs	r3, #5
 8004158:	2201      	movs	r2, #1
 800415a:	e9cd a306 	strd	sl, r3, [sp, #24]
 800415e:	2302      	movs	r3, #2
 8004160:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8004164:	9108      	str	r1, [sp, #32]
 8004166:	2007      	movs	r0, #7
 8004168:	4621      	mov	r1, r4
 800416a:	e9cd a401 	strd	sl, r4, [sp, #4]
 800416e:	f8cd 9000 	str.w	r9, [sp]
 8004172:	f000 fa5d 	bl	8004630 <VL53LX_init_histogram_multizone_config_structure>
		VL53LX_copy_hist_cfg_to_static_cfg(
 8004176:	463b      	mov	r3, r7
 8004178:	4632      	mov	r2, r6
 800417a:	9500      	str	r5, [sp, #0]
 800417c:	4659      	mov	r1, fp
 800417e:	4640      	mov	r0, r8
 8004180:	f7ff ff18 	bl	8003fb4 <VL53LX_copy_hist_cfg_to_static_cfg>
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8004184:	4a10      	ldr	r2, [pc, #64]	; (80041c8 <VL53LX_preset_mode_histogram_long_range+0xd0>)
 8004186:	4b11      	ldr	r3, [pc, #68]	; (80041cc <VL53LX_preset_mode_histogram_long_range+0xd4>)
 8004188:	e9c7 2300 	strd	r2, r3, [r7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 800418c:	f640 3322 	movw	r3, #2850	; 0xb22
 8004190:	813b      	strh	r3, [r7, #8]
		pgeneral->cal_config__vcsel_start = 0x09;
 8004192:	2309      	movs	r3, #9
 8004194:	70f3      	strb	r3, [r6, #3]
		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8004196:	23f5      	movs	r3, #245	; 0xf5
 8004198:	71f3      	strb	r3, [r6, #7]
		pdynamic->sd_config__woi_sd0 = 0x09;
 800419a:	f640 3309 	movw	r3, #2825	; 0xb09
 800419e:	812b      	strh	r3, [r5, #8]
		pdynamic->sd_config__initial_phase_sd0            =
 80041a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
		phistpostprocess->valid_phase_low = 0x08;
 80041a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		pdynamic->sd_config__initial_phase_sd0            =
 80041a4:	7b1b      	ldrb	r3, [r3, #12]
 80041a6:	72ab      	strb	r3, [r5, #10]
		pdynamic->sd_config__initial_phase_sd1            =
 80041a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80041aa:	7bdb      	ldrb	r3, [r3, #15]
 80041ac:	72eb      	strb	r3, [r5, #11]
		phistpostprocess->valid_phase_low = 0x08;
 80041ae:	f648 0308 	movw	r3, #34824	; 0x8808
 80041b2:	8413      	strh	r3, [r2, #32]
		pdynamic->system__sequence_config =
 80041b4:	239b      	movs	r3, #155	; 0x9b
		psystem->system__mode_start =
 80041b6:	9a18      	ldr	r2, [sp, #96]	; 0x60
		pdynamic->system__sequence_config =
 80041b8:	746b      	strb	r3, [r5, #17]
		psystem->system__mode_start =
 80041ba:	2326      	movs	r3, #38	; 0x26
 80041bc:	7113      	strb	r3, [r2, #4]
}
 80041be:	4620      	mov	r0, r4
 80041c0:	b00d      	add	sp, #52	; 0x34
 80041c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041c6:	bf00      	nop
 80041c8:	1b002100 	.word	0x1b002100
 80041cc:	00092900 	.word	0x00092900

080041d0 <VL53LX_preset_mode_histogram_medium_range>:
{
 80041d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d4:	b08d      	sub	sp, #52	; 0x34
 80041d6:	e9dd 8616 	ldrd	r8, r6, [sp, #88]	; 0x58
		VL53LX_preset_mode_histogram_ranging(
 80041da:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80041dc:	9404      	str	r4, [sp, #16]
 80041de:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80041e0:	9403      	str	r4, [sp, #12]
 80041e2:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80041e4:	f8cd 8000 	str.w	r8, [sp]
 80041e8:	e9cd 6401 	strd	r6, r4, [sp, #4]
{
 80041ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80041ee:	468a      	mov	sl, r1
 80041f0:	4691      	mov	r9, r2
 80041f2:	461f      	mov	r7, r3
		VL53LX_preset_mode_histogram_ranging(
 80041f4:	f7ff ff12 	bl	800401c <VL53LX_preset_mode_histogram_ranging>
	if (status == VL53LX_ERROR_NONE) {
 80041f8:	4604      	mov	r4, r0
 80041fa:	2800      	cmp	r0, #0
 80041fc:	d148      	bne.n	8004290 <VL53LX_preset_mode_histogram_medium_range+0xc0>
		VL53LX_init_histogram_config_structure(
 80041fe:	2502      	movs	r5, #2
 8004200:	2301      	movs	r3, #1
 8004202:	f04f 0b03 	mov.w	fp, #3
 8004206:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800420a:	461a      	mov	r2, r3
 800420c:	4601      	mov	r1, r0
 800420e:	e9cd 5304 	strd	r5, r3, [sp, #16]
 8004212:	2007      	movs	r0, #7
 8004214:	e9cd 5b06 	strd	r5, fp, [sp, #24]
 8004218:	e9cd 5500 	strd	r5, r5, [sp]
 800421c:	f8cd 9020 	str.w	r9, [sp, #32]
 8004220:	f000 f9bc 	bl	800459c <VL53LX_init_histogram_config_structure>
		VL53LX_init_histogram_multizone_config_structure(
 8004224:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004226:	9506      	str	r5, [sp, #24]
 8004228:	195a      	adds	r2, r3, r5
 800422a:	2301      	movs	r3, #1
 800422c:	e9cd b207 	strd	fp, r2, [sp, #28]
 8004230:	e9cd 5304 	strd	r5, r3, [sp, #16]
 8004234:	461a      	mov	r2, r3
 8004236:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800423a:	4621      	mov	r1, r4
 800423c:	2007      	movs	r0, #7
 800423e:	e9cd 5500 	strd	r5, r5, [sp]
 8004242:	f000 f9f5 	bl	8004630 <VL53LX_init_histogram_multizone_config_structure>
		VL53LX_copy_hist_cfg_to_static_cfg(
 8004246:	4643      	mov	r3, r8
 8004248:	463a      	mov	r2, r7
 800424a:	9600      	str	r6, [sp, #0]
 800424c:	4651      	mov	r1, sl
 800424e:	4648      	mov	r0, r9
 8004250:	f7ff feb0 	bl	8003fb4 <VL53LX_copy_hist_cfg_to_static_cfg>
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8004254:	4a10      	ldr	r2, [pc, #64]	; (8004298 <VL53LX_preset_mode_histogram_medium_range+0xc8>)
 8004256:	4b11      	ldr	r3, [pc, #68]	; (800429c <VL53LX_preset_mode_histogram_medium_range+0xcc>)
 8004258:	e9c8 2300 	strd	r2, r3, [r8]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 800425c:	f240 7333 	movw	r3, #1843	; 0x733
 8004260:	f8a8 3008 	strh.w	r3, [r8, #8]
		pgeneral->cal_config__vcsel_start = 0x05;
 8004264:	2305      	movs	r3, #5
 8004266:	70fb      	strb	r3, [r7, #3]
		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8004268:	23f5      	movs	r3, #245	; 0xf5
 800426a:	71fb      	strb	r3, [r7, #7]
		pdynamic->sd_config__woi_sd0 = 0x05;
 800426c:	f240 7305 	movw	r3, #1797	; 0x705
 8004270:	8133      	strh	r3, [r6, #8]
		pdynamic->sd_config__initial_phase_sd0            =
 8004272:	9b19      	ldr	r3, [sp, #100]	; 0x64
		phistpostprocess->valid_phase_low = 0x08;
 8004274:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		pdynamic->sd_config__initial_phase_sd0            =
 8004276:	7b5b      	ldrb	r3, [r3, #13]
 8004278:	72b3      	strb	r3, [r6, #10]
		pdynamic->sd_config__initial_phase_sd1            =
 800427a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800427c:	7c1b      	ldrb	r3, [r3, #16]
 800427e:	72f3      	strb	r3, [r6, #11]
		phistpostprocess->valid_phase_low = 0x08;
 8004280:	f644 0308 	movw	r3, #18440	; 0x4808
 8004284:	8413      	strh	r3, [r2, #32]
		pdynamic->system__sequence_config =
 8004286:	239b      	movs	r3, #155	; 0x9b
		psystem->system__mode_start =
 8004288:	9a18      	ldr	r2, [sp, #96]	; 0x60
		pdynamic->system__sequence_config =
 800428a:	7473      	strb	r3, [r6, #17]
		psystem->system__mode_start =
 800428c:	2326      	movs	r3, #38	; 0x26
 800428e:	7113      	strb	r3, [r2, #4]
}
 8004290:	4620      	mov	r0, r4
 8004292:	b00d      	add	sp, #52	; 0x34
 8004294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004298:	28003600 	.word	0x28003600
 800429c:	00054400 	.word	0x00054400

080042a0 <VL53LX_preset_mode_histogram_short_range>:
{
 80042a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042a4:	b08b      	sub	sp, #44	; 0x2c
 80042a6:	e9dd 7514 	ldrd	r7, r5, [sp, #80]	; 0x50
		VL53LX_preset_mode_histogram_ranging(
 80042aa:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80042ac:	9404      	str	r4, [sp, #16]
 80042ae:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80042b0:	9403      	str	r4, [sp, #12]
 80042b2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80042b4:	9700      	str	r7, [sp, #0]
 80042b6:	e9cd 5401 	strd	r5, r4, [sp, #4]
{
 80042ba:	4682      	mov	sl, r0
 80042bc:	468b      	mov	fp, r1
 80042be:	4690      	mov	r8, r2
 80042c0:	461e      	mov	r6, r3
		VL53LX_preset_mode_histogram_ranging(
 80042c2:	f7ff feab 	bl	800401c <VL53LX_preset_mode_histogram_ranging>
	if (status == VL53LX_ERROR_NONE) {
 80042c6:	4604      	mov	r4, r0
 80042c8:	2800      	cmp	r0, #0
 80042ca:	d148      	bne.n	800435e <VL53LX_preset_mode_histogram_short_range+0xbe>
		VL53LX_init_histogram_config_structure(
 80042cc:	2301      	movs	r3, #1
 80042ce:	f04f 0902 	mov.w	r9, #2
 80042d2:	2107      	movs	r1, #7
 80042d4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80042d8:	4602      	mov	r2, r0
 80042da:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80042de:	4608      	mov	r0, r1
 80042e0:	e9cd 3300 	strd	r3, r3, [sp]
 80042e4:	e9cd 9906 	strd	r9, r9, [sp, #24]
 80042e8:	f8cd 8020 	str.w	r8, [sp, #32]
 80042ec:	f000 f956 	bl	800459c <VL53LX_init_histogram_config_structure>
		VL53LX_init_histogram_multizone_config_structure(
 80042f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80042f2:	f8cd 9018 	str.w	r9, [sp, #24]
 80042f6:	eb03 0209 	add.w	r2, r3, r9
 80042fa:	2107      	movs	r1, #7
 80042fc:	2301      	movs	r3, #1
 80042fe:	4608      	mov	r0, r1
 8004300:	e9cd 9207 	strd	r9, r2, [sp, #28]
 8004304:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004308:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800430c:	e9cd 3300 	strd	r3, r3, [sp]
 8004310:	4622      	mov	r2, r4
 8004312:	f000 f98d 	bl	8004630 <VL53LX_init_histogram_multizone_config_structure>
		VL53LX_copy_hist_cfg_to_static_cfg(
 8004316:	463b      	mov	r3, r7
 8004318:	4632      	mov	r2, r6
 800431a:	9500      	str	r5, [sp, #0]
 800431c:	4659      	mov	r1, fp
 800431e:	4640      	mov	r0, r8
 8004320:	f7ff fe48 	bl	8003fb4 <VL53LX_copy_hist_cfg_to_static_cfg>
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8004324:	4a10      	ldr	r2, [pc, #64]	; (8004368 <VL53LX_preset_mode_histogram_short_range+0xc8>)
 8004326:	4b11      	ldr	r3, [pc, #68]	; (800436c <VL53LX_preset_mode_histogram_short_range+0xcc>)
 8004328:	e9c7 2300 	strd	r2, r3, [r7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 800432c:	f240 5344 	movw	r3, #1348	; 0x544
 8004330:	813b      	strh	r3, [r7, #8]
		pgeneral->cal_config__vcsel_start = 0x03;
 8004332:	2303      	movs	r3, #3
 8004334:	70f3      	strb	r3, [r6, #3]
		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8004336:	23f5      	movs	r3, #245	; 0xf5
 8004338:	71f3      	strb	r3, [r6, #7]
		pdynamic->sd_config__woi_sd0 = 0x03;
 800433a:	f240 5303 	movw	r3, #1283	; 0x503
 800433e:	812b      	strh	r3, [r5, #8]
		pdynamic->sd_config__initial_phase_sd0            =
 8004340:	9b17      	ldr	r3, [sp, #92]	; 0x5c
		psystem->system__mode_start =
 8004342:	9a16      	ldr	r2, [sp, #88]	; 0x58
		pdynamic->sd_config__initial_phase_sd0            =
 8004344:	7b9b      	ldrb	r3, [r3, #14]
 8004346:	72ab      	strb	r3, [r5, #10]
		pdynamic->sd_config__initial_phase_sd1            =
 8004348:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800434a:	7c5b      	ldrb	r3, [r3, #17]
 800434c:	72eb      	strb	r3, [r5, #11]
		phistpostprocess->valid_phase_low = 0x08;
 800434e:	f642 0308 	movw	r3, #10248	; 0x2808
 8004352:	f8aa 3020 	strh.w	r3, [sl, #32]
		pdynamic->system__sequence_config =
 8004356:	23bb      	movs	r3, #187	; 0xbb
 8004358:	746b      	strb	r3, [r5, #17]
		psystem->system__mode_start =
 800435a:	2326      	movs	r3, #38	; 0x26
 800435c:	7113      	strb	r3, [r2, #4]
}
 800435e:	4620      	mov	r0, r4
 8004360:	b00b      	add	sp, #44	; 0x2c
 8004362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004366:	bf00      	nop
 8004368:	37005200 	.word	0x37005200
 800436c:	00036600 	.word	0x00036600

08004370 <VL53LX_copy_hist_bins_to_static_cfg>:
{


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
 8004370:	7bc3      	ldrb	r3, [r0, #15]
{
 8004372:	b510      	push	{r4, lr}
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8004374:	748b      	strb	r3, [r1, #18]
			phistogram->histogram_config__high_amb_even_bin_0_1;
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8004376:	7c03      	ldrb	r3, [r0, #16]
 8004378:	74cb      	strb	r3, [r1, #19]
			phistogram->histogram_config__high_amb_even_bin_2_3;
	pstatic->sigma_estimator__sigma_ref_mm =
 800437a:	7c43      	ldrb	r3, [r0, #17]
 800437c:	750b      	strb	r3, [r1, #20]
			phistogram->histogram_config__high_amb_even_bin_4_5;

	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800437e:	7c83      	ldrb	r3, [r0, #18]
 8004380:	754b      	strb	r3, [r1, #21]
			phistogram->histogram_config__high_amb_odd_bin_0_1;

	pstatic->spare_host_config__static_config_spare_0 =
 8004382:	7cc3      	ldrb	r3, [r0, #19]
 8004384:	758b      	strb	r3, [r1, #22]
			phistogram->histogram_config__high_amb_odd_bin_2_3;
	pstatic->spare_host_config__static_config_spare_1 =
 8004386:	7d03      	ldrb	r3, [r0, #20]
 8004388:	75cb      	strb	r3, [r1, #23]
			phistogram->histogram_config__high_amb_odd_bin_4_5;

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800438a:	79c4      	ldrb	r4, [r0, #7]
				<< 8)
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800438c:	7a03      	ldrb	r3, [r0, #8]
 800438e:	eb03 2304 	add.w	r3, r3, r4, lsl #8
	pstatic->algo__range_ignore_threshold_mcps =
 8004392:	830b      	strh	r3, [r1, #24]

	pstatic->algo__range_ignore_valid_height_mm =
 8004394:	7a43      	ldrb	r3, [r0, #9]
 8004396:	768b      	strb	r3, [r1, #26]
			phistogram->histogram_config__mid_amb_even_bin_4_5;
	pstatic->algo__range_min_clip =
 8004398:	7a83      	ldrb	r3, [r0, #10]
 800439a:	76cb      	strb	r3, [r1, #27]
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
	pstatic->algo__consistency_check__tolerance =
 800439c:	7ac3      	ldrb	r3, [r0, #11]
 800439e:	770b      	strb	r3, [r1, #28]
			phistogram->histogram_config__mid_amb_odd_bin_2;

	pstatic->spare_host_config__static_config_spare_2 =
 80043a0:	7b03      	ldrb	r3, [r0, #12]
 80043a2:	774b      	strb	r3, [r1, #29]
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
	pstatic->sd_config__reset_stages_msb =
 80043a4:	7b43      	ldrb	r3, [r0, #13]
 80043a6:	778b      	strb	r3, [r1, #30]
			phistogram->histogram_config__mid_amb_odd_bin_5;

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 80043a8:	7841      	ldrb	r1, [r0, #1]
				<< 8)
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 80043aa:	7883      	ldrb	r3, [r0, #2]
 80043ac:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	ptiming->range_config__sigma_thresh =
 80043b0:	8153      	strh	r3, [r2, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 80043b2:	78c1      	ldrb	r1, [r0, #3]
				<< 8)
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 80043b4:	7903      	ldrb	r3, [r0, #4]
 80043b6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80043ba:	8193      	strh	r3, [r2, #12]

	ptiming->range_config__valid_phase_low =
 80043bc:	7943      	ldrb	r3, [r0, #5]
 80043be:	7393      	strb	r3, [r2, #14]
			phistogram->histogram_config__low_amb_odd_bin_2_3;
	ptiming->range_config__valid_phase_high =
 80043c0:	7983      	ldrb	r3, [r0, #6]
 80043c2:	73d3      	strb	r3, [r2, #15]
			phistogram->histogram_config__low_amb_odd_bin_4_5;

	LOG_FUNCTION_END(0);

}
 80043c4:	bd10      	pop	{r4, pc}

080043c6 <VL53LX_init_version>:
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	pdev->version.ll_major    = VL53LX_LL_API_IMPLEMENTATION_VER_MAJOR;
	pdev->version.ll_minor    = VL53LX_LL_API_IMPLEMENTATION_VER_MINOR;
	pdev->version.ll_build    = VL53LX_LL_API_IMPLEMENTATION_VER_SUB;
	pdev->version.ll_revision = VL53LX_LL_API_IMPLEMENTATION_VER_REVISION;
 80043c6:	2300      	movs	r3, #0
 80043c8:	6243      	str	r3, [r0, #36]	; 0x24
	pdev->version.ll_major    = VL53LX_LL_API_IMPLEMENTATION_VER_MAJOR;
 80043ca:	f240 1301 	movw	r3, #257	; 0x101
 80043ce:	8503      	strh	r3, [r0, #40]	; 0x28
	pdev->version.ll_build    = VL53LX_LL_API_IMPLEMENTATION_VER_SUB;
 80043d0:	2301      	movs	r3, #1
 80043d2:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
}
 80043d6:	4770      	bx	lr

080043d8 <VL53LX_init_ll_driver_state>:

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);

	pstate->cfg_device_state  = device_state;
	pstate->cfg_stream_count  = 0;
 80043d8:	2300      	movs	r3, #0
	pstate->cfg_gph_id        = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80043da:	2202      	movs	r2, #2
	pstate->cfg_device_state  = device_state;
 80043dc:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
	pstate->cfg_stream_count  = 0;
 80043e0:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	pstate->cfg_gph_id        = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80043e4:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
	pstate->cfg_timing_status = 0;
 80043e8:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
	pstate->cfg_zone_id       = 0;
 80043ec:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32

	pstate->rd_device_state   = device_state;
 80043f0:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
	pstate->rd_stream_count   = 0;
 80043f4:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
	pstate->rd_gph_id         = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80043f8:	f880 2037 	strb.w	r2, [r0, #55]	; 0x37
	pstate->rd_timing_status  = 0;
 80043fc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	pstate->rd_zone_id        = 0;
 8004400:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

}
 8004404:	4770      	bx	lr

08004406 <VL53LX_check_ll_driver_rd_state>:
}


VL53LX_Error VL53LX_check_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 8004406:	b570      	push	{r4, r5, r6, lr}
	device_stream_count = psys_results->result__stream_count;



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 8004408:	f890 339c 	ldrb.w	r3, [r0, #924]	; 0x39c
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) ==
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 800440c:	f890 139e 	ldrb.w	r1, [r0, #926]	; 0x39e
{
 8004410:	4602      	mov	r2, r0
		VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;

	if (histogram_mode)
 8004412:	f013 0002 	ands.w	r0, r3, #2
		device_gph_id = (phist_data->result__interrupt_status &
			VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8004416:	bf18      	it	ne
 8004418:	f892 1474 	ldrbne.w	r1, [r2, #1140]	; 0x474



	if (!((pdev->sys_ctrl.system__mode_start &
 800441c:	f013 0320 	ands.w	r3, r3, #32
			VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8004420:	ea4f 1121 	mov.w	r1, r1, asr #4
		device_gph_id = (phist_data->result__interrupt_status &
 8004424:	f001 0102 	and.w	r1, r1, #2
	if (!((pdev->sys_ctrl.system__mode_start &
 8004428:	d03a      	beq.n	80044a0 <VL53LX_check_ll_driver_rd_state+0x9a>
		VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 800442a:	f892 4033 	ldrb.w	r4, [r2, #51]	; 0x33
			psys_results->result__range_status &
 800442e:	f892 339f 	ldrb.w	r3, [r2, #927]	; 0x39f
	if (pstate->rd_device_state ==
 8004432:	2c06      	cmp	r4, #6
 8004434:	d108      	bne.n	8004448 <VL53LX_check_ll_driver_rd_state+0x42>
		VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 8004436:	bb98      	cbnz	r0, 80044a0 <VL53LX_check_ll_driver_rd_state+0x9a>
			if (device_range_status !=
 8004438:	f003 031f 	and.w	r3, r3, #31
 800443c:	2b12      	cmp	r3, #18
			VL53LX_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 800443e:	bf0c      	ite	eq
 8004440:	2000      	moveq	r0, #0
 8004442:	f06f 0010 	mvnne.w	r0, #16


ENDFUNC:
	LOG_FUNCTION_END(status);
	return status;
}
 8004446:	bd70      	pop	{r4, r5, r6, pc}
	device_stream_count = psys_results->result__stream_count;
 8004448:	f892 43a1 	ldrb.w	r4, [r2, #929]	; 0x3a1
		if (pstate->rd_stream_count != device_stream_count)
 800444c:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8004450:	42a3      	cmp	r3, r4
		if (pstate->rd_gph_id != device_gph_id)
 8004452:	f892 3037 	ldrb.w	r3, [r2, #55]	; 0x37
			status = VL53LX_ERROR_STREAM_COUNT_CHECK_FAIL;
 8004456:	bf14      	ite	ne
 8004458:	f06f 0011 	mvnne.w	r0, #17
 800445c:	2000      	moveq	r0, #0
		if (pstate->rd_gph_id != device_gph_id)
 800445e:	428b      	cmp	r3, r1
 8004460:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 8004464:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004468:	eb02 0343 	add.w	r3, r2, r3, lsl #1
		expected_gph_id =
 800446c:	f242 2583 	movw	r5, #8835	; 0x2283
		expected_stream_count =
 8004470:	f242 2682 	movw	r6, #8834	; 0x2282
		expected_gph_id =
 8004474:	5d5d      	ldrb	r5, [r3, r5]
		if (expected_stream_count != device_stream_count) {
 8004476:	5d9b      	ldrb	r3, [r3, r6]
			status = VL53LX_ERROR_GPH_ID_CHECK_FAIL;
 8004478:	bf18      	it	ne
 800447a:	f06f 0012 	mvnne.w	r0, #18
		if (expected_stream_count != device_stream_count) {
 800447e:	42a3      	cmp	r3, r4
 8004480:	d006      	beq.n	8004490 <VL53LX_check_ll_driver_rd_state+0x8a>
			if (!((pdev->zone_cfg.active_zones == 0) &&
 8004482:	f892 30c3 	ldrb.w	r3, [r2, #195]	; 0xc3
 8004486:	b943      	cbnz	r3, 800449a <VL53LX_check_ll_driver_rd_state+0x94>
 8004488:	2cff      	cmp	r4, #255	; 0xff
				status =
 800448a:	bf18      	it	ne
 800448c:	f06f 0013 	mvnne.w	r0, #19
		if (expected_gph_id != device_gph_id)
 8004490:	42a9      	cmp	r1, r5
			status = VL53LX_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 8004492:	bf18      	it	ne
 8004494:	f06f 0014 	mvnne.w	r0, #20
 8004498:	e7d5      	b.n	8004446 <VL53LX_check_ll_driver_rd_state+0x40>
				status =
 800449a:	f06f 0013 	mvn.w	r0, #19
 800449e:	e7f7      	b.n	8004490 <VL53LX_check_ll_driver_rd_state+0x8a>
	VL53LX_Error         status = VL53LX_ERROR_NONE;
 80044a0:	2000      	movs	r0, #0
 80044a2:	e7d0      	b.n	8004446 <VL53LX_check_ll_driver_rd_state+0x40>

080044a4 <VL53LX_copy_rtn_good_spads_to_buffer>:
	VL53LX_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 80044a4:	7c03      	ldrb	r3, [r0, #16]
 80044a6:	700b      	strb	r3, [r1, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 80044a8:	7c43      	ldrb	r3, [r0, #17]
 80044aa:	704b      	strb	r3, [r1, #1]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 80044ac:	7c83      	ldrb	r3, [r0, #18]
 80044ae:	708b      	strb	r3, [r1, #2]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 80044b0:	7cc3      	ldrb	r3, [r0, #19]
 80044b2:	70cb      	strb	r3, [r1, #3]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 80044b4:	7d03      	ldrb	r3, [r0, #20]
 80044b6:	710b      	strb	r3, [r1, #4]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 80044b8:	7d43      	ldrb	r3, [r0, #21]
 80044ba:	714b      	strb	r3, [r1, #5]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 80044bc:	7d83      	ldrb	r3, [r0, #22]
 80044be:	718b      	strb	r3, [r1, #6]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 80044c0:	7dc3      	ldrb	r3, [r0, #23]
 80044c2:	71cb      	strb	r3, [r1, #7]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 80044c4:	7e03      	ldrb	r3, [r0, #24]
 80044c6:	720b      	strb	r3, [r1, #8]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 80044c8:	7e43      	ldrb	r3, [r0, #25]
 80044ca:	724b      	strb	r3, [r1, #9]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 80044cc:	7e83      	ldrb	r3, [r0, #26]
 80044ce:	728b      	strb	r3, [r1, #10]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 80044d0:	7ec3      	ldrb	r3, [r0, #27]
 80044d2:	72cb      	strb	r3, [r1, #11]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 80044d4:	7f03      	ldrb	r3, [r0, #28]
 80044d6:	730b      	strb	r3, [r1, #12]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 80044d8:	7f43      	ldrb	r3, [r0, #29]
 80044da:	734b      	strb	r3, [r1, #13]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 80044dc:	7f83      	ldrb	r3, [r0, #30]
 80044de:	738b      	strb	r3, [r1, #14]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 80044e0:	7fc3      	ldrb	r3, [r0, #31]
 80044e2:	73cb      	strb	r3, [r1, #15]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 80044e4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80044e8:	740b      	strb	r3, [r1, #16]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 80044ea:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80044ee:	744b      	strb	r3, [r1, #17]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 80044f0:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80044f4:	748b      	strb	r3, [r1, #18]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 80044f6:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 80044fa:	74cb      	strb	r3, [r1, #19]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 80044fc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8004500:	750b      	strb	r3, [r1, #20]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8004502:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8004506:	754b      	strb	r3, [r1, #21]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8004508:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 800450c:	758b      	strb	r3, [r1, #22]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800450e:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8004512:	75cb      	strb	r3, [r1, #23]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8004514:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8004518:	760b      	strb	r3, [r1, #24]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800451a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800451e:	764b      	strb	r3, [r1, #25]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8004520:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8004524:	768b      	strb	r3, [r1, #26]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8004526:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 800452a:	76cb      	strb	r3, [r1, #27]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800452c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004530:	770b      	strb	r3, [r1, #28]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8004532:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8004536:	774b      	strb	r3, [r1, #29]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8004538:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 800453c:	778b      	strb	r3, [r1, #30]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800453e:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8004542:	77cb      	strb	r3, [r1, #31]
}
 8004544:	4770      	bx	lr

08004546 <VL53LX_init_system_results>:
void VL53LX_init_system_results(
		VL53LX_system_results_t  *pdata)
{


	pdata->result__interrupt_status                       = 0xFF;
 8004546:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800454a:	8003      	strh	r3, [r0, #0]
	pdata->result__range_status                           = 0xFF;
	pdata->result__report_status                          = 0xFF;
 800454c:	8043      	strh	r3, [r0, #2]
	pdata->result__stream_count                           = 0xFF;

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 800454e:	8083      	strh	r3, [r0, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 8004550:	80c3      	strh	r3, [r0, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 8004552:	8103      	strh	r3, [r0, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 8004554:	8143      	strh	r3, [r0, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 8004556:	8183      	strh	r3, [r0, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 8004558:	81c3      	strh	r3, [r0, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800455a:	8203      	strh	r3, [r0, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 800455c:	8243      	strh	r3, [r0, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 800455e:	8283      	strh	r3, [r0, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 8004560:	82c3      	strh	r3, [r0, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 8004562:	8303      	strh	r3, [r0, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 8004564:	8343      	strh	r3, [r0, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 8004566:	8383      	strh	r3, [r0, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 8004568:	83c3      	strh	r3, [r0, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 800456a:	8403      	strh	r3, [r0, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 800456c:	8443      	strh	r3, [r0, #34]	; 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 800456e:	8483      	strh	r3, [r0, #36]	; 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 8004570:	84c3      	strh	r3, [r0, #38]	; 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 8004572:	8503      	strh	r3, [r0, #40]	; 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 8004574:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a

}
 8004578:	4770      	bx	lr

0800457a <V53L1_init_zone_results_structure>:


	uint8_t  z = 0;
	VL53LX_zone_objects_t *pobjects;

	pdata->max_zones    = VL53LX_MAX_USER_ZONES;
 800457a:	2310      	movs	r3, #16
{
 800457c:	b510      	push	{r4, lr}
	pdata->max_zones    = VL53LX_MAX_USER_ZONES;
 800457e:	700b      	strb	r3, [r1, #0]
	pdata->active_zones = active_zones;
 8004580:	7048      	strb	r0, [r1, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 8004582:	f501 6288 	add.w	r2, r1, #1088	; 0x440
		pobjects = &(pdata->VL53LX_p_003[z]);
		pobjects->cfg_device_state = VL53LX_DEVICESTATE_SW_STANDBY;
 8004586:	2303      	movs	r3, #3
		pobjects->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
		pobjects->max_objects      = VL53LX_MAX_RANGE_RESULTS;
 8004588:	2404      	movs	r4, #4
		pobjects->active_objects   = 0;
 800458a:	2000      	movs	r0, #0
		pobjects->cfg_device_state = VL53LX_DEVICESTATE_SW_STANDBY;
 800458c:	710b      	strb	r3, [r1, #4]
		pobjects->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 800458e:	714b      	strb	r3, [r1, #5]
		pobjects->max_objects      = VL53LX_MAX_RANGE_RESULTS;
 8004590:	720c      	strb	r4, [r1, #8]
		pobjects->active_objects   = 0;
 8004592:	7248      	strb	r0, [r1, #9]
	for (z = 0; z < pdata->max_zones; z++) {
 8004594:	3144      	adds	r1, #68	; 0x44
 8004596:	4291      	cmp	r1, r2
 8004598:	d1f8      	bne.n	800458c <V53L1_init_zone_results_structure+0x12>
	}
}
 800459a:	bd10      	pop	{r4, pc}

0800459c <VL53LX_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 800459c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 80045a0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 80045a4:	f89d e020 	ldrb.w	lr, [sp, #32]
 80045a8:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
{
 80045ac:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
 80045b0:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 80045b4:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
 80045b8:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 80045bc:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
{
 80045c0:	9c10      	ldr	r4, [sp, #64]	; 0x40
			(even_bin5 << 4) + even_bin4;
 80045c2:	eb0e 1e02 	add.w	lr, lr, r2, lsl #4
			(odd_bin1 << 4) + odd_bin0;
 80045c6:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 80045ca:	f884 a00b 	strb.w	sl, [r4, #11]
			(even_bin3 << 4) + even_bin2;
 80045ce:	b2db      	uxtb	r3, r3
			(odd_bin1 << 4) + odd_bin0;
 80045d0:	eb05 1502 	add.w	r5, r5, r2, lsl #4
			(odd_bin3 << 4) + odd_bin2;
 80045d4:	eb0a 170c 	add.w	r7, sl, ip, lsl #4
			(even_bin1 << 4) + even_bin0;
 80045d8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
			(odd_bin5 << 4) + odd_bin4;
 80045dc:	eb09 1608 	add.w	r6, r9, r8, lsl #4
			(even_bin1 << 4) + even_bin0;
 80045e0:	b2c9      	uxtb	r1, r1
			(even_bin5 << 4) + even_bin4;
 80045e2:	fa5f fe8e 	uxtb.w	lr, lr
			(odd_bin1 << 4) + odd_bin0;
 80045e6:	b2ed      	uxtb	r5, r5
	pdata->histogram_config__low_amb_even_bin_2_3  =
 80045e8:	70a3      	strb	r3, [r4, #2]
			(odd_bin3 << 4) + odd_bin2;
 80045ea:	b2ff      	uxtb	r7, r7
			(odd_bin5 << 4) + odd_bin4;
 80045ec:	b2f6      	uxtb	r6, r6
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 80045ee:	7223      	strb	r3, [r4, #8]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;

	pdata->histogram_config__user_bin_offset       = 0x00;
 80045f0:	2200      	movs	r2, #0

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
	pdata->histogram_config__high_amb_even_bin_2_3 =
 80045f2:	7423      	strb	r3, [r4, #16]
			(odd_bin4 << 4) + odd_bin3;
 80045f4:	eb0c 1c09 	add.w	ip, ip, r9, lsl #4
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 80045f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
	pdata->histogram_config__low_amb_even_bin_0_1  =
 80045fc:	7061      	strb	r1, [r4, #1]
	pdata->histogram_config__low_amb_even_bin_4_5  =
 80045fe:	f884 e003 	strb.w	lr, [r4, #3]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8004602:	7125      	strb	r5, [r4, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 8004604:	7167      	strb	r7, [r4, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 8004606:	71a6      	strb	r6, [r4, #6]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8004608:	71e1      	strb	r1, [r4, #7]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 800460a:	f884 e009 	strb.w	lr, [r4, #9]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 800460e:	72a5      	strb	r5, [r4, #10]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 8004610:	f884 c00c 	strb.w	ip, [r4, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 8004614:	f884 800d 	strb.w	r8, [r4, #13]
	pdata->histogram_config__user_bin_offset       = 0x00;
 8004618:	73a2      	strb	r2, [r4, #14]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800461a:	73e1      	strb	r1, [r4, #15]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800461c:	f884 e011 	strb.w	lr, [r4, #17]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 8004620:	74a5      	strb	r5, [r4, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 8004622:	74e7      	strb	r7, [r4, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 8004624:	7526      	strb	r6, [r4, #20]
	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8004626:	82e3      	strh	r3, [r4, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 8004628:	8323      	strh	r3, [r4, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800462a:	7022      	strb	r2, [r4, #0]

}
 800462c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004630 <VL53LX_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 8004630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004632:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8004634:	f89d c028 	ldrb.w	ip, [sp, #40]	; 0x28
 8004638:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 800463c:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
 8004640:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 8004644:	72e6      	strb	r6, [r4, #11]
			(even_bin3 << 4) + even_bin2;
 8004646:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800464a:	b2db      	uxtb	r3, r3
			(even_bin1 << 4) + even_bin0;
 800464c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8004650:	b2c9      	uxtb	r1, r1
	pdata->histogram_config__low_amb_even_bin_2_3  =
 8004652:	70a3      	strb	r3, [r4, #2]
		= pdata->histogram_config__low_amb_even_bin_2_3;
 8004654:	7163      	strb	r3, [r4, #5]
		= pdata->histogram_config__low_amb_even_bin_2_3;
 8004656:	7223      	strb	r3, [r4, #8]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 8004658:	eb0c 1305 	add.w	r3, ip, r5, lsl #4
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800465c:	7061      	strb	r1, [r4, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800465e:	7121      	strb	r1, [r4, #4]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8004660:	71e1      	strb	r1, [r4, #7]
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 8004662:	72a1      	strb	r1, [r4, #10]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 8004664:	7323      	strb	r3, [r4, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;

	pdata->histogram_config__user_bin_offset       = 0x00;

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 8004666:	f89d 1020 	ldrb.w	r1, [sp, #32]
 800466a:	f89d 301c 	ldrb.w	r3, [sp, #28]
			(even_bin5 << 4) + even_bin4;
 800466e:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8004672:	f89d 0014 	ldrb.w	r0, [sp, #20]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 8004676:	7367      	strb	r7, [r4, #13]
			(odd_bin1 << 4) + odd_bin0;
 8004678:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800467c:	b2db      	uxtb	r3, r3
			(even_bin5 << 4) + even_bin4;
 800467e:	eb00 1002 	add.w	r0, r0, r2, lsl #4
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 8004682:	eb06 160c 	add.w	r6, r6, ip, lsl #4
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 8004686:	eb05 1507 	add.w	r5, r5, r7, lsl #4
			(even_bin5 << 4) + even_bin4;
 800468a:	b2c0      	uxtb	r0, r0
	pdata->histogram_config__user_bin_offset       = 0x00;
 800468c:	2200      	movs	r2, #0
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800468e:	73e3      	strb	r3, [r4, #15]
			(odd_bin3 << 4) + odd_bin2;
 8004690:	b2f6      	uxtb	r6, r6
			(odd_bin5 << 4) + odd_bin4;
 8004692:	b2ed      	uxtb	r5, r5

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 8004694:	74a3      	strb	r3, [r4, #18]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8004696:	f64f 73ff 	movw	r3, #65535	; 0xffff
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800469a:	70e0      	strb	r0, [r4, #3]
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800469c:	71a0      	strb	r0, [r4, #6]
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800469e:	7260      	strb	r0, [r4, #9]
	pdata->histogram_config__user_bin_offset       = 0x00;
 80046a0:	73a2      	strb	r2, [r4, #14]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 80046a2:	7426      	strb	r6, [r4, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 80046a4:	7465      	strb	r5, [r4, #17]
		= pdata->histogram_config__high_amb_even_bin_2_3;
 80046a6:	74e6      	strb	r6, [r4, #19]
		= pdata->histogram_config__high_amb_even_bin_4_5;
 80046a8:	7525      	strb	r5, [r4, #20]
	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 80046aa:	82e3      	strh	r3, [r4, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 80046ac:	8323      	strh	r3, [r4, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 80046ae:	7022      	strb	r2, [r4, #0]
}
 80046b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046b2 <VL53LX_init_xtalk_bin_data_struct>:

void VL53LX_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53LX_p_021,
	VL53LX_xtalk_histogram_shape_t *pdata)
{
 80046b2:	b530      	push	{r4, r5, lr}



	uint16_t          i = 0;

	pdata->zone_id                   = 0;
 80046b4:	2300      	movs	r3, #0
	pdata->time_stamp                = 0;

	pdata->VL53LX_p_019                 = 0;
 80046b6:	f44f 6440 	mov.w	r4, #3072	; 0xc00
 80046ba:	8114      	strh	r4, [r2, #8]

	pdata->phasecal_result__reference_phase   = 0;
	pdata->phasecal_result__vcsel_start       = 0;
	pdata->cal_config__vcsel_start            = 0;

	pdata->vcsel_width                        = 0;
 80046bc:	e9c2 330f 	strd	r3, r3, [r2, #60]	; 0x3c
	pdata->zone_id                   = 0;
 80046c0:	7013      	strb	r3, [r2, #0]
	pdata->time_stamp                = 0;
 80046c2:	6053      	str	r3, [r2, #4]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 80046c4:	7291      	strb	r1, [r2, #10]
	pdata->VL53LX_p_015                = 0;

	pdata->zero_distance_phase                = 0;
 80046c6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44

	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
		if (i < VL53LX_p_021)
			pdata->bin_data[i] = bin_value;
		else
			pdata->bin_data[i] = 0;
 80046ca:	461c      	mov	r4, r3
 80046cc:	320c      	adds	r2, #12
		if (i < VL53LX_p_021)
 80046ce:	b29d      	uxth	r5, r3
 80046d0:	42a9      	cmp	r1, r5
			pdata->bin_data[i] = bin_value;
 80046d2:	f103 0301 	add.w	r3, r3, #1
 80046d6:	bf8c      	ite	hi
 80046d8:	6010      	strhi	r0, [r2, #0]
			pdata->bin_data[i] = 0;
 80046da:	6014      	strls	r4, [r2, #0]
	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 80046dc:	2b0c      	cmp	r3, #12
 80046de:	f102 0204 	add.w	r2, r2, #4
 80046e2:	d1f4      	bne.n	80046ce <VL53LX_init_xtalk_bin_data_struct+0x1c>
	}
}
 80046e4:	bd30      	pop	{r4, r5, pc}

080046e6 <VL53LX_i2c_encode_uint16_t>:
	uint16_t   i    = 0;
	uint16_t   VL53LX_p_003 = 0;

	VL53LX_p_003 =  ip_value;

	for (i = 0; i < count; i++) {
 80046e6:	4411      	add	r1, r2
 80046e8:	4291      	cmp	r1, r2
 80046ea:	d100      	bne.n	80046ee <VL53LX_i2c_encode_uint16_t+0x8>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
		VL53LX_p_003 = VL53LX_p_003 >> 8;
	}
}
 80046ec:	4770      	bx	lr
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 80046ee:	f801 0d01 	strb.w	r0, [r1, #-1]!
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 80046f2:	0a00      	lsrs	r0, r0, #8
	for (i = 0; i < count; i++) {
 80046f4:	e7f8      	b.n	80046e8 <VL53LX_i2c_encode_uint16_t+0x2>

080046f6 <VL53LX_i2c_decode_uint16_t>:
{


	uint16_t   value = 0x00;

	while (count-- > 0)
 80046f6:	180b      	adds	r3, r1, r0
	uint16_t   value = 0x00;
 80046f8:	2000      	movs	r0, #0
	while (count-- > 0)
 80046fa:	4299      	cmp	r1, r3
 80046fc:	d100      	bne.n	8004700 <VL53LX_i2c_decode_uint16_t+0xa>
		value = (value << 8) | (uint16_t)*pbuffer++;

	return value;
}
 80046fe:	4770      	bx	lr
		value = (value << 8) | (uint16_t)*pbuffer++;
 8004700:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004704:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8004708:	b280      	uxth	r0, r0
 800470a:	e7f6      	b.n	80046fa <VL53LX_i2c_decode_uint16_t+0x4>

0800470c <VL53LX_i2c_encode_int16_t>:
	uint16_t   i    = 0;
	int16_t    VL53LX_p_003 = 0;

	VL53LX_p_003 =  ip_value;

	for (i = 0; i < count; i++) {
 800470c:	4411      	add	r1, r2
 800470e:	4291      	cmp	r1, r2
 8004710:	d100      	bne.n	8004714 <VL53LX_i2c_encode_int16_t+0x8>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
		VL53LX_p_003 = VL53LX_p_003 >> 8;
	}
}
 8004712:	4770      	bx	lr
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8004714:	f801 0d01 	strb.w	r0, [r1, #-1]!
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 8004718:	1200      	asrs	r0, r0, #8
	for (i = 0; i < count; i++) {
 800471a:	e7f8      	b.n	800470e <VL53LX_i2c_encode_int16_t+0x2>

0800471c <VL53LX_i2c_decode_int16_t>:


	int16_t    value = 0x00;


	if (*pbuffer >= 0x80)
 800471c:	f991 3000 	ldrsb.w	r3, [r1]
 8004720:	17db      	asrs	r3, r3, #31
 8004722:	b21b      	sxth	r3, r3
 8004724:	4408      	add	r0, r1
		value = 0xFFFF;

	while (count-- > 0)
 8004726:	4281      	cmp	r1, r0
 8004728:	d101      	bne.n	800472e <VL53LX_i2c_decode_int16_t+0x12>
		value = (value << 8) | (int16_t)*pbuffer++;

	return value;
}
 800472a:	4618      	mov	r0, r3
 800472c:	4770      	bx	lr
		value = (value << 8) | (int16_t)*pbuffer++;
 800472e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004732:	b25b      	sxtb	r3, r3
 8004734:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8004738:	e7f5      	b.n	8004726 <VL53LX_i2c_decode_int16_t+0xa>

0800473a <VL53LX_i2c_encode_uint32_t>:
	uint16_t   i    = 0;
	uint32_t   VL53LX_p_003 = 0;

	VL53LX_p_003 =  ip_value;

	for (i = 0; i < count; i++) {
 800473a:	4411      	add	r1, r2
 800473c:	4291      	cmp	r1, r2
 800473e:	d100      	bne.n	8004742 <VL53LX_i2c_encode_uint32_t+0x8>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
		VL53LX_p_003 = VL53LX_p_003 >> 8;
	}
}
 8004740:	4770      	bx	lr
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8004742:	f801 0d01 	strb.w	r0, [r1, #-1]!
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 8004746:	0a00      	lsrs	r0, r0, #8
	for (i = 0; i < count; i++) {
 8004748:	e7f8      	b.n	800473c <VL53LX_i2c_encode_uint32_t+0x2>

0800474a <VL53LX_i2c_decode_uint32_t>:
{


	uint32_t   value = 0x00;

	while (count-- > 0)
 800474a:	180b      	adds	r3, r1, r0
	uint32_t   value = 0x00;
 800474c:	2000      	movs	r0, #0
	while (count-- > 0)
 800474e:	4299      	cmp	r1, r3
 8004750:	d100      	bne.n	8004754 <VL53LX_i2c_decode_uint32_t+0xa>
		value = (value << 8) | (uint32_t)*pbuffer++;

	return value;
}
 8004752:	4770      	bx	lr
		value = (value << 8) | (uint32_t)*pbuffer++;
 8004754:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004758:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 800475c:	e7f7      	b.n	800474e <VL53LX_i2c_decode_uint32_t+0x4>

0800475e <VL53LX_i2c_decode_int32_t>:


	int32_t    value = 0x00;


	if (*pbuffer >= 0x80)
 800475e:	f991 3000 	ldrsb.w	r3, [r1]
 8004762:	4408      	add	r0, r1
 8004764:	17db      	asrs	r3, r3, #31
		value = 0xFFFFFFFF;

	while (count-- > 0)
 8004766:	4281      	cmp	r1, r0
 8004768:	d101      	bne.n	800476e <VL53LX_i2c_decode_int32_t+0x10>
		value = (value << 8) | (int32_t)*pbuffer++;

	return value;
}
 800476a:	4618      	mov	r0, r3
 800476c:	4770      	bx	lr
		value = (value << 8) | (int32_t)*pbuffer++;
 800476e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004772:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8004776:	e7f6      	b.n	8004766 <VL53LX_i2c_decode_int32_t+0x8>

08004778 <VL53LX_set_firmware_enable_register>:


VL53LX_Error VL53LX_set_firmware_enable_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 8004778:	460a      	mov	r2, r1


	VL53LX_Error status         = VL53LX_ERROR_NONE;
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	pdev->sys_ctrl.firmware__enable = value;
 800477a:	f880 139a 	strb.w	r1, [r0, #922]	; 0x39a

	status = VL53LX_WrByte(
 800477e:	2185      	movs	r1, #133	; 0x85
 8004780:	f7fc bed6 	b.w	8001530 <VL53LX_WrByte>

08004784 <VL53LX_enable_firmware>:

	VL53LX_Error status       = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x01);
 8004784:	2101      	movs	r1, #1
 8004786:	f7ff bff7 	b.w	8004778 <VL53LX_set_firmware_enable_register>

0800478a <VL53LX_disable_firmware>:

	VL53LX_Error status       = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x00);
 800478a:	2100      	movs	r1, #0
 800478c:	f7ff bff4 	b.w	8004778 <VL53LX_set_firmware_enable_register>

08004790 <VL53LX_set_powerforce_register>:


VL53LX_Error VL53LX_set_powerforce_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 8004790:	460a      	mov	r2, r1


	VL53LX_Error status       = VL53LX_ERROR_NONE;
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	pdev->sys_ctrl.power_management__go1_power_force = value;
 8004792:	f880 1398 	strb.w	r1, [r0, #920]	; 0x398

	status = VL53LX_WrByte(
 8004796:	2183      	movs	r1, #131	; 0x83
 8004798:	f7fc beca 	b.w	8001530 <VL53LX_WrByte>

0800479c <VL53LX_enable_powerforce>:

	VL53LX_Error status       = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x01);
 800479c:	2101      	movs	r1, #1
 800479e:	f7ff bff7 	b.w	8004790 <VL53LX_set_powerforce_register>

080047a2 <VL53LX_disable_powerforce>:

	VL53LX_Error status       = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x00);
 80047a2:	2100      	movs	r1, #0
 80047a4:	f7ff bff4 	b.w	8004790 <VL53LX_set_powerforce_register>

080047a8 <VL53LX_calc_macro_period_us>:


uint32_t VL53LX_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53LX_p_005)
{
 80047a8:	b538      	push	{r3, r4, r5, lr}
 80047aa:	460d      	mov	r5, r1

	LOG_FUNCTION_START("");



	pll_period_us = VL53LX_calc_pll_period_us(fast_osc_frequency);
 80047ac:	f001 fa72 	bl	8005c94 <VL53LX_calc_pll_period_us>
 80047b0:	4604      	mov	r4, r0



	VL53LX_p_030 = VL53LX_decode_vcsel_period(VL53LX_p_005);
 80047b2:	4628      	mov	r0, r5
 80047b4:	f001 fbaa 	bl	8005f0c <VL53LX_decode_vcsel_period>



	macro_period_us =
 80047b8:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80047bc:	fb02 f304 	mul.w	r3, r2, r4
			(uint32_t)VL53LX_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 80047c0:	099b      	lsrs	r3, r3, #6

	macro_period_us = macro_period_us * (uint32_t)VL53LX_p_030;
 80047c2:	4358      	muls	r0, r3


	LOG_FUNCTION_END(0);

	return macro_period_us;
}
 80047c4:	0980      	lsrs	r0, r0, #6
 80047c6:	bd38      	pop	{r3, r4, r5, pc}

080047c8 <VL53LX_calc_range_ignore_threshold>:



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);

	if (x_gradient < 0)
 80047c8:	2900      	cmp	r1, #0
		x_gradient_int = x_gradient * -1;
 80047ca:	bfba      	itte	lt
 80047cc:	4249      	neglt	r1, r1
 80047ce:	b209      	sxthlt	r1, r1
	int16_t    x_gradient_int           = 0;
 80047d0:	2100      	movge	r1, #0

	if (y_gradient < 0)
 80047d2:	2a00      	cmp	r2, #0
		y_gradient_int = y_gradient * -1;
 80047d4:	bfba      	itte	lt
 80047d6:	4252      	neglt	r2, r2
 80047d8:	b212      	sxthlt	r2, r2
	int16_t    y_gradient_int           = 0;
 80047da:	2200      	movge	r2, #0





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 80047dc:	4411      	add	r1, r2
{
 80047de:	b510      	push	{r4, lr}
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 80047e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 80047e4:	0100      	lsls	r0, r0, #4
 80047e6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 80047ea:	0149      	lsls	r1, r1, #5
	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 80047ec:	fb90 f0f4 	sdiv	r0, r0, r4
	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 80047f0:	fb91 f1f2 	sdiv	r1, r1, r2

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);



	if (range_ignore_thresh_int > 0xFFFF)
 80047f4:	4a07      	ldr	r2, [pc, #28]	; (8004814 <VL53LX_calc_range_ignore_threshold+0x4c>)
	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 80047f6:	4408      	add	r0, r1
	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 80047f8:	4343      	muls	r3, r0
	if (range_ignore_thresh_int > 0xFFFF)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	dc07      	bgt.n	800480e <VL53LX_calc_range_ignore_threshold+0x46>
	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 80047fe:	f113 0010 	adds.w	r0, r3, #16
 8004802:	bf48      	it	mi
 8004804:	f103 002f 	addmi.w	r0, r3, #47	; 0x2f
 8004808:	1140      	asrs	r0, r0, #5


	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
}
 800480a:	b280      	uxth	r0, r0
 800480c:	bd10      	pop	{r4, pc}
 800480e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004812:	e7fa      	b.n	800480a <VL53LX_calc_range_ignore_threshold+0x42>
 8004814:	001fffef 	.word	0x001fffef

08004818 <VL53LX_calc_timeout_mclks>:

	uint32_t timeout_mclks   = 0;

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 8004818:	b121      	cbz	r1, 8004824 <VL53LX_calc_timeout_mclks+0xc>
		timeout_mclks = 0;
	else
		timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800481a:	084b      	lsrs	r3, r1, #1
 800481c:	eb03 3000 	add.w	r0, r3, r0, lsl #12
		timeout_mclks   =
 8004820:	fbb0 f1f1 	udiv	r1, r0, r1
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
}
 8004824:	4608      	mov	r0, r1
 8004826:	4770      	bx	lr

08004828 <VL53LX_calc_timeout_us>:
	uint64_t tmp            = 0;

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
	tmp += 0x00800;
 8004828:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800482c:	2300      	movs	r3, #0
 800482e:	fbe1 2300 	umlal	r2, r3, r1, r0
	tmp  = tmp >> 12;
 8004832:	0b10      	lsrs	r0, r2, #12


	LOG_FUNCTION_END(0);

	return timeout_us;
}
 8004834:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8004838:	4770      	bx	lr

0800483a <VL53LX_calc_crosstalk_plane_offset_with_margin>:
	uint32_t plane_offset_with_margin = 0;
	int32_t  plane_offset_kcps_temp   = 0;

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
 800483a:	4408      	add	r0, r1

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;

}
 800483c:	f380 0012 	usat	r0, #18, r0
 8004840:	4770      	bx	lr

08004842 <VL53LX_encode_timeout>:

	uint16_t encoded_timeout = 0;
	uint32_t ls_byte = 0;
	uint16_t ms_byte = 0;

	if (timeout_mclks > 0) {
 8004842:	b150      	cbz	r0, 800485a <VL53LX_encode_timeout+0x18>
		ls_byte = timeout_mclks - 1;
 8004844:	3801      	subs	r0, #1

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8004846:	2300      	movs	r3, #0
 8004848:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 800484c:	b29a      	uxth	r2, r3
 800484e:	f103 0301 	add.w	r3, r3, #1
 8004852:	d103      	bne.n	800485c <VL53LX_encode_timeout+0x1a>
			ls_byte = ls_byte >> 1;
			ms_byte++;
		}

		encoded_timeout = (ms_byte << 8)
 8004854:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8004858:	b280      	uxth	r0, r0
				+ (uint16_t) (ls_byte & 0x000000FF);
	}

	return encoded_timeout;
}
 800485a:	4770      	bx	lr
			ls_byte = ls_byte >> 1;
 800485c:	0840      	lsrs	r0, r0, #1
			ms_byte++;
 800485e:	e7f3      	b.n	8004848 <VL53LX_encode_timeout+0x6>

08004860 <VL53LX_calc_encoded_timeout>:
{
 8004860:	b508      	push	{r3, lr}
		VL53LX_calc_timeout_mclks(timeout_us, macro_period_us);
 8004862:	f7ff ffd9 	bl	8004818 <VL53LX_calc_timeout_mclks>
}
 8004866:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		VL53LX_encode_timeout(timeout_mclks);
 800486a:	f7ff bfea 	b.w	8004842 <VL53LX_encode_timeout>

0800486e <VL53LX_decode_timeout>:
{


	uint32_t timeout_macro_clks = 0;

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800486e:	b2c3      	uxtb	r3, r0
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8004870:	0a00      	lsrs	r0, r0, #8
 8004872:	fa03 f000 	lsl.w	r0, r3, r0

	return timeout_macro_clks;
}
 8004876:	3001      	adds	r0, #1
 8004878:	4770      	bx	lr

0800487a <VL53LX_calc_decoded_timeout_us>:
{
 800487a:	b508      	push	{r3, lr}
		VL53LX_decode_timeout(timeout_encoded);
 800487c:	f7ff fff7 	bl	800486e <VL53LX_decode_timeout>
	tmp += 0x00800;
 8004880:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004884:	2300      	movs	r3, #0
 8004886:	fbe0 2301 	umlal	r2, r3, r0, r1
	tmp  = tmp >> 12;
 800488a:	0b10      	lsrs	r0, r2, #12
}
 800488c:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8004890:	bd08      	pop	{r3, pc}

08004892 <VL53LX_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53LX_general_config_t *pgeneral,
	VL53LX_timing_config_t  *ptiming)
{
 8004892:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004896:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004898:	4680      	mov	r8, r0
 800489a:	460f      	mov	r7, r1
 800489c:	4616      	mov	r6, r2
	uint32_t timeout_mclks      = 0;
	uint16_t timeout_encoded    = 0;

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800489e:	461d      	mov	r5, r3
 80048a0:	b37b      	cbz	r3, 8004902 <VL53LX_calc_timeout_register_values+0x70>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
	} else {

		macro_period_us =
				VL53LX_calc_macro_period_us(
 80048a2:	4618      	mov	r0, r3
 80048a4:	79a1      	ldrb	r1, [r4, #6]
 80048a6:	f7ff ff7f 	bl	80047a8 <VL53LX_calc_macro_period_us>
 80048aa:	4601      	mov	r1, r0
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53LX_calc_timeout_mclks(
 80048ac:	9001      	str	r0, [sp, #4]
 80048ae:	4640      	mov	r0, r8
 80048b0:	f7ff ffb2 	bl	8004818 <VL53LX_calc_timeout_mclks>

		if (timeout_mclks > 0xFF)
			timeout_mclks = 0xFF;

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 80048b4:	9b08      	ldr	r3, [sp, #32]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 80048b6:	9901      	ldr	r1, [sp, #4]
				(uint8_t)timeout_mclks;
 80048b8:	28ff      	cmp	r0, #255	; 0xff
 80048ba:	bf28      	it	cs
 80048bc:	20ff      	movcs	r0, #255	; 0xff
 80048be:	71d8      	strb	r0, [r3, #7]
			VL53LX_calc_encoded_timeout(
 80048c0:	4638      	mov	r0, r7
 80048c2:	f7ff ffcd 	bl	8004860 <VL53LX_calc_encoded_timeout>
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
 80048c6:	ba40      	rev16	r0, r0
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 80048c8:	9901      	ldr	r1, [sp, #4]
		ptiming->mm_config__timeout_macrop_a_hi =
 80048ca:	8020      	strh	r0, [r4, #0]
			VL53LX_calc_encoded_timeout(
 80048cc:	4630      	mov	r0, r6
 80048ce:	f7ff ffc7 	bl	8004860 <VL53LX_calc_encoded_timeout>
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
 80048d2:	ba40      	rev16	r0, r0
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);


		macro_period_us =
				VL53LX_calc_macro_period_us(
 80048d4:	7a61      	ldrb	r1, [r4, #9]
		ptiming->range_config__timeout_macrop_a_hi =
 80048d6:	80a0      	strh	r0, [r4, #4]
				VL53LX_calc_macro_period_us(
 80048d8:	4628      	mov	r0, r5
 80048da:	f7ff ff65 	bl	80047a8 <VL53LX_calc_macro_period_us>
 80048de:	4601      	mov	r1, r0
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53LX_calc_encoded_timeout(
 80048e0:	9001      	str	r0, [sp, #4]
 80048e2:	4638      	mov	r0, r7
 80048e4:	f7ff ffbc 	bl	8004860 <VL53LX_calc_encoded_timeout>
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
 80048e8:	ba40      	rev16	r0, r0
 80048ea:	8060      	strh	r0, [r4, #2]
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);


		timeout_encoded = VL53LX_calc_encoded_timeout(
 80048ec:	9901      	ldr	r1, [sp, #4]
 80048ee:	4630      	mov	r0, r6
 80048f0:	f7ff ffb6 	bl	8004860 <VL53LX_calc_encoded_timeout>
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80048f4:	0a03      	lsrs	r3, r0, #8
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80048f6:	7220      	strb	r0, [r4, #8]
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80048f8:	71e3      	strb	r3, [r4, #7]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 80048fa:	2000      	movs	r0, #0

	LOG_FUNCTION_END(0);

	return status;

}
 80048fc:	b002      	add	sp, #8
 80048fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8004902:	f06f 000e 	mvn.w	r0, #14
 8004906:	e7f9      	b.n	80048fc <VL53LX_calc_timeout_register_values+0x6a>

08004908 <VL53LX_hist_copy_and_scale_ambient_info>:


VL53LX_Error  VL53LX_hist_copy_and_scale_ambient_info(
	VL53LX_zone_hist_info_t       *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 8004908:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
	int64_t  tmpo              = 0;

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 800490c:	8845      	ldrh	r5, [r0, #2]
{
 800490e:	460f      	mov	r7, r1
	if (pidata->result__dss_actual_effective_spads == 0) {
 8004910:	2d00      	cmp	r5, #0
 8004912:	d03c      	beq.n	800498e <VL53LX_hist_copy_and_scale_ambient_info+0x86>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 8004914:	7846      	ldrb	r6, [r0, #1]
 8004916:	2e00      	cmp	r6, #0
 8004918:	d037      	beq.n	800498a <VL53LX_hist_copy_and_scale_ambient_info+0x82>
 800491a:	f891 800b 	ldrb.w	r8, [r1, #11]
 800491e:	f1b8 0f00 	cmp.w	r8, #0
 8004922:	d132      	bne.n	800498a <VL53LX_hist_copy_and_scale_ambient_info+0x82>
			podata->number_of_ambient_bins == 0) {



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 8004924:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 8004928:	6882      	ldr	r2, [r0, #8]
			(int64_t)podata->result__dss_actual_effective_spads;
 800492a:	f8b7 a07c 	ldrh.w	sl, [r7, #124]	; 0x7c
			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 800492e:	3401      	adds	r4, #1
 8004930:	bf2c      	ite	cs
 8004932:	2101      	movcs	r1, #1
 8004934:	2100      	movcc	r1, #0
			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 8004936:	3201      	adds	r2, #1
			tmpi   *=
 8004938:	fba5 2302 	umull	r2, r3, r5, r2
			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 800493c:	bf2c      	ite	cs
 800493e:	f04f 0c01 	movcs.w	ip, #1
 8004942:	f04f 0c00 	movcc.w	ip, #0
			tmpi   *=
 8004946:	fb05 330c 	mla	r3, r5, ip, r3
			(int64_t)pidata->result__dss_actual_effective_spads;

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 800494a:	f8d0 c00c 	ldr.w	ip, [r0, #12]
			tmpo   *=
 800494e:	fbaa 4504 	umull	r4, r5, sl, r4
				(int64_t)pidata->ambient_events_sum;
 8004952:	4660      	mov	r0, ip
			tmpo   *=
 8004954:	fb0a 5501 	mla	r5, sl, r1, r5
				(int64_t)pidata->ambient_events_sum;
 8004958:	17c1      	asrs	r1, r0, #31
			evts  = tmpo *
 800495a:	4361      	muls	r1, r4
			evts += (tmpi/2);
 800495c:	0850      	lsrs	r0, r2, #1
			evts  = tmpo *
 800495e:	fb0c 1105 	mla	r1, ip, r5, r1
			evts += (tmpi/2);
 8004962:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
			evts  = tmpo *
 8004966:	fba4 450c 	umull	r4, r5, r4, ip
 800496a:	440d      	add	r5, r1


			if (tmpi != 0)
				evts = do_division_s(evts, tmpi);
 800496c:	1900      	adds	r0, r0, r4
			evts += (tmpi/2);
 800496e:	ea4f 0163 	mov.w	r1, r3, asr #1
				evts = do_division_s(evts, tmpi);
 8004972:	eb45 0101 	adc.w	r1, r5, r1
 8004976:	f7fc f91f 	bl	8000bb8 <__aeabi_ldivmod>

			podata->ambient_events_sum = (int32_t)evts;
 800497a:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0



			podata->VL53LX_p_028 =
				podata->ambient_events_sum;
			podata->VL53LX_p_028 +=
 800497e:	eb00 0056 	add.w	r0, r0, r6, lsr #1
				((int32_t)pidata->number_of_ambient_bins / 2);
			podata->VL53LX_p_028 /=
 8004982:	fb90 f6f6 	sdiv	r6, r0, r6
 8004986:	f8c7 60a4 	str.w	r6, [r7, #164]	; 0xa4
	VL53LX_Error status = VL53LX_ERROR_NONE;
 800498a:	2000      	movs	r0, #0
 800498c:	e001      	b.n	8004992 <VL53LX_hist_copy_and_scale_ambient_info+0x8a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800498e:	f06f 000e 	mvn.w	r0, #14
	}

	LOG_FUNCTION_END(0);

	return status;
}
 8004992:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

08004996 <VL53LX_hist_get_bin_sequence_config>:


void  VL53LX_hist_get_bin_sequence_config(
	VL53LX_DEV                     Dev,
	VL53LX_histogram_bin_data_t   *pdata)
{
 8004996:	b530      	push	{r4, r5, lr}
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 8004998:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 800499c:	f8b0 3332 	ldrh.w	r3, [r0, #818]	; 0x332
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 80049a0:	f8b0 4334 	ldrh.w	r4, [r0, #820]	; 0x334
 80049a4:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 80049a8:	07ed      	lsls	r5, r5, #31
	amb_thresh_low  = 1024 *
 80049aa:	ea4f 2383 	mov.w	r3, r3, lsl #10
	amb_thresh_high = 1024 *
 80049ae:	ea4f 2484 	mov.w	r4, r4, lsl #10
	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 80049b2:	d45b      	bmi.n	8004a6c <VL53LX_hist_get_bin_sequence_config+0xd6>

		pdata->bin_seq[5] =
 80049b4:	f890 5325 	ldrb.w	r5, [r0, #805]	; 0x325
 80049b8:	092d      	lsrs	r5, r5, #4
 80049ba:	744d      	strb	r5, [r1, #17]
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 80049bc:	f890 5325 	ldrb.w	r5, [r0, #805]	; 0x325
 80049c0:	f005 050f 	and.w	r5, r5, #15
		pdata->bin_seq[4] =
 80049c4:	740d      	strb	r5, [r1, #16]
		pdata->bin_seq[3] =
 80049c6:	f890 5324 	ldrb.w	r5, [r0, #804]	; 0x324
 80049ca:	092d      	lsrs	r5, r5, #4
 80049cc:	73cd      	strb	r5, [r1, #15]
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 80049ce:	f890 5324 	ldrb.w	r5, [r0, #804]	; 0x324
 80049d2:	f005 050f 	and.w	r5, r5, #15
		pdata->bin_seq[2] =
 80049d6:	738d      	strb	r5, [r1, #14]
		pdata->bin_seq[1] =
 80049d8:	f890 5323 	ldrb.w	r5, [r0, #803]	; 0x323
 80049dc:	092d      	lsrs	r5, r5, #4
 80049de:	734d      	strb	r5, [r1, #13]
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 80049e0:	f890 5323 	ldrb.w	r5, [r0, #803]	; 0x323

		if (pdata->ambient_events_sum > amb_thresh_high) {
 80049e4:	42a2      	cmp	r2, r4
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 80049e6:	f005 050f 	and.w	r5, r5, #15
		pdata->bin_seq[0] =
 80049ea:	730d      	strb	r5, [r1, #12]
		if (pdata->ambient_events_sum > amb_thresh_high) {
 80049ec:	dd1a      	ble.n	8004a24 <VL53LX_hist_get_bin_sequence_config+0x8e>
			pdata->bin_seq[5] =
 80049ee:	f890 432d 	ldrb.w	r4, [r0, #813]	; 0x32d
 80049f2:	0924      	lsrs	r4, r4, #4
 80049f4:	744c      	strb	r4, [r1, #17]
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
			& 0x0F;
 80049f6:	f890 432d 	ldrb.w	r4, [r0, #813]	; 0x32d
 80049fa:	f004 040f 	and.w	r4, r4, #15
			pdata->bin_seq[4] =
 80049fe:	740c      	strb	r4, [r1, #16]
			pdata->bin_seq[3] =
 8004a00:	f890 432c 	ldrb.w	r4, [r0, #812]	; 0x32c
 8004a04:	0924      	lsrs	r4, r4, #4
 8004a06:	73cc      	strb	r4, [r1, #15]
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
			& 0x0F;
 8004a08:	f890 432c 	ldrb.w	r4, [r0, #812]	; 0x32c
 8004a0c:	f004 040f 	and.w	r4, r4, #15
			pdata->bin_seq[2] =
 8004a10:	738c      	strb	r4, [r1, #14]
			pdata->bin_seq[1] =
 8004a12:	f890 432b 	ldrb.w	r4, [r0, #811]	; 0x32b
 8004a16:	0924      	lsrs	r4, r4, #4
 8004a18:	734c      	strb	r4, [r1, #13]
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
			& 0x0F;
 8004a1a:	f890 432b 	ldrb.w	r4, [r0, #811]	; 0x32b
 8004a1e:	f004 040f 	and.w	r4, r4, #15
			pdata->bin_seq[0] =
 8004a22:	730c      	strb	r4, [r1, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8004a24:	429a      	cmp	r2, r3
 8004a26:	da1a      	bge.n	8004a5e <VL53LX_hist_get_bin_sequence_config+0xc8>
			pdata->bin_seq[5] =
 8004a28:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
 8004a2c:	091b      	lsrs	r3, r3, #4
 8004a2e:	744b      	strb	r3, [r1, #17]
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
			& 0x0F;
 8004a30:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
 8004a34:	f003 030f 	and.w	r3, r3, #15
			pdata->bin_seq[4] =
 8004a38:	740b      	strb	r3, [r1, #16]
			pdata->bin_seq[3] =
 8004a3a:	f890 331e 	ldrb.w	r3, [r0, #798]	; 0x31e
 8004a3e:	091b      	lsrs	r3, r3, #4
 8004a40:	73cb      	strb	r3, [r1, #15]
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
			& 0x0F;
 8004a42:	f890 331e 	ldrb.w	r3, [r0, #798]	; 0x31e
 8004a46:	f003 030f 	and.w	r3, r3, #15
			pdata->bin_seq[2] =
 8004a4a:	738b      	strb	r3, [r1, #14]
			pdata->bin_seq[1] =
 8004a4c:	f890 331d 	ldrb.w	r3, [r0, #797]	; 0x31d
 8004a50:	091b      	lsrs	r3, r3, #4
 8004a52:	734b      	strb	r3, [r1, #13]
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
			& 0x0F;
 8004a54:	f890 331d 	ldrb.w	r3, [r0, #797]	; 0x31d
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
			& 0x0F;
 8004a58:	f003 030f 	and.w	r3, r3, #15
			pdata->bin_seq[0] =
 8004a5c:	730b      	strb	r3, [r1, #12]
	}



	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
		pdata->bin_rep[i] = 1;
 8004a5e:	f240 1301 	movw	r3, #257	; 0x101
 8004a62:	824b      	strh	r3, [r1, #18]
 8004a64:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 8004a68:	614b      	str	r3, [r1, #20]

	LOG_FUNCTION_END(0);

}
 8004a6a:	bd30      	pop	{r4, r5, pc}
			& 0x0F;
 8004a6c:	f890 5329 	ldrb.w	r5, [r0, #809]	; 0x329
 8004a70:	f005 050f 	and.w	r5, r5, #15
		pdata->bin_seq[5] =
 8004a74:	744d      	strb	r5, [r1, #17]
			& 0x0F;
 8004a76:	f890 5328 	ldrb.w	r5, [r0, #808]	; 0x328
 8004a7a:	f005 050f 	and.w	r5, r5, #15
		pdata->bin_seq[4] =
 8004a7e:	740d      	strb	r5, [r1, #16]
		pdata->bin_seq[3] =
 8004a80:	f890 5328 	ldrb.w	r5, [r0, #808]	; 0x328
 8004a84:	092d      	lsrs	r5, r5, #4
 8004a86:	73cd      	strb	r5, [r1, #15]
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 8004a88:	f890 5327 	ldrb.w	r5, [r0, #807]	; 0x327
 8004a8c:	f005 050f 	and.w	r5, r5, #15
		pdata->bin_seq[2] =
 8004a90:	738d      	strb	r5, [r1, #14]
		pdata->bin_seq[1] =
 8004a92:	f890 5326 	ldrb.w	r5, [r0, #806]	; 0x326
 8004a96:	092d      	lsrs	r5, r5, #4
 8004a98:	734d      	strb	r5, [r1, #13]
			& 0x0F;
 8004a9a:	f890 5326 	ldrb.w	r5, [r0, #806]	; 0x326
		if (pdata->ambient_events_sum > amb_thresh_high) {
 8004a9e:	42a2      	cmp	r2, r4
			& 0x0F;
 8004aa0:	f005 050f 	and.w	r5, r5, #15
		pdata->bin_seq[0] =
 8004aa4:	730d      	strb	r5, [r1, #12]
		if (pdata->ambient_events_sum > amb_thresh_high) {
 8004aa6:	dd1a      	ble.n	8004ade <VL53LX_hist_get_bin_sequence_config+0x148>
			pdata->bin_seq[5] =
 8004aa8:	f890 4330 	ldrb.w	r4, [r0, #816]	; 0x330
 8004aac:	0924      	lsrs	r4, r4, #4
 8004aae:	744c      	strb	r4, [r1, #17]
			& 0x0F;
 8004ab0:	f890 4330 	ldrb.w	r4, [r0, #816]	; 0x330
 8004ab4:	f004 040f 	and.w	r4, r4, #15
			pdata->bin_seq[4] =
 8004ab8:	740c      	strb	r4, [r1, #16]
			pdata->bin_seq[3] =
 8004aba:	f890 432f 	ldrb.w	r4, [r0, #815]	; 0x32f
 8004abe:	0924      	lsrs	r4, r4, #4
 8004ac0:	73cc      	strb	r4, [r1, #15]
			& 0x0F;
 8004ac2:	f890 432f 	ldrb.w	r4, [r0, #815]	; 0x32f
 8004ac6:	f004 040f 	and.w	r4, r4, #15
			pdata->bin_seq[2] =
 8004aca:	738c      	strb	r4, [r1, #14]
			pdata->bin_seq[1] =
 8004acc:	f890 432e 	ldrb.w	r4, [r0, #814]	; 0x32e
 8004ad0:	0924      	lsrs	r4, r4, #4
 8004ad2:	734c      	strb	r4, [r1, #13]
			& 0x0F;
 8004ad4:	f890 432e 	ldrb.w	r4, [r0, #814]	; 0x32e
 8004ad8:	f004 040f 	and.w	r4, r4, #15
			pdata->bin_seq[0] =
 8004adc:	730c      	strb	r4, [r1, #12]
		if (pdata->ambient_events_sum < amb_thresh_low) {
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	dabd      	bge.n	8004a5e <VL53LX_hist_get_bin_sequence_config+0xc8>
			pdata->bin_seq[5] =
 8004ae2:	f890 3322 	ldrb.w	r3, [r0, #802]	; 0x322
 8004ae6:	091b      	lsrs	r3, r3, #4
 8004ae8:	744b      	strb	r3, [r1, #17]
			& 0x0F;
 8004aea:	f890 3322 	ldrb.w	r3, [r0, #802]	; 0x322
 8004aee:	f003 030f 	and.w	r3, r3, #15
			pdata->bin_seq[4] =
 8004af2:	740b      	strb	r3, [r1, #16]
			pdata->bin_seq[3] =
 8004af4:	f890 3321 	ldrb.w	r3, [r0, #801]	; 0x321
 8004af8:	091b      	lsrs	r3, r3, #4
 8004afa:	73cb      	strb	r3, [r1, #15]
			& 0x0F;
 8004afc:	f890 3321 	ldrb.w	r3, [r0, #801]	; 0x321
 8004b00:	f003 030f 	and.w	r3, r3, #15
			pdata->bin_seq[2] =
 8004b04:	738b      	strb	r3, [r1, #14]
			pdata->bin_seq[1] =
 8004b06:	f890 3320 	ldrb.w	r3, [r0, #800]	; 0x320
 8004b0a:	091b      	lsrs	r3, r3, #4
 8004b0c:	734b      	strb	r3, [r1, #13]
			& 0x0F;
 8004b0e:	f890 3320 	ldrb.w	r3, [r0, #800]	; 0x320
 8004b12:	e7a1      	b.n	8004a58 <VL53LX_hist_get_bin_sequence_config+0xc2>

08004b14 <VL53LX_hist_events_consistency_check>:
	VL53LX_object_data_t        *prange_prev,
	VL53LX_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53LX_DeviceError          *prange_status)
{
 8004b14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b18:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8004b1c:	9101      	str	r1, [sp, #4]
 8004b1e:	4615      	mov	r5, r2
 8004b20:	461f      	mov	r7, r3
	int32_t   p_signal_events        = 0;
	uint32_t  noise_sq_sum           = 0;



	if (event_sigma == 0) {
 8004b22:	4606      	mov	r6, r0
 8004b24:	b930      	cbnz	r0, 8004b34 <VL53LX_hist_events_consistency_check+0x20>
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 8004b26:	2309      	movs	r3, #9
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;

	if (*pevents_delta > *pevents_tolerance &&
		prange_curr->VL53LX_p_004 > min_effective_spad_count)
		*prange_status = VL53LX_DEVICEERROR_EVENTCONSISTENCY;
 8004b28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c




	return status;
}
 8004b2a:	2000      	movs	r0, #0
		*prange_status = VL53LX_DEVICEERROR_EVENTCONSISTENCY;
 8004b2c:	7013      	strb	r3, [r2, #0]
}
 8004b2e:	b003      	add	sp, #12
 8004b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 8004b34:	f8d2 a008 	ldr.w	sl, [r2, #8]
	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 8004b38:	f8d8 2018 	ldr.w	r2, [r8, #24]
	tmpc *= (int64_t)prange_curr->VL53LX_p_004;
 8004b3c:	f8b8 0016 	ldrh.w	r0, [r8, #22]
	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 8004b40:	f11a 0a01 	adds.w	sl, sl, #1
 8004b44:	bf2c      	ite	cs
 8004b46:	2401      	movcs	r4, #1
 8004b48:	2400      	movcc	r4, #0
	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 8004b4a:	3201      	adds	r2, #1
	tmpc *= (int64_t)prange_curr->VL53LX_p_004;
 8004b4c:	fba0 2302 	umull	r2, r3, r0, r2
	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 8004b50:	bf2c      	ite	cs
 8004b52:	f04f 0c01 	movcs.w	ip, #1
 8004b56:	f04f 0c00 	movcc.w	ip, #0
	tmpc *= (int64_t)prange_curr->VL53LX_p_004;
 8004b5a:	fb00 330c 	mla	r3, r0, ip, r3
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 8004b5e:	8868      	ldrh	r0, [r5, #2]
 8004b60:	fba0 ab0a 	umull	sl, fp, r0, sl
 8004b64:	fb00 bb04 	mla	fp, r0, r4, fp
	events_scaler  = tmpp * 4096;
 8004b68:	ea4f 310b 	mov.w	r1, fp, lsl #12
	if (tmpc != 0) {
 8004b6c:	ea52 0403 	orrs.w	r4, r2, r3
	events_scaler  = tmpp * 4096;
 8004b70:	ea41 511a 	orr.w	r1, r1, sl, lsr #20
 8004b74:	ea4f 300a 	mov.w	r0, sl, lsl #12
	if (tmpc != 0) {
 8004b78:	d008      	beq.n	8004b8c <VL53LX_hist_events_consistency_check+0x78>
		events_scaler += (tmpc/2);
 8004b7a:	0855      	lsrs	r5, r2, #1
 8004b7c:	ea45 75c3 	orr.w	r5, r5, r3, lsl #31
 8004b80:	105c      	asrs	r4, r3, #1
		events_scaler  = do_division_s(events_scaler, tmpc);
 8004b82:	1828      	adds	r0, r5, r0
 8004b84:	eb44 0101 	adc.w	r1, r4, r1
 8004b88:	f7fc f816 	bl	8000bb8 <__aeabi_ldivmod>
	c_signal_events -= (int64_t)prange_curr->VL53LX_p_016;
 8004b8c:	e9d8 ec09 	ldrd	lr, ip, [r8, #36]	; 0x24
	events_scaler_sq  = events_scaler * events_scaler;
 8004b90:	fb00 f301 	mul.w	r3, r0, r1
 8004b94:	fba0 4500 	umull	r4, r5, r0, r0
	events_scaler_sq += 2048;
 8004b98:	f514 6200 	adds.w	r2, r4, #2048	; 0x800
	events_scaler_sq  = events_scaler * events_scaler;
 8004b9c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
	events_scaler_sq += 2048;
 8004ba0:	f145 0300 	adc.w	r3, r5, #0
	c_signal_events -= (int64_t)prange_curr->VL53LX_p_016;
 8004ba4:	ebbc 0a0e 	subs.w	sl, ip, lr
 8004ba8:	eb6c 0b0c 	sbc.w	fp, ip, ip
	c_signal_events *= (int64_t)events_scaler;
 8004bac:	fb00 f40b 	mul.w	r4, r0, fp
	events_scaler_sq /= 4096;
 8004bb0:	0b12      	lsrs	r2, r2, #12
 8004bb2:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
	c_signal_events *= (int64_t)events_scaler;
 8004bb6:	fb0a 4101 	mla	r1, sl, r1, r4
 8004bba:	fba0 ab0a 	umull	sl, fp, r0, sl
	events_scaler_sq /= 4096;
 8004bbe:	131b      	asrs	r3, r3, #12
	c_signal_events += 2048;
 8004bc0:	f51a 6900 	adds.w	r9, sl, #2048	; 0x800
	c_signal_events *= (int64_t)events_scaler;
 8004bc4:	448b      	add	fp, r1
	c_sig_noise_sq *= (int64_t)prange_curr->VL53LX_p_017;
 8004bc6:	fba2 010c 	umull	r0, r1, r2, ip
 8004bca:	fb0c 1103 	mla	r1, ip, r3, r1
	c_signal_events += 2048;
 8004bce:	f14b 0a00 	adc.w	sl, fp, #0
	c_sig_noise_sq += 2048;
 8004bd2:	f510 6400 	adds.w	r4, r0, #2048	; 0x800
 8004bd6:	f141 0500 	adc.w	r5, r1, #0
	c_amb_noise_sq *= (int64_t)prange_curr->VL53LX_p_016;
 8004bda:	fba2 010e 	umull	r0, r1, r2, lr
	c_amb_noise_sq += 2048;
 8004bde:	f510 6200 	adds.w	r2, r0, #2048	; 0x800
	c_amb_noise_sq *= (int64_t)prange_curr->VL53LX_p_016;
 8004be2:	fb0e 1103 	mla	r1, lr, r3, r1
	c_amb_noise_sq += 2048;
 8004be6:	f141 0300 	adc.w	r3, r1, #0
	c_amb_noise_sq /= 4096;
 8004bea:	0b10      	lsrs	r0, r2, #12
	p_amb_noise_sq  =
 8004bec:	683a      	ldr	r2, [r7, #0]
	c_amb_noise_sq /= 4096;
 8004bee:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
	c_amb_noise_sq += 2;
 8004bf2:	3002      	adds	r0, #2
	p_amb_noise_sq += 2;
 8004bf4:	3202      	adds	r2, #2
 8004bf6:	bf2c      	ite	cs
 8004bf8:	2301      	movcs	r3, #1
 8004bfa:	2300      	movcc	r3, #0
	p_amb_noise_sq /= 4;
 8004bfc:	0892      	lsrs	r2, r2, #2
 8004bfe:	ea42 7283 	orr.w	r2, r2, r3, lsl #30
		(uint32_t)c_sig_noise_sq +
 8004c02:	687b      	ldr	r3, [r7, #4]
	c_sig_noise_sq /= 4096;
 8004c04:	0b24      	lsrs	r4, r4, #12
		(uint32_t)c_sig_noise_sq +
 8004c06:	4413      	add	r3, r2
	c_sig_noise_sq /= 4096;
 8004c08:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
		(uint32_t)c_sig_noise_sq +
 8004c0c:	4423      	add	r3, r4
	noise_sq_sum =
 8004c0e:	eb03 0090 	add.w	r0, r3, r0, lsr #2
		(int32_t)VL53LX_isqrt(noise_sq_sum * 16);
 8004c12:	0100      	lsls	r0, r0, #4
 8004c14:	f001 f877 	bl	8005d06 <VL53LX_isqrt>
	*pevents_tolerance *= (int32_t)event_sigma;
 8004c18:	4370      	muls	r0, r6
	*pevents_tolerance /= 64;
 8004c1a:	f110 0320 	adds.w	r3, r0, #32
 8004c1e:	bf48      	it	mi
 8004c20:	f100 035f 	addmi.w	r3, r0, #95	; 0x5f
 8004c24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004c26:	119b      	asrs	r3, r3, #6
 8004c28:	6013      	str	r3, [r2, #0]
	p_signal_events -= (int32_t)prange_prev->VL53LX_p_016;
 8004c2a:	e9d7 1300 	ldrd	r1, r3, [r7]
	c_signal_events /= 4096;
 8004c2e:	464c      	mov	r4, r9
 8004c30:	2c00      	cmp	r4, #0
	p_signal_events -= (int32_t)prange_prev->VL53LX_p_016;
 8004c32:	eba3 0101 	sub.w	r1, r3, r1
	c_signal_events /= 4096;
 8004c36:	f17a 0300 	sbcs.w	r3, sl, #0
 8004c3a:	4655      	mov	r5, sl
 8004c3c:	da07      	bge.n	8004c4e <VL53LX_hist_events_consistency_check+0x13a>
 8004c3e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004c42:	eb19 0400 	adds.w	r4, r9, r0
 8004c46:	f04f 0000 	mov.w	r0, #0
 8004c4a:	eb40 0505 	adc.w	r5, r0, r5
 8004c4e:	0b22      	lsrs	r2, r4, #12
 8004c50:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
	if ((int32_t)c_signal_events > p_signal_events)
 8004c54:	4291      	cmp	r1, r2
			(int32_t)c_signal_events - p_signal_events;
 8004c56:	bfb4      	ite	lt
 8004c58:	1a51      	sublt	r1, r2, r1
			p_signal_events - (int32_t)c_signal_events;
 8004c5a:	1a89      	subge	r1, r1, r2
 8004c5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	if (*pevents_delta > *pevents_tolerance &&
 8004c5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c60:	6011      	str	r1, [r2, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	428a      	cmp	r2, r1
 8004c66:	f6bf af5e 	bge.w	8004b26 <VL53LX_hist_events_consistency_check+0x12>
 8004c6a:	f8b8 3016 	ldrh.w	r3, [r8, #22]
 8004c6e:	9a01      	ldr	r2, [sp, #4]
 8004c70:	4293      	cmp	r3, r2
 8004c72:	f67f af58 	bls.w	8004b26 <VL53LX_hist_events_consistency_check+0x12>
		*prange_status = VL53LX_DEVICEERROR_EVENTCONSISTENCY;
 8004c76:	2314      	movs	r3, #20
 8004c78:	e756      	b.n	8004b28 <VL53LX_hist_events_consistency_check+0x14>

08004c7a <VL53LX_hist_merged_pulse_check>:

VL53LX_Error  VL53LX_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53LX_range_data_t         *pdata,
	VL53LX_DeviceError          *prange_status)
{
 8004c7a:	b530      	push	{r4, r5, lr}


	VL53LX_Error  status   = VL53LX_ERROR_NONE;
	int16_t       delta_mm = 0;

	if (pdata->max_range_mm > pdata->min_range_mm)
 8004c7c:	f9b1 5048 	ldrsh.w	r5, [r1, #72]	; 0x48
 8004c80:	f9b1 4044 	ldrsh.w	r4, [r1, #68]	; 0x44
 8004c84:	f8b1 3044 	ldrh.w	r3, [r1, #68]	; 0x44
 8004c88:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 8004c8c:	42a5      	cmp	r5, r4
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 8004c8e:	bfcc      	ite	gt
 8004c90:	1acb      	subgt	r3, r1, r3
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 8004c92:	1a5b      	suble	r3, r3, r1

	if (min_max_tolerance_mm > 0 &&
 8004c94:	2800      	cmp	r0, #0
		delta_mm =
 8004c96:	b21b      	sxth	r3, r3
	if (min_max_tolerance_mm > 0 &&
 8004c98:	dd06      	ble.n	8004ca8 <VL53LX_hist_merged_pulse_check+0x2e>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 8004c9a:	4283      	cmp	r3, r0
 8004c9c:	bfd4      	ite	le
 8004c9e:	2009      	movle	r0, #9
 8004ca0:	2016      	movgt	r0, #22
 8004ca2:	7010      	strb	r0, [r2, #0]
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;

	return status;
}
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	bd30      	pop	{r4, r5, pc}
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 8004ca8:	2009      	movs	r0, #9
 8004caa:	e7fa      	b.n	8004ca2 <VL53LX_hist_merged_pulse_check+0x28>

08004cac <VL53LX_hist_phase_consistency_check>:
{
 8004cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb0:	ed2d 8b04 	vpush	{d8-d9}
 8004cb4:	461f      	mov	r7, r3
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
 8004cb6:	7853      	ldrb	r3, [r2, #1]
{
 8004cb8:	b08b      	sub	sp, #44	; 0x2c
	if (prange_prev->rd_device_state !=
 8004cba:	3b07      	subs	r3, #7
	int32_t   events_delta     = 0;
 8004cbc:	2500      	movs	r5, #0
	if (prange_prev->rd_device_state !=
 8004cbe:	2b01      	cmp	r3, #1
	int32_t   events_tolerance = 0;
 8004cc0:	e9cd 5508 	strd	r5, r5, [sp, #32]
{
 8004cc4:	ee09 1a10 	vmov	s18, r1
 8004cc8:	4616      	mov	r6, r2
	VL53LX_DeviceError  range_status = 0;
 8004cca:	f88d 501f 	strb.w	r5, [sp, #31]
	if (prange_prev->rd_device_state !=
 8004cce:	d86f      	bhi.n	8004db0 <VL53LX_hist_phase_consistency_check+0x104>
	phase_tolerance = (uint16_t)pht;
 8004cd0:	f890 326e 	ldrb.w	r3, [r0, #622]	; 0x26e
	if (phase_tolerance == 0)
 8004cd4:	021a      	lsls	r2, r3, #8
 8004cd6:	9204      	str	r2, [sp, #16]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d06b      	beq.n	8004db4 <VL53LX_hist_phase_consistency_check+0x108>
	event_sigma =
 8004cdc:	f890 326f 	ldrb.w	r3, [r0, #623]	; 0x26f
 8004ce0:	ee08 3a10 	vmov	s16, r3
	event_min_spad_count =
 8004ce4:	f8b0 3270 	ldrh.w	r3, [r0, #624]	; 0x270
 8004ce8:	ee08 3a90 	vmov	s17, r3
	min_max_tolerance =
 8004cec:	f8b0 3272 	ldrh.w	r3, [r0, #626]	; 0x272
 8004cf0:	9305      	str	r3, [sp, #20]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004cf2:	4628      	mov	r0, r5
				prange_prev->VL53LX_p_003[p].VL53LX_p_011) {
 8004cf4:	f04f 0a0c 	mov.w	sl, #12
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 8004cf8:	7cbb      	ldrb	r3, [r7, #18]
 8004cfa:	b2ec      	uxtb	r4, r5
 8004cfc:	42a3      	cmp	r3, r4
 8004cfe:	d804      	bhi.n	8004d0a <VL53LX_hist_phase_consistency_check+0x5e>
}
 8004d00:	b00b      	add	sp, #44	; 0x2c
 8004d02:	ecbd 8b04 	vpop	{d8-d9}
 8004d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8004d0a:	234c      	movs	r3, #76	; 0x4c
 8004d0c:	fb03 7304 	mla	r3, r3, r4, r7
 8004d10:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8004d14:	2b09      	cmp	r3, #9
 8004d16:	d001      	beq.n	8004d1c <VL53LX_hist_phase_consistency_check+0x70>
 8004d18:	2b13      	cmp	r3, #19
 8004d1a:	d113      	bne.n	8004d44 <VL53LX_hist_phase_consistency_check+0x98>
		if (prange_prev->active_objects == 0)
 8004d1c:	7973      	ldrb	r3, [r6, #5]
 8004d1e:	224c      	movs	r2, #76	; 0x4c
 8004d20:	4354      	muls	r4, r2
			prange_curr->VL53LX_p_003[lc].range_status =
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	eb07 0804 	add.w	r8, r7, r4
 8004d28:	bf0c      	ite	eq
 8004d2a:	2317      	moveq	r3, #23
 8004d2c:	2307      	movne	r3, #7
					VL53LX_hist_events_consistency_check(
 8004d2e:	3414      	adds	r4, #20
 8004d30:	f888 305e 	strb.w	r3, [r8, #94]	; 0x5e
 8004d34:	443c      	add	r4, r7
 8004d36:	f04f 0900 	mov.w	r9, #0
		for (p = 0; p < prange_prev->active_objects; p++) {
 8004d3a:	7972      	ldrb	r2, [r6, #5]
 8004d3c:	fa5f f389 	uxtb.w	r3, r9
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d801      	bhi.n	8004d48 <VL53LX_hist_phase_consistency_check+0x9c>
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 8004d44:	3501      	adds	r5, #1
 8004d46:	e7d7      	b.n	8004cf8 <VL53LX_hist_phase_consistency_check+0x4c>
				prange_prev->VL53LX_p_003[p].VL53LX_p_011) {
 8004d48:	fb0a 6203 	mla	r2, sl, r3, r6
			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 8004d4c:	f8b8 1054 	ldrh.w	r1, [r8, #84]	; 0x54
				prange_prev->VL53LX_p_003[p].VL53LX_p_011) {
 8004d50:	8a12      	ldrh	r2, [r2, #16]
			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 8004d52:	4291      	cmp	r1, r2
				phase_delta =
 8004d54:	bf8c      	ite	hi
 8004d56:	1a8a      	subhi	r2, r1, r2
				phase_delta =
 8004d58:	1a52      	subls	r2, r2, r1
			if (phase_delta < phase_tolerance) {
 8004d5a:	9904      	ldr	r1, [sp, #16]
				phase_delta =
 8004d5c:	b292      	uxth	r2, r2
			if (phase_delta < phase_tolerance) {
 8004d5e:	428a      	cmp	r2, r1
 8004d60:	d223      	bcs.n	8004daa <VL53LX_hist_phase_consistency_check+0xfe>
				if (status == VL53LX_ERROR_NONE)
 8004d62:	b9f0      	cbnz	r0, 8004da2 <VL53LX_hist_phase_consistency_check+0xf6>
					VL53LX_hist_events_consistency_check(
 8004d64:	aa08      	add	r2, sp, #32
 8004d66:	fb0a 6303 	mla	r3, sl, r3, r6
 8004d6a:	f10d 0b1f 	add.w	fp, sp, #31
 8004d6e:	9202      	str	r2, [sp, #8]
 8004d70:	aa09      	add	r2, sp, #36	; 0x24
 8004d72:	e9cd 4200 	strd	r4, r2, [sp]
 8004d76:	ee18 1a90 	vmov	r1, s17
 8004d7a:	ee19 2a10 	vmov	r2, s18
 8004d7e:	ee18 0a10 	vmov	r0, s16
 8004d82:	f8cd b00c 	str.w	fp, [sp, #12]
 8004d86:	3308      	adds	r3, #8
 8004d88:	f7ff fec4 	bl	8004b14 <VL53LX_hist_events_consistency_check>
				if (status == VL53LX_ERROR_NONE &&
 8004d8c:	b948      	cbnz	r0, 8004da2 <VL53LX_hist_phase_consistency_check+0xf6>
 8004d8e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8004d92:	2b09      	cmp	r3, #9
 8004d94:	d105      	bne.n	8004da2 <VL53LX_hist_phase_consistency_check+0xf6>
					VL53LX_hist_merged_pulse_check(
 8004d96:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 8004d9a:	465a      	mov	r2, fp
 8004d9c:	4621      	mov	r1, r4
 8004d9e:	f7ff ff6c 	bl	8004c7a <VL53LX_hist_merged_pulse_check>
				prange_curr->VL53LX_p_003[lc].range_status =
 8004da2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8004da6:	f888 305e 	strb.w	r3, [r8, #94]	; 0x5e
		for (p = 0; p < prange_prev->active_objects; p++) {
 8004daa:	f109 0901 	add.w	r9, r9, #1
 8004dae:	e7c4      	b.n	8004d3a <VL53LX_hist_phase_consistency_check+0x8e>
		return status;
 8004db0:	4628      	mov	r0, r5
 8004db2:	e7a5      	b.n	8004d00 <VL53LX_hist_phase_consistency_check+0x54>
 8004db4:	9804      	ldr	r0, [sp, #16]
 8004db6:	e7a3      	b.n	8004d00 <VL53LX_hist_phase_consistency_check+0x54>

08004db8 <VL53LX_hist_xmonitor_consistency_check>:
VL53LX_Error  VL53LX_hist_xmonitor_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_data_t         *prange_curr)
{
 8004db8:	b570      	push	{r4, r5, r6, lr}
 8004dba:	4605      	mov	r5, r0

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
	min_spad_count =
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8004dbc:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
{
 8004dc0:	b086      	sub	sp, #24
	int32_t   events_delta     = 0;
 8004dc2:	2400      	movs	r4, #0
	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8004dc4:	2809      	cmp	r0, #9
	int32_t   events_tolerance = 0;
 8004dc6:	e9cd 4404 	strd	r4, r4, [sp, #16]
{
 8004dca:	460e      	mov	r6, r1
	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8004dcc:	d002      	beq.n	8004dd4 <VL53LX_hist_xmonitor_consistency_check+0x1c>
 8004dce:	3813      	subs	r0, #19
 8004dd0:	2801      	cmp	r0, #1
 8004dd2:	d81b      	bhi.n	8004e0c <VL53LX_hist_xmonitor_consistency_check+0x54>
		prange_curr->range_status ==
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 8004dd4:	f892 0042 	ldrb.w	r0, [r2, #66]	; 0x42
 8004dd8:	2809      	cmp	r0, #9
 8004dda:	d002      	beq.n	8004de2 <VL53LX_hist_xmonitor_consistency_check+0x2a>
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8004ddc:	3813      	subs	r0, #19
 8004dde:	2801      	cmp	r0, #1
 8004de0:	d814      	bhi.n	8004e0c <VL53LX_hist_xmonitor_consistency_check+0x54>
			prange_prev->xmonitor.range_status ==
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 8004de2:	461c      	mov	r4, r3
	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 8004de4:	f895 0288 	ldrb.w	r0, [r5, #648]	; 0x288
	min_spad_count =
 8004de8:	f8b5 1270 	ldrh.w	r1, [r5, #624]	; 0x270
			prange_curr->range_status =
 8004dec:	2509      	movs	r5, #9
 8004dee:	f804 5f4a 	strb.w	r5, [r4, #74]!
					VL53LX_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53LX_hist_events_consistency_check(
 8004df2:	9403      	str	r4, [sp, #12]
 8004df4:	ac04      	add	r4, sp, #16
 8004df6:	9402      	str	r4, [sp, #8]
 8004df8:	ac05      	add	r4, sp, #20
 8004dfa:	e9cd 3400 	strd	r3, r4, [sp]
 8004dfe:	f102 0338 	add.w	r3, r2, #56	; 0x38
 8004e02:	4632      	mov	r2, r6
 8004e04:	f7ff fe86 	bl	8004b14 <VL53LX_hist_events_consistency_check>

		}
	}

	return status;
}
 8004e08:	b006      	add	sp, #24
 8004e0a:	bd70      	pop	{r4, r5, r6, pc}
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004e0c:	2000      	movs	r0, #0
 8004e0e:	e7fb      	b.n	8004e08 <VL53LX_hist_xmonitor_consistency_check+0x50>

08004e10 <VL53LX_hist_wrap_dmax>:

VL53LX_Error  VL53LX_hist_wrap_dmax(
	VL53LX_hist_post_process_config_t  *phistpostprocess,
	VL53LX_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 8004e10:	b538      	push	{r3, r4, r5, lr}
	uint32_t  wrap_dmax_phase      = 0;
	uint32_t  range_mm             = 0;

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 8004e12:	2300      	movs	r3, #0
 8004e14:	8013      	strh	r3, [r2, #0]
{
 8004e16:	4605      	mov	r5, r0


	if (pcurrent->VL53LX_p_015 != 0) {
 8004e18:	f8b1 0086 	ldrh.w	r0, [r1, #134]	; 0x86
{
 8004e1c:	4614      	mov	r4, r2
	if (pcurrent->VL53LX_p_015 != 0) {
 8004e1e:	b148      	cbz	r0, 8004e34 <VL53LX_hist_wrap_dmax+0x24>



		pll_period_mm =
			VL53LX_calc_pll_period_mm(
 8004e20:	f000 ffda 	bl	8005dd8 <VL53LX_calc_pll_period_mm>
				pcurrent->VL53LX_p_015);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 8004e24:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
		wrap_dmax_phase =
 8004e28:	021b      	lsls	r3, r3, #8



		range_mm = wrap_dmax_phase * pll_period_mm;
 8004e2a:	4358      	muls	r0, r3
		range_mm = (range_mm + (1<<14)) >> 15;
 8004e2c:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 8004e30:	0bc0      	lsrs	r0, r0, #15

		*pwrap_dmax_mm = (int16_t)range_mm;
 8004e32:	8020      	strh	r0, [r4, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004e34:	2000      	movs	r0, #0
 8004e36:	bd38      	pop	{r3, r4, r5, pc}

08004e38 <VL53LX_encode_row_col>:
	uint8_t  col,
	uint8_t *pspad_number)
{


	if (row > 7)
 8004e38:	2807      	cmp	r0, #7
		*pspad_number = 128 + (col << 3) + (15-row);
 8004e3a:	bf8b      	itete	hi
 8004e3c:	ebc0 00c1 	rsbhi	r0, r0, r1, lsl #3
	else
		*pspad_number = ((15-col) << 3) + row;
 8004e40:	f1c1 010f 	rsbls	r1, r1, #15
		*pspad_number = 128 + (col << 3) + (15-row);
 8004e44:	3871      	subhi	r0, #113	; 0x71
		*pspad_number = ((15-col) << 3) + row;
 8004e46:	eb00 00c1 	addls.w	r0, r0, r1, lsl #3
 8004e4a:	b2c0      	uxtb	r0, r0
 8004e4c:	7010      	strb	r0, [r2, #0]

}
 8004e4e:	4770      	bx	lr

08004e50 <VL53LX_encode_zone_size>:
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{


	*pencoded_xy_size = (height << 4) + width;
 8004e50:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8004e54:	7011      	strb	r1, [r2, #0]

}
 8004e56:	4770      	bx	lr

08004e58 <VL53LX_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 8004e58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e5a:	460c      	mov	r4, r1
 8004e5c:	4616      	mov	r6, r2
 8004e5e:	461d      	mov	r5, r3
	uint8_t width    = 0;
	uint8_t height   = 0;



	VL53LX_decode_row_col(
 8004e60:	f10d 0206 	add.w	r2, sp, #6
	uint8_t x_centre = 0;
 8004e64:	2300      	movs	r3, #0
	VL53LX_decode_row_col(
 8004e66:	f10d 0107 	add.w	r1, sp, #7
	uint8_t x_centre = 0;
 8004e6a:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t y_centre = 0;
 8004e6e:	f88d 3007 	strb.w	r3, [sp, #7]
	VL53LX_decode_row_col(
 8004e72:	f001 f8a9 	bl	8005fc8 <VL53LX_decode_row_col>
	*pheight = encoded_xy_size >> 4;
 8004e76:	0923      	lsrs	r3, r4, #4
	*pwidth  = encoded_xy_size & 0x0F;
 8004e78:	f004 010f 	and.w	r1, r4, #15
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 8004e7c:	f89d 4006 	ldrb.w	r4, [sp, #6]
 8004e80:	9a06      	ldr	r2, [sp, #24]
 8004e82:	1c48      	adds	r0, r1, #1
 8004e84:	eba4 0450 	sub.w	r4, r4, r0, lsr #1
 8004e88:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 8004e8c:	8030      	strh	r0, [r6, #0]
	if (*px_ll < 0)
		*px_ll = 0;

	*px_ur = *px_ll + (int16_t)width;
 8004e8e:	4408      	add	r0, r1
 8004e90:	b280      	uxth	r0, r0
 8004e92:	280f      	cmp	r0, #15
 8004e94:	bf28      	it	cs
 8004e96:	200f      	movcs	r0, #15
 8004e98:	8010      	strh	r0, [r2, #0]
	if (*px_ur > (VL53LX_SPAD_ARRAY_WIDTH-1))
		*px_ur = VL53LX_SPAD_ARRAY_WIDTH-1;

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 8004e9a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004e9e:	1c59      	adds	r1, r3, #1
 8004ea0:	eba2 0251 	sub.w	r2, r2, r1, lsr #1
 8004ea4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8004ea8:	802a      	strh	r2, [r5, #0]
	if (*py_ll < 0)
		*py_ll = 0;

	*py_ur = *py_ll + (int16_t)height;
 8004eaa:	441a      	add	r2, r3
 8004eac:	b292      	uxth	r2, r2
 8004eae:	9b07      	ldr	r3, [sp, #28]
 8004eb0:	2a0f      	cmp	r2, #15
 8004eb2:	bf28      	it	cs
 8004eb4:	220f      	movcs	r2, #15
 8004eb6:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53LX_SPAD_ARRAY_HEIGHT-1))
		*py_ur = VL53LX_SPAD_ARRAY_HEIGHT-1;
}
 8004eb8:	b002      	add	sp, #8
 8004eba:	bd70      	pop	{r4, r5, r6, pc}

08004ebc <VL53LX_is_aperture_location>:

	uint8_t is_aperture = 0;
	uint8_t mod_row     = row % 4;
	uint8_t mod_col     = col % 4;

	if (mod_row == 0 && mod_col == 2)
 8004ebc:	f010 0003 	ands.w	r0, r0, #3
	uint8_t mod_col     = col % 4;
 8004ec0:	f001 0103 	and.w	r1, r1, #3
	if (mod_row == 0 && mod_col == 2)
 8004ec4:	d103      	bne.n	8004ece <VL53LX_is_aperture_location+0x12>
	uint8_t is_aperture = 0;
 8004ec6:	1e8b      	subs	r3, r1, #2
 8004ec8:	4258      	negs	r0, r3
 8004eca:	4158      	adcs	r0, r3
 8004ecc:	4770      	bx	lr
		is_aperture = 1;

	if (mod_row == 2 && mod_col == 0)
 8004ece:	2802      	cmp	r0, #2
	uint8_t is_aperture = 0;
 8004ed0:	bf06      	itte	eq
 8004ed2:	fab1 f081 	clzeq	r0, r1
 8004ed6:	0940      	lsreq	r0, r0, #5
 8004ed8:	2000      	movne	r0, #0
		is_aperture = 1;

	return is_aperture;
}
 8004eda:	4770      	bx	lr

08004edc <VL53LX_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 8004edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee0:	b088      	sub	sp, #32
 8004ee2:	4698      	mov	r8, r3

	uint8_t   is_aperture = 0;



	VL53LX_decode_zone_limits(
 8004ee4:	f10d 031e 	add.w	r3, sp, #30
{
 8004ee8:	9e10      	ldr	r6, [sp, #64]	; 0x40
	VL53LX_decode_zone_limits(
 8004eea:	9301      	str	r3, [sp, #4]
 8004eec:	ab07      	add	r3, sp, #28
	int16_t   zone_x_ll = 0;
 8004eee:	2400      	movs	r4, #0
	VL53LX_decode_zone_limits(
 8004ef0:	9300      	str	r3, [sp, #0]
{
 8004ef2:	4617      	mov	r7, r2
	VL53LX_decode_zone_limits(
 8004ef4:	f10d 031a 	add.w	r3, sp, #26
 8004ef8:	aa06      	add	r2, sp, #24
	int16_t   zone_x_ll = 0;
 8004efa:	f8ad 4018 	strh.w	r4, [sp, #24]
	int16_t   zone_y_ll = 0;
 8004efe:	f8ad 401a 	strh.w	r4, [sp, #26]
	int16_t   zone_x_ur = 0;
 8004f02:	f8ad 401c 	strh.w	r4, [sp, #28]
	int16_t   zone_y_ur = 0;
 8004f06:	f8ad 401e 	strh.w	r4, [sp, #30]
	uint8_t   spad_number = 0;
 8004f0a:	f88d 4017 	strb.w	r4, [sp, #23]
	VL53LX_decode_zone_limits(
 8004f0e:	f7ff ffa3 	bl	8004e58 <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 8004f12:	8034      	strh	r4, [r6, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8004f14:	f9bd 401a 	ldrsh.w	r4, [sp, #26]
	*pbit_mask    = 0x01 << *pbit_index;
 8004f18:	f04f 0901 	mov.w	r9, #1
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8004f1c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8004f20:	42a3      	cmp	r3, r4
 8004f22:	da02      	bge.n	8004f2a <VL53LX_calc_max_effective_spads+0x4e>
					*pmax_effective_spads += 0x0100;

			}
		}
	}
}
 8004f24:	b008      	add	sp, #32
 8004f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8004f2a:	f9bd 5018 	ldrsh.w	r5, [sp, #24]
 8004f2e:	fa5f fa84 	uxtb.w	sl, r4
 8004f32:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8004f36:	42ab      	cmp	r3, r5
 8004f38:	da02      	bge.n	8004f40 <VL53LX_calc_max_effective_spads+0x64>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8004f3a:	3401      	adds	r4, #1
 8004f3c:	b224      	sxth	r4, r4
 8004f3e:	e7ed      	b.n	8004f1c <VL53LX_calc_max_effective_spads+0x40>
			VL53LX_encode_row_col(
 8004f40:	b2e9      	uxtb	r1, r5
 8004f42:	f10d 0217 	add.w	r2, sp, #23
 8004f46:	4650      	mov	r0, sl
 8004f48:	9103      	str	r1, [sp, #12]
 8004f4a:	f7ff ff75 	bl	8004e38 <VL53LX_encode_row_col>
			VL53LX_spad_number_to_byte_bit_index(
 8004f4e:	f89d 3017 	ldrb.w	r3, [sp, #23]
			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8004f52:	08da      	lsrs	r2, r3, #3
	*pbit_mask    = 0x01 << *pbit_index;
 8004f54:	f003 0307 	and.w	r3, r3, #7
			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8004f58:	5cba      	ldrb	r2, [r7, r2]
	*pbit_mask    = 0x01 << *pbit_index;
 8004f5a:	fa09 f303 	lsl.w	r3, r9, r3
			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8004f5e:	421a      	tst	r2, r3
 8004f60:	d007      	beq.n	8004f72 <VL53LX_calc_max_effective_spads+0x96>
				is_aperture = VL53LX_is_aperture_location(
 8004f62:	9903      	ldr	r1, [sp, #12]
 8004f64:	4650      	mov	r0, sl
 8004f66:	f7ff ffa9 	bl	8004ebc <VL53LX_is_aperture_location>
				if (is_aperture > 0)
 8004f6a:	8831      	ldrh	r1, [r6, #0]
 8004f6c:	b120      	cbz	r0, 8004f78 <VL53LX_calc_max_effective_spads+0x9c>
					*pmax_effective_spads +=
 8004f6e:	4441      	add	r1, r8
					*pmax_effective_spads += 0x0100;
 8004f70:	8031      	strh	r1, [r6, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8004f72:	3501      	adds	r5, #1
 8004f74:	b22d      	sxth	r5, r5
 8004f76:	e7dc      	b.n	8004f32 <VL53LX_calc_max_effective_spads+0x56>
					*pmax_effective_spads += 0x0100;
 8004f78:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8004f7c:	e7f8      	b.n	8004f70 <VL53LX_calc_max_effective_spads+0x94>

08004f7e <VL53LX_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 8004f7e:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
 8004f82:	b08a      	sub	sp, #40	; 0x28
 8004f84:	469a      	mov	sl, r3
	uint8_t   is_aperture = 0;
	uint16_t  spad_attenuation = 0;



	VL53LX_decode_zone_limits(
 8004f86:	f10d 031e 	add.w	r3, sp, #30
 8004f8a:	9301      	str	r3, [sp, #4]
 8004f8c:	ab07      	add	r3, sp, #28
	int16_t   mm_x_ll   = 0;
 8004f8e:	2400      	movs	r4, #0
{
 8004f90:	4615      	mov	r5, r2
	VL53LX_decode_zone_limits(
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	aa06      	add	r2, sp, #24
 8004f96:	f10d 031a 	add.w	r3, sp, #26
{
 8004f9a:	e9dd 7614 	ldrd	r7, r6, [sp, #80]	; 0x50
	int16_t   mm_x_ll   = 0;
 8004f9e:	f8ad 4018 	strh.w	r4, [sp, #24]
	int16_t   mm_y_ll   = 0;
 8004fa2:	f8ad 401a 	strh.w	r4, [sp, #26]
	int16_t   mm_x_ur   = 0;
 8004fa6:	f8ad 401c 	strh.w	r4, [sp, #28]
	int16_t   mm_y_ur   = 0;
 8004faa:	f8ad 401e 	strh.w	r4, [sp, #30]
	int16_t   zone_x_ll = 0;
 8004fae:	f8ad 4020 	strh.w	r4, [sp, #32]
	int16_t   zone_y_ll = 0;
 8004fb2:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
	int16_t   zone_x_ur = 0;
 8004fb6:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
	int16_t   zone_y_ur = 0;
 8004fba:	f8ad 4026 	strh.w	r4, [sp, #38]	; 0x26
	uint8_t   spad_number = 0;
 8004fbe:	f88d 4017 	strb.w	r4, [sp, #23]
{
 8004fc2:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
	VL53LX_decode_zone_limits(
 8004fc6:	f7ff ff47 	bl	8004e58 <VL53LX_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53LX_decode_zone_limits(
 8004fca:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8004fce:	9301      	str	r3, [sp, #4]
 8004fd0:	ab09      	add	r3, sp, #36	; 0x24
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	4651      	mov	r1, sl
 8004fd6:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8004fda:	aa08      	add	r2, sp, #32
 8004fdc:	4628      	mov	r0, r5
 8004fde:	f7ff ff3b 	bl	8004e58 <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 8004fe2:	803c      	strh	r4, [r7, #0]
	*pmm_outer_effective_spads = 0;
 8004fe4:	8034      	strh	r4, [r6, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8004fe6:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
	*pbit_mask    = 0x01 << *pbit_index;
 8004fea:	f04f 0a01 	mov.w	sl, #1
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8004fee:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8004ff2:	42a3      	cmp	r3, r4
 8004ff4:	da02      	bge.n	8004ffc <VL53LX_calc_mm_effective_spads+0x7e>
					*pmm_outer_effective_spads +=
						spad_attenuation;
			}
		}
	}
}
 8004ff6:	b00a      	add	sp, #40	; 0x28
 8004ff8:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8004ffc:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8005000:	fa5f fb84 	uxtb.w	fp, r4
 8005004:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8005008:	42ab      	cmp	r3, r5
 800500a:	da02      	bge.n	8005012 <VL53LX_calc_mm_effective_spads+0x94>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800500c:	3401      	adds	r4, #1
 800500e:	b224      	sxth	r4, r4
 8005010:	e7ed      	b.n	8004fee <VL53LX_calc_mm_effective_spads+0x70>
			VL53LX_encode_row_col(
 8005012:	b2e9      	uxtb	r1, r5
 8005014:	f10d 0217 	add.w	r2, sp, #23
 8005018:	4658      	mov	r0, fp
 800501a:	9103      	str	r1, [sp, #12]
 800501c:	f7ff ff0c 	bl	8004e38 <VL53LX_encode_row_col>
			VL53LX_spad_number_to_byte_bit_index(
 8005020:	f89d 3017 	ldrb.w	r3, [sp, #23]
			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8005024:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005026:	08da      	lsrs	r2, r3, #3
	*pbit_mask    = 0x01 << *pbit_index;
 8005028:	f003 0307 	and.w	r3, r3, #7
			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800502c:	5c8a      	ldrb	r2, [r1, r2]
	*pbit_mask    = 0x01 << *pbit_index;
 800502e:	fa0a f303 	lsl.w	r3, sl, r3
			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8005032:	421a      	tst	r2, r3
 8005034:	d01b      	beq.n	800506e <VL53LX_calc_mm_effective_spads+0xf0>
				is_aperture = VL53LX_is_aperture_location(
 8005036:	9903      	ldr	r1, [sp, #12]
 8005038:	4658      	mov	r0, fp
 800503a:	f7ff ff3f 	bl	8004ebc <VL53LX_is_aperture_location>
				if (x >= mm_x_ll && x <= mm_x_ur &&
 800503e:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
					spad_attenuation = 0x0100;
 8005042:	2800      	cmp	r0, #0
 8005044:	bf14      	ite	ne
 8005046:	464b      	movne	r3, r9
 8005048:	f44f 7380 	moveq.w	r3, #256	; 0x100
				if (x >= mm_x_ll && x <= mm_x_ur &&
 800504c:	42aa      	cmp	r2, r5
 800504e:	dc11      	bgt.n	8005074 <VL53LX_calc_mm_effective_spads+0xf6>
 8005050:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8005054:	42aa      	cmp	r2, r5
 8005056:	db0d      	blt.n	8005074 <VL53LX_calc_mm_effective_spads+0xf6>
 8005058:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 800505c:	42a2      	cmp	r2, r4
 800505e:	dc09      	bgt.n	8005074 <VL53LX_calc_mm_effective_spads+0xf6>
					y >= mm_y_ll && y <= mm_y_ur)
 8005060:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 8005064:	42a2      	cmp	r2, r4
 8005066:	db05      	blt.n	8005074 <VL53LX_calc_mm_effective_spads+0xf6>
					*pmm_inner_effective_spads +=
 8005068:	883a      	ldrh	r2, [r7, #0]
 800506a:	4413      	add	r3, r2
 800506c:	803b      	strh	r3, [r7, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800506e:	3501      	adds	r5, #1
 8005070:	b22d      	sxth	r5, r5
 8005072:	e7c7      	b.n	8005004 <VL53LX_calc_mm_effective_spads+0x86>
					*pmm_outer_effective_spads +=
 8005074:	8832      	ldrh	r2, [r6, #0]
 8005076:	4413      	add	r3, r2
 8005078:	8033      	strh	r3, [r6, #0]
 800507a:	e7f8      	b.n	800506e <VL53LX_calc_mm_effective_spads+0xf0>

0800507c <VL53LX_hist_combine_mm1_mm2_offsets>:
{
 800507c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005080:	b089      	sub	sp, #36	; 0x24
 8005082:	e9dd 7812 	ldrd	r7, r8, [sp, #72]	; 0x48
 8005086:	460d      	mov	r5, r1
 8005088:	4619      	mov	r1, r3
	uint16_t max_mm_inner_effective_spads = 0;
 800508a:	2300      	movs	r3, #0
{
 800508c:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
	uint16_t max_mm_inner_effective_spads = 0;
 8005090:	f8ad 3018 	strh.w	r3, [sp, #24]
	uint16_t max_mm_outer_effective_spads = 0;
 8005094:	f8ad 301a 	strh.w	r3, [sp, #26]
	uint16_t mm_inner_effective_spads     = 0;
 8005098:	f8ad 301c 	strh.w	r3, [sp, #28]
	uint16_t mm_outer_effective_spads     = 0;
 800509c:	f8ad 301e 	strh.w	r3, [sp, #30]
	VL53LX_calc_mm_effective_spads(
 80050a0:	f10d 031a 	add.w	r3, sp, #26
 80050a4:	9303      	str	r3, [sp, #12]
 80050a6:	ab06      	add	r3, sp, #24
 80050a8:	e9cd 9301 	strd	r9, r3, [sp, #4]
{
 80050ac:	4606      	mov	r6, r0
	VL53LX_calc_mm_effective_spads(
 80050ae:	f8cd 8000 	str.w	r8, [sp]
{
 80050b2:	4610      	mov	r0, r2
	VL53LX_calc_mm_effective_spads(
 80050b4:	23ff      	movs	r3, #255	; 0xff
 80050b6:	22c7      	movs	r2, #199	; 0xc7
 80050b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050bc:	f7ff ff5f 	bl	8004f7e <VL53LX_calc_mm_effective_spads>
	if ((max_mm_inner_effective_spads == 0) ||
 80050c0:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80050c4:	b384      	cbz	r4, 8005128 <VL53LX_hist_combine_mm1_mm2_offsets+0xac>
 80050c6:	f8bd 401a 	ldrh.w	r4, [sp, #26]
 80050ca:	b36c      	cbz	r4, 8005128 <VL53LX_hist_combine_mm1_mm2_offsets+0xac>
	VL53LX_calc_mm_effective_spads(
 80050cc:	f10d 031e 	add.w	r3, sp, #30
 80050d0:	9303      	str	r3, [sp, #12]
 80050d2:	ab07      	add	r3, sp, #28
 80050d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050d8:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80050dc:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80050e0:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80050e4:	f8cd 8000 	str.w	r8, [sp]
 80050e8:	f7ff ff49 	bl	8004f7e <VL53LX_calc_mm_effective_spads>
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 80050ec:	f8bd 201c 	ldrh.w	r2, [sp, #28]
	scaled_mm1_peak_rate_mcps  =
 80050f0:	88bb      	ldrh	r3, [r7, #4]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 80050f2:	f8bd 101e 	ldrh.w	r1, [sp, #30]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 80050f6:	4353      	muls	r3, r2
	scaled_mm2_peak_rate_mcps  =
 80050f8:	88fa      	ldrh	r2, [r7, #6]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 80050fa:	434a      	muls	r2, r1
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 80050fc:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8005100:	fbb3 f3f1 	udiv	r3, r3, r1
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 8005104:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8005108:	fbb2 f2f1 	udiv	r2, r2, r1
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 800510c:	fb02 f005 	mul.w	r0, r2, r5
 8005110:	fb03 0006 	mla	r0, r3, r6, r0
	if (tmp1 != 0)
 8005114:	189b      	adds	r3, r3, r2
 8005116:	d002      	beq.n	800511e <VL53LX_hist_combine_mm1_mm2_offsets+0xa2>
		tmp0 = (tmp0 * 4) / tmp1;
 8005118:	0080      	lsls	r0, r0, #2
 800511a:	fb90 f0f3 	sdiv	r0, r0, r3
	*prange_offset_mm = (int16_t)tmp0;
 800511e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005120:	8018      	strh	r0, [r3, #0]
}
 8005122:	b009      	add	sp, #36	; 0x24
 8005124:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	int32_t tmp0 = 0;
 8005128:	4620      	mov	r0, r4
 800512a:	e7f8      	b.n	800511e <VL53LX_hist_combine_mm1_mm2_offsets+0xa2>

0800512c <VL53LX_hist_copy_results_to_sys_and_core>:
void VL53LX_hist_copy_results_to_sys_and_core(
	VL53LX_histogram_bin_data_t      *pbins,
	VL53LX_range_results_t           *phist,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore)
{
 800512c:	b538      	push	{r3, r4, r5, lr}
 800512e:	4604      	mov	r4, r0

	LOG_FUNCTION_START("");



	VL53LX_init_system_results(psys);
 8005130:	4610      	mov	r0, r2
{
 8005132:	461d      	mov	r5, r3
	VL53LX_init_system_results(psys);
 8005134:	f7ff fa07 	bl	8004546 <VL53LX_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 8005138:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 800513c:	7013      	strb	r3, [r2, #0]
	psys->result__range_status     = phist->active_results;
 800513e:	7c8b      	ldrb	r3, [r1, #18]
 8005140:	7053      	strb	r3, [r2, #1]
	psys->result__report_status    = pbins->result__report_status;
 8005142:	f894 007a 	ldrb.w	r0, [r4, #122]	; 0x7a
 8005146:	7090      	strb	r0, [r2, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 8005148:	f894 007b 	ldrb.w	r0, [r4, #123]	; 0x7b
 800514c:	70d0      	strb	r0, [r2, #3]

	pdata = &(phist->VL53LX_p_003[0]);
 800514e:	3114      	adds	r1, #20

	for (i = 0; i < phist->active_results; i++) {
 8005150:	2400      	movs	r4, #0
 8005152:	42a3      	cmp	r3, r4
 8005154:	d100      	bne.n	8005158 <VL53LX_hist_copy_results_to_sys_and_core+0x2c>
		pdata++;
	}

	LOG_FUNCTION_END(0);

}
 8005156:	bd38      	pop	{r3, r4, r5, pc}
		switch (i) {
 8005158:	b12c      	cbz	r4, 8005166 <VL53LX_hist_copy_results_to_sys_and_core+0x3a>
 800515a:	2c01      	cmp	r4, #1
 800515c:	d01e      	beq.n	800519c <VL53LX_hist_copy_results_to_sys_and_core+0x70>
	for (i = 0; i < phist->active_results; i++) {
 800515e:	3401      	adds	r4, #1
		pdata++;
 8005160:	314c      	adds	r1, #76	; 0x4c
	for (i = 0; i < phist->active_results; i++) {
 8005162:	b2e4      	uxtb	r4, r4
 8005164:	e7f5      	b.n	8005152 <VL53LX_hist_copy_results_to_sys_and_core+0x26>
					pdata->VL53LX_p_004;
 8005166:	8ac8      	ldrh	r0, [r1, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 8005168:	8090      	strh	r0, [r2, #4]
					pdata->peak_signal_count_rate_mcps;
 800516a:	8e08      	ldrh	r0, [r1, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 800516c:	80d0      	strh	r0, [r2, #6]
					pdata->avg_signal_count_rate_mcps;
 800516e:	8e48      	ldrh	r0, [r1, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 8005170:	82d0      	strh	r0, [r2, #22]
					pdata->ambient_count_rate_mcps;
 8005172:	8e88      	ldrh	r0, [r1, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 8005174:	8110      	strh	r0, [r2, #8]
			psys->result__sigma_sd0 = pdata->VL53LX_p_002;
 8005176:	8f88      	ldrh	r0, [r1, #60]	; 0x3c
 8005178:	8150      	strh	r0, [r2, #10]
			psys->result__phase_sd0 = pdata->VL53LX_p_011;
 800517a:	f8b1 0040 	ldrh.w	r0, [r1, #64]	; 0x40
 800517e:	8190      	strh	r0, [r2, #12]
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 8005180:	f8b1 0046 	ldrh.w	r0, [r1, #70]	; 0x46
 8005184:	81d0      	strh	r0, [r2, #14]
			psys->result__phase_sd1  = pdata->zero_distance_phase;
 8005186:	8a88      	ldrh	r0, [r1, #20]
 8005188:	8410      	strh	r0, [r2, #32]
					pdata->VL53LX_p_017;
 800518a:	6a88      	ldr	r0, [r1, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 800518c:	6068      	str	r0, [r5, #4]
					pdata->VL53LX_p_010;
 800518e:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 8005190:	60a8      	str	r0, [r5, #8]
					pdata->total_periods_elapsed;
 8005192:	6988      	ldr	r0, [r1, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 8005194:	60e8      	str	r0, [r5, #12]
					pdata->VL53LX_p_016;
 8005196:	6a48      	ldr	r0, [r1, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 8005198:	6028      	str	r0, [r5, #0]
			break;
 800519a:	e7e0      	b.n	800515e <VL53LX_hist_copy_results_to_sys_and_core+0x32>
				pdata->VL53LX_p_004;
 800519c:	8ac8      	ldrh	r0, [r1, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 800519e:	8310      	strh	r0, [r2, #24]
				pdata->peak_signal_count_rate_mcps;
 80051a0:	8e08      	ldrh	r0, [r1, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 80051a2:	8350      	strh	r0, [r2, #26]
				pdata->ambient_count_rate_mcps;
 80051a4:	8e88      	ldrh	r0, [r1, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 80051a6:	8390      	strh	r0, [r2, #28]
			psys->result__sigma_sd1 = pdata->VL53LX_p_002;
 80051a8:	8f88      	ldrh	r0, [r1, #60]	; 0x3c
 80051aa:	83d0      	strh	r0, [r2, #30]
			psys->result__phase_sd1 = pdata->VL53LX_p_011;
 80051ac:	f8b1 0040 	ldrh.w	r0, [r1, #64]	; 0x40
 80051b0:	8410      	strh	r0, [r2, #32]
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 80051b2:	f8b1 0046 	ldrh.w	r0, [r1, #70]	; 0x46
 80051b6:	8450      	strh	r0, [r2, #34]	; 0x22
				pdata->VL53LX_p_017;
 80051b8:	6a88      	ldr	r0, [r1, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 80051ba:	6168      	str	r0, [r5, #20]
				pdata->VL53LX_p_010;
 80051bc:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 80051be:	61a8      	str	r0, [r5, #24]
				pdata->total_periods_elapsed;
 80051c0:	6988      	ldr	r0, [r1, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 80051c2:	61e8      	str	r0, [r5, #28]
				pdata->VL53LX_p_016;
 80051c4:	6a48      	ldr	r0, [r1, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 80051c6:	6128      	str	r0, [r5, #16]
			break;
 80051c8:	e7c9      	b.n	800515e <VL53LX_hist_copy_results_to_sys_and_core+0x32>

080051ca <VL53LX_save_cfg_data>:
	VL53LX_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id]);
 80051ca:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32

	pzone_dyn_cfg->expected_stream_count =
 80051ce:	f500 5203 	add.w	r2, r0, #8384	; 0x20c0
 80051d2:	3220      	adds	r2, #32
 80051d4:	210a      	movs	r1, #10
 80051d6:	fb01 2303 	mla	r3, r1, r3, r2
 80051da:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
 80051de:	f883 21a2 	strb.w	r2, [r3, #418]	; 0x1a2
			pdev->ll_state.cfg_stream_count;

	pzone_dyn_cfg->expected_gph_id =
 80051e2:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
 80051e6:	f883 21a3 	strb.w	r2, [r3, #419]	; 0x1a3
			pdev->ll_state.cfg_gph_id;

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 80051ea:	f890 2393 	ldrb.w	r2, [r0, #915]	; 0x393
 80051ee:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
		pdynamic->roi_config__user_roi_centre_spad;

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 80051f2:	f890 2394 	ldrb.w	r2, [r0, #916]	; 0x394
 80051f6:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
		pdynamic->roi_config__user_roi_requested_global_xy_size;

	LOG_FUNCTION_END(status);

	return status;
}
 80051fa:	2000      	movs	r0, #0
 80051fc:	4770      	bx	lr

080051fe <VL53LX_dynamic_zone_update>:


VL53LX_Error VL53LX_dynamic_zone_update(
	VL53LX_DEV  Dev,
	VL53LX_range_results_t *presults)
{
 80051fe:	b5f0      	push	{r4, r5, r6, r7, lr}
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 8005200:	f8b0 3336 	ldrh.w	r3, [r0, #822]	; 0x336
		pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count = 0;
 8005204:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 8005208:	f8b1 204a 	ldrh.w	r2, [r1, #74]	; 0x4a

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 800520c:	7c8f      	ldrb	r7, [r1, #18]
 800520e:	2400      	movs	r4, #0

		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53LX_p_003[i].total_rate_per_spad_mcps);

		if (presults->VL53LX_p_003[i].total_rate_per_spad_mcps >
 8005210:	314a      	adds	r1, #74	; 0x4a
 8005212:	f04f 0c4c 	mov.w	ip, #76	; 0x4c
	for (i = 1; i < presults->active_results; i++) {
 8005216:	3401      	adds	r4, #1
 8005218:	b2e6      	uxtb	r6, r4
 800521a:	42b7      	cmp	r7, r6
 800521c:	d810      	bhi.n	8005240 <VL53LX_dynamic_zone_update+0x42>
			max_total_rate_per_spads =
			presults->VL53LX_p_003[i].total_rate_per_spad_mcps;

	}

	if (max_total_rate_per_spads == 0) {
 800521e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005222:	b1a2      	cbz	r2, 800524e <VL53LX_dynamic_zone_update+0x50>

		temp = 0xFFFF;
	} else {

		temp = target_rate << 14;
 8005224:	039b      	lsls	r3, r3, #14
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 8005226:	fbb3 f3f2 	udiv	r3, r3, r2
 800522a:	428b      	cmp	r3, r1
 800522c:	bf28      	it	cs
 800522e:	460b      	movcs	r3, r1
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 8005230:	220a      	movs	r2, #10
 8005232:	f500 500a 	add.w	r0, r0, #8832	; 0x2280
 8005236:	fb02 0005 	mla	r0, r2, r5, r0
			(uint16_t)temp;
 800523a:	80c3      	strh	r3, [r0, #6]
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
}
 800523c:	2000      	movs	r0, #0
 800523e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (presults->VL53LX_p_003[i].total_rate_per_spad_mcps >
 8005240:	fb0c f604 	mul.w	r6, ip, r4
 8005244:	5b8e      	ldrh	r6, [r1, r6]
 8005246:	42b2      	cmp	r2, r6
 8005248:	bf38      	it	cc
 800524a:	4632      	movcc	r2, r6
	for (i = 1; i < presults->active_results; i++) {
 800524c:	e7e3      	b.n	8005216 <VL53LX_dynamic_zone_update+0x18>
		temp = 0xFFFF;
 800524e:	460b      	mov	r3, r1
 8005250:	e7ee      	b.n	8005230 <VL53LX_dynamic_zone_update+0x32>

08005252 <VL53LX_multizone_hist_bins_update>:

VL53LX_Error VL53LX_multizone_hist_bins_update(
	VL53LX_DEV  Dev)
{
 8005252:	b538      	push	{r3, r4, r5, lr}
 8005254:	4601      	mov	r1, r0
	VL53LX_Error status = VL53LX_ERROR_NONE;

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
	VL53LX_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
	VL53LX_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 8005256:	f500 7047 	add.w	r0, r0, #796	; 0x31c
	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800525a:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800525e:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 8005262:	440a      	add	r2, r1
	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 8005264:	f003 0301 	and.w	r3, r3, #1
	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 8005268:	f892 211e 	ldrb.w	r2, [r2, #286]	; 0x11e
 800526c:	2a01      	cmp	r2, #1
 800526e:	d114      	bne.n	800529a <VL53LX_multizone_hist_bins_update+0x48>
		VL53LX_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 8005270:	f891 50c5 	ldrb.w	r5, [r1, #197]	; 0xc5
 8005274:	f891 40c6 	ldrb.w	r4, [r1, #198]	; 0xc6
 8005278:	f891 20c7 	ldrb.w	r2, [r1, #199]	; 0xc7
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
			VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800527c:	b9fb      	cbnz	r3, 80052be <VL53LX_multizone_hist_bins_update+0x6c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800527e:	f881 531d 	strb.w	r5, [r1, #797]	; 0x31d
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 8005282:	f881 431e 	strb.w	r4, [r1, #798]	; 0x31e
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 8005286:	f881 231f 	strb.w	r2, [r1, #799]	; 0x31f
	}



	if (status == VL53LX_ERROR_NONE) {
		VL53LX_copy_hist_bins_to_static_cfg(
 800528a:	f501 725b 	add.w	r2, r1, #876	; 0x36c
 800528e:	f201 3136 	addw	r1, r1, #822	; 0x336
 8005292:	f7ff f86d 	bl	8004370 <VL53LX_copy_hist_bins_to_static_cfg>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8005296:	2000      	movs	r0, #0
 8005298:	bd38      	pop	{r3, r4, r5, pc}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800529a:	2a02      	cmp	r2, #2
 800529c:	d106      	bne.n	80052ac <VL53LX_multizone_hist_bins_update+0x5a>
		if (!next_range_is_odd_timing) {
 800529e:	f891 50cb 	ldrb.w	r5, [r1, #203]	; 0xcb
 80052a2:	f891 40cc 	ldrb.w	r4, [r1, #204]	; 0xcc
 80052a6:	f891 20cd 	ldrb.w	r2, [r1, #205]	; 0xcd
 80052aa:	e7e7      	b.n	800527c <VL53LX_multizone_hist_bins_update+0x2a>
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 80052ac:	2a03      	cmp	r2, #3
 80052ae:	d1ec      	bne.n	800528a <VL53LX_multizone_hist_bins_update+0x38>
		if (!next_range_is_odd_timing) {
 80052b0:	f891 50d3 	ldrb.w	r5, [r1, #211]	; 0xd3
 80052b4:	f891 40d4 	ldrb.w	r4, [r1, #212]	; 0xd4
 80052b8:	f891 20d5 	ldrb.w	r2, [r1, #213]	; 0xd5
 80052bc:	e7de      	b.n	800527c <VL53LX_multizone_hist_bins_update+0x2a>
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 80052be:	f881 5320 	strb.w	r5, [r1, #800]	; 0x320
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 80052c2:	f881 4321 	strb.w	r4, [r1, #801]	; 0x321
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 80052c6:	f881 2322 	strb.w	r2, [r1, #802]	; 0x322
 80052ca:	e7de      	b.n	800528a <VL53LX_multizone_hist_bins_update+0x38>

080052cc <VL53LX_update_internal_stream_counters>:
	VL53LX_LLDriverData_t  *pdev =
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 80052cc:	f890 0357 	ldrb.w	r0, [r0, #855]	; 0x357

	if (stream_divider == 0) {
 80052d0:	b910      	cbnz	r0, 80052d8 <VL53LX_update_internal_stream_counters+0xc>


		*pinternal_stream_count = external_stream_count;
 80052d2:	7011      	strb	r1, [r2, #0]
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
}
 80052d4:	2000      	movs	r0, #0
 80052d6:	4770      	bx	lr
	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 80052d8:	7819      	ldrb	r1, [r3, #0]
 80052da:	3801      	subs	r0, #1
 80052dc:	4281      	cmp	r1, r0
 80052de:	d109      	bne.n	80052f4 <VL53LX_update_internal_stream_counters+0x28>
		if (*pinternal_stream_count == 0xFF)
 80052e0:	7811      	ldrb	r1, [r2, #0]
 80052e2:	29ff      	cmp	r1, #255	; 0xff
			*pinternal_stream_count = *pinternal_stream_count + 1;
 80052e4:	bf1a      	itte	ne
 80052e6:	3101      	addne	r1, #1
 80052e8:	b2c9      	uxtbne	r1, r1
			*pinternal_stream_count = 0x80;
 80052ea:	2180      	moveq	r1, #128	; 0x80
 80052ec:	7011      	strb	r1, [r2, #0]
		*pinternal_stream_count_val = 0;
 80052ee:	2200      	movs	r2, #0
 80052f0:	701a      	strb	r2, [r3, #0]
 80052f2:	e7ef      	b.n	80052d4 <VL53LX_update_internal_stream_counters+0x8>
		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 80052f4:	3101      	adds	r1, #1
 80052f6:	7019      	strb	r1, [r3, #0]
 80052f8:	e7ec      	b.n	80052d4 <VL53LX_update_internal_stream_counters+0x8>

080052fa <VL53LX_update_ll_driver_rd_state>:
{
 80052fa:	b510      	push	{r4, lr}
 80052fc:	4604      	mov	r4, r0
	if ((pdev->sys_ctrl.system__mode_start &
 80052fe:	f890 039c 	ldrb.w	r0, [r0, #924]	; 0x39c
 8005302:	f010 00f0 	ands.w	r0, r0, #240	; 0xf0
 8005306:	d110      	bne.n	800532a <VL53LX_update_ll_driver_rd_state+0x30>
		pstate->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8005308:	2303      	movs	r3, #3
 800530a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
		pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800530e:	2302      	movs	r3, #2
		pstate->rd_stream_count  = 0;
 8005310:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
		pstate->rd_internal_stream_count = 0;
 8005314:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
		pstate->rd_internal_stream_count_val = 0;
 8005318:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
		pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800531c:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
		pstate->rd_timing_status = 0;
 8005320:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
		pstate->rd_zone_id       = 0;
 8005324:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
}
 8005328:	bd10      	pop	{r4, pc}
		if (pstate->rd_stream_count == 0xFF)
 800532a:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 800532e:	29ff      	cmp	r1, #255	; 0xff
			pstate->rd_stream_count++;
 8005330:	bf1a      	itte	ne
 8005332:	3101      	addne	r1, #1
 8005334:	b2c9      	uxtbne	r1, r1
			pstate->rd_stream_count = 0x80;
 8005336:	2180      	moveq	r1, #128	; 0x80
		status = VL53LX_update_internal_stream_counters(Dev,
 8005338:	f104 0336 	add.w	r3, r4, #54	; 0x36
 800533c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8005340:	f104 0235 	add.w	r2, r4, #53	; 0x35
 8005344:	4620      	mov	r0, r4
 8005346:	f7ff ffc1 	bl	80052cc <VL53LX_update_internal_stream_counters>
		pstate->rd_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800534a:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 800534e:	f083 0302 	eor.w	r3, r3, #2
 8005352:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
		switch (pstate->rd_device_state) {
 8005356:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 800535a:	3b03      	subs	r3, #3
 800535c:	2b05      	cmp	r3, #5
 800535e:	d846      	bhi.n	80053ee <VL53LX_update_ll_driver_rd_state+0xf4>
 8005360:	e8df f003 	tbb	[pc, r3]
 8005364:	1f454503 	.word	0x1f454503
 8005368:	3b2d      	.short	0x3b2d
			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800536a:	f894 3396 	ldrb.w	r3, [r4, #918]	; 0x396
 800536e:	079b      	lsls	r3, r3, #30
 8005370:	d50e      	bpl.n	8005390 <VL53LX_update_ll_driver_rd_state+0x96>
				pstate->rd_device_state =
 8005372:	2306      	movs	r3, #6
					pstate->rd_device_state =
 8005374:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
			pstate->rd_stream_count  = 0;
 8005378:	2300      	movs	r3, #0
 800537a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			pstate->rd_internal_stream_count = 0;
 800537e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			pstate->rd_internal_stream_count_val = 0;
 8005382:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			pstate->rd_timing_status = 0;
 8005386:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			pstate->rd_zone_id       = 0;
 800538a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			break;
 800538e:	e7cb      	b.n	8005328 <VL53LX_update_ll_driver_rd_state+0x2e>
				if (pstate->rd_zone_id >=
 8005390:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
 8005394:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8005398:	429a      	cmp	r2, r3
					pstate->rd_device_state =
 800539a:	bf2c      	ite	cs
 800539c:	2308      	movcs	r3, #8
					pstate->rd_device_state =
 800539e:	2307      	movcc	r3, #7
 80053a0:	e7e8      	b.n	8005374 <VL53LX_update_ll_driver_rd_state+0x7a>
			pstate->rd_stream_count = 0;
 80053a2:	2300      	movs	r3, #0
 80053a4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			pstate->rd_internal_stream_count = 0;
 80053a8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			pstate->rd_internal_stream_count_val = 0;
 80053ac:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			pstate->rd_zone_id      = 0;
 80053b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if (pstate->rd_zone_id >=
 80053b4:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
 80053b8:	b15b      	cbz	r3, 80053d2 <VL53LX_update_ll_driver_rd_state+0xd8>
				pstate->rd_device_state =
 80053ba:	2307      	movs	r3, #7
 80053bc:	e00a      	b.n	80053d4 <VL53LX_update_ll_driver_rd_state+0xda>
			pstate->rd_zone_id++;
 80053be:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
			if (pstate->rd_zone_id >=
 80053c2:	f894 20c3 	ldrb.w	r2, [r4, #195]	; 0xc3
			pstate->rd_zone_id++;
 80053c6:	3301      	adds	r3, #1
 80053c8:	b2db      	uxtb	r3, r3
			if (pstate->rd_zone_id >=
 80053ca:	429a      	cmp	r2, r3
			pstate->rd_zone_id++;
 80053cc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if (pstate->rd_zone_id >=
 80053d0:	d8f3      	bhi.n	80053ba <VL53LX_update_ll_driver_rd_state+0xc0>
				pstate->rd_device_state =
 80053d2:	2308      	movs	r3, #8
 80053d4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 80053d8:	e7a6      	b.n	8005328 <VL53LX_update_ll_driver_rd_state+0x2e>
			pstate->rd_zone_id        = 0;
 80053da:	2300      	movs	r3, #0
 80053dc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			pstate->rd_timing_status ^= 0x01;
 80053e0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80053e4:	f083 0301 	eor.w	r3, r3, #1
 80053e8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80053ec:	e7e2      	b.n	80053b4 <VL53LX_update_ll_driver_rd_state+0xba>
			pstate->rd_device_state  =
 80053ee:	2303      	movs	r3, #3
 80053f0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
			pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80053f4:	2202      	movs	r2, #2
			pstate->rd_stream_count  = 0;
 80053f6:	2300      	movs	r3, #0
 80053f8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			pstate->rd_internal_stream_count = 0;
 80053fc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			pstate->rd_internal_stream_count_val = 0;
 8005400:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8005404:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
 8005408:	e7bd      	b.n	8005386 <VL53LX_update_ll_driver_rd_state+0x8c>

0800540a <VL53LX_update_ll_driver_cfg_state>:
{
 800540a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540c:	f890 539c 	ldrb.w	r5, [r0, #924]	; 0x39c
	if ((pdev->sys_ctrl.system__mode_start &
 8005410:	f015 05f0 	ands.w	r5, r5, #240	; 0xf0
{
 8005414:	4604      	mov	r4, r0
	if ((pdev->sys_ctrl.system__mode_start &
 8005416:	d126      	bne.n	8005466 <VL53LX_update_ll_driver_cfg_state+0x5c>
		pstate->cfg_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8005418:	2303      	movs	r3, #3
 800541a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
		pstate->cfg_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800541e:	2302      	movs	r3, #2
		pstate->cfg_stream_count  = 0;
 8005420:	f880 502d 	strb.w	r5, [r0, #45]	; 0x2d
		pstate->cfg_internal_stream_count = 0;
 8005424:	f880 502e 	strb.w	r5, [r0, #46]	; 0x2e
		pstate->cfg_internal_stream_count_val = 0;
 8005428:	f880 502f 	strb.w	r5, [r0, #47]	; 0x2f
		pstate->cfg_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800542c:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
		pstate->cfg_timing_status = 0;
 8005430:	f880 5031 	strb.w	r5, [r0, #49]	; 0x31
		pstate->cfg_zone_id       = 0;
 8005434:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32
		prev_cfg_stream_count     = 0;
 8005438:	462e      	mov	r6, r5
		prev_cfg_gph_id           = 0;
 800543a:	462f      	mov	r7, r5
	VL53LX_Error         status = VL53LX_ERROR_NONE;
 800543c:	4628      	mov	r0, r5
	if (pdev->zone_cfg.active_zones == 0) {
 800543e:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
 8005442:	2b00      	cmp	r3, #0
 8005444:	f040 808b 	bne.w	800555e <VL53LX_update_ll_driver_cfg_state+0x154>
			= prev_cfg_stream_count - 1;
 8005448:	f504 520a 	add.w	r2, r4, #8832	; 0x2280
 800544c:	210a      	movs	r1, #10
 800544e:	fb01 2505 	mla	r5, r1, r5, r2
 8005452:	3e01      	subs	r6, #1
 8005454:	70ae      	strb	r6, [r5, #2]
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id =
 8005456:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800545a:	fb01 2303 	mla	r3, r1, r3, r2
 800545e:	f087 0702 	eor.w	r7, r7, #2
 8005462:	70df      	strb	r7, [r3, #3]
}
 8005464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 8005466:	f890 602d 	ldrb.w	r6, [r0, #45]	; 0x2d
		prev_cfg_gph_id           = pstate->cfg_gph_id;
 800546a:	f890 7030 	ldrb.w	r7, [r0, #48]	; 0x30
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 800546e:	f890 5032 	ldrb.w	r5, [r0, #50]	; 0x32
		if (pstate->cfg_stream_count == 0xFF)
 8005472:	2eff      	cmp	r6, #255	; 0xff
			pstate->cfg_stream_count++;
 8005474:	bf1a      	itte	ne
 8005476:	1c71      	addne	r1, r6, #1
 8005478:	b2c9      	uxtbne	r1, r1
			pstate->cfg_stream_count = 0x80;
 800547a:	2180      	moveq	r1, #128	; 0x80
		status = VL53LX_update_internal_stream_counters(
 800547c:	f100 032f 	add.w	r3, r0, #47	; 0x2f
 8005480:	f100 022e 	add.w	r2, r0, #46	; 0x2e
 8005484:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
 8005488:	f7ff ff20 	bl	80052cc <VL53LX_update_internal_stream_counters>
		pstate->cfg_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800548c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8005490:	f894 20c3 	ldrb.w	r2, [r4, #195]	; 0xc3
 8005494:	f083 0302 	eor.w	r3, r3, #2
 8005498:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		switch (pstate->cfg_device_state) {
 800549c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	d023      	beq.n	80054ec <VL53LX_update_ll_driver_cfg_state+0xe2>
 80054a4:	2b05      	cmp	r3, #5
 80054a6:	d036      	beq.n	8005516 <VL53LX_update_ll_driver_cfg_state+0x10c>
 80054a8:	2b03      	cmp	r3, #3
 80054aa:	d146      	bne.n	800553a <VL53LX_update_ll_driver_cfg_state+0x130>
			pstate->cfg_zone_id = 1;
 80054ac:	2301      	movs	r3, #1
 80054ae:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
			if (pstate->cfg_zone_id >
 80054b2:	b93a      	cbnz	r2, 80054c4 <VL53LX_update_ll_driver_cfg_state+0xba>
				pstate->cfg_timing_status ^= 0x01;
 80054b4:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
				pstate->cfg_zone_id = 0;
 80054b8:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
				pstate->cfg_timing_status ^= 0x01;
 80054bc:	f083 0301 	eor.w	r3, r3, #1
 80054c0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 80054c4:	f894 2357 	ldrb.w	r2, [r4, #855]	; 0x357
			pstate->cfg_stream_count = 1;
 80054c8:	2301      	movs	r3, #1
 80054ca:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 80054ce:	b93a      	cbnz	r2, 80054e0 <VL53LX_update_ll_driver_cfg_state+0xd6>
				pstate->cfg_internal_stream_count = 1;
 80054d0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
				pstate->cfg_internal_stream_count_val = 0;
 80054d4:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
			pstate->cfg_device_state =
 80054d8:	2304      	movs	r3, #4
					pstate->cfg_device_state =
 80054da:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80054de:	e7ae      	b.n	800543e <VL53LX_update_ll_driver_cfg_state+0x34>
				pstate->cfg_internal_stream_count = 0;
 80054e0:	2200      	movs	r2, #0
 80054e2:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
				pstate->cfg_internal_stream_count_val = 1;
 80054e6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 80054ea:	e7f5      	b.n	80054d8 <VL53LX_update_ll_driver_cfg_state+0xce>
			pstate->cfg_zone_id++;
 80054ec:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 80054f0:	3301      	adds	r3, #1
 80054f2:	b2db      	uxtb	r3, r3
			if (pstate->cfg_zone_id >
 80054f4:	4293      	cmp	r3, r2
			pstate->cfg_zone_id++;
 80054f6:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
			if (pstate->cfg_zone_id >
 80054fa:	d9a0      	bls.n	800543e <VL53LX_update_ll_driver_cfg_state+0x34>
				pstate->cfg_zone_id = 0;
 80054fc:	2300      	movs	r3, #0
 80054fe:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
				pstate->cfg_timing_status ^= 0x01;
 8005502:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8005506:	f083 0301 	eor.w	r3, r3, #1
 800550a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
				if (pdev->zone_cfg.active_zones > 0) {
 800550e:	2a00      	cmp	r2, #0
 8005510:	d095      	beq.n	800543e <VL53LX_update_ll_driver_cfg_state+0x34>
					pstate->cfg_device_state =
 8005512:	2305      	movs	r3, #5
 8005514:	e7e1      	b.n	80054da <VL53LX_update_ll_driver_cfg_state+0xd0>
			pstate->cfg_zone_id++;
 8005516:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 800551a:	3301      	adds	r3, #1
 800551c:	b2db      	uxtb	r3, r3
			if (pstate->cfg_zone_id >
 800551e:	429a      	cmp	r2, r3
			pstate->cfg_zone_id++;
 8005520:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
			if (pstate->cfg_zone_id >
 8005524:	d28b      	bcs.n	800543e <VL53LX_update_ll_driver_cfg_state+0x34>
				pstate->cfg_zone_id = 0;
 8005526:	2300      	movs	r3, #0
 8005528:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
				pstate->cfg_timing_status ^= 0x01;
 800552c:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8005530:	f083 0301 	eor.w	r3, r3, #1
 8005534:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
 8005538:	e781      	b.n	800543e <VL53LX_update_ll_driver_cfg_state+0x34>
			pstate->cfg_device_state =
 800553a:	2303      	movs	r3, #3
 800553c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
			pstate->cfg_gph_id =
 8005540:	2202      	movs	r2, #2
			pstate->cfg_stream_count = 0;
 8005542:	2300      	movs	r3, #0
 8005544:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
			pstate->cfg_internal_stream_count = 0;
 8005548:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
			pstate->cfg_internal_stream_count_val = 0;
 800554c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
			pstate->cfg_gph_id =
 8005550:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
			pstate->cfg_timing_status = 0;
 8005554:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
			pstate->cfg_zone_id       = 0;
 8005558:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
			break;
 800555c:	e76f      	b.n	800543e <VL53LX_update_ll_driver_cfg_state+0x34>
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 800555e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8005562:	eb04 0445 	add.w	r4, r4, r5, lsl #1
			= prev_cfg_stream_count;
 8005566:	f242 2382 	movw	r3, #8834	; 0x2282
 800556a:	54e6      	strb	r6, [r4, r3]
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_gph_id =
 800556c:	f242 2383 	movw	r3, #8835	; 0x2283
 8005570:	54e7      	strb	r7, [r4, r3]
 8005572:	e777      	b.n	8005464 <VL53LX_update_ll_driver_cfg_state+0x5a>

08005574 <VL53LX_dynamic_xtalk_correction_calc_required_samples>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_calc_required_samples(
	VL53LX_DEV                          Dev
	)
{
 8005574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				&(pdev->smudge_corrector_internals);

	VL53LX_range_results_t *presults = &(pres->range_results);
	VL53LX_range_data_t *pxmonitor = &(presults->xmonitor);

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 8005578:	f500 5508 	add.w	r5, r0, #8704	; 0x2200
{
 800557c:	4604      	mov	r4, r0
	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800557e:	6c2e      	ldr	r6, [r5, #64]	; 0x40
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	temp64a = pxmonitor->VL53LX_p_017 +
 8005580:	e9d5 3012 	ldrd	r3, r0, [r5, #72]	; 0x48
 8005584:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
		pxmonitor->VL53LX_p_016;
	if (peak_duration_us == 0)
		peak_duration_us = 1000;
 8005588:	2e00      	cmp	r6, #0
 800558a:	bf08      	it	eq
 800558c:	463e      	moveq	r6, r7
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800558e:	f04f 0800 	mov.w	r8, #0
	temp64a = pxmonitor->VL53LX_p_017 +
 8005592:	4418      	add	r0, r3
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 8005594:	4632      	mov	r2, r6
 8005596:	4643      	mov	r3, r8
 8005598:	fba0 0107 	umull	r0, r1, r0, r7
 800559c:	f7fb fb5c 	bl	8000c58 <__aeabi_uldivmod>
 80055a0:	460b      	mov	r3, r1
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 80055a2:	fba0 0107 	umull	r0, r1, r0, r7
 80055a6:	fb07 1103 	mla	r1, r7, r3, r1
 80055aa:	4632      	mov	r2, r6
 80055ac:	4643      	mov	r3, r8
 80055ae:	f7fb fb53 	bl	8000c58 <__aeabi_uldivmod>

	temp64z = pconfig->noise_margin * pxmonitor->VL53LX_p_004;
 80055b2:	f504 529e 	add.w	r2, r4, #5056	; 0x13c0
 80055b6:	320c      	adds	r2, #12
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 80055b8:	460b      	mov	r3, r1
	temp64z = pconfig->noise_margin * pxmonitor->VL53LX_p_004;
 80055ba:	6892      	ldr	r2, [r2, #8]
 80055bc:	8f69      	ldrh	r1, [r5, #58]	; 0x3a
	if (temp64z == 0)
 80055be:	4647      	mov	r7, r8
 80055c0:	fb02 f601 	mul.w	r6, r2, r1
 80055c4:	ea56 0207 	orrs.w	r2, r6, r7
		temp64z = 1;
	temp64a = temp64a * 1000 * 256;
 80055c8:	f44f 357a 	mov.w	r5, #256000	; 0x3e800
 80055cc:	bf04      	itt	eq
 80055ce:	2601      	moveq	r6, #1
 80055d0:	2700      	moveq	r7, #0
 80055d2:	fba0 0105 	umull	r0, r1, r0, r5
 80055d6:	fb05 1103 	mla	r1, r5, r3, r1
	temp64a = do_division_u(temp64a, temp64z);
 80055da:	4632      	mov	r2, r6
 80055dc:	463b      	mov	r3, r7
 80055de:	f7fb fb3b 	bl	8000c58 <__aeabi_uldivmod>
 80055e2:	460b      	mov	r3, r1
	temp64a = temp64a * 1000 * 256;
 80055e4:	fba0 0105 	umull	r0, r1, r0, r5
	temp64a = do_division_u(temp64a, temp64z);
 80055e8:	4632      	mov	r2, r6
	temp64a = temp64a * 1000 * 256;
 80055ea:	fb05 1103 	mla	r1, r5, r3, r1
	temp64a = do_division_u(temp64a, temp64z);
 80055ee:	463b      	mov	r3, r7
 80055f0:	f7fb fb32 	bl	8000c58 <__aeabi_uldivmod>

	pint->required_samples = (uint32_t)temp64a;


	if (pint->required_samples < 2)
 80055f4:	f504 53a0 	add.w	r3, r4, #5120	; 0x1400
 80055f8:	2801      	cmp	r0, #1
		pint->required_samples = 2;
 80055fa:	bf98      	it	ls
 80055fc:	2202      	movls	r2, #2
 80055fe:	f103 0310 	add.w	r3, r3, #16
	pint->required_samples = (uint32_t)temp64a;
 8005602:	bf8c      	ite	hi
 8005604:	6058      	strhi	r0, [r3, #4]
		pint->required_samples = 2;
 8005606:	605a      	strls	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
}
 8005608:	2000      	movs	r0, #0
 800560a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800560e <VL53LX_dynamic_xtalk_correction_output_init>:
	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);

	pdata->smudge_corr_valid = 0;
 800560e:	2300      	movs	r3, #0
	pdata->sample_limit_exceeded_flag = 0;
	pdata->gradient_zero_flag = 0;
	pdata->new_xtalk_applied_flag = 0;

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 8005610:	e9c0 3366 	strd	r3, r3, [r0, #408]	; 0x198
	pdata->smudge_corr_valid = 0;
 8005614:	f8c0 3190 	str.w	r3, [r0, #400]	; 0x190
	pdata->sample_limit_exceeded_flag = 0;
 8005618:	f8a0 3194 	strh.w	r3, [r0, #404]	; 0x194
	pdata->new_xtalk_applied_flag = 0;
 800561c:	f880 3196 	strb.w	r3, [r0, #406]	; 0x196
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;

	LOG_FUNCTION_END(status);

	return status;
}
 8005620:	4618      	mov	r0, r3
 8005622:	4770      	bx	lr

08005624 <VL53LX_dynamic_xtalk_correction_data_init>:
{
 8005624:	b538      	push	{r3, r4, r5, lr}
	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 8005626:	f241 33cc 	movw	r3, #5068	; 0x13cc
 800562a:	f240 1201 	movw	r2, #257	; 0x101
 800562e:	52c2      	strh	r2, [r0, r3]
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 8005630:	f241 33ce 	movw	r3, #5070	; 0x13ce
 8005634:	2200      	movs	r2, #0
 8005636:	54c2      	strb	r2, [r0, r3]
	pdev->smudge_correct_config.smudge_margin =
 8005638:	f241 33d0 	movw	r3, #5072	; 0x13d0
	pdev->smudge_correct_config.noise_margin =
 800563c:	2164      	movs	r1, #100	; 0x64
	pdev->smudge_correct_config.smudge_margin =
 800563e:	52c2      	strh	r2, [r0, r3]
	pdev->smudge_correct_config.noise_margin =
 8005640:	f241 33d4 	movw	r3, #5076	; 0x13d4
	pdev->smudge_corrector_internals.accumulator = 0;
 8005644:	2400      	movs	r4, #0
	pdev->smudge_correct_config.noise_margin =
 8005646:	50c1      	str	r1, [r0, r3]
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 8005648:	f241 33d8 	movw	r3, #5080	; 0x13d8
	pdev->smudge_correct_config.sample_limit =
 800564c:	21c8      	movs	r1, #200	; 0xc8
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800564e:	50c2      	str	r2, [r0, r3]
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 8005650:	f241 33dc 	movw	r3, #5084	; 0x13dc
	pdev->smudge_corrector_internals.accumulator = 0;
 8005654:	2500      	movs	r5, #0
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 8005656:	54c2      	strb	r2, [r0, r3]
	pdev->smudge_correct_config.sample_limit =
 8005658:	f500 539f 	add.w	r3, r0, #5088	; 0x13e0
 800565c:	6019      	str	r1, [r3, #0]
	pdev->smudge_correct_config.single_xtalk_delta =
 800565e:	f241 33e4 	movw	r3, #5092	; 0x13e4
 8005662:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005666:	50c1      	str	r1, [r0, r3]
	pdev->smudge_correct_config.averaged_xtalk_delta =
 8005668:	f241 33e8 	movw	r3, #5096	; 0x13e8
 800566c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8005670:	50c1      	str	r1, [r0, r3]
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 8005672:	f241 33ec 	movw	r3, #5100	; 0x13ec
 8005676:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 800567a:	50c1      	str	r1, [r0, r3]
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800567c:	f241 33f0 	movw	r3, #5104	; 0x13f0
 8005680:	2180      	movs	r1, #128	; 0x80
 8005682:	50c1      	str	r1, [r0, r3]
	pdev->smudge_correct_config.scaler_calc_method =
 8005684:	f241 33f4 	movw	r3, #5108	; 0x13f4
	pdev->smudge_correct_config.x_gradient_scaler =
 8005688:	f241 31f6 	movw	r1, #5110	; 0x13f6
	pdev->smudge_correct_config.scaler_calc_method =
 800568c:	54c2      	strb	r2, [r0, r3]
	pdev->smudge_correct_config.x_gradient_scaler =
 800568e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005692:	5243      	strh	r3, [r0, r1]
	pdev->smudge_correct_config.y_gradient_scaler =
 8005694:	f241 31f8 	movw	r1, #5112	; 0x13f8
 8005698:	5243      	strh	r3, [r0, r1]
	pdev->smudge_correct_config.user_scaler_set =
 800569a:	f241 33fa 	movw	r3, #5114	; 0x13fa
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800569e:	f04f 715c 	mov.w	r1, #57671680	; 0x3700000
	pdev->smudge_correct_config.user_scaler_set =
 80056a2:	54c2      	strb	r2, [r0, r3]
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 80056a4:	f241 33fc 	movw	r3, #5116	; 0x13fc
 80056a8:	50c1      	str	r1, [r0, r3]
	pdev->smudge_correct_config.nodetect_sample_limit =
 80056aa:	f500 53a0 	add.w	r3, r0, #5120	; 0x1400
 80056ae:	2128      	movs	r1, #40	; 0x28
 80056b0:	6019      	str	r1, [r3, #0]
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 80056b2:	f241 4304 	movw	r3, #5124	; 0x1404
 80056b6:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80056ba:	50c1      	str	r1, [r0, r3]
	pdev->smudge_correct_config.nodetect_min_range_mm =
 80056bc:	f241 4308 	movw	r3, #5128	; 0x1408
 80056c0:	f44f 7161 	mov.w	r1, #900	; 0x384
 80056c4:	52c1      	strh	r1, [r0, r3]
	pdev->smudge_correct_config.max_smudge_factor =
 80056c6:	f241 430c 	movw	r3, #5132	; 0x140c
 80056ca:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80056ce:	50c1      	str	r1, [r0, r3]
	pdev->smudge_corrector_internals.current_samples = 0;
 80056d0:	f241 4310 	movw	r3, #5136	; 0x1410
 80056d4:	50c2      	str	r2, [r0, r3]
	pdev->smudge_corrector_internals.required_samples = 0;
 80056d6:	f241 4314 	movw	r3, #5140	; 0x1414
 80056da:	50c2      	str	r2, [r0, r3]
	pdev->smudge_corrector_internals.accumulator = 0;
 80056dc:	f500 53a0 	add.w	r3, r0, #5120	; 0x1400
 80056e0:	e9c3 4506 	strd	r4, r5, [r3, #24]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 80056e4:	f500 53a1 	add.w	r3, r0, #5152	; 0x1420
	VL53LX_dynamic_xtalk_correction_output_init(pres);
 80056e8:	f500 5003 	add.w	r0, r0, #8384	; 0x20c0
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 80056ec:	601a      	str	r2, [r3, #0]
	VL53LX_dynamic_xtalk_correction_output_init(pres);
 80056ee:	3020      	adds	r0, #32
 80056f0:	f7ff ff8d 	bl	800560e <VL53LX_dynamic_xtalk_correction_output_init>
}
 80056f4:	4610      	mov	r0, r2
 80056f6:	bd38      	pop	{r3, r4, r5, pc}

080056f8 <VL53LX_xtalk_cal_data_init>:

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 80056f8:	f241 2374 	movw	r3, #4724	; 0x1274
{
 80056fc:	b510      	push	{r4, lr}
	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 80056fe:	2400      	movs	r4, #0
 8005700:	50c4      	str	r4, [r0, r3]
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 8005702:	f241 2378 	movw	r3, #4728	; 0x1278
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 8005706:	2218      	movs	r2, #24
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 8005708:	50c4      	str	r4, [r0, r3]
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800570a:	f500 5093 	add.w	r0, r0, #4704	; 0x1260
 800570e:	4621      	mov	r1, r4
 8005710:	301c      	adds	r0, #28
 8005712:	f004 f8c1 	bl	8009898 <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
}
 8005716:	4620      	mov	r0, r4
 8005718:	bd10      	pop	{r4, pc}

0800571a <VL53LX_low_power_auto_data_init>:

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800571a:	f241 4328 	movw	r3, #5160	; 0x1428
 800571e:	2203      	movs	r2, #3
 8005720:	50c2      	str	r2, [r0, r3]
		VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
	pdev->low_power_auto_data.saved_interrupt_config = 0;
	pdev->low_power_auto_data.saved_vhv_init = 0;
 8005722:	f241 422c 	movw	r2, #5164	; 0x142c
 8005726:	2300      	movs	r3, #0
 8005728:	5283      	strh	r3, [r0, r2]
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800572a:	f241 422e 	movw	r2, #5166	; 0x142e
 800572e:	5483      	strb	r3, [r0, r2]
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8005730:	f241 4230 	movw	r2, #5168	; 0x1430
 8005734:	5083      	str	r3, [r0, r2]
	pdev->low_power_auto_data.dss__required_spads = 0;
 8005736:	f241 4234 	movw	r2, #5172	; 0x1434
 800573a:	5283      	strh	r3, [r0, r2]

	LOG_FUNCTION_END(status);

	return status;
}
 800573c:	4618      	mov	r0, r3
 800573e:	4770      	bx	lr

08005740 <VL53LX_low_power_auto_setup_manual_calibration>:
	VL53LX_Error  status = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
 8005740:	f241 432c 	movw	r3, #5164	; 0x142c
		pdev->stat_nvm.vhv_config__init;
 8005744:	f890 231b 	ldrb.w	r2, [r0, #795]	; 0x31b
	pdev->low_power_auto_data.saved_vhv_init =
 8005748:	54c2      	strb	r2, [r0, r3]
	pdev->low_power_auto_data.saved_vhv_timeout =
 800574a:	f241 412d 	movw	r1, #5165	; 0x142d
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800574e:	f890 3318 	ldrb.w	r3, [r0, #792]	; 0x318
	pdev->low_power_auto_data.saved_vhv_timeout =
 8005752:	5443      	strb	r3, [r0, r1]


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 8005754:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005758:	f880 231b 	strb.w	r2, [r0, #795]	; 0x31b

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800575c:	f241 4228 	movw	r2, #5160	; 0x1428
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8005760:	f003 0303 	and.w	r3, r3, #3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 8005764:	5c82      	ldrb	r2, [r0, r2]
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8005766:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800576a:	f880 3318 	strb.w	r3, [r0, #792]	; 0x318

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800576e:	2301      	movs	r3, #1
 8005770:	f880 335f 	strb.w	r3, [r0, #863]	; 0x35f
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 8005774:	f241 3396 	movw	r3, #5014	; 0x1396
	pdev->low_power_auto_data.first_run_phasecal_result =
 8005778:	f241 422e 	movw	r2, #5166	; 0x142e
		pdev->dbg_results.phasecal_result__vcsel_start;
 800577c:	5cc3      	ldrb	r3, [r0, r3]
	pdev->low_power_auto_data.first_run_phasecal_result =
 800577e:	5483      	strb	r3, [r0, r2]
	pdev->gen_cfg.cal_config__vcsel_start =
 8005780:	f880 3359 	strb.w	r3, [r0, #857]	; 0x359
		pdev->low_power_auto_data.first_run_phasecal_result;

	LOG_FUNCTION_END(status);

	return status;
}
 8005784:	2000      	movs	r0, #0
 8005786:	4770      	bx	lr

08005788 <VL53LX_low_power_auto_update_DSS>:


	utemp32a = utemp32a << 16;


	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 8005788:	f8b0 13a2 	ldrh.w	r1, [r0, #930]	; 0x3a2
{
 800578c:	b530      	push	{r4, r5, lr}
	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800578e:	b321      	cbz	r1, 80057da <VL53LX_low_power_auto_update_DSS+0x52>
		 + pS->result__ambient_count_rate_mcps_sd0;
 8005790:	f8b0 33a6 	ldrh.w	r3, [r0, #934]	; 0x3a6
		pS->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0
 8005794:	f8b0 23ae 	ldrh.w	r2, [r0, #942]	; 0x3ae
 8005798:	f64f 74ff 	movw	r4, #65535	; 0xffff
		 + pS->result__ambient_count_rate_mcps_sd0;
 800579c:	441a      	add	r2, r3
 800579e:	42a2      	cmp	r2, r4
 80057a0:	bf28      	it	cs
 80057a2:	4622      	movcs	r2, r4
	utemp32a = utemp32a << 16;
 80057a4:	0412      	lsls	r2, r2, #16
	else {

		utemp32a = utemp32a /
		pdev->sys_results.result__dss_actual_effective_spads_sd0;

		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 80057a6:	f241 4530 	movw	r5, #5168	; 0x1430

		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
			16;


		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps
 80057aa:	4291      	cmp	r1, r2
		utemp32a = utemp32a /
 80057ac:	fbb2 f3f1 	udiv	r3, r2, r1
		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 80057b0:	5143      	str	r3, [r0, r5]
		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps
 80057b2:	d812      	bhi.n	80057da <VL53LX_low_power_auto_update_DSS+0x52>
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 80057b4:	f8b0 2336 	ldrh.w	r2, [r0, #822]	; 0x336
 80057b8:	0412      	lsls	r2, r2, #16
				== 0)
			status = VL53LX_ERROR_DIVISION_BY_ZERO;
		else {

			utemp32a = utemp32a /
 80057ba:	fbb2 f3f3 	udiv	r3, r2, r3
			if (utemp32a > 0xFFFF)
				utemp32a = 0xFFFF;


			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 80057be:	42a3      	cmp	r3, r4
 80057c0:	bf28      	it	cs
 80057c2:	4623      	movcs	r3, r4
 80057c4:	b29b      	uxth	r3, r3

	if (status == VL53LX_ERROR_DIVISION_BY_ZERO) {



		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 80057c6:	f241 4234 	movw	r2, #5172	; 0x1434
 80057ca:	5283      	strh	r3, [r0, r2]


		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 80057cc:	f8a0 3366 	strh.w	r3, [r0, #870]	; 0x366
			pdev->low_power_auto_data.dss__required_spads;
		pdev->gen_cfg.dss_config__roi_mode_control =
 80057d0:	2302      	movs	r3, #2
 80057d2:	f880 3360 	strb.w	r3, [r0, #864]	; 0x360
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80057d6:	2000      	movs	r0, #0
 80057d8:	bd30      	pop	{r4, r5, pc}
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 80057da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057de:	e7f2      	b.n	80057c6 <VL53LX_low_power_auto_update_DSS+0x3e>

080057e0 <VL53LX_compute_histo_merge_nb>:



VL53LX_Error VL53LX_compute_histo_merge_nb(
	VL53LX_DEV        Dev,	uint8_t *histo_merge_nb)
{
 80057e0:	b530      	push	{r4, r5, lr}
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_Error  status = VL53LX_ERROR_NONE;
	uint8_t i, timing;
	uint8_t sum = 0;

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 80057e2:	f890 3408 	ldrb.w	r3, [r0, #1032]	; 0x408
 80057e6:	1fda      	subs	r2, r3, #7
 80057e8:	4253      	negs	r3, r2
 80057ea:	4153      	adcs	r3, r2
 80057ec:	2260      	movs	r2, #96	; 0x60
 80057ee:	fb02 0003 	mla	r0, r2, r3, r0
 80057f2:	f500 50e3 	add.w	r0, r0, #7264	; 0x1c60
 80057f6:	2200      	movs	r2, #0
 80057f8:	3004      	adds	r0, #4
	uint8_t sum = 0;
 80057fa:	4613      	mov	r3, r2
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 80057fc:	24c0      	movs	r4, #192	; 0xc0
 80057fe:	fb04 f502 	mul.w	r5, r4, r2
 8005802:	3201      	adds	r2, #1
 8005804:	5945      	ldr	r5, [r0, r5]
 8005806:	2d00      	cmp	r5, #0
			sum++;
 8005808:	bfc4      	itt	gt
 800580a:	3301      	addgt	r3, #1
 800580c:	b2db      	uxtbgt	r3, r3
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800580e:	2a06      	cmp	r2, #6
 8005810:	d1f5      	bne.n	80057fe <VL53LX_compute_histo_merge_nb+0x1e>
	*histo_merge_nb = sum;
 8005812:	700b      	strb	r3, [r1, #0]

	return status;
}
 8005814:	2000      	movs	r0, #0
 8005816:	bd30      	pop	{r4, r5, pc}

08005818 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>:
{
 8005818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800581a:	461c      	mov	r4, r3
	if (add_smudge == 1) {
 800581c:	f89d 3020 	ldrb.w	r3, [sp, #32]
{
 8005820:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
	orig_x_gradient =
 8005824:	f9b0 c2d0 	ldrsh.w	ip, [r0, #720]	; 0x2d0
	if (add_smudge == 1) {
 8005828:	2b01      	cmp	r3, #1
			(uint32_t)pconfig->smudge_margin;
 800582a:	bf04      	itt	eq
 800582c:	8893      	ldrheq	r3, [r2, #4]
			(uint32_t)xtalk_offset_out +
 800582e:	18c9      	addeq	r1, r1, r3
 8005830:	60a1      	str	r1, [r4, #8]
{
 8005832:	4616      	mov	r6, r2
	if (((pconfig->user_scaler_set == 0) ||
 8005834:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
	orig_xtalk_offset =
 8005838:	f8d0 32cc 	ldr.w	r3, [r0, #716]	; 0x2cc
	orig_y_gradient =
 800583c:	f9b0 12d2 	ldrsh.w	r1, [r0, #722]	; 0x2d2
{
 8005840:	4605      	mov	r5, r0
	if (((pconfig->user_scaler_set == 0) ||
 8005842:	b11a      	cbz	r2, 800584c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x34>
 8005844:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 8005848:	2a01      	cmp	r2, #1
 800584a:	d124      	bne.n	8005896 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x7e>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800584c:	f241 2274 	movw	r2, #4724	; 0x1274
		(pconfig->scaler_calc_method == 1)) &&
 8005850:	58aa      	ldr	r2, [r5, r2]
 8005852:	b302      	cbz	r2, 8005896 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x7e>
		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8005854:	f10d 0107 	add.w	r1, sp, #7
 8005858:	4628      	mov	r0, r5
 800585a:	f7ff ffc1 	bl	80057e0 <VL53LX_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 800585e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005862:	b913      	cbnz	r3, 800586a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x52>
			histo_merge_nb = 1;
 8005864:	2301      	movs	r3, #1
 8005866:	f88d 3007 	strb.w	r3, [sp, #7]
		if (pdev->tuning_parms.tp_hist_merge != 1)
 800586a:	f895 31b4 	ldrb.w	r3, [r5, #436]	; 0x1b4
 800586e:	2b01      	cmp	r3, #1
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 8005870:	bf08      	it	eq
 8005872:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
 8005876:	f505 5193 	add.w	r1, r5, #4704	; 0x1260
 800587a:	f101 0114 	add.w	r1, r1, #20
			orig_xtalk_offset =
 800587e:	bf14      	ite	ne
 8005880:	f241 2374 	movwne	r3, #4724	; 0x1274
			orig_xtalk_offset =
 8005884:	3301      	addeq	r3, #1
		orig_x_gradient =
 8005886:	f9b1 c004 	ldrsh.w	ip, [r1, #4]
			orig_xtalk_offset =
 800588a:	bf0c      	ite	eq
 800588c:	f851 3023 	ldreq.w	r3, [r1, r3, lsl #2]
			orig_xtalk_offset =
 8005890:	58eb      	ldrne	r3, [r5, r3]
		orig_y_gradient =
 8005892:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 8005896:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
 800589a:	b958      	cbnz	r0, 80058b4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x9c>
 800589c:	f1bc 0f00 	cmp.w	ip, #0
 80058a0:	d103      	bne.n	80058aa <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x92>
		pout->gradient_zero_flag |= 0x01;
 80058a2:	7962      	ldrb	r2, [r4, #5]
 80058a4:	f042 0201 	orr.w	r2, r2, #1
 80058a8:	7162      	strb	r2, [r4, #5]
	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 80058aa:	b919      	cbnz	r1, 80058b4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x9c>
		pout->gradient_zero_flag |= 0x02;
 80058ac:	7962      	ldrb	r2, [r4, #5]
 80058ae:	f042 0202 	orr.w	r2, r2, #2
 80058b2:	7162      	strb	r2, [r4, #5]
	if (orig_xtalk_offset == 0)
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	bf38      	it	cc
 80058b8:	2301      	movcc	r3, #1
	if (pconfig->user_scaler_set == 1) {
 80058ba:	2801      	cmp	r0, #1
 80058bc:	d12d      	bne.n	800591a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 80058be:	f9b6 202a 	ldrsh.w	r2, [r6, #42]	; 0x2a
		y_gradient_scaler = pconfig->y_gradient_scaler;
 80058c2:	f9b6 002c 	ldrsh.w	r0, [r6, #44]	; 0x2c
	if (pconfig->scaler_calc_method == 0) {
 80058c6:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
 80058ca:	f1be 0f00 	cmp.w	lr, #0
 80058ce:	d130      	bne.n	8005932 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x11a>
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 80058d0:	68a3      	ldr	r3, [r4, #8]
 80058d2:	435a      	muls	r2, r3
			(int16_t)itemp32;
 80058d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
		itemp32 = itemp32 >> 6;
 80058d8:	1192      	asrs	r2, r2, #6
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 80058da:	4343      	muls	r3, r0
			(int16_t)itemp32;
 80058dc:	428a      	cmp	r2, r1
		itemp32 = itemp32 >> 6;
 80058de:	ea4f 13a3 	mov.w	r3, r3, asr #6
			(int16_t)itemp32;
 80058e2:	bfa8      	it	ge
 80058e4:	460a      	movge	r2, r1
			(int16_t)itemp32;
 80058e6:	428b      	cmp	r3, r1
			(int16_t)itemp32;
 80058e8:	81a2      	strh	r2, [r4, #12]
			(int16_t)itemp32;
 80058ea:	bfa8      	it	ge
 80058ec:	460b      	movge	r3, r1
			(int16_t)itemp32;
 80058ee:	81e3      	strh	r3, [r4, #14]
	if ((pconfig->smudge_corr_apply_enabled == 1) &&
 80058f0:	7873      	ldrb	r3, [r6, #1]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d172      	bne.n	80059dc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1c4>
 80058f6:	2f01      	cmp	r7, #1
 80058f8:	d072      	beq.n	80059e0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1c8>
		pout->new_xtalk_applied_flag = 1;
 80058fa:	71a3      	strb	r3, [r4, #6]
		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 80058fc:	f10d 0107 	add.w	r1, sp, #7
 8005900:	4628      	mov	r0, r5
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 8005902:	68a7      	ldr	r7, [r4, #8]
		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8005904:	f7ff ff6c 	bl	80057e0 <VL53LX_compute_histo_merge_nb>
		if ((histo_merge_nb > 0) &&
 8005908:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800590c:	bb6a      	cbnz	r2, 800596a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x152>
		if (pout->new_xtalk_applied_flag) {
 800590e:	79a3      	ldrb	r3, [r4, #6]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d153      	bne.n	80059bc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1a4>
		pout->smudge_corr_valid = 1;
 8005914:	2301      	movs	r3, #1
 8005916:	7023      	strb	r3, [r4, #0]
	return status;
 8005918:	e062      	b.n	80059e0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1c8>
		x_gradient_scaler = (int16_t)do_division_s(
 800591a:	ea4f 128c 	mov.w	r2, ip, lsl #6
		y_gradient_scaler = (int16_t)do_division_s(
 800591e:	0188      	lsls	r0, r1, #6
		x_gradient_scaler = (int16_t)do_division_s(
 8005920:	fbb2 f2f3 	udiv	r2, r2, r3
		y_gradient_scaler = (int16_t)do_division_s(
 8005924:	fbb0 f0f3 	udiv	r0, r0, r3
		x_gradient_scaler = (int16_t)do_division_s(
 8005928:	b212      	sxth	r2, r2
		y_gradient_scaler = (int16_t)do_division_s(
 800592a:	b200      	sxth	r0, r0
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800592c:	8572      	strh	r2, [r6, #42]	; 0x2a
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800592e:	85b0      	strh	r0, [r6, #44]	; 0x2c
 8005930:	e7c9      	b.n	80058c6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xae>
	} else if (pconfig->scaler_calc_method == 1) {
 8005932:	f1be 0f01 	cmp.w	lr, #1
 8005936:	d1db      	bne.n	80058f0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xd8>
		itemp32 = (int32_t)(orig_xtalk_offset -
 8005938:	68a2      	ldr	r2, [r4, #8]
 800593a:	1a9b      	subs	r3, r3, r2
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800593c:	2b00      	cmp	r3, #0
 800593e:	461a      	mov	r2, r3
 8005940:	bfb8      	it	lt
 8005942:	f103 020f 	addlt.w	r2, r3, #15
 8005946:	1112      	asrs	r2, r2, #4
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 8005948:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
			(int16_t)itemp32;
 800594c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005950:	4282      	cmp	r2, r0
 8005952:	bfa8      	it	ge
 8005954:	4602      	movge	r2, r0
 8005956:	81a2      	strh	r2, [r4, #12]
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 8005958:	2250      	movs	r2, #80	; 0x50
 800595a:	fb93 f3f2 	sdiv	r3, r3, r2
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800595e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
			(int16_t)itemp32;
 8005962:	4283      	cmp	r3, r0
 8005964:	bfa8      	it	ge
 8005966:	4603      	movge	r3, r0
 8005968:	e7c1      	b.n	80058ee <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xd6>
		if ((histo_merge_nb > 0) &&
 800596a:	f895 31b4 	ldrb.w	r3, [r5, #436]	; 0x1b4
 800596e:	2b01      	cmp	r3, #1
 8005970:	d1cd      	bne.n	800590e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xf6>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 8005972:	2f00      	cmp	r7, #0
 8005974:	d0cb      	beq.n	800590e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xf6>
			cXtalk =
 8005976:	f505 5393 	add.w	r3, r5, #4704	; 0x1260
 800597a:	3201      	adds	r2, #1
 800597c:	3314      	adds	r3, #20
			if (SmudgeFactor >= pconfig->max_smudge_factor)
 800597e:	6c30      	ldr	r0, [r6, #64]	; 0x40
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 8005980:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005984:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005988:	4351      	muls	r1, r2
 800598a:	fbb1 fcf7 	udiv	ip, r1, r7
			if (SmudgeFactor >= pconfig->max_smudge_factor)
 800598e:	4560      	cmp	r0, ip
 8005990:	d802      	bhi.n	8005998 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x180>
				pout->new_xtalk_applied_flag = 0;
 8005992:	2300      	movs	r3, #0
 8005994:	71a3      	strb	r3, [r4, #6]
		if (pout->new_xtalk_applied_flag) {
 8005996:	e7bd      	b.n	8005914 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xfc>
			else if (SmudgeFactor > 0)
 8005998:	42b9      	cmp	r1, r7
 800599a:	d3b8      	bcc.n	800590e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xf6>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800599c:	f895 71bc 	ldrb.w	r7, [r5, #444]	; 0x1bc
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 80059a0:	3308      	adds	r3, #8
 80059a2:	2000      	movs	r0, #0
				*pcpo *= 1000;
 80059a4:	4611      	mov	r1, r2
				for (i = 0; i < max; i++) {
 80059a6:	b2c2      	uxtb	r2, r0
 80059a8:	4297      	cmp	r7, r2
 80059aa:	d9b0      	bls.n	800590e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xf6>
				*pcpo *= 1000;
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	3001      	adds	r0, #1
 80059b0:	434a      	muls	r2, r1
				*pcpo /= SmudgeFactor;
 80059b2:	fbb2 f2fc 	udiv	r2, r2, ip
 80059b6:	f843 2b04 	str.w	r2, [r3], #4
				for (i = 0; i < max; i++) {
 80059ba:	e7f4      	b.n	80059a6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x18e>
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 80059bc:	68a3      	ldr	r3, [r4, #8]
 80059be:	f8c5 32c4 	str.w	r3, [r5, #708]	; 0x2c4
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80059c2:	89a3      	ldrh	r3, [r4, #12]
 80059c4:	f8a5 32c8 	strh.w	r3, [r5, #712]	; 0x2c8
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80059c8:	89e3      	ldrh	r3, [r4, #14]
 80059ca:	f8a5 32ca 	strh.w	r3, [r5, #714]	; 0x2ca
		if (pconfig->smudge_corr_single_apply == 1) {
 80059ce:	78b3      	ldrb	r3, [r6, #2]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d19f      	bne.n	8005914 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xfc>
			pconfig->smudge_corr_apply_enabled = 0;
 80059d4:	2300      	movs	r3, #0
 80059d6:	7073      	strb	r3, [r6, #1]
			pconfig->smudge_corr_single_apply = 0;
 80059d8:	70b3      	strb	r3, [r6, #2]
 80059da:	e79b      	b.n	8005914 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xfc>
	if (soft_update != 1)
 80059dc:	2f01      	cmp	r7, #1
 80059de:	d199      	bne.n	8005914 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xfc>
}
 80059e0:	2000      	movs	r0, #0
 80059e2:	b003      	add	sp, #12
 80059e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080059e8 <VL53LX_dynamic_xtalk_correction_corrector>:
{
 80059e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ec:	b087      	sub	sp, #28
	VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 80059ee:	f10d 0117 	add.w	r1, sp, #23
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 80059f2:	f500 5703 	add.w	r7, r0, #8384	; 0x20c0
	VL53LX_smudge_corrector_config_t *pconfig =
 80059f6:	f500 559e 	add.w	r5, r0, #5056	; 0x13c0
{
 80059fa:	4604      	mov	r4, r0
	VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 80059fc:	f7ff fef0 	bl	80057e0 <VL53LX_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) ||
 8005a00:	f89d 3017 	ldrb.w	r3, [sp, #23]
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 8005a04:	3720      	adds	r7, #32
	VL53LX_smudge_corrector_config_t *pconfig =
 8005a06:	350c      	adds	r5, #12
	VL53LX_smudge_corrector_data_t *pout =
 8005a08:	f507 76c8 	add.w	r6, r7, #400	; 0x190
	if ((histo_merge_nb == 0) ||
 8005a0c:	b11b      	cbz	r3, 8005a16 <VL53LX_dynamic_xtalk_correction_corrector+0x2e>
 8005a0e:	f894 31b4 	ldrb.w	r3, [r4, #436]	; 0x1b4
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d002      	beq.n	8005a1c <VL53LX_dynamic_xtalk_correction_corrector+0x34>
		histo_merge_nb = 1;
 8005a16:	2301      	movs	r3, #1
 8005a18:	f88d 3017 	strb.w	r3, [sp, #23]
	VL53LX_dynamic_xtalk_correction_output_init(pres);
 8005a1c:	4638      	mov	r0, r7
 8005a1e:	f7ff fdf6 	bl	800560e <VL53LX_dynamic_xtalk_correction_output_init>
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 8005a22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a24:	b32b      	cbz	r3, 8005a72 <VL53LX_dynamic_xtalk_correction_corrector+0x8a>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb)  >
 8005a26:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8005a2a:	4353      	muls	r3, r2
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 8005a2c:	f8b7 2178 	ldrh.w	r2, [r7, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 8005a30:	4293      	cmp	r3, r2
 8005a32:	bf94      	ite	ls
 8005a34:	2300      	movls	r3, #0
 8005a36:	2301      	movhi	r3, #1
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 8005a38:	f894 21b4 	ldrb.w	r2, [r4, #436]	; 0x1b4
 8005a3c:	2a01      	cmp	r2, #1
 8005a3e:	d11a      	bne.n	8005a76 <VL53LX_dynamic_xtalk_correction_corrector+0x8e>
 8005a40:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
 8005a44:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8005a48:	1a8a      	subs	r2, r1, r2
 8005a4a:	4251      	negs	r1, r2
 8005a4c:	4151      	adcs	r1, r2
		(pconfig->smudge_corr_enabled == 1) &&
 8005a4e:	f241 32cc 	movw	r2, #5068	; 0x13cc
 8005a52:	f897 018e 	ldrb.w	r0, [r7, #398]	; 0x18e
 8005a56:	5ca2      	ldrb	r2, [r4, r2]
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 8005a58:	2a01      	cmp	r2, #1
 8005a5a:	d106      	bne.n	8005a6a <VL53LX_dynamic_xtalk_correction_corrector+0x82>
		(pconfig->smudge_corr_enabled == 1) &&
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 80d5 	beq.w	8005c0c <VL53LX_dynamic_xtalk_correction_corrector+0x224>
		ambient_check &&
 8005a62:	2809      	cmp	r0, #9
 8005a64:	f040 80d5 	bne.w	8005c12 <VL53LX_dynamic_xtalk_correction_corrector+0x22a>
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 8005a68:	b9f1      	cbnz	r1, 8005aa8 <VL53LX_dynamic_xtalk_correction_corrector+0xc0>
}
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	b007      	add	sp, #28
 8005a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 8005a72:	2301      	movs	r3, #1
 8005a74:	e7e0      	b.n	8005a38 <VL53LX_dynamic_xtalk_correction_corrector+0x50>
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 8005a76:	2101      	movs	r1, #1
 8005a78:	e7e9      	b.n	8005a4e <VL53LX_dynamic_xtalk_correction_corrector+0x66>
			if (pR->VL53LX_p_003[i].range_status ==
 8005a7a:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005a7e:	f1b8 0f09 	cmp.w	r8, #9
 8005a82:	d10b      	bne.n	8005a9c <VL53LX_dynamic_xtalk_correction_corrector+0xb4>
				if (pR->VL53LX_p_003[i].median_range_mm
 8005a84:	f9b3 9000 	ldrsh.w	r9, [r3]
					pconfig->nodetect_min_range_mm) {
 8005a88:	f8b5 803c 	ldrh.w	r8, [r5, #60]	; 0x3c
				if (pR->VL53LX_p_003[i].median_range_mm
 8005a8c:	45c1      	cmp	r9, r8
 8005a8e:	dd08      	ble.n	8005aa2 <VL53LX_dynamic_xtalk_correction_corrector+0xba>
					if (run_nodetect == 2) {
 8005a90:	f1bc 0f02 	cmp.w	ip, #2
 8005a94:	d102      	bne.n	8005a9c <VL53LX_dynamic_xtalk_correction_corrector+0xb4>
 8005a96:	4602      	mov	r2, r0
						run_nodetect = 1;
 8005a98:	f04f 0c01 	mov.w	ip, #1
		for (i = 0; i < pR->active_results; i++) {
 8005a9c:	3101      	adds	r1, #1
 8005a9e:	334c      	adds	r3, #76	; 0x4c
 8005aa0:	e0c0      	b.n	8005c24 <VL53LX_dynamic_xtalk_correction_corrector+0x23c>
					run_nodetect = 0;
 8005aa2:	f04f 0c00 	mov.w	ip, #0
 8005aa6:	e7f9      	b.n	8005a9c <VL53LX_dynamic_xtalk_correction_corrector+0xb4>
		pint->nodetect_counter = 0;
 8005aa8:	f504 59a0 	add.w	r9, r4, #5120	; 0x1400
 8005aac:	f109 0910 	add.w	r9, r9, #16
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	f8c9 3010 	str.w	r3, [r9, #16]
		VL53LX_dynamic_xtalk_correction_calc_required_samples(Dev);
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	9203      	str	r2, [sp, #12]
 8005aba:	f7ff fd5b 	bl	8005574 <VL53LX_dynamic_xtalk_correction_calc_required_samples>
				((uint32_t)(pconfig->smudge_margin)) << 2;
 8005abe:	f8b5 b004 	ldrh.w	fp, [r5, #4]
		current_xtalk = ((uint32_t)cco) << 2;
 8005ac2:	f8d4 12c4 	ldr.w	r1, [r4, #708]	; 0x2c4
		xtalk_offset_in =
 8005ac6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 8005aca:	69a8      	ldr	r0, [r5, #24]
		smudge_margin_adjusted =
 8005acc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8005ad0:	ebab 0a81 	sub.w	sl, fp, r1, lsl #2
		current_xtalk = ((uint32_t)cco) << 2;
 8005ad4:	008a      	lsls	r2, r1, #2
		itemp32 = xtalk_offset_in - current_xtalk +
 8005ad6:	eb0a 0103 	add.w	r1, sl, r3
		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 8005ada:	2900      	cmp	r1, #0
 8005adc:	bfb8      	it	lt
 8005ade:	4249      	neglt	r1, r1
 8005ae0:	f504 5809 	add.w	r8, r4, #8768	; 0x2240
 8005ae4:	4288      	cmp	r0, r1
		current_xtalk = ((uint32_t)cco) << 2;
 8005ae6:	9202      	str	r2, [sp, #8]
		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 8005ae8:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8005aec:	da07      	bge.n	8005afe <VL53LX_dynamic_xtalk_correction_corrector+0x116>
				((int32_t)current_xtalk -
 8005aee:	eba2 010b 	sub.w	r1, r2, fp
			if ((int32_t)xtalk_offset_in >
 8005af2:	4299      	cmp	r1, r3
				pout->single_xtalk_delta_flag = 1;
 8005af4:	bfb4      	ite	lt
 8005af6:	9a03      	ldrlt	r2, [sp, #12]
				pout->single_xtalk_delta_flag = 2;
 8005af8:	2202      	movge	r2, #2
 8005afa:	f888 2002 	strb.w	r2, [r8, #2]
		pint->current_samples = pint->current_samples + 1;
 8005afe:	f241 4110 	movw	r1, #5136	; 0x1410
 8005b02:	5862      	ldr	r2, [r4, r1]
 8005b04:	3201      	adds	r2, #1
 8005b06:	5062      	str	r2, [r4, r1]
		if (pint->current_samples > pconfig->sample_limit) {
 8005b08:	6969      	ldr	r1, [r5, #20]
 8005b0a:	428a      	cmp	r2, r1
 8005b0c:	d94f      	bls.n	8005bae <VL53LX_dynamic_xtalk_correction_corrector+0x1c6>
			pout->sample_limit_exceeded_flag = 1;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	f888 3004 	strb.w	r3, [r8, #4]
			continue_processing = CONT_RESET;
 8005b14:	2702      	movs	r7, #2
		if (pint->current_samples < pint->required_samples)
 8005b16:	f8d9 3004 	ldr.w	r3, [r9, #4]
		(uint32_t)(do_division_u(pint->accumulator,
 8005b1a:	e9d9 0102 	ldrd	r0, r1, [r9, #8]
			continue_processing = CONT_NEXT_LOOP;
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	bf38      	it	cc
 8005b22:	2701      	movcc	r7, #1
		(uint32_t)(do_division_u(pint->accumulator,
 8005b24:	2300      	movs	r3, #0
 8005b26:	f7fb f897 	bl	8000c58 <__aeabi_uldivmod>
		if (continue_processing == CONT_CONTINUE &&
 8005b2a:	b98f      	cbnz	r7, 8005b50 <VL53LX_dynamic_xtalk_correction_corrector+0x168>
		itemp32 = xtalk_offset_out - current_xtalk +
 8005b2c:	4482      	add	sl, r0
		if (continue_processing == CONT_CONTINUE &&
 8005b2e:	f1ba 0f00 	cmp.w	sl, #0
 8005b32:	69eb      	ldr	r3, [r5, #28]
 8005b34:	bfb8      	it	lt
 8005b36:	f1ca 0a00 	rsblt	sl, sl, #0
 8005b3a:	4553      	cmp	r3, sl
 8005b3c:	dc63      	bgt.n	8005c06 <VL53LX_dynamic_xtalk_correction_corrector+0x21e>
				((int32_t)current_xtalk -
 8005b3e:	9b02      	ldr	r3, [sp, #8]
 8005b40:	eba3 0b0b 	sub.w	fp, r3, fp
			if ((int32_t)xtalk_offset_out >
 8005b44:	4583      	cmp	fp, r0
				pout->averaged_xtalk_delta_flag = 1;
 8005b46:	bfb4      	ite	lt
 8005b48:	2301      	movlt	r3, #1
				pout->averaged_xtalk_delta_flag = 2;
 8005b4a:	2302      	movge	r3, #2
 8005b4c:	f888 3003 	strb.w	r3, [r8, #3]
		pout->smudge_corr_clipped = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	f888 3001 	strb.w	r3, [r8, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 8005b56:	b957      	cbnz	r7, 8005b6e <VL53LX_dynamic_xtalk_correction_corrector+0x186>
			(pconfig->smudge_corr_clip_limit != 0)) {
 8005b58:	6a2b      	ldr	r3, [r5, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 8005b5a:	b143      	cbz	r3, 8005b6e <VL53LX_dynamic_xtalk_correction_corrector+0x186>
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 8005b5c:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8005b60:	4353      	muls	r3, r2
			if (xtalk_offset_out >
 8005b62:	4283      	cmp	r3, r0
 8005b64:	d203      	bcs.n	8005b6e <VL53LX_dynamic_xtalk_correction_corrector+0x186>
				pout->smudge_corr_clipped = 1;
 8005b66:	2301      	movs	r3, #1
 8005b68:	f888 3001 	strb.w	r3, [r8, #1]
				continue_processing = CONT_RESET;
 8005b6c:	2702      	movs	r7, #2
		if (pconfig->user_xtalk_offset_limit_hi &&
 8005b6e:	7c2b      	ldrb	r3, [r5, #16]
 8005b70:	68e9      	ldr	r1, [r5, #12]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d043      	beq.n	8005bfe <VL53LX_dynamic_xtalk_correction_corrector+0x216>
 8005b76:	4288      	cmp	r0, r1
 8005b78:	bf28      	it	cs
 8005b7a:	4608      	movcs	r0, r1
		xtalk_offset_out = xtalk_offset_out >> 2;
 8005b7c:	0881      	lsrs	r1, r0, #2
		if (xtalk_offset_out > 0x3FFFF)
 8005b7e:	4844      	ldr	r0, [pc, #272]	; (8005c90 <VL53LX_dynamic_xtalk_correction_corrector+0x2a8>)
 8005b80:	4281      	cmp	r1, r0
 8005b82:	bf28      	it	cs
 8005b84:	4601      	movcs	r1, r0
		if (continue_processing == CONT_CONTINUE) {
 8005b86:	2301      	movs	r3, #1
 8005b88:	b9d7      	cbnz	r7, 8005bc0 <VL53LX_dynamic_xtalk_correction_corrector+0x1d8>
			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 8005b8a:	e9cd 3700 	strd	r3, r7, [sp]
 8005b8e:	462a      	mov	r2, r5
 8005b90:	4633      	mov	r3, r6
 8005b92:	4620      	mov	r0, r4
 8005b94:	f7ff fe40 	bl	8005818 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
			pint->accumulator = 0;
 8005b98:	2200      	movs	r2, #0
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	e9c9 2302 	strd	r2, r3, [r9, #8]
			pint->current_samples = 0;
 8005ba0:	f241 4210 	movw	r2, #5136	; 0x1410
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	50a3      	str	r3, [r4, r2]
			pint->nodetect_counter = 0;
 8005ba8:	f8c9 3010 	str.w	r3, [r9, #16]
	if (run_nodetect == 1) {
 8005bac:	e75d      	b.n	8005a6a <VL53LX_dynamic_xtalk_correction_corrector+0x82>
			pint->accumulator = pint->accumulator +
 8005bae:	e9d9 0102 	ldrd	r0, r1, [r9, #8]
 8005bb2:	18c0      	adds	r0, r0, r3
 8005bb4:	f141 0100 	adc.w	r1, r1, #0
 8005bb8:	e9c9 0102 	strd	r0, r1, [r9, #8]
	uint8_t continue_processing = CONT_CONTINUE;
 8005bbc:	2700      	movs	r7, #0
 8005bbe:	e7aa      	b.n	8005b16 <VL53LX_dynamic_xtalk_correction_corrector+0x12e>
			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 8005bc0:	e9cd 3300 	strd	r3, r3, [sp]
 8005bc4:	462a      	mov	r2, r5
 8005bc6:	4633      	mov	r3, r6
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f7ff fe25 	bl	8005818 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
		if (continue_processing == CONT_RESET) {
 8005bce:	2f02      	cmp	r7, #2
 8005bd0:	f47f af4b 	bne.w	8005a6a <VL53LX_dynamic_xtalk_correction_corrector+0x82>
 8005bd4:	e7e0      	b.n	8005b98 <VL53LX_dynamic_xtalk_correction_corrector+0x1b0>
			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 8005bd6:	4633      	mov	r3, r6
 8005bd8:	462a      	mov	r2, r5
 8005bda:	e9cd 7700 	strd	r7, r7, [sp]
 8005bde:	4620      	mov	r0, r4
 8005be0:	f7ff fe1a 	bl	8005818 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
			pout->smudge_corr_valid = 2;
 8005be4:	f242 2370 	movw	r3, #8816	; 0x2270
 8005be8:	2202      	movs	r2, #2
 8005bea:	54e2      	strb	r2, [r4, r3]
			pint->accumulator = 0;
 8005bec:	2200      	movs	r2, #0
 8005bee:	2300      	movs	r3, #0
 8005bf0:	e9c8 2302 	strd	r2, r3, [r8, #8]
			pint->current_samples = 0;
 8005bf4:	f844 7009 	str.w	r7, [r4, r9]
			pint->nodetect_counter = 0;
 8005bf8:	f8c8 7010 	str.w	r7, [r8, #16]
 8005bfc:	e735      	b.n	8005a6a <VL53LX_dynamic_xtalk_correction_corrector+0x82>
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 8005bfe:	4288      	cmp	r0, r1
 8005c00:	bf38      	it	cc
 8005c02:	4608      	movcc	r0, r1
 8005c04:	e7ba      	b.n	8005b7c <VL53LX_dynamic_xtalk_correction_corrector+0x194>
		pout->smudge_corr_clipped = 0;
 8005c06:	f888 7001 	strb.w	r7, [r8, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 8005c0a:	e7af      	b.n	8005b6c <VL53LX_dynamic_xtalk_correction_corrector+0x184>
	if ((pR->xmonitor.range_status
 8005c0c:	2809      	cmp	r0, #9
 8005c0e:	f43f af2c 	beq.w	8005a6a <VL53LX_dynamic_xtalk_correction_corrector+0x82>
 8005c12:	f504 5304 	add.w	r3, r4, #8448	; 0x2100
		for (i = 0; i < pR->active_results; i++) {
 8005c16:	2100      	movs	r1, #0
 8005c18:	f897 e012 	ldrb.w	lr, [r7, #18]
 8005c1c:	333a      	adds	r3, #58	; 0x3a
	uint8_t nodetect_index = 0;
 8005c1e:	460a      	mov	r2, r1
		run_nodetect = 2;
 8005c20:	f04f 0c02 	mov.w	ip, #2
 8005c24:	b2c8      	uxtb	r0, r1
		for (i = 0; i < pR->active_results; i++) {
 8005c26:	4586      	cmp	lr, r0
 8005c28:	f63f af27 	bhi.w	8005a7a <VL53LX_dynamic_xtalk_correction_corrector+0x92>
		if (run_nodetect == 1) {
 8005c2c:	f1bc 0f01 	cmp.w	ip, #1
 8005c30:	f47f af1b 	bne.w	8005a6a <VL53LX_dynamic_xtalk_correction_corrector+0x82>
		amr =
 8005c34:	234c      	movs	r3, #76	; 0x4c
 8005c36:	fb03 7702 	mla	r7, r3, r2, r7
			utemp64 = 1000 * ((uint64_t)amr);
 8005c3a:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8005c3e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
			if (utemp64 < pconfig->nodetect_ambient_threshold)
 8005c42:	6b28      	ldr	r0, [r5, #48]	; 0x30
			utemp64 = 1000 * ((uint64_t)amr);
 8005c44:	fba3 8908 	umull	r8, r9, r3, r8
			utemp64 = utemp64 << 9;
 8005c48:	ea4f 2349 	mov.w	r3, r9, lsl #9
			if (utemp64 < pconfig->nodetect_ambient_threshold)
 8005c4c:	2100      	movs	r1, #0
			utemp64 = utemp64 << 9;
 8005c4e:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8005c52:	ea4f 2248 	mov.w	r2, r8, lsl #9
	if (run_nodetect == 1) {
 8005c56:	428b      	cmp	r3, r1
 8005c58:	bf08      	it	eq
 8005c5a:	4282      	cmpeq	r2, r0
 8005c5c:	f4bf af05 	bcs.w	8005a6a <VL53LX_dynamic_xtalk_correction_corrector+0x82>
		pint->nodetect_counter += 1;
 8005c60:	f241 4910 	movw	r9, #5136	; 0x1410
 8005c64:	eb04 0809 	add.w	r8, r4, r9
		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 8005c68:	e9d5 210d 	ldrd	r2, r1, [r5, #52]	; 0x34
		pint->nodetect_counter += 1;
 8005c6c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005c70:	3301      	adds	r3, #1
		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 8005c72:	4293      	cmp	r3, r2
		pint->nodetect_counter += 1;
 8005c74:	f8c8 3010 	str.w	r3, [r8, #16]
		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 8005c78:	f04f 0700 	mov.w	r7, #0
 8005c7c:	d2ab      	bcs.n	8005bd6 <VL53LX_dynamic_xtalk_correction_corrector+0x1ee>
			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 8005c7e:	e9cd 7c00 	strd	r7, ip, [sp]
 8005c82:	4633      	mov	r3, r6
 8005c84:	462a      	mov	r2, r5
 8005c86:	4620      	mov	r0, r4
 8005c88:	f7ff fdc6 	bl	8005818 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
		if (continue_processing == CONT_RESET) {
 8005c8c:	e6ed      	b.n	8005a6a <VL53LX_dynamic_xtalk_correction_corrector+0x82>
 8005c8e:	bf00      	nop
 8005c90:	0003ffff 	.word	0x0003ffff

08005c94 <VL53LX_calc_pll_period_us>:

	uint32_t  pll_period_us        = 0;

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 8005c94:	b118      	cbz	r0, 8005c9e <VL53LX_calc_pll_period_us+0xa>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 8005c96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c9a:	fbb3 f0f0 	udiv	r0, r3, r0


	LOG_FUNCTION_END(0);

	return pll_period_us;
}
 8005c9e:	4770      	bx	lr

08005ca0 <VL53LX_duration_maths>:

	uint64_t  tmp_long_int = 0;
	uint32_t  duration_us  = 0;


	duration_us = window_vclks * pll_period_us;
 8005ca0:	4342      	muls	r2, r0


	tmp_long_int = (uint64_t)duration_us;


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 8005ca2:	434b      	muls	r3, r1
{
 8005ca4:	b510      	push	{r4, lr}
	duration_us = duration_us >> 12;
 8005ca6:	0b12      	lsrs	r2, r2, #12


	duration_us = duration_us >> 4;
 8005ca8:	091b      	lsrs	r3, r3, #4


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 8005caa:	fba3 3402 	umull	r3, r4, r3, r2


	tmp_long_int = tmp_long_int >> 12;
 8005cae:	0b1a      	lsrs	r2, r3, #12


	if (tmp_long_int > 0xFFFFFFFF)
		tmp_long_int = 0xFFFFFFFF;

	duration_us  = (uint32_t)tmp_long_int;
 8005cb0:	0b21      	lsrs	r1, r4, #12
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	ea42 5004 	orr.w	r0, r2, r4, lsl #20
 8005cb8:	428b      	cmp	r3, r1
 8005cba:	f04f 32ff 	mov.w	r2, #4294967295
 8005cbe:	bf08      	it	eq
 8005cc0:	4282      	cmpeq	r2, r0
 8005cc2:	bf38      	it	cc
 8005cc4:	4610      	movcc	r0, r2

	return duration_us;
}
 8005cc6:	bd10      	pop	{r4, pc}

08005cc8 <VL53LX_events_per_spad_maths>:

uint32_t VL53LX_events_per_spad_maths(
	int32_t   VL53LX_p_010,
	uint16_t  num_spads,
	uint32_t  duration)
{
 8005cc8:	b570      	push	{r4, r5, r6, lr}
 8005cca:	4616      	mov	r6, r2


	uint64_t dividend = ((uint64_t)VL53LX_p_010
			* 1000 * 256);

	if (num_spads != 0)
 8005ccc:	b1c9      	cbz	r1, 8005d02 <VL53LX_events_per_spad_maths+0x3a>
		total_hist_counts = do_division_u(
 8005cce:	460a      	mov	r2, r1
 8005cd0:	f44f 317a 	mov.w	r1, #256000	; 0x3e800
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	fb80 0101 	smull	r0, r1, r0, r1
 8005cda:	f7fa ffbd 	bl	8000c58 <__aeabi_uldivmod>
 8005cde:	4603      	mov	r3, r0
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 8005ce0:	02cd      	lsls	r5, r1, #11
 8005ce2:	ea45 5553 	orr.w	r5, r5, r3, lsr #21
 8005ce6:	02dc      	lsls	r4, r3, #11
 8005ce8:	b14e      	cbz	r6, 8005cfe <VL53LX_events_per_spad_maths+0x36>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
			+ ((uint64_t)duration / 2));
 8005cea:	0870      	lsrs	r0, r6, #1

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 8005cec:	1820      	adds	r0, r4, r0
 8005cee:	4632      	mov	r2, r6
 8005cf0:	f04f 0300 	mov.w	r3, #0
 8005cf4:	f145 0100 	adc.w	r1, r5, #0
 8005cf8:	f7fa ffae 	bl	8000c58 <__aeabi_uldivmod>
 8005cfc:	4604      	mov	r4, r0
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;

	return rate_per_spad_kcps;
}
 8005cfe:	4620      	mov	r0, r4
 8005d00:	bd70      	pop	{r4, r5, r6, pc}
	uint64_t total_hist_counts  = 0;
 8005d02:	460b      	mov	r3, r1
 8005d04:	e7ec      	b.n	8005ce0 <VL53LX_events_per_spad_maths+0x18>

08005d06 <VL53LX_isqrt>:


uint32_t VL53LX_isqrt(uint32_t num)
{
 8005d06:	4602      	mov	r2, r0



	uint32_t  res = 0;
	uint32_t  bit = 1 << 30;
 8005d08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000


	while (bit > num)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d802      	bhi.n	8005d16 <VL53LX_isqrt+0x10>
	uint32_t  res = 0;
 8005d10:	2000      	movs	r0, #0
		bit >>= 2;

	while (bit != 0) {
 8005d12:	b913      	cbnz	r3, 8005d1a <VL53LX_isqrt+0x14>
		}
		bit >>= 2;
	}

	return res;
}
 8005d14:	4770      	bx	lr
		bit >>= 2;
 8005d16:	089b      	lsrs	r3, r3, #2
 8005d18:	e7f8      	b.n	8005d0c <VL53LX_isqrt+0x6>
		if (num >= res + bit)  {
 8005d1a:	18c1      	adds	r1, r0, r3
 8005d1c:	4291      	cmp	r1, r2
 8005d1e:	ea4f 0050 	mov.w	r0, r0, lsr #1
			res = (res >> 1) + bit;
 8005d22:	bf9c      	itt	ls
 8005d24:	18c0      	addls	r0, r0, r3
			num -= res + bit;
 8005d26:	1a52      	subls	r2, r2, r1
		bit >>= 2;
 8005d28:	089b      	lsrs	r3, r3, #2
 8005d2a:	e7f2      	b.n	8005d12 <VL53LX_isqrt+0xc>

08005d2c <VL53LX_hist_calc_zero_distance_phase>:
{


	uint8_t VL53LX_p_030 = 0;

	VL53LX_p_030 = (vcsel_period_reg + 1) << 1;
 8005d2c:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
	VL53LX_p_014 += (uint32_t)pdata->phasecal_result__reference_phase;
 8005d30:	f8b0 207e 	ldrh.w	r2, [r0, #126]	; 0x7e
	VL53LX_p_014 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 8005d34:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
	VL53LX_p_030 = (vcsel_period_reg + 1) << 1;
 8005d38:	3301      	adds	r3, #1
		(uint32_t)VL53LX_decode_vcsel_period(pdata->VL53LX_p_005);
 8005d3a:	031b      	lsls	r3, r3, #12
	if (period != 0)
 8005d3c:	f413 23fe 	ands.w	r3, r3, #520192	; 0x7f000
{
 8005d40:	b510      	push	{r4, lr}
	VL53LX_p_014 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 8005d42:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
	if (period != 0)
 8005d46:	d008      	beq.n	8005d5a <VL53LX_hist_calc_zero_distance_phase+0x2e>
	VL53LX_p_014 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 8005d48:	eb02 22c4 	add.w	r2, r2, r4, lsl #11
 8005d4c:	eba2 22c1 	sub.w	r2, r2, r1, lsl #11
 8005d50:	441a      	add	r2, r3
		VL53LX_p_014  = VL53LX_p_014 % period;
 8005d52:	fbb2 f1f3 	udiv	r1, r2, r3
 8005d56:	fb03 2311 	mls	r3, r3, r1, r2
	pdata->zero_distance_phase = (uint16_t)VL53LX_p_014;
 8005d5a:	f8a0 309c 	strh.w	r3, [r0, #156]	; 0x9c
}
 8005d5e:	bd10      	pop	{r4, pc}

08005d60 <VL53LX_hist_remove_ambient_bins>:
	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 8005d60:	7b03      	ldrb	r3, [r0, #12]
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	2b07      	cmp	r3, #7
{
 8005d68:	b530      	push	{r4, r5, lr}
	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 8005d6a:	d002      	beq.n	8005d72 <VL53LX_hist_remove_ambient_bins+0x12>
	if (pdata->number_of_ambient_bins > 0) {
 8005d6c:	7ac2      	ldrb	r2, [r0, #11]
 8005d6e:	bb02      	cbnz	r2, 8005db2 <VL53LX_hist_remove_ambient_bins+0x52>
}
 8005d70:	bd30      	pop	{r4, r5, pc}
 8005d72:	f100 020c 	add.w	r2, r0, #12
 8005d76:	f100 0512 	add.w	r5, r0, #18
		i = 0;
 8005d7a:	2300      	movs	r3, #0
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 8005d7c:	f812 4b01 	ldrb.w	r4, [r2], #1
 8005d80:	f004 0107 	and.w	r1, r4, #7
 8005d84:	2907      	cmp	r1, #7
 8005d86:	d005      	beq.n	8005d94 <VL53LX_hist_remove_ambient_bins+0x34>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 8005d88:	18c1      	adds	r1, r0, r3
				i++;
 8005d8a:	3301      	adds	r3, #1
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 8005d8c:	730c      	strb	r4, [r1, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 8005d8e:	7954      	ldrb	r4, [r2, #5]
 8005d90:	748c      	strb	r4, [r1, #18]
				i++;
 8005d92:	b2db      	uxtb	r3, r3
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 8005d94:	42aa      	cmp	r2, r5
 8005d96:	d1f1      	bne.n	8005d7c <VL53LX_hist_remove_ambient_bins+0x1c>
 8005d98:	f103 020c 	add.w	r2, r3, #12
 8005d9c:	4402      	add	r2, r0
			pdata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE + 1;
 8005d9e:	2110      	movs	r1, #16
			pdata->bin_rep[lc] = 0;
 8005da0:	2400      	movs	r4, #0
		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 8005da2:	2b05      	cmp	r3, #5
 8005da4:	d8e2      	bhi.n	8005d6c <VL53LX_hist_remove_ambient_bins+0xc>
			pdata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE + 1;
 8005da6:	f802 1b01 	strb.w	r1, [r2], #1
		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 8005daa:	3301      	adds	r3, #1
			pdata->bin_rep[lc] = 0;
 8005dac:	7154      	strb	r4, [r2, #5]
		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	e7f7      	b.n	8005da2 <VL53LX_hist_remove_ambient_bins+0x42>
				bin < pdata->VL53LX_p_020; bin++) {
 8005db2:	7a44      	ldrb	r4, [r0, #9]
 8005db4:	f100 0118 	add.w	r1, r0, #24
 8005db8:	4613      	mov	r3, r2
		for (bin = pdata->number_of_ambient_bins;
 8005dba:	429c      	cmp	r4, r3
 8005dbc:	d805      	bhi.n	8005dca <VL53LX_hist_remove_ambient_bins+0x6a>
				pdata->VL53LX_p_021 -
 8005dbe:	7a83      	ldrb	r3, [r0, #10]
 8005dc0:	1a9a      	subs	r2, r3, r2
		pdata->number_of_ambient_bins = 0;
 8005dc2:	2300      	movs	r3, #0
		pdata->VL53LX_p_021 =
 8005dc4:	7282      	strb	r2, [r0, #10]
		pdata->number_of_ambient_bins = 0;
 8005dc6:	72c3      	strb	r3, [r0, #11]
}
 8005dc8:	e7d2      	b.n	8005d70 <VL53LX_hist_remove_ambient_bins+0x10>
				pdata->bin_data[bin];
 8005dca:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 8005dce:	f841 5b04 	str.w	r5, [r1], #4
				bin < pdata->VL53LX_p_020; bin++) {
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	e7f0      	b.n	8005dba <VL53LX_hist_remove_ambient_bins+0x5a>

08005dd8 <VL53LX_calc_pll_period_mm>:
	if (fast_osc_frequency > 0)
 8005dd8:	b118      	cbz	r0, 8005de2 <VL53LX_calc_pll_period_mm+0xa>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 8005dda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005dde:	fbb3 f0f0 	udiv	r0, r3, r0
	pll_period_mm =
 8005de2:	f249 2357 	movw	r3, #37463	; 0x9257
			(pll_period_us >> 2);
 8005de6:	0880      	lsrs	r0, r0, #2
	pll_period_mm =
 8005de8:	4358      	muls	r0, r3
	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 8005dea:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
}
 8005dee:	0c00      	lsrs	r0, r0, #16
 8005df0:	4770      	bx	lr

08005df2 <VL53LX_rate_maths>:
	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_MAX)
 8005df2:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8005df6:	da16      	bge.n	8005e26 <VL53LX_rate_maths+0x34>
	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 8005df8:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005dfc:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 8005e00:	dd14      	ble.n	8005e2c <VL53LX_rate_maths+0x3a>
	if (time_us > 0)
 8005e02:	b141      	cbz	r1, 8005e16 <VL53LX_rate_maths+0x24>
		frac_bits = 3;
 8005e04:	2203      	movs	r2, #3
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 8005e06:	4093      	lsls	r3, r2
	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 8005e08:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 8005e0c:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8005e10:	fbb3 f3f1 	udiv	r3, r3, r1
	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 8005e14:	dd00      	ble.n	8005e18 <VL53LX_rate_maths+0x26>
		tmp_int = tmp_int << 4;
 8005e16:	011b      	lsls	r3, r3, #4
	rate_mcps =  (uint16_t)tmp_int;
 8005e18:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005e1c:	4283      	cmp	r3, r0
 8005e1e:	bf28      	it	cs
 8005e20:	4603      	movcs	r3, r0
	return rate_mcps;
 8005e22:	b298      	uxth	r0, r3
}
 8005e24:	4770      	bx	lr
		tmp_int = VL53LX_SPAD_TOTAL_COUNT_MAX;
 8005e26:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8005e2a:	e7ea      	b.n	8005e02 <VL53LX_rate_maths+0x10>
	if (time_us > 0)
 8005e2c:	2900      	cmp	r1, #0
 8005e2e:	d0f3      	beq.n	8005e18 <VL53LX_rate_maths+0x26>
		frac_bits = 7;
 8005e30:	2207      	movs	r2, #7
 8005e32:	e7e8      	b.n	8005e06 <VL53LX_rate_maths+0x14>

08005e34 <VL53LX_rate_per_spad_maths>:
{
 8005e34:	b530      	push	{r4, r5, lr}
	if (num_spads > 0) {
 8005e36:	b15a      	cbz	r2, 8005e50 <VL53LX_rate_per_spad_maths+0x1c>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 8005e38:	020d      	lsls	r5, r1, #8
 8005e3a:	fa05 f400 	lsl.w	r4, r5, r0
		tmp_int = (tmp_int +
 8005e3e:	eb04 0452 	add.w	r4, r4, r2, lsr #1
 8005e42:	fbb4 f0f2 	udiv	r0, r4, r2
	rate_per_spad = (uint16_t)tmp_int;
 8005e46:	4298      	cmp	r0, r3
 8005e48:	bf28      	it	cs
 8005e4a:	4618      	movcs	r0, r3
}
 8005e4c:	b280      	uxth	r0, r0
 8005e4e:	bd30      	pop	{r4, r5, pc}
		tmp_int = ((peak_count_rate) << frac_bits);
 8005e50:	fa01 f000 	lsl.w	r0, r1, r0
 8005e54:	e7f7      	b.n	8005e46 <VL53LX_rate_per_spad_maths+0x12>
	...

08005e58 <VL53LX_range_maths>:
{
 8005e58:	b5d0      	push	{r4, r6, r7, lr}
 8005e5a:	461c      	mov	r4, r3
	if (fast_osc_frequency > 0)
 8005e5c:	b118      	cbz	r0, 8005e66 <VL53LX_range_maths+0xe>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 8005e5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005e62:	fbb3 f0f0 	udiv	r0, r3, r0
	tmp_long_int = (int64_t)VL53LX_p_014 - (int64_t)zero_distance_phase;
 8005e66:	1a8e      	subs	r6, r1, r2
 8005e68:	eb61 0701 	sbc.w	r7, r1, r1
	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 8005e6c:	fba0 2306 	umull	r2, r3, r0, r6
 8005e70:	fb00 3307 	mla	r3, r0, r7, r3
	tmp_long_int =  tmp_long_int / (0x01 << 9);
 8005e74:	461f      	mov	r7, r3
 8005e76:	2a00      	cmp	r2, #0
 8005e78:	f177 0300 	sbcs.w	r3, r7, #0
 8005e7c:	4616      	mov	r6, r2
 8005e7e:	da06      	bge.n	8005e8e <VL53LX_range_maths+0x36>
 8005e80:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005e84:	1856      	adds	r6, r2, r1
 8005e86:	f04f 0100 	mov.w	r1, #0
 8005e8a:	eb41 0707 	adc.w	r7, r1, r7
 8005e8e:	0a72      	lsrs	r2, r6, #9
 8005e90:	ea42 52c7 	orr.w	r2, r2, r7, lsl #23
	tmp_long_int =  tmp_long_int * VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 8005e94:	f249 2157 	movw	r1, #37463	; 0x9257
 8005e98:	fba2 2301 	umull	r2, r3, r2, r1
	tmp_long_int =  tmp_long_int / (0x01 << 9);
 8005e9c:	1278      	asrs	r0, r7, #9
	tmp_long_int =  tmp_long_int * VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 8005e9e:	fb01 3300 	mla	r3, r1, r0, r3
	tmp_long_int =  tmp_long_int / (0x01 << 22);
 8005ea2:	461f      	mov	r7, r3
 8005ea4:	2a00      	cmp	r2, #0
 8005ea6:	f177 0300 	sbcs.w	r3, r7, #0
 8005eaa:	4616      	mov	r6, r2
 8005eac:	da05      	bge.n	8005eba <VL53LX_range_maths+0x62>
 8005eae:	4916      	ldr	r1, [pc, #88]	; (8005f08 <VL53LX_range_maths+0xb0>)
 8005eb0:	1856      	adds	r6, r2, r1
 8005eb2:	f04f 0100 	mov.w	r1, #0
 8005eb6:	eb41 0707 	adc.w	r7, r1, r7
	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 8005eba:	9905      	ldr	r1, [sp, #20]
	tmp_long_int =  tmp_long_int / (0x01 << 22);
 8005ebc:	0db2      	lsrs	r2, r6, #22
 8005ebe:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 8005ec2:	188b      	adds	r3, r1, r2
	range_mm *= gain_factor;
 8005ec4:	9904      	ldr	r1, [sp, #16]
 8005ec6:	4359      	muls	r1, r3
	range_mm += 0x0400;
 8005ec8:	f501 6380 	add.w	r3, r1, #1024	; 0x400
	range_mm /= 0x0800;
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	461a      	mov	r2, r3
 8005ed0:	bfb8      	it	lt
 8005ed2:	f601 32ff 	addwlt	r2, r1, #3071	; 0xbff
 8005ed6:	12d2      	asrs	r2, r2, #11
 8005ed8:	4610      	mov	r0, r2
	if (fractional_bits == 0) {
 8005eda:	b96c      	cbnz	r4, 8005ef8 <VL53LX_range_maths+0xa0>
		range_mm_10 = range_mm * 10;
 8005edc:	230a      	movs	r3, #10
		range_mm_10 = range_mm_10 / (0x01 << 2);
 8005ede:	435a      	muls	r2, r3
 8005ee0:	bf48      	it	mi
 8005ee2:	3203      	addmi	r2, #3
 8005ee4:	1092      	asrs	r2, r2, #2
		if ((range_mm_10 % 10) < 5)
 8005ee6:	fb92 f0f3 	sdiv	r0, r2, r3
 8005eea:	fb03 2210 	mls	r2, r3, r0, r2
 8005eee:	2a04      	cmp	r2, #4
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 8005ef0:	bfc8      	it	gt
 8005ef2:	3001      	addgt	r0, #1
 8005ef4:	b200      	sxth	r0, r0
}
 8005ef6:	bdd0      	pop	{r4, r6, r7, pc}
	} else if (fractional_bits == 1)
 8005ef8:	2c01      	cmp	r4, #1
 8005efa:	d1fc      	bne.n	8005ef6 <VL53LX_range_maths+0x9e>
		range_mm = range_mm / (0x01 << 1);
 8005efc:	1e18      	subs	r0, r3, #0
 8005efe:	bfb8      	it	lt
 8005f00:	f600 70ff 	addwlt	r0, r0, #4095	; 0xfff
 8005f04:	1300      	asrs	r0, r0, #12
	return range_mm;
 8005f06:	e7f6      	b.n	8005ef6 <VL53LX_range_maths+0x9e>
 8005f08:	003fffff 	.word	0x003fffff

08005f0c <VL53LX_decode_vcsel_period>:
	VL53LX_p_030 = (vcsel_period_reg + 1) << 1;
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	0040      	lsls	r0, r0, #1

	return VL53LX_p_030;
}
 8005f10:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 8005f14:	4770      	bx	lr

08005f16 <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>:
		VL53LX_xtalk_histogram_shape_t *pxtalk,
		VL53LX_histogram_bin_data_t    *phist)
{


	phist->cal_config__vcsel_start =
 8005f16:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8005f1a:	f881 3081 	strb.w	r3, [r1, #129]	; 0x81
			pxtalk->cal_config__vcsel_start;
	phist->VL53LX_p_015 =
 8005f1e:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
 8005f22:	f8a1 3086 	strh.w	r3, [r1, #134]	; 0x86
			pxtalk->VL53LX_p_015;
	phist->VL53LX_p_019 =
 8005f26:	7a03      	ldrb	r3, [r0, #8]
 8005f28:	720b      	strb	r3, [r1, #8]
			pxtalk->VL53LX_p_019;

	phist->phasecal_result__reference_phase   =
 8005f2a:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8005f2c:	f8a1 307e 	strh.w	r3, [r1, #126]	; 0x7e
			pxtalk->phasecal_result__reference_phase;
	phist->phasecal_result__vcsel_start       =
 8005f30:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8005f34:	f881 3080 	strb.w	r3, [r1, #128]	; 0x80
			pxtalk->phasecal_result__vcsel_start;

	phist->vcsel_width =
 8005f38:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8005f3c:	f8a1 3082 	strh.w	r3, [r1, #130]	; 0x82
			pxtalk->vcsel_width;
	phist->zero_distance_phase =
 8005f40:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8005f44:	f8a1 309c 	strh.w	r3, [r1, #156]	; 0x9c
			pxtalk->zero_distance_phase;

	phist->zone_id      = pxtalk->zone_id;
 8005f48:	7803      	ldrb	r3, [r0, #0]
 8005f4a:	708b      	strb	r3, [r1, #2]
	phist->VL53LX_p_020  = pxtalk->VL53LX_p_020;
 8005f4c:	7a43      	ldrb	r3, [r0, #9]
 8005f4e:	724b      	strb	r3, [r1, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 8005f50:	6843      	ldr	r3, [r0, #4]
 8005f52:	604b      	str	r3, [r1, #4]
}
 8005f54:	4770      	bx	lr
	...

08005f58 <VL53LX_init_histogram_bin_data_struct>:

void VL53LX_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53LX_p_021,
	VL53LX_histogram_bin_data_t *pdata)
{
 8005f58:	b530      	push	{r4, r5, lr}
	pdata->rd_device_state           = VL53LX_DEVICESTATE_SW_STANDBY;

	pdata->zone_id                   = 0;
	pdata->time_stamp                = 0;

	pdata->VL53LX_p_019                 = 0;
 8005f5a:	f44f 54c0 	mov.w	r4, #6144	; 0x1800
 8005f5e:	8114      	strh	r4, [r2, #8]
	pdata->number_of_ambient_samples          = 0;
	pdata->ambient_events_sum                 = 0;
	pdata->VL53LX_p_028             = 0;

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
		pdata->bin_seq[i] = (uint8_t)i;
 8005f60:	4d17      	ldr	r5, [pc, #92]	; (8005fc0 <VL53LX_init_histogram_bin_data_struct+0x68>)
 8005f62:	4c18      	ldr	r4, [pc, #96]	; (8005fc4 <VL53LX_init_histogram_bin_data_struct+0x6c>)
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 8005f64:	7291      	strb	r1, [r2, #10]
	pdata->cfg_device_state          = VL53LX_DEVICESTATE_SW_STANDBY;
 8005f66:	f240 3303 	movw	r3, #771	; 0x303
		pdata->bin_seq[i] = (uint8_t)i;
 8005f6a:	e9c2 5403 	strd	r5, r4, [r2, #12]
	pdata->cfg_device_state          = VL53LX_DEVICESTATE_SW_STANDBY;
 8005f6e:	8013      	strh	r3, [r2, #0]

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
		pdata->bin_rep[i] = 1;
 8005f70:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
	pdata->zone_id                   = 0;
 8005f74:	2300      	movs	r3, #0
		pdata->bin_rep[i] = 1;
 8005f76:	6154      	str	r4, [r2, #20]
	pdata->result__dss_actual_effective_spads = 0;
 8005f78:	e9c2 331e 	strd	r3, r3, [r2, #120]	; 0x78
	pdata->max_bin_value                      = 0;
 8005f7c:	e9c2 3325 	strd	r3, r3, [r2, #148]	; 0x94
	pdata->VL53LX_p_028             = 0;
 8005f80:	e9c2 3328 	strd	r3, r3, [r2, #160]	; 0xa0
	pdata->zone_id                   = 0;
 8005f84:	7093      	strb	r3, [r2, #2]
	pdata->time_stamp                = 0;
 8005f86:	6053      	str	r3, [r2, #4]
	pdata->phasecal_result__vcsel_start       = 0;
 8005f88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	pdata->VL53LX_p_005                       = 0;
 8005f8c:	f882 3084 	strb.w	r3, [r2, #132]	; 0x84
	pdata->VL53LX_p_015                = 0;
 8005f90:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 8005f94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	pdata->zero_distance_phase                = 0;
 8005f98:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 8005f9c:	f882 309e 	strb.w	r3, [r2, #158]	; 0x9e
	pdata->number_of_ambient_bins    = 0;
 8005fa0:	72d3      	strb	r3, [r2, #11]

	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
		if (i < VL53LX_p_021)
			pdata->bin_data[i] = bin_value;
		else
			pdata->bin_data[i] = 0;
 8005fa2:	461c      	mov	r4, r3
 8005fa4:	3218      	adds	r2, #24
		if (i < VL53LX_p_021)
 8005fa6:	b29d      	uxth	r5, r3
 8005fa8:	42a9      	cmp	r1, r5
			pdata->bin_data[i] = bin_value;
 8005faa:	f103 0301 	add.w	r3, r3, #1
 8005fae:	bf8c      	ite	hi
 8005fb0:	6010      	strhi	r0, [r2, #0]
			pdata->bin_data[i] = 0;
 8005fb2:	6014      	strls	r4, [r2, #0]
	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 8005fb4:	2b18      	cmp	r3, #24
 8005fb6:	f102 0204 	add.w	r2, r2, #4
 8005fba:	d1f4      	bne.n	8005fa6 <VL53LX_init_histogram_bin_data_struct+0x4e>


}
 8005fbc:	bd30      	pop	{r4, r5, pc}
 8005fbe:	bf00      	nop
 8005fc0:	03020100 	.word	0x03020100
 8005fc4:	01010504 	.word	0x01010504

08005fc8 <VL53LX_decode_row_col>:
	uint8_t  *pcol)
{



	if (spad_number > 127) {
 8005fc8:	0603      	lsls	r3, r0, #24
		*prow = 8 + ((255-spad_number) & 0x07);
 8005fca:	bf49      	itett	mi
 8005fcc:	43c3      	mvnmi	r3, r0
		*pcol = (spad_number-128) >> 3;
	} else {
		*prow = spad_number & 0x07;
 8005fce:	f000 0307 	andpl.w	r3, r0, #7
		*prow = 8 + ((255-spad_number) & 0x07);
 8005fd2:	f003 0307 	andmi.w	r3, r3, #7
		*pcol = (spad_number-128) >> 3;
 8005fd6:	3880      	submi	r0, #128	; 0x80
		*pcol = (127-spad_number) >> 3;
 8005fd8:	bf54      	ite	pl
 8005fda:	f1c0 007f 	rsbpl	r0, r0, #127	; 0x7f
		*prow = 8 + ((255-spad_number) & 0x07);
 8005fde:	3308      	addmi	r3, #8
		*pcol = (127-spad_number) >> 3;
 8005fe0:	ea4f 00e0 	mov.w	r0, r0, asr #3
		*prow = 8 + ((255-spad_number) & 0x07);
 8005fe4:	bf4c      	ite	mi
 8005fe6:	700b      	strbmi	r3, [r1, #0]
		*prow = spad_number & 0x07;
 8005fe8:	700b      	strbpl	r3, [r1, #0]
		*pcol = (127-spad_number) >> 3;
 8005fea:	7010      	strb	r0, [r2, #0]
	}
}
 8005fec:	4770      	bx	lr

08005fee <VL53LX_hist_find_min_max_bin_values>:


void  VL53LX_hist_find_min_max_bin_values(
	VL53LX_histogram_bin_data_t   *pdata)
{
 8005fee:	b570      	push	{r4, r5, r6, lr}

	uint8_t  bin            = 0;

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 8005ff0:	7a84      	ldrb	r4, [r0, #10]
 8005ff2:	f100 0318 	add.w	r3, r0, #24
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	b2ca      	uxtb	r2, r1
 8005ffa:	4294      	cmp	r4, r2
 8005ffc:	d800      	bhi.n	8006000 <VL53LX_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 8005ffe:	bd70      	pop	{r4, r5, r6, pc}
		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 8006000:	b162      	cbz	r2, 800601c <VL53LX_hist_find_min_max_bin_values+0x2e>
 8006002:	f8d0 6094 	ldr.w	r6, [r0, #148]	; 0x94
 8006006:	681d      	ldr	r5, [r3, #0]
 8006008:	42ae      	cmp	r6, r5
 800600a:	da07      	bge.n	800601c <VL53LX_hist_find_min_max_bin_values+0x2e>
		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800600c:	f8d0 5098 	ldr.w	r5, [r0, #152]	; 0x98
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	4295      	cmp	r5, r2
 8006014:	dd07      	ble.n	8006026 <VL53LX_hist_find_min_max_bin_values+0x38>
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 8006016:	3101      	adds	r1, #1
 8006018:	3304      	adds	r3, #4
 800601a:	e7ed      	b.n	8005ff8 <VL53LX_hist_find_min_max_bin_values+0xa>
			pdata->min_bin_value = pdata->bin_data[bin];
 800601c:	681d      	ldr	r5, [r3, #0]
 800601e:	f8c0 5094 	str.w	r5, [r0, #148]	; 0x94
		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 8006022:	2a00      	cmp	r2, #0
 8006024:	d1f2      	bne.n	800600c <VL53LX_hist_find_min_max_bin_values+0x1e>
			pdata->max_bin_value = pdata->bin_data[bin];
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	f8c0 2098 	str.w	r2, [r0, #152]	; 0x98
 800602c:	e7f3      	b.n	8006016 <VL53LX_hist_find_min_max_bin_values+0x28>

0800602e <VL53LX_hist_estimate_ambient_from_thresholded_bins>:
{
 800602e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006030:	460c      	mov	r4, r1
 8006032:	4605      	mov	r5, r0
	VL53LX_hist_find_min_max_bin_values(pdata);
 8006034:	4608      	mov	r0, r1
 8006036:	f7ff ffda 	bl	8005fee <VL53LX_hist_find_min_max_bin_values>
		(int32_t)VL53LX_isqrt((uint32_t)pdata->min_bin_value);
 800603a:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
 800603e:	4630      	mov	r0, r6
 8006040:	f7ff fe61 	bl	8005d06 <VL53LX_isqrt>
	VL53LX_p_031 *= ambient_threshold_sigma;
 8006044:	4368      	muls	r0, r5
	pdata->number_of_ambient_samples = 0;
 8006046:	2300      	movs	r3, #0
	VL53LX_p_031 += 0x07;
 8006048:	3007      	adds	r0, #7
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800604a:	7aa7      	ldrb	r7, [r4, #10]
	pdata->number_of_ambient_samples = 0;
 800604c:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
	VL53LX_p_031 += pdata->min_bin_value;
 8006050:	eb06 1020 	add.w	r0, r6, r0, asr #4
	pdata->ambient_events_sum        = 0;
 8006054:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 8006058:	f104 0518 	add.w	r5, r4, #24
 800605c:	b2d9      	uxtb	r1, r3
 800605e:	428f      	cmp	r7, r1
 8006060:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
 8006064:	d809      	bhi.n	800607a <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x4c>
	if (pdata->number_of_ambient_samples > 0) {
 8006066:	b13a      	cbz	r2, 8006078 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x4a>
		pdata->VL53LX_p_028 +=
 8006068:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800606c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
		pdata->VL53LX_p_028 /=
 8006070:	fb93 f2f2 	sdiv	r2, r3, r2
 8006074:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
}
 8006078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (pdata->bin_data[bin] < VL53LX_p_031) {
 800607a:	f855 6b04 	ldr.w	r6, [r5], #4
 800607e:	4286      	cmp	r6, r0
 8006080:	da07      	bge.n	8006092 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x64>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 8006082:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 8006086:	3201      	adds	r2, #1
			pdata->ambient_events_sum += pdata->bin_data[bin];
 8006088:	4431      	add	r1, r6
 800608a:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 800608e:	f884 209e 	strb.w	r2, [r4, #158]	; 0x9e
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 8006092:	3301      	adds	r3, #1
 8006094:	e7e2      	b.n	800605c <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x2e>

08006096 <VL53LX_hist_estimate_ambient_from_ambient_bins>:

	uint8_t  bin            = 0;

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 8006096:	7ac1      	ldrb	r1, [r0, #11]
{
 8006098:	b530      	push	{r4, r5, lr}
	if (pdata->number_of_ambient_bins > 0) {
 800609a:	b189      	cbz	r1, 80060c0 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x2a>
		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;



		pdata->ambient_events_sum = 0;
 800609c:	2200      	movs	r2, #0
		pdata->number_of_ambient_samples =
 800609e:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
		pdata->ambient_events_sum = 0;
 80060a2:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 80060a6:	f100 0518 	add.w	r5, r0, #24
 80060aa:	b2d4      	uxtb	r4, r2
 80060ac:	42a1      	cmp	r1, r4
 80060ae:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 80060b2:	d806      	bhi.n	80060c2 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x2c>
			pdata->ambient_events_sum += pdata->bin_data[bin];

		pdata->VL53LX_p_028 = pdata->ambient_events_sum;
		pdata->VL53LX_p_028 +=
 80060b4:	eb03 0351 	add.w	r3, r3, r1, lsr #1
				((int32_t)pdata->number_of_ambient_bins / 2);
		pdata->VL53LX_p_028 /=
 80060b8:	fb93 f3f1 	sdiv	r3, r3, r1
 80060bc:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;

	}

	LOG_FUNCTION_END(0);
}
 80060c0:	bd30      	pop	{r4, r5, pc}
			pdata->ambient_events_sum += pdata->bin_data[bin];
 80060c2:	f855 4b04 	ldr.w	r4, [r5], #4
 80060c6:	4423      	add	r3, r4
 80060c8:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 80060cc:	3201      	adds	r2, #1
 80060ce:	e7ec      	b.n	80060aa <VL53LX_hist_estimate_ambient_from_ambient_bins+0x14>

080060d0 <VL53LX_f_002>:
uint32_t VL53LX_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 80060d0:	b570      	push	{r4, r5, r6, lr}
 80060d2:	461c      	mov	r4, r3

	tmp32 = 4 * events_threshold;



	tmp32 += ((uint32_t)signal_thresh_sigma *
 80060d4:	435b      	muls	r3, r3
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53LX_isqrt(tmp32);
 80060d6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 80060da:	460e      	mov	r6, r1
 80060dc:	4615      	mov	r5, r2
	tmp32  = VL53LX_isqrt(tmp32);
 80060de:	f7ff fe12 	bl	8005d06 <VL53LX_isqrt>
	tmp32 += (uint32_t)signal_thresh_sigma;
 80060e2:	4404      	add	r4, r0



	range_mm =
		(uint32_t)VL53LX_isqrt(ref_signal_events << 4);
 80060e4:	0130      	lsls	r0, r6, #4
 80060e6:	f7ff fe0e 	bl	8005d06 <VL53LX_isqrt>
	range_mm *= ref_distance_mm;
 80060ea:	4368      	muls	r0, r5
	if (tmp32 != 0) {
 80060ec:	b11c      	cbz	r4, 80060f6 <VL53LX_f_002+0x26>
		range_mm += (tmp32);
 80060ee:	4420      	add	r0, r4
		range_mm /= (2*tmp32);
 80060f0:	0064      	lsls	r4, r4, #1
 80060f2:	fbb0 f0f4 	udiv	r0, r0, r4
	}

	return range_mm;

}
 80060f6:	bd70      	pop	{r4, r5, r6, pc}

080060f8 <VL53LX_f_001>:
{
 80060f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060fc:	b089      	sub	sp, #36	; 0x24
	pdata->VL53LX_p_009    = 0x0000;
 80060fe:	2700      	movs	r7, #0
{
 8006100:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8006102:	9007      	str	r0, [sp, #28]
	pdata->VL53LX_p_028     = 0x0000;
 8006104:	e9c4 7706 	strd	r7, r7, [r4, #24]
	pdata->VL53LX_p_036             = 0;
 8006108:	e9c4 7708 	strd	r7, r7, [r4, #32]
{
 800610c:	461d      	mov	r5, r3
	*pambient_dmax_mm  = 0;
 800610e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	pdata->VL53LX_p_033 = 0x0000;
 8006110:	e9c4 7704 	strd	r7, r7, [r4, #16]
	*pambient_dmax_mm  = 0;
 8006114:	801f      	strh	r7, [r3, #0]
	if ((pbins->VL53LX_p_015        != 0) &&
 8006116:	f8b5 0086 	ldrh.w	r0, [r5, #134]	; 0x86
{
 800611a:	468a      	mov	sl, r1
 800611c:	4616      	mov	r6, r2
	if ((pbins->VL53LX_p_015        != 0) &&
 800611e:	2800      	cmp	r0, #0
 8006120:	d042      	beq.n	80061a8 <VL53LX_f_001+0xb0>
 8006122:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8006126:	2b00      	cmp	r3, #0
 8006128:	d03e      	beq.n	80061a8 <VL53LX_f_001+0xb0>
			VL53LX_calc_pll_period_us(pbins->VL53LX_p_015);
 800612a:	f7ff fdb3 	bl	8005c94 <VL53LX_calc_pll_period_us>
		periods_elapsed = pbins->total_periods_elapsed + 1;
 800612e:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
			VL53LX_duration_maths(
 8006132:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006136:	3301      	adds	r3, #1
 8006138:	2110      	movs	r1, #16
 800613a:	f7ff fdb1 	bl	8005ca0 <VL53LX_duration_maths>
 800613e:	4601      	mov	r1, r0
		pdata->VL53LX_p_037  =
 8006140:	6020      	str	r0, [r4, #0]
			VL53LX_rate_maths(
 8006142:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
 8006146:	f7ff fe54 	bl	8005df2 <VL53LX_rate_maths>
			VL53LX_events_per_spad_maths(
 800614a:	6822      	ldr	r2, [r4, #0]
		pdata->VL53LX_p_034 =
 800614c:	8320      	strh	r0, [r4, #24]
			VL53LX_events_per_spad_maths(
 800614e:	f8b5 107c 	ldrh.w	r1, [r5, #124]	; 0x7c
 8006152:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
 8006156:	f7ff fdb7 	bl	8005cc8 <VL53LX_events_per_spad_maths>
		pdata->VL53LX_p_038 = pcfg->max_effective_spads;
 800615a:	f8b6 8016 	ldrh.w	r8, [r6, #22]
		pdata->VL53LX_p_033   =
 800615e:	6160      	str	r0, [r4, #20]
			VL53LX_events_per_spad_maths(
 8006160:	4602      	mov	r2, r0
		pdata->VL53LX_p_038 = pcfg->max_effective_spads;
 8006162:	f8a4 800c 	strh.w	r8, [r4, #12]
		pdata->VL53LX_p_004  = pcfg->max_effective_spads;
 8006166:	f8a4 801a 	strh.w	r8, [r4, #26]
		if (pdata->VL53LX_p_033 > 0) {
 800616a:	b1e8      	cbz	r0, 80061a8 <VL53LX_f_001+0xb0>
			tmp64  *= 1000;
 800616c:	f8b6 b018 	ldrh.w	fp, [r6, #24]
 8006170:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006174:	fbab bc03 	umull	fp, ip, fp, r3
			tmp64 <<= (11+1);
 8006178:	ea4f 310c 	mov.w	r1, ip, lsl #12
 800617c:	ea4f 300b 	mov.w	r0, fp, lsl #12
			tmp32 = pdata->VL53LX_p_033/2;
 8006180:	ea4f 0c52 	mov.w	ip, r2, lsr #1
			tmp64 = do_division_u(tmp64,
 8006184:	eb10 000c 	adds.w	r0, r0, ip
			tmp64 <<= (11+1);
 8006188:	ea41 511b 	orr.w	r1, r1, fp, lsr #20
			tmp64 = do_division_u(tmp64,
 800618c:	f141 0100 	adc.w	r1, r1, #0
 8006190:	463b      	mov	r3, r7
 8006192:	f7fa fd61 	bl	8000c58 <__aeabi_uldivmod>
			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 8006196:	f04f 0900 	mov.w	r9, #0
 800619a:	4549      	cmp	r1, r9
 800619c:	fa1f f888 	uxth.w	r8, r8
 80061a0:	bf08      	it	eq
 80061a2:	4540      	cmpeq	r0, r8
				pdata->VL53LX_p_004 = (uint16_t)tmp64;
 80061a4:	bf38      	it	cc
 80061a6:	8360      	strhcc	r0, [r4, #26]
	if ((pcal->ref__actual_effective_spads != 0) &&
 80061a8:	f8ba 2000 	ldrh.w	r2, [sl]
 80061ac:	2a00      	cmp	r2, #0
 80061ae:	f000 80b2 	beq.w	8006316 <VL53LX_f_001+0x21e>
 80061b2:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f000 80ad 	beq.w	8006316 <VL53LX_f_001+0x21e>
		(pcal->ref_reflectance_pc          != 0) &&
 80061bc:	f8ba b006 	ldrh.w	fp, [sl, #6]
		(pbins->VL53LX_p_015        != 0) &&
 80061c0:	f1bb 0f00 	cmp.w	fp, #0
 80061c4:	f000 80a7 	beq.w	8006316 <VL53LX_f_001+0x21e>
		(pcal->ref_reflectance_pc          != 0) &&
 80061c8:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 80a2 	beq.w	8006316 <VL53LX_f_001+0x21e>
		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 80061d2:	f8ba 8002 	ldrh.w	r8, [sl, #2]
		tmp64 *= (1000 * 256);
 80061d6:	f44f 307a 	mov.w	r0, #256000	; 0x3e800
		tmp32  = pcal->ref__actual_effective_spads/2;
 80061da:	0857      	lsrs	r7, r2, #1
		tmp64 *= (1000 * 256);
 80061dc:	fba8 0100 	umull	r0, r1, r8, r0
		tmp64  = do_division_u(tmp64,
 80061e0:	19c0      	adds	r0, r0, r7
 80061e2:	f04f 0300 	mov.w	r3, #0
 80061e6:	f141 0100 	adc.w	r1, r1, #0
 80061ea:	f7fa fd35 	bl	8000c58 <__aeabi_uldivmod>
		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	9305      	str	r3, [sp, #20]
		tmp64  *= (uint64_t)pdata->VL53LX_p_033;
 80061f2:	9a05      	ldr	r2, [sp, #20]
 80061f4:	6963      	ldr	r3, [r4, #20]
		pdata->VL53LX_p_009 <<= 4;
 80061f6:	0107      	lsls	r7, r0, #4
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 80061f8:	8b60      	ldrh	r0, [r4, #26]
		pdata->VL53LX_p_009 <<= 4;
 80061fa:	6127      	str	r7, [r4, #16]
		tmp64  *= (uint64_t)pdata->VL53LX_p_033;
 80061fc:	fba2 8903 	umull	r8, r9, r2, r3
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 8006200:	8b63      	ldrh	r3, [r4, #26]
 8006202:	9306      	str	r3, [sp, #24]
 8006204:	fba0 2308 	umull	r2, r3, r0, r8
 8006208:	fb00 3309 	mla	r3, r0, r9, r3
		tmp64  += (1<<(11+7));
 800620c:	f512 2080 	adds.w	r0, r2, #262144	; 0x40000
 8006210:	f143 0100 	adc.w	r1, r3, #0
		tmp64 >>= (11+8);
 8006214:	0cc3      	lsrs	r3, r0, #19
 8006216:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
		tmp64  +=  500;
 800621a:	f513 73fa 	adds.w	r3, r3, #500	; 0x1f4
		tmp64 >>= (11+8);
 800621e:	ea4f 42d1 	mov.w	r2, r1, lsr #19
		tmp64  +=  500;
 8006222:	9300      	str	r3, [sp, #0]
 8006224:	f142 0300 	adc.w	r3, r2, #0
 8006228:	9301      	str	r3, [sp, #4]
		if (tmp64 > 0x00FFFFFF)
 800622a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800622e:	2b03      	cmp	r3, #3
 8006230:	bf08      	it	eq
 8006232:	f1b2 4f68 	cmpeq.w	r2, #3892314112	; 0xe8000000
 8006236:	d272      	bcs.n	800631e <VL53LX_f_001+0x226>
		tmp64   = do_division_u(tmp64, 1000);
 8006238:	e9dd 0100 	ldrd	r0, r1, [sp]
 800623c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006240:	2300      	movs	r3, #0
 8006242:	f7fa fd09 	bl	8000c58 <__aeabi_uldivmod>
 8006246:	4680      	mov	r8, r0
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 8006248:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 800624c:	fba3 0102 	umull	r0, r1, r3, r2
 8006250:	fba0 2307 	umull	r2, r3, r0, r7
		tmp64  += (1<<(11+7));
 8006254:	f512 2080 	adds.w	r0, r2, #262144	; 0x40000
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 8006258:	fb07 3301 	mla	r3, r7, r1, r3
		tmp64 >>= (11+8);
 800625c:	ea4f 42d0 	mov.w	r2, r0, lsr #19
		tmp64  *= ((uint64_t)target_reflectance *
 8006260:	9907      	ldr	r1, [sp, #28]
 8006262:	f8ba 0008 	ldrh.w	r0, [sl, #8]
		pdata->VL53LX_p_028     = (uint32_t)tmp64;
 8006266:	f8c4 801c 	str.w	r8, [r4, #28]
		tmp64  += (1<<(11+7));
 800626a:	f143 0300 	adc.w	r3, r3, #0
		tmp64 >>= (11+8);
 800626e:	ea42 3243 	orr.w	r2, r2, r3, lsl #13
		tmp64  *= ((uint64_t)target_reflectance *
 8006272:	fba0 0101 	umull	r0, r1, r0, r1
		tmp64 >>= (11+8);
 8006276:	0cdb      	lsrs	r3, r3, #19
		tmp64  *= ((uint64_t)target_reflectance *
 8006278:	4343      	muls	r3, r0
 800627a:	fb02 3301 	mla	r3, r2, r1, r3
 800627e:	fba0 0102 	umull	r0, r1, r0, r2
 8006282:	4419      	add	r1, r3
		tmp64  = do_division_u(tmp64,
 8006284:	2780      	movs	r7, #128	; 0x80
 8006286:	ea4f 220b 	mov.w	r2, fp, lsl #8
 800628a:	2300      	movs	r3, #0
 800628c:	fbeb 0107 	umlal	r0, r1, fp, r7
 8006290:	f7fa fce2 	bl	8000c58 <__aeabi_uldivmod>
		tmp64  +=  500;
 8006294:	f510 73fa 	adds.w	r3, r0, #500	; 0x1f4
 8006298:	9302      	str	r3, [sp, #8]
 800629a:	f141 0300 	adc.w	r3, r1, #0
 800629e:	9303      	str	r3, [sp, #12]
		if (tmp64 > 0x00FFFFFF)
 80062a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062a4:	2b03      	cmp	r3, #3
 80062a6:	bf08      	it	eq
 80062a8:	f1b2 4f68 	cmpeq.w	r2, #3892314112	; 0xe8000000
 80062ac:	d23a      	bcs.n	8006324 <VL53LX_f_001+0x22c>
		tmp64  = do_division_u(tmp64, 1000);
 80062ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80062b6:	2300      	movs	r3, #0
 80062b8:	f7fa fcce 	bl	8000c58 <__aeabi_uldivmod>
		pdata->VL53LX_p_035 = (uint32_t)tmp64;
 80062bc:	6220      	str	r0, [r4, #32]
		tmp32  = VL53LX_isqrt(pdata->VL53LX_p_028 << 8);
 80062be:	ea4f 2008 	mov.w	r0, r8, lsl #8
 80062c2:	f7ff fd20 	bl	8005d06 <VL53LX_isqrt>
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 80062c6:	7873      	ldrb	r3, [r6, #1]
		if (pdata->VL53LX_p_028 <
 80062c8:	69e2      	ldr	r2, [r4, #28]
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 80062ca:	4358      	muls	r0, r3
		if (pdata->VL53LX_p_028 <
 80062cc:	6873      	ldr	r3, [r6, #4]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d204      	bcs.n	80062dc <VL53LX_f_001+0x1e4>
			amb_thres_delta =
 80062d2:	1a9b      	subs	r3, r3, r2
			amb_thres_delta <<= 8;
 80062d4:	021b      	lsls	r3, r3, #8
 80062d6:	4298      	cmp	r0, r3
 80062d8:	bf38      	it	cc
 80062da:	4618      	movcc	r0, r3
			(int16_t)VL53LX_f_002(
 80062dc:	7833      	ldrb	r3, [r6, #0]
 80062de:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80062e2:	6a21      	ldr	r1, [r4, #32]
 80062e4:	f7ff fef4 	bl	80060d0 <VL53LX_f_002>
		tmp32 *= (uint32_t)pbins->vcsel_width;
 80062e8:	f8b5 3082 	ldrh.w	r3, [r5, #130]	; 0x82
		tmp32  = (uint32_t)pdata->VL53LX_p_035;
 80062ec:	6a21      	ldr	r1, [r4, #32]
			(int16_t)VL53LX_f_002(
 80062ee:	84e0      	strh	r0, [r4, #38]	; 0x26
		tmp32 *= (uint32_t)pbins->vcsel_width;
 80062f0:	4359      	muls	r1, r3
			(int16_t)VL53LX_f_002(
 80062f2:	68b0      	ldr	r0, [r6, #8]
 80062f4:	7833      	ldrb	r3, [r6, #0]
 80062f6:	f8ba 2004 	ldrh.w	r2, [sl, #4]
		tmp32 += (1 << 3);
 80062fa:	3108      	adds	r1, #8
			(int16_t)VL53LX_f_002(
 80062fc:	0909      	lsrs	r1, r1, #4
 80062fe:	0200      	lsls	r0, r0, #8
 8006300:	f7ff fee6 	bl	80060d0 <VL53LX_f_002>
		if (pdata->VL53LX_p_036 < pdata->VL53LX_p_022)
 8006304:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	; 0x26
			(int16_t)VL53LX_f_002(
 8006308:	b200      	sxth	r0, r0
			*pambient_dmax_mm = pdata->VL53LX_p_036;
 800630a:	4298      	cmp	r0, r3
		pdata->VL53LX_p_036 =
 800630c:	84a0      	strh	r0, [r4, #36]	; 0x24
			*pambient_dmax_mm = pdata->VL53LX_p_036;
 800630e:	bfa8      	it	ge
 8006310:	4618      	movge	r0, r3
 8006312:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006314:	8018      	strh	r0, [r3, #0]
}
 8006316:	2000      	movs	r0, #0
 8006318:	b009      	add	sp, #36	; 0x24
 800631a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tmp64 = 0x00FFFFFF;
 800631e:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
 8006322:	e791      	b.n	8006248 <VL53LX_f_001+0x150>
			tmp64 = 0x00FFFFFF;
 8006324:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006328:	e7c8      	b.n	80062bc <VL53LX_f_001+0x1c4>

0800632a <VL53LX_f_003>:


	uint8_t  lb                 = 0;

	palgo->VL53LX_p_020              = VL53LX_HISTOGRAM_BUFFER_SIZE;
	palgo->VL53LX_p_019                = 0;
 800632a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
{
 800632e:	b510      	push	{r4, lr}
	palgo->VL53LX_p_019                = 0;
 8006330:	8003      	strh	r3, [r0, #0]
	palgo->VL53LX_p_021           = 0;
 8006332:	2300      	movs	r3, #0
	palgo->VL53LX_p_039         = 0;
	palgo->VL53LX_p_028   = 0;
	palgo->VL53LX_p_031 = 0;
 8006334:	e9c0 3302 	strd	r3, r3, [r0, #8]
{
 8006338:	4604      	mov	r4, r0
	palgo->VL53LX_p_021           = 0;
 800633a:	7083      	strb	r3, [r0, #2]
	palgo->VL53LX_p_039         = 0;
 800633c:	7103      	strb	r3, [r0, #4]

	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800633e:	f100 0210 	add.w	r2, r0, #16
 8006342:	f100 01b8 	add.w	r1, r0, #184	; 0xb8
 8006346:	3028      	adds	r0, #40	; 0x28
		palgo->VL53LX_p_040[lb]      = 0;
 8006348:	f802 3b01 	strb.w	r3, [r2], #1
		palgo->VL53LX_p_041[lb] = 0;
 800634c:	75d3      	strb	r3, [r2, #23]
		palgo->VL53LX_p_042[lb]     = 0;
 800634e:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
		palgo->VL53LX_p_043[lb]      = 0;
 8006352:	f841 3b04 	str.w	r3, [r1], #4
	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 8006356:	4282      	cmp	r2, r0
		palgo->VL53LX_p_018[lb]     = 0;
 8006358:	65cb      	str	r3, [r1, #92]	; 0x5c
	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800635a:	d1f5      	bne.n	8006348 <VL53LX_f_003+0x1e>
	}

	palgo->VL53LX_p_044 = 0;
 800635c:	f44f 6200 	mov.w	r2, #2048	; 0x800
	palgo->VL53LX_p_045               = VL53LX_D_001;
	palgo->VL53LX_p_046             = 0;
 8006360:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	palgo->VL53LX_p_044 = 0;
 8006364:	f8a4 2178 	strh.w	r2, [r4, #376]	; 0x178



	VL53LX_init_histogram_bin_data_struct(
 8006368:	2118      	movs	r1, #24
 800636a:	f504 7227 	add.w	r2, r4, #668	; 0x29c
 800636e:	2000      	movs	r0, #0
 8006370:	f7ff fdf2 	bl	8005f58 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_006));
	VL53LX_init_histogram_bin_data_struct(
 8006374:	f504 7252 	add.w	r2, r4, #840	; 0x348
 8006378:	2118      	movs	r1, #24
 800637a:	2000      	movs	r0, #0
 800637c:	f7ff fdec 	bl	8005f58 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_047));
	VL53LX_init_histogram_bin_data_struct(
 8006380:	f504 727d 	add.w	r2, r4, #1012	; 0x3f4
 8006384:	2118      	movs	r1, #24
 8006386:	2000      	movs	r0, #0
 8006388:	f7ff fde6 	bl	8005f58 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_048));
	VL53LX_init_histogram_bin_data_struct(
 800638c:	f504 6294 	add.w	r2, r4, #1184	; 0x4a0
 8006390:	2118      	movs	r1, #24
 8006392:	2000      	movs	r0, #0
 8006394:	f7ff fde0 	bl	8005f58 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_049));
	VL53LX_init_histogram_bin_data_struct(
 8006398:	f204 524c 	addw	r2, r4, #1356	; 0x54c
 800639c:	2118      	movs	r1, #24
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_050));
}
 800639e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	VL53LX_init_histogram_bin_data_struct(
 80063a2:	2000      	movs	r0, #0
 80063a4:	f7ff bdd8 	b.w	8005f58 <VL53LX_init_histogram_bin_data_struct>

080063a8 <VL53LX_f_006>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_histogram_bin_data_t           *pxtalk,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 80063a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ac:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 80063b0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80063b2:	4699      	mov	r9, r3
	int32_t  samples      = 0;

	LOG_FUNCTION_START("");


	palgo->VL53LX_p_020            = pbins->VL53LX_p_020;
 80063b4:	f89b 3009 	ldrb.w	r3, [fp, #9]
 80063b8:	7063      	strb	r3, [r4, #1]
	palgo->VL53LX_p_019              = pbins->VL53LX_p_019;
 80063ba:	f89b 3008 	ldrb.w	r3, [fp, #8]
 80063be:	7023      	strb	r3, [r4, #0]
	palgo->VL53LX_p_021         = pbins->VL53LX_p_021;
 80063c0:	f89b 300a 	ldrb.w	r3, [fp, #10]
 80063c4:	70a3      	strb	r3, [r4, #2]
	palgo->VL53LX_p_028 = pbins->VL53LX_p_028;
 80063c6:	f8db 30a4 	ldr.w	r3, [fp, #164]	; 0xa4
 80063ca:	60a3      	str	r3, [r4, #8]
{
 80063cc:	4682      	mov	sl, r0



	palgo->VL53LX_p_030 =
			VL53LX_decode_vcsel_period(pbins->VL53LX_p_005);
 80063ce:	f89b 0084 	ldrb.w	r0, [fp, #132]	; 0x84
{
 80063d2:	460d      	mov	r5, r1
 80063d4:	4690      	mov	r8, r2
			VL53LX_decode_vcsel_period(pbins->VL53LX_p_005);
 80063d6:	f7ff fd99 	bl	8005f0c <VL53LX_decode_vcsel_period>
	palgo->VL53LX_p_030 =
 80063da:	70e0      	strb	r0, [r4, #3]



	tmp  = (int64_t)pbins->VL53LX_p_028;
	tmp *= (int64_t)ambient_threshold_events_scaler;
	tmp += 2048;
 80063dc:	f8db 30a4 	ldr.w	r3, [fp, #164]	; 0xa4
 80063e0:	f44f 6600 	mov.w	r6, #2048	; 0x800
 80063e4:	2700      	movs	r7, #0
 80063e6:	fbca 6703 	smlal	r6, r7, sl, r3
	tmp = do_division_s(tmp, 4096);
 80063ea:	2e00      	cmp	r6, #0
 80063ec:	f177 0300 	sbcs.w	r3, r7, #0
 80063f0:	da06      	bge.n	8006400 <VL53LX_f_006+0x58>
 80063f2:	f640 73ff 	movw	r3, #4095	; 0xfff
 80063f6:	18f6      	adds	r6, r6, r3
 80063f8:	f04f 0300 	mov.w	r3, #0
 80063fc:	eb43 0707 	adc.w	r7, r3, r7
 8006400:	0b33      	lsrs	r3, r6, #12
 8006402:	ea43 5707 	orr.w	r7, r3, r7, lsl #20
	amb_events = (int32_t)tmp;



	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 8006406:	f04f 0a00 	mov.w	sl, #0
 800640a:	f89b 300a 	ldrb.w	r3, [fp, #10]
 800640e:	fa5f f68a 	uxtb.w	r6, sl
 8006412:	42b3      	cmp	r3, r6
 8006414:	d80c      	bhi.n	8006430 <VL53LX_f_006+0x88>

	}



	palgo->VL53LX_p_039 = 0;
 8006416:	2100      	movs	r1, #0
 8006418:	7121      	strb	r1, [r4, #4]

	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800641a:	f89b 3008 	ldrb.w	r3, [fp, #8]

		if (pbins->bin_data[lb] > palgo->VL53LX_p_052[lb]) {
			palgo->VL53LX_p_040[lb]      = 1;
 800641e:	2601      	movs	r6, #1
	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 8006420:	f89b 000a 	ldrb.w	r0, [fp, #10]
 8006424:	4298      	cmp	r0, r3
 8006426:	d831      	bhi.n	800648c <VL53LX_f_006+0xe4>

	LOG_FUNCTION_END(status);

	return status;

}
 8006428:	2000      	movs	r0, #0
 800642a:	b003      	add	sp, #12
 800642c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		samples = (int32_t)pbins->bin_rep[VL53LX_p_001];
 8006430:	eb0b 0396 	add.w	r3, fp, r6, lsr #2
 8006434:	7c9b      	ldrb	r3, [r3, #18]
		if (samples > 0) {
 8006436:	b31b      	cbz	r3, 8006480 <VL53LX_f_006+0xd8>
			if (lb < pxtalk->VL53LX_p_021 &&
 8006438:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800643a:	7a91      	ldrb	r1, [r2, #10]
 800643c:	42b1      	cmp	r1, r6
 800643e:	d922      	bls.n	8006486 <VL53LX_f_006+0xde>
 8006440:	f1b9 0f00 	cmp.w	r9, #0
 8006444:	d01f      	beq.n	8006486 <VL53LX_f_006+0xde>
					pxtalk->bin_data[lb]);
 8006446:	1db1      	adds	r1, r6, #6
				VL53LX_p_018 = samples * (amb_events +
 8006448:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800644c:	4438      	add	r0, r7
 800644e:	4358      	muls	r0, r3
 8006450:	9301      	str	r3, [sp, #4]
			VL53LX_p_018  = VL53LX_isqrt(VL53LX_p_018);
 8006452:	f7ff fc58 	bl	8005d06 <VL53LX_isqrt>
			VL53LX_p_018 += (samples/2);
 8006456:	9b01      	ldr	r3, [sp, #4]
 8006458:	eb00 0053 	add.w	r0, r0, r3, lsr #1
			VL53LX_p_018 /= samples;
 800645c:	fb90 f0f3 	sdiv	r0, r0, r3
			VL53LX_p_018 *= ambient_threshold_sigma;
 8006460:	4368      	muls	r0, r5
			VL53LX_p_018 /= 16;
 8006462:	f110 0308 	adds.w	r3, r0, #8
 8006466:	bf48      	it	mi
 8006468:	f100 0317 	addmi.w	r3, r0, #23
			VL53LX_p_018 += amb_events;
 800646c:	eb07 1323 	add.w	r3, r7, r3, asr #4
			if (VL53LX_p_018 < min_ambient_threshold_events)
 8006470:	4543      	cmp	r3, r8
			palgo->VL53LX_p_052[lb]             = VL53LX_p_018;
 8006472:	f106 0616 	add.w	r6, r6, #22
 8006476:	bfb8      	it	lt
 8006478:	4643      	movlt	r3, r8
 800647a:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
			palgo->VL53LX_p_031 = VL53LX_p_018;
 800647e:	60e3      	str	r3, [r4, #12]
	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 8006480:	f10a 0a01 	add.w	sl, sl, #1
 8006484:	e7c1      	b.n	800640a <VL53LX_f_006+0x62>
				VL53LX_p_018 = samples *  amb_events;
 8006486:	fb03 f007 	mul.w	r0, r3, r7
 800648a:	e7e1      	b.n	8006450 <VL53LX_f_006+0xa8>
		if (pbins->bin_data[lb] > palgo->VL53LX_p_052[lb]) {
 800648c:	1d9d      	adds	r5, r3, #6
 800648e:	f103 0016 	add.w	r0, r3, #22
 8006492:	f85b 5025 	ldr.w	r5, [fp, r5, lsl #2]
 8006496:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800649a:	4285      	cmp	r5, r0
 800649c:	eb04 0003 	add.w	r0, r4, r3
	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 80064a0:	f103 0301 	add.w	r3, r3, #1
			palgo->VL53LX_p_040[lb]      = 1;
 80064a4:	bfc3      	ittte	gt
 80064a6:	7406      	strbgt	r6, [r0, #16]
			palgo->VL53LX_p_041[lb] = 1;
 80064a8:	f880 6028 	strbgt.w	r6, [r0, #40]	; 0x28
			palgo->VL53LX_p_039++;
 80064ac:	7920      	ldrbgt	r0, [r4, #4]
			palgo->VL53LX_p_040[lb]      = 0;
 80064ae:	7401      	strble	r1, [r0, #16]
			palgo->VL53LX_p_039++;
 80064b0:	bfc6      	itte	gt
 80064b2:	3001      	addgt	r0, #1
 80064b4:	7120      	strbgt	r0, [r4, #4]
			palgo->VL53LX_p_041[lb] = 0;
 80064b6:	f880 1028 	strble.w	r1, [r0, #40]	; 0x28
	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	e7b0      	b.n	8006420 <VL53LX_f_006+0x78>

080064be <VL53LX_f_007>:



VL53LX_Error VL53LX_f_007(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 80064be:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t  j            = 0;
	uint8_t  found        = 0;

	LOG_FUNCTION_START("");

	palgo->VL53LX_p_044 = 0;
 80064c0:	2300      	movs	r3, #0

	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 80064c2:	78c4      	ldrb	r4, [r0, #3]
	palgo->VL53LX_p_044 = 0;
 80064c4:	f880 3178 	strb.w	r3, [r0, #376]	; 0x178
	uint8_t  found        = 0;
 80064c8:	461e      	mov	r6, r3
		j = (i + 1) % palgo->VL53LX_p_030;



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
			if (palgo->VL53LX_p_041[i] == 0 &&
 80064ca:	f100 0c28 	add.w	ip, r0, #40	; 0x28
 80064ce:	b2d9      	uxtb	r1, r3
	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 80064d0:	428c      	cmp	r4, r1
 80064d2:	d801      	bhi.n	80064d8 <VL53LX_f_007+0x1a>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80064d4:	2000      	movs	r0, #0
 80064d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 80064d8:	7887      	ldrb	r7, [r0, #2]
 80064da:	428f      	cmp	r7, r1
 80064dc:	f103 0501 	add.w	r5, r3, #1
 80064e0:	d913      	bls.n	800650a <VL53LX_f_007+0x4c>
		j = (i + 1) % palgo->VL53LX_p_030;
 80064e2:	fbb5 f2f4 	udiv	r2, r5, r4
 80064e6:	fb04 5212 	mls	r2, r4, r2, r5
		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 80064ea:	fa5f fe82 	uxtb.w	lr, r2
 80064ee:	4577      	cmp	r7, lr
 80064f0:	d90b      	bls.n	800650a <VL53LX_f_007+0x4c>
			if (palgo->VL53LX_p_041[i] == 0 &&
 80064f2:	f81c 3003 	ldrb.w	r3, [ip, r3]
 80064f6:	b943      	cbnz	r3, 800650a <VL53LX_f_007+0x4c>
				palgo->VL53LX_p_041[j] == 1 &&
 80064f8:	4402      	add	r2, r0
 80064fa:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d103      	bne.n	800650a <VL53LX_f_007+0x4c>
				palgo->VL53LX_p_041[j] == 1 &&
 8006502:	b916      	cbnz	r6, 800650a <VL53LX_f_007+0x4c>
				palgo->VL53LX_p_044 = i;
 8006504:	f880 1178 	strb.w	r1, [r0, #376]	; 0x178
				found = 1;
 8006508:	461e      	mov	r6, r3
	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800650a:	462b      	mov	r3, r5
 800650c:	e7df      	b.n	80064ce <VL53LX_f_007+0x10>

0800650e <VL53LX_f_008>:


VL53LX_Error VL53LX_f_008(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800650e:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t  j            = 0;
	uint8_t  lb            = 0;

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53LX_p_044;
 8006510:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
		lb < (palgo->VL53LX_p_044 +
		palgo->VL53LX_p_030);
 8006514:	78c4      	ldrb	r4, [r0, #3]
		lb < (palgo->VL53LX_p_044 +
 8006516:	191e      	adds	r6, r3, r4
	for (lb = palgo->VL53LX_p_044;
 8006518:	42b3      	cmp	r3, r6
 800651a:	db01      	blt.n	8006520 <VL53LX_f_008+0x12>

	LOG_FUNCTION_END(status);

	return status;

}
 800651c:	2000      	movs	r0, #0
 800651e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		i =  lb      % palgo->VL53LX_p_030;
 8006520:	fbb3 f2f4 	udiv	r2, r3, r4
		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 8006524:	7885      	ldrb	r5, [r0, #2]
		i =  lb      % palgo->VL53LX_p_030;
 8006526:	fb04 3212 	mls	r2, r4, r2, r3
 800652a:	b2d2      	uxtb	r2, r2
		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800652c:	4295      	cmp	r5, r2
 800652e:	f103 0301 	add.w	r3, r3, #1
 8006532:	d921      	bls.n	8006578 <VL53LX_f_008+0x6a>
		j = (lb + 1) % palgo->VL53LX_p_030;
 8006534:	fbb3 f1f4 	udiv	r1, r3, r4
 8006538:	fb04 3111 	mls	r1, r4, r1, r3
		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800653c:	b2cf      	uxtb	r7, r1
 800653e:	42bd      	cmp	r5, r7
 8006540:	d91a      	bls.n	8006578 <VL53LX_f_008+0x6a>
			if (palgo->VL53LX_p_041[i] == 0 &&
 8006542:	4402      	add	r2, r0
 8006544:	f892 5028 	ldrb.w	r5, [r2, #40]	; 0x28
 8006548:	b94d      	cbnz	r5, 800655e <VL53LX_f_008+0x50>
				palgo->VL53LX_p_041[j] == 1)
 800654a:	4401      	add	r1, r0
			if (palgo->VL53LX_p_041[i] == 0 &&
 800654c:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8006550:	2901      	cmp	r1, #1
				palgo->VL53LX_p_046++;
 8006552:	bf02      	ittt	eq
 8006554:	f890 117a 	ldrbeq.w	r1, [r0, #378]	; 0x17a
 8006558:	3101      	addeq	r1, #1
 800655a:	f880 117a 	strbeq.w	r1, [r0, #378]	; 0x17a
			if (palgo->VL53LX_p_046 > palgo->VL53LX_p_045)
 800655e:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
 8006562:	f890 717a 	ldrb.w	r7, [r0, #378]	; 0x17a
 8006566:	428f      	cmp	r7, r1
				palgo->VL53LX_p_046 = palgo->VL53LX_p_045;
 8006568:	bf88      	it	hi
 800656a:	f880 117a 	strbhi.w	r1, [r0, #378]	; 0x17a
			if (palgo->VL53LX_p_041[i] > 0)
 800656e:	b12d      	cbz	r5, 800657c <VL53LX_f_008+0x6e>
				palgo->VL53LX_p_042[i] = palgo->VL53LX_p_046;
 8006570:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
 8006574:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
		lb++) {
 8006578:	b2db      	uxtb	r3, r3
 800657a:	e7cd      	b.n	8006518 <VL53LX_f_008+0xa>
				palgo->VL53LX_p_042[i] = 0;
 800657c:	f882 5040 	strb.w	r5, [r2, #64]	; 0x40
 8006580:	e7fa      	b.n	8006578 <VL53LX_f_008+0x6a>

08006582 <VL53LX_f_009>:


VL53LX_Error VL53LX_f_009(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 8006582:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53LX_p_030 - 1;
 8006586:	78c4      	ldrb	r4, [r0, #3]
	max_filter_half_width = max_filter_half_width >> 1;

	for (blb = palgo->VL53LX_p_044;
 8006588:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
	max_filter_half_width = palgo->VL53LX_p_030 - 1;
 800658c:	1e66      	subs	r6, r4, #1
	max_filter_half_width = max_filter_half_width >> 1;
 800658e:	f3c6 0646 	ubfx	r6, r6, #1, #7
		blb < (palgo->VL53LX_p_044 +
 8006592:	eb01 0c04 	add.w	ip, r1, r4
				pulse_no = palgo->VL53LX_p_042[i] - 1;

				if (pulse_no < palgo->VL53LX_p_045) {
					pdata = &(palgo->VL53LX_p_003[pulse_no]);

					pdata->VL53LX_p_024    = blb;
 8006596:	2724      	movs	r7, #36	; 0x24
					pdata->VL53LX_p_023   = 0xFF;
 8006598:	f04f 0eff 	mov.w	lr, #255	; 0xff
	for (blb = palgo->VL53LX_p_044;
 800659c:	4561      	cmp	r1, ip
 800659e:	db02      	blt.n	80065a6 <VL53LX_f_009+0x24>

	LOG_FUNCTION_END(status);

	return status;

}
 80065a0:	2000      	movs	r0, #0
 80065a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (i < palgo->VL53LX_p_021 &&
 80065a6:	f890 9002 	ldrb.w	r9, [r0, #2]
		i =  blb      % palgo->VL53LX_p_030;
 80065aa:	fbb1 f3f4 	udiv	r3, r1, r4
 80065ae:	fb04 1313 	mls	r3, r4, r3, r1
 80065b2:	b2db      	uxtb	r3, r3
		if (i < palgo->VL53LX_p_021 &&
 80065b4:	1c4a      	adds	r2, r1, #1
 80065b6:	4599      	cmp	r9, r3
 80065b8:	b2d5      	uxtb	r5, r2
 80065ba:	d920      	bls.n	80065fe <VL53LX_f_009+0x7c>
		j = (blb + 1) % palgo->VL53LX_p_030;
 80065bc:	fbb2 f8f4 	udiv	r8, r2, r4
 80065c0:	fb04 2818 	mls	r8, r4, r8, r2
		if (i < palgo->VL53LX_p_021 &&
 80065c4:	fa5f f288 	uxtb.w	r2, r8
 80065c8:	4591      	cmp	r9, r2
 80065ca:	d918      	bls.n	80065fe <VL53LX_f_009+0x7c>
			if (palgo->VL53LX_p_042[i] == 0 &&
 80065cc:	4403      	add	r3, r0
 80065ce:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80065d2:	eb00 0308 	add.w	r3, r0, r8
					palgo->VL53LX_p_042[j] > 0) {
 80065d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
			if (palgo->VL53LX_p_042[i] == 0 &&
 80065da:	b992      	cbnz	r2, 8006602 <VL53LX_f_009+0x80>
 80065dc:	b17b      	cbz	r3, 80065fe <VL53LX_f_009+0x7c>
				if (pulse_no < palgo->VL53LX_p_045) {
 80065de:	f890 8179 	ldrb.w	r8, [r0, #377]	; 0x179
				pulse_no = palgo->VL53LX_p_042[j] - 1;
 80065e2:	3b01      	subs	r3, #1
 80065e4:	b2db      	uxtb	r3, r3
				if (pulse_no < palgo->VL53LX_p_045) {
 80065e6:	4598      	cmp	r8, r3
 80065e8:	d909      	bls.n	80065fe <VL53LX_f_009+0x7c>
					pdata->VL53LX_p_012 = blb;
 80065ea:	fb07 0303 	mla	r3, r7, r3, r0
 80065ee:	f883 117c 	strb.w	r1, [r3, #380]	; 0x17c
					pdata->VL53LX_p_019    = blb + 1;
 80065f2:	f883 517d 	strb.w	r5, [r3, #381]	; 0x17d
					pdata->VL53LX_p_023   = 0xFF;
 80065f6:	f8a3 e17e 	strh.w	lr, [r3, #382]	; 0x17e
					pdata->VL53LX_p_013   = 0;
 80065fa:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
		blb++) {
 80065fe:	4629      	mov	r1, r5
 8006600:	e7cc      	b.n	800659c <VL53LX_f_009+0x1a>
				&& palgo->VL53LX_p_042[j] == 0) {
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1fb      	bne.n	80065fe <VL53LX_f_009+0x7c>
				pulse_no = palgo->VL53LX_p_042[i] - 1;
 8006606:	1e53      	subs	r3, r2, #1
				if (pulse_no < palgo->VL53LX_p_045) {
 8006608:	f890 2179 	ldrb.w	r2, [r0, #377]	; 0x179
				pulse_no = palgo->VL53LX_p_042[i] - 1;
 800660c:	b2db      	uxtb	r3, r3
				if (pulse_no < palgo->VL53LX_p_045) {
 800660e:	429a      	cmp	r2, r3
 8006610:	d9f5      	bls.n	80065fe <VL53LX_f_009+0x7c>
					pdata->VL53LX_p_024    = blb;
 8006612:	fb07 0303 	mla	r3, r7, r3, r0
						(pdata->VL53LX_p_024 + 1) -
 8006616:	f893 217d 	ldrb.w	r2, [r3, #381]	; 0x17d
					pdata->VL53LX_p_024    = blb;
 800661a:	f883 117f 	strb.w	r1, [r3, #383]	; 0x17f
						(pdata->VL53LX_p_024 + 1) -
 800661e:	3101      	adds	r1, #1
 8006620:	1a89      	subs	r1, r1, r2
					pdata->VL53LX_p_025 =
 8006622:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
						(pdata->VL53LX_p_013 + 1) -
 8006626:	f893 117c 	ldrb.w	r1, [r3, #380]	; 0x17c
					pdata->VL53LX_p_013  = blb + 1;
 800662a:	f883 5180 	strb.w	r5, [r3, #384]	; 0x180
						(pdata->VL53LX_p_013 + 1) -
 800662e:	1c6a      	adds	r2, r5, #1
 8006630:	1a52      	subs	r2, r2, r1
 8006632:	b2d2      	uxtb	r2, r2
					pdata->VL53LX_p_051 =
 8006634:	42b2      	cmp	r2, r6
 8006636:	bf28      	it	cs
 8006638:	4632      	movcs	r2, r6
 800663a:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
 800663e:	e7de      	b.n	80065fe <VL53LX_f_009+0x7c>

08006640 <VL53LX_f_016>:


VL53LX_Error VL53LX_f_016(
	VL53LX_HistTargetOrder                target_order,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 8006640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t i       = 0;
	uint8_t swapped = 1;

	LOG_FUNCTION_START("");

	if (!(palgo->VL53LX_p_046 > 1))
 8006644:	f891 317a 	ldrb.w	r3, [r1, #378]	; 0x17a
 8006648:	2b01      	cmp	r3, #1
{
 800664a:	b08a      	sub	sp, #40	; 0x28
 800664c:	4606      	mov	r6, r0
 800664e:	460c      	mov	r4, r1
	if (!(palgo->VL53LX_p_046 > 1))
 8006650:	f200 8082 	bhi.w	8006758 <VL53LX_f_016+0x118>
ENDFUNC:
	LOG_FUNCTION_END(status);

	return status;

}
 8006654:	2000      	movs	r0, #0
 8006656:	b00a      	add	sp, #40	; 0x28
 8006658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			p0 = &(palgo->VL53LX_p_003[i-1]);
 800665c:	1e69      	subs	r1, r5, #1
 800665e:	4379      	muls	r1, r7
 8006660:	f501 73be 	add.w	r3, r1, #380	; 0x17c
			p1 = &(palgo->VL53LX_p_003[i]);
 8006664:	f501 72d0 	add.w	r2, r1, #416	; 0x1a0
 8006668:	fb07 fe05 	mul.w	lr, r7, r5
			if (target_order
 800666c:	2e02      	cmp	r6, #2
			p0 = &(palgo->VL53LX_p_003[i-1]);
 800666e:	4423      	add	r3, r4
			p1 = &(palgo->VL53LX_p_003[i]);
 8006670:	4422      	add	r2, r4
			if (target_order
 8006672:	4421      	add	r1, r4
						p1->VL53LX_p_010) {
 8006674:	44a6      	add	lr, r4
			if (target_order
 8006676:	d13f      	bne.n	80066f8 <VL53LX_f_016+0xb8>
				if (p0->VL53LX_p_010 <
 8006678:	f8d1 818c 	ldr.w	r8, [r1, #396]	; 0x18c
 800667c:	f8de 118c 	ldr.w	r1, [lr, #396]	; 0x18c
 8006680:	4588      	cmp	r8, r1
 8006682:	da2c      	bge.n	80066de <VL53LX_f_016+0x9e>
					memcpy(ptmp,
 8006684:	4696      	mov	lr, r2
 8006686:	f10d 0804 	add.w	r8, sp, #4
 800668a:	f102 0a20 	add.w	sl, r2, #32
 800668e:	f8de 0000 	ldr.w	r0, [lr]
 8006692:	f8de 1004 	ldr.w	r1, [lr, #4]
 8006696:	46c1      	mov	r9, r8
 8006698:	e8a9 0003 	stmia.w	r9!, {r0, r1}
 800669c:	f10e 0e08 	add.w	lr, lr, #8
 80066a0:	45d6      	cmp	lr, sl
 80066a2:	46c8      	mov	r8, r9
 80066a4:	d1f3      	bne.n	800668e <VL53LX_f_016+0x4e>
 80066a6:	f8de 0000 	ldr.w	r0, [lr]
 80066aa:	f8c9 0000 	str.w	r0, [r9]
					memcpy(p1,
 80066ae:	4619      	mov	r1, r3
 80066b0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80066b4:	f851 eb04 	ldr.w	lr, [r1], #4
 80066b8:	f842 eb04 	str.w	lr, [r2], #4
 80066bc:	4281      	cmp	r1, r0
 80066be:	d1f9      	bne.n	80066b4 <VL53LX_f_016+0x74>
					memcpy(p0,
 80066c0:	f10d 0e04 	add.w	lr, sp, #4
 80066c4:	4672      	mov	r2, lr
 80066c6:	ca03      	ldmia	r2!, {r0, r1}
 80066c8:	4562      	cmp	r2, ip
 80066ca:	6018      	str	r0, [r3, #0]
 80066cc:	6059      	str	r1, [r3, #4]
 80066ce:	4696      	mov	lr, r2
 80066d0:	f103 0308 	add.w	r3, r3, #8
 80066d4:	d1f6      	bne.n	80066c4 <VL53LX_f_016+0x84>
					memcpy(p0,
 80066d6:	f8de 0000 	ldr.w	r0, [lr]
 80066da:	6018      	str	r0, [r3, #0]
					swapped = 1;
 80066dc:	2001      	movs	r0, #1
		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 80066de:	3501      	adds	r5, #1
 80066e0:	4603      	mov	r3, r0
 80066e2:	b2e8      	uxtb	r0, r5
		swapped = 0;
 80066e4:	4605      	mov	r5, r0
 80066e6:	4618      	mov	r0, r3
		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 80066e8:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
 80066ec:	42ab      	cmp	r3, r5
 80066ee:	d8b5      	bhi.n	800665c <VL53LX_f_016+0x1c>
	while (swapped > 0) {
 80066f0:	2800      	cmp	r0, #0
 80066f2:	d0af      	beq.n	8006654 <VL53LX_f_016+0x14>
		swapped = 0;
 80066f4:	2300      	movs	r3, #0
 80066f6:	e7f5      	b.n	80066e4 <VL53LX_f_016+0xa4>
				if (p0->VL53LX_p_011 > p1->VL53LX_p_011) {
 80066f8:	f8d1 8194 	ldr.w	r8, [r1, #404]	; 0x194
 80066fc:	f8de 1194 	ldr.w	r1, [lr, #404]	; 0x194
 8006700:	4588      	cmp	r8, r1
 8006702:	d9ec      	bls.n	80066de <VL53LX_f_016+0x9e>
					memcpy(ptmp,
 8006704:	4696      	mov	lr, r2
 8006706:	f10d 0804 	add.w	r8, sp, #4
 800670a:	f102 0a20 	add.w	sl, r2, #32
 800670e:	f8de 0000 	ldr.w	r0, [lr]
 8006712:	f8de 1004 	ldr.w	r1, [lr, #4]
 8006716:	46c1      	mov	r9, r8
 8006718:	e8a9 0003 	stmia.w	r9!, {r0, r1}
 800671c:	f10e 0e08 	add.w	lr, lr, #8
 8006720:	45d6      	cmp	lr, sl
 8006722:	46c8      	mov	r8, r9
 8006724:	d1f3      	bne.n	800670e <VL53LX_f_016+0xce>
 8006726:	f8de 0000 	ldr.w	r0, [lr]
 800672a:	f8c9 0000 	str.w	r0, [r9]
					memcpy(p1,
 800672e:	4619      	mov	r1, r3
 8006730:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006734:	f851 eb04 	ldr.w	lr, [r1], #4
 8006738:	f842 eb04 	str.w	lr, [r2], #4
 800673c:	4281      	cmp	r1, r0
 800673e:	d1f9      	bne.n	8006734 <VL53LX_f_016+0xf4>
					memcpy(p0,
 8006740:	f10d 0e04 	add.w	lr, sp, #4
 8006744:	4672      	mov	r2, lr
 8006746:	ca03      	ldmia	r2!, {r0, r1}
 8006748:	4562      	cmp	r2, ip
 800674a:	6018      	str	r0, [r3, #0]
 800674c:	6059      	str	r1, [r3, #4]
 800674e:	4696      	mov	lr, r2
 8006750:	f103 0308 	add.w	r3, r3, #8
 8006754:	d1f6      	bne.n	8006744 <VL53LX_f_016+0x104>
 8006756:	e7be      	b.n	80066d6 <VL53LX_f_016+0x96>
 8006758:	2724      	movs	r7, #36	; 0x24
		swapped = 0;
 800675a:	2000      	movs	r0, #0
		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800675c:	2501      	movs	r5, #1
					memcpy(p0,
 800675e:	eb0d 0c07 	add.w	ip, sp, r7
 8006762:	e7c1      	b.n	80066e8 <VL53LX_f_016+0xa8>

08006764 <VL53LX_f_010>:

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_017  = 0;
 8006764:	2324      	movs	r3, #36	; 0x24
 8006766:	fb03 2000 	mla	r0, r3, r0, r2
 800676a:	2300      	movs	r3, #0
{
 800676c:	b5f0      	push	{r4, r5, r6, r7, lr}
	pdata->VL53LX_p_016 = 0;
 800676e:	e9c0 3361 	strd	r3, r3, [r0, #388]	; 0x184

	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 8006772:	f890 417c 	ldrb.w	r4, [r0, #380]	; 0x17c
 8006776:	f890 6180 	ldrb.w	r6, [r0, #384]	; 0x180
 800677a:	f8d0 5188 	ldr.w	r5, [r0, #392]	; 0x188
 800677e:	42a6      	cmp	r6, r4
 8006780:	d206      	bcs.n	8006790 <VL53LX_f_010+0x2c>
	}



	pdata->VL53LX_p_010 =
		pdata->VL53LX_p_017 - pdata->VL53LX_p_016;
 8006782:	f8d0 3184 	ldr.w	r3, [r0, #388]	; 0x184
 8006786:	1aed      	subs	r5, r5, r3
	pdata->VL53LX_p_010 =
 8006788:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c

	LOG_FUNCTION_END(status);

	return status;
}
 800678c:	2000      	movs	r0, #0
 800678e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		i =  lb % palgo->VL53LX_p_030;
 8006790:	78d7      	ldrb	r7, [r2, #3]
 8006792:	fbb4 f3f7 	udiv	r3, r4, r7
 8006796:	fb07 4313 	mls	r3, r7, r3, r4
		pdata->VL53LX_p_017  += pbins->bin_data[i];
 800679a:	b2db      	uxtb	r3, r3
 800679c:	3306      	adds	r3, #6
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800679e:	3401      	adds	r4, #1
		pdata->VL53LX_p_017  += pbins->bin_data[i];
 80067a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80067a4:	441d      	add	r5, r3
 80067a6:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
		pdata->VL53LX_p_016 += palgo->VL53LX_p_028;
 80067aa:	f8d0 3184 	ldr.w	r3, [r0, #388]	; 0x184
 80067ae:	6895      	ldr	r5, [r2, #8]
 80067b0:	442b      	add	r3, r5
 80067b2:	f8c0 3184 	str.w	r3, [r0, #388]	; 0x184
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 80067b6:	b2e4      	uxtb	r4, r4
 80067b8:	e7df      	b.n	800677a <VL53LX_f_010+0x16>

080067ba <VL53LX_f_020>:
	int16_t                            VL53LX_p_024,
	uint8_t                            VL53LX_p_030,
	uint8_t                            clip_events,
	VL53LX_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 80067ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067be:	b085      	sub	sp, #20
 80067c0:	468b      	mov	fp, r1
	int64_t event_sum     = 0;
	int64_t weighted_sum  = 0;

	LOG_FUNCTION_START("");

	*pphase = VL53LX_MAX_ALLOWED_PHASE;
 80067c2:	990f      	ldr	r1, [sp, #60]	; 0x3c
{
 80067c4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80067c8:	469a      	mov	sl, r3
	*pphase = VL53LX_MAX_ALLOWED_PHASE;
 80067ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067ce:	600b      	str	r3, [r1, #0]

	if (VL53LX_p_030 != 0)
 80067d0:	4696      	mov	lr, r2
 80067d2:	2a00      	cmp	r2, #0
 80067d4:	d15c      	bne.n	8006890 <VL53LX_f_020+0xd6>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80067d6:	2000      	movs	r0, #0
 80067d8:	b005      	add	sp, #20
 80067da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (lb < 0)
 80067de:	2800      	cmp	r0, #0
			i = lb + (int16_t)VL53LX_p_030;
 80067e0:	bfb2      	itee	lt
 80067e2:	eb0e 0400 	addlt.w	r4, lr, r0
			i = lb % (int16_t)VL53LX_p_030;
 80067e6:	fbb0 f4fe 	udivge	r4, r0, lr
 80067ea:	fb0e 0414 	mlsge	r4, lr, r4, r0
 80067ee:	b224      	sxth	r4, r4
		if ((i >= 0) && (i < VL53LX_HISTOGRAM_BUFFER_SIZE)) {
 80067f0:	b2a5      	uxth	r5, r4
 80067f2:	2d17      	cmp	r5, #23
 80067f4:	d830      	bhi.n	8006858 <VL53LX_f_020+0x9e>
				(int64_t)pbins->bin_data[i] -
 80067f6:	3406      	adds	r4, #6
				(int64_t)pbins->VL53LX_p_028;
 80067f8:	f8d9 60a4 	ldr.w	r6, [r9, #164]	; 0xa4
				(int64_t)pbins->bin_data[i] -
 80067fc:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8006800:	17e5      	asrs	r5, r4, #31
			VL53LX_p_018 =
 8006802:	1ba4      	subs	r4, r4, r6
 8006804:	eb65 75e6 	sbc.w	r5, r5, r6, asr #31
 8006808:	e9cd 4500 	strd	r4, r5, [sp]
			if (clip_events > 0 && VL53LX_p_018 < 0)
 800680c:	f1ba 0f00 	cmp.w	sl, #0
 8006810:	d007      	beq.n	8006822 <VL53LX_f_020+0x68>
 8006812:	2c00      	cmp	r4, #0
 8006814:	f175 0400 	sbcs.w	r4, r5, #0
 8006818:	bfbe      	ittt	lt
 800681a:	2400      	movlt	r4, #0
 800681c:	2500      	movlt	r5, #0
 800681e:	e9cd 4500 	strdlt	r4, r5, [sp]
				(VL53LX_p_018 * (1024 + (2048*(int64_t)lb)));
 8006822:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8006826:	2700      	movs	r7, #0
 8006828:	fbc0 6708 	smlal	r6, r7, r0, r8
			event_sum += VL53LX_p_018;
 800682c:	9c00      	ldr	r4, [sp, #0]
				(VL53LX_p_018 * (1024 + (2048*(int64_t)lb)));
 800682e:	e9cd 6702 	strd	r6, r7, [sp, #8]
			event_sum += VL53LX_p_018;
 8006832:	1912      	adds	r2, r2, r4
 8006834:	9c01      	ldr	r4, [sp, #4]
				(VL53LX_p_018 * (1024 + (2048*(int64_t)lb)));
 8006836:	9e00      	ldr	r6, [sp, #0]
			event_sum += VL53LX_p_018;
 8006838:	eb44 0303 	adc.w	r3, r4, r3
				(VL53LX_p_018 * (1024 + (2048*(int64_t)lb)));
 800683c:	e9dd 5401 	ldrd	r5, r4, [sp, #4]
 8006840:	4365      	muls	r5, r4
 8006842:	9c03      	ldr	r4, [sp, #12]
 8006844:	fb06 5704 	mla	r7, r6, r4, r5
 8006848:	9c02      	ldr	r4, [sp, #8]
 800684a:	fba4 4506 	umull	r4, r5, r4, r6
 800684e:	443d      	add	r5, r7
			weighted_sum +=
 8006850:	eb1c 0c04 	adds.w	ip, ip, r4
 8006854:	eb45 0101 	adc.w	r1, r5, r1
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 8006858:	3001      	adds	r0, #1
 800685a:	b200      	sxth	r0, r0
 800685c:	4583      	cmp	fp, r0
 800685e:	dabe      	bge.n	80067de <VL53LX_f_020+0x24>
	if (event_sum  > 0) {
 8006860:	2a01      	cmp	r2, #1
 8006862:	f173 0000 	sbcs.w	r0, r3, #0
 8006866:	dbb6      	blt.n	80067d6 <VL53LX_f_020+0x1c>
		weighted_sum += do_division_s(event_sum, 2);
 8006868:	0850      	lsrs	r0, r2, #1
 800686a:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800686e:	105c      	asrs	r4, r3, #1
		weighted_sum = do_division_s(weighted_sum, event_sum);
 8006870:	eb10 000c 	adds.w	r0, r0, ip
 8006874:	eb44 0101 	adc.w	r1, r4, r1
 8006878:	f7fa f99e 	bl	8000bb8 <__aeabi_ldivmod>
 800687c:	460b      	mov	r3, r1
		*pphase = (uint32_t)weighted_sum;
 800687e:	2800      	cmp	r0, #0
 8006880:	f173 0100 	sbcs.w	r1, r3, #0
 8006884:	990f      	ldr	r1, [sp, #60]	; 0x3c
		weighted_sum = do_division_s(weighted_sum, event_sum);
 8006886:	4602      	mov	r2, r0
		*pphase = (uint32_t)weighted_sum;
 8006888:	bfb8      	it	lt
 800688a:	2200      	movlt	r2, #0
 800688c:	600a      	str	r2, [r1, #0]
 800688e:	e7a2      	b.n	80067d6 <VL53LX_f_020+0x1c>
	int64_t weighted_sum  = 0;
 8006890:	f04f 0c00 	mov.w	ip, #0
 8006894:	4661      	mov	r1, ip
	int64_t event_sum     = 0;
 8006896:	4662      	mov	r2, ip
 8006898:	4663      	mov	r3, ip
				(VL53LX_p_018 * (1024 + (2048*(int64_t)lb)));
 800689a:	f44f 6800 	mov.w	r8, #2048	; 0x800
 800689e:	e7dd      	b.n	800685c <VL53LX_f_020+0xa2>

080068a0 <VL53LX_f_015>:
{
 80068a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a4:	461d      	mov	r5, r3
	if (pdata->VL53LX_p_023 == 0xFF)
 80068a6:	2324      	movs	r3, #36	; 0x24
{
 80068a8:	4692      	mov	sl, r2
	if (pdata->VL53LX_p_023 == 0xFF)
 80068aa:	fb03 5200 	mla	r2, r3, r0, r5
{
 80068ae:	4689      	mov	r9, r1
	if (pdata->VL53LX_p_023 == 0xFF)
 80068b0:	f892 117e 	ldrb.w	r1, [r2, #382]	; 0x17e
 80068b4:	29ff      	cmp	r1, #255	; 0xff
	i = pdata->VL53LX_p_023 % palgo->VL53LX_p_030;
 80068b6:	fb03 5300 	mla	r3, r3, r0, r5
		pdata->VL53LX_p_023 = 1;
 80068ba:	bf04      	itt	eq
 80068bc:	2101      	moveq	r1, #1
 80068be:	f882 117e 	strbeq.w	r1, [r2, #382]	; 0x17e
	i = pdata->VL53LX_p_023 % palgo->VL53LX_p_030;
 80068c2:	f893 117e 	ldrb.w	r1, [r3, #382]	; 0x17e
 80068c6:	78ea      	ldrb	r2, [r5, #3]
	VL53LX_p_012 += (int16_t)pdata->VL53LX_p_012;
 80068c8:	f893 617c 	ldrb.w	r6, [r3, #380]	; 0x17c
	VL53LX_p_013   += (int16_t)pdata->VL53LX_p_013;
 80068cc:	f893 8180 	ldrb.w	r8, [r3, #384]	; 0x180
{
 80068d0:	4604      	mov	r4, r0
	i = pdata->VL53LX_p_023 % palgo->VL53LX_p_030;
 80068d2:	fbb1 f0f2 	udiv	r0, r1, r2
 80068d6:	fb02 1010 	mls	r0, r2, r0, r1
	VL53LX_p_012 += (int16_t)pdata->VL53LX_p_012;
 80068da:	b2c0      	uxtb	r0, r0
 80068dc:	1a40      	subs	r0, r0, r1
 80068de:	fa1f fb80 	uxth.w	fp, r0
	VL53LX_p_012 -= (int16_t)pdata->VL53LX_p_023;
 80068e2:	fa16 f080 	uxtah	r0, r6, r0
	window_width = VL53LX_p_013 - VL53LX_p_012;
 80068e6:	eba8 0606 	sub.w	r6, r8, r6
			VL53LX_p_012 + window_width,
 80068ea:	2e03      	cmp	r6, #3
 80068ec:	eb04 07c4 	add.w	r7, r4, r4, lsl #3
 80068f0:	bfa8      	it	ge
 80068f2:	2603      	movge	r6, #3
 80068f4:	00bf      	lsls	r7, r7, #2
 80068f6:	b2b6      	uxth	r6, r6
		VL53LX_f_020(
 80068f8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
			VL53LX_p_012 + window_width,
 80068fc:	fa16 f180 	uxtah	r1, r6, r0
		VL53LX_f_020(
 8006900:	442b      	add	r3, r5
 8006902:	e9cd a300 	strd	sl, r3, [sp]
 8006906:	b209      	sxth	r1, r1
 8006908:	464b      	mov	r3, r9
 800690a:	b200      	sxth	r0, r0
 800690c:	f7ff ff55 	bl	80067ba <VL53LX_f_020>
	if (status == VL53LX_ERROR_NONE)
 8006910:	b968      	cbnz	r0, 800692e <VL53LX_f_015+0x8e>
	VL53LX_p_013   -= (int16_t)pdata->VL53LX_p_023;
 8006912:	eb08 010b 	add.w	r1, r8, fp
			VL53LX_f_020(
 8006916:	f507 77cc 	add.w	r7, r7, #408	; 0x198
				VL53LX_p_013 - window_width,
 800691a:	1b88      	subs	r0, r1, r6
			VL53LX_f_020(
 800691c:	442f      	add	r7, r5
 800691e:	e9cd a700 	strd	sl, r7, [sp]
 8006922:	78ea      	ldrb	r2, [r5, #3]
 8006924:	464b      	mov	r3, r9
 8006926:	b209      	sxth	r1, r1
 8006928:	b200      	sxth	r0, r0
 800692a:	f7ff ff46 	bl	80067ba <VL53LX_f_020>
	if (pdata->VL53LX_p_026 > pdata->VL53LX_p_027) {
 800692e:	2324      	movs	r3, #36	; 0x24
 8006930:	fb03 5204 	mla	r2, r3, r4, r5
	if (pdata->VL53LX_p_011 < pdata->VL53LX_p_026)
 8006934:	fb03 5304 	mla	r3, r3, r4, r5
	if (pdata->VL53LX_p_026 > pdata->VL53LX_p_027) {
 8006938:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
 800693c:	f8d2 6198 	ldr.w	r6, [r2, #408]	; 0x198
 8006940:	42b1      	cmp	r1, r6
		pdata->VL53LX_p_026 = pdata->VL53LX_p_027;
 8006942:	bf84      	itt	hi
 8006944:	f8c2 6190 	strhi.w	r6, [r2, #400]	; 0x190
		pdata->VL53LX_p_027 = tmp_phase;
 8006948:	f8c2 1198 	strhi.w	r1, [r2, #408]	; 0x198
	if (pdata->VL53LX_p_011 < pdata->VL53LX_p_026)
 800694c:	e9d3 1264 	ldrd	r1, r2, [r3, #400]	; 0x190
 8006950:	428a      	cmp	r2, r1
		pdata->VL53LX_p_026 = pdata->VL53LX_p_011;
 8006952:	bf38      	it	cc
 8006954:	f8c3 2190 	strcc.w	r2, [r3, #400]	; 0x190
	if (pdata->VL53LX_p_011 > pdata->VL53LX_p_027)
 8006958:	2324      	movs	r3, #36	; 0x24
 800695a:	fb03 5404 	mla	r4, r3, r4, r5
 800695e:	e9d4 3265 	ldrd	r3, r2, [r4, #404]	; 0x194
 8006962:	4293      	cmp	r3, r2
		pdata->VL53LX_p_027 = pdata->VL53LX_p_011;
 8006964:	bf88      	it	hi
 8006966:	f8c4 3198 	strhi.w	r3, [r4, #408]	; 0x198
}
 800696a:	b003      	add	sp, #12
 800696c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006970 <VL53LX_f_011>:
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53LX_histogram_bin_data_t           *ppulse)
{
 8006970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006972:	461e      	mov	r6, r3
 8006974:	9b06      	ldr	r3, [sp, #24]
 8006976:	4615      	mov	r5, r2
 8006978:	4604      	mov	r4, r0

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53LX_histogram_bin_data_t));
 800697a:	22ac      	movs	r2, #172	; 0xac
 800697c:	4618      	mov	r0, r3
 800697e:	f002 ff7d 	bl	800987c <memcpy>



	for (lb = palgo->VL53LX_p_044;
 8006982:	f895 1178 	ldrb.w	r1, [r5, #376]	; 0x178
	memcpy(ppulse, pbins, sizeof(VL53LX_histogram_bin_data_t));
 8006986:	4603      	mov	r3, r0
		lb < (palgo->VL53LX_p_044 +
		palgo->VL53LX_p_030);
		lb++) {

		if (lb < pdata->VL53LX_p_012 || lb > pdata->VL53LX_p_013) {
 8006988:	2024      	movs	r0, #36	; 0x24
 800698a:	fb00 5004 	mla	r0, r0, r4, r5
		palgo->VL53LX_p_030);
 800698e:	78ef      	ldrb	r7, [r5, #3]
		lb < (palgo->VL53LX_p_044 +
 8006990:	f895 2178 	ldrb.w	r2, [r5, #376]	; 0x178
 8006994:	443a      	add	r2, r7
	for (lb = palgo->VL53LX_p_044;
 8006996:	4291      	cmp	r1, r2
 8006998:	db01      	blt.n	800699e <VL53LX_f_011+0x2e>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800699a:	2000      	movs	r0, #0
 800699c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (lb < pdata->VL53LX_p_012 || lb > pdata->VL53LX_p_013) {
 800699e:	f890 217c 	ldrb.w	r2, [r0, #380]	; 0x17c
 80069a2:	428a      	cmp	r2, r1
 80069a4:	d803      	bhi.n	80069ae <VL53LX_f_011+0x3e>
 80069a6:	f890 2180 	ldrb.w	r2, [r0, #384]	; 0x180
 80069aa:	428a      	cmp	r2, r1
 80069ac:	d20a      	bcs.n	80069c4 <VL53LX_f_011+0x54>
			i =  lb % palgo->VL53LX_p_030;
 80069ae:	fbb1 f4f7 	udiv	r4, r1, r7
			if (i < ppulse->VL53LX_p_021)
 80069b2:	7a9a      	ldrb	r2, [r3, #10]
			i =  lb % palgo->VL53LX_p_030;
 80069b4:	fb07 1414 	mls	r4, r7, r4, r1
 80069b8:	b2e4      	uxtb	r4, r4
			if (i < ppulse->VL53LX_p_021)
 80069ba:	42a2      	cmp	r2, r4
				ppulse->bin_data[i] = pad_value;
 80069bc:	bf84      	itt	hi
 80069be:	3406      	addhi	r4, #6
 80069c0:	f843 6024 	strhi.w	r6, [r3, r4, lsl #2]
		lb++) {
 80069c4:	3101      	adds	r1, #1
 80069c6:	b2c9      	uxtb	r1, r1
 80069c8:	e7e1      	b.n	800698e <VL53LX_f_011+0x1e>

080069ca <VL53LX_f_014>:
	uint8_t                       crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t  *phist_data_ap,
	VL53LX_histogram_bin_data_t  *phist_data_zp,
	VL53LX_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 80069ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069ce:	b092      	sub	sp, #72	; 0x48

	VL53LX_Error status      = VL53LX_ERROR_NONE;
	VL53LX_Error func_status = VL53LX_ERROR_NONE;

	uint8_t  i    = 0;
	int32_t  VL53LX_p_007    = 0;
 80069d0:	2400      	movs	r4, #0
{
 80069d2:	460e      	mov	r6, r1
	int32_t  VL53LX_p_032    = 0;
 80069d4:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
	int32_t  VL53LX_p_001    = 0;
	int32_t  a_zp = 0;
 80069d8:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
	int32_t  c_zp = 0;
	int32_t  ax   = 0;
 80069dc:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
	int32_t  bx   = 0;
	int32_t  cx   = 0;
 80069e0:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
{
 80069e4:	f89d 8060 	ldrb.w	r8, [sp, #96]	; 0x60
 80069e8:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80069ea:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80069ec:	4619      	mov	r1, r3


	if (VL53LX_p_030 == 0) {
 80069ee:	b93a      	cbnz	r2, 8006a00 <VL53LX_f_014+0x36>
		*psigma_est = 0xFFFF;
 80069f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80069f4:	802b      	strh	r3, [r5, #0]
		return VL53LX_ERROR_DIVISION_BY_ZERO;
 80069f6:	f06f 000e 	mvn.w	r0, #14
	if (func_status == VL53LX_ERROR_DIVISION_BY_ZERO)
		*psigma_est = 0xFFFF;


	return status;
}
 80069fa:	b012      	add	sp, #72	; 0x48
 80069fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i = bin % VL53LX_p_030;
 8006a00:	fbb0 f3f2 	udiv	r3, r0, r2
	VL53LX_f_022(
 8006a04:	ac0b      	add	r4, sp, #44	; 0x2c
	i = bin % VL53LX_p_030;
 8006a06:	fb02 0013 	mls	r0, r2, r3, r0
	VL53LX_f_022(
 8006a0a:	ab0e      	add	r3, sp, #56	; 0x38
	i = bin % VL53LX_p_030;
 8006a0c:	b2c0      	uxtb	r0, r0
	VL53LX_f_022(
 8006a0e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006a10:	9301      	str	r3, [sp, #4]
 8006a12:	9400      	str	r4, [sp, #0]
 8006a14:	ab0d      	add	r3, sp, #52	; 0x34
 8006a16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006a1a:	f000 fae4 	bl	8006fe6 <VL53LX_f_022>
	VL53LX_f_022(
 8006a1e:	ab0c      	add	r3, sp, #48	; 0x30
 8006a20:	e9cd 4300 	strd	r4, r3, [sp]
 8006a24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006a28:	ab0a      	add	r3, sp, #40	; 0x28
 8006a2a:	463a      	mov	r2, r7
 8006a2c:	f000 fadb 	bl	8006fe6 <VL53LX_f_022>
	if (crosstalk_compensation_enable > 0)
 8006a30:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006a34:	f1b8 0f00 	cmp.w	r8, #0
 8006a38:	d007      	beq.n	8006a4a <VL53LX_f_014+0x80>
		VL53LX_f_022(
 8006a3a:	ab11      	add	r3, sp, #68	; 0x44
 8006a3c:	9301      	str	r3, [sp, #4]
 8006a3e:	ab10      	add	r3, sp, #64	; 0x40
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006a44:	ab0f      	add	r3, sp, #60	; 0x3c
 8006a46:	f000 face 	bl	8006fe6 <VL53LX_f_022>
		VL53LX_f_023(
 8006a4a:	9507      	str	r5, [sp, #28]
 8006a4c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006a50:	9306      	str	r3, [sp, #24]
 8006a52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a56:	9305      	str	r3, [sp, #20]
 8006a58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a5a:	9304      	str	r3, [sp, #16]
 8006a5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a5e:	9303      	str	r3, [sp, #12]
 8006a60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a62:	9302      	str	r3, [sp, #8]
 8006a64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a66:	9301      	str	r3, [sp, #4]
 8006a68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006a6e:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8006a72:	4630      	mov	r0, r6
 8006a74:	f001 fb41 	bl	80080fa <VL53LX_f_023>
	if (func_status == VL53LX_ERROR_DIVISION_BY_ZERO)
 8006a78:	300f      	adds	r0, #15
		*psigma_est = 0xFFFF;
 8006a7a:	bf04      	itt	eq
 8006a7c:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 8006a80:	802b      	strheq	r3, [r5, #0]
	return status;
 8006a82:	2000      	movs	r0, #0
 8006a84:	e7b9      	b.n	80069fa <VL53LX_f_014+0x30>

08006a86 <VL53LX_f_017>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53LX_histogram_bin_data_t *pbins,
	VL53LX_hist_pulse_data_t    *ppulse,
	VL53LX_range_data_t         *pdata)
{
 8006a86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a88:	9c07      	ldr	r4, [sp, #28]
 8006a8a:	e9dd c505 	ldrd	ip, r5, [sp, #20]
	uint16_t  lower_phase_limit = 0;
	uint16_t  upper_phase_limit = 0;



	pdata->range_id              = range_id;
 8006a8e:	7020      	strb	r0, [r4, #0]
	pdata->time_stamp            = 0;
 8006a90:	2000      	movs	r0, #0
 8006a92:	6060      	str	r0, [r4, #4]

	pdata->VL53LX_p_012          = ppulse->VL53LX_p_012;
 8006a94:	7828      	ldrb	r0, [r5, #0]
 8006a96:	7220      	strb	r0, [r4, #8]
	pdata->VL53LX_p_019             = ppulse->VL53LX_p_019;
 8006a98:	786e      	ldrb	r6, [r5, #1]
 8006a9a:	7266      	strb	r6, [r4, #9]
	pdata->VL53LX_p_023            = ppulse->VL53LX_p_023;
 8006a9c:	78ae      	ldrb	r6, [r5, #2]
 8006a9e:	72a6      	strb	r6, [r4, #10]
	pdata->VL53LX_p_024              = ppulse->VL53LX_p_024;
 8006aa0:	78ee      	ldrb	r6, [r5, #3]
 8006aa2:	72e6      	strb	r6, [r4, #11]
	pdata->VL53LX_p_013            = ppulse->VL53LX_p_013;
 8006aa4:	792e      	ldrb	r6, [r5, #4]
 8006aa6:	7326      	strb	r6, [r4, #12]
	pdata->VL53LX_p_025             = ppulse->VL53LX_p_025;



	pdata->VL53LX_p_029  =
		(ppulse->VL53LX_p_013 + 1) - ppulse->VL53LX_p_012;
 8006aa8:	3601      	adds	r6, #1
	pdata->VL53LX_p_025             = ppulse->VL53LX_p_025;
 8006aaa:	796f      	ldrb	r7, [r5, #5]
 8006aac:	7367      	strb	r7, [r4, #13]
		(ppulse->VL53LX_p_013 + 1) - ppulse->VL53LX_p_012;
 8006aae:	1a36      	subs	r6, r6, r0
	pdata->VL53LX_p_029  =
 8006ab0:	7426      	strb	r6, [r4, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
	pdata->VL53LX_p_002              = ppulse->VL53LX_p_002;
	pdata->VL53LX_p_026             = (uint16_t)ppulse->VL53LX_p_026;
 8006ab2:	696e      	ldr	r6, [r5, #20]
	pdata->VL53LX_p_011          = (uint16_t)ppulse->VL53LX_p_011;
	pdata->VL53LX_p_027             = (uint16_t)ppulse->VL53LX_p_027;
 8006ab4:	69ef      	ldr	r7, [r5, #28]
	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 8006ab6:	f8bc 009c 	ldrh.w	r0, [ip, #156]	; 0x9c
	pdata->VL53LX_p_002              = ppulse->VL53LX_p_002;
 8006aba:	f8b5 e020 	ldrh.w	lr, [r5, #32]
	pdata->VL53LX_p_026             = (uint16_t)ppulse->VL53LX_p_026;
 8006abe:	87e6      	strh	r6, [r4, #62]	; 0x3e
	pdata->VL53LX_p_011          = (uint16_t)ppulse->VL53LX_p_011;
 8006ac0:	8b2e      	ldrh	r6, [r5, #24]
	pdata->VL53LX_p_027             = (uint16_t)ppulse->VL53LX_p_027;
 8006ac2:	f8a4 7042 	strh.w	r7, [r4, #66]	; 0x42
	pdata->VL53LX_p_017  = (uint32_t)ppulse->VL53LX_p_017;
 8006ac6:	68ef      	ldr	r7, [r5, #12]
 8006ac8:	62a7      	str	r7, [r4, #40]	; 0x28
	pdata->VL53LX_p_010   = ppulse->VL53LX_p_010;
 8006aca:	692f      	ldr	r7, [r5, #16]
	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 8006acc:	82a0      	strh	r0, [r4, #20]
	pdata->VL53LX_p_002              = ppulse->VL53LX_p_002;
 8006ace:	f8a4 e03c 	strh.w	lr, [r4, #60]	; 0x3c
	pdata->VL53LX_p_011          = (uint16_t)ppulse->VL53LX_p_011;
 8006ad2:	f8a4 6040 	strh.w	r6, [r4, #64]	; 0x40
	pdata->VL53LX_p_010   = ppulse->VL53LX_p_010;
 8006ad6:	62e7      	str	r7, [r4, #44]	; 0x2c
	pdata->VL53LX_p_016 = (uint32_t)ppulse->VL53LX_p_016;
 8006ad8:	68ad      	ldr	r5, [r5, #8]
 8006ada:	6265      	str	r5, [r4, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 8006adc:	f8dc 5088 	ldr.w	r5, [ip, #136]	; 0x88
 8006ae0:	61a5      	str	r5, [r4, #24]


	pdata->range_status = VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;


	if (sigma_thres > 0 &&
 8006ae2:	b9a3      	cbnz	r3, 8006b0e <VL53LX_f_017+0x88>
	pdata->range_status = VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8006ae4:	2313      	movs	r3, #19
		pdata->range_status = VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK;



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
	if (lower_phase_limit < pdata->zero_distance_phase)
 8006ae6:	ebb0 2f01 	cmp.w	r0, r1, lsl #8
		pdata->range_status = VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK;
 8006aea:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 8006aee:	ea4f 2301 	mov.w	r3, r1, lsl #8
	if (lower_phase_limit < pdata->zero_distance_phase)
 8006af2:	d903      	bls.n	8006afc <VL53LX_f_017+0x76>
		lower_phase_limit =
 8006af4:	1ac3      	subs	r3, r0, r3
		lower_phase_limit  = 0;

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
	upper_phase_limit += pbins->zero_distance_phase;

	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	429e      	cmp	r6, r3
 8006afa:	d304      	bcc.n	8006b06 <VL53LX_f_017+0x80>
	upper_phase_limit += pbins->zero_distance_phase;
 8006afc:	eb00 2202 	add.w	r2, r0, r2, lsl #8
	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 8006b00:	b290      	uxth	r0, r2
 8006b02:	4286      	cmp	r6, r0
 8006b04:	d902      	bls.n	8006b0c <VL53LX_f_017+0x86>
		pdata->VL53LX_p_011 > upper_phase_limit)
		pdata->range_status = VL53LX_DEVICEERROR_RANGEPHASECHECK;
 8006b06:	2305      	movs	r3, #5
 8006b08:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a

}
 8006b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (sigma_thres > 0 &&
 8006b0e:	ebbe 1f43 	cmp.w	lr, r3, lsl #5
 8006b12:	d9e7      	bls.n	8006ae4 <VL53LX_f_017+0x5e>
		pdata->range_status = VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK;
 8006b14:	2306      	movs	r3, #6
 8006b16:	e7e6      	b.n	8006ae6 <VL53LX_f_017+0x60>

08006b18 <VL53LX_f_026>:
VL53LX_Error VL53LX_f_026(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *ppulse,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered)
{
 8006b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b1c:	b086      	sub	sp, #24
 8006b1e:	4698      	mov	r8, r3

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);

	uint8_t  lb     = 0;
	uint8_t  i     = 0;
	int32_t  suma  = 0;
 8006b20:	2300      	movs	r3, #0
	int32_t  sumb  = 0;
 8006b22:	e9cd 3303 	strd	r3, r3, [sp, #12]
	int32_t  sumc  = 0;
 8006b26:	9305      	str	r3, [sp, #20]

	LOG_FUNCTION_START("");

	pfiltered->VL53LX_p_020    = palgo3->VL53LX_p_020;
 8006b28:	7853      	ldrb	r3, [r2, #1]
 8006b2a:	f888 3001 	strb.w	r3, [r8, #1]
	pfiltered->VL53LX_p_019      = palgo3->VL53LX_p_019;
 8006b2e:	7813      	ldrb	r3, [r2, #0]
 8006b30:	f888 3000 	strb.w	r3, [r8]
	pfiltered->VL53LX_p_021 = palgo3->VL53LX_p_021;



	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 8006b34:	2724      	movs	r7, #36	; 0x24
	pfiltered->VL53LX_p_021 = palgo3->VL53LX_p_021;
 8006b36:	7893      	ldrb	r3, [r2, #2]
 8006b38:	f888 3002 	strb.w	r3, [r8, #2]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 8006b3c:	fb07 2700 	mla	r7, r7, r0, r2
{
 8006b40:	4689      	mov	r9, r1
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 8006b42:	f897 617c 	ldrb.w	r6, [r7, #380]	; 0x17c
{
 8006b46:	4615      	mov	r5, r2

		i =  lb  % palgo3->VL53LX_p_030;


		VL53LX_f_022(
 8006b48:	f10d 0a14 	add.w	sl, sp, #20
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 8006b4c:	f897 3180 	ldrb.w	r3, [r7, #384]	; 0x180
 8006b50:	42b3      	cmp	r3, r6
 8006b52:	d203      	bcs.n	8006b5c <VL53LX_f_026+0x44>
			(sumb + sumc) -
			(suma + palgo3->VL53LX_p_028);
	}

	return status;
}
 8006b54:	2000      	movs	r0, #0
 8006b56:	b006      	add	sp, #24
 8006b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		i =  lb  % palgo3->VL53LX_p_030;
 8006b5c:	78e8      	ldrb	r0, [r5, #3]
 8006b5e:	fbb6 f4f0 	udiv	r4, r6, r0
 8006b62:	fb00 6414 	mls	r4, r0, r4, r6
 8006b66:	b2e4      	uxtb	r4, r4
		VL53LX_f_022(
 8006b68:	ab04      	add	r3, sp, #16
 8006b6a:	f897 1182 	ldrb.w	r1, [r7, #386]	; 0x182
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	4620      	mov	r0, r4
 8006b72:	ab03      	add	r3, sp, #12
 8006b74:	464a      	mov	r2, r9
 8006b76:	f8cd a004 	str.w	sl, [sp, #4]
 8006b7a:	f000 fa34 	bl	8006fe6 <VL53LX_f_022>
		pfiltered->VL53LX_p_007[i] = suma;
 8006b7e:	eb08 0484 	add.w	r4, r8, r4, lsl #2
			(sumc + palgo3->VL53LX_p_028);
 8006b82:	f8d5 c008 	ldr.w	ip, [r5, #8]
		pfiltered->VL53LX_p_007[i] = suma;
 8006b86:	9b03      	ldr	r3, [sp, #12]
		pfiltered->VL53LX_p_032[i] = sumb;
 8006b88:	9a04      	ldr	r2, [sp, #16]
		pfiltered->VL53LX_p_001[i] = sumc;
 8006b8a:	9905      	ldr	r1, [sp, #20]
		pfiltered->VL53LX_p_007[i] = suma;
 8006b8c:	6063      	str	r3, [r4, #4]
			(suma + sumb) -
 8006b8e:	1898      	adds	r0, r3, r2
		pfiltered->VL53LX_p_032[i] = sumb;
 8006b90:	6662      	str	r2, [r4, #100]	; 0x64
			(sumc + palgo3->VL53LX_p_028);
 8006b92:	eb01 0e0c 	add.w	lr, r1, ip
			(sumb + sumc) -
 8006b96:	440a      	add	r2, r1
			(suma + palgo3->VL53LX_p_028);
 8006b98:	4463      	add	r3, ip
			(suma + sumb) -
 8006b9a:	eba0 000e 	sub.w	r0, r0, lr
			(sumb + sumc) -
 8006b9e:	1ad2      	subs	r2, r2, r3
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 8006ba0:	3601      	adds	r6, #1
		pfiltered->VL53LX_p_001[i] = sumc;
 8006ba2:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
		pfiltered->VL53LX_p_053[i] =
 8006ba6:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
		pfiltered->VL53LX_p_054[i] =
 8006baa:	f8c4 2184 	str.w	r2, [r4, #388]	; 0x184
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 8006bae:	b2f6      	uxtb	r6, r6
 8006bb0:	e7cc      	b.n	8006b4c <VL53LX_f_026+0x34>

08006bb2 <VL53LX_f_028>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53LX_p_028,
	uint8_t   VL53LX_p_030,
	uint32_t *pmean_phase)
{
 8006bb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb6:	b085      	sub	sp, #20
	int32_t  mean_phase32;
	int64_t  VL53LX_p_055   = 0;
	int64_t  half_b_minus_amb = 0;


	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 8006bb8:	469a      	mov	sl, r3
 8006bba:	ea4f 7be3 	mov.w	fp, r3, asr #31
 8006bbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
{
 8006bc0:	9003      	str	r0, [sp, #12]
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 8006bc2:	ebba 0a03 	subs.w	sl, sl, r3
 8006bc6:	eb6b 7be3 	sbc.w	fp, fp, r3, asr #31
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 8006bca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bcc:	ebba 0a01 	subs.w	sl, sl, r1
 8006bd0:	eb6b 7be1 	sbc.w	fp, fp, r1, asr #31
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 8006bd4:	990f      	ldr	r1, [sp, #60]	; 0x3c
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 8006bd6:	ebba 0a03 	subs.w	sl, sl, r3
 8006bda:	eb6b 7be3 	sbc.w	fp, fp, r3, asr #31
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 8006bde:	17d5      	asrs	r5, r2, #31
 8006be0:	1a54      	subs	r4, r2, r1
 8006be2:	eb65 75e1 	sbc.w	r5, r5, r1, asr #31
		(int64_t)bx - (int64_t)VL53LX_p_028);
 8006be6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006be8:	1a64      	subs	r4, r4, r1
 8006bea:	eb65 75e1 	sbc.w	r5, r5, r1, asr #31
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 8006bee:	032f      	lsls	r7, r5, #12
 8006bf0:	ea47 5714 	orr.w	r7, r7, r4, lsr #20
 8006bf4:	0326      	lsls	r6, r4, #12

	if (half_b_minus_amb != 0) {
 8006bf6:	ea56 0307 	orrs.w	r3, r6, r7
 8006bfa:	d04e      	beq.n	8006c9a <VL53LX_f_028+0xe8>

		mean_phase = (4096 * VL53LX_p_055) + half_b_minus_amb;
 8006bfc:	ea4f 610b 	mov.w	r1, fp, lsl #24
 8006c00:	ea4f 600a 	mov.w	r0, sl, lsl #24
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 8006c04:	1980      	adds	r0, r0, r6
		mean_phase = (4096 * VL53LX_p_055) + half_b_minus_amb;
 8006c06:	ea41 211a 	orr.w	r1, r1, sl, lsr #8
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 8006c0a:	ea4f 3345 	mov.w	r3, r5, lsl #13
 8006c0e:	ea4f 3244 	mov.w	r2, r4, lsl #13
 8006c12:	ea43 43d4 	orr.w	r3, r3, r4, lsr #19
 8006c16:	eb47 0101 	adc.w	r1, r7, r1
 8006c1a:	f7f9 ffcd 	bl	8000bb8 <__aeabi_ldivmod>

		mean_phase  +=  2048;
		mean_phase  += (4096 * (int64_t)bin);
 8006c1e:	9b03      	ldr	r3, [sp, #12]
		mean_phase  +=  2048;
 8006c20:	f510 6000 	adds.w	r0, r0, #2048	; 0x800
		mean_phase  += (4096 * (int64_t)bin);
 8006c24:	ea4f 3303 	mov.w	r3, r3, lsl #12
		mean_phase  +=  2048;
 8006c28:	f141 0100 	adc.w	r1, r1, #0


		mean_phase  = do_division_s((mean_phase + 1), 2);


		if (mean_phase  < 0)
 8006c2c:	f06f 0201 	mvn.w	r2, #1
		mean_phase  += (4096 * (int64_t)bin);
 8006c30:	eb13 0800 	adds.w	r8, r3, r0
 8006c34:	f04f 0300 	mov.w	r3, #0
 8006c38:	eb43 0901 	adc.w	r9, r3, r1
		if (mean_phase  < 0)
 8006c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c40:	4590      	cmp	r8, r2
 8006c42:	eb79 0303 	sbcs.w	r3, r9, r3
 8006c46:	db26      	blt.n	8006c96 <VL53LX_f_028+0xe4>
		mean_phase  = do_division_s((mean_phase + 1), 2);
 8006c48:	f118 0301 	adds.w	r3, r8, #1
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	f149 0300 	adc.w	r3, r9, #0
 8006c52:	9301      	str	r3, [sp, #4]
 8006c54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c58:	0fdb      	lsrs	r3, r3, #31
 8006c5a:	18c0      	adds	r0, r0, r3
 8006c5c:	f141 0100 	adc.w	r1, r1, #0
 8006c60:	0840      	lsrs	r0, r0, #1
 8006c62:	ea40 74c1 	orr.w	r4, r0, r1, lsl #31
 8006c66:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006c6a:	104d      	asrs	r5, r1, #1
 8006c6c:	42a0      	cmp	r0, r4
 8006c6e:	f04f 0100 	mov.w	r1, #0
 8006c72:	eb71 0305 	sbcs.w	r3, r1, r5
 8006c76:	da00      	bge.n	8006c7a <VL53LX_f_028+0xc8>
 8006c78:	4604      	mov	r4, r0
			mean_phase = VL53LX_MAX_ALLOWED_PHASE;


		mean_phase32 = (int32_t)mean_phase;
		mean_phase32 = mean_phase32 %
			((int32_t)VL53LX_p_030 * 2048);
 8006c7a:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8006c7e:	02c9      	lsls	r1, r1, #11
		mean_phase32 = mean_phase32 %
 8006c80:	fbb4 f3f1 	udiv	r3, r4, r1
 8006c84:	fb01 4213 	mls	r2, r1, r3, r4
		mean_phase = mean_phase32;
 8006c88:	4611      	mov	r1, r2

		status = VL53LX_ERROR_NONE;
 8006c8a:	2000      	movs	r0, #0

	}

	*pmean_phase = (uint32_t)mean_phase;
 8006c8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c8e:	6019      	str	r1, [r3, #0]

	return status;
}
 8006c90:	b005      	add	sp, #20
 8006c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mean_phase = 0;
 8006c96:	2400      	movs	r4, #0
 8006c98:	e7ef      	b.n	8006c7a <VL53LX_f_028+0xc8>
	int64_t  mean_phase  = VL53LX_MAX_ALLOWED_PHASE;
 8006c9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	VL53LX_Error  status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8006c9e:	f06f 000e 	mvn.w	r0, #14
 8006ca2:	e7f3      	b.n	8006c8c <VL53LX_f_028+0xda>

08006ca4 <VL53LX_f_027>:
{
 8006ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca8:	461e      	mov	r6, r3
	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 8006caa:	2324      	movs	r3, #36	; 0x24
 8006cac:	fb03 6800 	mla	r8, r3, r0, r6
{
 8006cb0:	b089      	sub	sp, #36	; 0x24
					VL53LX_f_028(
 8006cb2:	f508 73ca 	add.w	r3, r8, #404	; 0x194
	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 8006cb6:	f898 017c 	ldrb.w	r0, [r8, #380]	; 0x17c
					VL53LX_f_028(
 8006cba:	9307      	str	r3, [sp, #28]
{
 8006cbc:	4617      	mov	r7, r2
					VL53LX_f_028(
 8006cbe:	f04f 0900 	mov.w	r9, #0
				pfiltered->VL53LX_p_040[i] = 1;
 8006cc2:	f04f 0b01 	mov.w	fp, #1
	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 8006cc6:	f898 3180 	ldrb.w	r3, [r8, #384]	; 0x180
 8006cca:	4283      	cmp	r3, r0
 8006ccc:	d803      	bhi.n	8006cd6 <VL53LX_f_027+0x32>
}
 8006cce:	2000      	movs	r0, #0
 8006cd0:	b009      	add	sp, #36	; 0x24
 8006cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		i =  lb    % palgo3->VL53LX_p_030;
 8006cd6:	f896 c003 	ldrb.w	ip, [r6, #3]
		if (i < palgo3->VL53LX_p_021 &&
 8006cda:	78b2      	ldrb	r2, [r6, #2]
		i =  lb    % palgo3->VL53LX_p_030;
 8006cdc:	fbb0 f4fc 	udiv	r4, r0, ip
 8006ce0:	fb0c 0414 	mls	r4, ip, r4, r0
 8006ce4:	b2e4      	uxtb	r4, r4
		if (i < palgo3->VL53LX_p_021 &&
 8006ce6:	42a2      	cmp	r2, r4
 8006ce8:	f100 0a01 	add.w	sl, r0, #1
 8006cec:	d912      	bls.n	8006d14 <VL53LX_f_027+0x70>
		j = (lb+1) % palgo3->VL53LX_p_030;
 8006cee:	fbba f3fc 	udiv	r3, sl, ip
 8006cf2:	fb0c a313 	mls	r3, ip, r3, sl
		if (i < palgo3->VL53LX_p_021 &&
 8006cf6:	b2d9      	uxtb	r1, r3
 8006cf8:	428a      	cmp	r2, r1
 8006cfa:	d90b      	bls.n	8006d14 <VL53LX_f_027+0x70>
			if (pfiltered->VL53LX_p_053[i] == 0 &&
 8006cfc:	eb07 0184 	add.w	r1, r7, r4, lsl #2
 8006d00:	443c      	add	r4, r7
 8006d02:	f8d1 5124 	ldr.w	r5, [r1, #292]	; 0x124
 8006d06:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
 8006d0a:	2d00      	cmp	r5, #0
 8006d0c:	d105      	bne.n	8006d1a <VL53LX_f_027+0x76>
 8006d0e:	b92a      	cbnz	r2, 8006d1c <VL53LX_f_027+0x78>
				pfiltered->VL53LX_p_040[i] = 0;
 8006d10:	f884 21e4 	strb.w	r2, [r4, #484]	; 0x1e4
	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 8006d14:	fa5f f08a 	uxtb.w	r0, sl
 8006d18:	e7d5      	b.n	8006cc6 <VL53LX_f_027+0x22>
			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 8006d1a:	db16      	blt.n	8006d4a <VL53LX_f_027+0xa6>
 8006d1c:	2a00      	cmp	r2, #0
 8006d1e:	db20      	blt.n	8006d62 <VL53LX_f_027+0xbe>
					VL53LX_f_028(
 8006d20:	9b07      	ldr	r3, [sp, #28]
				pfiltered->VL53LX_p_040[i] = 1;
 8006d22:	f884 b1e4 	strb.w	fp, [r4, #484]	; 0x1e4
				pdata->VL53LX_p_023 = lb;
 8006d26:	f888 017e 	strb.w	r0, [r8, #382]	; 0x17e
					VL53LX_f_028(
 8006d2a:	e9cd c304 	strd	ip, r3, [sp, #16]
 8006d2e:	68b3      	ldr	r3, [r6, #8]
 8006d30:	e9cd 9900 	strd	r9, r9, [sp]
 8006d34:	e9cd 9302 	strd	r9, r3, [sp, #8]
 8006d38:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
 8006d3c:	6e4a      	ldr	r2, [r1, #100]	; 0x64
 8006d3e:	6849      	ldr	r1, [r1, #4]
 8006d40:	f7ff ff37 	bl	8006bb2 <VL53LX_f_028>
				if (func_status ==
 8006d44:	300f      	adds	r0, #15
 8006d46:	d1e5      	bne.n	8006d14 <VL53LX_f_027+0x70>
 8006d48:	e00b      	b.n	8006d62 <VL53LX_f_027+0xbe>
			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 8006d4a:	2a00      	cmp	r2, #0
 8006d4c:	db09      	blt.n	8006d62 <VL53LX_f_027+0xbe>
 8006d4e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 8006d52:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8006d56:	2a00      	cmp	r2, #0
 8006d58:	db03      	blt.n	8006d62 <VL53LX_f_027+0xbe>
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 8006d5a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	dbde      	blt.n	8006d20 <VL53LX_f_027+0x7c>
					pfiltered->VL53LX_p_040[i] = 0;
 8006d62:	f884 91e4 	strb.w	r9, [r4, #484]	; 0x1e4
 8006d66:	e7d5      	b.n	8006d14 <VL53LX_f_027+0x70>

08006d68 <VL53LX_f_025>:
{
 8006d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d6c:	b089      	sub	sp, #36	; 0x24
 8006d6e:	4699      	mov	r9, r3
 8006d70:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8006d72:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 8006d76:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8006d78:	9307      	str	r3, [sp, #28]
		&(palgo3->VL53LX_p_006),
 8006d7a:	f504 7727 	add.w	r7, r4, #668	; 0x29c
{
 8006d7e:	4683      	mov	fp, r0
	VL53LX_f_003(palgo3);
 8006d80:	4620      	mov	r0, r4
{
 8006d82:	4615      	mov	r5, r2
 8006d84:	4688      	mov	r8, r1
	VL53LX_f_003(palgo3);
 8006d86:	f7ff fad0 	bl	800632a <VL53LX_f_003>
	memcpy(
 8006d8a:	22ac      	movs	r2, #172	; 0xac
 8006d8c:	4649      	mov	r1, r9
 8006d8e:	4638      	mov	r0, r7
 8006d90:	f002 fd74 	bl	800987c <memcpy>
	presults->cfg_device_state = pbins_input->cfg_device_state;
 8006d94:	f899 3000 	ldrb.w	r3, [r9]
 8006d98:	7033      	strb	r3, [r6, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 8006d9a:	f899 3001 	ldrb.w	r3, [r9, #1]
 8006d9e:	7073      	strb	r3, [r6, #1]
	presults->zone_id          = pbins_input->zone_id;
 8006da0:	f899 3002 	ldrb.w	r3, [r9, #2]
 8006da4:	70b3      	strb	r3, [r6, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 8006da6:	f899 307b 	ldrb.w	r3, [r9, #123]	; 0x7b
 8006daa:	70f3      	strb	r3, [r6, #3]
	presults->max_results      = VL53LX_MAX_RANGE_RESULTS;
 8006dac:	2304      	movs	r3, #4
 8006dae:	7473      	strb	r3, [r6, #17]
	presults->active_results   = 0;
 8006db0:	2300      	movs	r3, #0
		presults->VL53LX_p_022[p] = 0;
 8006db2:	e9c6 3301 	strd	r3, r3, [r6, #4]
	presults->active_results   = 0;
 8006db6:	74b3      	strb	r3, [r6, #18]
		presults->VL53LX_p_022[p] = 0;
 8006db8:	60f3      	str	r3, [r6, #12]
	VL53LX_hist_calc_zero_distance_phase(&(palgo3->VL53LX_p_006));
 8006dba:	4638      	mov	r0, r7
 8006dbc:	f7fe ffb6 	bl	8005d2c <VL53LX_hist_calc_zero_distance_phase>
	VL53LX_hist_estimate_ambient_from_thresholded_bins(
 8006dc0:	4639      	mov	r1, r7
 8006dc2:	7968      	ldrb	r0, [r5, #5]
 8006dc4:	f7ff f933 	bl	800602e <VL53LX_hist_estimate_ambient_from_thresholded_bins>
	VL53LX_hist_estimate_ambient_from_ambient_bins(
 8006dc8:	4638      	mov	r0, r7
 8006dca:	f7ff f964 	bl	8006096 <VL53LX_hist_estimate_ambient_from_ambient_bins>
	VL53LX_hist_remove_ambient_bins(&(palgo3->VL53LX_p_006));
 8006dce:	4638      	mov	r0, r7
 8006dd0:	f7fe ffc6 	bl	8005d60 <VL53LX_hist_remove_ambient_bins>
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 8006dd4:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8006dd8:	b12b      	cbz	r3, 8006de6 <VL53LX_f_025+0x7e>
		VL53LX_f_005(
 8006dda:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006ddc:	f504 7252 	add.w	r2, r4, #840	; 0x348
 8006de0:	4639      	mov	r1, r7
 8006de2:	f000 f9c0 	bl	8007166 <VL53LX_f_005>
	pdmax_cfg->ambient_thresh_sigma =
 8006de6:	79ab      	ldrb	r3, [r5, #6]
 8006de8:	f888 3001 	strb.w	r3, [r8, #1]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 8006dec:	f108 0316 	add.w	r3, r8, #22
 8006df0:	9306      	str	r3, [sp, #24]
 8006df2:	f108 090c 	add.w	r9, r8, #12
 8006df6:	f106 0a04 	add.w	sl, r6, #4
	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 8006dfa:	2300      	movs	r3, #0
		if (status == VL53LX_ERROR_NONE) {
 8006dfc:	b95b      	cbnz	r3, 8006e16 <VL53LX_f_025+0xae>
			VL53LX_f_001(
 8006dfe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	f8cd a004 	str.w	sl, [sp, #4]
 8006e06:	463b      	mov	r3, r7
 8006e08:	f8b9 0000 	ldrh.w	r0, [r9]
 8006e0c:	4642      	mov	r2, r8
 8006e0e:	4659      	mov	r1, fp
 8006e10:	f7ff f972 	bl	80060f8 <VL53LX_f_001>
 8006e14:	4603      	mov	r3, r0
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 8006e16:	9a06      	ldr	r2, [sp, #24]
 8006e18:	f109 0902 	add.w	r9, r9, #2
 8006e1c:	454a      	cmp	r2, r9
 8006e1e:	f10a 0a02 	add.w	sl, sl, #2
 8006e22:	d1eb      	bne.n	8006dfc <VL53LX_f_025+0x94>
	if (status == VL53LX_ERROR_NONE)
 8006e24:	b9e3      	cbnz	r3, 8006e60 <VL53LX_f_025+0xf8>
			VL53LX_f_006(
 8006e26:	f504 7352 	add.w	r3, r4, #840	; 0x348
 8006e2a:	e9cd 7300 	strd	r7, r3, [sp]
 8006e2e:	9402      	str	r4, [sp, #8]
 8006e30:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8006e34:	68ea      	ldr	r2, [r5, #12]
 8006e36:	f898 1001 	ldrb.w	r1, [r8, #1]
 8006e3a:	8928      	ldrh	r0, [r5, #8]
 8006e3c:	f7ff fab4 	bl	80063a8 <VL53LX_f_006>
	if (status == VL53LX_ERROR_NONE)
 8006e40:	4603      	mov	r3, r0
 8006e42:	b968      	cbnz	r0, 8006e60 <VL53LX_f_025+0xf8>
			VL53LX_f_007(palgo3);
 8006e44:	4620      	mov	r0, r4
 8006e46:	f7ff fb3a 	bl	80064be <VL53LX_f_007>
	if (status == VL53LX_ERROR_NONE)
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	b940      	cbnz	r0, 8006e60 <VL53LX_f_025+0xf8>
			VL53LX_f_008(palgo3);
 8006e4e:	4620      	mov	r0, r4
 8006e50:	f7ff fb5d 	bl	800650e <VL53LX_f_008>
	if (status == VL53LX_ERROR_NONE)
 8006e54:	4603      	mov	r3, r0
 8006e56:	b918      	cbnz	r0, 8006e60 <VL53LX_f_025+0xf8>
			VL53LX_f_009(palgo3);
 8006e58:	4620      	mov	r0, r4
 8006e5a:	f7ff fb92 	bl	8006582 <VL53LX_f_009>
 8006e5e:	4603      	mov	r3, r0
				VL53LX_f_011(
 8006e60:	f504 6294 	add.w	r2, r4, #1184	; 0x4a0
	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 8006e64:	f04f 0900 	mov.w	r9, #0
				VL53LX_f_011(
 8006e68:	f504 7a7d 	add.w	sl, r4, #1012	; 0x3f4
				VL53LX_f_011(
 8006e6c:	9206      	str	r2, [sp, #24]
				VL53LX_f_011(
 8006e6e:	f204 5b4c 	addw	fp, r4, #1356	; 0x54c
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 8006e72:	f894 217a 	ldrb.w	r2, [r4, #378]	; 0x17a
 8006e76:	fa5f f889 	uxtb.w	r8, r9
 8006e7a:	4542      	cmp	r2, r8
 8006e7c:	d815      	bhi.n	8006eaa <VL53LX_f_025+0x142>
	if (status == VL53LX_ERROR_NONE)
 8006e7e:	b923      	cbnz	r3, 8006e8a <VL53LX_f_025+0x122>
			VL53LX_f_016(
 8006e80:	7868      	ldrb	r0, [r5, #1]
 8006e82:	4621      	mov	r1, r4
 8006e84:	f7ff fbdc 	bl	8006640 <VL53LX_f_016>
 8006e88:	4603      	mov	r3, r0
	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 8006e8a:	f04f 0900 	mov.w	r9, #0
			prange_data =
 8006e8e:	f04f 0a4c 	mov.w	sl, #76	; 0x4c
 8006e92:	f04f 0b14 	mov.w	fp, #20
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 8006e96:	f894 117a 	ldrb.w	r1, [r4, #378]	; 0x17a
 8006e9a:	fa5f f289 	uxtb.w	r2, r9
 8006e9e:	4291      	cmp	r1, r2
 8006ea0:	d860      	bhi.n	8006f64 <VL53LX_f_025+0x1fc>
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	b009      	add	sp, #36	; 0x24
 8006ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (status == VL53LX_ERROR_NONE)
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d157      	bne.n	8006f5e <VL53LX_f_025+0x1f6>
				VL53LX_f_010(
 8006eae:	4622      	mov	r2, r4
 8006eb0:	4639      	mov	r1, r7
 8006eb2:	4640      	mov	r0, r8
 8006eb4:	f7ff fc56 	bl	8006764 <VL53LX_f_010>
		if (status == VL53LX_ERROR_NONE)
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d14f      	bne.n	8006f5e <VL53LX_f_025+0x1f6>
				VL53LX_f_011(
 8006ebe:	f8cd a000 	str.w	sl, [sp]
 8006ec2:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8006ec6:	4622      	mov	r2, r4
 8006ec8:	4639      	mov	r1, r7
 8006eca:	4640      	mov	r0, r8
 8006ecc:	f7ff fd50 	bl	8006970 <VL53LX_f_011>
		if (status == VL53LX_ERROR_NONE) {
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	d143      	bne.n	8006f5e <VL53LX_f_025+0x1f6>
				VL53LX_f_011(
 8006ed6:	9a06      	ldr	r2, [sp, #24]
 8006ed8:	9200      	str	r2, [sp, #0]
 8006eda:	4639      	mov	r1, r7
 8006edc:	4622      	mov	r2, r4
 8006ede:	4640      	mov	r0, r8
 8006ee0:	f7ff fd46 	bl	8006970 <VL53LX_f_011>
		if (status == VL53LX_ERROR_NONE) {
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	d139      	bne.n	8006f5e <VL53LX_f_025+0x1f6>
				VL53LX_f_011(
 8006eea:	f8cd b000 	str.w	fp, [sp]
 8006eee:	4622      	mov	r2, r4
 8006ef0:	f504 7152 	add.w	r1, r4, #840	; 0x348
 8006ef4:	4640      	mov	r0, r8
 8006ef6:	f7ff fd3b 	bl	8006970 <VL53LX_f_011>
		if (status == VL53LX_ERROR_NONE)
 8006efa:	4603      	mov	r3, r0
 8006efc:	bb78      	cbnz	r0, 8006f5e <VL53LX_f_025+0x1f6>
				VL53LX_f_026(
 8006efe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f00:	4622      	mov	r2, r4
 8006f02:	4651      	mov	r1, sl
 8006f04:	4640      	mov	r0, r8
 8006f06:	f7ff fe07 	bl	8006b18 <VL53LX_f_026>
		if (status == VL53LX_ERROR_NONE)
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	bb38      	cbnz	r0, 8006f5e <VL53LX_f_025+0x1f6>
				VL53LX_f_027(
 8006f0e:	4623      	mov	r3, r4
 8006f10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006f12:	8a29      	ldrh	r1, [r5, #16]
 8006f14:	4640      	mov	r0, r8
 8006f16:	f7ff fec5 	bl	8006ca4 <VL53LX_f_027>
		if (status == VL53LX_ERROR_NONE)
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	b9f8      	cbnz	r0, 8006f5e <VL53LX_f_025+0x1f6>
			VL53LX_f_014(
 8006f1e:	2224      	movs	r2, #36	; 0x24
 8006f20:	fb02 f208 	mul.w	r2, r2, r8
 8006f24:	18a1      	adds	r1, r4, r2
 8006f26:	f502 72ce 	add.w	r2, r2, #412	; 0x19c
 8006f2a:	4422      	add	r2, r4
 8006f2c:	f891 3182 	ldrb.w	r3, [r1, #386]	; 0x182
 8006f30:	f891 017e 	ldrb.w	r0, [r1, #382]	; 0x17e
 8006f34:	7e29      	ldrb	r1, [r5, #24]
 8006f36:	e9cd b203 	strd	fp, r2, [sp, #12]
 8006f3a:	9a06      	ldr	r2, [sp, #24]
 8006f3c:	e9cd a201 	strd	sl, r2, [sp, #4]
 8006f40:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8006f44:	9200      	str	r2, [sp, #0]
 8006f46:	78e2      	ldrb	r2, [r4, #3]
 8006f48:	f7ff fd3f 	bl	80069ca <VL53LX_f_014>
		if (status == VL53LX_ERROR_NONE)
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	b930      	cbnz	r0, 8006f5e <VL53LX_f_025+0x1f6>
				VL53LX_f_015(
 8006f50:	4623      	mov	r3, r4
 8006f52:	463a      	mov	r2, r7
 8006f54:	2101      	movs	r1, #1
 8006f56:	4640      	mov	r0, r8
 8006f58:	f7ff fca2 	bl	80068a0 <VL53LX_f_015>
 8006f5c:	4603      	mov	r3, r0
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 8006f5e:	f109 0901 	add.w	r9, r9, #1
 8006f62:	e786      	b.n	8006e72 <VL53LX_f_025+0x10a>
		if (!(presults->active_results < presults->max_results))
 8006f64:	7cb0      	ldrb	r0, [r6, #18]
 8006f66:	7c71      	ldrb	r1, [r6, #17]
 8006f68:	4281      	cmp	r1, r0
 8006f6a:	d939      	bls.n	8006fe0 <VL53LX_f_025+0x278>
		if (ppulse_data->VL53LX_p_010 >
 8006f6c:	2124      	movs	r1, #36	; 0x24
 8006f6e:	fb01 fe02 	mul.w	lr, r1, r2
 8006f72:	eb04 0c0e 	add.w	ip, r4, lr
 8006f76:	696a      	ldr	r2, [r5, #20]
 8006f78:	f8dc 118c 	ldr.w	r1, [ip, #396]	; 0x18c
 8006f7c:	4291      	cmp	r1, r2
 8006f7e:	dd2f      	ble.n	8006fe0 <VL53LX_f_025+0x278>
			ppost_cfg->signal_total_events_limit &&
 8006f80:	f89c 117e 	ldrb.w	r1, [ip, #382]	; 0x17e
 8006f84:	29ff      	cmp	r1, #255	; 0xff
 8006f86:	d02b      	beq.n	8006fe0 <VL53LX_f_025+0x278>
			if (status == VL53LX_ERROR_NONE)
 8006f88:	bb3b      	cbnz	r3, 8006fda <VL53LX_f_025+0x272>
			prange_data =
 8006f8a:	fb1a b800 	smlabb	r8, sl, r0, fp
		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 8006f8e:	f50e 72be 	add.w	r2, lr, #380	; 0x17c
			prange_data =
 8006f92:	44b0      	add	r8, r6
		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 8006f94:	4422      	add	r2, r4
				VL53LX_f_017(
 8006f96:	e9cd 7200 	strd	r7, r2, [sp]
 8006f9a:	8b6b      	ldrh	r3, [r5, #26]
 8006f9c:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
 8006fa0:	f895 1020 	ldrb.w	r1, [r5, #32]
 8006fa4:	f8cd 8008 	str.w	r8, [sp, #8]
 8006fa8:	f7ff fd6d 	bl	8006a86 <VL53LX_f_017>
				VL53LX_f_018(
 8006fac:	9b07      	ldr	r3, [sp, #28]
 8006fae:	e9cd 8300 	strd	r8, r3, [sp]
 8006fb2:	f8b4 3318 	ldrh.w	r3, [r4, #792]	; 0x318
 8006fb6:	f8d4 2324 	ldr.w	r2, [r4, #804]	; 0x324
 8006fba:	f8b4 1322 	ldrh.w	r1, [r4, #802]	; 0x322
 8006fbe:	f8b4 031e 	ldrh.w	r0, [r4, #798]	; 0x31e
 8006fc2:	f000 f841 	bl	8007048 <VL53LX_f_018>
			if (status == VL53LX_ERROR_NONE)
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	b938      	cbnz	r0, 8006fda <VL53LX_f_025+0x272>
 8006fca:	9006      	str	r0, [sp, #24]
				VL53LX_f_019(
 8006fcc:	f9b5 101c 	ldrsh.w	r1, [r5, #28]
 8006fd0:	8be8      	ldrh	r0, [r5, #30]
 8006fd2:	4642      	mov	r2, r8
 8006fd4:	f000 f880 	bl	80070d8 <VL53LX_f_019>
 8006fd8:	9b06      	ldr	r3, [sp, #24]
			presults->active_results++;
 8006fda:	7cb2      	ldrb	r2, [r6, #18]
 8006fdc:	3201      	adds	r2, #1
 8006fde:	74b2      	strb	r2, [r6, #18]
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 8006fe0:	f109 0901 	add.w	r9, r9, #1
 8006fe4:	e757      	b.n	8006e96 <VL53LX_f_025+0x12e>

08006fe6 <VL53LX_f_022>:
	uint8_t                         filter_woi,
	VL53LX_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 8006fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}


	uint8_t w = 0;
	uint8_t j = 0;

	*pa = 0;
 8006fea:	2500      	movs	r5, #0
	*pb = pbins->bin_data[VL53LX_p_032];
 8006fec:	1d84      	adds	r4, r0, #6
	*pa = 0;
 8006fee:	601d      	str	r5, [r3, #0]
	*pb = pbins->bin_data[VL53LX_p_032];
 8006ff0:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
{
 8006ff4:	9e07      	ldr	r6, [sp, #28]
	*pb = pbins->bin_data[VL53LX_p_032];
 8006ff6:	9c06      	ldr	r4, [sp, #24]
	*pc = 0;

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 8006ff8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
	*pb = pbins->bin_data[VL53LX_p_032];
 8006ffc:	6027      	str	r7, [r4, #0]
	*pc = 0;
 8006ffe:	6035      	str	r5, [r6, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 8007000:	fa5f fe85 	uxtb.w	lr, r5
 8007004:	45f4      	cmp	ip, lr
 8007006:	da01      	bge.n	800700c <VL53LX_f_022+0x26>
		if (w < filter_woi)
			*pa += pbins->bin_data[j];
		else if (w > filter_woi)
			*pc += pbins->bin_data[j];
	}
}
 8007008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800700c:	f892 800a 	ldrb.w	r8, [r2, #10]
 8007010:	eb00 040e 	add.w	r4, r0, lr
 8007014:	4444      	add	r4, r8
 8007016:	1a67      	subs	r7, r4, r1
		if (w < filter_woi)
 8007018:	4571      	cmp	r1, lr
			filter_woi) % pbins->VL53LX_p_021;
 800701a:	fb97 f4f8 	sdiv	r4, r7, r8
 800701e:	fb08 7414 	mls	r4, r8, r4, r7
		if (w < filter_woi)
 8007022:	d908      	bls.n	8007036 <VL53LX_f_022+0x50>
			*pa += pbins->bin_data[j];
 8007024:	b2e4      	uxtb	r4, r4
 8007026:	3406      	adds	r4, #6
 8007028:	681f      	ldr	r7, [r3, #0]
 800702a:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 800702e:	4427      	add	r7, r4
 8007030:	601f      	str	r7, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 8007032:	3501      	adds	r5, #1
 8007034:	e7e4      	b.n	8007000 <VL53LX_f_022+0x1a>
		else if (w > filter_woi)
 8007036:	d2fc      	bcs.n	8007032 <VL53LX_f_022+0x4c>
			*pc += pbins->bin_data[j];
 8007038:	b2e4      	uxtb	r4, r4
 800703a:	3406      	adds	r4, #6
 800703c:	6837      	ldr	r7, [r6, #0]
 800703e:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8007042:	4427      	add	r7, r4
 8007044:	6037      	str	r7, [r6, #0]
 8007046:	e7f4      	b.n	8007032 <VL53LX_f_022+0x4c>

08007048 <VL53LX_f_018>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53LX_p_004,
	VL53LX_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 8007048:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800704a:	9c06      	ldr	r4, [sp, #24]
 800704c:	f89d 501c 	ldrb.w	r5, [sp, #28]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 8007050:	81e0      	strh	r0, [r4, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 8007052:	8261      	strh	r1, [r4, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 8007054:	61a2      	str	r2, [r4, #24]
	pdata->VL53LX_p_004 = VL53LX_p_004;
 8007056:	82e3      	strh	r3, [r4, #22]



	if (pdata->fast_osc_frequency == 0)
 8007058:	b101      	cbz	r1, 800705c <VL53LX_f_018+0x14>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;

	if (pdata->total_periods_elapsed == 0)
 800705a:	b912      	cbnz	r2, 8007062 <VL53LX_f_018+0x1a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800705c:	f06f 000e 	mvn.w	r0, #14

	}

	LOG_FUNCTION_END(status);

	return status;
 8007060:	e038      	b.n	80070d4 <VL53LX_f_018+0x8c>
			VL53LX_calc_pll_period_us(pdata->fast_osc_frequency);
 8007062:	4608      	mov	r0, r1
 8007064:	f7fe fe16 	bl	8005c94 <VL53LX_calc_pll_period_us>
		periods_elapsed      = pdata->total_periods_elapsed + 1;
 8007068:	69a3      	ldr	r3, [r4, #24]
		pdata->peak_duration_us    = VL53LX_duration_maths(
 800706a:	89e1      	ldrh	r1, [r4, #14]
		periods_elapsed      = pdata->total_periods_elapsed + 1;
 800706c:	3301      	adds	r3, #1
		pdata->peak_duration_us    = VL53LX_duration_maths(
 800706e:	f44f 6200 	mov.w	r2, #2048	; 0x800
			VL53LX_calc_pll_period_us(pdata->fast_osc_frequency);
 8007072:	4606      	mov	r6, r0
		pdata->peak_duration_us    = VL53LX_duration_maths(
 8007074:	9301      	str	r3, [sp, #4]
 8007076:	f7fe fe13 	bl	8005ca0 <VL53LX_duration_maths>
			((uint32_t)pdata->VL53LX_p_029) << 4,
 800707a:	7c21      	ldrb	r1, [r4, #16]
		pdata->woi_duration_us     = VL53LX_duration_maths(
 800707c:	9b01      	ldr	r3, [sp, #4]
		pdata->peak_duration_us    = VL53LX_duration_maths(
 800707e:	61e0      	str	r0, [r4, #28]
		pdata->woi_duration_us     = VL53LX_duration_maths(
 8007080:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007084:	0109      	lsls	r1, r1, #4
 8007086:	4630      	mov	r0, r6
 8007088:	f7fe fe0a 	bl	8005ca0 <VL53LX_duration_maths>
		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
 800708c:	69e1      	ldr	r1, [r4, #28]
		pdata->woi_duration_us     = VL53LX_duration_maths(
 800708e:	6220      	str	r0, [r4, #32]
		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
 8007090:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007092:	f7fe feae 	bl	8005df2 <VL53LX_rate_maths>
		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
 8007096:	6a21      	ldr	r1, [r4, #32]
		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
 8007098:	8620      	strh	r0, [r4, #48]	; 0x30
		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
 800709a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800709c:	f7fe fea9 	bl	8005df2 <VL53LX_rate_maths>
 80070a0:	8660      	strh	r0, [r4, #50]	; 0x32
		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
 80070a2:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 80070a6:	f7fe fea4 	bl	8005df2 <VL53LX_rate_maths>
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 80070aa:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			VL53LX_rate_per_spad_maths(
 80070ac:	8ae2      	ldrh	r2, [r4, #22]
		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
 80070ae:	86a0      	strh	r0, [r4, #52]	; 0x34
		count_rate_total =
 80070b0:	1819      	adds	r1, r3, r0
		if (histo_merge_nb > 1)
 80070b2:	2d01      	cmp	r5, #1
			VL53LX_rate_per_spad_maths(
 80070b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
			count_rate_total /= histo_merge_nb;
 80070b8:	bf88      	it	hi
 80070ba:	fbb1 f1f5 	udivhi	r1, r1, r5
			VL53LX_rate_per_spad_maths(
 80070be:	2006      	movs	r0, #6
 80070c0:	f7fe feb8 	bl	8005e34 <VL53LX_rate_per_spad_maths>
			VL53LX_events_per_spad_maths(
 80070c4:	69e2      	ldr	r2, [r4, #28]
		pdata->total_rate_per_spad_mcps   =
 80070c6:	86e0      	strh	r0, [r4, #54]	; 0x36
			VL53LX_events_per_spad_maths(
 80070c8:	8ae1      	ldrh	r1, [r4, #22]
 80070ca:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80070cc:	f7fe fdfc 	bl	8005cc8 <VL53LX_events_per_spad_maths>
		pdata->VL53LX_p_009   =
 80070d0:	63a0      	str	r0, [r4, #56]	; 0x38
 80070d2:	2000      	movs	r0, #0
}
 80070d4:	b002      	add	sp, #8
 80070d6:	bd70      	pop	{r4, r5, r6, pc}

080070d8 <VL53LX_f_019>:

void VL53LX_f_019(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53LX_range_data_t *pdata)
{
 80070d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53LX_range_maths(
 80070da:	e9cd 0100 	strd	r0, r1, [sp]
{
 80070de:	4614      	mov	r4, r2
 80070e0:	4605      	mov	r5, r0
 80070e2:	460e      	mov	r6, r1
		(int16_t)VL53LX_range_maths(
 80070e4:	8a92      	ldrh	r2, [r2, #20]
 80070e6:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80070e8:	8a60      	ldrh	r0, [r4, #18]
 80070ea:	2300      	movs	r3, #0
 80070ec:	f7fe feb4 	bl	8005e58 <VL53LX_range_maths>
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53LX_range_maths(
 80070f0:	8aa2      	ldrh	r2, [r4, #20]
 80070f2:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
		(int16_t)VL53LX_range_maths(
 80070f6:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44
		(int16_t)VL53LX_range_maths(
 80070fa:	e9cd 5600 	strd	r5, r6, [sp]
 80070fe:	8a60      	ldrh	r0, [r4, #18]
 8007100:	2300      	movs	r3, #0
 8007102:	f7fe fea9 	bl	8005e58 <VL53LX_range_maths>
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53LX_range_maths(
 8007106:	e9cd 5600 	strd	r5, r6, [sp]
		(int16_t)VL53LX_range_maths(
 800710a:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
		(int16_t)VL53LX_range_maths(
 800710e:	8aa2      	ldrh	r2, [r4, #20]
 8007110:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
 8007114:	8a60      	ldrh	r0, [r4, #18]
 8007116:	2300      	movs	r3, #0
 8007118:	f7fe fe9e 	bl	8005e58 <VL53LX_range_maths>
 800711c:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 8007120:	b002      	add	sp, #8
 8007122:	bd70      	pop	{r4, r5, r6, pc}

08007124 <VL53LX_f_030>:


int8_t  VL53LX_f_030(
	VL53LX_histogram_bin_data_t   *pdata1,
	VL53LX_histogram_bin_data_t   *pdata2)
{
 8007124:	b538      	push	{r3, r4, r5, lr}
 8007126:	4604      	mov	r4, r0
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata1->VL53LX_p_005);
 8007128:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
{
 800712c:	460d      	mov	r5, r1
		(uint32_t)VL53LX_decode_vcsel_period(pdata1->VL53LX_p_005);
 800712e:	f7fe feed 	bl	8005f0c <VL53LX_decode_vcsel_period>

	if (period != 0)
 8007132:	02c2      	lsls	r2, r0, #11
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 8007134:	bf1e      	ittt	ne
 8007136:	f8b5 309c 	ldrhne.w	r3, [r5, #156]	; 0x9c
		remapped_phase =
 800713a:	fbb3 f1f2 	udivne	r1, r3, r2
 800713e:	fb02 3211 	mlsne	r2, r2, r1, r3


	phase_delta = (int32_t)pdata1->zero_distance_phase
 8007142:	f8b4 309c 	ldrh.w	r3, [r4, #156]	; 0x9c
 8007146:	1a9b      	subs	r3, r3, r2
				- (int32_t)remapped_phase;



	if (phase_delta > 0)
 8007148:	2b00      	cmp	r3, #0
 800714a:	dd04      	ble.n	8007156 <VL53LX_f_030+0x32>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 800714c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007150:	f343 20c7 	sbfx	r0, r3, #11, #8
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);

	LOG_FUNCTION_END(0);

	return bin_offset;
}
 8007154:	bd38      	pop	{r3, r4, r5, pc}
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 8007156:	f5b3 6080 	subs.w	r0, r3, #1024	; 0x400
 800715a:	bf48      	it	mi
 800715c:	f203 30ff 	addwmi	r0, r3, #1023	; 0x3ff
 8007160:	f340 20c7 	sbfx	r0, r0, #11, #8
 8007164:	e7f6      	b.n	8007154 <VL53LX_f_030+0x30>

08007166 <VL53LX_f_005>:
{
 8007166:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800716a:	4615      	mov	r5, r2
 800716c:	4604      	mov	r4, r0
	memcpy(
 800716e:	22ac      	movs	r2, #172	; 0xac
 8007170:	4628      	mov	r0, r5
{
 8007172:	460e      	mov	r6, r1
	memcpy(
 8007174:	f002 fb82 	bl	800987c <memcpy>
	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 8007178:	2300      	movs	r3, #0
 800717a:	7a68      	ldrb	r0, [r5, #9]
 800717c:	f105 0218 	add.w	r2, r5, #24
		pxtalk_realigned->bin_data[i] = 0;
 8007180:	461f      	mov	r7, r3
	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 8007182:	b2d9      	uxtb	r1, r3
 8007184:	4288      	cmp	r0, r1
 8007186:	d813      	bhi.n	80071b0 <VL53LX_f_005+0x4a>
	bin_offset =  VL53LX_f_030(
 8007188:	4621      	mov	r1, r4
 800718a:	4630      	mov	r0, r6
 800718c:	f7ff ffca 	bl	8007124 <VL53LX_f_030>
	if (pxtalk->VL53LX_p_021 < pbins->VL53LX_p_021)
 8007190:	7ab2      	ldrb	r2, [r6, #10]
 8007192:	7aa7      	ldrb	r7, [r4, #10]
 8007194:	4297      	cmp	r7, r2
 8007196:	bf28      	it	cs
 8007198:	4617      	movcs	r7, r2
	for (i = 0 ; i <  min_bins ; i++) {
 800719a:	3418      	adds	r4, #24
 800719c:	4601      	mov	r1, r0
 800719e:	f04f 0c00 	mov.w	ip, #0
 80071a2:	b252      	sxtb	r2, r2
 80071a4:	fa5f f38c 	uxtb.w	r3, ip
 80071a8:	42bb      	cmp	r3, r7
 80071aa:	d305      	bcc.n	80071b8 <VL53LX_f_005+0x52>
}
 80071ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pxtalk_realigned->bin_data[i] = 0;
 80071b0:	f842 7b04 	str.w	r7, [r2], #4
	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 80071b4:	3301      	adds	r3, #1
 80071b6:	e7e4      	b.n	8007182 <VL53LX_f_005+0x1c>
		if (bin_offset >= 0)
 80071b8:	2800      	cmp	r0, #0
					% (int8_t)pbins->VL53LX_p_021;
 80071ba:	bfb5      	itete	lt
 80071bc:	eb02 0e01 	addlt.w	lr, r2, r1
				% (int8_t)pbins->VL53LX_p_021;
 80071c0:	fb91 f3f2 	sdivge	r3, r1, r2
					% (int8_t)pbins->VL53LX_p_021;
 80071c4:	fb9e f3f2 	sdivlt	r3, lr, r2
				% (int8_t)pbins->VL53LX_p_021;
 80071c8:	fb02 1313 	mlsge	r3, r2, r3, r1
					% (int8_t)pbins->VL53LX_p_021;
 80071cc:	bfb8      	it	lt
 80071ce:	fb02 e313 	mlslt	r3, r2, r3, lr
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 80071d2:	b25b      	sxtb	r3, r3
		if (pbins->bin_data[(uint8_t)bin_access] >
 80071d4:	fa5f f883 	uxtb.w	r8, r3
 80071d8:	eb06 0388 	add.w	r3, r6, r8, lsl #2
			pxtalk->bin_data[i]) {
 80071dc:	f8d4 9000 	ldr.w	r9, [r4]
		if (pbins->bin_data[(uint8_t)bin_access] >
 80071e0:	f8d3 e018 	ldr.w	lr, [r3, #24]
 80071e4:	45ce      	cmp	lr, r9
				- pxtalk->bin_data[i];
 80071e6:	bfcc      	ite	gt
 80071e8:	ebae 0e09 	subgt.w	lr, lr, r9
			pbins->bin_data[(uint8_t)bin_access] = 0;
 80071ec:	f04f 0e00 	movle.w	lr, #0
 80071f0:	f8c3 e018 	str.w	lr, [r3, #24]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 80071f4:	f108 0306 	add.w	r3, r8, #6
			pxtalk->bin_data[i];
 80071f8:	f854 eb04 	ldr.w	lr, [r4], #4
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 80071fc:	f845 e023 	str.w	lr, [r5, r3, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 8007200:	f10c 0c01 	add.w	ip, ip, #1
 8007204:	3101      	adds	r1, #1
 8007206:	e7cd      	b.n	80071a4 <VL53LX_f_005+0x3e>

08007208 <VL53LX_f_031>:


VL53LX_Error  VL53LX_f_031(
	VL53LX_histogram_bin_data_t   *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 8007208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800720c:	460c      	mov	r4, r1

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53LX_histogram_bin_data_t));
 800720e:	22ac      	movs	r2, #172	; 0xac
 8007210:	4601      	mov	r1, r0
{
 8007212:	b088      	sub	sp, #32
 8007214:	4607      	mov	r7, r0
	memcpy(podata, pidata, sizeof(VL53LX_histogram_bin_data_t));
 8007216:	4620      	mov	r0, r4
 8007218:	f002 fb30 	bl	800987c <memcpy>


	podata->VL53LX_p_021 = 0;

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
		podata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE+1;
 800721c:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
	podata->VL53LX_p_021 = 0;
 8007220:	2300      	movs	r3, #0
		podata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE+1;
 8007222:	60e2      	str	r2, [r4, #12]

	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 8007224:	7a60      	ldrb	r0, [r4, #9]
	podata->VL53LX_p_021 = 0;
 8007226:	72a3      	strb	r3, [r4, #10]
		podata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE+1;
 8007228:	f241 0210 	movw	r2, #4112	; 0x1010
 800722c:	8222      	strh	r2, [r4, #16]
		podata->bin_data[lc] = 0;
 800722e:	461d      	mov	r5, r3
 8007230:	f104 0218 	add.w	r2, r4, #24
	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 8007234:	b2d9      	uxtb	r1, r3
 8007236:	4288      	cmp	r0, r1
 8007238:	d864      	bhi.n	8007304 <VL53LX_f_031+0xfc>
 800723a:	466a      	mov	r2, sp
 800723c:	ad04      	add	r5, sp, #16
 800723e:	4629      	mov	r1, r5
 8007240:	2310      	movs	r3, #16
 8007242:	4616      	mov	r6, r2



	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
		bin_initial_index[lc] = 0x00;
 8007244:	2000      	movs	r0, #0
 8007246:	3b01      	subs	r3, #1
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8007248:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		bin_initial_index[lc] = 0x00;
 800724c:	f802 0b01 	strb.w	r0, [r2], #1
		bin_repeat_count[lc]  = 0x00;
 8007250:	f801 0b01 	strb.w	r0, [r1], #1
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8007254:	d1f7      	bne.n	8007246 <VL53LX_f_031+0x3e>
 8007256:	f107 0c0c 	add.w	ip, r7, #12
 800725a:	469e      	mov	lr, r3
 800725c:	3728      	adds	r7, #40	; 0x28

	bin_seq_length = 0x00;

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {

		bin_cfg = pidata->bin_seq[lc];
 800725e:	f81c 0b01 	ldrb.w	r0, [ip], #1



		if (bin_repeat_count[bin_cfg] == 0) {
 8007262:	aa08      	add	r2, sp, #32
 8007264:	4402      	add	r2, r0
 8007266:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 800726a:	b949      	cbnz	r1, 8007280 <VL53LX_f_031+0x78>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 800726c:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8007270:	f802 8c20 	strb.w	r8, [r2, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 8007274:	eb04 0803 	add.w	r8, r4, r3
			bin_seq_length++;
 8007278:	3301      	adds	r3, #1
			podata->bin_seq[bin_seq_length] = bin_cfg;
 800727a:	f888 000c 	strb.w	r0, [r8, #12]
			bin_seq_length++;
 800727e:	b2db      	uxtb	r3, r3
		}

		bin_repeat_count[bin_cfg]++;
 8007280:	3101      	adds	r1, #1
 8007282:	f802 1c10 	strb.w	r1, [r2, #-16]



		VL53LX_p_032 = bin_initial_index[bin_cfg];

		for (i = 0 ; i < 4 ; i++)
 8007286:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 800728a:	3206      	adds	r2, #6
 800728c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007290:	f1a7 0110 	sub.w	r1, r7, #16
			podata->bin_data[VL53LX_p_032+i] +=
				pidata->bin_data[lc*4+i];
 8007294:	f851 8b04 	ldr.w	r8, [r1], #4
			podata->bin_data[VL53LX_p_032+i] +=
 8007298:	6810      	ldr	r0, [r2, #0]
		for (i = 0 ; i < 4 ; i++)
 800729a:	42b9      	cmp	r1, r7
			podata->bin_data[VL53LX_p_032+i] +=
 800729c:	4440      	add	r0, r8
 800729e:	f842 0b04 	str.w	r0, [r2], #4
		for (i = 0 ; i < 4 ; i++)
 80072a2:	d1f7      	bne.n	8007294 <VL53LX_f_031+0x8c>
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80072a4:	f10e 0e04 	add.w	lr, lr, #4
 80072a8:	f1be 0f18 	cmp.w	lr, #24
 80072ac:	f101 0710 	add.w	r7, r1, #16
 80072b0:	d1d5      	bne.n	800725e <VL53LX_f_031+0x56>
 80072b2:	f104 020c 	add.w	r2, r4, #12
 80072b6:	f104 0012 	add.w	r0, r4, #18



	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {

		bin_cfg = podata->bin_seq[lc];
 80072ba:	f812 1b01 	ldrb.w	r1, [r2], #1

		if (bin_cfg <= VL53LX_MAX_BIN_SEQUENCE_CODE)
 80072be:	290f      	cmp	r1, #15
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 80072c0:	bf9b      	ittet	ls
 80072c2:	af08      	addls	r7, sp, #32
 80072c4:	19c9      	addls	r1, r1, r7
		else
			podata->bin_rep[lc] = 0;
 80072c6:	2100      	movhi	r1, #0
				bin_repeat_count[bin_cfg];
 80072c8:	f811 1c10 	ldrbls.w	r1, [r1, #-16]
 80072cc:	7151      	strb	r1, [r2, #5]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80072ce:	4282      	cmp	r2, r0
 80072d0:	d1f3      	bne.n	80072ba <VL53LX_f_031+0xb2>
	}

	podata->VL53LX_p_021 = bin_seq_length * 4;
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	72a3      	strb	r3, [r4, #10]
 80072d6:	2000      	movs	r0, #0



	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {

		repeat_count = (int32_t)bin_repeat_count[lc];
 80072d8:	f815 7b01 	ldrb.w	r7, [r5], #1

		if (repeat_count > 0) {
 80072dc:	b9b7      	cbnz	r7, 800730c <VL53LX_f_031+0x104>
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 80072de:	3001      	adds	r0, #1
 80072e0:	2810      	cmp	r0, #16
 80072e2:	d1f9      	bne.n	80072d8 <VL53LX_f_031+0xd0>
		}
	}



	podata->number_of_ambient_bins = 0;
 80072e4:	2300      	movs	r3, #0
 80072e6:	72e3      	strb	r3, [r4, #11]
	if ((bin_repeat_count[7] > 0) ||
 80072e8:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80072ec:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80072f0:	4313      	orrs	r3, r2
		(bin_repeat_count[15] > 0))
		podata->number_of_ambient_bins = 4;
 80072f2:	bf18      	it	ne
 80072f4:	2304      	movne	r3, #4

	LOG_FUNCTION_END(status);

	return status;
}
 80072f6:	f04f 0000 	mov.w	r0, #0
		podata->number_of_ambient_bins = 4;
 80072fa:	bf18      	it	ne
 80072fc:	72e3      	strbne	r3, [r4, #11]
}
 80072fe:	b008      	add	sp, #32
 8007300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		podata->bin_data[lc] = 0;
 8007304:	f842 5b04 	str.w	r5, [r2], #4
	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 8007308:	3301      	adds	r3, #1
 800730a:	e793      	b.n	8007234 <VL53LX_f_031+0x2c>
			for (i = 0 ; i < 4 ; i++) {
 800730c:	5c33      	ldrb	r3, [r6, r0]
 800730e:	3306      	adds	r3, #6
					(repeat_count/2);
 8007310:	ea4f 0c67 	mov.w	ip, r7, asr #1
 8007314:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007318:	2204      	movs	r2, #4
				podata->bin_data[VL53LX_p_032+i] +=
 800731a:	6819      	ldr	r1, [r3, #0]
				podata->bin_data[VL53LX_p_032+i] /=
 800731c:	3a01      	subs	r2, #1
			for (i = 0 ; i < 4 ; i++) {
 800731e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				podata->bin_data[VL53LX_p_032+i] +=
 8007322:	4461      	add	r1, ip
				podata->bin_data[VL53LX_p_032+i] /=
 8007324:	fb91 f1f7 	sdiv	r1, r1, r7
 8007328:	f843 1b04 	str.w	r1, [r3], #4
			for (i = 0 ; i < 4 ; i++) {
 800732c:	d1f5      	bne.n	800731a <VL53LX_f_031+0x112>
 800732e:	e7d6      	b.n	80072de <VL53LX_f_031+0xd6>

08007330 <VL53LX_hist_process_data>:
	VL53LX_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53LX_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 8007330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007334:	ed2d 8b02 	vpush	{d8}
 8007338:	b0c1      	sub	sp, #260	; 0x104
	VL53LX_histogram_bin_data_t             bins_averaged;
	VL53LX_histogram_bin_data_t           *pbins_averaged = &bins_averaged;

	VL53LX_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 800733a:	f04f 0800 	mov.w	r8, #0
{
 800733e:	9f4c      	ldr	r7, [sp, #304]	; 0x130
 8007340:	9d4f      	ldr	r5, [sp, #316]	; 0x13c
	uint32_t xtalk_rate_kcps               = 0;
 8007342:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
			pbins_input,
			pbins_averaged);



	VL53LX_init_histogram_bin_data_struct(
 8007346:	f107 0948 	add.w	r9, r7, #72	; 0x48
{
 800734a:	ee08 0a10 	vmov	s16, r0
 800734e:	468a      	mov	sl, r1
	VL53LX_f_031(
 8007350:	4618      	mov	r0, r3
 8007352:	a915      	add	r1, sp, #84	; 0x54
{
 8007354:	461e      	mov	r6, r3
 8007356:	4614      	mov	r4, r2
	VL53LX_f_031(
 8007358:	f7ff ff56 	bl	8007208 <VL53LX_f_031>
	VL53LX_init_histogram_bin_data_struct(
 800735c:	7ab9      	ldrb	r1, [r7, #10]
 800735e:	464a      	mov	r2, r9
 8007360:	4640      	mov	r0, r8
 8007362:	f7fe fdf9 	bl	8005f58 <VL53LX_init_histogram_bin_data_struct>
			pxtalk_shape->xtalk_shape.VL53LX_p_021,
			&(pxtalk_shape->xtalk_hist_removed));



	VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
 8007366:	4649      	mov	r1, r9
 8007368:	4638      	mov	r0, r7
 800736a:	f7fe fdd4 	bl	8005f16 <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53LX_ERROR_NONE) &&
 800736e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007372:	b1eb      	cbz	r3, 80073b0 <VL53LX_hist_process_data+0x80>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
		status =
		VL53LX_f_032(
 8007374:	ab0a      	add	r3, sp, #40	; 0x28
 8007376:	9304      	str	r3, [sp, #16]
 8007378:	f896 30a9 	ldrb.w	r3, [r6, #169]	; 0xa9
 800737c:	9303      	str	r3, [sp, #12]
 800737e:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
 8007382:	9302      	str	r3, [sp, #8]
 8007384:	f8b6 307c 	ldrh.w	r3, [r6, #124]	; 0x7c
 8007388:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	; 0x32
 800738c:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 8007390:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007392:	e9cd 8300 	strd	r8, r3, [sp]
 8007396:	4643      	mov	r3, r8
 8007398:	f000 ffda 	bl	8008350 <VL53LX_f_032>
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53LX_ERROR_NONE) &&
 800739c:	b940      	cbnz	r0, 80073b0 <VL53LX_hist_process_data+0x80>
 800739e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80073a2:	b12b      	cbz	r3, 80073b0 <VL53LX_hist_process_data+0x80>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
		status =
			VL53LX_f_033(
 80073a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073a6:	464b      	mov	r3, r9
 80073a8:	4639      	mov	r1, r7
 80073aa:	a815      	add	r0, sp, #84	; 0x54
 80073ac:	f001 f879 	bl	80084a2 <VL53LX_f_033>





	presults->xmonitor.total_periods_elapsed =
 80073b0:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 80073b2:	f8c5 315c 	str.w	r3, [r5, #348]	; 0x15c
		pbins_averaged->total_periods_elapsed;
	presults->xmonitor.VL53LX_p_004 =
		pbins_averaged->result__dss_actual_effective_spads;

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 80073b6:	2600      	movs	r6, #0
	presults->xmonitor.VL53LX_p_004 =
 80073b8:	f8bd 30d0 	ldrh.w	r3, [sp, #208]	; 0xd0
 80073bc:	f8a5 315a 	strh.w	r3, [r5, #346]	; 0x15a
	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 80073c0:	f8a5 6174 	strh.w	r6, [r5, #372]	; 0x174
	presults->xmonitor.VL53LX_p_009     = 0;
 80073c4:	f8c5 617c 	str.w	r6, [r5, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 80073c8:	f885 6144 	strb.w	r6, [r5, #324]	; 0x144
	presults->xmonitor.range_status = VL53LX_DEVICEERROR_NOUPDATE;
 80073cc:	f885 618e 	strb.w	r6, [r5, #398]	; 0x18e



	xtalk_enable = 0;
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 80073d0:	f894 8028 	ldrb.w	r8, [r4, #40]	; 0x28
	xtalk_enable = 0;
 80073d4:	ebb8 0806 	subs.w	r8, r8, r6
 80073d8:	bf18      	it	ne
 80073da:	f04f 0801 	movne.w	r8, #1
			delta_mm <
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {



				memcpy(
 80073de:	f505 7ba2 	add.w	fp, r5, #324	; 0x144
		VL53LX_f_025(
 80073e2:	9b50      	ldr	r3, [sp, #320]	; 0x140
		ppost_cfg->algo__crosstalk_compensation_enable = r;
 80073e4:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
		VL53LX_f_025(
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	e9cd 5304 	strd	r5, r3, [sp, #16]
 80073ee:	ab0b      	add	r3, sp, #44	; 0x2c
 80073f0:	9303      	str	r3, [sp, #12]
 80073f2:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 80073f4:	9302      	str	r3, [sp, #8]
 80073f6:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 80073f8:	4622      	mov	r2, r4
 80073fa:	e9cd 9300 	strd	r9, r3, [sp]
 80073fe:	ee18 0a10 	vmov	r0, s16
 8007402:	ab15      	add	r3, sp, #84	; 0x54
 8007404:	4651      	mov	r1, sl
 8007406:	f7ff fcaf 	bl	8006d68 <VL53LX_f_025>
		if (!(status == VL53LX_ERROR_NONE && r == 0))
 800740a:	ea40 0206 	orr.w	r2, r0, r6
 800740e:	f012 0fff 	tst.w	r2, #255	; 0xff
		VL53LX_f_025(
 8007412:	4603      	mov	r3, r0
		if (!(status == VL53LX_ERROR_NONE && r == 0))
 8007414:	d00b      	beq.n	800742e <VL53LX_hist_process_data+0xfe>
	for (r = 0 ; r <= xtalk_enable ; r++) {
 8007416:	3601      	adds	r6, #1
 8007418:	b2f2      	uxtb	r2, r6
 800741a:	4590      	cmp	r8, r2
 800741c:	d2e1      	bcs.n	80073e2 <VL53LX_hist_process_data+0xb2>
	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;

	LOG_FUNCTION_END(status);

	return status;
}
 800741e:	4618      	mov	r0, r3
	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 8007420:	f884 8028 	strb.w	r8, [r4, #40]	; 0x28
}
 8007424:	b041      	add	sp, #260	; 0x104
 8007426:	ecbd 8b02 	vpop	{d8}
 800742a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (presults->active_results == 0) {
 800742e:	7ca9      	ldrb	r1, [r5, #18]
 8007430:	b931      	cbnz	r1, 8007440 <VL53LX_hist_process_data+0x110>
			pdata->ambient_count_rate_mcps =
 8007432:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 8007436:	f8a5 2048 	strh.w	r2, [r5, #72]	; 0x48
			pdata->VL53LX_p_004 =
 800743a:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 800743e:	856a      	strh	r2, [r5, #42]	; 0x2a
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 8007440:	9850      	ldr	r0, [sp, #320]	; 0x140
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 8007442:	8f22      	ldrh	r2, [r4, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 8007444:	7800      	ldrb	r0, [r0, #0]
 8007446:	4342      	muls	r2, r0
		max_xtalk_rate_per_spad_kcps <<= 4;
 8007448:	0112      	lsls	r2, r2, #4
 800744a:	9207      	str	r2, [sp, #28]
		for (t = 0 ; t < presults->active_results ; t++) {
 800744c:	224c      	movs	r2, #76	; 0x4c
 800744e:	fb12 5201 	smlabb	r2, r2, r1, r5
 8007452:	462f      	mov	r7, r5
 8007454:	9208      	str	r2, [sp, #32]
 8007456:	9a08      	ldr	r2, [sp, #32]
 8007458:	42ba      	cmp	r2, r7
 800745a:	d0dc      	beq.n	8007416 <VL53LX_hist_process_data+0xe6>
			if (pdata->max_range_mm > pdata->min_range_mm)
 800745c:	f9b7 105c 	ldrsh.w	r1, [r7, #92]	; 0x5c
 8007460:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
			if (pdata->median_range_mm  >
 8007464:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
			if (pdata->max_range_mm > pdata->min_range_mm)
 8007468:	4291      	cmp	r1, r2
					pdata->max_range_mm -
 800746a:	bfcc      	ite	gt
 800746c:	1a8a      	subgt	r2, r1, r2
					pdata->min_range_mm -
 800746e:	1a52      	suble	r2, r2, r1
			if (pdata->median_range_mm  >
 8007470:	f9b7 105a 	ldrsh.w	r1, [r7, #90]	; 0x5a
 8007474:	4288      	cmp	r0, r1
				delta_mm =
 8007476:	b212      	sxth	r2, r2
			if (pdata->median_range_mm  >
 8007478:	da1b      	bge.n	80074b2 <VL53LX_hist_process_data+0x182>
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800747a:	f9b4 0036 	ldrsh.w	r0, [r4, #54]	; 0x36
 800747e:	4288      	cmp	r0, r1
 8007480:	dd17      	ble.n	80074b2 <VL53LX_hist_process_data+0x182>
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8007482:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007484:	9807      	ldr	r0, [sp, #28]
 8007486:	4281      	cmp	r1, r0
 8007488:	d213      	bcs.n	80074b2 <VL53LX_hist_process_data+0x182>
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 800748a:	9850      	ldr	r0, [sp, #320]	; 0x140
			XtalkDetectMaxSigma =
 800748c:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 800748e:	7800      	ldrb	r0, [r0, #0]
 8007490:	4341      	muls	r1, r0
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 8007492:	f8b7 0050 	ldrh.w	r0, [r7, #80]	; 0x50
			max_xtalk_rate_per_spad_kcps &&
 8007496:	ebb0 1f41 	cmp.w	r0, r1, lsl #5
 800749a:	d20a      	bcs.n	80074b2 <VL53LX_hist_process_data+0x182>
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 800749c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800749e:	428a      	cmp	r2, r1
 80074a0:	da07      	bge.n	80074b2 <VL53LX_hist_process_data+0x182>
				memcpy(
 80074a2:	224c      	movs	r2, #76	; 0x4c
 80074a4:	f107 0114 	add.w	r1, r7, #20
 80074a8:	4658      	mov	r0, fp
 80074aa:	9309      	str	r3, [sp, #36]	; 0x24
 80074ac:	f002 f9e6 	bl	800987c <memcpy>
 80074b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
		for (t = 0 ; t < presults->active_results ; t++) {
 80074b2:	374c      	adds	r7, #76	; 0x4c
 80074b4:	e7cf      	b.n	8007456 <VL53LX_hist_process_data+0x126>

080074b6 <VL53LX_nvm_enable>:

VL53LX_Error VL53LX_nvm_enable(
	VL53LX_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 80074b6:	b570      	push	{r4, r5, r6, lr}
 80074b8:	4604      	mov	r4, r0
 80074ba:	460d      	mov	r5, r1
 80074bc:	4616      	mov	r6, r2




	if (status == VL53LX_ERROR_NONE)
		status = VL53LX_disable_firmware(Dev);
 80074be:	f7fd f964 	bl	800478a <VL53LX_disable_firmware>




	if (status == VL53LX_ERROR_NONE)
 80074c2:	bb50      	cbnz	r0, 800751a <VL53LX_nvm_enable+0x64>
		status = VL53LX_enable_powerforce(Dev);
 80074c4:	4620      	mov	r0, r4
 80074c6:	f7fd f969 	bl	800479c <VL53LX_enable_powerforce>



	if (status == VL53LX_ERROR_NONE)
 80074ca:	bb30      	cbnz	r0, 800751a <VL53LX_nvm_enable+0x64>
		status = VL53LX_WaitUs(
 80074cc:	21fa      	movs	r1, #250	; 0xfa
 80074ce:	4620      	mov	r0, r4
 80074d0:	f7fa f88a 	bl	80015e8 <VL53LX_WaitUs>
			Dev,
			VL53LX_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53LX_ERROR_NONE)
 80074d4:	bb08      	cbnz	r0, 800751a <VL53LX_nvm_enable+0x64>
		status = VL53LX_WrByte(
 80074d6:	2201      	movs	r2, #1
 80074d8:	f240 7181 	movw	r1, #1921	; 0x781
 80074dc:	4620      	mov	r0, r4
 80074de:	f7fa f827 	bl	8001530 <VL53LX_WrByte>
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 80074e2:	b9d0      	cbnz	r0, 800751a <VL53LX_nvm_enable+0x64>
		status = VL53LX_WrByte(
 80074e4:	2205      	movs	r2, #5
 80074e6:	f240 6183 	movw	r1, #1667	; 0x683
 80074ea:	4620      	mov	r0, r4
 80074ec:	f7fa f820 	bl	8001530 <VL53LX_WrByte>
					VL53LX_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53LX_ERROR_NONE)
 80074f0:	b998      	cbnz	r0, 800751a <VL53LX_nvm_enable+0x64>
		status = VL53LX_WaitUs(
 80074f2:	4631      	mov	r1, r6
 80074f4:	4620      	mov	r0, r4
 80074f6:	f7fa f877 	bl	80015e8 <VL53LX_WaitUs>
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53LX_ERROR_NONE)
 80074fa:	b970      	cbnz	r0, 800751a <VL53LX_nvm_enable+0x64>
		status = VL53LX_WrByte(
 80074fc:	2201      	movs	r2, #1
 80074fe:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8007502:	4620      	mov	r0, r4
 8007504:	f7fa f814 	bl	8001530 <VL53LX_WrByte>
					Dev,
					VL53LX_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53LX_ERROR_NONE)
 8007508:	b938      	cbnz	r0, 800751a <VL53LX_nvm_enable+0x64>
		status = VL53LX_WrWord(
 800750a:	462a      	mov	r2, r5
 800750c:	4620      	mov	r0, r4
 800750e:	f240 7184 	movw	r1, #1924	; 0x784

	LOG_FUNCTION_END(status);

	return status;

}
 8007512:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		status = VL53LX_WrWord(
 8007516:	f7fa b81d 	b.w	8001554 <VL53LX_WrWord>
}
 800751a:	bd70      	pop	{r4, r5, r6, pc}

0800751c <VL53LX_nvm_read>:
VL53LX_Error VL53LX_nvm_read(
	VL53LX_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 800751c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751e:	4605      	mov	r5, r0
 8007520:	461e      	mov	r6, r3
	trace_print(
		   VL53LX_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 8007522:	460c      	mov	r4, r1
	VL53LX_Error status   = VL53LX_ERROR_NONE;
 8007524:	2000      	movs	r0, #0
		nvm_addr < (start_address+count) ; nvm_addr++) {
 8007526:	188f      	adds	r7, r1, r2
	for (nvm_addr = start_address;
 8007528:	42bc      	cmp	r4, r7
 800752a:	db00      	blt.n	800752e <VL53LX_nvm_read+0x12>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800752c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (status == VL53LX_ERROR_NONE)
 800752e:	bb00      	cbnz	r0, 8007572 <VL53LX_nvm_read+0x56>
			status = VL53LX_WrByte(
 8007530:	4622      	mov	r2, r4
 8007532:	f240 7194 	movw	r1, #1940	; 0x794
 8007536:	4628      	mov	r0, r5
 8007538:	f7f9 fffa 	bl	8001530 <VL53LX_WrByte>
		if (status == VL53LX_ERROR_NONE)
 800753c:	b9c8      	cbnz	r0, 8007572 <VL53LX_nvm_read+0x56>
			status = VL53LX_WrByte(
 800753e:	4602      	mov	r2, r0
 8007540:	f240 7183 	movw	r1, #1923	; 0x783
 8007544:	4628      	mov	r0, r5
 8007546:	f7f9 fff3 	bl	8001530 <VL53LX_WrByte>
		if (status == VL53LX_ERROR_NONE)
 800754a:	b990      	cbnz	r0, 8007572 <VL53LX_nvm_read+0x56>
			status = VL53LX_WaitUs(
 800754c:	2105      	movs	r1, #5
 800754e:	4628      	mov	r0, r5
 8007550:	f7fa f84a 	bl	80015e8 <VL53LX_WaitUs>
		if (status == VL53LX_ERROR_NONE)
 8007554:	b968      	cbnz	r0, 8007572 <VL53LX_nvm_read+0x56>
			status = VL53LX_WrByte(
 8007556:	2201      	movs	r2, #1
 8007558:	f240 7183 	movw	r1, #1923	; 0x783
 800755c:	4628      	mov	r0, r5
 800755e:	f7f9 ffe7 	bl	8001530 <VL53LX_WrByte>
		if (status == VL53LX_ERROR_NONE)
 8007562:	b930      	cbnz	r0, 8007572 <VL53LX_nvm_read+0x56>
			status = VL53LX_ReadMulti(
 8007564:	2304      	movs	r3, #4
 8007566:	4632      	mov	r2, r6
 8007568:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 800756c:	4628      	mov	r0, r5
 800756e:	f7f9 ffc7 	bl	8001500 <VL53LX_ReadMulti>
		nvm_addr < (start_address+count) ; nvm_addr++) {
 8007572:	3401      	adds	r4, #1
		pdata = pdata + 4;
 8007574:	3604      	adds	r6, #4
		nvm_addr < (start_address+count) ; nvm_addr++) {
 8007576:	b2e4      	uxtb	r4, r4
 8007578:	e7d6      	b.n	8007528 <VL53LX_nvm_read+0xc>

0800757a <VL53LX_nvm_disable>:


VL53LX_Error VL53LX_nvm_disable(
	VL53LX_DEV    Dev)
{
 800757a:	b510      	push	{r4, lr}
	VL53LX_Error status = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
		status = VL53LX_WrByte(
 800757c:	2201      	movs	r2, #1
 800757e:	f240 7183 	movw	r1, #1923	; 0x783
{
 8007582:	4604      	mov	r4, r0
		status = VL53LX_WrByte(
 8007584:	f7f9 ffd4 	bl	8001530 <VL53LX_WrByte>
					VL53LX_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 8007588:	b978      	cbnz	r0, 80075aa <VL53LX_nvm_disable+0x30>
		status = VL53LX_WrByte(
 800758a:	4602      	mov	r2, r0
 800758c:	f240 7181 	movw	r1, #1921	; 0x781
 8007590:	4620      	mov	r0, r4
 8007592:	f7f9 ffcd 	bl	8001530 <VL53LX_WrByte>
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53LX_ERROR_NONE)
 8007596:	b940      	cbnz	r0, 80075aa <VL53LX_nvm_disable+0x30>
		status = VL53LX_disable_powerforce(Dev);
 8007598:	4620      	mov	r0, r4
 800759a:	f7fd f902 	bl	80047a2 <VL53LX_disable_powerforce>



	if (status == VL53LX_ERROR_NONE)
 800759e:	b920      	cbnz	r0, 80075aa <VL53LX_nvm_disable+0x30>
		status = VL53LX_enable_firmware(Dev);
 80075a0:	4620      	mov	r0, r4

	LOG_FUNCTION_END(status);

	return status;

}
 80075a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		status = VL53LX_enable_firmware(Dev);
 80075a6:	f7fd b8ed 	b.w	8004784 <VL53LX_enable_firmware>
}
 80075aa:	bd10      	pop	{r4, pc}

080075ac <VL53LX_nvm_decode_cal_peak_rate_map>:
	VL53LX_Error status   = VL53LX_ERROR_NONE;

	uint8_t   *ptmp = NULL;
	uint8_t       i = 0;

	if (buf_size < VL53LX_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 80075ac:	2837      	cmp	r0, #55	; 0x37
{
 80075ae:	b570      	push	{r4, r5, r6, lr}
 80075b0:	460d      	mov	r5, r1
 80075b2:	4614      	mov	r4, r2
	if (buf_size < VL53LX_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 80075b4:	d91c      	bls.n	80075f0 <VL53LX_nvm_decode_cal_peak_rate_map+0x44>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;

	pdata->cal_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 80075b6:	2002      	movs	r0, #2
 80075b8:	f7fd f89d 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>

	pdata->cal_reflectance_pc =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 80075bc:	1ca9      	adds	r1, r5, #2
	pdata->cal_distance_mm =
 80075be:	8020      	strh	r0, [r4, #0]
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 80075c0:	2002      	movs	r0, #2
 80075c2:	f7fd f898 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;

	pdata->max_samples = VL53LX_NVM_PEAK_RATE_MAP_SAMPLES;
 80075c6:	2319      	movs	r3, #25
 80075c8:	80a3      	strh	r3, [r4, #4]
	pdata->cal_reflectance_pc =
 80075ca:	0980      	lsrs	r0, r0, #6
	pdata->width       = VL53LX_NVM_PEAK_RATE_MAP_WIDTH;
 80075cc:	2305      	movs	r3, #5
	pdata->cal_reflectance_pc =
 80075ce:	8060      	strh	r0, [r4, #2]
	pdata->width       = VL53LX_NVM_PEAK_RATE_MAP_WIDTH;
 80075d0:	80e3      	strh	r3, [r4, #6]
	pdata->height      = VL53LX_NVM_PEAK_RATE_MAP_HEIGHT;
 80075d2:	8123      	strh	r3, [r4, #8]

	ptmp = pbuffer + 4;
 80075d4:	1d2e      	adds	r6, r5, #4
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 80075d6:	340a      	adds	r4, #10
 80075d8:	3536      	adds	r5, #54	; 0x36
		pdata->peak_rate_mcps[i] =
			(uint16_t)VL53LX_i2c_decode_uint16_t(2, ptmp);
 80075da:	4631      	mov	r1, r6
 80075dc:	2002      	movs	r0, #2
 80075de:	f7fd f88a 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
		ptmp += 2;
 80075e2:	3602      	adds	r6, #2
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 80075e4:	42ae      	cmp	r6, r5
		pdata->peak_rate_mcps[i] =
 80075e6:	f824 0b02 	strh.w	r0, [r4], #2
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 80075ea:	d1f6      	bne.n	80075da <VL53LX_nvm_decode_cal_peak_rate_map+0x2e>
	}

	return status;
 80075ec:	2000      	movs	r0, #0
}
 80075ee:	bd70      	pop	{r4, r5, r6, pc}
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 80075f0:	f06f 0008 	mvn.w	r0, #8
 80075f4:	e7fb      	b.n	80075ee <VL53LX_nvm_decode_cal_peak_rate_map+0x42>

080075f6 <VL53LX_nvm_decode_additional_offset_cal_data>:
	VL53LX_additional_offset_cal_data_t *pdata)
{

	VL53LX_Error status   = VL53LX_ERROR_NONE;

	if (buf_size < VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 80075f6:	2807      	cmp	r0, #7
{
 80075f8:	b538      	push	{r3, r4, r5, lr}
 80075fa:	460d      	mov	r5, r1
 80075fc:	4614      	mov	r4, r2
	if (buf_size < VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 80075fe:	d914      	bls.n	800762a <VL53LX_nvm_decode_additional_offset_cal_data+0x34>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 8007600:	2002      	movs	r0, #2
 8007602:	f7fd f878 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 8007606:	1ca9      	adds	r1, r5, #2
	pdata->result__mm_inner_actual_effective_spads =
 8007608:	8020      	strh	r0, [r4, #0]
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800760a:	2002      	movs	r0, #2
 800760c:	f7fd f873 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 8007610:	1d29      	adds	r1, r5, #4
	pdata->result__mm_outer_actual_effective_spads =
 8007612:	8060      	strh	r0, [r4, #2]
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 8007614:	2002      	movs	r0, #2
 8007616:	f7fd f86e 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800761a:	1da9      	adds	r1, r5, #6
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 800761c:	80a0      	strh	r0, [r4, #4]
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800761e:	2002      	movs	r0, #2
 8007620:	f7fd f869 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 8007624:	80e0      	strh	r0, [r4, #6]

	return status;
 8007626:	2000      	movs	r0, #0
}
 8007628:	bd38      	pop	{r3, r4, r5, pc}
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800762a:	f06f 0008 	mvn.w	r0, #8
 800762e:	e7fb      	b.n	8007628 <VL53LX_nvm_decode_additional_offset_cal_data+0x32>

08007630 <VL53LX_nvm_decode_fmt_range_results_data>:
	VL53LX_decoded_nvm_fmt_range_data_t *pdata)
{

	VL53LX_Error status   = VL53LX_ERROR_NONE;

	if (buf_size < VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 8007630:	280f      	cmp	r0, #15
{
 8007632:	b538      	push	{r3, r4, r5, lr}
 8007634:	460d      	mov	r5, r1
 8007636:	4614      	mov	r4, r2
	if (buf_size < VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 8007638:	d92b      	bls.n	8007692 <VL53LX_nvm_decode_fmt_range_results_data+0x62>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800763a:	2002      	movs	r0, #2
 800763c:	f7fd f85b 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__actual_effective_rtn_spads =
 8007640:	8020      	strh	r0, [r4, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 8007642:	78ab      	ldrb	r3, [r5, #2]
 8007644:	70a3      	strb	r3, [r4, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 8007646:	78eb      	ldrb	r3, [r5, #3]
 8007648:	70e3      	strb	r3, [r4, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800764a:	1d29      	adds	r1, r5, #4
 800764c:	2002      	movs	r0, #2
 800764e:	f7fd f852 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 8007652:	1da9      	adds	r1, r5, #6
	pdata->result__peak_signal_count_rate_rtn_mcps =
 8007654:	80a0      	strh	r0, [r4, #4]
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 8007656:	2002      	movs	r0, #2
 8007658:	f7fd f84d 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 8);
 800765c:	f105 0108 	add.w	r1, r5, #8
	pdata->result__ambient_count_rate_rtn_mcps =
 8007660:	80e0      	strh	r0, [r4, #6]
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 8);
 8007662:	2002      	movs	r0, #2
 8007664:	f7fd f847 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 10);
 8007668:	f105 010a 	add.w	r1, r5, #10
	pdata->result__peak_signal_count_rate_ref_mcps =
 800766c:	8120      	strh	r0, [r4, #8]
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 10);
 800766e:	2002      	movs	r0, #2
 8007670:	f7fd f841 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>

	pdata->measured_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 12);
 8007674:	f105 010c 	add.w	r1, r5, #12
	pdata->result__ambient_count_rate_ref_mcps =
 8007678:	8160      	strh	r0, [r4, #10]
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 12);
 800767a:	2002      	movs	r0, #2
 800767c:	f7fd f83b 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 14);
 8007680:	f105 010e 	add.w	r1, r5, #14
	pdata->measured_distance_mm =
 8007684:	81a0      	strh	r0, [r4, #12]
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 14);
 8007686:	2002      	movs	r0, #2
 8007688:	f7fd f835 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
	pdata->measured_distance_stdev_mm =
 800768c:	81e0      	strh	r0, [r4, #14]

	return status;
 800768e:	2000      	movs	r0, #0
}
 8007690:	bd38      	pop	{r3, r4, r5, pc}
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 8007692:	f06f 0008 	mvn.w	r0, #8
 8007696:	e7fb      	b.n	8007690 <VL53LX_nvm_decode_fmt_range_results_data+0x60>

08007698 <VL53LX_read_nvm_raw_data>:
VL53LX_Error VL53LX_read_nvm_raw_data(
	VL53LX_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 8007698:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800769a:	460d      	mov	r5, r1
 800769c:	4616      	mov	r6, r2
	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
		status = VL53LX_nvm_enable(
 800769e:	2104      	movs	r1, #4
 80076a0:	2232      	movs	r2, #50	; 0x32
{
 80076a2:	9301      	str	r3, [sp, #4]
 80076a4:	4604      	mov	r4, r0
		status = VL53LX_nvm_enable(
 80076a6:	f7ff ff06 	bl	80074b6 <VL53LX_nvm_enable>
					0x0004,
					VL53LX_NVM_POWER_UP_DELAY_US);



	if (status == VL53LX_ERROR_NONE)
 80076aa:	9b01      	ldr	r3, [sp, #4]
 80076ac:	b958      	cbnz	r0, 80076c6 <VL53LX_read_nvm_raw_data+0x2e>
		status = VL53LX_nvm_read(
 80076ae:	4632      	mov	r2, r6
 80076b0:	4629      	mov	r1, r5
 80076b2:	4620      	mov	r0, r4
 80076b4:	f7ff ff32 	bl	800751c <VL53LX_nvm_read>
			count,
			pnvm_raw_data);



	if (status == VL53LX_ERROR_NONE)
 80076b8:	b928      	cbnz	r0, 80076c6 <VL53LX_read_nvm_raw_data+0x2e>
		status = VL53LX_nvm_disable(Dev);
 80076ba:	4620      	mov	r0, r4

	LOG_FUNCTION_END(status);

	return status;

}
 80076bc:	b002      	add	sp, #8
 80076be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		status = VL53LX_nvm_disable(Dev);
 80076c2:	f7ff bf5a 	b.w	800757a <VL53LX_nvm_disable>
}
 80076c6:	b002      	add	sp, #8
 80076c8:	bd70      	pop	{r4, r5, r6, pc}

080076ca <VL53LX_read_nvm_optical_centre>:


VL53LX_Error VL53LX_read_nvm_optical_centre(
	VL53LX_DEV                        Dev,
	VL53LX_optical_centre_t          *pcentre)
{
 80076ca:	b513      	push	{r0, r1, r4, lr}
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 80076cc:	2201      	movs	r2, #1
{
 80076ce:	460c      	mov	r4, r1
		VL53LX_read_nvm_raw_data(
 80076d0:	ab01      	add	r3, sp, #4
 80076d2:	212e      	movs	r1, #46	; 0x2e
 80076d4:	f7ff ffe0 	bl	8007698 <VL53LX_read_nvm_raw_data>
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 80076d8:	b960      	cbnz	r0, 80076f4 <VL53LX_read_nvm_optical_centre+0x2a>
	tmp -= (uint16_t)*(pbuffer + 2);
 80076da:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80076de:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80076e2:	b29b      	uxth	r3, r3
	if (tmp > 0x0FF)
 80076e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
		tmp = 0;
 80076e8:	bf08      	it	eq
 80076ea:	2300      	moveq	r3, #0
	pdata->x_centre = (uint8_t)tmp;
 80076ec:	7023      	strb	r3, [r4, #0]
	pdata->y_centre = *(pbuffer + 3);
 80076ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80076f2:	7063      	strb	r3, [r4, #1]
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
}
 80076f4:	b002      	add	sp, #8
 80076f6:	bd10      	pop	{r4, pc}

080076f8 <VL53LX_read_nvm_cal_peak_rate_map>:


VL53LX_Error VL53LX_read_nvm_cal_peak_rate_map(
	VL53LX_DEV                           Dev,
	VL53LX_cal_peak_rate_map_t          *pcal_data)
{
 80076f8:	b510      	push	{r4, lr}
 80076fa:	b08e      	sub	sp, #56	; 0x38
 80076fc:	460c      	mov	r4, r1
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 80076fe:	466b      	mov	r3, sp
 8007700:	220e      	movs	r2, #14
 8007702:	2157      	movs	r1, #87	; 0x57
 8007704:	f7ff ffc8 	bl	8007698 <VL53LX_read_nvm_raw_data>
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 8007708:	b920      	cbnz	r0, 8007714 <VL53LX_read_nvm_cal_peak_rate_map+0x1c>
		status =
			VL53LX_nvm_decode_cal_peak_rate_map(
 800770a:	4622      	mov	r2, r4
 800770c:	4669      	mov	r1, sp
 800770e:	2038      	movs	r0, #56	; 0x38
 8007710:	f7ff ff4c 	bl	80075ac <VL53LX_nvm_decode_cal_peak_rate_map>
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
}
 8007714:	b00e      	add	sp, #56	; 0x38
 8007716:	bd10      	pop	{r4, pc}

08007718 <VL53LX_read_nvm_additional_offset_cal_data>:


VL53LX_Error VL53LX_read_nvm_additional_offset_cal_data(
	VL53LX_DEV                           Dev,
	VL53LX_additional_offset_cal_data_t *pcal_data)
{
 8007718:	b513      	push	{r0, r1, r4, lr}
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800771a:	2202      	movs	r2, #2
{
 800771c:	460c      	mov	r4, r1
		VL53LX_read_nvm_raw_data(
 800771e:	466b      	mov	r3, sp
 8007720:	2165      	movs	r1, #101	; 0x65
 8007722:	f7ff ffb9 	bl	8007698 <VL53LX_read_nvm_raw_data>
			VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 8007726:	b920      	cbnz	r0, 8007732 <VL53LX_read_nvm_additional_offset_cal_data+0x1a>
		status = VL53LX_nvm_decode_additional_offset_cal_data(
 8007728:	4622      	mov	r2, r4
 800772a:	4669      	mov	r1, sp
 800772c:	2008      	movs	r0, #8
 800772e:	f7ff ff62 	bl	80075f6 <VL53LX_nvm_decode_additional_offset_cal_data>

	LOG_FUNCTION_END(status);

	return status;

}
 8007732:	b002      	add	sp, #8
 8007734:	bd10      	pop	{r4, pc}

08007736 <VL53LX_read_nvm_fmt_range_results_data>:

VL53LX_Error VL53LX_read_nvm_fmt_range_results_data(
	VL53LX_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53LX_decoded_nvm_fmt_range_data_t *prange_data)
{
 8007736:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007738:	4614      	mov	r4, r2

	LOG_FUNCTION_START("");



	status = VL53LX_read_nvm_raw_data(
 800773a:	466b      	mov	r3, sp
 800773c:	2204      	movs	r2, #4
 800773e:	f3c1 0187 	ubfx	r1, r1, #2, #8
 8007742:	f7ff ffa9 	bl	8007698 <VL53LX_read_nvm_raw_data>
		(uint8_t)(VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53LX_ERROR_NONE)
 8007746:	b920      	cbnz	r0, 8007752 <VL53LX_read_nvm_fmt_range_results_data+0x1c>
		status =
			VL53LX_nvm_decode_fmt_range_results_data(
 8007748:	4622      	mov	r2, r4
 800774a:	4669      	mov	r1, sp
 800774c:	2010      	movs	r0, #16
 800774e:	f7ff ff6f 	bl	8007630 <VL53LX_nvm_decode_fmt_range_results_data>

	LOG_FUNCTION_END(status);

	return status;

}
 8007752:	b004      	add	sp, #16
 8007754:	bd10      	pop	{r4, pc}

08007756 <VL53LX_i2c_encode_static_nvm_managed>:

	VL53LX_Error status = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 8007756:	290a      	cmp	r1, #10
{
 8007758:	b538      	push	{r3, r4, r5, lr}
 800775a:	4605      	mov	r5, r0
 800775c:	4614      	mov	r4, r2
	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800775e:	d924      	bls.n	80077aa <VL53LX_i2c_encode_static_nvm_managed+0x54>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 8007760:	7803      	ldrb	r3, [r0, #0]
 8007762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   0) =
 8007766:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8007768:	7843      	ldrb	r3, [r0, #1]
 800776a:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   1) =
 800776e:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8007770:	7883      	ldrb	r3, [r0, #2]
 8007772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   2) =
 8007776:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8007778:	78c3      	ldrb	r3, [r0, #3]
 800777a:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   3) =
 800777e:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 8007780:	7903      	ldrb	r3, [r0, #4]
 8007782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   4) =
 8007786:	7113      	strb	r3, [r2, #4]
	VL53LX_i2c_encode_uint16_t(
 8007788:	88c0      	ldrh	r0, [r0, #6]
 800778a:	3205      	adds	r2, #5
 800778c:	2102      	movs	r1, #2
 800778e:	f7fc ffaa 	bl	80046e6 <VL53LX_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
		pdata->vhv_config__timeout_macrop_loop_bound;
 8007792:	7a2b      	ldrb	r3, [r5, #8]
	*(pbuffer +   7) =
 8007794:	71e3      	strb	r3, [r4, #7]
	*(pbuffer +   8) =
		pdata->vhv_config__count_thresh;
 8007796:	7a6b      	ldrb	r3, [r5, #9]
	*(pbuffer +   8) =
 8007798:	7223      	strb	r3, [r4, #8]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800779a:	7aab      	ldrb	r3, [r5, #10]
 800779c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   9) =
 80077a0:	7263      	strb	r3, [r4, #9]
	*(pbuffer +  10) =
		pdata->vhv_config__init;
 80077a2:	7aeb      	ldrb	r3, [r5, #11]
	*(pbuffer +  10) =
 80077a4:	72a3      	strb	r3, [r4, #10]
	LOG_FUNCTION_END(status);


	return status;
 80077a6:	2000      	movs	r0, #0
}
 80077a8:	bd38      	pop	{r3, r4, r5, pc}
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 80077aa:	f06f 0009 	mvn.w	r0, #9
 80077ae:	e7fb      	b.n	80077a8 <VL53LX_i2c_encode_static_nvm_managed+0x52>

080077b0 <VL53LX_i2c_decode_static_nvm_managed>:

	VL53LX_Error status = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 80077b0:	280a      	cmp	r0, #10
{
 80077b2:	b538      	push	{r3, r4, r5, lr}
 80077b4:	460d      	mov	r5, r1
 80077b6:	4614      	mov	r4, r2
	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 80077b8:	d924      	bls.n	8007804 <VL53LX_i2c_decode_static_nvm_managed+0x54>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 80077ba:	780b      	ldrb	r3, [r1, #0]
 80077bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->i2c_slave__device_address =
 80077c0:	7013      	strb	r3, [r2, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 80077c2:	784b      	ldrb	r3, [r1, #1]
 80077c4:	f003 030f 	and.w	r3, r3, #15
	pdata->ana_config__vhv_ref_sel_vddpix =
 80077c8:	7053      	strb	r3, [r2, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 80077ca:	788b      	ldrb	r3, [r1, #2]
 80077cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->ana_config__vhv_ref_sel_vquench =
 80077d0:	7093      	strb	r3, [r2, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 80077d2:	78cb      	ldrb	r3, [r1, #3]
 80077d4:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__reg_avdd1v2_sel =
 80077d8:	70d3      	strb	r3, [r2, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 80077da:	790b      	ldrb	r3, [r1, #4]
 80077dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->ana_config__fast_osc__trim =
 80077e0:	7113      	strb	r3, [r2, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   5));
 80077e2:	3105      	adds	r1, #5
 80077e4:	2002      	movs	r0, #2
 80077e6:	f7fc ff86 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
	pdata->osc_measured__fast_osc__frequency =
 80077ea:	80e0      	strh	r0, [r4, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 80077ec:	79eb      	ldrb	r3, [r5, #7]
 80077ee:	7223      	strb	r3, [r4, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 80077f0:	7a2b      	ldrb	r3, [r5, #8]
 80077f2:	7263      	strb	r3, [r4, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 80077f4:	7a6b      	ldrb	r3, [r5, #9]
 80077f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_config__offset =
 80077fa:	72a3      	strb	r3, [r4, #10]
	pdata->vhv_config__init =
 80077fc:	7aab      	ldrb	r3, [r5, #10]
 80077fe:	72e3      	strb	r3, [r4, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 8007800:	2000      	movs	r0, #0
}
 8007802:	bd38      	pop	{r3, r4, r5, pc}
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007804:	f06f 0009 	mvn.w	r0, #9
 8007808:	e7fb      	b.n	8007802 <VL53LX_i2c_decode_static_nvm_managed+0x52>

0800780a <VL53LX_get_static_nvm_managed>:


VL53LX_Error VL53LX_get_static_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800780a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800780c:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
		status = VL53LX_ReadMulti(
 800780e:	230b      	movs	r3, #11
 8007810:	aa01      	add	r2, sp, #4
 8007812:	2101      	movs	r1, #1
 8007814:	f7f9 fe74 	bl	8001500 <VL53LX_ReadMulti>
			Dev,
			VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 8007818:	b920      	cbnz	r0, 8007824 <VL53LX_get_static_nvm_managed+0x1a>
		status = VL53LX_i2c_decode_static_nvm_managed(
 800781a:	4622      	mov	r2, r4
 800781c:	a901      	add	r1, sp, #4
 800781e:	200b      	movs	r0, #11
 8007820:	f7ff ffc6 	bl	80077b0 <VL53LX_i2c_decode_static_nvm_managed>
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 8007824:	b004      	add	sp, #16
 8007826:	bd10      	pop	{r4, pc}

08007828 <VL53LX_i2c_encode_customer_nvm_managed>:

	VL53LX_Error status = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 8007828:	2916      	cmp	r1, #22
{
 800782a:	b538      	push	{r3, r4, r5, lr}
 800782c:	4604      	mov	r4, r0
 800782e:	4615      	mov	r5, r2
	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 8007830:	d948      	bls.n	80078c4 <VL53LX_i2c_encode_customer_nvm_managed+0x9c>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 8007832:	7803      	ldrb	r3, [r0, #0]
	*(pbuffer +   0) =
 8007834:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->global_config__spad_enables_ref_1;
 8007836:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer +   1) =
 8007838:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->global_config__spad_enables_ref_2;
 800783a:	7883      	ldrb	r3, [r0, #2]
	*(pbuffer +   2) =
 800783c:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->global_config__spad_enables_ref_3;
 800783e:	78c3      	ldrb	r3, [r0, #3]
	*(pbuffer +   3) =
 8007840:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->global_config__spad_enables_ref_4;
 8007842:	7903      	ldrb	r3, [r0, #4]
	*(pbuffer +   4) =
 8007844:	7113      	strb	r3, [r2, #4]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8007846:	7943      	ldrb	r3, [r0, #5]
 8007848:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   5) =
 800784c:	7153      	strb	r3, [r2, #5]
	*(pbuffer +   6) =
		pdata->global_config__ref_en_start_select;
 800784e:	7983      	ldrb	r3, [r0, #6]
	*(pbuffer +   6) =
 8007850:	7193      	strb	r3, [r2, #6]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8007852:	79c3      	ldrb	r3, [r0, #7]
 8007854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   7) =
 8007858:	71d3      	strb	r3, [r2, #7]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800785a:	7a03      	ldrb	r3, [r0, #8]
 800785c:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   8) =
 8007860:	7213      	strb	r3, [r2, #8]
	VL53LX_i2c_encode_uint16_t(
 8007862:	8940      	ldrh	r0, [r0, #10]
 8007864:	3209      	adds	r2, #9
 8007866:	2102      	movs	r1, #2
 8007868:	f7fc ff3d 	bl	80046e6 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53LX_i2c_encode_int16_t(
 800786c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8007870:	f105 020b 	add.w	r2, r5, #11
 8007874:	2102      	movs	r1, #2
 8007876:	f7fc ff49 	bl	800470c <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53LX_i2c_encode_int16_t(
 800787a:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800787e:	f105 020d 	add.w	r2, r5, #13
 8007882:	2102      	movs	r1, #2
 8007884:	f7fc ff42 	bl	800470c <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53LX_i2c_encode_uint16_t(
 8007888:	8a20      	ldrh	r0, [r4, #16]
 800788a:	f105 020f 	add.w	r2, r5, #15
 800788e:	2102      	movs	r1, #2
 8007890:	f7fc ff29 	bl	80046e6 <VL53LX_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53LX_i2c_encode_int16_t(
 8007894:	8a60      	ldrh	r0, [r4, #18]
 8007896:	f105 0211 	add.w	r2, r5, #17
 800789a:	2102      	movs	r1, #2
 800789c:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80078a0:	f7fc ff34 	bl	800470c <VL53LX_i2c_encode_int16_t>
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
		2,
		pbuffer +  17);
	VL53LX_i2c_encode_int16_t(
 80078a4:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 80078a8:	f105 0213 	add.w	r2, r5, #19
 80078ac:	2102      	movs	r1, #2
 80078ae:	f7fc ff2d 	bl	800470c <VL53LX_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53LX_i2c_encode_int16_t(
 80078b2:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 80078b6:	f105 0215 	add.w	r2, r5, #21
 80078ba:	2102      	movs	r1, #2
 80078bc:	f7fc ff26 	bl	800470c <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 80078c0:	2000      	movs	r0, #0
}
 80078c2:	bd38      	pop	{r3, r4, r5, pc}
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 80078c4:	f06f 0009 	mvn.w	r0, #9
 80078c8:	e7fb      	b.n	80078c2 <VL53LX_i2c_encode_customer_nvm_managed+0x9a>

080078ca <VL53LX_i2c_decode_customer_nvm_managed>:

	VL53LX_Error status = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 80078ca:	2816      	cmp	r0, #22
{
 80078cc:	b538      	push	{r3, r4, r5, lr}
 80078ce:	460d      	mov	r5, r1
 80078d0:	4614      	mov	r4, r2
	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 80078d2:	d944      	bls.n	800795e <VL53LX_i2c_decode_customer_nvm_managed+0x94>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 80078d4:	780b      	ldrb	r3, [r1, #0]
	pdata->global_config__spad_enables_ref_0 =
 80078d6:	7013      	strb	r3, [r2, #0]
	pdata->global_config__spad_enables_ref_1 =
 80078d8:	784b      	ldrb	r3, [r1, #1]
 80078da:	7053      	strb	r3, [r2, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 80078dc:	788b      	ldrb	r3, [r1, #2]
 80078de:	7093      	strb	r3, [r2, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 80078e0:	78cb      	ldrb	r3, [r1, #3]
 80078e2:	70d3      	strb	r3, [r2, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 80078e4:	790b      	ldrb	r3, [r1, #4]
 80078e6:	7113      	strb	r3, [r2, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 80078e8:	794b      	ldrb	r3, [r1, #5]
 80078ea:	f003 030f 	and.w	r3, r3, #15
	pdata->global_config__spad_enables_ref_5 =
 80078ee:	7153      	strb	r3, [r2, #5]
	pdata->global_config__ref_en_start_select =
 80078f0:	798b      	ldrb	r3, [r1, #6]
 80078f2:	7193      	strb	r3, [r2, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 80078f4:	79cb      	ldrb	r3, [r1, #7]
 80078f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ref_spad_man__num_requested_ref_spads =
 80078fa:	71d3      	strb	r3, [r2, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 80078fc:	7a0b      	ldrb	r3, [r1, #8]
 80078fe:	f003 0303 	and.w	r3, r3, #3
	pdata->ref_spad_man__ref_location =
 8007902:	7213      	strb	r3, [r2, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   9));
 8007904:	3109      	adds	r1, #9
 8007906:	2002      	movs	r0, #2
 8007908:	f7fc fef5 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  11));
 800790c:	f105 010b 	add.w	r1, r5, #11
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8007910:	8160      	strh	r0, [r4, #10]
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  11));
 8007912:	2002      	movs	r0, #2
 8007914:	f7fc ff02 	bl	800471c <VL53LX_i2c_decode_int16_t>
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  13));
 8007918:	f105 010d 	add.w	r1, r5, #13
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800791c:	81a0      	strh	r0, [r4, #12]
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  13));
 800791e:	2002      	movs	r0, #2
 8007920:	f7fc fefc 	bl	800471c <VL53LX_i2c_decode_int16_t>
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  15));
 8007924:	f105 010f 	add.w	r1, r5, #15
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8007928:	81e0      	strh	r0, [r4, #14]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  15));
 800792a:	2002      	movs	r0, #2
 800792c:	f7fc fee3 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
	pdata->algo__part_to_part_range_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 8007930:	f105 0111 	add.w	r1, r5, #17
	pdata->ref_spad_char__total_rate_target_mcps =
 8007934:	8220      	strh	r0, [r4, #16]
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 8007936:	2002      	movs	r0, #2
 8007938:	f7fc fef0 	bl	800471c <VL53LX_i2c_decode_int16_t>
 800793c:	f3c0 000c 	ubfx	r0, r0, #0, #13
	pdata->algo__part_to_part_range_offset_mm =
 8007940:	8260      	strh	r0, [r4, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  19));
 8007942:	f105 0113 	add.w	r1, r5, #19
 8007946:	2002      	movs	r0, #2
 8007948:	f7fc fee8 	bl	800471c <VL53LX_i2c_decode_int16_t>
	pdata->mm_config__outer_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  21));
 800794c:	f105 0115 	add.w	r1, r5, #21
	pdata->mm_config__inner_offset_mm =
 8007950:	82a0      	strh	r0, [r4, #20]
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  21));
 8007952:	2002      	movs	r0, #2
 8007954:	f7fc fee2 	bl	800471c <VL53LX_i2c_decode_int16_t>
	pdata->mm_config__outer_offset_mm =
 8007958:	82e0      	strh	r0, [r4, #22]

	LOG_FUNCTION_END(status);

	return status;
 800795a:	2000      	movs	r0, #0
}
 800795c:	bd38      	pop	{r3, r4, r5, pc}
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800795e:	f06f 0009 	mvn.w	r0, #9
 8007962:	e7fb      	b.n	800795c <VL53LX_i2c_decode_customer_nvm_managed+0x92>

08007964 <VL53LX_get_customer_nvm_managed>:


VL53LX_Error VL53LX_get_customer_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 8007964:	b510      	push	{r4, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	460c      	mov	r4, r1
	int16_t offset;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
		status = VL53LX_ReadMulti(
 800796a:	2317      	movs	r3, #23
 800796c:	466a      	mov	r2, sp
 800796e:	210d      	movs	r1, #13
 8007970:	f7f9 fdc6 	bl	8001500 <VL53LX_ReadMulti>
			Dev,
			VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 8007974:	b9a8      	cbnz	r0, 80079a2 <VL53LX_get_customer_nvm_managed+0x3e>
		status = VL53LX_i2c_decode_customer_nvm_managed(
 8007976:	4622      	mov	r2, r4
 8007978:	4669      	mov	r1, sp
 800797a:	2017      	movs	r0, #23
 800797c:	f7ff ffa5 	bl	80078ca <VL53LX_i2c_decode_customer_nvm_managed>
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
			comms_buffer,
			pdata);

	if (status == VL53LX_ERROR_NONE) {
 8007980:	b978      	cbnz	r0, 80079a2 <VL53LX_get_customer_nvm_managed+0x3e>
		offset = pdata->algo__part_to_part_range_offset_mm;
 8007982:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
		offset = offset / 4;
 8007986:	2a00      	cmp	r2, #0
 8007988:	4613      	mov	r3, r2
 800798a:	bfb8      	it	lt
 800798c:	1cd3      	addlt	r3, r2, #3
 800798e:	109b      	asrs	r3, r3, #2
		if (offset >= 1024)
 8007990:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
			offset -= 2048;
 8007994:	bfa8      	it	ge
 8007996:	f5a3 6300 	subge.w	r3, r3, #2048	; 0x800
		pdata->algo__part_to_part_range_offset_mm = 0;
 800799a:	2200      	movs	r2, #0
 800799c:	8262      	strh	r2, [r4, #18]
		pdata->mm_config__inner_offset_mm = offset;
 800799e:	82a3      	strh	r3, [r4, #20]
		pdata->mm_config__outer_offset_mm = offset;
 80079a0:	82e3      	strh	r3, [r4, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80079a2:	b006      	add	sp, #24
 80079a4:	bd10      	pop	{r4, pc}

080079a6 <VL53LX_i2c_encode_static_config>:

	VL53LX_Error status = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES)
 80079a6:	291f      	cmp	r1, #31
{
 80079a8:	b538      	push	{r3, r4, r5, lr}
 80079aa:	4604      	mov	r4, r0
 80079ac:	4615      	mov	r5, r2
	if (buf_size < VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES)
 80079ae:	d965      	bls.n	8007a7c <VL53LX_i2c_encode_static_config+0xd6>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;

	VL53LX_i2c_encode_uint16_t(
 80079b0:	8800      	ldrh	r0, [r0, #0]
 80079b2:	2102      	movs	r1, #2
 80079b4:	f7fc fe97 	bl	80046e6 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 80079b8:	78a3      	ldrb	r3, [r4, #2]
 80079ba:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   2) =
 80079be:	70ab      	strb	r3, [r5, #2]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 80079c0:	78e3      	ldrb	r3, [r4, #3]
 80079c2:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   3) =
 80079c6:	70eb      	strb	r3, [r5, #3]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 80079c8:	7923      	ldrb	r3, [r4, #4]
 80079ca:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   4) =
 80079ce:	712b      	strb	r3, [r5, #4]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 80079d0:	7963      	ldrb	r3, [r4, #5]
 80079d2:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer +   5) =
 80079d6:	716b      	strb	r3, [r5, #5]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 80079d8:	79a3      	ldrb	r3, [r4, #6]
 80079da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   6) =
 80079de:	71ab      	strb	r3, [r5, #6]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 80079e0:	79e3      	ldrb	r3, [r4, #7]
 80079e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   7) =
 80079e6:	71eb      	strb	r3, [r5, #7]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 80079e8:	7a23      	ldrb	r3, [r4, #8]
 80079ea:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   8) =
 80079ee:	722b      	strb	r3, [r5, #8]
	*(pbuffer +   9) =
		pdata->pad_i2c_hv__config;
 80079f0:	7a63      	ldrb	r3, [r4, #9]
	*(pbuffer +   9) =
 80079f2:	726b      	strb	r3, [r5, #9]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80079f4:	7aa3      	ldrb	r3, [r4, #10]
 80079f6:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +  10) =
 80079fa:	72ab      	strb	r3, [r5, #10]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 80079fc:	7ae3      	ldrb	r3, [r4, #11]
 80079fe:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  11) =
 8007a02:	72eb      	strb	r3, [r5, #11]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8007a04:	7b23      	ldrb	r3, [r4, #12]
 8007a06:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer +  12) =
 8007a0a:	732b      	strb	r3, [r5, #12]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 8007a0c:	7b63      	ldrb	r3, [r4, #13]
 8007a0e:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  13) =
 8007a12:	736b      	strb	r3, [r5, #13]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 8007a14:	7ba3      	ldrb	r3, [r4, #14]
 8007a16:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  14) =
 8007a1a:	73ab      	strb	r3, [r5, #14]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8007a1c:	7be3      	ldrb	r3, [r4, #15]
 8007a1e:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer +  15) =
 8007a22:	73eb      	strb	r3, [r5, #15]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8007a24:	7c23      	ldrb	r3, [r4, #16]
 8007a26:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer +  16) =
 8007a2a:	742b      	strb	r3, [r5, #16]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8007a2c:	7c63      	ldrb	r3, [r4, #17]
 8007a2e:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +  17) =
 8007a32:	746b      	strb	r3, [r5, #17]
	*(pbuffer +  18) =
		pdata->sigma_estimator__effective_pulse_width_ns;
 8007a34:	7ca3      	ldrb	r3, [r4, #18]
	*(pbuffer +  18) =
 8007a36:	74ab      	strb	r3, [r5, #18]
	*(pbuffer +  19) =
		pdata->sigma_estimator__effective_ambient_width_ns;
 8007a38:	7ce3      	ldrb	r3, [r4, #19]
	*(pbuffer +  19) =
 8007a3a:	74eb      	strb	r3, [r5, #19]
	*(pbuffer +  20) =
		pdata->sigma_estimator__sigma_ref_mm;
 8007a3c:	7d23      	ldrb	r3, [r4, #20]
	*(pbuffer +  20) =
 8007a3e:	752b      	strb	r3, [r5, #20]
	*(pbuffer +  21) =
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8007a40:	7d63      	ldrb	r3, [r4, #21]
	*(pbuffer +  21) =
 8007a42:	756b      	strb	r3, [r5, #21]
	*(pbuffer +  22) =
		pdata->spare_host_config__static_config_spare_0;
 8007a44:	7da3      	ldrb	r3, [r4, #22]
	*(pbuffer +  22) =
 8007a46:	75ab      	strb	r3, [r5, #22]
	*(pbuffer +  23) =
		pdata->spare_host_config__static_config_spare_1;
 8007a48:	7de3      	ldrb	r3, [r4, #23]
	*(pbuffer +  23) =
 8007a4a:	75eb      	strb	r3, [r5, #23]
	VL53LX_i2c_encode_uint16_t(
 8007a4c:	8b20      	ldrh	r0, [r4, #24]
 8007a4e:	f105 0218 	add.w	r2, r5, #24
 8007a52:	2102      	movs	r1, #2
 8007a54:	f7fc fe47 	bl	80046e6 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
		pdata->algo__range_ignore_valid_height_mm;
 8007a58:	7ea3      	ldrb	r3, [r4, #26]
	*(pbuffer +  26) =
 8007a5a:	76ab      	strb	r3, [r5, #26]
	*(pbuffer +  27) =
		pdata->algo__range_min_clip;
 8007a5c:	7ee3      	ldrb	r3, [r4, #27]
	*(pbuffer +  27) =
 8007a5e:	76eb      	strb	r3, [r5, #27]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 8007a60:	7f23      	ldrb	r3, [r4, #28]
 8007a62:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +  28) =
 8007a66:	772b      	strb	r3, [r5, #28]
	*(pbuffer +  29) =
		pdata->spare_host_config__static_config_spare_2;
 8007a68:	7f63      	ldrb	r3, [r4, #29]
	*(pbuffer +  29) =
 8007a6a:	776b      	strb	r3, [r5, #29]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 8007a6c:	7fa3      	ldrb	r3, [r4, #30]
 8007a6e:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +  30) =
 8007a72:	77ab      	strb	r3, [r5, #30]
	*(pbuffer +  31) =
		pdata->sd_config__reset_stages_lsb;
 8007a74:	7fe3      	ldrb	r3, [r4, #31]
	*(pbuffer +  31) =
 8007a76:	77eb      	strb	r3, [r5, #31]
	LOG_FUNCTION_END(status);


	return status;
 8007a78:	2000      	movs	r0, #0
}
 8007a7a:	bd38      	pop	{r3, r4, r5, pc}
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007a7c:	f06f 0009 	mvn.w	r0, #9
 8007a80:	e7fb      	b.n	8007a7a <VL53LX_i2c_encode_static_config+0xd4>

08007a82 <VL53LX_i2c_encode_general_config>:

	VL53LX_Error status = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES)
 8007a82:	2915      	cmp	r1, #21
{
 8007a84:	b538      	push	{r3, r4, r5, lr}
 8007a86:	4605      	mov	r5, r0
 8007a88:	4614      	mov	r4, r2
	if (buf_size < VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES)
 8007a8a:	d93c      	bls.n	8007b06 <VL53LX_i2c_encode_general_config+0x84>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 8007a8c:	7803      	ldrb	r3, [r0, #0]
	*(pbuffer +   0) =
 8007a8e:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->global_config__stream_divider;
 8007a90:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer +   1) =
 8007a92:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->system__interrupt_config_gpio;
 8007a94:	7883      	ldrb	r3, [r0, #2]
	*(pbuffer +   2) =
 8007a96:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8007a98:	78c3      	ldrb	r3, [r0, #3]
 8007a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   3) =
 8007a9e:	70d3      	strb	r3, [r2, #3]
	VL53LX_i2c_encode_uint16_t(
 8007aa0:	8880      	ldrh	r0, [r0, #4]
 8007aa2:	3204      	adds	r2, #4
 8007aa4:	2102      	movs	r1, #2
 8007aa6:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8007aaa:	f7fc fe1c 	bl	80046e6 <VL53LX_i2c_encode_uint16_t>
		pdata->cal_config__repeat_rate & 0xFFF,
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 8007aae:	79ab      	ldrb	r3, [r5, #6]
 8007ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   6) =
 8007ab4:	71a3      	strb	r3, [r4, #6]
	*(pbuffer +   7) =
		pdata->phasecal_config__timeout_macrop;
 8007ab6:	79eb      	ldrb	r3, [r5, #7]
	*(pbuffer +   7) =
 8007ab8:	71e3      	strb	r3, [r4, #7]
	*(pbuffer +   8) =
		pdata->phasecal_config__target;
 8007aba:	7a2b      	ldrb	r3, [r5, #8]
	*(pbuffer +   8) =
 8007abc:	7223      	strb	r3, [r4, #8]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8007abe:	7a6b      	ldrb	r3, [r5, #9]
 8007ac0:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   9) =
 8007ac4:	7263      	strb	r3, [r4, #9]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8007ac6:	7aab      	ldrb	r3, [r5, #10]
 8007ac8:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer +  11) =
 8007acc:	72e3      	strb	r3, [r4, #11]
	VL53LX_i2c_encode_uint16_t(
 8007ace:	89a8      	ldrh	r0, [r5, #12]
 8007ad0:	f104 020c 	add.w	r2, r4, #12
 8007ad4:	2102      	movs	r1, #2
 8007ad6:	f7fc fe06 	bl	80046e6 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53LX_i2c_encode_uint16_t(
 8007ada:	89e8      	ldrh	r0, [r5, #14]
 8007adc:	f104 020e 	add.w	r2, r4, #14
 8007ae0:	2102      	movs	r1, #2
 8007ae2:	f7fc fe00 	bl	80046e6 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53LX_i2c_encode_uint16_t(
 8007ae6:	8a28      	ldrh	r0, [r5, #16]
 8007ae8:	f104 0210 	add.w	r2, r4, #16
 8007aec:	2102      	movs	r1, #2
 8007aee:	f7fc fdfa 	bl	80046e6 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
		pdata->dss_config__manual_block_select;
 8007af2:	7cab      	ldrb	r3, [r5, #18]
	*(pbuffer +  18) =
 8007af4:	74a3      	strb	r3, [r4, #18]
	*(pbuffer +  19) =
		pdata->dss_config__aperture_attenuation;
 8007af6:	7ceb      	ldrb	r3, [r5, #19]
	*(pbuffer +  19) =
 8007af8:	74e3      	strb	r3, [r4, #19]
	*(pbuffer +  20) =
		pdata->dss_config__max_spads_limit;
 8007afa:	7d2b      	ldrb	r3, [r5, #20]
	*(pbuffer +  20) =
 8007afc:	7523      	strb	r3, [r4, #20]
	*(pbuffer +  21) =
		pdata->dss_config__min_spads_limit;
 8007afe:	7d6b      	ldrb	r3, [r5, #21]
	*(pbuffer +  21) =
 8007b00:	7563      	strb	r3, [r4, #21]
	LOG_FUNCTION_END(status);


	return status;
 8007b02:	2000      	movs	r0, #0
}
 8007b04:	bd38      	pop	{r3, r4, r5, pc}
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007b06:	f06f 0009 	mvn.w	r0, #9
 8007b0a:	e7fb      	b.n	8007b04 <VL53LX_i2c_encode_general_config+0x82>

08007b0c <VL53LX_i2c_encode_timing_config>:

	VL53LX_Error status = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES)
 8007b0c:	2916      	cmp	r1, #22
{
 8007b0e:	b538      	push	{r3, r4, r5, lr}
 8007b10:	4605      	mov	r5, r0
 8007b12:	4614      	mov	r4, r2
	if (buf_size < VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES)
 8007b14:	d93a      	bls.n	8007b8c <VL53LX_i2c_encode_timing_config+0x80>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8007b16:	7803      	ldrb	r3, [r0, #0]
 8007b18:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   0) =
 8007b1c:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->mm_config__timeout_macrop_a_lo;
 8007b1e:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer +   1) =
 8007b20:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8007b22:	7883      	ldrb	r3, [r0, #2]
 8007b24:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   2) =
 8007b28:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->mm_config__timeout_macrop_b_lo;
 8007b2a:	78c3      	ldrb	r3, [r0, #3]
	*(pbuffer +   3) =
 8007b2c:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8007b2e:	7903      	ldrb	r3, [r0, #4]
 8007b30:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   4) =
 8007b34:	7113      	strb	r3, [r2, #4]
	*(pbuffer +   5) =
		pdata->range_config__timeout_macrop_a_lo;
 8007b36:	7943      	ldrb	r3, [r0, #5]
	*(pbuffer +   5) =
 8007b38:	7153      	strb	r3, [r2, #5]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8007b3a:	7983      	ldrb	r3, [r0, #6]
 8007b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   6) =
 8007b40:	7193      	strb	r3, [r2, #6]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8007b42:	79c3      	ldrb	r3, [r0, #7]
 8007b44:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   7) =
 8007b48:	71d3      	strb	r3, [r2, #7]
	*(pbuffer +   8) =
		pdata->range_config__timeout_macrop_b_lo;
 8007b4a:	7a03      	ldrb	r3, [r0, #8]
	*(pbuffer +   8) =
 8007b4c:	7213      	strb	r3, [r2, #8]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8007b4e:	7a43      	ldrb	r3, [r0, #9]
 8007b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   9) =
 8007b54:	7253      	strb	r3, [r2, #9]
	VL53LX_i2c_encode_uint16_t(
 8007b56:	8940      	ldrh	r0, [r0, #10]
 8007b58:	320a      	adds	r2, #10
 8007b5a:	2102      	movs	r1, #2
 8007b5c:	f7fc fdc3 	bl	80046e6 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53LX_i2c_encode_uint16_t(
 8007b60:	89a8      	ldrh	r0, [r5, #12]
 8007b62:	f104 020c 	add.w	r2, r4, #12
 8007b66:	2102      	movs	r1, #2
 8007b68:	f7fc fdbd 	bl	80046e6 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
		pdata->range_config__valid_phase_low;
 8007b6c:	7bab      	ldrb	r3, [r5, #14]
	*(pbuffer +  14) =
 8007b6e:	73a3      	strb	r3, [r4, #14]
	*(pbuffer +  15) =
		pdata->range_config__valid_phase_high;
 8007b70:	7beb      	ldrb	r3, [r5, #15]
	*(pbuffer +  15) =
 8007b72:	73e3      	strb	r3, [r4, #15]
	VL53LX_i2c_encode_uint32_t(
 8007b74:	6928      	ldr	r0, [r5, #16]
 8007b76:	f104 0212 	add.w	r2, r4, #18
 8007b7a:	2104      	movs	r1, #4
 8007b7c:	f7fc fddd 	bl	800473a <VL53LX_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 8007b80:	7d2b      	ldrb	r3, [r5, #20]
 8007b82:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +  22) =
 8007b86:	75a3      	strb	r3, [r4, #22]
	LOG_FUNCTION_END(status);


	return status;
 8007b88:	2000      	movs	r0, #0
}
 8007b8a:	bd38      	pop	{r3, r4, r5, pc}
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007b8c:	f06f 0009 	mvn.w	r0, #9
 8007b90:	e7fb      	b.n	8007b8a <VL53LX_i2c_encode_timing_config+0x7e>

08007b92 <VL53LX_i2c_encode_dynamic_config>:

	VL53LX_Error status = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 8007b92:	2911      	cmp	r1, #17
{
 8007b94:	b538      	push	{r3, r4, r5, lr}
 8007b96:	4604      	mov	r4, r0
 8007b98:	4615      	mov	r5, r2
	if (buf_size < VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 8007b9a:	d939      	bls.n	8007c10 <VL53LX_i2c_encode_dynamic_config+0x7e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8007b9c:	7803      	ldrb	r3, [r0, #0]
 8007b9e:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   0) =
 8007ba2:	f802 3b01 	strb.w	r3, [r2], #1
	VL53LX_i2c_encode_uint16_t(
 8007ba6:	2102      	movs	r1, #2
 8007ba8:	8840      	ldrh	r0, [r0, #2]
 8007baa:	f7fc fd9c 	bl	80046e6 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53LX_i2c_encode_uint16_t(
 8007bae:	88a0      	ldrh	r0, [r4, #4]
 8007bb0:	1cea      	adds	r2, r5, #3
 8007bb2:	2102      	movs	r1, #2
 8007bb4:	f7fc fd97 	bl	80046e6 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8007bb8:	79a3      	ldrb	r3, [r4, #6]
 8007bba:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   5) =
 8007bbe:	716b      	strb	r3, [r5, #5]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 8007bc0:	79e3      	ldrb	r3, [r4, #7]
 8007bc2:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer +   6) =
 8007bc6:	71ab      	strb	r3, [r5, #6]
	*(pbuffer +   7) =
		pdata->sd_config__woi_sd0;
 8007bc8:	7a23      	ldrb	r3, [r4, #8]
	*(pbuffer +   7) =
 8007bca:	71eb      	strb	r3, [r5, #7]
	*(pbuffer +   8) =
		pdata->sd_config__woi_sd1;
 8007bcc:	7a63      	ldrb	r3, [r4, #9]
	*(pbuffer +   8) =
 8007bce:	722b      	strb	r3, [r5, #8]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8007bd0:	7aa3      	ldrb	r3, [r4, #10]
 8007bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   9) =
 8007bd6:	726b      	strb	r3, [r5, #9]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8007bd8:	7ae3      	ldrb	r3, [r4, #11]
 8007bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +  10) =
 8007bde:	72ab      	strb	r3, [r5, #10]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8007be0:	7b23      	ldrb	r3, [r4, #12]
 8007be2:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  11) =
 8007be6:	72eb      	strb	r3, [r5, #11]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8007be8:	7b63      	ldrb	r3, [r4, #13]
 8007bea:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  12) =
 8007bee:	732b      	strb	r3, [r5, #12]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 8007bf0:	7ba3      	ldrb	r3, [r4, #14]
 8007bf2:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +  13) =
 8007bf6:	736b      	strb	r3, [r5, #13]
	*(pbuffer +  14) =
		pdata->roi_config__user_roi_centre_spad;
 8007bf8:	7be3      	ldrb	r3, [r4, #15]
	*(pbuffer +  14) =
 8007bfa:	73ab      	strb	r3, [r5, #14]
	*(pbuffer +  15) =
		pdata->roi_config__user_roi_requested_global_xy_size;
 8007bfc:	7c23      	ldrb	r3, [r4, #16]
	*(pbuffer +  15) =
 8007bfe:	73eb      	strb	r3, [r5, #15]
	*(pbuffer +  16) =
		pdata->system__sequence_config;
 8007c00:	7c63      	ldrb	r3, [r4, #17]
	*(pbuffer +  16) =
 8007c02:	742b      	strb	r3, [r5, #16]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8007c04:	7ca3      	ldrb	r3, [r4, #18]
 8007c06:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  17) =
 8007c0a:	746b      	strb	r3, [r5, #17]
	LOG_FUNCTION_END(status);


	return status;
 8007c0c:	2000      	movs	r0, #0
}
 8007c0e:	bd38      	pop	{r3, r4, r5, pc}
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007c10:	f06f 0009 	mvn.w	r0, #9
 8007c14:	e7fb      	b.n	8007c0e <VL53LX_i2c_encode_dynamic_config+0x7c>

08007c16 <VL53LX_i2c_encode_system_control>:

	VL53LX_Error status = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 8007c16:	2904      	cmp	r1, #4
 8007c18:	d913      	bls.n	8007c42 <VL53LX_i2c_encode_system_control+0x2c>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8007c1a:	7803      	ldrb	r3, [r0, #0]
 8007c1c:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   0) =
 8007c20:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8007c22:	7843      	ldrb	r3, [r0, #1]
 8007c24:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   1) =
 8007c28:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8007c2a:	7883      	ldrb	r3, [r0, #2]
 8007c2c:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   2) =
 8007c30:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8007c32:	78c3      	ldrb	r3, [r0, #3]
 8007c34:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   3) =
 8007c38:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->system__mode_start;
 8007c3a:	7903      	ldrb	r3, [r0, #4]
	*(pbuffer +   4) =
 8007c3c:	7113      	strb	r3, [r2, #4]
	LOG_FUNCTION_END(status);


	return status;
 8007c3e:	2000      	movs	r0, #0
 8007c40:	4770      	bx	lr
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007c42:	f06f 0009 	mvn.w	r0, #9
}
 8007c46:	4770      	bx	lr

08007c48 <VL53LX_i2c_decode_system_results>:

	VL53LX_Error status = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 8007c48:	282b      	cmp	r0, #43	; 0x2b
{
 8007c4a:	b538      	push	{r3, r4, r5, lr}
 8007c4c:	460d      	mov	r5, r1
 8007c4e:	4614      	mov	r4, r2
	if (buf_size < VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 8007c50:	f240 8086 	bls.w	8007d60 <VL53LX_i2c_decode_system_results+0x118>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8007c54:	780b      	ldrb	r3, [r1, #0]
 8007c56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->result__interrupt_status =
 8007c5a:	7013      	strb	r3, [r2, #0]
	pdata->result__range_status =
 8007c5c:	784b      	ldrb	r3, [r1, #1]
 8007c5e:	7053      	strb	r3, [r2, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8007c60:	788b      	ldrb	r3, [r1, #2]
 8007c62:	f003 030f 	and.w	r3, r3, #15
	pdata->result__report_status =
 8007c66:	7093      	strb	r3, [r2, #2]
	pdata->result__stream_count =
 8007c68:	78cb      	ldrb	r3, [r1, #3]
 8007c6a:	70d3      	strb	r3, [r2, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   4));
 8007c6c:	3104      	adds	r1, #4
 8007c6e:	2002      	movs	r0, #2
 8007c70:	f7fc fd41 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   6));
 8007c74:	1da9      	adds	r1, r5, #6
	pdata->result__dss_actual_effective_spads_sd0 =
 8007c76:	80a0      	strh	r0, [r4, #4]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   6));
 8007c78:	2002      	movs	r0, #2
 8007c7a:	f7fc fd3c 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8));
 8007c7e:	f105 0108 	add.w	r1, r5, #8
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8007c82:	80e0      	strh	r0, [r4, #6]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8));
 8007c84:	2002      	movs	r0, #2
 8007c86:	f7fc fd36 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__sigma_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  10));
 8007c8a:	f105 010a 	add.w	r1, r5, #10
	pdata->result__ambient_count_rate_mcps_sd0 =
 8007c8e:	8120      	strh	r0, [r4, #8]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  10));
 8007c90:	2002      	movs	r0, #2
 8007c92:	f7fc fd30 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__phase_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  12));
 8007c96:	f105 010c 	add.w	r1, r5, #12
	pdata->result__sigma_sd0 =
 8007c9a:	8160      	strh	r0, [r4, #10]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  12));
 8007c9c:	2002      	movs	r0, #2
 8007c9e:	f7fc fd2a 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  14));
 8007ca2:	f105 010e 	add.w	r1, r5, #14
	pdata->result__phase_sd0 =
 8007ca6:	81a0      	strh	r0, [r4, #12]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  14));
 8007ca8:	2002      	movs	r0, #2
 8007caa:	f7fc fd24 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  16));
 8007cae:	f105 0110 	add.w	r1, r5, #16
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8007cb2:	81e0      	strh	r0, [r4, #14]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  16));
 8007cb4:	2002      	movs	r0, #2
 8007cb6:	f7fc fd1e 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18));
 8007cba:	f105 0112 	add.w	r1, r5, #18
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8007cbe:	8220      	strh	r0, [r4, #16]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18));
 8007cc0:	2002      	movs	r0, #2
 8007cc2:	f7fc fd18 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  20));
 8007cc6:	f105 0114 	add.w	r1, r5, #20
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8007cca:	8260      	strh	r0, [r4, #18]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  20));
 8007ccc:	2002      	movs	r0, #2
 8007cce:	f7fc fd12 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 8007cd2:	f105 0116 	add.w	r1, r5, #22
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8007cd6:	82a0      	strh	r0, [r4, #20]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 8007cd8:	2002      	movs	r0, #2
 8007cda:	f7fc fd0c 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 8007cde:	f105 0118 	add.w	r1, r5, #24
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8007ce2:	82e0      	strh	r0, [r4, #22]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 8007ce4:	2002      	movs	r0, #2
 8007ce6:	f7fc fd06 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  26));
 8007cea:	f105 011a 	add.w	r1, r5, #26
	pdata->result__dss_actual_effective_spads_sd1 =
 8007cee:	8320      	strh	r0, [r4, #24]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  26));
 8007cf0:	2002      	movs	r0, #2
 8007cf2:	f7fc fd00 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  28));
 8007cf6:	f105 011c 	add.w	r1, r5, #28
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8007cfa:	8360      	strh	r0, [r4, #26]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  28));
 8007cfc:	2002      	movs	r0, #2
 8007cfe:	f7fc fcfa 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__sigma_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  30));
 8007d02:	f105 011e 	add.w	r1, r5, #30
	pdata->result__ambient_count_rate_mcps_sd1 =
 8007d06:	83a0      	strh	r0, [r4, #28]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  30));
 8007d08:	2002      	movs	r0, #2
 8007d0a:	f7fc fcf4 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__phase_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  32));
 8007d0e:	f105 0120 	add.w	r1, r5, #32
	pdata->result__sigma_sd1 =
 8007d12:	83e0      	strh	r0, [r4, #30]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  32));
 8007d14:	2002      	movs	r0, #2
 8007d16:	f7fc fcee 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  34));
 8007d1a:	f105 0122 	add.w	r1, r5, #34	; 0x22
	pdata->result__phase_sd1 =
 8007d1e:	8420      	strh	r0, [r4, #32]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  34));
 8007d20:	2002      	movs	r0, #2
 8007d22:	f7fc fce8 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__spare_0_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  36));
 8007d26:	f105 0124 	add.w	r1, r5, #36	; 0x24
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8007d2a:	8460      	strh	r0, [r4, #34]	; 0x22
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  36));
 8007d2c:	2002      	movs	r0, #2
 8007d2e:	f7fc fce2 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__spare_1_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  38));
 8007d32:	f105 0126 	add.w	r1, r5, #38	; 0x26
	pdata->result__spare_0_sd1 =
 8007d36:	84a0      	strh	r0, [r4, #36]	; 0x24
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  38));
 8007d38:	2002      	movs	r0, #2
 8007d3a:	f7fc fcdc 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__spare_2_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  40));
 8007d3e:	f105 0128 	add.w	r1, r5, #40	; 0x28
	pdata->result__spare_1_sd1 =
 8007d42:	84e0      	strh	r0, [r4, #38]	; 0x26
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  40));
 8007d44:	2002      	movs	r0, #2
 8007d46:	f7fc fcd6 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
	pdata->result__spare_2_sd1 =
 8007d4a:	8520      	strh	r0, [r4, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 8007d4c:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 8007d50:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 8007d54:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8007d58:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 8007d5c:	2000      	movs	r0, #0
}
 8007d5e:	bd38      	pop	{r3, r4, r5, pc}
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007d60:	f06f 0009 	mvn.w	r0, #9
 8007d64:	e7fb      	b.n	8007d5e <VL53LX_i2c_decode_system_results+0x116>

08007d66 <VL53LX_i2c_decode_core_results>:

	VL53LX_Error status = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CORE_RESULTS_I2C_SIZE_BYTES)
 8007d66:	2820      	cmp	r0, #32
{
 8007d68:	b538      	push	{r3, r4, r5, lr}
 8007d6a:	460d      	mov	r5, r1
 8007d6c:	4614      	mov	r4, r2
	if (buf_size < VL53LX_CORE_RESULTS_I2C_SIZE_BYTES)
 8007d6e:	d932      	bls.n	8007dd6 <VL53LX_i2c_decode_core_results+0x70>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->result_core__ambient_window_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   0));
 8007d70:	2004      	movs	r0, #4
 8007d72:	f7fc fcea 	bl	800474a <VL53LX_i2c_decode_uint32_t>
	pdata->result_core__ranging_total_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   4));
 8007d76:	1d29      	adds	r1, r5, #4
	pdata->result_core__ambient_window_events_sd0 =
 8007d78:	6020      	str	r0, [r4, #0]
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   4));
 8007d7a:	2004      	movs	r0, #4
 8007d7c:	f7fc fce5 	bl	800474a <VL53LX_i2c_decode_uint32_t>
	pdata->result_core__signal_total_events_sd0 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +   8));
 8007d80:	f105 0108 	add.w	r1, r5, #8
	pdata->result_core__ranging_total_events_sd0 =
 8007d84:	6060      	str	r0, [r4, #4]
		(VL53LX_i2c_decode_int32_t(4, pbuffer +   8));
 8007d86:	2004      	movs	r0, #4
 8007d88:	f7fc fce9 	bl	800475e <VL53LX_i2c_decode_int32_t>
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  12));
 8007d8c:	f105 010c 	add.w	r1, r5, #12
	pdata->result_core__signal_total_events_sd0 =
 8007d90:	60a0      	str	r0, [r4, #8]
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  12));
 8007d92:	2004      	movs	r0, #4
 8007d94:	f7fc fcd9 	bl	800474a <VL53LX_i2c_decode_uint32_t>
	pdata->result_core__ambient_window_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  16));
 8007d98:	f105 0110 	add.w	r1, r5, #16
	pdata->result_core__total_periods_elapsed_sd0 =
 8007d9c:	60e0      	str	r0, [r4, #12]
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  16));
 8007d9e:	2004      	movs	r0, #4
 8007da0:	f7fc fcd3 	bl	800474a <VL53LX_i2c_decode_uint32_t>
	pdata->result_core__ranging_total_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  20));
 8007da4:	f105 0114 	add.w	r1, r5, #20
	pdata->result_core__ambient_window_events_sd1 =
 8007da8:	6120      	str	r0, [r4, #16]
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  20));
 8007daa:	2004      	movs	r0, #4
 8007dac:	f7fc fccd 	bl	800474a <VL53LX_i2c_decode_uint32_t>
	pdata->result_core__signal_total_events_sd1 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +  24));
 8007db0:	f105 0118 	add.w	r1, r5, #24
	pdata->result_core__ranging_total_events_sd1 =
 8007db4:	6160      	str	r0, [r4, #20]
		(VL53LX_i2c_decode_int32_t(4, pbuffer +  24));
 8007db6:	2004      	movs	r0, #4
 8007db8:	f7fc fcd1 	bl	800475e <VL53LX_i2c_decode_int32_t>
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  28));
 8007dbc:	f105 011c 	add.w	r1, r5, #28
	pdata->result_core__signal_total_events_sd1 =
 8007dc0:	61a0      	str	r0, [r4, #24]
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  28));
 8007dc2:	2004      	movs	r0, #4
 8007dc4:	f7fc fcc1 	bl	800474a <VL53LX_i2c_decode_uint32_t>
	pdata->result_core__total_periods_elapsed_sd1 =
 8007dc8:	61e0      	str	r0, [r4, #28]
	pdata->result_core__spare_0 =
 8007dca:	f895 3020 	ldrb.w	r3, [r5, #32]
 8007dce:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8007dd2:	2000      	movs	r0, #0
}
 8007dd4:	bd38      	pop	{r3, r4, r5, pc}
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007dd6:	f06f 0009 	mvn.w	r0, #9
 8007dda:	e7fb      	b.n	8007dd4 <VL53LX_i2c_decode_core_results+0x6e>

08007ddc <VL53LX_i2c_decode_debug_results>:

	VL53LX_Error status = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES)
 8007ddc:	2837      	cmp	r0, #55	; 0x37
{
 8007dde:	b538      	push	{r3, r4, r5, lr}
 8007de0:	460d      	mov	r5, r1
 8007de2:	4614      	mov	r4, r2
	if (buf_size < VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES)
 8007de4:	f240 80d0 	bls.w	8007f88 <VL53LX_i2c_decode_debug_results+0x1ac>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->phasecal_result__reference_phase =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   0));
 8007de8:	2002      	movs	r0, #2
 8007dea:	f7fc fc84 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
	pdata->phasecal_result__reference_phase =
 8007dee:	8020      	strh	r0, [r4, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8007df0:	78ab      	ldrb	r3, [r5, #2]
 8007df2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->phasecal_result__vcsel_start =
 8007df6:	70a3      	strb	r3, [r4, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 8007df8:	78eb      	ldrb	r3, [r5, #3]
 8007dfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ref_spad_char_result__num_actual_ref_spads =
 8007dfe:	70e3      	strb	r3, [r4, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 8007e00:	792b      	ldrb	r3, [r5, #4]
 8007e02:	f003 0303 	and.w	r3, r3, #3
	pdata->ref_spad_char_result__ref_location =
 8007e06:	7123      	strb	r3, [r4, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8007e08:	796b      	ldrb	r3, [r5, #5]
 8007e0a:	f003 0301 	and.w	r3, r3, #1
	pdata->vhv_result__coldboot_status =
 8007e0e:	7163      	strb	r3, [r4, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8007e10:	79ab      	ldrb	r3, [r5, #6]
 8007e12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_result__search_result =
 8007e16:	71a3      	strb	r3, [r4, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8007e18:	79eb      	ldrb	r3, [r5, #7]
 8007e1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_result__latest_setting =
 8007e1e:	71e3      	strb	r3, [r4, #7]
	pdata->result__osc_calibrate_val =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8007e20:	f105 0108 	add.w	r1, r5, #8
 8007e24:	2002      	movs	r0, #2
 8007e26:	f7fc fc66 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
 8007e2a:	f3c0 0009 	ubfx	r0, r0, #0, #10
	pdata->result__osc_calibrate_val =
 8007e2e:	8120      	strh	r0, [r4, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 8007e30:	7aab      	ldrb	r3, [r5, #10]
 8007e32:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__powerdown_go1 =
 8007e36:	72a3      	strb	r3, [r4, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 8007e38:	7aeb      	ldrb	r3, [r5, #11]
 8007e3a:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__ref_bg_ctrl =
 8007e3e:	72e3      	strb	r3, [r4, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 8007e40:	7b2b      	ldrb	r3, [r5, #12]
 8007e42:	f003 030f 	and.w	r3, r3, #15
	pdata->ana_config__regdvdd1v2_ctrl =
 8007e46:	7323      	strb	r3, [r4, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 8007e48:	7b6b      	ldrb	r3, [r5, #13]
 8007e4a:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__osc_slow_ctrl =
 8007e4e:	7363      	strb	r3, [r4, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 8007e50:	7bab      	ldrb	r3, [r5, #14]
 8007e52:	f003 0301 	and.w	r3, r3, #1
	pdata->test_mode__status =
 8007e56:	73a3      	strb	r3, [r4, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 8007e58:	7beb      	ldrb	r3, [r5, #15]
 8007e5a:	f003 0303 	and.w	r3, r3, #3
	pdata->firmware__system_status =
 8007e5e:	73e3      	strb	r3, [r4, #15]
	pdata->firmware__mode_status =
 8007e60:	7c2b      	ldrb	r3, [r5, #16]
 8007e62:	7423      	strb	r3, [r4, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8007e64:	7c6b      	ldrb	r3, [r5, #17]
 8007e66:	7463      	strb	r3, [r4, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 8007e68:	f105 0112 	add.w	r1, r5, #18
 8007e6c:	2002      	movs	r0, #2
 8007e6e:	f7fc fc42 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
 8007e72:	f3c0 000b 	ubfx	r0, r0, #0, #12
	pdata->firmware__cal_repeat_rate_counter =
 8007e76:	8260      	strh	r0, [r4, #18]
	pdata->gph__system__thresh_high =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 8007e78:	f105 0116 	add.w	r1, r5, #22
 8007e7c:	2002      	movs	r0, #2
 8007e7e:	f7fc fc3a 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
	pdata->gph__system__thresh_low =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 8007e82:	f105 0118 	add.w	r1, r5, #24
	pdata->gph__system__thresh_high =
 8007e86:	82a0      	strh	r0, [r4, #20]
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 8007e88:	2002      	movs	r0, #2
 8007e8a:	f7fc fc34 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
	pdata->gph__system__thresh_low =
 8007e8e:	82e0      	strh	r0, [r4, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 8007e90:	7eab      	ldrb	r3, [r5, #26]
 8007e92:	f003 0301 	and.w	r3, r3, #1
	pdata->gph__system__enable_xtalk_per_quadrant =
 8007e96:	7623      	strb	r3, [r4, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 8007e98:	7eeb      	ldrb	r3, [r5, #27]
 8007e9a:	f003 0307 	and.w	r3, r3, #7
	pdata->gph__spare_0 =
 8007e9e:	7663      	strb	r3, [r4, #25]
	pdata->gph__sd_config__woi_sd0 =
 8007ea0:	7f2b      	ldrb	r3, [r5, #28]
 8007ea2:	76a3      	strb	r3, [r4, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8007ea4:	7f6b      	ldrb	r3, [r5, #29]
 8007ea6:	76e3      	strb	r3, [r4, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 8007ea8:	7fab      	ldrb	r3, [r5, #30]
 8007eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->gph__sd_config__initial_phase_sd0 =
 8007eae:	7723      	strb	r3, [r4, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 8007eb0:	7feb      	ldrb	r3, [r5, #31]
 8007eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->gph__sd_config__initial_phase_sd1 =
 8007eb6:	7763      	strb	r3, [r4, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 8007eb8:	f895 3020 	ldrb.w	r3, [r5, #32]
 8007ebc:	f003 0303 	and.w	r3, r3, #3
	pdata->gph__sd_config__first_order_select =
 8007ec0:	77a3      	strb	r3, [r4, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 8007ec2:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8007ec6:	f003 030f 	and.w	r3, r3, #15
	pdata->gph__sd_config__quantifier =
 8007eca:	77e3      	strb	r3, [r4, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 8007ecc:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8007ed0:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 8007ed4:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 8007ed8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 8007edc:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8007ee0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 8007ee4:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8007ee8:	f003 0301 	and.w	r3, r3, #1
	pdata->gph__gph_id =
 8007eec:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8007ef0:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 8007ef4:	f003 0303 	and.w	r3, r3, #3
	pdata->system__interrupt_set =
 8007ef8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8007efc:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 8007f00:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__enables =
 8007f04:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8007f08:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8007f0c:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__clear =
 8007f10:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 8007f14:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8007f18:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__status =
 8007f1c:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 8007f20:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 8007f24:	f003 0301 	and.w	r3, r3, #1
	pdata->mcu_to_host_bank__wr_access_en =
 8007f28:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 8007f2c:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8007f30:	f003 0301 	and.w	r3, r3, #1
	pdata->power_management__go1_reset_status =
 8007f34:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 8007f38:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8007f3c:	f003 0303 	and.w	r3, r3, #3
	pdata->pad_startup_mode__value_ro =
 8007f40:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 8007f44:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8007f48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->pad_startup_mode__value_ctrl =
 8007f4c:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 8007f50:	f105 012e 	add.w	r1, r5, #46	; 0x2e
 8007f54:	2004      	movs	r0, #4
 8007f56:	f7fc fbf8 	bl	800474a <VL53LX_i2c_decode_uint32_t>
 8007f5a:	f3c0 0011 	ubfx	r0, r0, #0, #18
	pdata->pll_period_us =
 8007f5e:	62e0      	str	r0, [r4, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  50));
 8007f60:	f105 0132 	add.w	r1, r5, #50	; 0x32
 8007f64:	2004      	movs	r0, #4
 8007f66:	f7fc fbf0 	bl	800474a <VL53LX_i2c_decode_uint32_t>
	pdata->interrupt_scheduler__data_out =
 8007f6a:	6320      	str	r0, [r4, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 8007f6c:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
 8007f70:	f003 0301 	and.w	r3, r3, #1
	pdata->nvm_bist__complete =
 8007f74:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 8007f78:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
 8007f7c:	f003 0301 	and.w	r3, r3, #1
	pdata->nvm_bist__status =
 8007f80:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 8007f84:	2000      	movs	r0, #0
}
 8007f86:	bd38      	pop	{r3, r4, r5, pc}
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007f88:	f06f 0009 	mvn.w	r0, #9
 8007f8c:	e7fb      	b.n	8007f86 <VL53LX_i2c_decode_debug_results+0x1aa>

08007f8e <VL53LX_i2c_decode_nvm_copy_data>:

	VL53LX_Error status = VL53LX_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES)
 8007f8e:	2830      	cmp	r0, #48	; 0x30
{
 8007f90:	b538      	push	{r3, r4, r5, lr}
 8007f92:	460d      	mov	r5, r1
 8007f94:	4614      	mov	r4, r2
	if (buf_size < VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES)
 8007f96:	f240 809c 	bls.w	80080d2 <VL53LX_i2c_decode_nvm_copy_data+0x144>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->identification__model_id =
		(*(pbuffer +   0));
 8007f9a:	780b      	ldrb	r3, [r1, #0]
	pdata->identification__model_id =
 8007f9c:	7013      	strb	r3, [r2, #0]
	pdata->identification__module_type =
 8007f9e:	784b      	ldrb	r3, [r1, #1]
 8007fa0:	7053      	strb	r3, [r2, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8007fa2:	788b      	ldrb	r3, [r1, #2]
 8007fa4:	7093      	strb	r3, [r2, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   3));
 8007fa6:	3103      	adds	r1, #3
 8007fa8:	2002      	movs	r0, #2
 8007faa:	f7fc fba4 	bl	80046f6 <VL53LX_i2c_decode_uint16_t>
	pdata->identification__module_id =
 8007fae:	80a0      	strh	r0, [r4, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8007fb0:	796b      	ldrb	r3, [r5, #5]
 8007fb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->ana_config__fast_osc__trim_max =
 8007fb6:	71a3      	strb	r3, [r4, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 8007fb8:	79ab      	ldrb	r3, [r5, #6]
 8007fba:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__fast_osc__freq_set =
 8007fbe:	71e3      	strb	r3, [r4, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 8007fc0:	79eb      	ldrb	r3, [r5, #7]
 8007fc2:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__vcsel_trim =
 8007fc6:	7223      	strb	r3, [r4, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8007fc8:	7a2b      	ldrb	r3, [r5, #8]
 8007fca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ana_config__vcsel_selion =
 8007fce:	7263      	strb	r3, [r4, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 8007fd0:	7a6b      	ldrb	r3, [r5, #9]
 8007fd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ana_config__vcsel_selion_max =
 8007fd6:	72a3      	strb	r3, [r4, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8007fd8:	7aab      	ldrb	r3, [r5, #10]
 8007fda:	f003 0301 	and.w	r3, r3, #1
	pdata->protected_laser_safety__lock_bit =
 8007fde:	72e3      	strb	r3, [r4, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 8007fe0:	7aeb      	ldrb	r3, [r5, #11]
 8007fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->laser_safety__key =
 8007fe6:	7323      	strb	r3, [r4, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8007fe8:	7b2b      	ldrb	r3, [r5, #12]
 8007fea:	f003 0301 	and.w	r3, r3, #1
	pdata->laser_safety__key_ro =
 8007fee:	7363      	strb	r3, [r4, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8007ff0:	7b6b      	ldrb	r3, [r5, #13]
 8007ff2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->laser_safety__clip =
 8007ff6:	73a3      	strb	r3, [r4, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8007ff8:	7bab      	ldrb	r3, [r5, #14]
 8007ffa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->laser_safety__mult =
 8007ffe:	73e3      	strb	r3, [r4, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8008000:	7beb      	ldrb	r3, [r5, #15]
 8008002:	7423      	strb	r3, [r4, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 8008004:	7c2b      	ldrb	r3, [r5, #16]
 8008006:	7463      	strb	r3, [r4, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 8008008:	7c6b      	ldrb	r3, [r5, #17]
 800800a:	74a3      	strb	r3, [r4, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 800800c:	7cab      	ldrb	r3, [r5, #18]
 800800e:	74e3      	strb	r3, [r4, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 8008010:	7ceb      	ldrb	r3, [r5, #19]
 8008012:	7523      	strb	r3, [r4, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 8008014:	7d2b      	ldrb	r3, [r5, #20]
 8008016:	7563      	strb	r3, [r4, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8008018:	7d6b      	ldrb	r3, [r5, #21]
 800801a:	75a3      	strb	r3, [r4, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 800801c:	7dab      	ldrb	r3, [r5, #22]
 800801e:	75e3      	strb	r3, [r4, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8008020:	7deb      	ldrb	r3, [r5, #23]
 8008022:	7623      	strb	r3, [r4, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 8008024:	7e2b      	ldrb	r3, [r5, #24]
 8008026:	7663      	strb	r3, [r4, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8008028:	7e6b      	ldrb	r3, [r5, #25]
 800802a:	76a3      	strb	r3, [r4, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 800802c:	7eab      	ldrb	r3, [r5, #26]
 800802e:	76e3      	strb	r3, [r4, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8008030:	7eeb      	ldrb	r3, [r5, #27]
 8008032:	7723      	strb	r3, [r4, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 8008034:	7f2b      	ldrb	r3, [r5, #28]
 8008036:	7763      	strb	r3, [r4, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 8008038:	7f6b      	ldrb	r3, [r5, #29]
 800803a:	77a3      	strb	r3, [r4, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 800803c:	7fab      	ldrb	r3, [r5, #30]
 800803e:	77e3      	strb	r3, [r4, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 8008040:	7feb      	ldrb	r3, [r5, #31]
 8008042:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 8008046:	f895 3020 	ldrb.w	r3, [r5, #32]
 800804a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 800804e:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8008052:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8008056:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800805a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 800805e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 8008062:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 8008066:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800806a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 800806e:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8008072:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8008076:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 800807a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 800807e:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 8008082:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8008086:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800808a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 800808e:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8008092:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8008096:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 800809a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 800809e:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 80080a2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 80080a6:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80080aa:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 80080ae:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 80080b2:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 80080b6:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
 80080ba:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 80080be:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 80080c2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 80080c6:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 80080ca:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 80080ce:	2000      	movs	r0, #0
}
 80080d0:	bd38      	pop	{r3, r4, r5, pc}
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 80080d2:	f06f 0009 	mvn.w	r0, #9
 80080d6:	e7fb      	b.n	80080d0 <VL53LX_i2c_decode_nvm_copy_data+0x142>

080080d8 <VL53LX_get_nvm_copy_data>:


VL53LX_Error VL53LX_get_nvm_copy_data(
	VL53LX_DEV                 Dev,
	VL53LX_nvm_copy_data_t    *pdata)
{
 80080d8:	b510      	push	{r4, lr}
 80080da:	b08e      	sub	sp, #56	; 0x38
 80080dc:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
		status = VL53LX_ReadMulti(
 80080de:	2331      	movs	r3, #49	; 0x31
 80080e0:	aa01      	add	r2, sp, #4
 80080e2:	f240 110f 	movw	r1, #271	; 0x10f
 80080e6:	f7f9 fa0b 	bl	8001500 <VL53LX_ReadMulti>
			Dev,
			VL53LX_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 80080ea:	b920      	cbnz	r0, 80080f6 <VL53LX_get_nvm_copy_data+0x1e>
		status = VL53LX_i2c_decode_nvm_copy_data(
 80080ec:	4622      	mov	r2, r4
 80080ee:	a901      	add	r1, sp, #4
 80080f0:	2031      	movs	r0, #49	; 0x31
 80080f2:	f7ff ff4c 	bl	8007f8e <VL53LX_i2c_decode_nvm_copy_data>
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 80080f6:	b00e      	add	sp, #56	; 0x38
 80080f8:	bd10      	pop	{r4, pc}

080080fa <VL53LX_f_023>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53LX_p_028,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 80080fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fe:	b087      	sub	sp, #28
 8008100:	460c      	mov	r4, r1
 8008102:	9004      	str	r0, [sp, #16]
	uint64_t tmp0        = 0;
	uint64_t tmp1        = 0;
	uint64_t b_minus_amb = 0;
	uint64_t VL53LX_p_055   = 0;

	*psigma_est  = VL53LX_D_002;
 8008104:	9917      	ldr	r1, [sp, #92]	; 0x5c
{
 8008106:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
 800810a:	469b      	mov	fp, r3
	*psigma_est  = VL53LX_D_002;
 800810c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008110:	800b      	strh	r3, [r1, #0]



	if (fast_osc_frequency != 0) {
 8008112:	b920      	cbnz	r0, 800811e <VL53LX_f_023+0x24>
	VL53LX_Error status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8008114:	f06f 000e 	mvn.w	r0, #14
		}

	}

	return status;
}
 8008118:	b007      	add	sp, #28
 800811a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800811e:	9205      	str	r2, [sp, #20]
		pll_period_mm = VL53LX_calc_pll_period_mm(fast_osc_frequency);
 8008120:	f7fd fe5a 	bl	8005dd8 <VL53LX_calc_pll_period_mm>
 8008124:	9a05      	ldr	r2, [sp, #20]
 8008126:	9d15      	ldr	r5, [sp, #84]	; 0x54
		if (VL53LX_p_028 > VL53LX_p_032)
 8008128:	4295      	cmp	r5, r2
		pll_period_mm = VL53LX_calc_pll_period_mm(fast_osc_frequency);
 800812a:	4680      	mov	r8, r0
		if (VL53LX_p_028 > VL53LX_p_032)
 800812c:	f04f 0100 	mov.w	r1, #0
 8008130:	4610      	mov	r0, r2
 8008132:	f04f 0c00 	mov.w	ip, #0
 8008136:	f240 80c9 	bls.w	80082cc <VL53LX_f_023+0x1d2>
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 800813a:	1aae      	subs	r6, r5, r2
 800813c:	eb6c 0701 	sbc.w	r7, ip, r1
		if (VL53LX_p_007 > VL53LX_p_001)
 8008140:	2200      	movs	r2, #0
 8008142:	455c      	cmp	r4, fp
 8008144:	4696      	mov	lr, r2
 8008146:	f240 80c5 	bls.w	80082d4 <VL53LX_f_023+0x1da>
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 800814a:	ebb4 030b 	subs.w	r3, r4, fp
 800814e:	eb62 0402 	sbc.w	r4, r2, r2
		if (b_minus_amb != 0) {
 8008152:	ea56 0207 	orrs.w	r2, r6, r7
 8008156:	d0dd      	beq.n	8008114 <VL53LX_f_023+0x1a>
			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 8008158:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800815a:	1880      	adds	r0, r0, r2
 800815c:	f141 0100 	adc.w	r1, r1, #0
			if (tmp0 > VL53LX_D_003)
 8008160:	eb10 0905 	adds.w	r9, r0, r5
 8008164:	eb41 0a0c 	adc.w	sl, r1, ip
			tmp1 = (uint64_t)VL53LX_p_055 * (uint64_t)VL53LX_p_055;
 8008168:	435c      	muls	r4, r3
 800816a:	fba3 bc03 	umull	fp, ip, r3, r3
 800816e:	2100      	movs	r1, #0
 8008170:	4551      	cmp	r1, sl
 8008172:	eb0c 0c44 	add.w	ip, ip, r4, lsl #1
 8008176:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800817a:	bf08      	it	eq
 800817c:	4548      	cmpeq	r0, r9
			tmp1 = tmp1 << 8;
 800817e:	ea4f 230c 	mov.w	r3, ip, lsl #8
 8008182:	bf38      	it	cc
 8008184:	468a      	movcc	sl, r1
 8008186:	ea43 611b 	orr.w	r1, r3, fp, lsr #24
 800818a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800818e:	bf38      	it	cc
 8008190:	4681      	movcc	r9, r0
			if (tmp1 > VL53LX_D_004)
 8008192:	f04f 32ff 	mov.w	r2, #4294967295
 8008196:	428b      	cmp	r3, r1
 8008198:	ea4f 200b 	mov.w	r0, fp, lsl #8
 800819c:	bf08      	it	eq
 800819e:	4282      	cmpeq	r2, r0
 80081a0:	bf3c      	itt	cc
 80081a2:	4610      	movcc	r0, r2
 80081a4:	4619      	movcc	r1, r3
			tmp1 = do_division_u(tmp1, b_minus_amb);
 80081a6:	4632      	mov	r2, r6
 80081a8:	463b      	mov	r3, r7
 80081aa:	f7f8 fd55 	bl	8000c58 <__aeabi_uldivmod>
			tmp1 = do_division_u(tmp1, b_minus_amb);
 80081ae:	4632      	mov	r2, r6
 80081b0:	463b      	mov	r3, r7
 80081b2:	f7f8 fd51 	bl	8000c58 <__aeabi_uldivmod>
 80081b6:	460b      	mov	r3, r1
			tmp0 = tmp1 * tmp0;
 80081b8:	217f      	movs	r1, #127	; 0x7f
 80081ba:	4299      	cmp	r1, r3
			tmp1 = do_division_u(tmp1, b_minus_amb);
 80081bc:	4602      	mov	r2, r0
			tmp0 = tmp1 * tmp0;
 80081be:	f04f 30ff 	mov.w	r0, #4294967295
 80081c2:	bf08      	it	eq
 80081c4:	4290      	cmpeq	r0, r2
 80081c6:	bf3c      	itt	cc
 80081c8:	4602      	movcc	r2, r0
 80081ca:	460b      	movcc	r3, r1
 80081cc:	fb02 f10a 	mul.w	r1, r2, sl
 80081d0:	fb09 1103 	mla	r1, r9, r3, r1
 80081d4:	fba2 2309 	umull	r2, r3, r2, r9
 80081d8:	440b      	add	r3, r1
				(uint64_t)a_zp + (uint64_t)ax_zp;
 80081da:	9c13      	ldr	r4, [sp, #76]	; 0x4c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80081dc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80081de:	1864      	adds	r4, r4, r1
 80081e0:	9914      	ldr	r1, [sp, #80]	; 0x50
				(uint64_t)a_zp + (uint64_t)ax_zp;
 80081e2:	f04f 0500 	mov.w	r5, #0
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80081e6:	f145 0500 	adc.w	r5, r5, #0
 80081ea:	1864      	adds	r4, r4, r1
 80081ec:	9911      	ldr	r1, [sp, #68]	; 0x44
 80081ee:	f145 0500 	adc.w	r5, r5, #0
			if (tmp1 > (uint64_t)VL53LX_D_003)
 80081f2:	1864      	adds	r4, r4, r1
 80081f4:	f145 0500 	adc.w	r5, r5, #0
 80081f8:	2100      	movs	r1, #0
 80081fa:	42a9      	cmp	r1, r5
 80081fc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008200:	bf08      	it	eq
 8008202:	42a0      	cmpeq	r0, r4
 8008204:	bf3c      	itt	cc
 8008206:	4604      	movcc	r4, r0
 8008208:	460d      	movcc	r5, r1
			tmp1 = tmp1 << 8;
 800820a:	0220      	lsls	r0, r4, #8
 800820c:	0229      	lsls	r1, r5, #8
			tmp0 = tmp1 + tmp0;
 800820e:	1880      	adds	r0, r0, r2
			tmp1 = tmp1 << 8;
 8008210:	ea41 6114 	orr.w	r1, r1, r4, lsr #24
			tmp0 = tmp1 + tmp0;
 8008214:	eb41 0303 	adc.w	r3, r1, r3
 8008218:	9000      	str	r0, [sp, #0]
 800821a:	9301      	str	r3, [sp, #4]
			if (tmp0 > (uint64_t)VL53LX_D_007) {
 800821c:	e9dd 3400 	ldrd	r3, r4, [sp]
 8008220:	2c01      	cmp	r4, #1
 8008222:	bf08      	it	eq
 8008224:	2b00      	cmpeq	r3, #0
 8008226:	d35a      	bcc.n	80082de <VL53LX_f_023+0x1e4>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8008228:	e9dd 0100 	ldrd	r0, r1, [sp]
 800822c:	4632      	mov	r2, r6
 800822e:	463b      	mov	r3, r7
 8008230:	f7f8 fd12 	bl	8000c58 <__aeabi_uldivmod>
				tmp0 = tmp0 * pll_period_mm;
 8008234:	fba0 4508 	umull	r4, r5, r0, r8
 8008238:	fb08 5501 	mla	r5, r8, r1, r5
			if (tmp0 > (uint64_t)VL53LX_D_006)
 800823c:	2c00      	cmp	r4, #0
 800823e:	f175 0300 	sbcs.w	r3, r5, #0
 8008242:	db59      	blt.n	80082f8 <VL53LX_f_023+0x1fe>
			if (tmp0 > (uint64_t)VL53LX_D_007) {
 8008244:	2d01      	cmp	r5, #1
 8008246:	bf08      	it	eq
 8008248:	2c00      	cmpeq	r4, #0
 800824a:	d35a      	bcc.n	8008302 <VL53LX_f_023+0x208>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 800824c:	463b      	mov	r3, r7
 800824e:	4632      	mov	r2, r6
 8008250:	4620      	mov	r0, r4
 8008252:	4629      	mov	r1, r5
 8008254:	f7f8 fd00 	bl	8000c58 <__aeabi_uldivmod>
				tmp0 = do_division_u(tmp0, 4);
 8008258:	0880      	lsrs	r0, r0, #2
 800825a:	ea40 7081 	orr.w	r0, r0, r1, lsl #30
				tmp0 = tmp0 * pll_period_mm;
 800825e:	fba0 6708 	umull	r6, r7, r0, r8
				tmp0 = do_division_u(tmp0, 4);
 8008262:	0889      	lsrs	r1, r1, #2
				tmp0 = tmp0 * pll_period_mm;
 8008264:	fb08 7701 	mla	r7, r8, r1, r7
			if (tmp0 > (uint64_t)VL53LX_D_006)
 8008268:	2e00      	cmp	r6, #0
 800826a:	f177 0300 	sbcs.w	r3, r7, #0
 800826e:	da03      	bge.n	8008278 <VL53LX_f_023+0x17e>
				tmp0 = (uint64_t)VL53LX_D_006;
 8008270:	f04f 36ff 	mov.w	r6, #4294967295
 8008274:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
			tmp0 = tmp0 >> 2;
 8008278:	08bd      	lsrs	r5, r7, #2
 800827a:	2300      	movs	r3, #0
 800827c:	08b2      	lsrs	r2, r6, #2
			if (tmp0 > (uint64_t)VL53LX_D_007)
 800827e:	42ab      	cmp	r3, r5
 8008280:	ea42 7487 	orr.w	r4, r2, r7, lsl #30
 8008284:	f04f 32ff 	mov.w	r2, #4294967295
 8008288:	bf08      	it	eq
 800828a:	42a2      	cmpeq	r2, r4
 800828c:	bf38      	it	cc
 800828e:	461d      	movcc	r5, r3
			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 8008290:	9b04      	ldr	r3, [sp, #16]
 8008292:	ea4f 10c3 	mov.w	r0, r3, lsl #7
			tmp1 = tmp1 * tmp1;
 8008296:	fba0 0100 	umull	r0, r1, r0, r0
 800829a:	bf38      	it	cc
 800829c:	4614      	movcc	r4, r2
			sigma_int = VL53LX_isqrt((uint32_t)tmp0);
 800829e:	1903      	adds	r3, r0, r4
 80082a0:	9302      	str	r3, [sp, #8]
 80082a2:	eb41 0305 	adc.w	r3, r1, r5
 80082a6:	9303      	str	r3, [sp, #12]
 80082a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082ac:	2300      	movs	r3, #0
 80082ae:	428b      	cmp	r3, r1
 80082b0:	f04f 32ff 	mov.w	r2, #4294967295
 80082b4:	bf08      	it	eq
 80082b6:	4282      	cmpeq	r2, r0
 80082b8:	bf38      	it	cc
 80082ba:	e9cd 2302 	strdcc	r2, r3, [sp, #8]
 80082be:	9802      	ldr	r0, [sp, #8]
 80082c0:	f7fd fd21 	bl	8005d06 <VL53LX_isqrt>
			*psigma_est = (uint16_t)sigma_int;
 80082c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082c6:	8018      	strh	r0, [r3, #0]
			status = VL53LX_ERROR_NONE;
 80082c8:	2000      	movs	r0, #0
 80082ca:	e725      	b.n	8008118 <VL53LX_f_023+0x1e>
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 80082cc:	1b56      	subs	r6, r2, r5
 80082ce:	eb61 070c 	sbc.w	r7, r1, ip
 80082d2:	e735      	b.n	8008140 <VL53LX_f_023+0x46>
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 80082d4:	ebbb 0304 	subs.w	r3, fp, r4
 80082d8:	eb62 0402 	sbc.w	r4, r2, r2
 80082dc:	e739      	b.n	8008152 <VL53LX_f_023+0x58>
				tmp0 = tmp0 * pll_period_mm;
 80082de:	9b00      	ldr	r3, [sp, #0]
 80082e0:	fba3 0108 	umull	r0, r1, r3, r8
 80082e4:	9b01      	ldr	r3, [sp, #4]
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80082e6:	4632      	mov	r2, r6
				tmp0 = tmp0 * pll_period_mm;
 80082e8:	fb08 1103 	mla	r1, r8, r3, r1
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80082ec:	463b      	mov	r3, r7
 80082ee:	f7f8 fcb3 	bl	8000c58 <__aeabi_uldivmod>
 80082f2:	4604      	mov	r4, r0
 80082f4:	460d      	mov	r5, r1
 80082f6:	e7a1      	b.n	800823c <VL53LX_f_023+0x142>
				tmp0 = (uint64_t)VL53LX_D_006;
 80082f8:	f04f 34ff 	mov.w	r4, #4294967295
 80082fc:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8008300:	e7a4      	b.n	800824c <VL53LX_f_023+0x152>
				tmp0 = tmp0 * pll_period_mm;
 8008302:	fba4 0108 	umull	r0, r1, r4, r8
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8008306:	4632      	mov	r2, r6
 8008308:	463b      	mov	r3, r7
				tmp0 = tmp0 * pll_period_mm;
 800830a:	fb08 1105 	mla	r1, r8, r5, r1
				tmp0 = do_division_u(tmp0, b_minus_amb);
 800830e:	f7f8 fca3 	bl	8000c58 <__aeabi_uldivmod>
				tmp0 = do_division_u(tmp0, 4);
 8008312:	0886      	lsrs	r6, r0, #2
 8008314:	ea46 7681 	orr.w	r6, r6, r1, lsl #30
 8008318:	088f      	lsrs	r7, r1, #2
			if (tmp0 > (uint64_t)VL53LX_D_006)
 800831a:	e7ad      	b.n	8008278 <VL53LX_f_023+0x17e>

0800831c <VL53LX_poll_for_boot_completion>:


VL53LX_Error VL53LX_poll_for_boot_completion(
	VL53LX_DEV    Dev,
	uint32_t      timeout_ms)
{
 800831c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800831e:	460e      	mov	r6, r1

	LOG_FUNCTION_START("");



	status = VL53LX_WaitUs(
 8008320:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
{
 8008324:	4605      	mov	r5, r0
	status = VL53LX_WaitUs(
 8008326:	f7f9 f95f 	bl	80015e8 <VL53LX_WaitUs>
			Dev,
			VL53LX_FIRMWARE_BOOT_TIME_US);

	if (status == VL53LX_ERROR_NONE)
 800832a:	4604      	mov	r4, r0
 800832c:	b968      	cbnz	r0, 800834a <VL53LX_poll_for_boot_completion+0x2e>
		status =
			VL53LX_WaitValueMaskEx(
 800832e:	2301      	movs	r3, #1
 8008330:	e9cd 3300 	strd	r3, r3, [sp]
 8008334:	22e5      	movs	r2, #229	; 0xe5
 8008336:	4631      	mov	r1, r6
 8008338:	4628      	mov	r0, r5
 800833a:	f7f9 f95f 	bl	80015fc <VL53LX_WaitValueMaskEx>
				VL53LX_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53LX_POLLING_DELAY_MS);

	if (status == VL53LX_ERROR_NONE)
 800833e:	4604      	mov	r4, r0
 8008340:	b918      	cbnz	r0, 800834a <VL53LX_poll_for_boot_completion+0x2e>
		VL53LX_init_ll_driver_state(Dev, VL53LX_DEVICESTATE_SW_STANDBY);
 8008342:	2103      	movs	r1, #3
 8008344:	4628      	mov	r0, r5
 8008346:	f7fc f847 	bl	80043d8 <VL53LX_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
}
 800834a:	4620      	mov	r0, r4
 800834c:	b002      	add	sp, #8
 800834e:	bd70      	pop	{r4, r5, r6, pc}

08008350 <VL53LX_f_032>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 8008350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008354:	b08d      	sub	sp, #52	; 0x34
 8008356:	4680      	mov	r8, r0
 8008358:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64




	if (status == VL53LX_ERROR_NONE) {
		VL53LX_decode_row_col(
 800835c:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
{
 8008360:	9109      	str	r1, [sp, #36]	; 0x24
 8008362:	4617      	mov	r7, r2
 8008364:	4699      	mov	r9, r3
		VL53LX_decode_row_col(
 8008366:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
	uint8_t row = 0;
 800836a:	2300      	movs	r3, #0
		VL53LX_decode_row_col(
 800836c:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
	uint8_t row = 0;
 8008370:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	uint8_t col = 0;
 8008374:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
{
 8008378:	f99d 6058 	ldrsb.w	r6, [sp, #88]	; 0x58
		VL53LX_decode_row_col(
 800837c:	f7fd fe24 	bl	8005fc8 <VL53LX_decode_row_col>
			"Col", col);



	if (status == VL53LX_ERROR_NONE) {
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 8008380:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
			bound_l_x = (int16_t) col -
 8008384:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 8008388:	f014 0f10 	tst.w	r4, #16
 800838c:	ea4f 1c54 	mov.w	ip, r4, lsr #5
			bound_l_x = (int16_t) col -
 8008390:	bf18      	it	ne
 8008392:	f101 33ff 	addne.w	r3, r1, #4294967295
 8008396:	f004 020f 	and.w	r2, r4, #15
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 800839a:	bf08      	it	eq
 800839c:	eba1 030c 	subeq.w	r3, r1, ip
 80083a0:	f3c4 0e42 	ubfx	lr, r4, #1, #3
			bound_l_x = (int16_t) col -
 80083a4:	bf18      	it	ne
 80083a6:	eba3 030c 	subne.w	r3, r3, ip
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 80083aa:	07e4      	lsls	r4, r4, #31
			bound_d_y = (int16_t) row -
 80083ac:	bf4a      	itet	mi
 80083ae:	f100 32ff 	addmi.w	r2, r0, #4294967295
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
		else
			bound_d_y = (int16_t) row -
 80083b2:	eba0 0252 	subpl.w	r2, r0, r2, lsr #1
			bound_d_y = (int16_t) row -
 80083b6:	eba2 020e 	submi.w	r2, r2, lr
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 80083ba:	fa12 f486 	uxtah	r4, r2, r6
 80083be:	0064      	lsls	r4, r4, #1
		bound_l_x =  (2 * bound_l_x) - 15 +
 80083c0:	fa13 f389 	uxtah	r3, r3, r9
		bound_d_y =  (2 * bound_d_y) - 15 +
 80083c4:	3c0f      	subs	r4, #15




	if (status == VL53LX_ERROR_NONE) {
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 80083c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
		bound_l_x =  (2 * bound_l_x) - 15 +
 80083c8:	005b      	lsls	r3, r3, #1
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 80083ca:	b224      	sxth	r4, r4
		bound_l_x =  (2 * bound_l_x) - 15 +
 80083cc:	3b0f      	subs	r3, #15
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 80083ce:	fb84 4507 	smull	r4, r5, r4, r7
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 80083d2:	fbc3 4582 	smlalbb	r4, r5, r3, r2
					((int64_t)ygradient));
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 80083d6:	f114 0a01 	adds.w	sl, r4, #1
 80083da:	f145 0b00 	adc.w	fp, r5, #0
 80083de:	ea4f 74db 	mov.w	r4, fp, lsr #31
 80083e2:	eb1a 0204 	adds.w	r2, sl, r4
 80083e6:	f14b 0300 	adc.w	r3, fp, #0
 80083ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80083ee:	9b04      	ldr	r3, [sp, #16]
		bound_u_y =  (2 * bound_u_y) - 15 +
 80083f0:	fa10 f086 	uxtah	r0, r0, r6
		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 80083f4:	b289      	uxth	r1, r1
		bound_u_y =  (2 * bound_u_y) - 15 +
 80083f6:	4470      	add	r0, lr
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 80083f8:	085c      	lsrs	r4, r3, #1
		bound_r_x =  (2 * bound_r_x) - 15 +
 80083fa:	fa11 f189 	uxtah	r1, r1, r9
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 80083fe:	9b05      	ldr	r3, [sp, #20]
		bound_u_y =  (2 * bound_u_y) - 15 +
 8008400:	0040      	lsls	r0, r0, #1
		bound_r_x =  (2 * bound_r_x) - 15 +
 8008402:	448c      	add	ip, r1
		bound_u_y =  (2 * bound_u_y) - 15 +
 8008404:	380f      	subs	r0, #15
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 8008406:	ea44 7ac3 	orr.w	sl, r4, r3, lsl #31
 800840a:	105a      	asrs	r2, r3, #1
		bound_r_x =  (2 * bound_r_x) - 15 +
 800840c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
		xtalk_rate_ll += ((int64_t)mean_offset * 4);

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8008410:	9b09      	ldr	r3, [sp, #36]	; 0x24
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8008412:	b200      	sxth	r0, r0
		bound_r_x =  (2 * bound_r_x) - 15 +
 8008414:	f1ac 0c0f 	sub.w	ip, ip, #15
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8008418:	fb80 0107 	smull	r0, r1, r0, r7
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 800841c:	fbc3 018c 	smlalbb	r0, r1, r3, ip
			((int64_t)ygradient));
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8008420:	1c43      	adds	r3, r0, #1
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 8008422:	f04f 0500 	mov.w	r5, #0
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8008426:	9302      	str	r3, [sp, #8]
 8008428:	eb41 0305 	adc.w	r3, r1, r5
 800842c:	9303      	str	r3, [sp, #12]
 800842e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008432:	0fdb      	lsrs	r3, r3, #31
 8008434:	18c0      	adds	r0, r0, r3
 8008436:	f141 0100 	adc.w	r1, r1, #0
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 800843a:	ea4f 0488 	mov.w	r4, r8, lsl #2
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 800843e:	0846      	lsrs	r6, r0, #1
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 8008440:	eb14 0a0a 	adds.w	sl, r4, sl
 8008444:	ea4f 7b98 	mov.w	fp, r8, lsr #30
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8008448:	ea46 70c1 	orr.w	r0, r6, r1, lsl #31
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 800844c:	eb4b 0202 	adc.w	r2, fp, r2
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8008450:	104b      	asrs	r3, r1, #1
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 8008452:	1824      	adds	r4, r4, r0
 8008454:	eb4b 0b03 	adc.w	fp, fp, r3
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53LX_ERROR_NONE)
		xtalk_avg = do_division_s(
 8008458:	eb1a 0304 	adds.w	r3, sl, r4
 800845c:	9300      	str	r3, [sp, #0]
 800845e:	eb42 030b 	adc.w	r3, r2, fp
 8008462:	9301      	str	r3, [sp, #4]
			"xtalk_avg", xtalk_avg);



	if (status == VL53LX_ERROR_NONE)
		if (xtalk_avg < 0)
 8008464:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008468:	f06f 0201 	mvn.w	r2, #1
 800846c:	f04f 33ff 	mov.w	r3, #4294967295
 8008470:	4290      	cmp	r0, r2
 8008472:	eb71 0303 	sbcs.w	r3, r1, r3
 8008476:	db0e      	blt.n	8008496 <VL53LX_f_032+0x146>
		xtalk_avg = do_division_s(
 8008478:	9b00      	ldr	r3, [sp, #0]
 800847a:	3301      	adds	r3, #1
 800847c:	9306      	str	r3, [sp, #24]
 800847e:	9b01      	ldr	r3, [sp, #4]
 8008480:	416b      	adcs	r3, r5
 8008482:	9307      	str	r3, [sp, #28]
 8008484:	0fd9      	lsrs	r1, r3, #31
 8008486:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800848a:	1852      	adds	r2, r2, r1
 800848c:	f143 0300 	adc.w	r3, r3, #0
 8008490:	0855      	lsrs	r5, r2, #1
 8008492:	ea45 75c3 	orr.w	r5, r5, r3, lsl #31





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 8008496:	9b1a      	ldr	r3, [sp, #104]	; 0x68
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
}
 8008498:	2000      	movs	r0, #0
	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 800849a:	601d      	str	r5, [r3, #0]
}
 800849c:	b00d      	add	sp, #52	; 0x34
 800849e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080084a2 <VL53LX_f_033>:
	VL53LX_histogram_bin_data_t    *phist_data,
	VL53LX_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53LX_histogram_bin_data_t    *pxtalkcount_data
	)
{
 80084a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084a6:	4682      	mov	sl, r0
 80084a8:	460c      	mov	r4, r1
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 80084aa:	f8da 108c 	ldr.w	r1, [sl, #140]	; 0x8c
{
 80084ae:	4610      	mov	r0, r2
	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 80084b0:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
 80084b4:	f04f 0900 	mov.w	r9, #0
 80084b8:	fbe1 8900 	umlal	r8, r9, r1, r0
{
 80084bc:	461d      	mov	r5, r3
	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 80084be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80084c2:	2300      	movs	r3, #0
 80084c4:	4640      	mov	r0, r8
 80084c6:	4649      	mov	r1, r9
 80084c8:	f7f8 fbc6 	bl	8000c58 <__aeabi_uldivmod>




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 80084cc:	f8ba 207c 	ldrh.w	r2, [sl, #124]	; 0x7c





	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 80084d0:	f894 e00a 	ldrb.w	lr, [r4, #10]
	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 80084d4:	468c      	mov	ip, r1
	xtalk_total_events = xtalk_events_per_spad *
 80084d6:	fba0 0102 	umull	r0, r1, r0, r2
 80084da:	fb0c 1102 	mla	r1, ip, r2, r1
	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 80084de:	0a02      	lsrs	r2, r0, #8
 80084e0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80084e4:	0a0b      	lsrs	r3, r1, #8
	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 80084e6:	f512 6680 	adds.w	r6, r2, #1024	; 0x400
 80084ea:	f143 0700 	adc.w	r7, r3, #0
	if (xtalk_total_events > 0xFFFFFFFF)
 80084ee:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
 80084f2:	bf08      	it	eq
 80084f4:	2e00      	cmpeq	r6, #0
	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 80084f6:	bf3d      	ittte	cc
 80084f8:	0af1      	lsrcc	r1, r6, #11
 80084fa:	ea41 5147 	orrcc.w	r1, r1, r7, lsl #21
 80084fe:	ea4f 2cd7 	movcc.w	ip, r7, lsr #11
		xtalk_total_events = 0xFFFFFFFF;
 8008502:	f04f 31ff 	movcs.w	r1, #4294967295
 8008506:	bf28      	it	cs
 8008508:	f04f 0c00 	movcs.w	ip, #0
	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 800850c:	340c      	adds	r4, #12
 800850e:	f105 0318 	add.w	r3, r5, #24
 8008512:	2000      	movs	r0, #0
 8008514:	b2c2      	uxtb	r2, r0
 8008516:	4596      	cmp	lr, r2
 8008518:	d802      	bhi.n	8008520 <VL53LX_f_033+0x7e>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800851a:	2000      	movs	r0, #0
 800851c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 8008520:	f854 2b04 	ldr.w	r2, [r4], #4
 8008524:	fba2 6701 	umull	r6, r7, r2, r1
 8008528:	fb02 770c 	mla	r7, r2, ip, r7
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 800852c:	f516 7200 	adds.w	r2, r6, #512	; 0x200
 8008530:	f147 0500 	adc.w	r5, r7, #0
 8008534:	0a92      	lsrs	r2, r2, #10
 8008536:	ea42 5285 	orr.w	r2, r2, r5, lsl #22
		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 800853a:	f843 2b04 	str.w	r2, [r3], #4
	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 800853e:	3001      	adds	r0, #1
 8008540:	e7e8      	b.n	8008514 <VL53LX_f_033+0x72>
	...

08008544 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008544:	4b05      	ldr	r3, [pc, #20]	; (800855c <SystemInit+0x18>)
 8008546:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800854a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800854e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008552:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008556:	609a      	str	r2, [r3, #8]
#endif
}
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	e000ed00 	.word	0xe000ed00

08008560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008560:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008562:	4a0e      	ldr	r2, [pc, #56]	; (800859c <HAL_InitTick+0x3c>)
 8008564:	4e0e      	ldr	r6, [pc, #56]	; (80085a0 <HAL_InitTick+0x40>)
{
 8008566:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008568:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800856c:	7830      	ldrb	r0, [r6, #0]
 800856e:	fbb3 f3f0 	udiv	r3, r3, r0
 8008572:	6810      	ldr	r0, [r2, #0]
 8008574:	fbb0 f0f3 	udiv	r0, r0, r3
 8008578:	f000 f8a6 	bl	80086c8 <HAL_SYSTICK_Config>
 800857c:	4604      	mov	r4, r0
 800857e:	b950      	cbnz	r0, 8008596 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008580:	2d0f      	cmp	r5, #15
 8008582:	d808      	bhi.n	8008596 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008584:	4602      	mov	r2, r0
 8008586:	4629      	mov	r1, r5
 8008588:	f04f 30ff 	mov.w	r0, #4294967295
 800858c:	f000 f85c 	bl	8008648 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008590:	6075      	str	r5, [r6, #4]
 8008592:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8008594:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8008596:	2001      	movs	r0, #1
 8008598:	e7fc      	b.n	8008594 <HAL_InitTick+0x34>
 800859a:	bf00      	nop
 800859c:	20000030 	.word	0x20000030
 80085a0:	20000034 	.word	0x20000034

080085a4 <HAL_Init>:
{
 80085a4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80085a6:	4b0b      	ldr	r3, [pc, #44]	; (80085d4 <HAL_Init+0x30>)
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085ae:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80085b6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085be:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80085c0:	2003      	movs	r0, #3
 80085c2:	f000 f82f 	bl	8008624 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80085c6:	2000      	movs	r0, #0
 80085c8:	f7ff ffca 	bl	8008560 <HAL_InitTick>
  HAL_MspInit();
 80085cc:	f7f8 feb2 	bl	8001334 <HAL_MspInit>
}
 80085d0:	2000      	movs	r0, #0
 80085d2:	bd08      	pop	{r3, pc}
 80085d4:	40023c00 	.word	0x40023c00

080085d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80085d8:	4a03      	ldr	r2, [pc, #12]	; (80085e8 <HAL_IncTick+0x10>)
 80085da:	4b04      	ldr	r3, [pc, #16]	; (80085ec <HAL_IncTick+0x14>)
 80085dc:	6811      	ldr	r1, [r2, #0]
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	440b      	add	r3, r1
 80085e2:	6013      	str	r3, [r2, #0]
}
 80085e4:	4770      	bx	lr
 80085e6:	bf00      	nop
 80085e8:	20002fb0 	.word	0x20002fb0
 80085ec:	20000034 	.word	0x20000034

080085f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80085f0:	4b01      	ldr	r3, [pc, #4]	; (80085f8 <HAL_GetTick+0x8>)
 80085f2:	6818      	ldr	r0, [r3, #0]
}
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	20002fb0 	.word	0x20002fb0

080085fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80085fc:	b538      	push	{r3, r4, r5, lr}
 80085fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008600:	f7ff fff6 	bl	80085f0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008604:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8008606:	bf1c      	itt	ne
 8008608:	4b05      	ldrne	r3, [pc, #20]	; (8008620 <HAL_Delay+0x24>)
 800860a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 800860c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800860e:	bf18      	it	ne
 8008610:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008612:	f7ff ffed 	bl	80085f0 <HAL_GetTick>
 8008616:	1b43      	subs	r3, r0, r5
 8008618:	42a3      	cmp	r3, r4
 800861a:	d3fa      	bcc.n	8008612 <HAL_Delay+0x16>
  {
  }
}
 800861c:	bd38      	pop	{r3, r4, r5, pc}
 800861e:	bf00      	nop
 8008620:	20000034 	.word	0x20000034

08008624 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008624:	4907      	ldr	r1, [pc, #28]	; (8008644 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8008626:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008628:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800862c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800862e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008630:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008634:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800863c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8008640:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8008642:	4770      	bx	lr
 8008644:	e000ed00 	.word	0xe000ed00

08008648 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008648:	4b16      	ldr	r3, [pc, #88]	; (80086a4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800864a:	b530      	push	{r4, r5, lr}
 800864c:	68dc      	ldr	r4, [r3, #12]
 800864e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008652:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008656:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008658:	2d04      	cmp	r5, #4
 800865a:	bf28      	it	cs
 800865c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800865e:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008660:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008664:	bf8c      	ite	hi
 8008666:	3c03      	subhi	r4, #3
 8008668:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800866a:	fa03 f505 	lsl.w	r5, r3, r5
 800866e:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008672:	40a3      	lsls	r3, r4
 8008674:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008678:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 800867a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800867c:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008680:	bfac      	ite	ge
 8008682:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008686:	4a08      	ldrlt	r2, [pc, #32]	; (80086a8 <HAL_NVIC_SetPriority+0x60>)
 8008688:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800868c:	bfb8      	it	lt
 800868e:	f000 000f 	andlt.w	r0, r0, #15
 8008692:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008694:	bfaa      	itet	ge
 8008696:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800869a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800869c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80086a0:	bd30      	pop	{r4, r5, pc}
 80086a2:	bf00      	nop
 80086a4:	e000ed00 	.word	0xe000ed00
 80086a8:	e000ed14 	.word	0xe000ed14

080086ac <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80086ac:	2800      	cmp	r0, #0
 80086ae:	db08      	blt.n	80086c2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80086b0:	0942      	lsrs	r2, r0, #5
 80086b2:	2301      	movs	r3, #1
 80086b4:	f000 001f 	and.w	r0, r0, #31
 80086b8:	fa03 f000 	lsl.w	r0, r3, r0
 80086bc:	4b01      	ldr	r3, [pc, #4]	; (80086c4 <HAL_NVIC_EnableIRQ+0x18>)
 80086be:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80086c2:	4770      	bx	lr
 80086c4:	e000e100 	.word	0xe000e100

080086c8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80086c8:	3801      	subs	r0, #1
 80086ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80086ce:	d20a      	bcs.n	80086e6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80086d0:	4b06      	ldr	r3, [pc, #24]	; (80086ec <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086d2:	4a07      	ldr	r2, [pc, #28]	; (80086f0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80086d4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086d6:	21f0      	movs	r1, #240	; 0xf0
 80086d8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80086dc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80086de:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80086e0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80086e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80086e4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80086e6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	e000e010 	.word	0xe000e010
 80086f0:	e000ed00 	.word	0xe000ed00

080086f4 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80086f4:	4b04      	ldr	r3, [pc, #16]	; (8008708 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80086f6:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80086f8:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80086fa:	bf0c      	ite	eq
 80086fc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8008700:	f022 0204 	bicne.w	r2, r2, #4
 8008704:	601a      	str	r2, [r3, #0]
  }
}
 8008706:	4770      	bx	lr
 8008708:	e000e010 	.word	0xe000e010

0800870c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800870c:	4770      	bx	lr

0800870e <HAL_SYSTICK_IRQHandler>:
{
 800870e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8008710:	f7ff fffc 	bl	800870c <HAL_SYSTICK_Callback>
}
 8008714:	bd08      	pop	{r3, pc}
	...

08008718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800871c:	f8df 818c 	ldr.w	r8, [pc, #396]	; 80088ac <HAL_GPIO_Init+0x194>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008720:	4a60      	ldr	r2, [pc, #384]	; (80088a4 <HAL_GPIO_Init+0x18c>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008722:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8008724:	f04f 0901 	mov.w	r9, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008728:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 800872a:	fa09 f403 	lsl.w	r4, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800872e:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 8008732:	43ac      	bics	r4, r5
 8008734:	f040 80a6 	bne.w	8008884 <HAL_GPIO_Init+0x16c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008738:	684c      	ldr	r4, [r1, #4]
 800873a:	f024 0c10 	bic.w	ip, r4, #16
 800873e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8008742:	2503      	movs	r5, #3
 8008744:	f10c 37ff 	add.w	r7, ip, #4294967295
 8008748:	fa05 f50e 	lsl.w	r5, r5, lr
 800874c:	2f01      	cmp	r7, #1
 800874e:	ea6f 0505 	mvn.w	r5, r5
 8008752:	d811      	bhi.n	8008778 <HAL_GPIO_Init+0x60>
        temp = GPIOx->OSPEEDR; 
 8008754:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008756:	ea07 0a05 	and.w	sl, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800875a:	68cf      	ldr	r7, [r1, #12]
 800875c:	fa07 f70e 	lsl.w	r7, r7, lr
 8008760:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8008764:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8008766:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008768:	ea27 0a06 	bic.w	sl, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800876c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8008770:	409f      	lsls	r7, r3
 8008772:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8008776:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8008778:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800877a:	ea07 0a05 	and.w	sl, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800877e:	688f      	ldr	r7, [r1, #8]
 8008780:	fa07 f70e 	lsl.w	r7, r7, lr
 8008784:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008788:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 800878c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800878e:	d116      	bne.n	80087be <HAL_GPIO_Init+0xa6>
        temp = GPIOx->AFR[position >> 3U];
 8008790:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8008794:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008798:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800879c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80087a0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80087a4:	f04f 0c0f 	mov.w	ip, #15
 80087a8:	fa0c fc0b 	lsl.w	ip, ip, fp
 80087ac:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80087b0:	690f      	ldr	r7, [r1, #16]
 80087b2:	fa07 f70b 	lsl.w	r7, r7, fp
 80087b6:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80087ba:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80087be:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80087c0:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80087c2:	f004 0703 	and.w	r7, r4, #3
 80087c6:	fa07 fe0e 	lsl.w	lr, r7, lr
 80087ca:	ea4e 0505 	orr.w	r5, lr, r5
      GPIOx->MODER = temp;
 80087ce:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80087d0:	00e5      	lsls	r5, r4, #3
 80087d2:	d557      	bpl.n	8008884 <HAL_GPIO_Init+0x16c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087d4:	f04f 0b00 	mov.w	fp, #0
 80087d8:	f8cd b004 	str.w	fp, [sp, #4]
 80087dc:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80087e0:	4d31      	ldr	r5, [pc, #196]	; (80088a8 <HAL_GPIO_Init+0x190>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087e2:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80087e6:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80087ea:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80087ee:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80087f2:	9701      	str	r7, [sp, #4]
 80087f4:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80087f6:	f023 0703 	bic.w	r7, r3, #3
 80087fa:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80087fe:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008802:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8008806:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800880a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800880e:	f04f 0c0f 	mov.w	ip, #15
 8008812:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008816:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008818:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800881c:	d039      	beq.n	8008892 <HAL_GPIO_Init+0x17a>
 800881e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008822:	42a8      	cmp	r0, r5
 8008824:	d037      	beq.n	8008896 <HAL_GPIO_Init+0x17e>
 8008826:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800882a:	42a8      	cmp	r0, r5
 800882c:	d035      	beq.n	800889a <HAL_GPIO_Init+0x182>
 800882e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008832:	42a8      	cmp	r0, r5
 8008834:	d033      	beq.n	800889e <HAL_GPIO_Init+0x186>
 8008836:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800883a:	42a8      	cmp	r0, r5
 800883c:	bf0c      	ite	eq
 800883e:	2504      	moveq	r5, #4
 8008840:	2507      	movne	r5, #7
 8008842:	fa05 f50e 	lsl.w	r5, r5, lr
 8008846:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 800884a:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800884c:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800884e:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008850:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8008854:	bf0c      	ite	eq
 8008856:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8008858:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800885a:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800885c:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800885e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8008862:	bf0c      	ite	eq
 8008864:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8008866:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8008868:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800886a:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800886c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8008870:	bf0c      	ite	eq
 8008872:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8008874:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8008876:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8008878:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800887a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800887c:	bf54      	ite	pl
 800887e:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8008880:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8008882:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008884:	3301      	adds	r3, #1
 8008886:	2b10      	cmp	r3, #16
 8008888:	f47f af4e 	bne.w	8008728 <HAL_GPIO_Init+0x10>
      }
    }
  }
}
 800888c:	b003      	add	sp, #12
 800888e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008892:	465d      	mov	r5, fp
 8008894:	e7d5      	b.n	8008842 <HAL_GPIO_Init+0x12a>
 8008896:	2501      	movs	r5, #1
 8008898:	e7d3      	b.n	8008842 <HAL_GPIO_Init+0x12a>
 800889a:	2502      	movs	r5, #2
 800889c:	e7d1      	b.n	8008842 <HAL_GPIO_Init+0x12a>
 800889e:	2503      	movs	r5, #3
 80088a0:	e7cf      	b.n	8008842 <HAL_GPIO_Init+0x12a>
 80088a2:	bf00      	nop
 80088a4:	40013c00 	.word	0x40013c00
 80088a8:	40020000 	.word	0x40020000
 80088ac:	40023800 	.word	0x40023800

080088b0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80088b0:	6903      	ldr	r3, [r0, #16]
 80088b2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80088b4:	bf14      	ite	ne
 80088b6:	2001      	movne	r0, #1
 80088b8:	2000      	moveq	r0, #0
 80088ba:	4770      	bx	lr

080088bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80088bc:	b10a      	cbz	r2, 80088c2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80088be:	6181      	str	r1, [r0, #24]
  }
}
 80088c0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80088c2:	0409      	lsls	r1, r1, #16
 80088c4:	e7fb      	b.n	80088be <HAL_GPIO_WritePin+0x2>
	...

080088c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80088c8:	4a04      	ldr	r2, [pc, #16]	; (80088dc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80088ca:	6951      	ldr	r1, [r2, #20]
 80088cc:	4201      	tst	r1, r0
{
 80088ce:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80088d0:	d002      	beq.n	80088d8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80088d2:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80088d4:	f7f8 fb76 	bl	8000fc4 <HAL_GPIO_EXTI_Callback>
  }
}
 80088d8:	bd08      	pop	{r3, pc}
 80088da:	bf00      	nop
 80088dc:	40013c00 	.word	0x40013c00

080088e0 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80088e0:	6801      	ldr	r1, [r0, #0]
 80088e2:	694b      	ldr	r3, [r1, #20]
 80088e4:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80088e8:	f04f 0200 	mov.w	r2, #0
 80088ec:	d010      	beq.n	8008910 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088ee:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80088f2:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80088f4:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80088f6:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80088f8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088fc:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008900:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008902:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008906:	f043 0304 	orr.w	r3, r3, #4
 800890a:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 800890c:	2001      	movs	r0, #1
 800890e:	4770      	bx	lr
  }
  return HAL_OK;
 8008910:	4618      	mov	r0, r3
}
 8008912:	4770      	bx	lr

08008914 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8008914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008918:	4604      	mov	r4, r0
 800891a:	460f      	mov	r7, r1
 800891c:	4616      	mov	r6, r2
 800891e:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008920:	6825      	ldr	r5, [r4, #0]
 8008922:	6968      	ldr	r0, [r5, #20]
 8008924:	ea27 0000 	bic.w	r0, r7, r0
 8008928:	b280      	uxth	r0, r0
 800892a:	b1b8      	cbz	r0, 800895c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800892c:	696b      	ldr	r3, [r5, #20]
 800892e:	055a      	lsls	r2, r3, #21
 8008930:	d516      	bpl.n	8008960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008932:	682b      	ldr	r3, [r5, #0]
 8008934:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008938:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800893a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800893e:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8008940:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008942:	2300      	movs	r3, #0
 8008944:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008946:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800894a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800894e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008950:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008954:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008956:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800895a:	2001      	movs	r0, #1
}
 800895c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8008960:	1c73      	adds	r3, r6, #1
 8008962:	d0de      	beq.n	8008922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008964:	f7ff fe44 	bl	80085f0 <HAL_GetTick>
 8008968:	eba0 0008 	sub.w	r0, r0, r8
 800896c:	42b0      	cmp	r0, r6
 800896e:	d801      	bhi.n	8008974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 8008970:	2e00      	cmp	r6, #0
 8008972:	d1d5      	bne.n	8008920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008974:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8008976:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008978:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800897a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800897e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008982:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008984:	f042 0220 	orr.w	r2, r2, #32
 8008988:	e7e4      	b.n	8008954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

0800898a <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800898a:	b570      	push	{r4, r5, r6, lr}
 800898c:	4604      	mov	r4, r0
 800898e:	460d      	mov	r5, r1
 8008990:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008992:	6823      	ldr	r3, [r4, #0]
 8008994:	695b      	ldr	r3, [r3, #20]
 8008996:	075b      	lsls	r3, r3, #29
 8008998:	d501      	bpl.n	800899e <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800899a:	2000      	movs	r0, #0
}
 800899c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800899e:	4620      	mov	r0, r4
 80089a0:	f7ff ff9e 	bl	80088e0 <I2C_IsAcknowledgeFailed>
 80089a4:	b9a8      	cbnz	r0, 80089d2 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80089a6:	1c6a      	adds	r2, r5, #1
 80089a8:	d0f3      	beq.n	8008992 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089aa:	f7ff fe21 	bl	80085f0 <HAL_GetTick>
 80089ae:	1b80      	subs	r0, r0, r6
 80089b0:	42a8      	cmp	r0, r5
 80089b2:	d801      	bhi.n	80089b8 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80089b4:	2d00      	cmp	r5, #0
 80089b6:	d1ec      	bne.n	8008992 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80089b8:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80089ba:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80089bc:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80089be:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80089c2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80089c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80089c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80089cc:	f042 0220 	orr.w	r2, r2, #32
 80089d0:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80089d2:	2001      	movs	r0, #1
 80089d4:	e7e2      	b.n	800899c <I2C_WaitOnBTFFlagUntilTimeout+0x12>

080089d6 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80089d6:	b570      	push	{r4, r5, r6, lr}
 80089d8:	4604      	mov	r4, r0
 80089da:	460d      	mov	r5, r1
 80089dc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80089de:	6821      	ldr	r1, [r4, #0]
 80089e0:	694b      	ldr	r3, [r1, #20]
 80089e2:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80089e6:	d001      	beq.n	80089ec <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80089e8:	2000      	movs	r0, #0
 80089ea:	e010      	b.n	8008a0e <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80089ec:	694a      	ldr	r2, [r1, #20]
 80089ee:	06d2      	lsls	r2, r2, #27
 80089f0:	d50e      	bpl.n	8008a10 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80089f2:	f06f 0210 	mvn.w	r2, #16
 80089f6:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80089f8:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80089fa:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80089fc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a00:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008a04:	6c22      	ldr	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008a06:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008a08:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8008a0c:	2001      	movs	r0, #1
}
 8008a0e:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a10:	f7ff fdee 	bl	80085f0 <HAL_GetTick>
 8008a14:	1b80      	subs	r0, r0, r6
 8008a16:	42a8      	cmp	r0, r5
 8008a18:	d801      	bhi.n	8008a1e <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8008a1a:	2d00      	cmp	r5, #0
 8008a1c:	d1df      	bne.n	80089de <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008a1e:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8008a20:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008a22:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008a24:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008a28:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008a2c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008a2e:	f042 0220 	orr.w	r2, r2, #32
 8008a32:	e7e8      	b.n	8008a06 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08008a34 <I2C_WaitOnFlagUntilTimeout>:
{
 8008a34:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8008a38:	4606      	mov	r6, r0
 8008a3a:	460f      	mov	r7, r1
 8008a3c:	4691      	mov	r9, r2
 8008a3e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a40:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008a44:	6833      	ldr	r3, [r6, #0]
 8008a46:	f1ba 0f01 	cmp.w	sl, #1
 8008a4a:	bf0c      	ite	eq
 8008a4c:	695c      	ldreq	r4, [r3, #20]
 8008a4e:	699c      	ldrne	r4, [r3, #24]
 8008a50:	ea27 0404 	bic.w	r4, r7, r4
 8008a54:	b2a4      	uxth	r4, r4
 8008a56:	fab4 f484 	clz	r4, r4
 8008a5a:	0964      	lsrs	r4, r4, #5
 8008a5c:	45a1      	cmp	r9, r4
 8008a5e:	d001      	beq.n	8008a64 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8008a60:	2000      	movs	r0, #0
 8008a62:	e017      	b.n	8008a94 <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8008a64:	1c6a      	adds	r2, r5, #1
 8008a66:	d0ee      	beq.n	8008a46 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a68:	f7ff fdc2 	bl	80085f0 <HAL_GetTick>
 8008a6c:	9b08      	ldr	r3, [sp, #32]
 8008a6e:	1ac0      	subs	r0, r0, r3
 8008a70:	42a8      	cmp	r0, r5
 8008a72:	d801      	bhi.n	8008a78 <I2C_WaitOnFlagUntilTimeout+0x44>
 8008a74:	2d00      	cmp	r5, #0
 8008a76:	d1e5      	bne.n	8008a44 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008a78:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8008a7a:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008a7c:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008a7e:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008a82:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008a86:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008a88:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008a8c:	f042 0220 	orr.w	r2, r2, #32
 8008a90:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008a92:	2001      	movs	r0, #1
}
 8008a94:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08008a98 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8008a98:	b570      	push	{r4, r5, r6, lr}
 8008a9a:	4604      	mov	r4, r0
 8008a9c:	460d      	mov	r5, r1
 8008a9e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008aa0:	6823      	ldr	r3, [r4, #0]
 8008aa2:	695b      	ldr	r3, [r3, #20]
 8008aa4:	061b      	lsls	r3, r3, #24
 8008aa6:	d501      	bpl.n	8008aac <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8008aa8:	2000      	movs	r0, #0
}
 8008aaa:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008aac:	4620      	mov	r0, r4
 8008aae:	f7ff ff17 	bl	80088e0 <I2C_IsAcknowledgeFailed>
 8008ab2:	b9a8      	cbnz	r0, 8008ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8008ab4:	1c6a      	adds	r2, r5, #1
 8008ab6:	d0f3      	beq.n	8008aa0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ab8:	f7ff fd9a 	bl	80085f0 <HAL_GetTick>
 8008abc:	1b80      	subs	r0, r0, r6
 8008abe:	42a8      	cmp	r0, r5
 8008ac0:	d801      	bhi.n	8008ac6 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8008ac2:	2d00      	cmp	r5, #0
 8008ac4:	d1ec      	bne.n	8008aa0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008ac6:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8008ac8:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008aca:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008acc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008ad0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008ad4:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008ad6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008ada:	f042 0220 	orr.w	r2, r2, #32
 8008ade:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8008ae0:	2001      	movs	r0, #1
 8008ae2:	e7e2      	b.n	8008aaa <I2C_WaitOnTXEFlagUntilTimeout+0x12>

08008ae4 <HAL_I2C_Init>:
{
 8008ae4:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	b908      	cbnz	r0, 8008aee <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8008aea:	2001      	movs	r0, #1
}
 8008aec:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008aee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008af2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008af6:	b91b      	cbnz	r3, 8008b00 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8008af8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8008afc:	f7f8 fc4a 	bl	8001394 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008b00:	2324      	movs	r3, #36	; 0x24
 8008b02:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8008b06:	6823      	ldr	r3, [r4, #0]
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	f022 0201 	bic.w	r2, r2, #1
 8008b0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008b1e:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008b20:	f000 fd48 	bl	80095b4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008b24:	4a3f      	ldr	r2, [pc, #252]	; (8008c24 <HAL_I2C_Init+0x140>)
 8008b26:	6863      	ldr	r3, [r4, #4]
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	bf94      	ite	ls
 8008b2c:	4a3e      	ldrls	r2, [pc, #248]	; (8008c28 <HAL_I2C_Init+0x144>)
 8008b2e:	4a3f      	ldrhi	r2, [pc, #252]	; (8008c2c <HAL_I2C_Init+0x148>)
 8008b30:	4290      	cmp	r0, r2
 8008b32:	bf8c      	ite	hi
 8008b34:	2200      	movhi	r2, #0
 8008b36:	2201      	movls	r2, #1
 8008b38:	2a00      	cmp	r2, #0
 8008b3a:	d1d6      	bne.n	8008aea <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008b3c:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8008b3e:	4e3c      	ldr	r6, [pc, #240]	; (8008c30 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008b40:	684a      	ldr	r2, [r1, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8008b42:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008b46:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8008b4a:	4332      	orrs	r2, r6
 8008b4c:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008b4e:	4a35      	ldr	r2, [pc, #212]	; (8008c24 <HAL_I2C_Init+0x140>)
 8008b50:	6a0d      	ldr	r5, [r1, #32]
 8008b52:	4293      	cmp	r3, r2
 8008b54:	bf84      	itt	hi
 8008b56:	f44f 7296 	movhi.w	r2, #300	; 0x12c
 8008b5a:	4372      	mulhi	r2, r6
 8008b5c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8008b60:	bf91      	iteee	ls
 8008b62:	1c72      	addls	r2, r6, #1
 8008b64:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8008b68:	fbb2 f2f6 	udivhi	r2, r2, r6
 8008b6c:	3201      	addhi	r2, #1
 8008b6e:	432a      	orrs	r2, r5
 8008b70:	620a      	str	r2, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008b72:	69cd      	ldr	r5, [r1, #28]
 8008b74:	1e42      	subs	r2, r0, #1
 8008b76:	482b      	ldr	r0, [pc, #172]	; (8008c24 <HAL_I2C_Init+0x140>)
 8008b78:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 8008b7c:	4283      	cmp	r3, r0
 8008b7e:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8008b82:	d832      	bhi.n	8008bea <HAL_I2C_Init+0x106>
 8008b84:	005b      	lsls	r3, r3, #1
 8008b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b8a:	f640 72fc 	movw	r2, #4092	; 0xffc
 8008b8e:	3301      	adds	r3, #1
 8008b90:	4213      	tst	r3, r2
 8008b92:	d042      	beq.n	8008c1a <HAL_I2C_Init+0x136>
 8008b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b98:	432b      	orrs	r3, r5
 8008b9a:	61cb      	str	r3, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008b9c:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8008ba0:	680a      	ldr	r2, [r1, #0]
 8008ba2:	4303      	orrs	r3, r0
 8008ba4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008bac:	688a      	ldr	r2, [r1, #8]
 8008bae:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8008bb2:	f422 4203 	bic.w	r2, r2, #33536	; 0x8300
 8008bb6:	4303      	orrs	r3, r0
 8008bb8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008bc0:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8008bc4:	68ca      	ldr	r2, [r1, #12]
 8008bc6:	4303      	orrs	r3, r0
 8008bc8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8008bd0:	680b      	ldr	r3, [r1, #0]
 8008bd2:	f043 0301 	orr.w	r3, r3, #1
 8008bd6:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bd8:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8008bda:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bdc:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008bde:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008be2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008be4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8008be8:	e780      	b.n	8008aec <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008bea:	68a0      	ldr	r0, [r4, #8]
 8008bec:	b950      	cbnz	r0, 8008c04 <HAL_I2C_Init+0x120>
 8008bee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bfc:	b17b      	cbz	r3, 8008c1e <HAL_I2C_Init+0x13a>
 8008bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c02:	e7c9      	b.n	8008b98 <HAL_I2C_Init+0xb4>
 8008c04:	2019      	movs	r0, #25
 8008c06:	4343      	muls	r3, r0
 8008c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c12:	b123      	cbz	r3, 8008c1e <HAL_I2C_Init+0x13a>
 8008c14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c18:	e7be      	b.n	8008b98 <HAL_I2C_Init+0xb4>
 8008c1a:	2304      	movs	r3, #4
 8008c1c:	e7bc      	b.n	8008b98 <HAL_I2C_Init+0xb4>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e7ba      	b.n	8008b98 <HAL_I2C_Init+0xb4>
 8008c22:	bf00      	nop
 8008c24:	000186a0 	.word	0x000186a0
 8008c28:	001e847f 	.word	0x001e847f
 8008c2c:	003d08ff 	.word	0x003d08ff
 8008c30:	000f4240 	.word	0x000f4240

08008c34 <HAL_I2C_Master_Transmit>:
{
 8008c34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c38:	4604      	mov	r4, r0
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	4698      	mov	r8, r3
 8008c3e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8008c40:	460d      	mov	r5, r1
 8008c42:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 8008c44:	f7ff fcd4 	bl	80085f0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c48:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8008c4c:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8008c4e:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c50:	d004      	beq.n	8008c5c <HAL_I2C_Master_Transmit+0x28>
    return HAL_BUSY;
 8008c52:	2502      	movs	r5, #2
}
 8008c54:	4628      	mov	r0, r5
 8008c56:	b005      	add	sp, #20
 8008c58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008c5c:	9000      	str	r0, [sp, #0]
 8008c5e:	495d      	ldr	r1, [pc, #372]	; (8008dd4 <HAL_I2C_Master_Transmit+0x1a0>)
 8008c60:	2319      	movs	r3, #25
 8008c62:	2201      	movs	r2, #1
 8008c64:	4620      	mov	r0, r4
 8008c66:	f7ff fee5 	bl	8008a34 <I2C_WaitOnFlagUntilTimeout>
 8008c6a:	2800      	cmp	r0, #0
 8008c6c:	d1f1      	bne.n	8008c52 <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8008c6e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d0ed      	beq.n	8008c52 <HAL_I2C_Master_Transmit+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008c76:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 8008c78:	2301      	movs	r3, #1
 8008c7a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008c7e:	680b      	ldr	r3, [r1, #0]
 8008c80:	07da      	lsls	r2, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8008c82:	bf5e      	ittt	pl
 8008c84:	680b      	ldrpl	r3, [r1, #0]
 8008c86:	f043 0301 	orrpl.w	r3, r3, #1
 8008c8a:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008c8c:	680b      	ldr	r3, [r1, #0]
 8008c8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c92:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008c94:	2321      	movs	r3, #33	; 0x21
 8008c96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008c9a:	2310      	movs	r3, #16
 8008c9c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8008ca4:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008ca8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008caa:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008cac:	4b4a      	ldr	r3, [pc, #296]	; (8008dd8 <HAL_I2C_Master_Transmit+0x1a4>)
 8008cae:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008cb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8008cb2:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008cb6:	2b08      	cmp	r3, #8
 8008cb8:	d004      	beq.n	8008cc4 <HAL_I2C_Master_Transmit+0x90>
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d002      	beq.n	8008cc4 <HAL_I2C_Master_Transmit+0x90>
 8008cbe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008cc2:	d104      	bne.n	8008cce <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008cc4:	680b      	ldr	r3, [r1, #0]
 8008cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cca:	600b      	str	r3, [r1, #0]
 8008ccc:	e002      	b.n	8008cd4 <HAL_I2C_Master_Transmit+0xa0>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008cce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008cd0:	2b12      	cmp	r3, #18
 8008cd2:	d0f7      	beq.n	8008cc4 <HAL_I2C_Master_Transmit+0x90>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	9600      	str	r6, [sp, #0]
 8008cd8:	463b      	mov	r3, r7
 8008cda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008cde:	4620      	mov	r0, r4
 8008ce0:	f7ff fea8 	bl	8008a34 <I2C_WaitOnFlagUntilTimeout>
 8008ce4:	6822      	ldr	r2, [r4, #0]
 8008ce6:	b138      	cbz	r0, 8008cf8 <HAL_I2C_Master_Transmit+0xc4>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8008ce8:	6813      	ldr	r3, [r2, #0]
 8008cea:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008cec:	bf44      	itt	mi
 8008cee:	f44f 7300 	movmi.w	r3, #512	; 0x200
 8008cf2:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8008cf4:	2501      	movs	r5, #1
 8008cf6:	e7ad      	b.n	8008c54 <HAL_I2C_Master_Transmit+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008cf8:	6923      	ldr	r3, [r4, #16]
 8008cfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cfe:	d121      	bne.n	8008d44 <HAL_I2C_Master_Transmit+0x110>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008d00:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8008d04:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008d06:	4935      	ldr	r1, [pc, #212]	; (8008ddc <HAL_I2C_Master_Transmit+0x1a8>)
 8008d08:	4633      	mov	r3, r6
 8008d0a:	463a      	mov	r2, r7
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	f7ff fe01 	bl	8008914 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008d12:	4605      	mov	r5, r0
 8008d14:	2800      	cmp	r0, #0
 8008d16:	d1ed      	bne.n	8008cf4 <HAL_I2C_Master_Transmit+0xc0>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d18:	6823      	ldr	r3, [r4, #0]
 8008d1a:	9003      	str	r0, [sp, #12]
 8008d1c:	695a      	ldr	r2, [r3, #20]
 8008d1e:	9203      	str	r2, [sp, #12]
 8008d20:	699b      	ldr	r3, [r3, #24]
 8008d22:	9303      	str	r3, [sp, #12]
 8008d24:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8008d26:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008d28:	b9f3      	cbnz	r3, 8008d68 <HAL_I2C_Master_Transmit+0x134>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d2a:	6821      	ldr	r1, [r4, #0]
 8008d2c:	680a      	ldr	r2, [r1, #0]
 8008d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d32:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008d34:	2220      	movs	r2, #32
 8008d36:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8008d3a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d3e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8008d42:	e787      	b.n	8008c54 <HAL_I2C_Master_Transmit+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008d44:	11eb      	asrs	r3, r5, #7
 8008d46:	f003 0306 	and.w	r3, r3, #6
 8008d4a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8008d4e:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008d50:	4923      	ldr	r1, [pc, #140]	; (8008de0 <HAL_I2C_Master_Transmit+0x1ac>)
 8008d52:	4633      	mov	r3, r6
 8008d54:	463a      	mov	r2, r7
 8008d56:	4620      	mov	r0, r4
 8008d58:	f7ff fddc 	bl	8008914 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	d1c9      	bne.n	8008cf4 <HAL_I2C_Master_Transmit+0xc0>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008d60:	6823      	ldr	r3, [r4, #0]
 8008d62:	b2ed      	uxtb	r5, r5
 8008d64:	611d      	str	r5, [r3, #16]
 8008d66:	e7ce      	b.n	8008d06 <HAL_I2C_Master_Transmit+0xd2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d68:	4632      	mov	r2, r6
 8008d6a:	4639      	mov	r1, r7
 8008d6c:	4620      	mov	r0, r4
 8008d6e:	f7ff fe93 	bl	8008a98 <I2C_WaitOnTXEFlagUntilTimeout>
 8008d72:	b140      	cbz	r0, 8008d86 <HAL_I2C_Master_Transmit+0x152>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d76:	2b04      	cmp	r3, #4
 8008d78:	d1bc      	bne.n	8008cf4 <HAL_I2C_Master_Transmit+0xc0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d7a:	6822      	ldr	r2, [r4, #0]
 8008d7c:	6813      	ldr	r3, [r2, #0]
 8008d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d82:	6013      	str	r3, [r2, #0]
 8008d84:	e7b6      	b.n	8008cf4 <HAL_I2C_Master_Transmit+0xc0>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d88:	6820      	ldr	r0, [r4, #0]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008d90:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8008d92:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8008d94:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8008d96:	3a01      	subs	r2, #1
 8008d98:	b292      	uxth	r2, r2
 8008d9a:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8008d9c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008d9e:	f8d0 c014 	ldr.w	ip, [r0, #20]
      hi2c->XferSize--;
 8008da2:	1e51      	subs	r1, r2, #1
 8008da4:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008da6:	f01c 0f04 	tst.w	ip, #4
      hi2c->XferSize--;
 8008daa:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008dac:	d00a      	beq.n	8008dc4 <HAL_I2C_Master_Transmit+0x190>
 8008dae:	b149      	cbz	r1, 8008dc4 <HAL_I2C_Master_Transmit+0x190>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008db0:	7859      	ldrb	r1, [r3, #1]
 8008db2:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8008db4:	3302      	adds	r3, #2
 8008db6:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8008db8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008dba:	3b01      	subs	r3, #1
 8008dbc:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8008dbe:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8008dc0:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8008dc2:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008dc4:	4632      	mov	r2, r6
 8008dc6:	4639      	mov	r1, r7
 8008dc8:	4620      	mov	r0, r4
 8008dca:	f7ff fdde 	bl	800898a <I2C_WaitOnBTFFlagUntilTimeout>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d0a9      	beq.n	8008d26 <HAL_I2C_Master_Transmit+0xf2>
 8008dd2:	e7cf      	b.n	8008d74 <HAL_I2C_Master_Transmit+0x140>
 8008dd4:	00100002 	.word	0x00100002
 8008dd8:	ffff0000 	.word	0xffff0000
 8008ddc:	00010002 	.word	0x00010002
 8008de0:	00010008 	.word	0x00010008

08008de4 <HAL_I2C_Master_Receive>:
{
 8008de4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008de8:	4604      	mov	r4, r0
 8008dea:	b089      	sub	sp, #36	; 0x24
 8008dec:	4698      	mov	r8, r3
 8008dee:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8008df0:	460e      	mov	r6, r1
 8008df2:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 8008df4:	f7ff fbfc 	bl	80085f0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008df8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8008dfc:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8008dfe:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e00:	d004      	beq.n	8008e0c <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8008e02:	2602      	movs	r6, #2
}
 8008e04:	4630      	mov	r0, r6
 8008e06:	b009      	add	sp, #36	; 0x24
 8008e08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008e0c:	9000      	str	r0, [sp, #0]
 8008e0e:	499a      	ldr	r1, [pc, #616]	; (8009078 <HAL_I2C_Master_Receive+0x294>)
 8008e10:	2319      	movs	r3, #25
 8008e12:	2201      	movs	r2, #1
 8008e14:	4620      	mov	r0, r4
 8008e16:	f7ff fe0d 	bl	8008a34 <I2C_WaitOnFlagUntilTimeout>
 8008e1a:	2800      	cmp	r0, #0
 8008e1c:	d1f1      	bne.n	8008e02 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8008e1e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d0ed      	beq.n	8008e02 <HAL_I2C_Master_Receive+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008e26:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 8008e28:	2301      	movs	r3, #1
 8008e2a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008e2e:	680b      	ldr	r3, [r1, #0]
 8008e30:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8008e32:	bf5e      	ittt	pl
 8008e34:	680b      	ldrpl	r3, [r1, #0]
 8008e36:	f043 0301 	orrpl.w	r3, r3, #1
 8008e3a:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e3c:	680b      	ldr	r3, [r1, #0]
 8008e3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e42:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008e44:	2322      	movs	r3, #34	; 0x22
 8008e46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008e4a:	2310      	movs	r3, #16
 8008e4c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008e50:	2300      	movs	r3, #0
 8008e52:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8008e54:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008e58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008e5a:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008e5c:	4b87      	ldr	r3, [pc, #540]	; (800907c <HAL_I2C_Master_Receive+0x298>)
 8008e5e:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008e60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e62:	680a      	ldr	r2, [r1, #0]
    hi2c->pBuffPtr    = pData;
 8008e64:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008e6c:	2b08      	cmp	r3, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e6e:	600a      	str	r2, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008e70:	d004      	beq.n	8008e7c <HAL_I2C_Master_Receive+0x98>
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d002      	beq.n	8008e7c <HAL_I2C_Master_Receive+0x98>
 8008e76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008e7a:	d104      	bne.n	8008e86 <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008e7c:	680b      	ldr	r3, [r1, #0]
 8008e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e82:	600b      	str	r3, [r1, #0]
 8008e84:	e002      	b.n	8008e8c <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008e86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008e88:	2b11      	cmp	r3, #17
 8008e8a:	d0f7      	beq.n	8008e7c <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008e8c:	463b      	mov	r3, r7
 8008e8e:	9500      	str	r5, [sp, #0]
 8008e90:	2200      	movs	r2, #0
 8008e92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008e96:	4620      	mov	r0, r4
 8008e98:	f7ff fdcc 	bl	8008a34 <I2C_WaitOnFlagUntilTimeout>
 8008e9c:	6823      	ldr	r3, [r4, #0]
 8008e9e:	b138      	cbz	r0, 8008eb0 <HAL_I2C_Master_Receive+0xcc>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8008ea0:	681b      	ldr	r3, [r3, #0]
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8008ea2:	05d8      	lsls	r0, r3, #23
 8008ea4:	d502      	bpl.n	8008eac <HAL_I2C_Master_Receive+0xc8>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008ea6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008eaa:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8008eac:	2601      	movs	r6, #1
 8008eae:	e7a9      	b.n	8008e04 <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008eb0:	6922      	ldr	r2, [r4, #16]
 8008eb2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8008eb6:	d127      	bne.n	8008f08 <HAL_I2C_Master_Receive+0x124>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008eb8:	f046 0601 	orr.w	r6, r6, #1
 8008ebc:	b2f6      	uxtb	r6, r6
 8008ebe:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008ec0:	496f      	ldr	r1, [pc, #444]	; (8009080 <HAL_I2C_Master_Receive+0x29c>)
 8008ec2:	462b      	mov	r3, r5
 8008ec4:	463a      	mov	r2, r7
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	f7ff fd24 	bl	8008914 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ecc:	4606      	mov	r6, r0
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	d1ec      	bne.n	8008eac <HAL_I2C_Master_Receive+0xc8>
    if (hi2c->XferSize == 0U)
 8008ed2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008ed4:	6823      	ldr	r3, [r4, #0]
 8008ed6:	2a00      	cmp	r2, #0
 8008ed8:	d14b      	bne.n	8008f72 <HAL_I2C_Master_Receive+0x18e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008eda:	9003      	str	r0, [sp, #12]
 8008edc:	695a      	ldr	r2, [r3, #20]
 8008ede:	9203      	str	r2, [sp, #12]
 8008ee0:	699a      	ldr	r2, [r3, #24]
 8008ee2:	9203      	str	r2, [sp, #12]
 8008ee4:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008eec:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008eee:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8009088 <HAL_I2C_Master_Receive+0x2a4>
    while (hi2c->XferSize > 0U)
 8008ef2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d164      	bne.n	8008fc2 <HAL_I2C_Master_Receive+0x1de>
    hi2c->State = HAL_I2C_STATE_READY;
 8008ef8:	2220      	movs	r2, #32
 8008efa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8008efe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f02:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8008f06:	e77d      	b.n	8008e04 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008f08:	ea4f 18e6 	mov.w	r8, r6, asr #7
 8008f0c:	f008 0806 	and.w	r8, r8, #6
 8008f10:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8008f14:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008f16:	495b      	ldr	r1, [pc, #364]	; (8009084 <HAL_I2C_Master_Receive+0x2a0>)
 8008f18:	462b      	mov	r3, r5
 8008f1a:	463a      	mov	r2, r7
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	f7ff fcf9 	bl	8008914 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f22:	2800      	cmp	r0, #0
 8008f24:	d1c2      	bne.n	8008eac <HAL_I2C_Master_Receive+0xc8>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008f26:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008f28:	4955      	ldr	r1, [pc, #340]	; (8009080 <HAL_I2C_Master_Receive+0x29c>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008f2a:	b2f6      	uxtb	r6, r6
 8008f2c:	611e      	str	r6, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008f2e:	463a      	mov	r2, r7
 8008f30:	462b      	mov	r3, r5
 8008f32:	4620      	mov	r0, r4
 8008f34:	f7ff fcee 	bl	8008914 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	d1b7      	bne.n	8008eac <HAL_I2C_Master_Receive+0xc8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f3c:	6823      	ldr	r3, [r4, #0]
 8008f3e:	9007      	str	r0, [sp, #28]
 8008f40:	695a      	ldr	r2, [r3, #20]
 8008f42:	9207      	str	r2, [sp, #28]
 8008f44:	699a      	ldr	r2, [r3, #24]
 8008f46:	9207      	str	r2, [sp, #28]
 8008f48:	9a07      	ldr	r2, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f50:	601a      	str	r2, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008f52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008f56:	4602      	mov	r2, r0
 8008f58:	9500      	str	r5, [sp, #0]
 8008f5a:	463b      	mov	r3, r7
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	f7ff fd69 	bl	8008a34 <I2C_WaitOnFlagUntilTimeout>
 8008f62:	6822      	ldr	r2, [r4, #0]
 8008f64:	b108      	cbz	r0, 8008f6a <HAL_I2C_Master_Receive+0x186>
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8008f66:	6813      	ldr	r3, [r2, #0]
 8008f68:	e79b      	b.n	8008ea2 <HAL_I2C_Master_Receive+0xbe>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008f6a:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8008f6e:	6113      	str	r3, [r2, #16]
 8008f70:	e7a6      	b.n	8008ec0 <HAL_I2C_Master_Receive+0xdc>
    else if (hi2c->XferSize == 1U)
 8008f72:	2a01      	cmp	r2, #1
 8008f74:	d10a      	bne.n	8008f8c <HAL_I2C_Master_Receive+0x1a8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f7c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f7e:	9004      	str	r0, [sp, #16]
 8008f80:	695a      	ldr	r2, [r3, #20]
 8008f82:	9204      	str	r2, [sp, #16]
 8008f84:	699a      	ldr	r2, [r3, #24]
 8008f86:	9204      	str	r2, [sp, #16]
 8008f88:	9a04      	ldr	r2, [sp, #16]
 8008f8a:	e7ac      	b.n	8008ee6 <HAL_I2C_Master_Receive+0x102>
    else if (hi2c->XferSize == 2U)
 8008f8c:	2a02      	cmp	r2, #2
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f8e:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8008f90:	d10d      	bne.n	8008fae <HAL_I2C_Master_Receive+0x1ca>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f96:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f9e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fa0:	9005      	str	r0, [sp, #20]
 8008fa2:	695a      	ldr	r2, [r3, #20]
 8008fa4:	9205      	str	r2, [sp, #20]
 8008fa6:	699b      	ldr	r3, [r3, #24]
 8008fa8:	9305      	str	r3, [sp, #20]
 8008faa:	9b05      	ldr	r3, [sp, #20]
 8008fac:	e79f      	b.n	8008eee <HAL_I2C_Master_Receive+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008fb2:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fb4:	9006      	str	r0, [sp, #24]
 8008fb6:	695a      	ldr	r2, [r3, #20]
 8008fb8:	9206      	str	r2, [sp, #24]
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	9306      	str	r3, [sp, #24]
 8008fbe:	9b06      	ldr	r3, [sp, #24]
 8008fc0:	e795      	b.n	8008eee <HAL_I2C_Master_Receive+0x10a>
      if (hi2c->XferSize <= 3U)
 8008fc2:	2b03      	cmp	r3, #3
 8008fc4:	d862      	bhi.n	800908c <HAL_I2C_Master_Receive+0x2a8>
        if (hi2c->XferSize == 1U)
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d116      	bne.n	8008ff8 <HAL_I2C_Master_Receive+0x214>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fca:	462a      	mov	r2, r5
 8008fcc:	4639      	mov	r1, r7
 8008fce:	4620      	mov	r0, r4
 8008fd0:	f7ff fd01 	bl	80089d6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	f47f af69 	bne.w	8008eac <HAL_I2C_Master_Receive+0xc8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fda:	6823      	ldr	r3, [r4, #0]
 8008fdc:	691a      	ldr	r2, [r3, #16]
 8008fde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fe0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8008fe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8008fe8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008fea:	3b01      	subs	r3, #1
 8008fec:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8008fee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	8563      	strh	r3, [r4, #42]	; 0x2a
 8008ff6:	e77c      	b.n	8008ef2 <HAL_I2C_Master_Receive+0x10e>
        else if (hi2c->XferSize == 2U)
 8008ff8:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008ffa:	9500      	str	r5, [sp, #0]
 8008ffc:	463b      	mov	r3, r7
 8008ffe:	f04f 0200 	mov.w	r2, #0
 8009002:	4641      	mov	r1, r8
 8009004:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8009006:	d11a      	bne.n	800903e <HAL_I2C_Master_Receive+0x25a>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009008:	f7ff fd14 	bl	8008a34 <I2C_WaitOnFlagUntilTimeout>
 800900c:	2800      	cmp	r0, #0
 800900e:	f47f af4d 	bne.w	8008eac <HAL_I2C_Master_Receive+0xc8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009012:	6823      	ldr	r3, [r4, #0]
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800901a:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800901c:	691a      	ldr	r2, [r3, #16]
 800901e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009020:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8009022:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009024:	1c53      	adds	r3, r2, #1
 8009026:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8009028:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800902a:	3b01      	subs	r3, #1
 800902c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800902e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009030:	3b01      	subs	r3, #1
 8009032:	b29b      	uxth	r3, r3
 8009034:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009036:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	7053      	strb	r3, [r2, #1]
 800903c:	e7d1      	b.n	8008fe2 <HAL_I2C_Master_Receive+0x1fe>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800903e:	f7ff fcf9 	bl	8008a34 <I2C_WaitOnFlagUntilTimeout>
 8009042:	2800      	cmp	r0, #0
 8009044:	f47f af32 	bne.w	8008eac <HAL_I2C_Master_Receive+0xc8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009048:	6823      	ldr	r3, [r4, #0]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009050:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009052:	691a      	ldr	r2, [r3, #16]
 8009054:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009056:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8009058:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800905a:	9500      	str	r5, [sp, #0]
          hi2c->pBuffPtr++;
 800905c:	3301      	adds	r3, #1
 800905e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8009060:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009062:	3b01      	subs	r3, #1
 8009064:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8009066:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009068:	3b01      	subs	r3, #1
 800906a:	b29b      	uxth	r3, r3
 800906c:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800906e:	4602      	mov	r2, r0
 8009070:	463b      	mov	r3, r7
 8009072:	4641      	mov	r1, r8
 8009074:	4620      	mov	r0, r4
 8009076:	e7c7      	b.n	8009008 <HAL_I2C_Master_Receive+0x224>
 8009078:	00100002 	.word	0x00100002
 800907c:	ffff0000 	.word	0xffff0000
 8009080:	00010002 	.word	0x00010002
 8009084:	00010008 	.word	0x00010008
 8009088:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800908c:	462a      	mov	r2, r5
 800908e:	4639      	mov	r1, r7
 8009090:	4620      	mov	r0, r4
 8009092:	f7ff fca0 	bl	80089d6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009096:	2800      	cmp	r0, #0
 8009098:	f47f af08 	bne.w	8008eac <HAL_I2C_Master_Receive+0xc8>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	691a      	ldr	r2, [r3, #16]
 80090a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090a2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80090a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80090a6:	1c53      	adds	r3, r2, #1
 80090a8:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80090aa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80090ac:	3b01      	subs	r3, #1
 80090ae:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80090b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80090b2:	3b01      	subs	r3, #1
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80090b8:	6823      	ldr	r3, [r4, #0]
 80090ba:	6959      	ldr	r1, [r3, #20]
 80090bc:	0749      	lsls	r1, r1, #29
 80090be:	f57f af18 	bpl.w	8008ef2 <HAL_I2C_Master_Receive+0x10e>
 80090c2:	e7b9      	b.n	8009038 <HAL_I2C_Master_Receive+0x254>

080090c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80090c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80090c8:	4604      	mov	r4, r0
 80090ca:	b340      	cbz	r0, 800911e <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80090cc:	6803      	ldr	r3, [r0, #0]
 80090ce:	07dd      	lsls	r5, r3, #31
 80090d0:	d410      	bmi.n	80090f4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80090d2:	6823      	ldr	r3, [r4, #0]
 80090d4:	0798      	lsls	r0, r3, #30
 80090d6:	d45e      	bmi.n	8009196 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80090d8:	6823      	ldr	r3, [r4, #0]
 80090da:	071a      	lsls	r2, r3, #28
 80090dc:	f100 80a0 	bmi.w	8009220 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80090e0:	6823      	ldr	r3, [r4, #0]
 80090e2:	075b      	lsls	r3, r3, #29
 80090e4:	f100 80be 	bmi.w	8009264 <HAL_RCC_OscConfig+0x1a0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80090e8:	69a0      	ldr	r0, [r4, #24]
 80090ea:	2800      	cmp	r0, #0
 80090ec:	f040 811f 	bne.w	800932e <HAL_RCC_OscConfig+0x26a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80090f0:	2000      	movs	r0, #0
 80090f2:	e02b      	b.n	800914c <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80090f4:	4ba6      	ldr	r3, [pc, #664]	; (8009390 <HAL_RCC_OscConfig+0x2cc>)
 80090f6:	689a      	ldr	r2, [r3, #8]
 80090f8:	f002 020c 	and.w	r2, r2, #12
 80090fc:	2a04      	cmp	r2, #4
 80090fe:	d007      	beq.n	8009110 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009100:	689a      	ldr	r2, [r3, #8]
 8009102:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009106:	2a08      	cmp	r2, #8
 8009108:	d10b      	bne.n	8009122 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800910a:	685a      	ldr	r2, [r3, #4]
 800910c:	0251      	lsls	r1, r2, #9
 800910e:	d508      	bpl.n	8009122 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009110:	4b9f      	ldr	r3, [pc, #636]	; (8009390 <HAL_RCC_OscConfig+0x2cc>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	039a      	lsls	r2, r3, #14
 8009116:	d5dc      	bpl.n	80090d2 <HAL_RCC_OscConfig+0xe>
 8009118:	6863      	ldr	r3, [r4, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d1d9      	bne.n	80090d2 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 800911e:	2001      	movs	r0, #1
 8009120:	e014      	b.n	800914c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009122:	6862      	ldr	r2, [r4, #4]
 8009124:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009128:	d113      	bne.n	8009152 <HAL_RCC_OscConfig+0x8e>
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009130:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009132:	f7ff fa5d 	bl	80085f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009136:	4e96      	ldr	r6, [pc, #600]	; (8009390 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8009138:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800913a:	6833      	ldr	r3, [r6, #0]
 800913c:	039b      	lsls	r3, r3, #14
 800913e:	d4c8      	bmi.n	80090d2 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009140:	f7ff fa56 	bl	80085f0 <HAL_GetTick>
 8009144:	1b40      	subs	r0, r0, r5
 8009146:	2864      	cmp	r0, #100	; 0x64
 8009148:	d9f7      	bls.n	800913a <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 800914a:	2003      	movs	r0, #3
}
 800914c:	b002      	add	sp, #8
 800914e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009152:	4d8f      	ldr	r5, [pc, #572]	; (8009390 <HAL_RCC_OscConfig+0x2cc>)
 8009154:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8009158:	682b      	ldr	r3, [r5, #0]
 800915a:	d107      	bne.n	800916c <HAL_RCC_OscConfig+0xa8>
 800915c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009160:	602b      	str	r3, [r5, #0]
 8009162:	682b      	ldr	r3, [r5, #0]
 8009164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009168:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800916a:	e7e2      	b.n	8009132 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800916c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009170:	602b      	str	r3, [r5, #0]
 8009172:	682b      	ldr	r3, [r5, #0]
 8009174:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009178:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800917a:	2a00      	cmp	r2, #0
 800917c:	d1d9      	bne.n	8009132 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 800917e:	f7ff fa37 	bl	80085f0 <HAL_GetTick>
 8009182:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009184:	682b      	ldr	r3, [r5, #0]
 8009186:	039f      	lsls	r7, r3, #14
 8009188:	d5a3      	bpl.n	80090d2 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800918a:	f7ff fa31 	bl	80085f0 <HAL_GetTick>
 800918e:	1b80      	subs	r0, r0, r6
 8009190:	2864      	cmp	r0, #100	; 0x64
 8009192:	d9f7      	bls.n	8009184 <HAL_RCC_OscConfig+0xc0>
 8009194:	e7d9      	b.n	800914a <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009196:	4b7e      	ldr	r3, [pc, #504]	; (8009390 <HAL_RCC_OscConfig+0x2cc>)
 8009198:	689a      	ldr	r2, [r3, #8]
 800919a:	f012 0f0c 	tst.w	r2, #12
 800919e:	d007      	beq.n	80091b0 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80091a0:	689a      	ldr	r2, [r3, #8]
 80091a2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80091a6:	2a08      	cmp	r2, #8
 80091a8:	d111      	bne.n	80091ce <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	025e      	lsls	r6, r3, #9
 80091ae:	d40e      	bmi.n	80091ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80091b0:	4b77      	ldr	r3, [pc, #476]	; (8009390 <HAL_RCC_OscConfig+0x2cc>)
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	0795      	lsls	r5, r2, #30
 80091b6:	d502      	bpl.n	80091be <HAL_RCC_OscConfig+0xfa>
 80091b8:	68e2      	ldr	r2, [r4, #12]
 80091ba:	2a01      	cmp	r2, #1
 80091bc:	d1af      	bne.n	800911e <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	6921      	ldr	r1, [r4, #16]
 80091c2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80091c6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80091ca:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80091cc:	e784      	b.n	80090d8 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80091ce:	68e2      	ldr	r2, [r4, #12]
 80091d0:	4b70      	ldr	r3, [pc, #448]	; (8009394 <HAL_RCC_OscConfig+0x2d0>)
 80091d2:	b1b2      	cbz	r2, 8009202 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 80091d4:	2201      	movs	r2, #1
 80091d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80091d8:	f7ff fa0a 	bl	80085f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091dc:	4d6c      	ldr	r5, [pc, #432]	; (8009390 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 80091de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091e0:	682b      	ldr	r3, [r5, #0]
 80091e2:	0798      	lsls	r0, r3, #30
 80091e4:	d507      	bpl.n	80091f6 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091e6:	682b      	ldr	r3, [r5, #0]
 80091e8:	6922      	ldr	r2, [r4, #16]
 80091ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80091ee:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80091f2:	602b      	str	r3, [r5, #0]
 80091f4:	e770      	b.n	80090d8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80091f6:	f7ff f9fb 	bl	80085f0 <HAL_GetTick>
 80091fa:	1b80      	subs	r0, r0, r6
 80091fc:	2802      	cmp	r0, #2
 80091fe:	d9ef      	bls.n	80091e0 <HAL_RCC_OscConfig+0x11c>
 8009200:	e7a3      	b.n	800914a <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8009202:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009204:	f7ff f9f4 	bl	80085f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009208:	4e61      	ldr	r6, [pc, #388]	; (8009390 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 800920a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800920c:	6833      	ldr	r3, [r6, #0]
 800920e:	0799      	lsls	r1, r3, #30
 8009210:	f57f af62 	bpl.w	80090d8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009214:	f7ff f9ec 	bl	80085f0 <HAL_GetTick>
 8009218:	1b40      	subs	r0, r0, r5
 800921a:	2802      	cmp	r0, #2
 800921c:	d9f6      	bls.n	800920c <HAL_RCC_OscConfig+0x148>
 800921e:	e794      	b.n	800914a <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009220:	6962      	ldr	r2, [r4, #20]
 8009222:	4b5d      	ldr	r3, [pc, #372]	; (8009398 <HAL_RCC_OscConfig+0x2d4>)
 8009224:	b17a      	cbz	r2, 8009246 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_ENABLE();
 8009226:	2201      	movs	r2, #1
 8009228:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800922a:	f7ff f9e1 	bl	80085f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800922e:	4e58      	ldr	r6, [pc, #352]	; (8009390 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8009230:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009232:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8009234:	079f      	lsls	r7, r3, #30
 8009236:	f53f af53 	bmi.w	80090e0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800923a:	f7ff f9d9 	bl	80085f0 <HAL_GetTick>
 800923e:	1b40      	subs	r0, r0, r5
 8009240:	2802      	cmp	r0, #2
 8009242:	d9f6      	bls.n	8009232 <HAL_RCC_OscConfig+0x16e>
 8009244:	e781      	b.n	800914a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8009246:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8009248:	f7ff f9d2 	bl	80085f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800924c:	4e50      	ldr	r6, [pc, #320]	; (8009390 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 800924e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009250:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8009252:	0798      	lsls	r0, r3, #30
 8009254:	f57f af44 	bpl.w	80090e0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009258:	f7ff f9ca 	bl	80085f0 <HAL_GetTick>
 800925c:	1b40      	subs	r0, r0, r5
 800925e:	2802      	cmp	r0, #2
 8009260:	d9f6      	bls.n	8009250 <HAL_RCC_OscConfig+0x18c>
 8009262:	e772      	b.n	800914a <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009264:	4b4a      	ldr	r3, [pc, #296]	; (8009390 <HAL_RCC_OscConfig+0x2cc>)
 8009266:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009268:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800926c:	d128      	bne.n	80092c0 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 800926e:	9201      	str	r2, [sp, #4]
 8009270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009272:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009276:	641a      	str	r2, [r3, #64]	; 0x40
 8009278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800927a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800927e:	9301      	str	r3, [sp, #4]
 8009280:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8009282:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009284:	4d45      	ldr	r5, [pc, #276]	; (800939c <HAL_RCC_OscConfig+0x2d8>)
 8009286:	682b      	ldr	r3, [r5, #0]
 8009288:	05d9      	lsls	r1, r3, #23
 800928a:	d51b      	bpl.n	80092c4 <HAL_RCC_OscConfig+0x200>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800928c:	68a3      	ldr	r3, [r4, #8]
 800928e:	4d40      	ldr	r5, [pc, #256]	; (8009390 <HAL_RCC_OscConfig+0x2cc>)
 8009290:	2b01      	cmp	r3, #1
 8009292:	d127      	bne.n	80092e4 <HAL_RCC_OscConfig+0x220>
 8009294:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009296:	f043 0301 	orr.w	r3, r3, #1
 800929a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800929c:	f7ff f9a8 	bl	80085f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092a0:	4e3b      	ldr	r6, [pc, #236]	; (8009390 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 80092a2:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092a4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092a8:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80092aa:	079b      	lsls	r3, r3, #30
 80092ac:	d539      	bpl.n	8009322 <HAL_RCC_OscConfig+0x25e>
    if(pwrclkchanged == SET)
 80092ae:	2f00      	cmp	r7, #0
 80092b0:	f43f af1a 	beq.w	80090e8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80092b4:	4a36      	ldr	r2, [pc, #216]	; (8009390 <HAL_RCC_OscConfig+0x2cc>)
 80092b6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80092b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092bc:	6413      	str	r3, [r2, #64]	; 0x40
 80092be:	e713      	b.n	80090e8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80092c0:	2700      	movs	r7, #0
 80092c2:	e7df      	b.n	8009284 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80092c4:	682b      	ldr	r3, [r5, #0]
 80092c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092ca:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80092cc:	f7ff f990 	bl	80085f0 <HAL_GetTick>
 80092d0:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092d2:	682b      	ldr	r3, [r5, #0]
 80092d4:	05da      	lsls	r2, r3, #23
 80092d6:	d4d9      	bmi.n	800928c <HAL_RCC_OscConfig+0x1c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092d8:	f7ff f98a 	bl	80085f0 <HAL_GetTick>
 80092dc:	1b80      	subs	r0, r0, r6
 80092de:	2802      	cmp	r0, #2
 80092e0:	d9f7      	bls.n	80092d2 <HAL_RCC_OscConfig+0x20e>
 80092e2:	e732      	b.n	800914a <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80092e4:	2b05      	cmp	r3, #5
 80092e6:	d104      	bne.n	80092f2 <HAL_RCC_OscConfig+0x22e>
 80092e8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80092ea:	f043 0304 	orr.w	r3, r3, #4
 80092ee:	672b      	str	r3, [r5, #112]	; 0x70
 80092f0:	e7d0      	b.n	8009294 <HAL_RCC_OscConfig+0x1d0>
 80092f2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80092f4:	f022 0201 	bic.w	r2, r2, #1
 80092f8:	672a      	str	r2, [r5, #112]	; 0x70
 80092fa:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80092fc:	f022 0204 	bic.w	r2, r2, #4
 8009300:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009302:	2b00      	cmp	r3, #0
 8009304:	d1ca      	bne.n	800929c <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
 8009306:	f7ff f973 	bl	80085f0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800930a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800930e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009310:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009312:	0798      	lsls	r0, r3, #30
 8009314:	d5cb      	bpl.n	80092ae <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009316:	f7ff f96b 	bl	80085f0 <HAL_GetTick>
 800931a:	1b80      	subs	r0, r0, r6
 800931c:	4540      	cmp	r0, r8
 800931e:	d9f7      	bls.n	8009310 <HAL_RCC_OscConfig+0x24c>
 8009320:	e713      	b.n	800914a <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009322:	f7ff f965 	bl	80085f0 <HAL_GetTick>
 8009326:	1b40      	subs	r0, r0, r5
 8009328:	4540      	cmp	r0, r8
 800932a:	d9bd      	bls.n	80092a8 <HAL_RCC_OscConfig+0x1e4>
 800932c:	e70d      	b.n	800914a <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800932e:	4d18      	ldr	r5, [pc, #96]	; (8009390 <HAL_RCC_OscConfig+0x2cc>)
 8009330:	68ab      	ldr	r3, [r5, #8]
 8009332:	f003 030c 	and.w	r3, r3, #12
 8009336:	2b08      	cmp	r3, #8
 8009338:	d047      	beq.n	80093ca <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800933a:	4e19      	ldr	r6, [pc, #100]	; (80093a0 <HAL_RCC_OscConfig+0x2dc>)
 800933c:	2300      	movs	r3, #0
 800933e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8009340:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009342:	d135      	bne.n	80093b0 <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 8009344:	f7ff f954 	bl	80085f0 <HAL_GetTick>
 8009348:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800934a:	682b      	ldr	r3, [r5, #0]
 800934c:	0199      	lsls	r1, r3, #6
 800934e:	d429      	bmi.n	80093a4 <HAL_RCC_OscConfig+0x2e0>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009350:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8009354:	4313      	orrs	r3, r2
 8009356:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009358:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800935c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800935e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009362:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009364:	0852      	lsrs	r2, r2, #1
 8009366:	3a01      	subs	r2, #1
 8009368:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800936c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800936e:	2301      	movs	r3, #1
 8009370:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8009372:	f7ff f93d 	bl	80085f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009376:	4d06      	ldr	r5, [pc, #24]	; (8009390 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8009378:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800937a:	682b      	ldr	r3, [r5, #0]
 800937c:	019a      	lsls	r2, r3, #6
 800937e:	f53f aeb7 	bmi.w	80090f0 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009382:	f7ff f935 	bl	80085f0 <HAL_GetTick>
 8009386:	1b00      	subs	r0, r0, r4
 8009388:	2802      	cmp	r0, #2
 800938a:	d9f6      	bls.n	800937a <HAL_RCC_OscConfig+0x2b6>
 800938c:	e6dd      	b.n	800914a <HAL_RCC_OscConfig+0x86>
 800938e:	bf00      	nop
 8009390:	40023800 	.word	0x40023800
 8009394:	42470000 	.word	0x42470000
 8009398:	42470e80 	.word	0x42470e80
 800939c:	40007000 	.word	0x40007000
 80093a0:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093a4:	f7ff f924 	bl	80085f0 <HAL_GetTick>
 80093a8:	1bc0      	subs	r0, r0, r7
 80093aa:	2802      	cmp	r0, #2
 80093ac:	d9cd      	bls.n	800934a <HAL_RCC_OscConfig+0x286>
 80093ae:	e6cc      	b.n	800914a <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 80093b0:	f7ff f91e 	bl	80085f0 <HAL_GetTick>
 80093b4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093b6:	682b      	ldr	r3, [r5, #0]
 80093b8:	019b      	lsls	r3, r3, #6
 80093ba:	f57f ae99 	bpl.w	80090f0 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093be:	f7ff f917 	bl	80085f0 <HAL_GetTick>
 80093c2:	1b00      	subs	r0, r0, r4
 80093c4:	2802      	cmp	r0, #2
 80093c6:	d9f6      	bls.n	80093b6 <HAL_RCC_OscConfig+0x2f2>
 80093c8:	e6bf      	b.n	800914a <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80093ca:	2801      	cmp	r0, #1
 80093cc:	f43f aebe 	beq.w	800914c <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 80093d0:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093d2:	69e2      	ldr	r2, [r4, #28]
 80093d4:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80093d8:	4291      	cmp	r1, r2
 80093da:	f47f aea0 	bne.w	800911e <HAL_RCC_OscConfig+0x5a>
 80093de:	6a21      	ldr	r1, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80093e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093e4:	428a      	cmp	r2, r1
 80093e6:	f47f ae9a 	bne.w	800911e <HAL_RCC_OscConfig+0x5a>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80093ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80093ec:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80093f0:	401a      	ands	r2, r3
 80093f2:	428a      	cmp	r2, r1
 80093f4:	f47f ae93 	bne.w	800911e <HAL_RCC_OscConfig+0x5a>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80093f8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80093fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80093fe:	428a      	cmp	r2, r1
 8009400:	f47f ae8d 	bne.w	800911e <HAL_RCC_OscConfig+0x5a>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009404:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8009406:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800940a:	4293      	cmp	r3, r2
 800940c:	f43f ae70 	beq.w	80090f0 <HAL_RCC_OscConfig+0x2c>
 8009410:	e685      	b.n	800911e <HAL_RCC_OscConfig+0x5a>
 8009412:	bf00      	nop

08009414 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009414:	4913      	ldr	r1, [pc, #76]	; (8009464 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8009416:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009418:	688b      	ldr	r3, [r1, #8]
 800941a:	f003 030c 	and.w	r3, r3, #12
 800941e:	2b04      	cmp	r3, #4
 8009420:	d01c      	beq.n	800945c <HAL_RCC_GetSysClockFreq+0x48>
 8009422:	2b08      	cmp	r3, #8
 8009424:	d11c      	bne.n	8009460 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009426:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009428:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800942a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800942c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009430:	bf14      	ite	ne
 8009432:	480d      	ldrne	r0, [pc, #52]	; (8009468 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009434:	480d      	ldreq	r0, [pc, #52]	; (800946c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009436:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800943a:	bf18      	it	ne
 800943c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800943e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009442:	fba1 0100 	umull	r0, r1, r1, r0
 8009446:	f7f7 fc07 	bl	8000c58 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800944a:	4b06      	ldr	r3, [pc, #24]	; (8009464 <HAL_RCC_GetSysClockFreq+0x50>)
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8009452:	3301      	adds	r3, #1
 8009454:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8009456:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800945a:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800945c:	4802      	ldr	r0, [pc, #8]	; (8009468 <HAL_RCC_GetSysClockFreq+0x54>)
 800945e:	e7fc      	b.n	800945a <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8009460:	4802      	ldr	r0, [pc, #8]	; (800946c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8009462:	e7fa      	b.n	800945a <HAL_RCC_GetSysClockFreq+0x46>
 8009464:	40023800 	.word	0x40023800
 8009468:	007a1200 	.word	0x007a1200
 800946c:	00f42400 	.word	0x00f42400

08009470 <HAL_RCC_ClockConfig>:
{
 8009470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009474:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8009476:	4604      	mov	r4, r0
 8009478:	b910      	cbnz	r0, 8009480 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800947a:	2001      	movs	r0, #1
}
 800947c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009480:	4b44      	ldr	r3, [pc, #272]	; (8009594 <HAL_RCC_ClockConfig+0x124>)
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	f002 020f 	and.w	r2, r2, #15
 8009488:	428a      	cmp	r2, r1
 800948a:	d328      	bcc.n	80094de <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800948c:	6822      	ldr	r2, [r4, #0]
 800948e:	0797      	lsls	r7, r2, #30
 8009490:	d42d      	bmi.n	80094ee <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009492:	07d0      	lsls	r0, r2, #31
 8009494:	d441      	bmi.n	800951a <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009496:	4b3f      	ldr	r3, [pc, #252]	; (8009594 <HAL_RCC_ClockConfig+0x124>)
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	f002 020f 	and.w	r2, r2, #15
 800949e:	42aa      	cmp	r2, r5
 80094a0:	d866      	bhi.n	8009570 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094a2:	6822      	ldr	r2, [r4, #0]
 80094a4:	0751      	lsls	r1, r2, #29
 80094a6:	d46c      	bmi.n	8009582 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094a8:	0713      	lsls	r3, r2, #28
 80094aa:	d507      	bpl.n	80094bc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80094ac:	4a3a      	ldr	r2, [pc, #232]	; (8009598 <HAL_RCC_ClockConfig+0x128>)
 80094ae:	6921      	ldr	r1, [r4, #16]
 80094b0:	6893      	ldr	r3, [r2, #8]
 80094b2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80094b6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80094ba:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80094bc:	f7ff ffaa 	bl	8009414 <HAL_RCC_GetSysClockFreq>
 80094c0:	4b35      	ldr	r3, [pc, #212]	; (8009598 <HAL_RCC_ClockConfig+0x128>)
 80094c2:	4a36      	ldr	r2, [pc, #216]	; (800959c <HAL_RCC_ClockConfig+0x12c>)
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80094ca:	5cd3      	ldrb	r3, [r2, r3]
 80094cc:	40d8      	lsrs	r0, r3
 80094ce:	4b34      	ldr	r3, [pc, #208]	; (80095a0 <HAL_RCC_ClockConfig+0x130>)
 80094d0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80094d2:	4b34      	ldr	r3, [pc, #208]	; (80095a4 <HAL_RCC_ClockConfig+0x134>)
 80094d4:	6818      	ldr	r0, [r3, #0]
 80094d6:	f7ff f843 	bl	8008560 <HAL_InitTick>
  return HAL_OK;
 80094da:	2000      	movs	r0, #0
 80094dc:	e7ce      	b.n	800947c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094de:	b2ca      	uxtb	r2, r1
 80094e0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f003 030f 	and.w	r3, r3, #15
 80094e8:	428b      	cmp	r3, r1
 80094ea:	d1c6      	bne.n	800947a <HAL_RCC_ClockConfig+0xa>
 80094ec:	e7ce      	b.n	800948c <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094ee:	4b2a      	ldr	r3, [pc, #168]	; (8009598 <HAL_RCC_ClockConfig+0x128>)
 80094f0:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80094f4:	bf1e      	ittt	ne
 80094f6:	6899      	ldrne	r1, [r3, #8]
 80094f8:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 80094fc:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094fe:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009500:	bf42      	ittt	mi
 8009502:	6899      	ldrmi	r1, [r3, #8]
 8009504:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8009508:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800950a:	4923      	ldr	r1, [pc, #140]	; (8009598 <HAL_RCC_ClockConfig+0x128>)
 800950c:	68a0      	ldr	r0, [r4, #8]
 800950e:	688b      	ldr	r3, [r1, #8]
 8009510:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009514:	4303      	orrs	r3, r0
 8009516:	608b      	str	r3, [r1, #8]
 8009518:	e7bb      	b.n	8009492 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800951a:	6862      	ldr	r2, [r4, #4]
 800951c:	4b1e      	ldr	r3, [pc, #120]	; (8009598 <HAL_RCC_ClockConfig+0x128>)
 800951e:	2a01      	cmp	r2, #1
 8009520:	d11c      	bne.n	800955c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009528:	d0a7      	beq.n	800947a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800952a:	4e1b      	ldr	r6, [pc, #108]	; (8009598 <HAL_RCC_ClockConfig+0x128>)
 800952c:	68b3      	ldr	r3, [r6, #8]
 800952e:	f023 0303 	bic.w	r3, r3, #3
 8009532:	4313      	orrs	r3, r2
 8009534:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8009536:	f7ff f85b 	bl	80085f0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800953a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800953e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009540:	68b3      	ldr	r3, [r6, #8]
 8009542:	6862      	ldr	r2, [r4, #4]
 8009544:	f003 030c 	and.w	r3, r3, #12
 8009548:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800954c:	d0a3      	beq.n	8009496 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800954e:	f7ff f84f 	bl	80085f0 <HAL_GetTick>
 8009552:	1bc0      	subs	r0, r0, r7
 8009554:	4540      	cmp	r0, r8
 8009556:	d9f3      	bls.n	8009540 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8009558:	2003      	movs	r0, #3
 800955a:	e78f      	b.n	800947c <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800955c:	1e91      	subs	r1, r2, #2
 800955e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009560:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009562:	d802      	bhi.n	800956a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009564:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009568:	e7de      	b.n	8009528 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800956a:	f013 0f02 	tst.w	r3, #2
 800956e:	e7db      	b.n	8009528 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009570:	b2ea      	uxtb	r2, r5
 8009572:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f003 030f 	and.w	r3, r3, #15
 800957a:	42ab      	cmp	r3, r5
 800957c:	f47f af7d 	bne.w	800947a <HAL_RCC_ClockConfig+0xa>
 8009580:	e78f      	b.n	80094a2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009582:	4905      	ldr	r1, [pc, #20]	; (8009598 <HAL_RCC_ClockConfig+0x128>)
 8009584:	68e0      	ldr	r0, [r4, #12]
 8009586:	688b      	ldr	r3, [r1, #8]
 8009588:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800958c:	4303      	orrs	r3, r0
 800958e:	608b      	str	r3, [r1, #8]
 8009590:	e78a      	b.n	80094a8 <HAL_RCC_ClockConfig+0x38>
 8009592:	bf00      	nop
 8009594:	40023c00 	.word	0x40023c00
 8009598:	40023800 	.word	0x40023800
 800959c:	0800c4f4 	.word	0x0800c4f4
 80095a0:	20000030 	.word	0x20000030
 80095a4:	20000038 	.word	0x20000038

080095a8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80095a8:	4b01      	ldr	r3, [pc, #4]	; (80095b0 <HAL_RCC_GetHCLKFreq+0x8>)
 80095aa:	6818      	ldr	r0, [r3, #0]
 80095ac:	4770      	bx	lr
 80095ae:	bf00      	nop
 80095b0:	20000030 	.word	0x20000030

080095b4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80095b4:	4b04      	ldr	r3, [pc, #16]	; (80095c8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80095b6:	4a05      	ldr	r2, [pc, #20]	; (80095cc <HAL_RCC_GetPCLK1Freq+0x18>)
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80095be:	5cd3      	ldrb	r3, [r2, r3]
 80095c0:	4a03      	ldr	r2, [pc, #12]	; (80095d0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80095c2:	6810      	ldr	r0, [r2, #0]
}
 80095c4:	40d8      	lsrs	r0, r3
 80095c6:	4770      	bx	lr
 80095c8:	40023800 	.word	0x40023800
 80095cc:	0800c504 	.word	0x0800c504
 80095d0:	20000030 	.word	0x20000030

080095d4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80095d4:	4b04      	ldr	r3, [pc, #16]	; (80095e8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80095d6:	4a05      	ldr	r2, [pc, #20]	; (80095ec <HAL_RCC_GetPCLK2Freq+0x18>)
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80095de:	5cd3      	ldrb	r3, [r2, r3]
 80095e0:	4a03      	ldr	r2, [pc, #12]	; (80095f0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80095e2:	6810      	ldr	r0, [r2, #0]
}
 80095e4:	40d8      	lsrs	r0, r3
 80095e6:	4770      	bx	lr
 80095e8:	40023800 	.word	0x40023800
 80095ec:	0800c504 	.word	0x0800c504
 80095f0:	20000030 	.word	0x20000030

080095f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095f4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095f6:	6803      	ldr	r3, [r0, #0]
 80095f8:	68c1      	ldr	r1, [r0, #12]
 80095fa:	691a      	ldr	r2, [r3, #16]
{
 80095fc:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095fe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009602:	430a      	orrs	r2, r1
 8009604:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009606:	6925      	ldr	r5, [r4, #16]
 8009608:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 800960a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800960c:	69c0      	ldr	r0, [r0, #28]
 800960e:	432a      	orrs	r2, r5
 8009610:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8009612:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009616:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8009618:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800961c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800961e:	430a      	orrs	r2, r1
 8009620:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009622:	695a      	ldr	r2, [r3, #20]
 8009624:	69a1      	ldr	r1, [r4, #24]
 8009626:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800962a:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800962c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009630:	615a      	str	r2, [r3, #20]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009632:	4a25      	ldr	r2, [pc, #148]	; (80096c8 <UART_SetConfig+0xd4>)
 8009634:	d128      	bne.n	8009688 <UART_SetConfig+0x94>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009636:	4293      	cmp	r3, r2
 8009638:	d003      	beq.n	8009642 <UART_SetConfig+0x4e>
 800963a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800963e:	4293      	cmp	r3, r2
 8009640:	d11f      	bne.n	8009682 <UART_SetConfig+0x8e>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009642:	f7ff ffc7 	bl	80095d4 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009646:	6862      	ldr	r2, [r4, #4]
 8009648:	2300      	movs	r3, #0
 800964a:	1892      	adds	r2, r2, r2
 800964c:	f04f 0119 	mov.w	r1, #25
 8009650:	415b      	adcs	r3, r3
 8009652:	fba0 0101 	umull	r0, r1, r0, r1
 8009656:	f7f7 faff 	bl	8000c58 <__aeabi_uldivmod>
 800965a:	2164      	movs	r1, #100	; 0x64
 800965c:	fbb0 f5f1 	udiv	r5, r0, r1
 8009660:	fb01 0315 	mls	r3, r1, r5, r0
 8009664:	00db      	lsls	r3, r3, #3
 8009666:	3332      	adds	r3, #50	; 0x32
 8009668:	fbb3 f3f1 	udiv	r3, r3, r1
 800966c:	f003 0207 	and.w	r2, r3, #7
 8009670:	005b      	lsls	r3, r3, #1
 8009672:	6821      	ldr	r1, [r4, #0]
 8009674:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8009678:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800967c:	4413      	add	r3, r2
 800967e:	608b      	str	r3, [r1, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009680:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8009682:	f7ff ff97 	bl	80095b4 <HAL_RCC_GetPCLK1Freq>
 8009686:	e7de      	b.n	8009646 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009688:	4293      	cmp	r3, r2
 800968a:	d002      	beq.n	8009692 <UART_SetConfig+0x9e>
 800968c:	4a0f      	ldr	r2, [pc, #60]	; (80096cc <UART_SetConfig+0xd8>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d117      	bne.n	80096c2 <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009692:	f7ff ff9f 	bl	80095d4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009696:	6863      	ldr	r3, [r4, #4]
 8009698:	2119      	movs	r1, #25
 800969a:	009a      	lsls	r2, r3, #2
 800969c:	fba0 0101 	umull	r0, r1, r0, r1
 80096a0:	0f9b      	lsrs	r3, r3, #30
 80096a2:	f7f7 fad9 	bl	8000c58 <__aeabi_uldivmod>
 80096a6:	2264      	movs	r2, #100	; 0x64
 80096a8:	fbb0 f1f2 	udiv	r1, r0, r2
 80096ac:	fb02 0311 	mls	r3, r2, r1, r0
 80096b0:	6824      	ldr	r4, [r4, #0]
 80096b2:	011b      	lsls	r3, r3, #4
 80096b4:	3332      	adds	r3, #50	; 0x32
 80096b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80096ba:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80096be:	60a3      	str	r3, [r4, #8]
}
 80096c0:	e7de      	b.n	8009680 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 80096c2:	f7ff ff77 	bl	80095b4 <HAL_RCC_GetPCLK1Freq>
 80096c6:	e7e6      	b.n	8009696 <UART_SetConfig+0xa2>
 80096c8:	40011000 	.word	0x40011000
 80096cc:	40011400 	.word	0x40011400

080096d0 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80096d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096d2:	4604      	mov	r4, r0
 80096d4:	460e      	mov	r6, r1
 80096d6:	4617      	mov	r7, r2
 80096d8:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096da:	6822      	ldr	r2, [r4, #0]
 80096dc:	6813      	ldr	r3, [r2, #0]
 80096de:	ea36 0303 	bics.w	r3, r6, r3
 80096e2:	d101      	bne.n	80096e8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 80096e4:	2000      	movs	r0, #0
 80096e6:	e014      	b.n	8009712 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
    if (Timeout != HAL_MAX_DELAY)
 80096e8:	1c6b      	adds	r3, r5, #1
 80096ea:	d0f7      	beq.n	80096dc <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80096ec:	b995      	cbnz	r5, 8009714 <UART_WaitOnFlagUntilTimeout.constprop.0+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80096ee:	6823      	ldr	r3, [r4, #0]
 80096f0:	68da      	ldr	r2, [r3, #12]
 80096f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80096f6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096f8:	695a      	ldr	r2, [r3, #20]
 80096fa:	f022 0201 	bic.w	r2, r2, #1
 80096fe:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8009700:	2320      	movs	r3, #32
 8009702:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8009706:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800970a:	2300      	movs	r3, #0
 800970c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8009710:	2003      	movs	r0, #3
}
 8009712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009714:	f7fe ff6c 	bl	80085f0 <HAL_GetTick>
 8009718:	1bc0      	subs	r0, r0, r7
 800971a:	4285      	cmp	r5, r0
 800971c:	d2dd      	bcs.n	80096da <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 800971e:	e7e6      	b.n	80096ee <UART_WaitOnFlagUntilTimeout.constprop.0+0x1e>

08009720 <HAL_UART_Init>:
{
 8009720:	b510      	push	{r4, lr}
  if (huart == NULL)
 8009722:	4604      	mov	r4, r0
 8009724:	b340      	cbz	r0, 8009778 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8009726:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800972a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800972e:	b91b      	cbnz	r3, 8009738 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8009730:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8009734:	f7f7 fe58 	bl	80013e8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8009738:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800973a:	2324      	movs	r3, #36	; 0x24
 800973c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8009740:	68d3      	ldr	r3, [r2, #12]
 8009742:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009746:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8009748:	4620      	mov	r0, r4
 800974a:	f7ff ff53 	bl	80095f4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800974e:	6823      	ldr	r3, [r4, #0]
 8009750:	691a      	ldr	r2, [r3, #16]
 8009752:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009756:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009758:	695a      	ldr	r2, [r3, #20]
 800975a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800975e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8009760:	68da      	ldr	r2, [r3, #12]
 8009762:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009766:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009768:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800976a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800976c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800976e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009772:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8009776:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009778:	2001      	movs	r0, #1
 800977a:	e7fc      	b.n	8009776 <HAL_UART_Init+0x56>

0800977c <HAL_UART_Transmit>:
{
 800977c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800977e:	4616      	mov	r6, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8009780:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
{
 8009784:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 8009786:	2a20      	cmp	r2, #32
{
 8009788:	4604      	mov	r4, r0
 800978a:	460d      	mov	r5, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800978c:	d150      	bne.n	8009830 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 800978e:	2900      	cmp	r1, #0
 8009790:	d04c      	beq.n	800982c <HAL_UART_Transmit+0xb0>
 8009792:	2e00      	cmp	r6, #0
 8009794:	d04a      	beq.n	800982c <HAL_UART_Transmit+0xb0>
    __HAL_LOCK(huart);
 8009796:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800979a:	2a01      	cmp	r2, #1
 800979c:	d048      	beq.n	8009830 <HAL_UART_Transmit+0xb4>
 800979e:	2201      	movs	r2, #1
 80097a0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097a4:	2700      	movs	r7, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097a6:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097a8:	63c7      	str	r7, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097aa:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80097ae:	f7fe ff1f 	bl	80085f0 <HAL_GetTick>
    while (huart->TxXferCount > 0U)
 80097b2:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 80097b4:	84a6      	strh	r6, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80097b6:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 80097b8:	84e6      	strh	r6, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 80097ba:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 80097be:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 80097c0:	b289      	uxth	r1, r1
 80097c2:	b941      	cbnz	r1, 80097d6 <HAL_UART_Transmit+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80097c4:	2140      	movs	r1, #64	; 0x40
 80097c6:	4620      	mov	r0, r4
 80097c8:	f7ff ff82 	bl	80096d0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80097cc:	b9a8      	cbnz	r0, 80097fa <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 80097ce:	2320      	movs	r3, #32
 80097d0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80097d4:	e012      	b.n	80097fc <HAL_UART_Transmit+0x80>
      huart->TxXferCount--;
 80097d6:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 80097d8:	3901      	subs	r1, #1
 80097da:	b289      	uxth	r1, r1
 80097dc:	84e1      	strh	r1, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80097de:	68a1      	ldr	r1, [r4, #8]
 80097e0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80097e4:	e9cd 2300 	strd	r2, r3, [sp]
 80097e8:	f04f 0180 	mov.w	r1, #128	; 0x80
 80097ec:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80097ee:	d112      	bne.n	8009816 <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80097f0:	f7ff ff6e 	bl	80096d0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80097f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097f8:	b110      	cbz	r0, 8009800 <HAL_UART_Transmit+0x84>
          return HAL_TIMEOUT;
 80097fa:	2003      	movs	r0, #3
}
 80097fc:	b003      	add	sp, #12
 80097fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8009800:	8829      	ldrh	r1, [r5, #0]
 8009802:	6820      	ldr	r0, [r4, #0]
 8009804:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8009808:	6041      	str	r1, [r0, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800980a:	6921      	ldr	r1, [r4, #16]
 800980c:	b909      	cbnz	r1, 8009812 <HAL_UART_Transmit+0x96>
          pData += 2U;
 800980e:	3502      	adds	r5, #2
 8009810:	e7d5      	b.n	80097be <HAL_UART_Transmit+0x42>
          pData += 1U;
 8009812:	3501      	adds	r5, #1
 8009814:	e7d3      	b.n	80097be <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009816:	f7ff ff5b 	bl	80096d0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800981a:	2800      	cmp	r0, #0
 800981c:	d1ed      	bne.n	80097fa <HAL_UART_Transmit+0x7e>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800981e:	6821      	ldr	r1, [r4, #0]
 8009820:	f815 0b01 	ldrb.w	r0, [r5], #1
 8009824:	6048      	str	r0, [r1, #4]
 8009826:	e9dd 2300 	ldrd	r2, r3, [sp]
 800982a:	e7c8      	b.n	80097be <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800982c:	2001      	movs	r0, #1
 800982e:	e7e5      	b.n	80097fc <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8009830:	2002      	movs	r0, #2
 8009832:	e7e3      	b.n	80097fc <HAL_UART_Transmit+0x80>

08009834 <__libc_init_array>:
 8009834:	b570      	push	{r4, r5, r6, lr}
 8009836:	4d0d      	ldr	r5, [pc, #52]	; (800986c <__libc_init_array+0x38>)
 8009838:	4c0d      	ldr	r4, [pc, #52]	; (8009870 <__libc_init_array+0x3c>)
 800983a:	1b64      	subs	r4, r4, r5
 800983c:	10a4      	asrs	r4, r4, #2
 800983e:	2600      	movs	r6, #0
 8009840:	42a6      	cmp	r6, r4
 8009842:	d109      	bne.n	8009858 <__libc_init_array+0x24>
 8009844:	4d0b      	ldr	r5, [pc, #44]	; (8009874 <__libc_init_array+0x40>)
 8009846:	4c0c      	ldr	r4, [pc, #48]	; (8009878 <__libc_init_array+0x44>)
 8009848:	f002 fe3a 	bl	800c4c0 <_init>
 800984c:	1b64      	subs	r4, r4, r5
 800984e:	10a4      	asrs	r4, r4, #2
 8009850:	2600      	movs	r6, #0
 8009852:	42a6      	cmp	r6, r4
 8009854:	d105      	bne.n	8009862 <__libc_init_array+0x2e>
 8009856:	bd70      	pop	{r4, r5, r6, pc}
 8009858:	f855 3b04 	ldr.w	r3, [r5], #4
 800985c:	4798      	blx	r3
 800985e:	3601      	adds	r6, #1
 8009860:	e7ee      	b.n	8009840 <__libc_init_array+0xc>
 8009862:	f855 3b04 	ldr.w	r3, [r5], #4
 8009866:	4798      	blx	r3
 8009868:	3601      	adds	r6, #1
 800986a:	e7f2      	b.n	8009852 <__libc_init_array+0x1e>
 800986c:	0800c9fc 	.word	0x0800c9fc
 8009870:	0800c9fc 	.word	0x0800c9fc
 8009874:	0800c9fc 	.word	0x0800c9fc
 8009878:	0800ca00 	.word	0x0800ca00

0800987c <memcpy>:
 800987c:	440a      	add	r2, r1
 800987e:	4291      	cmp	r1, r2
 8009880:	f100 33ff 	add.w	r3, r0, #4294967295
 8009884:	d100      	bne.n	8009888 <memcpy+0xc>
 8009886:	4770      	bx	lr
 8009888:	b510      	push	{r4, lr}
 800988a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800988e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009892:	4291      	cmp	r1, r2
 8009894:	d1f9      	bne.n	800988a <memcpy+0xe>
 8009896:	bd10      	pop	{r4, pc}

08009898 <memset>:
 8009898:	4402      	add	r2, r0
 800989a:	4603      	mov	r3, r0
 800989c:	4293      	cmp	r3, r2
 800989e:	d100      	bne.n	80098a2 <memset+0xa>
 80098a0:	4770      	bx	lr
 80098a2:	f803 1b01 	strb.w	r1, [r3], #1
 80098a6:	e7f9      	b.n	800989c <memset+0x4>

080098a8 <__cvt>:
 80098a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098ac:	ec55 4b10 	vmov	r4, r5, d0
 80098b0:	2d00      	cmp	r5, #0
 80098b2:	460e      	mov	r6, r1
 80098b4:	4619      	mov	r1, r3
 80098b6:	462b      	mov	r3, r5
 80098b8:	bfbb      	ittet	lt
 80098ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80098be:	461d      	movlt	r5, r3
 80098c0:	2300      	movge	r3, #0
 80098c2:	232d      	movlt	r3, #45	; 0x2d
 80098c4:	700b      	strb	r3, [r1, #0]
 80098c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80098cc:	4691      	mov	r9, r2
 80098ce:	f023 0820 	bic.w	r8, r3, #32
 80098d2:	bfbc      	itt	lt
 80098d4:	4622      	movlt	r2, r4
 80098d6:	4614      	movlt	r4, r2
 80098d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80098dc:	d005      	beq.n	80098ea <__cvt+0x42>
 80098de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80098e2:	d100      	bne.n	80098e6 <__cvt+0x3e>
 80098e4:	3601      	adds	r6, #1
 80098e6:	2102      	movs	r1, #2
 80098e8:	e000      	b.n	80098ec <__cvt+0x44>
 80098ea:	2103      	movs	r1, #3
 80098ec:	ab03      	add	r3, sp, #12
 80098ee:	9301      	str	r3, [sp, #4]
 80098f0:	ab02      	add	r3, sp, #8
 80098f2:	9300      	str	r3, [sp, #0]
 80098f4:	ec45 4b10 	vmov	d0, r4, r5
 80098f8:	4653      	mov	r3, sl
 80098fa:	4632      	mov	r2, r6
 80098fc:	f000 fe44 	bl	800a588 <_dtoa_r>
 8009900:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009904:	4607      	mov	r7, r0
 8009906:	d102      	bne.n	800990e <__cvt+0x66>
 8009908:	f019 0f01 	tst.w	r9, #1
 800990c:	d022      	beq.n	8009954 <__cvt+0xac>
 800990e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009912:	eb07 0906 	add.w	r9, r7, r6
 8009916:	d110      	bne.n	800993a <__cvt+0x92>
 8009918:	783b      	ldrb	r3, [r7, #0]
 800991a:	2b30      	cmp	r3, #48	; 0x30
 800991c:	d10a      	bne.n	8009934 <__cvt+0x8c>
 800991e:	2200      	movs	r2, #0
 8009920:	2300      	movs	r3, #0
 8009922:	4620      	mov	r0, r4
 8009924:	4629      	mov	r1, r5
 8009926:	f7f7 f8d7 	bl	8000ad8 <__aeabi_dcmpeq>
 800992a:	b918      	cbnz	r0, 8009934 <__cvt+0x8c>
 800992c:	f1c6 0601 	rsb	r6, r6, #1
 8009930:	f8ca 6000 	str.w	r6, [sl]
 8009934:	f8da 3000 	ldr.w	r3, [sl]
 8009938:	4499      	add	r9, r3
 800993a:	2200      	movs	r2, #0
 800993c:	2300      	movs	r3, #0
 800993e:	4620      	mov	r0, r4
 8009940:	4629      	mov	r1, r5
 8009942:	f7f7 f8c9 	bl	8000ad8 <__aeabi_dcmpeq>
 8009946:	b108      	cbz	r0, 800994c <__cvt+0xa4>
 8009948:	f8cd 900c 	str.w	r9, [sp, #12]
 800994c:	2230      	movs	r2, #48	; 0x30
 800994e:	9b03      	ldr	r3, [sp, #12]
 8009950:	454b      	cmp	r3, r9
 8009952:	d307      	bcc.n	8009964 <__cvt+0xbc>
 8009954:	9b03      	ldr	r3, [sp, #12]
 8009956:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009958:	1bdb      	subs	r3, r3, r7
 800995a:	4638      	mov	r0, r7
 800995c:	6013      	str	r3, [r2, #0]
 800995e:	b004      	add	sp, #16
 8009960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009964:	1c59      	adds	r1, r3, #1
 8009966:	9103      	str	r1, [sp, #12]
 8009968:	701a      	strb	r2, [r3, #0]
 800996a:	e7f0      	b.n	800994e <__cvt+0xa6>

0800996c <__exponent>:
 800996c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800996e:	4603      	mov	r3, r0
 8009970:	2900      	cmp	r1, #0
 8009972:	bfb8      	it	lt
 8009974:	4249      	neglt	r1, r1
 8009976:	f803 2b02 	strb.w	r2, [r3], #2
 800997a:	bfb4      	ite	lt
 800997c:	222d      	movlt	r2, #45	; 0x2d
 800997e:	222b      	movge	r2, #43	; 0x2b
 8009980:	2909      	cmp	r1, #9
 8009982:	7042      	strb	r2, [r0, #1]
 8009984:	dd2a      	ble.n	80099dc <__exponent+0x70>
 8009986:	f10d 0407 	add.w	r4, sp, #7
 800998a:	46a4      	mov	ip, r4
 800998c:	270a      	movs	r7, #10
 800998e:	46a6      	mov	lr, r4
 8009990:	460a      	mov	r2, r1
 8009992:	fb91 f6f7 	sdiv	r6, r1, r7
 8009996:	fb07 1516 	mls	r5, r7, r6, r1
 800999a:	3530      	adds	r5, #48	; 0x30
 800999c:	2a63      	cmp	r2, #99	; 0x63
 800999e:	f104 34ff 	add.w	r4, r4, #4294967295
 80099a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80099a6:	4631      	mov	r1, r6
 80099a8:	dcf1      	bgt.n	800998e <__exponent+0x22>
 80099aa:	3130      	adds	r1, #48	; 0x30
 80099ac:	f1ae 0502 	sub.w	r5, lr, #2
 80099b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80099b4:	1c44      	adds	r4, r0, #1
 80099b6:	4629      	mov	r1, r5
 80099b8:	4561      	cmp	r1, ip
 80099ba:	d30a      	bcc.n	80099d2 <__exponent+0x66>
 80099bc:	f10d 0209 	add.w	r2, sp, #9
 80099c0:	eba2 020e 	sub.w	r2, r2, lr
 80099c4:	4565      	cmp	r5, ip
 80099c6:	bf88      	it	hi
 80099c8:	2200      	movhi	r2, #0
 80099ca:	4413      	add	r3, r2
 80099cc:	1a18      	subs	r0, r3, r0
 80099ce:	b003      	add	sp, #12
 80099d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80099da:	e7ed      	b.n	80099b8 <__exponent+0x4c>
 80099dc:	2330      	movs	r3, #48	; 0x30
 80099de:	3130      	adds	r1, #48	; 0x30
 80099e0:	7083      	strb	r3, [r0, #2]
 80099e2:	70c1      	strb	r1, [r0, #3]
 80099e4:	1d03      	adds	r3, r0, #4
 80099e6:	e7f1      	b.n	80099cc <__exponent+0x60>

080099e8 <_printf_float>:
 80099e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ec:	ed2d 8b02 	vpush	{d8}
 80099f0:	b08d      	sub	sp, #52	; 0x34
 80099f2:	460c      	mov	r4, r1
 80099f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80099f8:	4616      	mov	r6, r2
 80099fa:	461f      	mov	r7, r3
 80099fc:	4605      	mov	r5, r0
 80099fe:	f001 fd67 	bl	800b4d0 <_localeconv_r>
 8009a02:	f8d0 a000 	ldr.w	sl, [r0]
 8009a06:	4650      	mov	r0, sl
 8009a08:	f7f6 fbea 	bl	80001e0 <strlen>
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	930a      	str	r3, [sp, #40]	; 0x28
 8009a10:	6823      	ldr	r3, [r4, #0]
 8009a12:	9305      	str	r3, [sp, #20]
 8009a14:	f8d8 3000 	ldr.w	r3, [r8]
 8009a18:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009a1c:	3307      	adds	r3, #7
 8009a1e:	f023 0307 	bic.w	r3, r3, #7
 8009a22:	f103 0208 	add.w	r2, r3, #8
 8009a26:	f8c8 2000 	str.w	r2, [r8]
 8009a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009a32:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009a36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009a3a:	9307      	str	r3, [sp, #28]
 8009a3c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009a40:	ee08 0a10 	vmov	s16, r0
 8009a44:	4b9f      	ldr	r3, [pc, #636]	; (8009cc4 <_printf_float+0x2dc>)
 8009a46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a4e:	f7f7 f875 	bl	8000b3c <__aeabi_dcmpun>
 8009a52:	bb88      	cbnz	r0, 8009ab8 <_printf_float+0xd0>
 8009a54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a58:	4b9a      	ldr	r3, [pc, #616]	; (8009cc4 <_printf_float+0x2dc>)
 8009a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a5e:	f7f7 f84f 	bl	8000b00 <__aeabi_dcmple>
 8009a62:	bb48      	cbnz	r0, 8009ab8 <_printf_float+0xd0>
 8009a64:	2200      	movs	r2, #0
 8009a66:	2300      	movs	r3, #0
 8009a68:	4640      	mov	r0, r8
 8009a6a:	4649      	mov	r1, r9
 8009a6c:	f7f7 f83e 	bl	8000aec <__aeabi_dcmplt>
 8009a70:	b110      	cbz	r0, 8009a78 <_printf_float+0x90>
 8009a72:	232d      	movs	r3, #45	; 0x2d
 8009a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a78:	4b93      	ldr	r3, [pc, #588]	; (8009cc8 <_printf_float+0x2e0>)
 8009a7a:	4894      	ldr	r0, [pc, #592]	; (8009ccc <_printf_float+0x2e4>)
 8009a7c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009a80:	bf94      	ite	ls
 8009a82:	4698      	movls	r8, r3
 8009a84:	4680      	movhi	r8, r0
 8009a86:	2303      	movs	r3, #3
 8009a88:	6123      	str	r3, [r4, #16]
 8009a8a:	9b05      	ldr	r3, [sp, #20]
 8009a8c:	f023 0204 	bic.w	r2, r3, #4
 8009a90:	6022      	str	r2, [r4, #0]
 8009a92:	f04f 0900 	mov.w	r9, #0
 8009a96:	9700      	str	r7, [sp, #0]
 8009a98:	4633      	mov	r3, r6
 8009a9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8009a9c:	4621      	mov	r1, r4
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	f000 f9d8 	bl	8009e54 <_printf_common>
 8009aa4:	3001      	adds	r0, #1
 8009aa6:	f040 8090 	bne.w	8009bca <_printf_float+0x1e2>
 8009aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8009aae:	b00d      	add	sp, #52	; 0x34
 8009ab0:	ecbd 8b02 	vpop	{d8}
 8009ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab8:	4642      	mov	r2, r8
 8009aba:	464b      	mov	r3, r9
 8009abc:	4640      	mov	r0, r8
 8009abe:	4649      	mov	r1, r9
 8009ac0:	f7f7 f83c 	bl	8000b3c <__aeabi_dcmpun>
 8009ac4:	b140      	cbz	r0, 8009ad8 <_printf_float+0xf0>
 8009ac6:	464b      	mov	r3, r9
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	bfbc      	itt	lt
 8009acc:	232d      	movlt	r3, #45	; 0x2d
 8009ace:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009ad2:	487f      	ldr	r0, [pc, #508]	; (8009cd0 <_printf_float+0x2e8>)
 8009ad4:	4b7f      	ldr	r3, [pc, #508]	; (8009cd4 <_printf_float+0x2ec>)
 8009ad6:	e7d1      	b.n	8009a7c <_printf_float+0x94>
 8009ad8:	6863      	ldr	r3, [r4, #4]
 8009ada:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009ade:	9206      	str	r2, [sp, #24]
 8009ae0:	1c5a      	adds	r2, r3, #1
 8009ae2:	d13f      	bne.n	8009b64 <_printf_float+0x17c>
 8009ae4:	2306      	movs	r3, #6
 8009ae6:	6063      	str	r3, [r4, #4]
 8009ae8:	9b05      	ldr	r3, [sp, #20]
 8009aea:	6861      	ldr	r1, [r4, #4]
 8009aec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009af0:	2300      	movs	r3, #0
 8009af2:	9303      	str	r3, [sp, #12]
 8009af4:	ab0a      	add	r3, sp, #40	; 0x28
 8009af6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009afa:	ab09      	add	r3, sp, #36	; 0x24
 8009afc:	ec49 8b10 	vmov	d0, r8, r9
 8009b00:	9300      	str	r3, [sp, #0]
 8009b02:	6022      	str	r2, [r4, #0]
 8009b04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009b08:	4628      	mov	r0, r5
 8009b0a:	f7ff fecd 	bl	80098a8 <__cvt>
 8009b0e:	9b06      	ldr	r3, [sp, #24]
 8009b10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b12:	2b47      	cmp	r3, #71	; 0x47
 8009b14:	4680      	mov	r8, r0
 8009b16:	d108      	bne.n	8009b2a <_printf_float+0x142>
 8009b18:	1cc8      	adds	r0, r1, #3
 8009b1a:	db02      	blt.n	8009b22 <_printf_float+0x13a>
 8009b1c:	6863      	ldr	r3, [r4, #4]
 8009b1e:	4299      	cmp	r1, r3
 8009b20:	dd41      	ble.n	8009ba6 <_printf_float+0x1be>
 8009b22:	f1ab 0b02 	sub.w	fp, fp, #2
 8009b26:	fa5f fb8b 	uxtb.w	fp, fp
 8009b2a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b2e:	d820      	bhi.n	8009b72 <_printf_float+0x18a>
 8009b30:	3901      	subs	r1, #1
 8009b32:	465a      	mov	r2, fp
 8009b34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009b38:	9109      	str	r1, [sp, #36]	; 0x24
 8009b3a:	f7ff ff17 	bl	800996c <__exponent>
 8009b3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b40:	1813      	adds	r3, r2, r0
 8009b42:	2a01      	cmp	r2, #1
 8009b44:	4681      	mov	r9, r0
 8009b46:	6123      	str	r3, [r4, #16]
 8009b48:	dc02      	bgt.n	8009b50 <_printf_float+0x168>
 8009b4a:	6822      	ldr	r2, [r4, #0]
 8009b4c:	07d2      	lsls	r2, r2, #31
 8009b4e:	d501      	bpl.n	8009b54 <_printf_float+0x16c>
 8009b50:	3301      	adds	r3, #1
 8009b52:	6123      	str	r3, [r4, #16]
 8009b54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d09c      	beq.n	8009a96 <_printf_float+0xae>
 8009b5c:	232d      	movs	r3, #45	; 0x2d
 8009b5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b62:	e798      	b.n	8009a96 <_printf_float+0xae>
 8009b64:	9a06      	ldr	r2, [sp, #24]
 8009b66:	2a47      	cmp	r2, #71	; 0x47
 8009b68:	d1be      	bne.n	8009ae8 <_printf_float+0x100>
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d1bc      	bne.n	8009ae8 <_printf_float+0x100>
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e7b9      	b.n	8009ae6 <_printf_float+0xfe>
 8009b72:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009b76:	d118      	bne.n	8009baa <_printf_float+0x1c2>
 8009b78:	2900      	cmp	r1, #0
 8009b7a:	6863      	ldr	r3, [r4, #4]
 8009b7c:	dd0b      	ble.n	8009b96 <_printf_float+0x1ae>
 8009b7e:	6121      	str	r1, [r4, #16]
 8009b80:	b913      	cbnz	r3, 8009b88 <_printf_float+0x1a0>
 8009b82:	6822      	ldr	r2, [r4, #0]
 8009b84:	07d0      	lsls	r0, r2, #31
 8009b86:	d502      	bpl.n	8009b8e <_printf_float+0x1a6>
 8009b88:	3301      	adds	r3, #1
 8009b8a:	440b      	add	r3, r1
 8009b8c:	6123      	str	r3, [r4, #16]
 8009b8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009b90:	f04f 0900 	mov.w	r9, #0
 8009b94:	e7de      	b.n	8009b54 <_printf_float+0x16c>
 8009b96:	b913      	cbnz	r3, 8009b9e <_printf_float+0x1b6>
 8009b98:	6822      	ldr	r2, [r4, #0]
 8009b9a:	07d2      	lsls	r2, r2, #31
 8009b9c:	d501      	bpl.n	8009ba2 <_printf_float+0x1ba>
 8009b9e:	3302      	adds	r3, #2
 8009ba0:	e7f4      	b.n	8009b8c <_printf_float+0x1a4>
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e7f2      	b.n	8009b8c <_printf_float+0x1a4>
 8009ba6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009baa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bac:	4299      	cmp	r1, r3
 8009bae:	db05      	blt.n	8009bbc <_printf_float+0x1d4>
 8009bb0:	6823      	ldr	r3, [r4, #0]
 8009bb2:	6121      	str	r1, [r4, #16]
 8009bb4:	07d8      	lsls	r0, r3, #31
 8009bb6:	d5ea      	bpl.n	8009b8e <_printf_float+0x1a6>
 8009bb8:	1c4b      	adds	r3, r1, #1
 8009bba:	e7e7      	b.n	8009b8c <_printf_float+0x1a4>
 8009bbc:	2900      	cmp	r1, #0
 8009bbe:	bfd4      	ite	le
 8009bc0:	f1c1 0202 	rsble	r2, r1, #2
 8009bc4:	2201      	movgt	r2, #1
 8009bc6:	4413      	add	r3, r2
 8009bc8:	e7e0      	b.n	8009b8c <_printf_float+0x1a4>
 8009bca:	6823      	ldr	r3, [r4, #0]
 8009bcc:	055a      	lsls	r2, r3, #21
 8009bce:	d407      	bmi.n	8009be0 <_printf_float+0x1f8>
 8009bd0:	6923      	ldr	r3, [r4, #16]
 8009bd2:	4642      	mov	r2, r8
 8009bd4:	4631      	mov	r1, r6
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	47b8      	blx	r7
 8009bda:	3001      	adds	r0, #1
 8009bdc:	d12c      	bne.n	8009c38 <_printf_float+0x250>
 8009bde:	e764      	b.n	8009aaa <_printf_float+0xc2>
 8009be0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009be4:	f240 80e0 	bls.w	8009da8 <_printf_float+0x3c0>
 8009be8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009bec:	2200      	movs	r2, #0
 8009bee:	2300      	movs	r3, #0
 8009bf0:	f7f6 ff72 	bl	8000ad8 <__aeabi_dcmpeq>
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	d034      	beq.n	8009c62 <_printf_float+0x27a>
 8009bf8:	4a37      	ldr	r2, [pc, #220]	; (8009cd8 <_printf_float+0x2f0>)
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	4631      	mov	r1, r6
 8009bfe:	4628      	mov	r0, r5
 8009c00:	47b8      	blx	r7
 8009c02:	3001      	adds	r0, #1
 8009c04:	f43f af51 	beq.w	8009aaa <_printf_float+0xc2>
 8009c08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	db02      	blt.n	8009c16 <_printf_float+0x22e>
 8009c10:	6823      	ldr	r3, [r4, #0]
 8009c12:	07d8      	lsls	r0, r3, #31
 8009c14:	d510      	bpl.n	8009c38 <_printf_float+0x250>
 8009c16:	ee18 3a10 	vmov	r3, s16
 8009c1a:	4652      	mov	r2, sl
 8009c1c:	4631      	mov	r1, r6
 8009c1e:	4628      	mov	r0, r5
 8009c20:	47b8      	blx	r7
 8009c22:	3001      	adds	r0, #1
 8009c24:	f43f af41 	beq.w	8009aaa <_printf_float+0xc2>
 8009c28:	f04f 0800 	mov.w	r8, #0
 8009c2c:	f104 091a 	add.w	r9, r4, #26
 8009c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c32:	3b01      	subs	r3, #1
 8009c34:	4543      	cmp	r3, r8
 8009c36:	dc09      	bgt.n	8009c4c <_printf_float+0x264>
 8009c38:	6823      	ldr	r3, [r4, #0]
 8009c3a:	079b      	lsls	r3, r3, #30
 8009c3c:	f100 8105 	bmi.w	8009e4a <_printf_float+0x462>
 8009c40:	68e0      	ldr	r0, [r4, #12]
 8009c42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c44:	4298      	cmp	r0, r3
 8009c46:	bfb8      	it	lt
 8009c48:	4618      	movlt	r0, r3
 8009c4a:	e730      	b.n	8009aae <_printf_float+0xc6>
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	464a      	mov	r2, r9
 8009c50:	4631      	mov	r1, r6
 8009c52:	4628      	mov	r0, r5
 8009c54:	47b8      	blx	r7
 8009c56:	3001      	adds	r0, #1
 8009c58:	f43f af27 	beq.w	8009aaa <_printf_float+0xc2>
 8009c5c:	f108 0801 	add.w	r8, r8, #1
 8009c60:	e7e6      	b.n	8009c30 <_printf_float+0x248>
 8009c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	dc39      	bgt.n	8009cdc <_printf_float+0x2f4>
 8009c68:	4a1b      	ldr	r2, [pc, #108]	; (8009cd8 <_printf_float+0x2f0>)
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	4631      	mov	r1, r6
 8009c6e:	4628      	mov	r0, r5
 8009c70:	47b8      	blx	r7
 8009c72:	3001      	adds	r0, #1
 8009c74:	f43f af19 	beq.w	8009aaa <_printf_float+0xc2>
 8009c78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	d102      	bne.n	8009c86 <_printf_float+0x29e>
 8009c80:	6823      	ldr	r3, [r4, #0]
 8009c82:	07d9      	lsls	r1, r3, #31
 8009c84:	d5d8      	bpl.n	8009c38 <_printf_float+0x250>
 8009c86:	ee18 3a10 	vmov	r3, s16
 8009c8a:	4652      	mov	r2, sl
 8009c8c:	4631      	mov	r1, r6
 8009c8e:	4628      	mov	r0, r5
 8009c90:	47b8      	blx	r7
 8009c92:	3001      	adds	r0, #1
 8009c94:	f43f af09 	beq.w	8009aaa <_printf_float+0xc2>
 8009c98:	f04f 0900 	mov.w	r9, #0
 8009c9c:	f104 0a1a 	add.w	sl, r4, #26
 8009ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ca2:	425b      	negs	r3, r3
 8009ca4:	454b      	cmp	r3, r9
 8009ca6:	dc01      	bgt.n	8009cac <_printf_float+0x2c4>
 8009ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009caa:	e792      	b.n	8009bd2 <_printf_float+0x1ea>
 8009cac:	2301      	movs	r3, #1
 8009cae:	4652      	mov	r2, sl
 8009cb0:	4631      	mov	r1, r6
 8009cb2:	4628      	mov	r0, r5
 8009cb4:	47b8      	blx	r7
 8009cb6:	3001      	adds	r0, #1
 8009cb8:	f43f aef7 	beq.w	8009aaa <_printf_float+0xc2>
 8009cbc:	f109 0901 	add.w	r9, r9, #1
 8009cc0:	e7ee      	b.n	8009ca0 <_printf_float+0x2b8>
 8009cc2:	bf00      	nop
 8009cc4:	7fefffff 	.word	0x7fefffff
 8009cc8:	0800c618 	.word	0x0800c618
 8009ccc:	0800c61c 	.word	0x0800c61c
 8009cd0:	0800c624 	.word	0x0800c624
 8009cd4:	0800c620 	.word	0x0800c620
 8009cd8:	0800c628 	.word	0x0800c628
 8009cdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	bfa8      	it	ge
 8009ce4:	461a      	movge	r2, r3
 8009ce6:	2a00      	cmp	r2, #0
 8009ce8:	4691      	mov	r9, r2
 8009cea:	dc37      	bgt.n	8009d5c <_printf_float+0x374>
 8009cec:	f04f 0b00 	mov.w	fp, #0
 8009cf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009cf4:	f104 021a 	add.w	r2, r4, #26
 8009cf8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009cfa:	9305      	str	r3, [sp, #20]
 8009cfc:	eba3 0309 	sub.w	r3, r3, r9
 8009d00:	455b      	cmp	r3, fp
 8009d02:	dc33      	bgt.n	8009d6c <_printf_float+0x384>
 8009d04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	db3b      	blt.n	8009d84 <_printf_float+0x39c>
 8009d0c:	6823      	ldr	r3, [r4, #0]
 8009d0e:	07da      	lsls	r2, r3, #31
 8009d10:	d438      	bmi.n	8009d84 <_printf_float+0x39c>
 8009d12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d14:	9b05      	ldr	r3, [sp, #20]
 8009d16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d18:	1ad3      	subs	r3, r2, r3
 8009d1a:	eba2 0901 	sub.w	r9, r2, r1
 8009d1e:	4599      	cmp	r9, r3
 8009d20:	bfa8      	it	ge
 8009d22:	4699      	movge	r9, r3
 8009d24:	f1b9 0f00 	cmp.w	r9, #0
 8009d28:	dc35      	bgt.n	8009d96 <_printf_float+0x3ae>
 8009d2a:	f04f 0800 	mov.w	r8, #0
 8009d2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d32:	f104 0a1a 	add.w	sl, r4, #26
 8009d36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d3a:	1a9b      	subs	r3, r3, r2
 8009d3c:	eba3 0309 	sub.w	r3, r3, r9
 8009d40:	4543      	cmp	r3, r8
 8009d42:	f77f af79 	ble.w	8009c38 <_printf_float+0x250>
 8009d46:	2301      	movs	r3, #1
 8009d48:	4652      	mov	r2, sl
 8009d4a:	4631      	mov	r1, r6
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	47b8      	blx	r7
 8009d50:	3001      	adds	r0, #1
 8009d52:	f43f aeaa 	beq.w	8009aaa <_printf_float+0xc2>
 8009d56:	f108 0801 	add.w	r8, r8, #1
 8009d5a:	e7ec      	b.n	8009d36 <_printf_float+0x34e>
 8009d5c:	4613      	mov	r3, r2
 8009d5e:	4631      	mov	r1, r6
 8009d60:	4642      	mov	r2, r8
 8009d62:	4628      	mov	r0, r5
 8009d64:	47b8      	blx	r7
 8009d66:	3001      	adds	r0, #1
 8009d68:	d1c0      	bne.n	8009cec <_printf_float+0x304>
 8009d6a:	e69e      	b.n	8009aaa <_printf_float+0xc2>
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	4631      	mov	r1, r6
 8009d70:	4628      	mov	r0, r5
 8009d72:	9205      	str	r2, [sp, #20]
 8009d74:	47b8      	blx	r7
 8009d76:	3001      	adds	r0, #1
 8009d78:	f43f ae97 	beq.w	8009aaa <_printf_float+0xc2>
 8009d7c:	9a05      	ldr	r2, [sp, #20]
 8009d7e:	f10b 0b01 	add.w	fp, fp, #1
 8009d82:	e7b9      	b.n	8009cf8 <_printf_float+0x310>
 8009d84:	ee18 3a10 	vmov	r3, s16
 8009d88:	4652      	mov	r2, sl
 8009d8a:	4631      	mov	r1, r6
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	47b8      	blx	r7
 8009d90:	3001      	adds	r0, #1
 8009d92:	d1be      	bne.n	8009d12 <_printf_float+0x32a>
 8009d94:	e689      	b.n	8009aaa <_printf_float+0xc2>
 8009d96:	9a05      	ldr	r2, [sp, #20]
 8009d98:	464b      	mov	r3, r9
 8009d9a:	4442      	add	r2, r8
 8009d9c:	4631      	mov	r1, r6
 8009d9e:	4628      	mov	r0, r5
 8009da0:	47b8      	blx	r7
 8009da2:	3001      	adds	r0, #1
 8009da4:	d1c1      	bne.n	8009d2a <_printf_float+0x342>
 8009da6:	e680      	b.n	8009aaa <_printf_float+0xc2>
 8009da8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009daa:	2a01      	cmp	r2, #1
 8009dac:	dc01      	bgt.n	8009db2 <_printf_float+0x3ca>
 8009dae:	07db      	lsls	r3, r3, #31
 8009db0:	d538      	bpl.n	8009e24 <_printf_float+0x43c>
 8009db2:	2301      	movs	r3, #1
 8009db4:	4642      	mov	r2, r8
 8009db6:	4631      	mov	r1, r6
 8009db8:	4628      	mov	r0, r5
 8009dba:	47b8      	blx	r7
 8009dbc:	3001      	adds	r0, #1
 8009dbe:	f43f ae74 	beq.w	8009aaa <_printf_float+0xc2>
 8009dc2:	ee18 3a10 	vmov	r3, s16
 8009dc6:	4652      	mov	r2, sl
 8009dc8:	4631      	mov	r1, r6
 8009dca:	4628      	mov	r0, r5
 8009dcc:	47b8      	blx	r7
 8009dce:	3001      	adds	r0, #1
 8009dd0:	f43f ae6b 	beq.w	8009aaa <_printf_float+0xc2>
 8009dd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009dd8:	2200      	movs	r2, #0
 8009dda:	2300      	movs	r3, #0
 8009ddc:	f7f6 fe7c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009de0:	b9d8      	cbnz	r0, 8009e1a <_printf_float+0x432>
 8009de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009de4:	f108 0201 	add.w	r2, r8, #1
 8009de8:	3b01      	subs	r3, #1
 8009dea:	4631      	mov	r1, r6
 8009dec:	4628      	mov	r0, r5
 8009dee:	47b8      	blx	r7
 8009df0:	3001      	adds	r0, #1
 8009df2:	d10e      	bne.n	8009e12 <_printf_float+0x42a>
 8009df4:	e659      	b.n	8009aaa <_printf_float+0xc2>
 8009df6:	2301      	movs	r3, #1
 8009df8:	4652      	mov	r2, sl
 8009dfa:	4631      	mov	r1, r6
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	47b8      	blx	r7
 8009e00:	3001      	adds	r0, #1
 8009e02:	f43f ae52 	beq.w	8009aaa <_printf_float+0xc2>
 8009e06:	f108 0801 	add.w	r8, r8, #1
 8009e0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	4543      	cmp	r3, r8
 8009e10:	dcf1      	bgt.n	8009df6 <_printf_float+0x40e>
 8009e12:	464b      	mov	r3, r9
 8009e14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009e18:	e6dc      	b.n	8009bd4 <_printf_float+0x1ec>
 8009e1a:	f04f 0800 	mov.w	r8, #0
 8009e1e:	f104 0a1a 	add.w	sl, r4, #26
 8009e22:	e7f2      	b.n	8009e0a <_printf_float+0x422>
 8009e24:	2301      	movs	r3, #1
 8009e26:	4642      	mov	r2, r8
 8009e28:	e7df      	b.n	8009dea <_printf_float+0x402>
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	464a      	mov	r2, r9
 8009e2e:	4631      	mov	r1, r6
 8009e30:	4628      	mov	r0, r5
 8009e32:	47b8      	blx	r7
 8009e34:	3001      	adds	r0, #1
 8009e36:	f43f ae38 	beq.w	8009aaa <_printf_float+0xc2>
 8009e3a:	f108 0801 	add.w	r8, r8, #1
 8009e3e:	68e3      	ldr	r3, [r4, #12]
 8009e40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e42:	1a5b      	subs	r3, r3, r1
 8009e44:	4543      	cmp	r3, r8
 8009e46:	dcf0      	bgt.n	8009e2a <_printf_float+0x442>
 8009e48:	e6fa      	b.n	8009c40 <_printf_float+0x258>
 8009e4a:	f04f 0800 	mov.w	r8, #0
 8009e4e:	f104 0919 	add.w	r9, r4, #25
 8009e52:	e7f4      	b.n	8009e3e <_printf_float+0x456>

08009e54 <_printf_common>:
 8009e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e58:	4616      	mov	r6, r2
 8009e5a:	4699      	mov	r9, r3
 8009e5c:	688a      	ldr	r2, [r1, #8]
 8009e5e:	690b      	ldr	r3, [r1, #16]
 8009e60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e64:	4293      	cmp	r3, r2
 8009e66:	bfb8      	it	lt
 8009e68:	4613      	movlt	r3, r2
 8009e6a:	6033      	str	r3, [r6, #0]
 8009e6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e70:	4607      	mov	r7, r0
 8009e72:	460c      	mov	r4, r1
 8009e74:	b10a      	cbz	r2, 8009e7a <_printf_common+0x26>
 8009e76:	3301      	adds	r3, #1
 8009e78:	6033      	str	r3, [r6, #0]
 8009e7a:	6823      	ldr	r3, [r4, #0]
 8009e7c:	0699      	lsls	r1, r3, #26
 8009e7e:	bf42      	ittt	mi
 8009e80:	6833      	ldrmi	r3, [r6, #0]
 8009e82:	3302      	addmi	r3, #2
 8009e84:	6033      	strmi	r3, [r6, #0]
 8009e86:	6825      	ldr	r5, [r4, #0]
 8009e88:	f015 0506 	ands.w	r5, r5, #6
 8009e8c:	d106      	bne.n	8009e9c <_printf_common+0x48>
 8009e8e:	f104 0a19 	add.w	sl, r4, #25
 8009e92:	68e3      	ldr	r3, [r4, #12]
 8009e94:	6832      	ldr	r2, [r6, #0]
 8009e96:	1a9b      	subs	r3, r3, r2
 8009e98:	42ab      	cmp	r3, r5
 8009e9a:	dc26      	bgt.n	8009eea <_printf_common+0x96>
 8009e9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ea0:	1e13      	subs	r3, r2, #0
 8009ea2:	6822      	ldr	r2, [r4, #0]
 8009ea4:	bf18      	it	ne
 8009ea6:	2301      	movne	r3, #1
 8009ea8:	0692      	lsls	r2, r2, #26
 8009eaa:	d42b      	bmi.n	8009f04 <_printf_common+0xb0>
 8009eac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009eb0:	4649      	mov	r1, r9
 8009eb2:	4638      	mov	r0, r7
 8009eb4:	47c0      	blx	r8
 8009eb6:	3001      	adds	r0, #1
 8009eb8:	d01e      	beq.n	8009ef8 <_printf_common+0xa4>
 8009eba:	6823      	ldr	r3, [r4, #0]
 8009ebc:	68e5      	ldr	r5, [r4, #12]
 8009ebe:	6832      	ldr	r2, [r6, #0]
 8009ec0:	f003 0306 	and.w	r3, r3, #6
 8009ec4:	2b04      	cmp	r3, #4
 8009ec6:	bf08      	it	eq
 8009ec8:	1aad      	subeq	r5, r5, r2
 8009eca:	68a3      	ldr	r3, [r4, #8]
 8009ecc:	6922      	ldr	r2, [r4, #16]
 8009ece:	bf0c      	ite	eq
 8009ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ed4:	2500      	movne	r5, #0
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	bfc4      	itt	gt
 8009eda:	1a9b      	subgt	r3, r3, r2
 8009edc:	18ed      	addgt	r5, r5, r3
 8009ede:	2600      	movs	r6, #0
 8009ee0:	341a      	adds	r4, #26
 8009ee2:	42b5      	cmp	r5, r6
 8009ee4:	d11a      	bne.n	8009f1c <_printf_common+0xc8>
 8009ee6:	2000      	movs	r0, #0
 8009ee8:	e008      	b.n	8009efc <_printf_common+0xa8>
 8009eea:	2301      	movs	r3, #1
 8009eec:	4652      	mov	r2, sl
 8009eee:	4649      	mov	r1, r9
 8009ef0:	4638      	mov	r0, r7
 8009ef2:	47c0      	blx	r8
 8009ef4:	3001      	adds	r0, #1
 8009ef6:	d103      	bne.n	8009f00 <_printf_common+0xac>
 8009ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8009efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f00:	3501      	adds	r5, #1
 8009f02:	e7c6      	b.n	8009e92 <_printf_common+0x3e>
 8009f04:	18e1      	adds	r1, r4, r3
 8009f06:	1c5a      	adds	r2, r3, #1
 8009f08:	2030      	movs	r0, #48	; 0x30
 8009f0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f0e:	4422      	add	r2, r4
 8009f10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f18:	3302      	adds	r3, #2
 8009f1a:	e7c7      	b.n	8009eac <_printf_common+0x58>
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	4622      	mov	r2, r4
 8009f20:	4649      	mov	r1, r9
 8009f22:	4638      	mov	r0, r7
 8009f24:	47c0      	blx	r8
 8009f26:	3001      	adds	r0, #1
 8009f28:	d0e6      	beq.n	8009ef8 <_printf_common+0xa4>
 8009f2a:	3601      	adds	r6, #1
 8009f2c:	e7d9      	b.n	8009ee2 <_printf_common+0x8e>
	...

08009f30 <_printf_i>:
 8009f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f34:	460c      	mov	r4, r1
 8009f36:	4691      	mov	r9, r2
 8009f38:	7e27      	ldrb	r7, [r4, #24]
 8009f3a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009f3c:	2f78      	cmp	r7, #120	; 0x78
 8009f3e:	4680      	mov	r8, r0
 8009f40:	469a      	mov	sl, r3
 8009f42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f46:	d807      	bhi.n	8009f58 <_printf_i+0x28>
 8009f48:	2f62      	cmp	r7, #98	; 0x62
 8009f4a:	d80a      	bhi.n	8009f62 <_printf_i+0x32>
 8009f4c:	2f00      	cmp	r7, #0
 8009f4e:	f000 80d8 	beq.w	800a102 <_printf_i+0x1d2>
 8009f52:	2f58      	cmp	r7, #88	; 0x58
 8009f54:	f000 80a3 	beq.w	800a09e <_printf_i+0x16e>
 8009f58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009f5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f60:	e03a      	b.n	8009fd8 <_printf_i+0xa8>
 8009f62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f66:	2b15      	cmp	r3, #21
 8009f68:	d8f6      	bhi.n	8009f58 <_printf_i+0x28>
 8009f6a:	a001      	add	r0, pc, #4	; (adr r0, 8009f70 <_printf_i+0x40>)
 8009f6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009f70:	08009fc9 	.word	0x08009fc9
 8009f74:	08009fdd 	.word	0x08009fdd
 8009f78:	08009f59 	.word	0x08009f59
 8009f7c:	08009f59 	.word	0x08009f59
 8009f80:	08009f59 	.word	0x08009f59
 8009f84:	08009f59 	.word	0x08009f59
 8009f88:	08009fdd 	.word	0x08009fdd
 8009f8c:	08009f59 	.word	0x08009f59
 8009f90:	08009f59 	.word	0x08009f59
 8009f94:	08009f59 	.word	0x08009f59
 8009f98:	08009f59 	.word	0x08009f59
 8009f9c:	0800a0e9 	.word	0x0800a0e9
 8009fa0:	0800a00d 	.word	0x0800a00d
 8009fa4:	0800a0cb 	.word	0x0800a0cb
 8009fa8:	08009f59 	.word	0x08009f59
 8009fac:	08009f59 	.word	0x08009f59
 8009fb0:	0800a10b 	.word	0x0800a10b
 8009fb4:	08009f59 	.word	0x08009f59
 8009fb8:	0800a00d 	.word	0x0800a00d
 8009fbc:	08009f59 	.word	0x08009f59
 8009fc0:	08009f59 	.word	0x08009f59
 8009fc4:	0800a0d3 	.word	0x0800a0d3
 8009fc8:	680b      	ldr	r3, [r1, #0]
 8009fca:	1d1a      	adds	r2, r3, #4
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	600a      	str	r2, [r1, #0]
 8009fd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009fd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009fd8:	2301      	movs	r3, #1
 8009fda:	e0a3      	b.n	800a124 <_printf_i+0x1f4>
 8009fdc:	6825      	ldr	r5, [r4, #0]
 8009fde:	6808      	ldr	r0, [r1, #0]
 8009fe0:	062e      	lsls	r6, r5, #24
 8009fe2:	f100 0304 	add.w	r3, r0, #4
 8009fe6:	d50a      	bpl.n	8009ffe <_printf_i+0xce>
 8009fe8:	6805      	ldr	r5, [r0, #0]
 8009fea:	600b      	str	r3, [r1, #0]
 8009fec:	2d00      	cmp	r5, #0
 8009fee:	da03      	bge.n	8009ff8 <_printf_i+0xc8>
 8009ff0:	232d      	movs	r3, #45	; 0x2d
 8009ff2:	426d      	negs	r5, r5
 8009ff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ff8:	485e      	ldr	r0, [pc, #376]	; (800a174 <_printf_i+0x244>)
 8009ffa:	230a      	movs	r3, #10
 8009ffc:	e019      	b.n	800a032 <_printf_i+0x102>
 8009ffe:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a002:	6805      	ldr	r5, [r0, #0]
 800a004:	600b      	str	r3, [r1, #0]
 800a006:	bf18      	it	ne
 800a008:	b22d      	sxthne	r5, r5
 800a00a:	e7ef      	b.n	8009fec <_printf_i+0xbc>
 800a00c:	680b      	ldr	r3, [r1, #0]
 800a00e:	6825      	ldr	r5, [r4, #0]
 800a010:	1d18      	adds	r0, r3, #4
 800a012:	6008      	str	r0, [r1, #0]
 800a014:	0628      	lsls	r0, r5, #24
 800a016:	d501      	bpl.n	800a01c <_printf_i+0xec>
 800a018:	681d      	ldr	r5, [r3, #0]
 800a01a:	e002      	b.n	800a022 <_printf_i+0xf2>
 800a01c:	0669      	lsls	r1, r5, #25
 800a01e:	d5fb      	bpl.n	800a018 <_printf_i+0xe8>
 800a020:	881d      	ldrh	r5, [r3, #0]
 800a022:	4854      	ldr	r0, [pc, #336]	; (800a174 <_printf_i+0x244>)
 800a024:	2f6f      	cmp	r7, #111	; 0x6f
 800a026:	bf0c      	ite	eq
 800a028:	2308      	moveq	r3, #8
 800a02a:	230a      	movne	r3, #10
 800a02c:	2100      	movs	r1, #0
 800a02e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a032:	6866      	ldr	r6, [r4, #4]
 800a034:	60a6      	str	r6, [r4, #8]
 800a036:	2e00      	cmp	r6, #0
 800a038:	bfa2      	ittt	ge
 800a03a:	6821      	ldrge	r1, [r4, #0]
 800a03c:	f021 0104 	bicge.w	r1, r1, #4
 800a040:	6021      	strge	r1, [r4, #0]
 800a042:	b90d      	cbnz	r5, 800a048 <_printf_i+0x118>
 800a044:	2e00      	cmp	r6, #0
 800a046:	d04d      	beq.n	800a0e4 <_printf_i+0x1b4>
 800a048:	4616      	mov	r6, r2
 800a04a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a04e:	fb03 5711 	mls	r7, r3, r1, r5
 800a052:	5dc7      	ldrb	r7, [r0, r7]
 800a054:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a058:	462f      	mov	r7, r5
 800a05a:	42bb      	cmp	r3, r7
 800a05c:	460d      	mov	r5, r1
 800a05e:	d9f4      	bls.n	800a04a <_printf_i+0x11a>
 800a060:	2b08      	cmp	r3, #8
 800a062:	d10b      	bne.n	800a07c <_printf_i+0x14c>
 800a064:	6823      	ldr	r3, [r4, #0]
 800a066:	07df      	lsls	r7, r3, #31
 800a068:	d508      	bpl.n	800a07c <_printf_i+0x14c>
 800a06a:	6923      	ldr	r3, [r4, #16]
 800a06c:	6861      	ldr	r1, [r4, #4]
 800a06e:	4299      	cmp	r1, r3
 800a070:	bfde      	ittt	le
 800a072:	2330      	movle	r3, #48	; 0x30
 800a074:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a078:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a07c:	1b92      	subs	r2, r2, r6
 800a07e:	6122      	str	r2, [r4, #16]
 800a080:	f8cd a000 	str.w	sl, [sp]
 800a084:	464b      	mov	r3, r9
 800a086:	aa03      	add	r2, sp, #12
 800a088:	4621      	mov	r1, r4
 800a08a:	4640      	mov	r0, r8
 800a08c:	f7ff fee2 	bl	8009e54 <_printf_common>
 800a090:	3001      	adds	r0, #1
 800a092:	d14c      	bne.n	800a12e <_printf_i+0x1fe>
 800a094:	f04f 30ff 	mov.w	r0, #4294967295
 800a098:	b004      	add	sp, #16
 800a09a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a09e:	4835      	ldr	r0, [pc, #212]	; (800a174 <_printf_i+0x244>)
 800a0a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a0a4:	6823      	ldr	r3, [r4, #0]
 800a0a6:	680e      	ldr	r6, [r1, #0]
 800a0a8:	061f      	lsls	r7, r3, #24
 800a0aa:	f856 5b04 	ldr.w	r5, [r6], #4
 800a0ae:	600e      	str	r6, [r1, #0]
 800a0b0:	d514      	bpl.n	800a0dc <_printf_i+0x1ac>
 800a0b2:	07d9      	lsls	r1, r3, #31
 800a0b4:	bf44      	itt	mi
 800a0b6:	f043 0320 	orrmi.w	r3, r3, #32
 800a0ba:	6023      	strmi	r3, [r4, #0]
 800a0bc:	b91d      	cbnz	r5, 800a0c6 <_printf_i+0x196>
 800a0be:	6823      	ldr	r3, [r4, #0]
 800a0c0:	f023 0320 	bic.w	r3, r3, #32
 800a0c4:	6023      	str	r3, [r4, #0]
 800a0c6:	2310      	movs	r3, #16
 800a0c8:	e7b0      	b.n	800a02c <_printf_i+0xfc>
 800a0ca:	6823      	ldr	r3, [r4, #0]
 800a0cc:	f043 0320 	orr.w	r3, r3, #32
 800a0d0:	6023      	str	r3, [r4, #0]
 800a0d2:	2378      	movs	r3, #120	; 0x78
 800a0d4:	4828      	ldr	r0, [pc, #160]	; (800a178 <_printf_i+0x248>)
 800a0d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a0da:	e7e3      	b.n	800a0a4 <_printf_i+0x174>
 800a0dc:	065e      	lsls	r6, r3, #25
 800a0de:	bf48      	it	mi
 800a0e0:	b2ad      	uxthmi	r5, r5
 800a0e2:	e7e6      	b.n	800a0b2 <_printf_i+0x182>
 800a0e4:	4616      	mov	r6, r2
 800a0e6:	e7bb      	b.n	800a060 <_printf_i+0x130>
 800a0e8:	680b      	ldr	r3, [r1, #0]
 800a0ea:	6826      	ldr	r6, [r4, #0]
 800a0ec:	6960      	ldr	r0, [r4, #20]
 800a0ee:	1d1d      	adds	r5, r3, #4
 800a0f0:	600d      	str	r5, [r1, #0]
 800a0f2:	0635      	lsls	r5, r6, #24
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	d501      	bpl.n	800a0fc <_printf_i+0x1cc>
 800a0f8:	6018      	str	r0, [r3, #0]
 800a0fa:	e002      	b.n	800a102 <_printf_i+0x1d2>
 800a0fc:	0671      	lsls	r1, r6, #25
 800a0fe:	d5fb      	bpl.n	800a0f8 <_printf_i+0x1c8>
 800a100:	8018      	strh	r0, [r3, #0]
 800a102:	2300      	movs	r3, #0
 800a104:	6123      	str	r3, [r4, #16]
 800a106:	4616      	mov	r6, r2
 800a108:	e7ba      	b.n	800a080 <_printf_i+0x150>
 800a10a:	680b      	ldr	r3, [r1, #0]
 800a10c:	1d1a      	adds	r2, r3, #4
 800a10e:	600a      	str	r2, [r1, #0]
 800a110:	681e      	ldr	r6, [r3, #0]
 800a112:	6862      	ldr	r2, [r4, #4]
 800a114:	2100      	movs	r1, #0
 800a116:	4630      	mov	r0, r6
 800a118:	f7f6 f86a 	bl	80001f0 <memchr>
 800a11c:	b108      	cbz	r0, 800a122 <_printf_i+0x1f2>
 800a11e:	1b80      	subs	r0, r0, r6
 800a120:	6060      	str	r0, [r4, #4]
 800a122:	6863      	ldr	r3, [r4, #4]
 800a124:	6123      	str	r3, [r4, #16]
 800a126:	2300      	movs	r3, #0
 800a128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a12c:	e7a8      	b.n	800a080 <_printf_i+0x150>
 800a12e:	6923      	ldr	r3, [r4, #16]
 800a130:	4632      	mov	r2, r6
 800a132:	4649      	mov	r1, r9
 800a134:	4640      	mov	r0, r8
 800a136:	47d0      	blx	sl
 800a138:	3001      	adds	r0, #1
 800a13a:	d0ab      	beq.n	800a094 <_printf_i+0x164>
 800a13c:	6823      	ldr	r3, [r4, #0]
 800a13e:	079b      	lsls	r3, r3, #30
 800a140:	d413      	bmi.n	800a16a <_printf_i+0x23a>
 800a142:	68e0      	ldr	r0, [r4, #12]
 800a144:	9b03      	ldr	r3, [sp, #12]
 800a146:	4298      	cmp	r0, r3
 800a148:	bfb8      	it	lt
 800a14a:	4618      	movlt	r0, r3
 800a14c:	e7a4      	b.n	800a098 <_printf_i+0x168>
 800a14e:	2301      	movs	r3, #1
 800a150:	4632      	mov	r2, r6
 800a152:	4649      	mov	r1, r9
 800a154:	4640      	mov	r0, r8
 800a156:	47d0      	blx	sl
 800a158:	3001      	adds	r0, #1
 800a15a:	d09b      	beq.n	800a094 <_printf_i+0x164>
 800a15c:	3501      	adds	r5, #1
 800a15e:	68e3      	ldr	r3, [r4, #12]
 800a160:	9903      	ldr	r1, [sp, #12]
 800a162:	1a5b      	subs	r3, r3, r1
 800a164:	42ab      	cmp	r3, r5
 800a166:	dcf2      	bgt.n	800a14e <_printf_i+0x21e>
 800a168:	e7eb      	b.n	800a142 <_printf_i+0x212>
 800a16a:	2500      	movs	r5, #0
 800a16c:	f104 0619 	add.w	r6, r4, #25
 800a170:	e7f5      	b.n	800a15e <_printf_i+0x22e>
 800a172:	bf00      	nop
 800a174:	0800c62a 	.word	0x0800c62a
 800a178:	0800c63b 	.word	0x0800c63b

0800a17c <iprintf>:
 800a17c:	b40f      	push	{r0, r1, r2, r3}
 800a17e:	4b0a      	ldr	r3, [pc, #40]	; (800a1a8 <iprintf+0x2c>)
 800a180:	b513      	push	{r0, r1, r4, lr}
 800a182:	681c      	ldr	r4, [r3, #0]
 800a184:	b124      	cbz	r4, 800a190 <iprintf+0x14>
 800a186:	69a3      	ldr	r3, [r4, #24]
 800a188:	b913      	cbnz	r3, 800a190 <iprintf+0x14>
 800a18a:	4620      	mov	r0, r4
 800a18c:	f001 f902 	bl	800b394 <__sinit>
 800a190:	ab05      	add	r3, sp, #20
 800a192:	9a04      	ldr	r2, [sp, #16]
 800a194:	68a1      	ldr	r1, [r4, #8]
 800a196:	9301      	str	r3, [sp, #4]
 800a198:	4620      	mov	r0, r4
 800a19a:	f001 fe6f 	bl	800be7c <_vfiprintf_r>
 800a19e:	b002      	add	sp, #8
 800a1a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1a4:	b004      	add	sp, #16
 800a1a6:	4770      	bx	lr
 800a1a8:	2000003c 	.word	0x2000003c

0800a1ac <putchar>:
 800a1ac:	4b09      	ldr	r3, [pc, #36]	; (800a1d4 <putchar+0x28>)
 800a1ae:	b513      	push	{r0, r1, r4, lr}
 800a1b0:	681c      	ldr	r4, [r3, #0]
 800a1b2:	4601      	mov	r1, r0
 800a1b4:	b134      	cbz	r4, 800a1c4 <putchar+0x18>
 800a1b6:	69a3      	ldr	r3, [r4, #24]
 800a1b8:	b923      	cbnz	r3, 800a1c4 <putchar+0x18>
 800a1ba:	9001      	str	r0, [sp, #4]
 800a1bc:	4620      	mov	r0, r4
 800a1be:	f001 f8e9 	bl	800b394 <__sinit>
 800a1c2:	9901      	ldr	r1, [sp, #4]
 800a1c4:	68a2      	ldr	r2, [r4, #8]
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	b002      	add	sp, #8
 800a1ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1ce:	f001 bf85 	b.w	800c0dc <_putc_r>
 800a1d2:	bf00      	nop
 800a1d4:	2000003c 	.word	0x2000003c

0800a1d8 <_puts_r>:
 800a1d8:	b570      	push	{r4, r5, r6, lr}
 800a1da:	460e      	mov	r6, r1
 800a1dc:	4605      	mov	r5, r0
 800a1de:	b118      	cbz	r0, 800a1e8 <_puts_r+0x10>
 800a1e0:	6983      	ldr	r3, [r0, #24]
 800a1e2:	b90b      	cbnz	r3, 800a1e8 <_puts_r+0x10>
 800a1e4:	f001 f8d6 	bl	800b394 <__sinit>
 800a1e8:	69ab      	ldr	r3, [r5, #24]
 800a1ea:	68ac      	ldr	r4, [r5, #8]
 800a1ec:	b913      	cbnz	r3, 800a1f4 <_puts_r+0x1c>
 800a1ee:	4628      	mov	r0, r5
 800a1f0:	f001 f8d0 	bl	800b394 <__sinit>
 800a1f4:	4b2c      	ldr	r3, [pc, #176]	; (800a2a8 <_puts_r+0xd0>)
 800a1f6:	429c      	cmp	r4, r3
 800a1f8:	d120      	bne.n	800a23c <_puts_r+0x64>
 800a1fa:	686c      	ldr	r4, [r5, #4]
 800a1fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1fe:	07db      	lsls	r3, r3, #31
 800a200:	d405      	bmi.n	800a20e <_puts_r+0x36>
 800a202:	89a3      	ldrh	r3, [r4, #12]
 800a204:	0598      	lsls	r0, r3, #22
 800a206:	d402      	bmi.n	800a20e <_puts_r+0x36>
 800a208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a20a:	f001 f966 	bl	800b4da <__retarget_lock_acquire_recursive>
 800a20e:	89a3      	ldrh	r3, [r4, #12]
 800a210:	0719      	lsls	r1, r3, #28
 800a212:	d51d      	bpl.n	800a250 <_puts_r+0x78>
 800a214:	6923      	ldr	r3, [r4, #16]
 800a216:	b1db      	cbz	r3, 800a250 <_puts_r+0x78>
 800a218:	3e01      	subs	r6, #1
 800a21a:	68a3      	ldr	r3, [r4, #8]
 800a21c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a220:	3b01      	subs	r3, #1
 800a222:	60a3      	str	r3, [r4, #8]
 800a224:	bb39      	cbnz	r1, 800a276 <_puts_r+0x9e>
 800a226:	2b00      	cmp	r3, #0
 800a228:	da38      	bge.n	800a29c <_puts_r+0xc4>
 800a22a:	4622      	mov	r2, r4
 800a22c:	210a      	movs	r1, #10
 800a22e:	4628      	mov	r0, r5
 800a230:	f000 f85c 	bl	800a2ec <__swbuf_r>
 800a234:	3001      	adds	r0, #1
 800a236:	d011      	beq.n	800a25c <_puts_r+0x84>
 800a238:	250a      	movs	r5, #10
 800a23a:	e011      	b.n	800a260 <_puts_r+0x88>
 800a23c:	4b1b      	ldr	r3, [pc, #108]	; (800a2ac <_puts_r+0xd4>)
 800a23e:	429c      	cmp	r4, r3
 800a240:	d101      	bne.n	800a246 <_puts_r+0x6e>
 800a242:	68ac      	ldr	r4, [r5, #8]
 800a244:	e7da      	b.n	800a1fc <_puts_r+0x24>
 800a246:	4b1a      	ldr	r3, [pc, #104]	; (800a2b0 <_puts_r+0xd8>)
 800a248:	429c      	cmp	r4, r3
 800a24a:	bf08      	it	eq
 800a24c:	68ec      	ldreq	r4, [r5, #12]
 800a24e:	e7d5      	b.n	800a1fc <_puts_r+0x24>
 800a250:	4621      	mov	r1, r4
 800a252:	4628      	mov	r0, r5
 800a254:	f000 f89c 	bl	800a390 <__swsetup_r>
 800a258:	2800      	cmp	r0, #0
 800a25a:	d0dd      	beq.n	800a218 <_puts_r+0x40>
 800a25c:	f04f 35ff 	mov.w	r5, #4294967295
 800a260:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a262:	07da      	lsls	r2, r3, #31
 800a264:	d405      	bmi.n	800a272 <_puts_r+0x9a>
 800a266:	89a3      	ldrh	r3, [r4, #12]
 800a268:	059b      	lsls	r3, r3, #22
 800a26a:	d402      	bmi.n	800a272 <_puts_r+0x9a>
 800a26c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a26e:	f001 f935 	bl	800b4dc <__retarget_lock_release_recursive>
 800a272:	4628      	mov	r0, r5
 800a274:	bd70      	pop	{r4, r5, r6, pc}
 800a276:	2b00      	cmp	r3, #0
 800a278:	da04      	bge.n	800a284 <_puts_r+0xac>
 800a27a:	69a2      	ldr	r2, [r4, #24]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	dc06      	bgt.n	800a28e <_puts_r+0xb6>
 800a280:	290a      	cmp	r1, #10
 800a282:	d004      	beq.n	800a28e <_puts_r+0xb6>
 800a284:	6823      	ldr	r3, [r4, #0]
 800a286:	1c5a      	adds	r2, r3, #1
 800a288:	6022      	str	r2, [r4, #0]
 800a28a:	7019      	strb	r1, [r3, #0]
 800a28c:	e7c5      	b.n	800a21a <_puts_r+0x42>
 800a28e:	4622      	mov	r2, r4
 800a290:	4628      	mov	r0, r5
 800a292:	f000 f82b 	bl	800a2ec <__swbuf_r>
 800a296:	3001      	adds	r0, #1
 800a298:	d1bf      	bne.n	800a21a <_puts_r+0x42>
 800a29a:	e7df      	b.n	800a25c <_puts_r+0x84>
 800a29c:	6823      	ldr	r3, [r4, #0]
 800a29e:	250a      	movs	r5, #10
 800a2a0:	1c5a      	adds	r2, r3, #1
 800a2a2:	6022      	str	r2, [r4, #0]
 800a2a4:	701d      	strb	r5, [r3, #0]
 800a2a6:	e7db      	b.n	800a260 <_puts_r+0x88>
 800a2a8:	0800c700 	.word	0x0800c700
 800a2ac:	0800c720 	.word	0x0800c720
 800a2b0:	0800c6e0 	.word	0x0800c6e0

0800a2b4 <puts>:
 800a2b4:	4b02      	ldr	r3, [pc, #8]	; (800a2c0 <puts+0xc>)
 800a2b6:	4601      	mov	r1, r0
 800a2b8:	6818      	ldr	r0, [r3, #0]
 800a2ba:	f7ff bf8d 	b.w	800a1d8 <_puts_r>
 800a2be:	bf00      	nop
 800a2c0:	2000003c 	.word	0x2000003c

0800a2c4 <strncpy>:
 800a2c4:	b510      	push	{r4, lr}
 800a2c6:	3901      	subs	r1, #1
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	b132      	cbz	r2, 800a2da <strncpy+0x16>
 800a2cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a2d0:	f803 4b01 	strb.w	r4, [r3], #1
 800a2d4:	3a01      	subs	r2, #1
 800a2d6:	2c00      	cmp	r4, #0
 800a2d8:	d1f7      	bne.n	800a2ca <strncpy+0x6>
 800a2da:	441a      	add	r2, r3
 800a2dc:	2100      	movs	r1, #0
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d100      	bne.n	800a2e4 <strncpy+0x20>
 800a2e2:	bd10      	pop	{r4, pc}
 800a2e4:	f803 1b01 	strb.w	r1, [r3], #1
 800a2e8:	e7f9      	b.n	800a2de <strncpy+0x1a>
	...

0800a2ec <__swbuf_r>:
 800a2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ee:	460e      	mov	r6, r1
 800a2f0:	4614      	mov	r4, r2
 800a2f2:	4605      	mov	r5, r0
 800a2f4:	b118      	cbz	r0, 800a2fe <__swbuf_r+0x12>
 800a2f6:	6983      	ldr	r3, [r0, #24]
 800a2f8:	b90b      	cbnz	r3, 800a2fe <__swbuf_r+0x12>
 800a2fa:	f001 f84b 	bl	800b394 <__sinit>
 800a2fe:	4b21      	ldr	r3, [pc, #132]	; (800a384 <__swbuf_r+0x98>)
 800a300:	429c      	cmp	r4, r3
 800a302:	d12b      	bne.n	800a35c <__swbuf_r+0x70>
 800a304:	686c      	ldr	r4, [r5, #4]
 800a306:	69a3      	ldr	r3, [r4, #24]
 800a308:	60a3      	str	r3, [r4, #8]
 800a30a:	89a3      	ldrh	r3, [r4, #12]
 800a30c:	071a      	lsls	r2, r3, #28
 800a30e:	d52f      	bpl.n	800a370 <__swbuf_r+0x84>
 800a310:	6923      	ldr	r3, [r4, #16]
 800a312:	b36b      	cbz	r3, 800a370 <__swbuf_r+0x84>
 800a314:	6923      	ldr	r3, [r4, #16]
 800a316:	6820      	ldr	r0, [r4, #0]
 800a318:	1ac0      	subs	r0, r0, r3
 800a31a:	6963      	ldr	r3, [r4, #20]
 800a31c:	b2f6      	uxtb	r6, r6
 800a31e:	4283      	cmp	r3, r0
 800a320:	4637      	mov	r7, r6
 800a322:	dc04      	bgt.n	800a32e <__swbuf_r+0x42>
 800a324:	4621      	mov	r1, r4
 800a326:	4628      	mov	r0, r5
 800a328:	f000 ffa0 	bl	800b26c <_fflush_r>
 800a32c:	bb30      	cbnz	r0, 800a37c <__swbuf_r+0x90>
 800a32e:	68a3      	ldr	r3, [r4, #8]
 800a330:	3b01      	subs	r3, #1
 800a332:	60a3      	str	r3, [r4, #8]
 800a334:	6823      	ldr	r3, [r4, #0]
 800a336:	1c5a      	adds	r2, r3, #1
 800a338:	6022      	str	r2, [r4, #0]
 800a33a:	701e      	strb	r6, [r3, #0]
 800a33c:	6963      	ldr	r3, [r4, #20]
 800a33e:	3001      	adds	r0, #1
 800a340:	4283      	cmp	r3, r0
 800a342:	d004      	beq.n	800a34e <__swbuf_r+0x62>
 800a344:	89a3      	ldrh	r3, [r4, #12]
 800a346:	07db      	lsls	r3, r3, #31
 800a348:	d506      	bpl.n	800a358 <__swbuf_r+0x6c>
 800a34a:	2e0a      	cmp	r6, #10
 800a34c:	d104      	bne.n	800a358 <__swbuf_r+0x6c>
 800a34e:	4621      	mov	r1, r4
 800a350:	4628      	mov	r0, r5
 800a352:	f000 ff8b 	bl	800b26c <_fflush_r>
 800a356:	b988      	cbnz	r0, 800a37c <__swbuf_r+0x90>
 800a358:	4638      	mov	r0, r7
 800a35a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a35c:	4b0a      	ldr	r3, [pc, #40]	; (800a388 <__swbuf_r+0x9c>)
 800a35e:	429c      	cmp	r4, r3
 800a360:	d101      	bne.n	800a366 <__swbuf_r+0x7a>
 800a362:	68ac      	ldr	r4, [r5, #8]
 800a364:	e7cf      	b.n	800a306 <__swbuf_r+0x1a>
 800a366:	4b09      	ldr	r3, [pc, #36]	; (800a38c <__swbuf_r+0xa0>)
 800a368:	429c      	cmp	r4, r3
 800a36a:	bf08      	it	eq
 800a36c:	68ec      	ldreq	r4, [r5, #12]
 800a36e:	e7ca      	b.n	800a306 <__swbuf_r+0x1a>
 800a370:	4621      	mov	r1, r4
 800a372:	4628      	mov	r0, r5
 800a374:	f000 f80c 	bl	800a390 <__swsetup_r>
 800a378:	2800      	cmp	r0, #0
 800a37a:	d0cb      	beq.n	800a314 <__swbuf_r+0x28>
 800a37c:	f04f 37ff 	mov.w	r7, #4294967295
 800a380:	e7ea      	b.n	800a358 <__swbuf_r+0x6c>
 800a382:	bf00      	nop
 800a384:	0800c700 	.word	0x0800c700
 800a388:	0800c720 	.word	0x0800c720
 800a38c:	0800c6e0 	.word	0x0800c6e0

0800a390 <__swsetup_r>:
 800a390:	4b32      	ldr	r3, [pc, #200]	; (800a45c <__swsetup_r+0xcc>)
 800a392:	b570      	push	{r4, r5, r6, lr}
 800a394:	681d      	ldr	r5, [r3, #0]
 800a396:	4606      	mov	r6, r0
 800a398:	460c      	mov	r4, r1
 800a39a:	b125      	cbz	r5, 800a3a6 <__swsetup_r+0x16>
 800a39c:	69ab      	ldr	r3, [r5, #24]
 800a39e:	b913      	cbnz	r3, 800a3a6 <__swsetup_r+0x16>
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	f000 fff7 	bl	800b394 <__sinit>
 800a3a6:	4b2e      	ldr	r3, [pc, #184]	; (800a460 <__swsetup_r+0xd0>)
 800a3a8:	429c      	cmp	r4, r3
 800a3aa:	d10f      	bne.n	800a3cc <__swsetup_r+0x3c>
 800a3ac:	686c      	ldr	r4, [r5, #4]
 800a3ae:	89a3      	ldrh	r3, [r4, #12]
 800a3b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3b4:	0719      	lsls	r1, r3, #28
 800a3b6:	d42c      	bmi.n	800a412 <__swsetup_r+0x82>
 800a3b8:	06dd      	lsls	r5, r3, #27
 800a3ba:	d411      	bmi.n	800a3e0 <__swsetup_r+0x50>
 800a3bc:	2309      	movs	r3, #9
 800a3be:	6033      	str	r3, [r6, #0]
 800a3c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a3c4:	81a3      	strh	r3, [r4, #12]
 800a3c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ca:	e03e      	b.n	800a44a <__swsetup_r+0xba>
 800a3cc:	4b25      	ldr	r3, [pc, #148]	; (800a464 <__swsetup_r+0xd4>)
 800a3ce:	429c      	cmp	r4, r3
 800a3d0:	d101      	bne.n	800a3d6 <__swsetup_r+0x46>
 800a3d2:	68ac      	ldr	r4, [r5, #8]
 800a3d4:	e7eb      	b.n	800a3ae <__swsetup_r+0x1e>
 800a3d6:	4b24      	ldr	r3, [pc, #144]	; (800a468 <__swsetup_r+0xd8>)
 800a3d8:	429c      	cmp	r4, r3
 800a3da:	bf08      	it	eq
 800a3dc:	68ec      	ldreq	r4, [r5, #12]
 800a3de:	e7e6      	b.n	800a3ae <__swsetup_r+0x1e>
 800a3e0:	0758      	lsls	r0, r3, #29
 800a3e2:	d512      	bpl.n	800a40a <__swsetup_r+0x7a>
 800a3e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3e6:	b141      	cbz	r1, 800a3fa <__swsetup_r+0x6a>
 800a3e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3ec:	4299      	cmp	r1, r3
 800a3ee:	d002      	beq.n	800a3f6 <__swsetup_r+0x66>
 800a3f0:	4630      	mov	r0, r6
 800a3f2:	f001 fc6f 	bl	800bcd4 <_free_r>
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	6363      	str	r3, [r4, #52]	; 0x34
 800a3fa:	89a3      	ldrh	r3, [r4, #12]
 800a3fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a400:	81a3      	strh	r3, [r4, #12]
 800a402:	2300      	movs	r3, #0
 800a404:	6063      	str	r3, [r4, #4]
 800a406:	6923      	ldr	r3, [r4, #16]
 800a408:	6023      	str	r3, [r4, #0]
 800a40a:	89a3      	ldrh	r3, [r4, #12]
 800a40c:	f043 0308 	orr.w	r3, r3, #8
 800a410:	81a3      	strh	r3, [r4, #12]
 800a412:	6923      	ldr	r3, [r4, #16]
 800a414:	b94b      	cbnz	r3, 800a42a <__swsetup_r+0x9a>
 800a416:	89a3      	ldrh	r3, [r4, #12]
 800a418:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a41c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a420:	d003      	beq.n	800a42a <__swsetup_r+0x9a>
 800a422:	4621      	mov	r1, r4
 800a424:	4630      	mov	r0, r6
 800a426:	f001 f87f 	bl	800b528 <__smakebuf_r>
 800a42a:	89a0      	ldrh	r0, [r4, #12]
 800a42c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a430:	f010 0301 	ands.w	r3, r0, #1
 800a434:	d00a      	beq.n	800a44c <__swsetup_r+0xbc>
 800a436:	2300      	movs	r3, #0
 800a438:	60a3      	str	r3, [r4, #8]
 800a43a:	6963      	ldr	r3, [r4, #20]
 800a43c:	425b      	negs	r3, r3
 800a43e:	61a3      	str	r3, [r4, #24]
 800a440:	6923      	ldr	r3, [r4, #16]
 800a442:	b943      	cbnz	r3, 800a456 <__swsetup_r+0xc6>
 800a444:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a448:	d1ba      	bne.n	800a3c0 <__swsetup_r+0x30>
 800a44a:	bd70      	pop	{r4, r5, r6, pc}
 800a44c:	0781      	lsls	r1, r0, #30
 800a44e:	bf58      	it	pl
 800a450:	6963      	ldrpl	r3, [r4, #20]
 800a452:	60a3      	str	r3, [r4, #8]
 800a454:	e7f4      	b.n	800a440 <__swsetup_r+0xb0>
 800a456:	2000      	movs	r0, #0
 800a458:	e7f7      	b.n	800a44a <__swsetup_r+0xba>
 800a45a:	bf00      	nop
 800a45c:	2000003c 	.word	0x2000003c
 800a460:	0800c700 	.word	0x0800c700
 800a464:	0800c720 	.word	0x0800c720
 800a468:	0800c6e0 	.word	0x0800c6e0

0800a46c <quorem>:
 800a46c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a470:	6903      	ldr	r3, [r0, #16]
 800a472:	690c      	ldr	r4, [r1, #16]
 800a474:	42a3      	cmp	r3, r4
 800a476:	4607      	mov	r7, r0
 800a478:	f2c0 8081 	blt.w	800a57e <quorem+0x112>
 800a47c:	3c01      	subs	r4, #1
 800a47e:	f101 0814 	add.w	r8, r1, #20
 800a482:	f100 0514 	add.w	r5, r0, #20
 800a486:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a48a:	9301      	str	r3, [sp, #4]
 800a48c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a490:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a494:	3301      	adds	r3, #1
 800a496:	429a      	cmp	r2, r3
 800a498:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a49c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a4a0:	fbb2 f6f3 	udiv	r6, r2, r3
 800a4a4:	d331      	bcc.n	800a50a <quorem+0x9e>
 800a4a6:	f04f 0e00 	mov.w	lr, #0
 800a4aa:	4640      	mov	r0, r8
 800a4ac:	46ac      	mov	ip, r5
 800a4ae:	46f2      	mov	sl, lr
 800a4b0:	f850 2b04 	ldr.w	r2, [r0], #4
 800a4b4:	b293      	uxth	r3, r2
 800a4b6:	fb06 e303 	mla	r3, r6, r3, lr
 800a4ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	ebaa 0303 	sub.w	r3, sl, r3
 800a4c4:	0c12      	lsrs	r2, r2, #16
 800a4c6:	f8dc a000 	ldr.w	sl, [ip]
 800a4ca:	fb06 e202 	mla	r2, r6, r2, lr
 800a4ce:	fa13 f38a 	uxtah	r3, r3, sl
 800a4d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a4d6:	fa1f fa82 	uxth.w	sl, r2
 800a4da:	f8dc 2000 	ldr.w	r2, [ip]
 800a4de:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a4e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4ec:	4581      	cmp	r9, r0
 800a4ee:	f84c 3b04 	str.w	r3, [ip], #4
 800a4f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a4f6:	d2db      	bcs.n	800a4b0 <quorem+0x44>
 800a4f8:	f855 300b 	ldr.w	r3, [r5, fp]
 800a4fc:	b92b      	cbnz	r3, 800a50a <quorem+0x9e>
 800a4fe:	9b01      	ldr	r3, [sp, #4]
 800a500:	3b04      	subs	r3, #4
 800a502:	429d      	cmp	r5, r3
 800a504:	461a      	mov	r2, r3
 800a506:	d32e      	bcc.n	800a566 <quorem+0xfa>
 800a508:	613c      	str	r4, [r7, #16]
 800a50a:	4638      	mov	r0, r7
 800a50c:	f001 fad2 	bl	800bab4 <__mcmp>
 800a510:	2800      	cmp	r0, #0
 800a512:	db24      	blt.n	800a55e <quorem+0xf2>
 800a514:	3601      	adds	r6, #1
 800a516:	4628      	mov	r0, r5
 800a518:	f04f 0c00 	mov.w	ip, #0
 800a51c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a520:	f8d0 e000 	ldr.w	lr, [r0]
 800a524:	b293      	uxth	r3, r2
 800a526:	ebac 0303 	sub.w	r3, ip, r3
 800a52a:	0c12      	lsrs	r2, r2, #16
 800a52c:	fa13 f38e 	uxtah	r3, r3, lr
 800a530:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a534:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a538:	b29b      	uxth	r3, r3
 800a53a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a53e:	45c1      	cmp	r9, r8
 800a540:	f840 3b04 	str.w	r3, [r0], #4
 800a544:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a548:	d2e8      	bcs.n	800a51c <quorem+0xb0>
 800a54a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a54e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a552:	b922      	cbnz	r2, 800a55e <quorem+0xf2>
 800a554:	3b04      	subs	r3, #4
 800a556:	429d      	cmp	r5, r3
 800a558:	461a      	mov	r2, r3
 800a55a:	d30a      	bcc.n	800a572 <quorem+0x106>
 800a55c:	613c      	str	r4, [r7, #16]
 800a55e:	4630      	mov	r0, r6
 800a560:	b003      	add	sp, #12
 800a562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a566:	6812      	ldr	r2, [r2, #0]
 800a568:	3b04      	subs	r3, #4
 800a56a:	2a00      	cmp	r2, #0
 800a56c:	d1cc      	bne.n	800a508 <quorem+0x9c>
 800a56e:	3c01      	subs	r4, #1
 800a570:	e7c7      	b.n	800a502 <quorem+0x96>
 800a572:	6812      	ldr	r2, [r2, #0]
 800a574:	3b04      	subs	r3, #4
 800a576:	2a00      	cmp	r2, #0
 800a578:	d1f0      	bne.n	800a55c <quorem+0xf0>
 800a57a:	3c01      	subs	r4, #1
 800a57c:	e7eb      	b.n	800a556 <quorem+0xea>
 800a57e:	2000      	movs	r0, #0
 800a580:	e7ee      	b.n	800a560 <quorem+0xf4>
 800a582:	0000      	movs	r0, r0
 800a584:	0000      	movs	r0, r0
	...

0800a588 <_dtoa_r>:
 800a588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a58c:	ed2d 8b02 	vpush	{d8}
 800a590:	ec57 6b10 	vmov	r6, r7, d0
 800a594:	b095      	sub	sp, #84	; 0x54
 800a596:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a598:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a59c:	9105      	str	r1, [sp, #20]
 800a59e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	9209      	str	r2, [sp, #36]	; 0x24
 800a5a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5a8:	b975      	cbnz	r5, 800a5c8 <_dtoa_r+0x40>
 800a5aa:	2010      	movs	r0, #16
 800a5ac:	f000 fffc 	bl	800b5a8 <malloc>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	6260      	str	r0, [r4, #36]	; 0x24
 800a5b4:	b920      	cbnz	r0, 800a5c0 <_dtoa_r+0x38>
 800a5b6:	4bb2      	ldr	r3, [pc, #712]	; (800a880 <_dtoa_r+0x2f8>)
 800a5b8:	21ea      	movs	r1, #234	; 0xea
 800a5ba:	48b2      	ldr	r0, [pc, #712]	; (800a884 <_dtoa_r+0x2fc>)
 800a5bc:	f001 fe3c 	bl	800c238 <__assert_func>
 800a5c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a5c4:	6005      	str	r5, [r0, #0]
 800a5c6:	60c5      	str	r5, [r0, #12]
 800a5c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5ca:	6819      	ldr	r1, [r3, #0]
 800a5cc:	b151      	cbz	r1, 800a5e4 <_dtoa_r+0x5c>
 800a5ce:	685a      	ldr	r2, [r3, #4]
 800a5d0:	604a      	str	r2, [r1, #4]
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	4093      	lsls	r3, r2
 800a5d6:	608b      	str	r3, [r1, #8]
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f001 f82d 	bl	800b638 <_Bfree>
 800a5de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	601a      	str	r2, [r3, #0]
 800a5e4:	1e3b      	subs	r3, r7, #0
 800a5e6:	bfb9      	ittee	lt
 800a5e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a5ec:	9303      	strlt	r3, [sp, #12]
 800a5ee:	2300      	movge	r3, #0
 800a5f0:	f8c8 3000 	strge.w	r3, [r8]
 800a5f4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a5f8:	4ba3      	ldr	r3, [pc, #652]	; (800a888 <_dtoa_r+0x300>)
 800a5fa:	bfbc      	itt	lt
 800a5fc:	2201      	movlt	r2, #1
 800a5fe:	f8c8 2000 	strlt.w	r2, [r8]
 800a602:	ea33 0309 	bics.w	r3, r3, r9
 800a606:	d11b      	bne.n	800a640 <_dtoa_r+0xb8>
 800a608:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a60a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a60e:	6013      	str	r3, [r2, #0]
 800a610:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a614:	4333      	orrs	r3, r6
 800a616:	f000 857a 	beq.w	800b10e <_dtoa_r+0xb86>
 800a61a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a61c:	b963      	cbnz	r3, 800a638 <_dtoa_r+0xb0>
 800a61e:	4b9b      	ldr	r3, [pc, #620]	; (800a88c <_dtoa_r+0x304>)
 800a620:	e024      	b.n	800a66c <_dtoa_r+0xe4>
 800a622:	4b9b      	ldr	r3, [pc, #620]	; (800a890 <_dtoa_r+0x308>)
 800a624:	9300      	str	r3, [sp, #0]
 800a626:	3308      	adds	r3, #8
 800a628:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a62a:	6013      	str	r3, [r2, #0]
 800a62c:	9800      	ldr	r0, [sp, #0]
 800a62e:	b015      	add	sp, #84	; 0x54
 800a630:	ecbd 8b02 	vpop	{d8}
 800a634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a638:	4b94      	ldr	r3, [pc, #592]	; (800a88c <_dtoa_r+0x304>)
 800a63a:	9300      	str	r3, [sp, #0]
 800a63c:	3303      	adds	r3, #3
 800a63e:	e7f3      	b.n	800a628 <_dtoa_r+0xa0>
 800a640:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a644:	2200      	movs	r2, #0
 800a646:	ec51 0b17 	vmov	r0, r1, d7
 800a64a:	2300      	movs	r3, #0
 800a64c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a650:	f7f6 fa42 	bl	8000ad8 <__aeabi_dcmpeq>
 800a654:	4680      	mov	r8, r0
 800a656:	b158      	cbz	r0, 800a670 <_dtoa_r+0xe8>
 800a658:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a65a:	2301      	movs	r3, #1
 800a65c:	6013      	str	r3, [r2, #0]
 800a65e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a660:	2b00      	cmp	r3, #0
 800a662:	f000 8551 	beq.w	800b108 <_dtoa_r+0xb80>
 800a666:	488b      	ldr	r0, [pc, #556]	; (800a894 <_dtoa_r+0x30c>)
 800a668:	6018      	str	r0, [r3, #0]
 800a66a:	1e43      	subs	r3, r0, #1
 800a66c:	9300      	str	r3, [sp, #0]
 800a66e:	e7dd      	b.n	800a62c <_dtoa_r+0xa4>
 800a670:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a674:	aa12      	add	r2, sp, #72	; 0x48
 800a676:	a913      	add	r1, sp, #76	; 0x4c
 800a678:	4620      	mov	r0, r4
 800a67a:	f001 fabf 	bl	800bbfc <__d2b>
 800a67e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a682:	4683      	mov	fp, r0
 800a684:	2d00      	cmp	r5, #0
 800a686:	d07c      	beq.n	800a782 <_dtoa_r+0x1fa>
 800a688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a68a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a68e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a692:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a696:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a69a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a69e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a6a2:	4b7d      	ldr	r3, [pc, #500]	; (800a898 <_dtoa_r+0x310>)
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	4630      	mov	r0, r6
 800a6a8:	4639      	mov	r1, r7
 800a6aa:	f7f5 fdf5 	bl	8000298 <__aeabi_dsub>
 800a6ae:	a36e      	add	r3, pc, #440	; (adr r3, 800a868 <_dtoa_r+0x2e0>)
 800a6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b4:	f7f5 ffa8 	bl	8000608 <__aeabi_dmul>
 800a6b8:	a36d      	add	r3, pc, #436	; (adr r3, 800a870 <_dtoa_r+0x2e8>)
 800a6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6be:	f7f5 fded 	bl	800029c <__adddf3>
 800a6c2:	4606      	mov	r6, r0
 800a6c4:	4628      	mov	r0, r5
 800a6c6:	460f      	mov	r7, r1
 800a6c8:	f7f5 ff34 	bl	8000534 <__aeabi_i2d>
 800a6cc:	a36a      	add	r3, pc, #424	; (adr r3, 800a878 <_dtoa_r+0x2f0>)
 800a6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d2:	f7f5 ff99 	bl	8000608 <__aeabi_dmul>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	460b      	mov	r3, r1
 800a6da:	4630      	mov	r0, r6
 800a6dc:	4639      	mov	r1, r7
 800a6de:	f7f5 fddd 	bl	800029c <__adddf3>
 800a6e2:	4606      	mov	r6, r0
 800a6e4:	460f      	mov	r7, r1
 800a6e6:	f7f6 fa3f 	bl	8000b68 <__aeabi_d2iz>
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	4682      	mov	sl, r0
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	4630      	mov	r0, r6
 800a6f2:	4639      	mov	r1, r7
 800a6f4:	f7f6 f9fa 	bl	8000aec <__aeabi_dcmplt>
 800a6f8:	b148      	cbz	r0, 800a70e <_dtoa_r+0x186>
 800a6fa:	4650      	mov	r0, sl
 800a6fc:	f7f5 ff1a 	bl	8000534 <__aeabi_i2d>
 800a700:	4632      	mov	r2, r6
 800a702:	463b      	mov	r3, r7
 800a704:	f7f6 f9e8 	bl	8000ad8 <__aeabi_dcmpeq>
 800a708:	b908      	cbnz	r0, 800a70e <_dtoa_r+0x186>
 800a70a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a70e:	f1ba 0f16 	cmp.w	sl, #22
 800a712:	d854      	bhi.n	800a7be <_dtoa_r+0x236>
 800a714:	4b61      	ldr	r3, [pc, #388]	; (800a89c <_dtoa_r+0x314>)
 800a716:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a71e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a722:	f7f6 f9e3 	bl	8000aec <__aeabi_dcmplt>
 800a726:	2800      	cmp	r0, #0
 800a728:	d04b      	beq.n	800a7c2 <_dtoa_r+0x23a>
 800a72a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a72e:	2300      	movs	r3, #0
 800a730:	930e      	str	r3, [sp, #56]	; 0x38
 800a732:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a734:	1b5d      	subs	r5, r3, r5
 800a736:	1e6b      	subs	r3, r5, #1
 800a738:	9304      	str	r3, [sp, #16]
 800a73a:	bf43      	ittte	mi
 800a73c:	2300      	movmi	r3, #0
 800a73e:	f1c5 0801 	rsbmi	r8, r5, #1
 800a742:	9304      	strmi	r3, [sp, #16]
 800a744:	f04f 0800 	movpl.w	r8, #0
 800a748:	f1ba 0f00 	cmp.w	sl, #0
 800a74c:	db3b      	blt.n	800a7c6 <_dtoa_r+0x23e>
 800a74e:	9b04      	ldr	r3, [sp, #16]
 800a750:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a754:	4453      	add	r3, sl
 800a756:	9304      	str	r3, [sp, #16]
 800a758:	2300      	movs	r3, #0
 800a75a:	9306      	str	r3, [sp, #24]
 800a75c:	9b05      	ldr	r3, [sp, #20]
 800a75e:	2b09      	cmp	r3, #9
 800a760:	d869      	bhi.n	800a836 <_dtoa_r+0x2ae>
 800a762:	2b05      	cmp	r3, #5
 800a764:	bfc4      	itt	gt
 800a766:	3b04      	subgt	r3, #4
 800a768:	9305      	strgt	r3, [sp, #20]
 800a76a:	9b05      	ldr	r3, [sp, #20]
 800a76c:	f1a3 0302 	sub.w	r3, r3, #2
 800a770:	bfcc      	ite	gt
 800a772:	2500      	movgt	r5, #0
 800a774:	2501      	movle	r5, #1
 800a776:	2b03      	cmp	r3, #3
 800a778:	d869      	bhi.n	800a84e <_dtoa_r+0x2c6>
 800a77a:	e8df f003 	tbb	[pc, r3]
 800a77e:	4e2c      	.short	0x4e2c
 800a780:	5a4c      	.short	0x5a4c
 800a782:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a786:	441d      	add	r5, r3
 800a788:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a78c:	2b20      	cmp	r3, #32
 800a78e:	bfc1      	itttt	gt
 800a790:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a794:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a798:	fa09 f303 	lslgt.w	r3, r9, r3
 800a79c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a7a0:	bfda      	itte	le
 800a7a2:	f1c3 0320 	rsble	r3, r3, #32
 800a7a6:	fa06 f003 	lslle.w	r0, r6, r3
 800a7aa:	4318      	orrgt	r0, r3
 800a7ac:	f7f5 feb2 	bl	8000514 <__aeabi_ui2d>
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	4606      	mov	r6, r0
 800a7b4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a7b8:	3d01      	subs	r5, #1
 800a7ba:	9310      	str	r3, [sp, #64]	; 0x40
 800a7bc:	e771      	b.n	800a6a2 <_dtoa_r+0x11a>
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e7b6      	b.n	800a730 <_dtoa_r+0x1a8>
 800a7c2:	900e      	str	r0, [sp, #56]	; 0x38
 800a7c4:	e7b5      	b.n	800a732 <_dtoa_r+0x1aa>
 800a7c6:	f1ca 0300 	rsb	r3, sl, #0
 800a7ca:	9306      	str	r3, [sp, #24]
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	eba8 080a 	sub.w	r8, r8, sl
 800a7d2:	930d      	str	r3, [sp, #52]	; 0x34
 800a7d4:	e7c2      	b.n	800a75c <_dtoa_r+0x1d4>
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	9308      	str	r3, [sp, #32]
 800a7da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	dc39      	bgt.n	800a854 <_dtoa_r+0x2cc>
 800a7e0:	f04f 0901 	mov.w	r9, #1
 800a7e4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a7e8:	464b      	mov	r3, r9
 800a7ea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a7ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	6042      	str	r2, [r0, #4]
 800a7f4:	2204      	movs	r2, #4
 800a7f6:	f102 0614 	add.w	r6, r2, #20
 800a7fa:	429e      	cmp	r6, r3
 800a7fc:	6841      	ldr	r1, [r0, #4]
 800a7fe:	d92f      	bls.n	800a860 <_dtoa_r+0x2d8>
 800a800:	4620      	mov	r0, r4
 800a802:	f000 fed9 	bl	800b5b8 <_Balloc>
 800a806:	9000      	str	r0, [sp, #0]
 800a808:	2800      	cmp	r0, #0
 800a80a:	d14b      	bne.n	800a8a4 <_dtoa_r+0x31c>
 800a80c:	4b24      	ldr	r3, [pc, #144]	; (800a8a0 <_dtoa_r+0x318>)
 800a80e:	4602      	mov	r2, r0
 800a810:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a814:	e6d1      	b.n	800a5ba <_dtoa_r+0x32>
 800a816:	2301      	movs	r3, #1
 800a818:	e7de      	b.n	800a7d8 <_dtoa_r+0x250>
 800a81a:	2300      	movs	r3, #0
 800a81c:	9308      	str	r3, [sp, #32]
 800a81e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a820:	eb0a 0903 	add.w	r9, sl, r3
 800a824:	f109 0301 	add.w	r3, r9, #1
 800a828:	2b01      	cmp	r3, #1
 800a82a:	9301      	str	r3, [sp, #4]
 800a82c:	bfb8      	it	lt
 800a82e:	2301      	movlt	r3, #1
 800a830:	e7dd      	b.n	800a7ee <_dtoa_r+0x266>
 800a832:	2301      	movs	r3, #1
 800a834:	e7f2      	b.n	800a81c <_dtoa_r+0x294>
 800a836:	2501      	movs	r5, #1
 800a838:	2300      	movs	r3, #0
 800a83a:	9305      	str	r3, [sp, #20]
 800a83c:	9508      	str	r5, [sp, #32]
 800a83e:	f04f 39ff 	mov.w	r9, #4294967295
 800a842:	2200      	movs	r2, #0
 800a844:	f8cd 9004 	str.w	r9, [sp, #4]
 800a848:	2312      	movs	r3, #18
 800a84a:	9209      	str	r2, [sp, #36]	; 0x24
 800a84c:	e7cf      	b.n	800a7ee <_dtoa_r+0x266>
 800a84e:	2301      	movs	r3, #1
 800a850:	9308      	str	r3, [sp, #32]
 800a852:	e7f4      	b.n	800a83e <_dtoa_r+0x2b6>
 800a854:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a858:	f8cd 9004 	str.w	r9, [sp, #4]
 800a85c:	464b      	mov	r3, r9
 800a85e:	e7c6      	b.n	800a7ee <_dtoa_r+0x266>
 800a860:	3101      	adds	r1, #1
 800a862:	6041      	str	r1, [r0, #4]
 800a864:	0052      	lsls	r2, r2, #1
 800a866:	e7c6      	b.n	800a7f6 <_dtoa_r+0x26e>
 800a868:	636f4361 	.word	0x636f4361
 800a86c:	3fd287a7 	.word	0x3fd287a7
 800a870:	8b60c8b3 	.word	0x8b60c8b3
 800a874:	3fc68a28 	.word	0x3fc68a28
 800a878:	509f79fb 	.word	0x509f79fb
 800a87c:	3fd34413 	.word	0x3fd34413
 800a880:	0800c659 	.word	0x0800c659
 800a884:	0800c670 	.word	0x0800c670
 800a888:	7ff00000 	.word	0x7ff00000
 800a88c:	0800c655 	.word	0x0800c655
 800a890:	0800c64c 	.word	0x0800c64c
 800a894:	0800c629 	.word	0x0800c629
 800a898:	3ff80000 	.word	0x3ff80000
 800a89c:	0800c7c8 	.word	0x0800c7c8
 800a8a0:	0800c6cf 	.word	0x0800c6cf
 800a8a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8a6:	9a00      	ldr	r2, [sp, #0]
 800a8a8:	601a      	str	r2, [r3, #0]
 800a8aa:	9b01      	ldr	r3, [sp, #4]
 800a8ac:	2b0e      	cmp	r3, #14
 800a8ae:	f200 80ad 	bhi.w	800aa0c <_dtoa_r+0x484>
 800a8b2:	2d00      	cmp	r5, #0
 800a8b4:	f000 80aa 	beq.w	800aa0c <_dtoa_r+0x484>
 800a8b8:	f1ba 0f00 	cmp.w	sl, #0
 800a8bc:	dd36      	ble.n	800a92c <_dtoa_r+0x3a4>
 800a8be:	4ac3      	ldr	r2, [pc, #780]	; (800abcc <_dtoa_r+0x644>)
 800a8c0:	f00a 030f 	and.w	r3, sl, #15
 800a8c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a8c8:	ed93 7b00 	vldr	d7, [r3]
 800a8cc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a8d0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a8d4:	eeb0 8a47 	vmov.f32	s16, s14
 800a8d8:	eef0 8a67 	vmov.f32	s17, s15
 800a8dc:	d016      	beq.n	800a90c <_dtoa_r+0x384>
 800a8de:	4bbc      	ldr	r3, [pc, #752]	; (800abd0 <_dtoa_r+0x648>)
 800a8e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a8e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a8e8:	f7f5 ffb8 	bl	800085c <__aeabi_ddiv>
 800a8ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8f0:	f007 070f 	and.w	r7, r7, #15
 800a8f4:	2503      	movs	r5, #3
 800a8f6:	4eb6      	ldr	r6, [pc, #728]	; (800abd0 <_dtoa_r+0x648>)
 800a8f8:	b957      	cbnz	r7, 800a910 <_dtoa_r+0x388>
 800a8fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8fe:	ec53 2b18 	vmov	r2, r3, d8
 800a902:	f7f5 ffab 	bl	800085c <__aeabi_ddiv>
 800a906:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a90a:	e029      	b.n	800a960 <_dtoa_r+0x3d8>
 800a90c:	2502      	movs	r5, #2
 800a90e:	e7f2      	b.n	800a8f6 <_dtoa_r+0x36e>
 800a910:	07f9      	lsls	r1, r7, #31
 800a912:	d508      	bpl.n	800a926 <_dtoa_r+0x39e>
 800a914:	ec51 0b18 	vmov	r0, r1, d8
 800a918:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a91c:	f7f5 fe74 	bl	8000608 <__aeabi_dmul>
 800a920:	ec41 0b18 	vmov	d8, r0, r1
 800a924:	3501      	adds	r5, #1
 800a926:	107f      	asrs	r7, r7, #1
 800a928:	3608      	adds	r6, #8
 800a92a:	e7e5      	b.n	800a8f8 <_dtoa_r+0x370>
 800a92c:	f000 80a6 	beq.w	800aa7c <_dtoa_r+0x4f4>
 800a930:	f1ca 0600 	rsb	r6, sl, #0
 800a934:	4ba5      	ldr	r3, [pc, #660]	; (800abcc <_dtoa_r+0x644>)
 800a936:	4fa6      	ldr	r7, [pc, #664]	; (800abd0 <_dtoa_r+0x648>)
 800a938:	f006 020f 	and.w	r2, r6, #15
 800a93c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a944:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a948:	f7f5 fe5e 	bl	8000608 <__aeabi_dmul>
 800a94c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a950:	1136      	asrs	r6, r6, #4
 800a952:	2300      	movs	r3, #0
 800a954:	2502      	movs	r5, #2
 800a956:	2e00      	cmp	r6, #0
 800a958:	f040 8085 	bne.w	800aa66 <_dtoa_r+0x4de>
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d1d2      	bne.n	800a906 <_dtoa_r+0x37e>
 800a960:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a962:	2b00      	cmp	r3, #0
 800a964:	f000 808c 	beq.w	800aa80 <_dtoa_r+0x4f8>
 800a968:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a96c:	4b99      	ldr	r3, [pc, #612]	; (800abd4 <_dtoa_r+0x64c>)
 800a96e:	2200      	movs	r2, #0
 800a970:	4630      	mov	r0, r6
 800a972:	4639      	mov	r1, r7
 800a974:	f7f6 f8ba 	bl	8000aec <__aeabi_dcmplt>
 800a978:	2800      	cmp	r0, #0
 800a97a:	f000 8081 	beq.w	800aa80 <_dtoa_r+0x4f8>
 800a97e:	9b01      	ldr	r3, [sp, #4]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d07d      	beq.n	800aa80 <_dtoa_r+0x4f8>
 800a984:	f1b9 0f00 	cmp.w	r9, #0
 800a988:	dd3c      	ble.n	800aa04 <_dtoa_r+0x47c>
 800a98a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a98e:	9307      	str	r3, [sp, #28]
 800a990:	2200      	movs	r2, #0
 800a992:	4b91      	ldr	r3, [pc, #580]	; (800abd8 <_dtoa_r+0x650>)
 800a994:	4630      	mov	r0, r6
 800a996:	4639      	mov	r1, r7
 800a998:	f7f5 fe36 	bl	8000608 <__aeabi_dmul>
 800a99c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9a0:	3501      	adds	r5, #1
 800a9a2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a9a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a9aa:	4628      	mov	r0, r5
 800a9ac:	f7f5 fdc2 	bl	8000534 <__aeabi_i2d>
 800a9b0:	4632      	mov	r2, r6
 800a9b2:	463b      	mov	r3, r7
 800a9b4:	f7f5 fe28 	bl	8000608 <__aeabi_dmul>
 800a9b8:	4b88      	ldr	r3, [pc, #544]	; (800abdc <_dtoa_r+0x654>)
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	f7f5 fc6e 	bl	800029c <__adddf3>
 800a9c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a9c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9c8:	9303      	str	r3, [sp, #12]
 800a9ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d15c      	bne.n	800aa8a <_dtoa_r+0x502>
 800a9d0:	4b83      	ldr	r3, [pc, #524]	; (800abe0 <_dtoa_r+0x658>)
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	4630      	mov	r0, r6
 800a9d6:	4639      	mov	r1, r7
 800a9d8:	f7f5 fc5e 	bl	8000298 <__aeabi_dsub>
 800a9dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9e0:	4606      	mov	r6, r0
 800a9e2:	460f      	mov	r7, r1
 800a9e4:	f7f6 f8a0 	bl	8000b28 <__aeabi_dcmpgt>
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	f040 8296 	bne.w	800af1a <_dtoa_r+0x992>
 800a9ee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a9f2:	4630      	mov	r0, r6
 800a9f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a9f8:	4639      	mov	r1, r7
 800a9fa:	f7f6 f877 	bl	8000aec <__aeabi_dcmplt>
 800a9fe:	2800      	cmp	r0, #0
 800aa00:	f040 8288 	bne.w	800af14 <_dtoa_r+0x98c>
 800aa04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800aa08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aa0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	f2c0 8158 	blt.w	800acc4 <_dtoa_r+0x73c>
 800aa14:	f1ba 0f0e 	cmp.w	sl, #14
 800aa18:	f300 8154 	bgt.w	800acc4 <_dtoa_r+0x73c>
 800aa1c:	4b6b      	ldr	r3, [pc, #428]	; (800abcc <_dtoa_r+0x644>)
 800aa1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800aa22:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	f280 80e3 	bge.w	800abf4 <_dtoa_r+0x66c>
 800aa2e:	9b01      	ldr	r3, [sp, #4]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	f300 80df 	bgt.w	800abf4 <_dtoa_r+0x66c>
 800aa36:	f040 826d 	bne.w	800af14 <_dtoa_r+0x98c>
 800aa3a:	4b69      	ldr	r3, [pc, #420]	; (800abe0 <_dtoa_r+0x658>)
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	4640      	mov	r0, r8
 800aa40:	4649      	mov	r1, r9
 800aa42:	f7f5 fde1 	bl	8000608 <__aeabi_dmul>
 800aa46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa4a:	f7f6 f863 	bl	8000b14 <__aeabi_dcmpge>
 800aa4e:	9e01      	ldr	r6, [sp, #4]
 800aa50:	4637      	mov	r7, r6
 800aa52:	2800      	cmp	r0, #0
 800aa54:	f040 8243 	bne.w	800aede <_dtoa_r+0x956>
 800aa58:	9d00      	ldr	r5, [sp, #0]
 800aa5a:	2331      	movs	r3, #49	; 0x31
 800aa5c:	f805 3b01 	strb.w	r3, [r5], #1
 800aa60:	f10a 0a01 	add.w	sl, sl, #1
 800aa64:	e23f      	b.n	800aee6 <_dtoa_r+0x95e>
 800aa66:	07f2      	lsls	r2, r6, #31
 800aa68:	d505      	bpl.n	800aa76 <_dtoa_r+0x4ee>
 800aa6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa6e:	f7f5 fdcb 	bl	8000608 <__aeabi_dmul>
 800aa72:	3501      	adds	r5, #1
 800aa74:	2301      	movs	r3, #1
 800aa76:	1076      	asrs	r6, r6, #1
 800aa78:	3708      	adds	r7, #8
 800aa7a:	e76c      	b.n	800a956 <_dtoa_r+0x3ce>
 800aa7c:	2502      	movs	r5, #2
 800aa7e:	e76f      	b.n	800a960 <_dtoa_r+0x3d8>
 800aa80:	9b01      	ldr	r3, [sp, #4]
 800aa82:	f8cd a01c 	str.w	sl, [sp, #28]
 800aa86:	930c      	str	r3, [sp, #48]	; 0x30
 800aa88:	e78d      	b.n	800a9a6 <_dtoa_r+0x41e>
 800aa8a:	9900      	ldr	r1, [sp, #0]
 800aa8c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800aa8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa90:	4b4e      	ldr	r3, [pc, #312]	; (800abcc <_dtoa_r+0x644>)
 800aa92:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa96:	4401      	add	r1, r0
 800aa98:	9102      	str	r1, [sp, #8]
 800aa9a:	9908      	ldr	r1, [sp, #32]
 800aa9c:	eeb0 8a47 	vmov.f32	s16, s14
 800aaa0:	eef0 8a67 	vmov.f32	s17, s15
 800aaa4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aaa8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aaac:	2900      	cmp	r1, #0
 800aaae:	d045      	beq.n	800ab3c <_dtoa_r+0x5b4>
 800aab0:	494c      	ldr	r1, [pc, #304]	; (800abe4 <_dtoa_r+0x65c>)
 800aab2:	2000      	movs	r0, #0
 800aab4:	f7f5 fed2 	bl	800085c <__aeabi_ddiv>
 800aab8:	ec53 2b18 	vmov	r2, r3, d8
 800aabc:	f7f5 fbec 	bl	8000298 <__aeabi_dsub>
 800aac0:	9d00      	ldr	r5, [sp, #0]
 800aac2:	ec41 0b18 	vmov	d8, r0, r1
 800aac6:	4639      	mov	r1, r7
 800aac8:	4630      	mov	r0, r6
 800aaca:	f7f6 f84d 	bl	8000b68 <__aeabi_d2iz>
 800aace:	900c      	str	r0, [sp, #48]	; 0x30
 800aad0:	f7f5 fd30 	bl	8000534 <__aeabi_i2d>
 800aad4:	4602      	mov	r2, r0
 800aad6:	460b      	mov	r3, r1
 800aad8:	4630      	mov	r0, r6
 800aada:	4639      	mov	r1, r7
 800aadc:	f7f5 fbdc 	bl	8000298 <__aeabi_dsub>
 800aae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aae2:	3330      	adds	r3, #48	; 0x30
 800aae4:	f805 3b01 	strb.w	r3, [r5], #1
 800aae8:	ec53 2b18 	vmov	r2, r3, d8
 800aaec:	4606      	mov	r6, r0
 800aaee:	460f      	mov	r7, r1
 800aaf0:	f7f5 fffc 	bl	8000aec <__aeabi_dcmplt>
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	d165      	bne.n	800abc4 <_dtoa_r+0x63c>
 800aaf8:	4632      	mov	r2, r6
 800aafa:	463b      	mov	r3, r7
 800aafc:	4935      	ldr	r1, [pc, #212]	; (800abd4 <_dtoa_r+0x64c>)
 800aafe:	2000      	movs	r0, #0
 800ab00:	f7f5 fbca 	bl	8000298 <__aeabi_dsub>
 800ab04:	ec53 2b18 	vmov	r2, r3, d8
 800ab08:	f7f5 fff0 	bl	8000aec <__aeabi_dcmplt>
 800ab0c:	2800      	cmp	r0, #0
 800ab0e:	f040 80b9 	bne.w	800ac84 <_dtoa_r+0x6fc>
 800ab12:	9b02      	ldr	r3, [sp, #8]
 800ab14:	429d      	cmp	r5, r3
 800ab16:	f43f af75 	beq.w	800aa04 <_dtoa_r+0x47c>
 800ab1a:	4b2f      	ldr	r3, [pc, #188]	; (800abd8 <_dtoa_r+0x650>)
 800ab1c:	ec51 0b18 	vmov	r0, r1, d8
 800ab20:	2200      	movs	r2, #0
 800ab22:	f7f5 fd71 	bl	8000608 <__aeabi_dmul>
 800ab26:	4b2c      	ldr	r3, [pc, #176]	; (800abd8 <_dtoa_r+0x650>)
 800ab28:	ec41 0b18 	vmov	d8, r0, r1
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	4630      	mov	r0, r6
 800ab30:	4639      	mov	r1, r7
 800ab32:	f7f5 fd69 	bl	8000608 <__aeabi_dmul>
 800ab36:	4606      	mov	r6, r0
 800ab38:	460f      	mov	r7, r1
 800ab3a:	e7c4      	b.n	800aac6 <_dtoa_r+0x53e>
 800ab3c:	ec51 0b17 	vmov	r0, r1, d7
 800ab40:	f7f5 fd62 	bl	8000608 <__aeabi_dmul>
 800ab44:	9b02      	ldr	r3, [sp, #8]
 800ab46:	9d00      	ldr	r5, [sp, #0]
 800ab48:	930c      	str	r3, [sp, #48]	; 0x30
 800ab4a:	ec41 0b18 	vmov	d8, r0, r1
 800ab4e:	4639      	mov	r1, r7
 800ab50:	4630      	mov	r0, r6
 800ab52:	f7f6 f809 	bl	8000b68 <__aeabi_d2iz>
 800ab56:	9011      	str	r0, [sp, #68]	; 0x44
 800ab58:	f7f5 fcec 	bl	8000534 <__aeabi_i2d>
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	460b      	mov	r3, r1
 800ab60:	4630      	mov	r0, r6
 800ab62:	4639      	mov	r1, r7
 800ab64:	f7f5 fb98 	bl	8000298 <__aeabi_dsub>
 800ab68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab6a:	3330      	adds	r3, #48	; 0x30
 800ab6c:	f805 3b01 	strb.w	r3, [r5], #1
 800ab70:	9b02      	ldr	r3, [sp, #8]
 800ab72:	429d      	cmp	r5, r3
 800ab74:	4606      	mov	r6, r0
 800ab76:	460f      	mov	r7, r1
 800ab78:	f04f 0200 	mov.w	r2, #0
 800ab7c:	d134      	bne.n	800abe8 <_dtoa_r+0x660>
 800ab7e:	4b19      	ldr	r3, [pc, #100]	; (800abe4 <_dtoa_r+0x65c>)
 800ab80:	ec51 0b18 	vmov	r0, r1, d8
 800ab84:	f7f5 fb8a 	bl	800029c <__adddf3>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	4639      	mov	r1, r7
 800ab90:	f7f5 ffca 	bl	8000b28 <__aeabi_dcmpgt>
 800ab94:	2800      	cmp	r0, #0
 800ab96:	d175      	bne.n	800ac84 <_dtoa_r+0x6fc>
 800ab98:	ec53 2b18 	vmov	r2, r3, d8
 800ab9c:	4911      	ldr	r1, [pc, #68]	; (800abe4 <_dtoa_r+0x65c>)
 800ab9e:	2000      	movs	r0, #0
 800aba0:	f7f5 fb7a 	bl	8000298 <__aeabi_dsub>
 800aba4:	4602      	mov	r2, r0
 800aba6:	460b      	mov	r3, r1
 800aba8:	4630      	mov	r0, r6
 800abaa:	4639      	mov	r1, r7
 800abac:	f7f5 ff9e 	bl	8000aec <__aeabi_dcmplt>
 800abb0:	2800      	cmp	r0, #0
 800abb2:	f43f af27 	beq.w	800aa04 <_dtoa_r+0x47c>
 800abb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800abb8:	1e6b      	subs	r3, r5, #1
 800abba:	930c      	str	r3, [sp, #48]	; 0x30
 800abbc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800abc0:	2b30      	cmp	r3, #48	; 0x30
 800abc2:	d0f8      	beq.n	800abb6 <_dtoa_r+0x62e>
 800abc4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800abc8:	e04a      	b.n	800ac60 <_dtoa_r+0x6d8>
 800abca:	bf00      	nop
 800abcc:	0800c7c8 	.word	0x0800c7c8
 800abd0:	0800c7a0 	.word	0x0800c7a0
 800abd4:	3ff00000 	.word	0x3ff00000
 800abd8:	40240000 	.word	0x40240000
 800abdc:	401c0000 	.word	0x401c0000
 800abe0:	40140000 	.word	0x40140000
 800abe4:	3fe00000 	.word	0x3fe00000
 800abe8:	4baf      	ldr	r3, [pc, #700]	; (800aea8 <_dtoa_r+0x920>)
 800abea:	f7f5 fd0d 	bl	8000608 <__aeabi_dmul>
 800abee:	4606      	mov	r6, r0
 800abf0:	460f      	mov	r7, r1
 800abf2:	e7ac      	b.n	800ab4e <_dtoa_r+0x5c6>
 800abf4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800abf8:	9d00      	ldr	r5, [sp, #0]
 800abfa:	4642      	mov	r2, r8
 800abfc:	464b      	mov	r3, r9
 800abfe:	4630      	mov	r0, r6
 800ac00:	4639      	mov	r1, r7
 800ac02:	f7f5 fe2b 	bl	800085c <__aeabi_ddiv>
 800ac06:	f7f5 ffaf 	bl	8000b68 <__aeabi_d2iz>
 800ac0a:	9002      	str	r0, [sp, #8]
 800ac0c:	f7f5 fc92 	bl	8000534 <__aeabi_i2d>
 800ac10:	4642      	mov	r2, r8
 800ac12:	464b      	mov	r3, r9
 800ac14:	f7f5 fcf8 	bl	8000608 <__aeabi_dmul>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	4639      	mov	r1, r7
 800ac20:	f7f5 fb3a 	bl	8000298 <__aeabi_dsub>
 800ac24:	9e02      	ldr	r6, [sp, #8]
 800ac26:	9f01      	ldr	r7, [sp, #4]
 800ac28:	3630      	adds	r6, #48	; 0x30
 800ac2a:	f805 6b01 	strb.w	r6, [r5], #1
 800ac2e:	9e00      	ldr	r6, [sp, #0]
 800ac30:	1bae      	subs	r6, r5, r6
 800ac32:	42b7      	cmp	r7, r6
 800ac34:	4602      	mov	r2, r0
 800ac36:	460b      	mov	r3, r1
 800ac38:	d137      	bne.n	800acaa <_dtoa_r+0x722>
 800ac3a:	f7f5 fb2f 	bl	800029c <__adddf3>
 800ac3e:	4642      	mov	r2, r8
 800ac40:	464b      	mov	r3, r9
 800ac42:	4606      	mov	r6, r0
 800ac44:	460f      	mov	r7, r1
 800ac46:	f7f5 ff6f 	bl	8000b28 <__aeabi_dcmpgt>
 800ac4a:	b9c8      	cbnz	r0, 800ac80 <_dtoa_r+0x6f8>
 800ac4c:	4642      	mov	r2, r8
 800ac4e:	464b      	mov	r3, r9
 800ac50:	4630      	mov	r0, r6
 800ac52:	4639      	mov	r1, r7
 800ac54:	f7f5 ff40 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac58:	b110      	cbz	r0, 800ac60 <_dtoa_r+0x6d8>
 800ac5a:	9b02      	ldr	r3, [sp, #8]
 800ac5c:	07d9      	lsls	r1, r3, #31
 800ac5e:	d40f      	bmi.n	800ac80 <_dtoa_r+0x6f8>
 800ac60:	4620      	mov	r0, r4
 800ac62:	4659      	mov	r1, fp
 800ac64:	f000 fce8 	bl	800b638 <_Bfree>
 800ac68:	2300      	movs	r3, #0
 800ac6a:	702b      	strb	r3, [r5, #0]
 800ac6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac6e:	f10a 0001 	add.w	r0, sl, #1
 800ac72:	6018      	str	r0, [r3, #0]
 800ac74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	f43f acd8 	beq.w	800a62c <_dtoa_r+0xa4>
 800ac7c:	601d      	str	r5, [r3, #0]
 800ac7e:	e4d5      	b.n	800a62c <_dtoa_r+0xa4>
 800ac80:	f8cd a01c 	str.w	sl, [sp, #28]
 800ac84:	462b      	mov	r3, r5
 800ac86:	461d      	mov	r5, r3
 800ac88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac8c:	2a39      	cmp	r2, #57	; 0x39
 800ac8e:	d108      	bne.n	800aca2 <_dtoa_r+0x71a>
 800ac90:	9a00      	ldr	r2, [sp, #0]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d1f7      	bne.n	800ac86 <_dtoa_r+0x6fe>
 800ac96:	9a07      	ldr	r2, [sp, #28]
 800ac98:	9900      	ldr	r1, [sp, #0]
 800ac9a:	3201      	adds	r2, #1
 800ac9c:	9207      	str	r2, [sp, #28]
 800ac9e:	2230      	movs	r2, #48	; 0x30
 800aca0:	700a      	strb	r2, [r1, #0]
 800aca2:	781a      	ldrb	r2, [r3, #0]
 800aca4:	3201      	adds	r2, #1
 800aca6:	701a      	strb	r2, [r3, #0]
 800aca8:	e78c      	b.n	800abc4 <_dtoa_r+0x63c>
 800acaa:	4b7f      	ldr	r3, [pc, #508]	; (800aea8 <_dtoa_r+0x920>)
 800acac:	2200      	movs	r2, #0
 800acae:	f7f5 fcab 	bl	8000608 <__aeabi_dmul>
 800acb2:	2200      	movs	r2, #0
 800acb4:	2300      	movs	r3, #0
 800acb6:	4606      	mov	r6, r0
 800acb8:	460f      	mov	r7, r1
 800acba:	f7f5 ff0d 	bl	8000ad8 <__aeabi_dcmpeq>
 800acbe:	2800      	cmp	r0, #0
 800acc0:	d09b      	beq.n	800abfa <_dtoa_r+0x672>
 800acc2:	e7cd      	b.n	800ac60 <_dtoa_r+0x6d8>
 800acc4:	9a08      	ldr	r2, [sp, #32]
 800acc6:	2a00      	cmp	r2, #0
 800acc8:	f000 80c4 	beq.w	800ae54 <_dtoa_r+0x8cc>
 800accc:	9a05      	ldr	r2, [sp, #20]
 800acce:	2a01      	cmp	r2, #1
 800acd0:	f300 80a8 	bgt.w	800ae24 <_dtoa_r+0x89c>
 800acd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800acd6:	2a00      	cmp	r2, #0
 800acd8:	f000 80a0 	beq.w	800ae1c <_dtoa_r+0x894>
 800acdc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ace0:	9e06      	ldr	r6, [sp, #24]
 800ace2:	4645      	mov	r5, r8
 800ace4:	9a04      	ldr	r2, [sp, #16]
 800ace6:	2101      	movs	r1, #1
 800ace8:	441a      	add	r2, r3
 800acea:	4620      	mov	r0, r4
 800acec:	4498      	add	r8, r3
 800acee:	9204      	str	r2, [sp, #16]
 800acf0:	f000 fd5e 	bl	800b7b0 <__i2b>
 800acf4:	4607      	mov	r7, r0
 800acf6:	2d00      	cmp	r5, #0
 800acf8:	dd0b      	ble.n	800ad12 <_dtoa_r+0x78a>
 800acfa:	9b04      	ldr	r3, [sp, #16]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	dd08      	ble.n	800ad12 <_dtoa_r+0x78a>
 800ad00:	42ab      	cmp	r3, r5
 800ad02:	9a04      	ldr	r2, [sp, #16]
 800ad04:	bfa8      	it	ge
 800ad06:	462b      	movge	r3, r5
 800ad08:	eba8 0803 	sub.w	r8, r8, r3
 800ad0c:	1aed      	subs	r5, r5, r3
 800ad0e:	1ad3      	subs	r3, r2, r3
 800ad10:	9304      	str	r3, [sp, #16]
 800ad12:	9b06      	ldr	r3, [sp, #24]
 800ad14:	b1fb      	cbz	r3, 800ad56 <_dtoa_r+0x7ce>
 800ad16:	9b08      	ldr	r3, [sp, #32]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	f000 809f 	beq.w	800ae5c <_dtoa_r+0x8d4>
 800ad1e:	2e00      	cmp	r6, #0
 800ad20:	dd11      	ble.n	800ad46 <_dtoa_r+0x7be>
 800ad22:	4639      	mov	r1, r7
 800ad24:	4632      	mov	r2, r6
 800ad26:	4620      	mov	r0, r4
 800ad28:	f000 fdfe 	bl	800b928 <__pow5mult>
 800ad2c:	465a      	mov	r2, fp
 800ad2e:	4601      	mov	r1, r0
 800ad30:	4607      	mov	r7, r0
 800ad32:	4620      	mov	r0, r4
 800ad34:	f000 fd52 	bl	800b7dc <__multiply>
 800ad38:	4659      	mov	r1, fp
 800ad3a:	9007      	str	r0, [sp, #28]
 800ad3c:	4620      	mov	r0, r4
 800ad3e:	f000 fc7b 	bl	800b638 <_Bfree>
 800ad42:	9b07      	ldr	r3, [sp, #28]
 800ad44:	469b      	mov	fp, r3
 800ad46:	9b06      	ldr	r3, [sp, #24]
 800ad48:	1b9a      	subs	r2, r3, r6
 800ad4a:	d004      	beq.n	800ad56 <_dtoa_r+0x7ce>
 800ad4c:	4659      	mov	r1, fp
 800ad4e:	4620      	mov	r0, r4
 800ad50:	f000 fdea 	bl	800b928 <__pow5mult>
 800ad54:	4683      	mov	fp, r0
 800ad56:	2101      	movs	r1, #1
 800ad58:	4620      	mov	r0, r4
 800ad5a:	f000 fd29 	bl	800b7b0 <__i2b>
 800ad5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	4606      	mov	r6, r0
 800ad64:	dd7c      	ble.n	800ae60 <_dtoa_r+0x8d8>
 800ad66:	461a      	mov	r2, r3
 800ad68:	4601      	mov	r1, r0
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	f000 fddc 	bl	800b928 <__pow5mult>
 800ad70:	9b05      	ldr	r3, [sp, #20]
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	4606      	mov	r6, r0
 800ad76:	dd76      	ble.n	800ae66 <_dtoa_r+0x8de>
 800ad78:	2300      	movs	r3, #0
 800ad7a:	9306      	str	r3, [sp, #24]
 800ad7c:	6933      	ldr	r3, [r6, #16]
 800ad7e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ad82:	6918      	ldr	r0, [r3, #16]
 800ad84:	f000 fcc4 	bl	800b710 <__hi0bits>
 800ad88:	f1c0 0020 	rsb	r0, r0, #32
 800ad8c:	9b04      	ldr	r3, [sp, #16]
 800ad8e:	4418      	add	r0, r3
 800ad90:	f010 001f 	ands.w	r0, r0, #31
 800ad94:	f000 8086 	beq.w	800aea4 <_dtoa_r+0x91c>
 800ad98:	f1c0 0320 	rsb	r3, r0, #32
 800ad9c:	2b04      	cmp	r3, #4
 800ad9e:	dd7f      	ble.n	800aea0 <_dtoa_r+0x918>
 800ada0:	f1c0 001c 	rsb	r0, r0, #28
 800ada4:	9b04      	ldr	r3, [sp, #16]
 800ada6:	4403      	add	r3, r0
 800ada8:	4480      	add	r8, r0
 800adaa:	4405      	add	r5, r0
 800adac:	9304      	str	r3, [sp, #16]
 800adae:	f1b8 0f00 	cmp.w	r8, #0
 800adb2:	dd05      	ble.n	800adc0 <_dtoa_r+0x838>
 800adb4:	4659      	mov	r1, fp
 800adb6:	4642      	mov	r2, r8
 800adb8:	4620      	mov	r0, r4
 800adba:	f000 fe0f 	bl	800b9dc <__lshift>
 800adbe:	4683      	mov	fp, r0
 800adc0:	9b04      	ldr	r3, [sp, #16]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	dd05      	ble.n	800add2 <_dtoa_r+0x84a>
 800adc6:	4631      	mov	r1, r6
 800adc8:	461a      	mov	r2, r3
 800adca:	4620      	mov	r0, r4
 800adcc:	f000 fe06 	bl	800b9dc <__lshift>
 800add0:	4606      	mov	r6, r0
 800add2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800add4:	2b00      	cmp	r3, #0
 800add6:	d069      	beq.n	800aeac <_dtoa_r+0x924>
 800add8:	4631      	mov	r1, r6
 800adda:	4658      	mov	r0, fp
 800addc:	f000 fe6a 	bl	800bab4 <__mcmp>
 800ade0:	2800      	cmp	r0, #0
 800ade2:	da63      	bge.n	800aeac <_dtoa_r+0x924>
 800ade4:	2300      	movs	r3, #0
 800ade6:	4659      	mov	r1, fp
 800ade8:	220a      	movs	r2, #10
 800adea:	4620      	mov	r0, r4
 800adec:	f000 fc46 	bl	800b67c <__multadd>
 800adf0:	9b08      	ldr	r3, [sp, #32]
 800adf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800adf6:	4683      	mov	fp, r0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	f000 818f 	beq.w	800b11c <_dtoa_r+0xb94>
 800adfe:	4639      	mov	r1, r7
 800ae00:	2300      	movs	r3, #0
 800ae02:	220a      	movs	r2, #10
 800ae04:	4620      	mov	r0, r4
 800ae06:	f000 fc39 	bl	800b67c <__multadd>
 800ae0a:	f1b9 0f00 	cmp.w	r9, #0
 800ae0e:	4607      	mov	r7, r0
 800ae10:	f300 808e 	bgt.w	800af30 <_dtoa_r+0x9a8>
 800ae14:	9b05      	ldr	r3, [sp, #20]
 800ae16:	2b02      	cmp	r3, #2
 800ae18:	dc50      	bgt.n	800aebc <_dtoa_r+0x934>
 800ae1a:	e089      	b.n	800af30 <_dtoa_r+0x9a8>
 800ae1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ae22:	e75d      	b.n	800ace0 <_dtoa_r+0x758>
 800ae24:	9b01      	ldr	r3, [sp, #4]
 800ae26:	1e5e      	subs	r6, r3, #1
 800ae28:	9b06      	ldr	r3, [sp, #24]
 800ae2a:	42b3      	cmp	r3, r6
 800ae2c:	bfbf      	itttt	lt
 800ae2e:	9b06      	ldrlt	r3, [sp, #24]
 800ae30:	9606      	strlt	r6, [sp, #24]
 800ae32:	1af2      	sublt	r2, r6, r3
 800ae34:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800ae36:	bfb6      	itet	lt
 800ae38:	189b      	addlt	r3, r3, r2
 800ae3a:	1b9e      	subge	r6, r3, r6
 800ae3c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800ae3e:	9b01      	ldr	r3, [sp, #4]
 800ae40:	bfb8      	it	lt
 800ae42:	2600      	movlt	r6, #0
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	bfb5      	itete	lt
 800ae48:	eba8 0503 	sublt.w	r5, r8, r3
 800ae4c:	9b01      	ldrge	r3, [sp, #4]
 800ae4e:	2300      	movlt	r3, #0
 800ae50:	4645      	movge	r5, r8
 800ae52:	e747      	b.n	800ace4 <_dtoa_r+0x75c>
 800ae54:	9e06      	ldr	r6, [sp, #24]
 800ae56:	9f08      	ldr	r7, [sp, #32]
 800ae58:	4645      	mov	r5, r8
 800ae5a:	e74c      	b.n	800acf6 <_dtoa_r+0x76e>
 800ae5c:	9a06      	ldr	r2, [sp, #24]
 800ae5e:	e775      	b.n	800ad4c <_dtoa_r+0x7c4>
 800ae60:	9b05      	ldr	r3, [sp, #20]
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	dc18      	bgt.n	800ae98 <_dtoa_r+0x910>
 800ae66:	9b02      	ldr	r3, [sp, #8]
 800ae68:	b9b3      	cbnz	r3, 800ae98 <_dtoa_r+0x910>
 800ae6a:	9b03      	ldr	r3, [sp, #12]
 800ae6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae70:	b9a3      	cbnz	r3, 800ae9c <_dtoa_r+0x914>
 800ae72:	9b03      	ldr	r3, [sp, #12]
 800ae74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae78:	0d1b      	lsrs	r3, r3, #20
 800ae7a:	051b      	lsls	r3, r3, #20
 800ae7c:	b12b      	cbz	r3, 800ae8a <_dtoa_r+0x902>
 800ae7e:	9b04      	ldr	r3, [sp, #16]
 800ae80:	3301      	adds	r3, #1
 800ae82:	9304      	str	r3, [sp, #16]
 800ae84:	f108 0801 	add.w	r8, r8, #1
 800ae88:	2301      	movs	r3, #1
 800ae8a:	9306      	str	r3, [sp, #24]
 800ae8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	f47f af74 	bne.w	800ad7c <_dtoa_r+0x7f4>
 800ae94:	2001      	movs	r0, #1
 800ae96:	e779      	b.n	800ad8c <_dtoa_r+0x804>
 800ae98:	2300      	movs	r3, #0
 800ae9a:	e7f6      	b.n	800ae8a <_dtoa_r+0x902>
 800ae9c:	9b02      	ldr	r3, [sp, #8]
 800ae9e:	e7f4      	b.n	800ae8a <_dtoa_r+0x902>
 800aea0:	d085      	beq.n	800adae <_dtoa_r+0x826>
 800aea2:	4618      	mov	r0, r3
 800aea4:	301c      	adds	r0, #28
 800aea6:	e77d      	b.n	800ada4 <_dtoa_r+0x81c>
 800aea8:	40240000 	.word	0x40240000
 800aeac:	9b01      	ldr	r3, [sp, #4]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	dc38      	bgt.n	800af24 <_dtoa_r+0x99c>
 800aeb2:	9b05      	ldr	r3, [sp, #20]
 800aeb4:	2b02      	cmp	r3, #2
 800aeb6:	dd35      	ble.n	800af24 <_dtoa_r+0x99c>
 800aeb8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800aebc:	f1b9 0f00 	cmp.w	r9, #0
 800aec0:	d10d      	bne.n	800aede <_dtoa_r+0x956>
 800aec2:	4631      	mov	r1, r6
 800aec4:	464b      	mov	r3, r9
 800aec6:	2205      	movs	r2, #5
 800aec8:	4620      	mov	r0, r4
 800aeca:	f000 fbd7 	bl	800b67c <__multadd>
 800aece:	4601      	mov	r1, r0
 800aed0:	4606      	mov	r6, r0
 800aed2:	4658      	mov	r0, fp
 800aed4:	f000 fdee 	bl	800bab4 <__mcmp>
 800aed8:	2800      	cmp	r0, #0
 800aeda:	f73f adbd 	bgt.w	800aa58 <_dtoa_r+0x4d0>
 800aede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aee0:	9d00      	ldr	r5, [sp, #0]
 800aee2:	ea6f 0a03 	mvn.w	sl, r3
 800aee6:	f04f 0800 	mov.w	r8, #0
 800aeea:	4631      	mov	r1, r6
 800aeec:	4620      	mov	r0, r4
 800aeee:	f000 fba3 	bl	800b638 <_Bfree>
 800aef2:	2f00      	cmp	r7, #0
 800aef4:	f43f aeb4 	beq.w	800ac60 <_dtoa_r+0x6d8>
 800aef8:	f1b8 0f00 	cmp.w	r8, #0
 800aefc:	d005      	beq.n	800af0a <_dtoa_r+0x982>
 800aefe:	45b8      	cmp	r8, r7
 800af00:	d003      	beq.n	800af0a <_dtoa_r+0x982>
 800af02:	4641      	mov	r1, r8
 800af04:	4620      	mov	r0, r4
 800af06:	f000 fb97 	bl	800b638 <_Bfree>
 800af0a:	4639      	mov	r1, r7
 800af0c:	4620      	mov	r0, r4
 800af0e:	f000 fb93 	bl	800b638 <_Bfree>
 800af12:	e6a5      	b.n	800ac60 <_dtoa_r+0x6d8>
 800af14:	2600      	movs	r6, #0
 800af16:	4637      	mov	r7, r6
 800af18:	e7e1      	b.n	800aede <_dtoa_r+0x956>
 800af1a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800af1c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800af20:	4637      	mov	r7, r6
 800af22:	e599      	b.n	800aa58 <_dtoa_r+0x4d0>
 800af24:	9b08      	ldr	r3, [sp, #32]
 800af26:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	f000 80fd 	beq.w	800b12a <_dtoa_r+0xba2>
 800af30:	2d00      	cmp	r5, #0
 800af32:	dd05      	ble.n	800af40 <_dtoa_r+0x9b8>
 800af34:	4639      	mov	r1, r7
 800af36:	462a      	mov	r2, r5
 800af38:	4620      	mov	r0, r4
 800af3a:	f000 fd4f 	bl	800b9dc <__lshift>
 800af3e:	4607      	mov	r7, r0
 800af40:	9b06      	ldr	r3, [sp, #24]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d05c      	beq.n	800b000 <_dtoa_r+0xa78>
 800af46:	6879      	ldr	r1, [r7, #4]
 800af48:	4620      	mov	r0, r4
 800af4a:	f000 fb35 	bl	800b5b8 <_Balloc>
 800af4e:	4605      	mov	r5, r0
 800af50:	b928      	cbnz	r0, 800af5e <_dtoa_r+0x9d6>
 800af52:	4b80      	ldr	r3, [pc, #512]	; (800b154 <_dtoa_r+0xbcc>)
 800af54:	4602      	mov	r2, r0
 800af56:	f240 21ea 	movw	r1, #746	; 0x2ea
 800af5a:	f7ff bb2e 	b.w	800a5ba <_dtoa_r+0x32>
 800af5e:	693a      	ldr	r2, [r7, #16]
 800af60:	3202      	adds	r2, #2
 800af62:	0092      	lsls	r2, r2, #2
 800af64:	f107 010c 	add.w	r1, r7, #12
 800af68:	300c      	adds	r0, #12
 800af6a:	f7fe fc87 	bl	800987c <memcpy>
 800af6e:	2201      	movs	r2, #1
 800af70:	4629      	mov	r1, r5
 800af72:	4620      	mov	r0, r4
 800af74:	f000 fd32 	bl	800b9dc <__lshift>
 800af78:	9b00      	ldr	r3, [sp, #0]
 800af7a:	3301      	adds	r3, #1
 800af7c:	9301      	str	r3, [sp, #4]
 800af7e:	9b00      	ldr	r3, [sp, #0]
 800af80:	444b      	add	r3, r9
 800af82:	9307      	str	r3, [sp, #28]
 800af84:	9b02      	ldr	r3, [sp, #8]
 800af86:	f003 0301 	and.w	r3, r3, #1
 800af8a:	46b8      	mov	r8, r7
 800af8c:	9306      	str	r3, [sp, #24]
 800af8e:	4607      	mov	r7, r0
 800af90:	9b01      	ldr	r3, [sp, #4]
 800af92:	4631      	mov	r1, r6
 800af94:	3b01      	subs	r3, #1
 800af96:	4658      	mov	r0, fp
 800af98:	9302      	str	r3, [sp, #8]
 800af9a:	f7ff fa67 	bl	800a46c <quorem>
 800af9e:	4603      	mov	r3, r0
 800afa0:	3330      	adds	r3, #48	; 0x30
 800afa2:	9004      	str	r0, [sp, #16]
 800afa4:	4641      	mov	r1, r8
 800afa6:	4658      	mov	r0, fp
 800afa8:	9308      	str	r3, [sp, #32]
 800afaa:	f000 fd83 	bl	800bab4 <__mcmp>
 800afae:	463a      	mov	r2, r7
 800afb0:	4681      	mov	r9, r0
 800afb2:	4631      	mov	r1, r6
 800afb4:	4620      	mov	r0, r4
 800afb6:	f000 fd99 	bl	800baec <__mdiff>
 800afba:	68c2      	ldr	r2, [r0, #12]
 800afbc:	9b08      	ldr	r3, [sp, #32]
 800afbe:	4605      	mov	r5, r0
 800afc0:	bb02      	cbnz	r2, 800b004 <_dtoa_r+0xa7c>
 800afc2:	4601      	mov	r1, r0
 800afc4:	4658      	mov	r0, fp
 800afc6:	f000 fd75 	bl	800bab4 <__mcmp>
 800afca:	9b08      	ldr	r3, [sp, #32]
 800afcc:	4602      	mov	r2, r0
 800afce:	4629      	mov	r1, r5
 800afd0:	4620      	mov	r0, r4
 800afd2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800afd6:	f000 fb2f 	bl	800b638 <_Bfree>
 800afda:	9b05      	ldr	r3, [sp, #20]
 800afdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afde:	9d01      	ldr	r5, [sp, #4]
 800afe0:	ea43 0102 	orr.w	r1, r3, r2
 800afe4:	9b06      	ldr	r3, [sp, #24]
 800afe6:	430b      	orrs	r3, r1
 800afe8:	9b08      	ldr	r3, [sp, #32]
 800afea:	d10d      	bne.n	800b008 <_dtoa_r+0xa80>
 800afec:	2b39      	cmp	r3, #57	; 0x39
 800afee:	d029      	beq.n	800b044 <_dtoa_r+0xabc>
 800aff0:	f1b9 0f00 	cmp.w	r9, #0
 800aff4:	dd01      	ble.n	800affa <_dtoa_r+0xa72>
 800aff6:	9b04      	ldr	r3, [sp, #16]
 800aff8:	3331      	adds	r3, #49	; 0x31
 800affa:	9a02      	ldr	r2, [sp, #8]
 800affc:	7013      	strb	r3, [r2, #0]
 800affe:	e774      	b.n	800aeea <_dtoa_r+0x962>
 800b000:	4638      	mov	r0, r7
 800b002:	e7b9      	b.n	800af78 <_dtoa_r+0x9f0>
 800b004:	2201      	movs	r2, #1
 800b006:	e7e2      	b.n	800afce <_dtoa_r+0xa46>
 800b008:	f1b9 0f00 	cmp.w	r9, #0
 800b00c:	db06      	blt.n	800b01c <_dtoa_r+0xa94>
 800b00e:	9905      	ldr	r1, [sp, #20]
 800b010:	ea41 0909 	orr.w	r9, r1, r9
 800b014:	9906      	ldr	r1, [sp, #24]
 800b016:	ea59 0101 	orrs.w	r1, r9, r1
 800b01a:	d120      	bne.n	800b05e <_dtoa_r+0xad6>
 800b01c:	2a00      	cmp	r2, #0
 800b01e:	ddec      	ble.n	800affa <_dtoa_r+0xa72>
 800b020:	4659      	mov	r1, fp
 800b022:	2201      	movs	r2, #1
 800b024:	4620      	mov	r0, r4
 800b026:	9301      	str	r3, [sp, #4]
 800b028:	f000 fcd8 	bl	800b9dc <__lshift>
 800b02c:	4631      	mov	r1, r6
 800b02e:	4683      	mov	fp, r0
 800b030:	f000 fd40 	bl	800bab4 <__mcmp>
 800b034:	2800      	cmp	r0, #0
 800b036:	9b01      	ldr	r3, [sp, #4]
 800b038:	dc02      	bgt.n	800b040 <_dtoa_r+0xab8>
 800b03a:	d1de      	bne.n	800affa <_dtoa_r+0xa72>
 800b03c:	07da      	lsls	r2, r3, #31
 800b03e:	d5dc      	bpl.n	800affa <_dtoa_r+0xa72>
 800b040:	2b39      	cmp	r3, #57	; 0x39
 800b042:	d1d8      	bne.n	800aff6 <_dtoa_r+0xa6e>
 800b044:	9a02      	ldr	r2, [sp, #8]
 800b046:	2339      	movs	r3, #57	; 0x39
 800b048:	7013      	strb	r3, [r2, #0]
 800b04a:	462b      	mov	r3, r5
 800b04c:	461d      	mov	r5, r3
 800b04e:	3b01      	subs	r3, #1
 800b050:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b054:	2a39      	cmp	r2, #57	; 0x39
 800b056:	d050      	beq.n	800b0fa <_dtoa_r+0xb72>
 800b058:	3201      	adds	r2, #1
 800b05a:	701a      	strb	r2, [r3, #0]
 800b05c:	e745      	b.n	800aeea <_dtoa_r+0x962>
 800b05e:	2a00      	cmp	r2, #0
 800b060:	dd03      	ble.n	800b06a <_dtoa_r+0xae2>
 800b062:	2b39      	cmp	r3, #57	; 0x39
 800b064:	d0ee      	beq.n	800b044 <_dtoa_r+0xabc>
 800b066:	3301      	adds	r3, #1
 800b068:	e7c7      	b.n	800affa <_dtoa_r+0xa72>
 800b06a:	9a01      	ldr	r2, [sp, #4]
 800b06c:	9907      	ldr	r1, [sp, #28]
 800b06e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b072:	428a      	cmp	r2, r1
 800b074:	d02a      	beq.n	800b0cc <_dtoa_r+0xb44>
 800b076:	4659      	mov	r1, fp
 800b078:	2300      	movs	r3, #0
 800b07a:	220a      	movs	r2, #10
 800b07c:	4620      	mov	r0, r4
 800b07e:	f000 fafd 	bl	800b67c <__multadd>
 800b082:	45b8      	cmp	r8, r7
 800b084:	4683      	mov	fp, r0
 800b086:	f04f 0300 	mov.w	r3, #0
 800b08a:	f04f 020a 	mov.w	r2, #10
 800b08e:	4641      	mov	r1, r8
 800b090:	4620      	mov	r0, r4
 800b092:	d107      	bne.n	800b0a4 <_dtoa_r+0xb1c>
 800b094:	f000 faf2 	bl	800b67c <__multadd>
 800b098:	4680      	mov	r8, r0
 800b09a:	4607      	mov	r7, r0
 800b09c:	9b01      	ldr	r3, [sp, #4]
 800b09e:	3301      	adds	r3, #1
 800b0a0:	9301      	str	r3, [sp, #4]
 800b0a2:	e775      	b.n	800af90 <_dtoa_r+0xa08>
 800b0a4:	f000 faea 	bl	800b67c <__multadd>
 800b0a8:	4639      	mov	r1, r7
 800b0aa:	4680      	mov	r8, r0
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	220a      	movs	r2, #10
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	f000 fae3 	bl	800b67c <__multadd>
 800b0b6:	4607      	mov	r7, r0
 800b0b8:	e7f0      	b.n	800b09c <_dtoa_r+0xb14>
 800b0ba:	f1b9 0f00 	cmp.w	r9, #0
 800b0be:	9a00      	ldr	r2, [sp, #0]
 800b0c0:	bfcc      	ite	gt
 800b0c2:	464d      	movgt	r5, r9
 800b0c4:	2501      	movle	r5, #1
 800b0c6:	4415      	add	r5, r2
 800b0c8:	f04f 0800 	mov.w	r8, #0
 800b0cc:	4659      	mov	r1, fp
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	9301      	str	r3, [sp, #4]
 800b0d4:	f000 fc82 	bl	800b9dc <__lshift>
 800b0d8:	4631      	mov	r1, r6
 800b0da:	4683      	mov	fp, r0
 800b0dc:	f000 fcea 	bl	800bab4 <__mcmp>
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	dcb2      	bgt.n	800b04a <_dtoa_r+0xac2>
 800b0e4:	d102      	bne.n	800b0ec <_dtoa_r+0xb64>
 800b0e6:	9b01      	ldr	r3, [sp, #4]
 800b0e8:	07db      	lsls	r3, r3, #31
 800b0ea:	d4ae      	bmi.n	800b04a <_dtoa_r+0xac2>
 800b0ec:	462b      	mov	r3, r5
 800b0ee:	461d      	mov	r5, r3
 800b0f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0f4:	2a30      	cmp	r2, #48	; 0x30
 800b0f6:	d0fa      	beq.n	800b0ee <_dtoa_r+0xb66>
 800b0f8:	e6f7      	b.n	800aeea <_dtoa_r+0x962>
 800b0fa:	9a00      	ldr	r2, [sp, #0]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d1a5      	bne.n	800b04c <_dtoa_r+0xac4>
 800b100:	f10a 0a01 	add.w	sl, sl, #1
 800b104:	2331      	movs	r3, #49	; 0x31
 800b106:	e779      	b.n	800affc <_dtoa_r+0xa74>
 800b108:	4b13      	ldr	r3, [pc, #76]	; (800b158 <_dtoa_r+0xbd0>)
 800b10a:	f7ff baaf 	b.w	800a66c <_dtoa_r+0xe4>
 800b10e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b110:	2b00      	cmp	r3, #0
 800b112:	f47f aa86 	bne.w	800a622 <_dtoa_r+0x9a>
 800b116:	4b11      	ldr	r3, [pc, #68]	; (800b15c <_dtoa_r+0xbd4>)
 800b118:	f7ff baa8 	b.w	800a66c <_dtoa_r+0xe4>
 800b11c:	f1b9 0f00 	cmp.w	r9, #0
 800b120:	dc03      	bgt.n	800b12a <_dtoa_r+0xba2>
 800b122:	9b05      	ldr	r3, [sp, #20]
 800b124:	2b02      	cmp	r3, #2
 800b126:	f73f aec9 	bgt.w	800aebc <_dtoa_r+0x934>
 800b12a:	9d00      	ldr	r5, [sp, #0]
 800b12c:	4631      	mov	r1, r6
 800b12e:	4658      	mov	r0, fp
 800b130:	f7ff f99c 	bl	800a46c <quorem>
 800b134:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b138:	f805 3b01 	strb.w	r3, [r5], #1
 800b13c:	9a00      	ldr	r2, [sp, #0]
 800b13e:	1aaa      	subs	r2, r5, r2
 800b140:	4591      	cmp	r9, r2
 800b142:	ddba      	ble.n	800b0ba <_dtoa_r+0xb32>
 800b144:	4659      	mov	r1, fp
 800b146:	2300      	movs	r3, #0
 800b148:	220a      	movs	r2, #10
 800b14a:	4620      	mov	r0, r4
 800b14c:	f000 fa96 	bl	800b67c <__multadd>
 800b150:	4683      	mov	fp, r0
 800b152:	e7eb      	b.n	800b12c <_dtoa_r+0xba4>
 800b154:	0800c6cf 	.word	0x0800c6cf
 800b158:	0800c628 	.word	0x0800c628
 800b15c:	0800c64c 	.word	0x0800c64c

0800b160 <__sflush_r>:
 800b160:	898a      	ldrh	r2, [r1, #12]
 800b162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b166:	4605      	mov	r5, r0
 800b168:	0710      	lsls	r0, r2, #28
 800b16a:	460c      	mov	r4, r1
 800b16c:	d458      	bmi.n	800b220 <__sflush_r+0xc0>
 800b16e:	684b      	ldr	r3, [r1, #4]
 800b170:	2b00      	cmp	r3, #0
 800b172:	dc05      	bgt.n	800b180 <__sflush_r+0x20>
 800b174:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b176:	2b00      	cmp	r3, #0
 800b178:	dc02      	bgt.n	800b180 <__sflush_r+0x20>
 800b17a:	2000      	movs	r0, #0
 800b17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b180:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b182:	2e00      	cmp	r6, #0
 800b184:	d0f9      	beq.n	800b17a <__sflush_r+0x1a>
 800b186:	2300      	movs	r3, #0
 800b188:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b18c:	682f      	ldr	r7, [r5, #0]
 800b18e:	602b      	str	r3, [r5, #0]
 800b190:	d032      	beq.n	800b1f8 <__sflush_r+0x98>
 800b192:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b194:	89a3      	ldrh	r3, [r4, #12]
 800b196:	075a      	lsls	r2, r3, #29
 800b198:	d505      	bpl.n	800b1a6 <__sflush_r+0x46>
 800b19a:	6863      	ldr	r3, [r4, #4]
 800b19c:	1ac0      	subs	r0, r0, r3
 800b19e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b1a0:	b10b      	cbz	r3, 800b1a6 <__sflush_r+0x46>
 800b1a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b1a4:	1ac0      	subs	r0, r0, r3
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1ac:	6a21      	ldr	r1, [r4, #32]
 800b1ae:	4628      	mov	r0, r5
 800b1b0:	47b0      	blx	r6
 800b1b2:	1c43      	adds	r3, r0, #1
 800b1b4:	89a3      	ldrh	r3, [r4, #12]
 800b1b6:	d106      	bne.n	800b1c6 <__sflush_r+0x66>
 800b1b8:	6829      	ldr	r1, [r5, #0]
 800b1ba:	291d      	cmp	r1, #29
 800b1bc:	d82c      	bhi.n	800b218 <__sflush_r+0xb8>
 800b1be:	4a2a      	ldr	r2, [pc, #168]	; (800b268 <__sflush_r+0x108>)
 800b1c0:	40ca      	lsrs	r2, r1
 800b1c2:	07d6      	lsls	r6, r2, #31
 800b1c4:	d528      	bpl.n	800b218 <__sflush_r+0xb8>
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	6062      	str	r2, [r4, #4]
 800b1ca:	04d9      	lsls	r1, r3, #19
 800b1cc:	6922      	ldr	r2, [r4, #16]
 800b1ce:	6022      	str	r2, [r4, #0]
 800b1d0:	d504      	bpl.n	800b1dc <__sflush_r+0x7c>
 800b1d2:	1c42      	adds	r2, r0, #1
 800b1d4:	d101      	bne.n	800b1da <__sflush_r+0x7a>
 800b1d6:	682b      	ldr	r3, [r5, #0]
 800b1d8:	b903      	cbnz	r3, 800b1dc <__sflush_r+0x7c>
 800b1da:	6560      	str	r0, [r4, #84]	; 0x54
 800b1dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1de:	602f      	str	r7, [r5, #0]
 800b1e0:	2900      	cmp	r1, #0
 800b1e2:	d0ca      	beq.n	800b17a <__sflush_r+0x1a>
 800b1e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1e8:	4299      	cmp	r1, r3
 800b1ea:	d002      	beq.n	800b1f2 <__sflush_r+0x92>
 800b1ec:	4628      	mov	r0, r5
 800b1ee:	f000 fd71 	bl	800bcd4 <_free_r>
 800b1f2:	2000      	movs	r0, #0
 800b1f4:	6360      	str	r0, [r4, #52]	; 0x34
 800b1f6:	e7c1      	b.n	800b17c <__sflush_r+0x1c>
 800b1f8:	6a21      	ldr	r1, [r4, #32]
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	4628      	mov	r0, r5
 800b1fe:	47b0      	blx	r6
 800b200:	1c41      	adds	r1, r0, #1
 800b202:	d1c7      	bne.n	800b194 <__sflush_r+0x34>
 800b204:	682b      	ldr	r3, [r5, #0]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d0c4      	beq.n	800b194 <__sflush_r+0x34>
 800b20a:	2b1d      	cmp	r3, #29
 800b20c:	d001      	beq.n	800b212 <__sflush_r+0xb2>
 800b20e:	2b16      	cmp	r3, #22
 800b210:	d101      	bne.n	800b216 <__sflush_r+0xb6>
 800b212:	602f      	str	r7, [r5, #0]
 800b214:	e7b1      	b.n	800b17a <__sflush_r+0x1a>
 800b216:	89a3      	ldrh	r3, [r4, #12]
 800b218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b21c:	81a3      	strh	r3, [r4, #12]
 800b21e:	e7ad      	b.n	800b17c <__sflush_r+0x1c>
 800b220:	690f      	ldr	r7, [r1, #16]
 800b222:	2f00      	cmp	r7, #0
 800b224:	d0a9      	beq.n	800b17a <__sflush_r+0x1a>
 800b226:	0793      	lsls	r3, r2, #30
 800b228:	680e      	ldr	r6, [r1, #0]
 800b22a:	bf08      	it	eq
 800b22c:	694b      	ldreq	r3, [r1, #20]
 800b22e:	600f      	str	r7, [r1, #0]
 800b230:	bf18      	it	ne
 800b232:	2300      	movne	r3, #0
 800b234:	eba6 0807 	sub.w	r8, r6, r7
 800b238:	608b      	str	r3, [r1, #8]
 800b23a:	f1b8 0f00 	cmp.w	r8, #0
 800b23e:	dd9c      	ble.n	800b17a <__sflush_r+0x1a>
 800b240:	6a21      	ldr	r1, [r4, #32]
 800b242:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b244:	4643      	mov	r3, r8
 800b246:	463a      	mov	r2, r7
 800b248:	4628      	mov	r0, r5
 800b24a:	47b0      	blx	r6
 800b24c:	2800      	cmp	r0, #0
 800b24e:	dc06      	bgt.n	800b25e <__sflush_r+0xfe>
 800b250:	89a3      	ldrh	r3, [r4, #12]
 800b252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b256:	81a3      	strh	r3, [r4, #12]
 800b258:	f04f 30ff 	mov.w	r0, #4294967295
 800b25c:	e78e      	b.n	800b17c <__sflush_r+0x1c>
 800b25e:	4407      	add	r7, r0
 800b260:	eba8 0800 	sub.w	r8, r8, r0
 800b264:	e7e9      	b.n	800b23a <__sflush_r+0xda>
 800b266:	bf00      	nop
 800b268:	20400001 	.word	0x20400001

0800b26c <_fflush_r>:
 800b26c:	b538      	push	{r3, r4, r5, lr}
 800b26e:	690b      	ldr	r3, [r1, #16]
 800b270:	4605      	mov	r5, r0
 800b272:	460c      	mov	r4, r1
 800b274:	b913      	cbnz	r3, 800b27c <_fflush_r+0x10>
 800b276:	2500      	movs	r5, #0
 800b278:	4628      	mov	r0, r5
 800b27a:	bd38      	pop	{r3, r4, r5, pc}
 800b27c:	b118      	cbz	r0, 800b286 <_fflush_r+0x1a>
 800b27e:	6983      	ldr	r3, [r0, #24]
 800b280:	b90b      	cbnz	r3, 800b286 <_fflush_r+0x1a>
 800b282:	f000 f887 	bl	800b394 <__sinit>
 800b286:	4b14      	ldr	r3, [pc, #80]	; (800b2d8 <_fflush_r+0x6c>)
 800b288:	429c      	cmp	r4, r3
 800b28a:	d11b      	bne.n	800b2c4 <_fflush_r+0x58>
 800b28c:	686c      	ldr	r4, [r5, #4]
 800b28e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d0ef      	beq.n	800b276 <_fflush_r+0xa>
 800b296:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b298:	07d0      	lsls	r0, r2, #31
 800b29a:	d404      	bmi.n	800b2a6 <_fflush_r+0x3a>
 800b29c:	0599      	lsls	r1, r3, #22
 800b29e:	d402      	bmi.n	800b2a6 <_fflush_r+0x3a>
 800b2a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2a2:	f000 f91a 	bl	800b4da <__retarget_lock_acquire_recursive>
 800b2a6:	4628      	mov	r0, r5
 800b2a8:	4621      	mov	r1, r4
 800b2aa:	f7ff ff59 	bl	800b160 <__sflush_r>
 800b2ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2b0:	07da      	lsls	r2, r3, #31
 800b2b2:	4605      	mov	r5, r0
 800b2b4:	d4e0      	bmi.n	800b278 <_fflush_r+0xc>
 800b2b6:	89a3      	ldrh	r3, [r4, #12]
 800b2b8:	059b      	lsls	r3, r3, #22
 800b2ba:	d4dd      	bmi.n	800b278 <_fflush_r+0xc>
 800b2bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2be:	f000 f90d 	bl	800b4dc <__retarget_lock_release_recursive>
 800b2c2:	e7d9      	b.n	800b278 <_fflush_r+0xc>
 800b2c4:	4b05      	ldr	r3, [pc, #20]	; (800b2dc <_fflush_r+0x70>)
 800b2c6:	429c      	cmp	r4, r3
 800b2c8:	d101      	bne.n	800b2ce <_fflush_r+0x62>
 800b2ca:	68ac      	ldr	r4, [r5, #8]
 800b2cc:	e7df      	b.n	800b28e <_fflush_r+0x22>
 800b2ce:	4b04      	ldr	r3, [pc, #16]	; (800b2e0 <_fflush_r+0x74>)
 800b2d0:	429c      	cmp	r4, r3
 800b2d2:	bf08      	it	eq
 800b2d4:	68ec      	ldreq	r4, [r5, #12]
 800b2d6:	e7da      	b.n	800b28e <_fflush_r+0x22>
 800b2d8:	0800c700 	.word	0x0800c700
 800b2dc:	0800c720 	.word	0x0800c720
 800b2e0:	0800c6e0 	.word	0x0800c6e0

0800b2e4 <std>:
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	b510      	push	{r4, lr}
 800b2e8:	4604      	mov	r4, r0
 800b2ea:	e9c0 3300 	strd	r3, r3, [r0]
 800b2ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b2f2:	6083      	str	r3, [r0, #8]
 800b2f4:	8181      	strh	r1, [r0, #12]
 800b2f6:	6643      	str	r3, [r0, #100]	; 0x64
 800b2f8:	81c2      	strh	r2, [r0, #14]
 800b2fa:	6183      	str	r3, [r0, #24]
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	2208      	movs	r2, #8
 800b300:	305c      	adds	r0, #92	; 0x5c
 800b302:	f7fe fac9 	bl	8009898 <memset>
 800b306:	4b05      	ldr	r3, [pc, #20]	; (800b31c <std+0x38>)
 800b308:	6263      	str	r3, [r4, #36]	; 0x24
 800b30a:	4b05      	ldr	r3, [pc, #20]	; (800b320 <std+0x3c>)
 800b30c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b30e:	4b05      	ldr	r3, [pc, #20]	; (800b324 <std+0x40>)
 800b310:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b312:	4b05      	ldr	r3, [pc, #20]	; (800b328 <std+0x44>)
 800b314:	6224      	str	r4, [r4, #32]
 800b316:	6323      	str	r3, [r4, #48]	; 0x30
 800b318:	bd10      	pop	{r4, pc}
 800b31a:	bf00      	nop
 800b31c:	0800c18d 	.word	0x0800c18d
 800b320:	0800c1af 	.word	0x0800c1af
 800b324:	0800c1e7 	.word	0x0800c1e7
 800b328:	0800c20b 	.word	0x0800c20b

0800b32c <_cleanup_r>:
 800b32c:	4901      	ldr	r1, [pc, #4]	; (800b334 <_cleanup_r+0x8>)
 800b32e:	f000 b8af 	b.w	800b490 <_fwalk_reent>
 800b332:	bf00      	nop
 800b334:	0800b26d 	.word	0x0800b26d

0800b338 <__sfmoreglue>:
 800b338:	b570      	push	{r4, r5, r6, lr}
 800b33a:	1e4a      	subs	r2, r1, #1
 800b33c:	2568      	movs	r5, #104	; 0x68
 800b33e:	4355      	muls	r5, r2
 800b340:	460e      	mov	r6, r1
 800b342:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b346:	f000 fd15 	bl	800bd74 <_malloc_r>
 800b34a:	4604      	mov	r4, r0
 800b34c:	b140      	cbz	r0, 800b360 <__sfmoreglue+0x28>
 800b34e:	2100      	movs	r1, #0
 800b350:	e9c0 1600 	strd	r1, r6, [r0]
 800b354:	300c      	adds	r0, #12
 800b356:	60a0      	str	r0, [r4, #8]
 800b358:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b35c:	f7fe fa9c 	bl	8009898 <memset>
 800b360:	4620      	mov	r0, r4
 800b362:	bd70      	pop	{r4, r5, r6, pc}

0800b364 <__sfp_lock_acquire>:
 800b364:	4801      	ldr	r0, [pc, #4]	; (800b36c <__sfp_lock_acquire+0x8>)
 800b366:	f000 b8b8 	b.w	800b4da <__retarget_lock_acquire_recursive>
 800b36a:	bf00      	nop
 800b36c:	20002fbc 	.word	0x20002fbc

0800b370 <__sfp_lock_release>:
 800b370:	4801      	ldr	r0, [pc, #4]	; (800b378 <__sfp_lock_release+0x8>)
 800b372:	f000 b8b3 	b.w	800b4dc <__retarget_lock_release_recursive>
 800b376:	bf00      	nop
 800b378:	20002fbc 	.word	0x20002fbc

0800b37c <__sinit_lock_acquire>:
 800b37c:	4801      	ldr	r0, [pc, #4]	; (800b384 <__sinit_lock_acquire+0x8>)
 800b37e:	f000 b8ac 	b.w	800b4da <__retarget_lock_acquire_recursive>
 800b382:	bf00      	nop
 800b384:	20002fb7 	.word	0x20002fb7

0800b388 <__sinit_lock_release>:
 800b388:	4801      	ldr	r0, [pc, #4]	; (800b390 <__sinit_lock_release+0x8>)
 800b38a:	f000 b8a7 	b.w	800b4dc <__retarget_lock_release_recursive>
 800b38e:	bf00      	nop
 800b390:	20002fb7 	.word	0x20002fb7

0800b394 <__sinit>:
 800b394:	b510      	push	{r4, lr}
 800b396:	4604      	mov	r4, r0
 800b398:	f7ff fff0 	bl	800b37c <__sinit_lock_acquire>
 800b39c:	69a3      	ldr	r3, [r4, #24]
 800b39e:	b11b      	cbz	r3, 800b3a8 <__sinit+0x14>
 800b3a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3a4:	f7ff bff0 	b.w	800b388 <__sinit_lock_release>
 800b3a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b3ac:	6523      	str	r3, [r4, #80]	; 0x50
 800b3ae:	4b13      	ldr	r3, [pc, #76]	; (800b3fc <__sinit+0x68>)
 800b3b0:	4a13      	ldr	r2, [pc, #76]	; (800b400 <__sinit+0x6c>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b3b6:	42a3      	cmp	r3, r4
 800b3b8:	bf04      	itt	eq
 800b3ba:	2301      	moveq	r3, #1
 800b3bc:	61a3      	streq	r3, [r4, #24]
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f000 f820 	bl	800b404 <__sfp>
 800b3c4:	6060      	str	r0, [r4, #4]
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	f000 f81c 	bl	800b404 <__sfp>
 800b3cc:	60a0      	str	r0, [r4, #8]
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	f000 f818 	bl	800b404 <__sfp>
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	60e0      	str	r0, [r4, #12]
 800b3d8:	2104      	movs	r1, #4
 800b3da:	6860      	ldr	r0, [r4, #4]
 800b3dc:	f7ff ff82 	bl	800b2e4 <std>
 800b3e0:	68a0      	ldr	r0, [r4, #8]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	2109      	movs	r1, #9
 800b3e6:	f7ff ff7d 	bl	800b2e4 <std>
 800b3ea:	68e0      	ldr	r0, [r4, #12]
 800b3ec:	2202      	movs	r2, #2
 800b3ee:	2112      	movs	r1, #18
 800b3f0:	f7ff ff78 	bl	800b2e4 <std>
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	61a3      	str	r3, [r4, #24]
 800b3f8:	e7d2      	b.n	800b3a0 <__sinit+0xc>
 800b3fa:	bf00      	nop
 800b3fc:	0800c614 	.word	0x0800c614
 800b400:	0800b32d 	.word	0x0800b32d

0800b404 <__sfp>:
 800b404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b406:	4607      	mov	r7, r0
 800b408:	f7ff ffac 	bl	800b364 <__sfp_lock_acquire>
 800b40c:	4b1e      	ldr	r3, [pc, #120]	; (800b488 <__sfp+0x84>)
 800b40e:	681e      	ldr	r6, [r3, #0]
 800b410:	69b3      	ldr	r3, [r6, #24]
 800b412:	b913      	cbnz	r3, 800b41a <__sfp+0x16>
 800b414:	4630      	mov	r0, r6
 800b416:	f7ff ffbd 	bl	800b394 <__sinit>
 800b41a:	3648      	adds	r6, #72	; 0x48
 800b41c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b420:	3b01      	subs	r3, #1
 800b422:	d503      	bpl.n	800b42c <__sfp+0x28>
 800b424:	6833      	ldr	r3, [r6, #0]
 800b426:	b30b      	cbz	r3, 800b46c <__sfp+0x68>
 800b428:	6836      	ldr	r6, [r6, #0]
 800b42a:	e7f7      	b.n	800b41c <__sfp+0x18>
 800b42c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b430:	b9d5      	cbnz	r5, 800b468 <__sfp+0x64>
 800b432:	4b16      	ldr	r3, [pc, #88]	; (800b48c <__sfp+0x88>)
 800b434:	60e3      	str	r3, [r4, #12]
 800b436:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b43a:	6665      	str	r5, [r4, #100]	; 0x64
 800b43c:	f000 f84c 	bl	800b4d8 <__retarget_lock_init_recursive>
 800b440:	f7ff ff96 	bl	800b370 <__sfp_lock_release>
 800b444:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b448:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b44c:	6025      	str	r5, [r4, #0]
 800b44e:	61a5      	str	r5, [r4, #24]
 800b450:	2208      	movs	r2, #8
 800b452:	4629      	mov	r1, r5
 800b454:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b458:	f7fe fa1e 	bl	8009898 <memset>
 800b45c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b460:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b464:	4620      	mov	r0, r4
 800b466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b468:	3468      	adds	r4, #104	; 0x68
 800b46a:	e7d9      	b.n	800b420 <__sfp+0x1c>
 800b46c:	2104      	movs	r1, #4
 800b46e:	4638      	mov	r0, r7
 800b470:	f7ff ff62 	bl	800b338 <__sfmoreglue>
 800b474:	4604      	mov	r4, r0
 800b476:	6030      	str	r0, [r6, #0]
 800b478:	2800      	cmp	r0, #0
 800b47a:	d1d5      	bne.n	800b428 <__sfp+0x24>
 800b47c:	f7ff ff78 	bl	800b370 <__sfp_lock_release>
 800b480:	230c      	movs	r3, #12
 800b482:	603b      	str	r3, [r7, #0]
 800b484:	e7ee      	b.n	800b464 <__sfp+0x60>
 800b486:	bf00      	nop
 800b488:	0800c614 	.word	0x0800c614
 800b48c:	ffff0001 	.word	0xffff0001

0800b490 <_fwalk_reent>:
 800b490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b494:	4606      	mov	r6, r0
 800b496:	4688      	mov	r8, r1
 800b498:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b49c:	2700      	movs	r7, #0
 800b49e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4a2:	f1b9 0901 	subs.w	r9, r9, #1
 800b4a6:	d505      	bpl.n	800b4b4 <_fwalk_reent+0x24>
 800b4a8:	6824      	ldr	r4, [r4, #0]
 800b4aa:	2c00      	cmp	r4, #0
 800b4ac:	d1f7      	bne.n	800b49e <_fwalk_reent+0xe>
 800b4ae:	4638      	mov	r0, r7
 800b4b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4b4:	89ab      	ldrh	r3, [r5, #12]
 800b4b6:	2b01      	cmp	r3, #1
 800b4b8:	d907      	bls.n	800b4ca <_fwalk_reent+0x3a>
 800b4ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4be:	3301      	adds	r3, #1
 800b4c0:	d003      	beq.n	800b4ca <_fwalk_reent+0x3a>
 800b4c2:	4629      	mov	r1, r5
 800b4c4:	4630      	mov	r0, r6
 800b4c6:	47c0      	blx	r8
 800b4c8:	4307      	orrs	r7, r0
 800b4ca:	3568      	adds	r5, #104	; 0x68
 800b4cc:	e7e9      	b.n	800b4a2 <_fwalk_reent+0x12>
	...

0800b4d0 <_localeconv_r>:
 800b4d0:	4800      	ldr	r0, [pc, #0]	; (800b4d4 <_localeconv_r+0x4>)
 800b4d2:	4770      	bx	lr
 800b4d4:	20000190 	.word	0x20000190

0800b4d8 <__retarget_lock_init_recursive>:
 800b4d8:	4770      	bx	lr

0800b4da <__retarget_lock_acquire_recursive>:
 800b4da:	4770      	bx	lr

0800b4dc <__retarget_lock_release_recursive>:
 800b4dc:	4770      	bx	lr

0800b4de <__swhatbuf_r>:
 800b4de:	b570      	push	{r4, r5, r6, lr}
 800b4e0:	460e      	mov	r6, r1
 800b4e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4e6:	2900      	cmp	r1, #0
 800b4e8:	b096      	sub	sp, #88	; 0x58
 800b4ea:	4614      	mov	r4, r2
 800b4ec:	461d      	mov	r5, r3
 800b4ee:	da07      	bge.n	800b500 <__swhatbuf_r+0x22>
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	602b      	str	r3, [r5, #0]
 800b4f4:	89b3      	ldrh	r3, [r6, #12]
 800b4f6:	061a      	lsls	r2, r3, #24
 800b4f8:	d410      	bmi.n	800b51c <__swhatbuf_r+0x3e>
 800b4fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4fe:	e00e      	b.n	800b51e <__swhatbuf_r+0x40>
 800b500:	466a      	mov	r2, sp
 800b502:	f000 fed9 	bl	800c2b8 <_fstat_r>
 800b506:	2800      	cmp	r0, #0
 800b508:	dbf2      	blt.n	800b4f0 <__swhatbuf_r+0x12>
 800b50a:	9a01      	ldr	r2, [sp, #4]
 800b50c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b510:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b514:	425a      	negs	r2, r3
 800b516:	415a      	adcs	r2, r3
 800b518:	602a      	str	r2, [r5, #0]
 800b51a:	e7ee      	b.n	800b4fa <__swhatbuf_r+0x1c>
 800b51c:	2340      	movs	r3, #64	; 0x40
 800b51e:	2000      	movs	r0, #0
 800b520:	6023      	str	r3, [r4, #0]
 800b522:	b016      	add	sp, #88	; 0x58
 800b524:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b528 <__smakebuf_r>:
 800b528:	898b      	ldrh	r3, [r1, #12]
 800b52a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b52c:	079d      	lsls	r5, r3, #30
 800b52e:	4606      	mov	r6, r0
 800b530:	460c      	mov	r4, r1
 800b532:	d507      	bpl.n	800b544 <__smakebuf_r+0x1c>
 800b534:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b538:	6023      	str	r3, [r4, #0]
 800b53a:	6123      	str	r3, [r4, #16]
 800b53c:	2301      	movs	r3, #1
 800b53e:	6163      	str	r3, [r4, #20]
 800b540:	b002      	add	sp, #8
 800b542:	bd70      	pop	{r4, r5, r6, pc}
 800b544:	ab01      	add	r3, sp, #4
 800b546:	466a      	mov	r2, sp
 800b548:	f7ff ffc9 	bl	800b4de <__swhatbuf_r>
 800b54c:	9900      	ldr	r1, [sp, #0]
 800b54e:	4605      	mov	r5, r0
 800b550:	4630      	mov	r0, r6
 800b552:	f000 fc0f 	bl	800bd74 <_malloc_r>
 800b556:	b948      	cbnz	r0, 800b56c <__smakebuf_r+0x44>
 800b558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b55c:	059a      	lsls	r2, r3, #22
 800b55e:	d4ef      	bmi.n	800b540 <__smakebuf_r+0x18>
 800b560:	f023 0303 	bic.w	r3, r3, #3
 800b564:	f043 0302 	orr.w	r3, r3, #2
 800b568:	81a3      	strh	r3, [r4, #12]
 800b56a:	e7e3      	b.n	800b534 <__smakebuf_r+0xc>
 800b56c:	4b0d      	ldr	r3, [pc, #52]	; (800b5a4 <__smakebuf_r+0x7c>)
 800b56e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b570:	89a3      	ldrh	r3, [r4, #12]
 800b572:	6020      	str	r0, [r4, #0]
 800b574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b578:	81a3      	strh	r3, [r4, #12]
 800b57a:	9b00      	ldr	r3, [sp, #0]
 800b57c:	6163      	str	r3, [r4, #20]
 800b57e:	9b01      	ldr	r3, [sp, #4]
 800b580:	6120      	str	r0, [r4, #16]
 800b582:	b15b      	cbz	r3, 800b59c <__smakebuf_r+0x74>
 800b584:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b588:	4630      	mov	r0, r6
 800b58a:	f000 fea7 	bl	800c2dc <_isatty_r>
 800b58e:	b128      	cbz	r0, 800b59c <__smakebuf_r+0x74>
 800b590:	89a3      	ldrh	r3, [r4, #12]
 800b592:	f023 0303 	bic.w	r3, r3, #3
 800b596:	f043 0301 	orr.w	r3, r3, #1
 800b59a:	81a3      	strh	r3, [r4, #12]
 800b59c:	89a0      	ldrh	r0, [r4, #12]
 800b59e:	4305      	orrs	r5, r0
 800b5a0:	81a5      	strh	r5, [r4, #12]
 800b5a2:	e7cd      	b.n	800b540 <__smakebuf_r+0x18>
 800b5a4:	0800b32d 	.word	0x0800b32d

0800b5a8 <malloc>:
 800b5a8:	4b02      	ldr	r3, [pc, #8]	; (800b5b4 <malloc+0xc>)
 800b5aa:	4601      	mov	r1, r0
 800b5ac:	6818      	ldr	r0, [r3, #0]
 800b5ae:	f000 bbe1 	b.w	800bd74 <_malloc_r>
 800b5b2:	bf00      	nop
 800b5b4:	2000003c 	.word	0x2000003c

0800b5b8 <_Balloc>:
 800b5b8:	b570      	push	{r4, r5, r6, lr}
 800b5ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b5bc:	4604      	mov	r4, r0
 800b5be:	460d      	mov	r5, r1
 800b5c0:	b976      	cbnz	r6, 800b5e0 <_Balloc+0x28>
 800b5c2:	2010      	movs	r0, #16
 800b5c4:	f7ff fff0 	bl	800b5a8 <malloc>
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	6260      	str	r0, [r4, #36]	; 0x24
 800b5cc:	b920      	cbnz	r0, 800b5d8 <_Balloc+0x20>
 800b5ce:	4b18      	ldr	r3, [pc, #96]	; (800b630 <_Balloc+0x78>)
 800b5d0:	4818      	ldr	r0, [pc, #96]	; (800b634 <_Balloc+0x7c>)
 800b5d2:	2166      	movs	r1, #102	; 0x66
 800b5d4:	f000 fe30 	bl	800c238 <__assert_func>
 800b5d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5dc:	6006      	str	r6, [r0, #0]
 800b5de:	60c6      	str	r6, [r0, #12]
 800b5e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b5e2:	68f3      	ldr	r3, [r6, #12]
 800b5e4:	b183      	cbz	r3, 800b608 <_Balloc+0x50>
 800b5e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5e8:	68db      	ldr	r3, [r3, #12]
 800b5ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b5ee:	b9b8      	cbnz	r0, 800b620 <_Balloc+0x68>
 800b5f0:	2101      	movs	r1, #1
 800b5f2:	fa01 f605 	lsl.w	r6, r1, r5
 800b5f6:	1d72      	adds	r2, r6, #5
 800b5f8:	0092      	lsls	r2, r2, #2
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	f000 fb5a 	bl	800bcb4 <_calloc_r>
 800b600:	b160      	cbz	r0, 800b61c <_Balloc+0x64>
 800b602:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b606:	e00e      	b.n	800b626 <_Balloc+0x6e>
 800b608:	2221      	movs	r2, #33	; 0x21
 800b60a:	2104      	movs	r1, #4
 800b60c:	4620      	mov	r0, r4
 800b60e:	f000 fb51 	bl	800bcb4 <_calloc_r>
 800b612:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b614:	60f0      	str	r0, [r6, #12]
 800b616:	68db      	ldr	r3, [r3, #12]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d1e4      	bne.n	800b5e6 <_Balloc+0x2e>
 800b61c:	2000      	movs	r0, #0
 800b61e:	bd70      	pop	{r4, r5, r6, pc}
 800b620:	6802      	ldr	r2, [r0, #0]
 800b622:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b626:	2300      	movs	r3, #0
 800b628:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b62c:	e7f7      	b.n	800b61e <_Balloc+0x66>
 800b62e:	bf00      	nop
 800b630:	0800c659 	.word	0x0800c659
 800b634:	0800c740 	.word	0x0800c740

0800b638 <_Bfree>:
 800b638:	b570      	push	{r4, r5, r6, lr}
 800b63a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b63c:	4605      	mov	r5, r0
 800b63e:	460c      	mov	r4, r1
 800b640:	b976      	cbnz	r6, 800b660 <_Bfree+0x28>
 800b642:	2010      	movs	r0, #16
 800b644:	f7ff ffb0 	bl	800b5a8 <malloc>
 800b648:	4602      	mov	r2, r0
 800b64a:	6268      	str	r0, [r5, #36]	; 0x24
 800b64c:	b920      	cbnz	r0, 800b658 <_Bfree+0x20>
 800b64e:	4b09      	ldr	r3, [pc, #36]	; (800b674 <_Bfree+0x3c>)
 800b650:	4809      	ldr	r0, [pc, #36]	; (800b678 <_Bfree+0x40>)
 800b652:	218a      	movs	r1, #138	; 0x8a
 800b654:	f000 fdf0 	bl	800c238 <__assert_func>
 800b658:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b65c:	6006      	str	r6, [r0, #0]
 800b65e:	60c6      	str	r6, [r0, #12]
 800b660:	b13c      	cbz	r4, 800b672 <_Bfree+0x3a>
 800b662:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b664:	6862      	ldr	r2, [r4, #4]
 800b666:	68db      	ldr	r3, [r3, #12]
 800b668:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b66c:	6021      	str	r1, [r4, #0]
 800b66e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b672:	bd70      	pop	{r4, r5, r6, pc}
 800b674:	0800c659 	.word	0x0800c659
 800b678:	0800c740 	.word	0x0800c740

0800b67c <__multadd>:
 800b67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b680:	690e      	ldr	r6, [r1, #16]
 800b682:	4607      	mov	r7, r0
 800b684:	4698      	mov	r8, r3
 800b686:	460c      	mov	r4, r1
 800b688:	f101 0014 	add.w	r0, r1, #20
 800b68c:	2300      	movs	r3, #0
 800b68e:	6805      	ldr	r5, [r0, #0]
 800b690:	b2a9      	uxth	r1, r5
 800b692:	fb02 8101 	mla	r1, r2, r1, r8
 800b696:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b69a:	0c2d      	lsrs	r5, r5, #16
 800b69c:	fb02 c505 	mla	r5, r2, r5, ip
 800b6a0:	b289      	uxth	r1, r1
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b6a8:	429e      	cmp	r6, r3
 800b6aa:	f840 1b04 	str.w	r1, [r0], #4
 800b6ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b6b2:	dcec      	bgt.n	800b68e <__multadd+0x12>
 800b6b4:	f1b8 0f00 	cmp.w	r8, #0
 800b6b8:	d022      	beq.n	800b700 <__multadd+0x84>
 800b6ba:	68a3      	ldr	r3, [r4, #8]
 800b6bc:	42b3      	cmp	r3, r6
 800b6be:	dc19      	bgt.n	800b6f4 <__multadd+0x78>
 800b6c0:	6861      	ldr	r1, [r4, #4]
 800b6c2:	4638      	mov	r0, r7
 800b6c4:	3101      	adds	r1, #1
 800b6c6:	f7ff ff77 	bl	800b5b8 <_Balloc>
 800b6ca:	4605      	mov	r5, r0
 800b6cc:	b928      	cbnz	r0, 800b6da <__multadd+0x5e>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	4b0d      	ldr	r3, [pc, #52]	; (800b708 <__multadd+0x8c>)
 800b6d2:	480e      	ldr	r0, [pc, #56]	; (800b70c <__multadd+0x90>)
 800b6d4:	21b5      	movs	r1, #181	; 0xb5
 800b6d6:	f000 fdaf 	bl	800c238 <__assert_func>
 800b6da:	6922      	ldr	r2, [r4, #16]
 800b6dc:	3202      	adds	r2, #2
 800b6de:	f104 010c 	add.w	r1, r4, #12
 800b6e2:	0092      	lsls	r2, r2, #2
 800b6e4:	300c      	adds	r0, #12
 800b6e6:	f7fe f8c9 	bl	800987c <memcpy>
 800b6ea:	4621      	mov	r1, r4
 800b6ec:	4638      	mov	r0, r7
 800b6ee:	f7ff ffa3 	bl	800b638 <_Bfree>
 800b6f2:	462c      	mov	r4, r5
 800b6f4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b6f8:	3601      	adds	r6, #1
 800b6fa:	f8c3 8014 	str.w	r8, [r3, #20]
 800b6fe:	6126      	str	r6, [r4, #16]
 800b700:	4620      	mov	r0, r4
 800b702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b706:	bf00      	nop
 800b708:	0800c6cf 	.word	0x0800c6cf
 800b70c:	0800c740 	.word	0x0800c740

0800b710 <__hi0bits>:
 800b710:	0c03      	lsrs	r3, r0, #16
 800b712:	041b      	lsls	r3, r3, #16
 800b714:	b9d3      	cbnz	r3, 800b74c <__hi0bits+0x3c>
 800b716:	0400      	lsls	r0, r0, #16
 800b718:	2310      	movs	r3, #16
 800b71a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b71e:	bf04      	itt	eq
 800b720:	0200      	lsleq	r0, r0, #8
 800b722:	3308      	addeq	r3, #8
 800b724:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b728:	bf04      	itt	eq
 800b72a:	0100      	lsleq	r0, r0, #4
 800b72c:	3304      	addeq	r3, #4
 800b72e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b732:	bf04      	itt	eq
 800b734:	0080      	lsleq	r0, r0, #2
 800b736:	3302      	addeq	r3, #2
 800b738:	2800      	cmp	r0, #0
 800b73a:	db05      	blt.n	800b748 <__hi0bits+0x38>
 800b73c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b740:	f103 0301 	add.w	r3, r3, #1
 800b744:	bf08      	it	eq
 800b746:	2320      	moveq	r3, #32
 800b748:	4618      	mov	r0, r3
 800b74a:	4770      	bx	lr
 800b74c:	2300      	movs	r3, #0
 800b74e:	e7e4      	b.n	800b71a <__hi0bits+0xa>

0800b750 <__lo0bits>:
 800b750:	6803      	ldr	r3, [r0, #0]
 800b752:	f013 0207 	ands.w	r2, r3, #7
 800b756:	4601      	mov	r1, r0
 800b758:	d00b      	beq.n	800b772 <__lo0bits+0x22>
 800b75a:	07da      	lsls	r2, r3, #31
 800b75c:	d424      	bmi.n	800b7a8 <__lo0bits+0x58>
 800b75e:	0798      	lsls	r0, r3, #30
 800b760:	bf49      	itett	mi
 800b762:	085b      	lsrmi	r3, r3, #1
 800b764:	089b      	lsrpl	r3, r3, #2
 800b766:	2001      	movmi	r0, #1
 800b768:	600b      	strmi	r3, [r1, #0]
 800b76a:	bf5c      	itt	pl
 800b76c:	600b      	strpl	r3, [r1, #0]
 800b76e:	2002      	movpl	r0, #2
 800b770:	4770      	bx	lr
 800b772:	b298      	uxth	r0, r3
 800b774:	b9b0      	cbnz	r0, 800b7a4 <__lo0bits+0x54>
 800b776:	0c1b      	lsrs	r3, r3, #16
 800b778:	2010      	movs	r0, #16
 800b77a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b77e:	bf04      	itt	eq
 800b780:	0a1b      	lsreq	r3, r3, #8
 800b782:	3008      	addeq	r0, #8
 800b784:	071a      	lsls	r2, r3, #28
 800b786:	bf04      	itt	eq
 800b788:	091b      	lsreq	r3, r3, #4
 800b78a:	3004      	addeq	r0, #4
 800b78c:	079a      	lsls	r2, r3, #30
 800b78e:	bf04      	itt	eq
 800b790:	089b      	lsreq	r3, r3, #2
 800b792:	3002      	addeq	r0, #2
 800b794:	07da      	lsls	r2, r3, #31
 800b796:	d403      	bmi.n	800b7a0 <__lo0bits+0x50>
 800b798:	085b      	lsrs	r3, r3, #1
 800b79a:	f100 0001 	add.w	r0, r0, #1
 800b79e:	d005      	beq.n	800b7ac <__lo0bits+0x5c>
 800b7a0:	600b      	str	r3, [r1, #0]
 800b7a2:	4770      	bx	lr
 800b7a4:	4610      	mov	r0, r2
 800b7a6:	e7e8      	b.n	800b77a <__lo0bits+0x2a>
 800b7a8:	2000      	movs	r0, #0
 800b7aa:	4770      	bx	lr
 800b7ac:	2020      	movs	r0, #32
 800b7ae:	4770      	bx	lr

0800b7b0 <__i2b>:
 800b7b0:	b510      	push	{r4, lr}
 800b7b2:	460c      	mov	r4, r1
 800b7b4:	2101      	movs	r1, #1
 800b7b6:	f7ff feff 	bl	800b5b8 <_Balloc>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	b928      	cbnz	r0, 800b7ca <__i2b+0x1a>
 800b7be:	4b05      	ldr	r3, [pc, #20]	; (800b7d4 <__i2b+0x24>)
 800b7c0:	4805      	ldr	r0, [pc, #20]	; (800b7d8 <__i2b+0x28>)
 800b7c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b7c6:	f000 fd37 	bl	800c238 <__assert_func>
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	6144      	str	r4, [r0, #20]
 800b7ce:	6103      	str	r3, [r0, #16]
 800b7d0:	bd10      	pop	{r4, pc}
 800b7d2:	bf00      	nop
 800b7d4:	0800c6cf 	.word	0x0800c6cf
 800b7d8:	0800c740 	.word	0x0800c740

0800b7dc <__multiply>:
 800b7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e0:	4614      	mov	r4, r2
 800b7e2:	690a      	ldr	r2, [r1, #16]
 800b7e4:	6923      	ldr	r3, [r4, #16]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	bfb8      	it	lt
 800b7ea:	460b      	movlt	r3, r1
 800b7ec:	460d      	mov	r5, r1
 800b7ee:	bfbc      	itt	lt
 800b7f0:	4625      	movlt	r5, r4
 800b7f2:	461c      	movlt	r4, r3
 800b7f4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b7f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b7fc:	68ab      	ldr	r3, [r5, #8]
 800b7fe:	6869      	ldr	r1, [r5, #4]
 800b800:	eb0a 0709 	add.w	r7, sl, r9
 800b804:	42bb      	cmp	r3, r7
 800b806:	b085      	sub	sp, #20
 800b808:	bfb8      	it	lt
 800b80a:	3101      	addlt	r1, #1
 800b80c:	f7ff fed4 	bl	800b5b8 <_Balloc>
 800b810:	b930      	cbnz	r0, 800b820 <__multiply+0x44>
 800b812:	4602      	mov	r2, r0
 800b814:	4b42      	ldr	r3, [pc, #264]	; (800b920 <__multiply+0x144>)
 800b816:	4843      	ldr	r0, [pc, #268]	; (800b924 <__multiply+0x148>)
 800b818:	f240 115d 	movw	r1, #349	; 0x15d
 800b81c:	f000 fd0c 	bl	800c238 <__assert_func>
 800b820:	f100 0614 	add.w	r6, r0, #20
 800b824:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b828:	4633      	mov	r3, r6
 800b82a:	2200      	movs	r2, #0
 800b82c:	4543      	cmp	r3, r8
 800b82e:	d31e      	bcc.n	800b86e <__multiply+0x92>
 800b830:	f105 0c14 	add.w	ip, r5, #20
 800b834:	f104 0314 	add.w	r3, r4, #20
 800b838:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b83c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b840:	9202      	str	r2, [sp, #8]
 800b842:	ebac 0205 	sub.w	r2, ip, r5
 800b846:	3a15      	subs	r2, #21
 800b848:	f022 0203 	bic.w	r2, r2, #3
 800b84c:	3204      	adds	r2, #4
 800b84e:	f105 0115 	add.w	r1, r5, #21
 800b852:	458c      	cmp	ip, r1
 800b854:	bf38      	it	cc
 800b856:	2204      	movcc	r2, #4
 800b858:	9201      	str	r2, [sp, #4]
 800b85a:	9a02      	ldr	r2, [sp, #8]
 800b85c:	9303      	str	r3, [sp, #12]
 800b85e:	429a      	cmp	r2, r3
 800b860:	d808      	bhi.n	800b874 <__multiply+0x98>
 800b862:	2f00      	cmp	r7, #0
 800b864:	dc55      	bgt.n	800b912 <__multiply+0x136>
 800b866:	6107      	str	r7, [r0, #16]
 800b868:	b005      	add	sp, #20
 800b86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b86e:	f843 2b04 	str.w	r2, [r3], #4
 800b872:	e7db      	b.n	800b82c <__multiply+0x50>
 800b874:	f8b3 a000 	ldrh.w	sl, [r3]
 800b878:	f1ba 0f00 	cmp.w	sl, #0
 800b87c:	d020      	beq.n	800b8c0 <__multiply+0xe4>
 800b87e:	f105 0e14 	add.w	lr, r5, #20
 800b882:	46b1      	mov	r9, r6
 800b884:	2200      	movs	r2, #0
 800b886:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b88a:	f8d9 b000 	ldr.w	fp, [r9]
 800b88e:	b2a1      	uxth	r1, r4
 800b890:	fa1f fb8b 	uxth.w	fp, fp
 800b894:	fb0a b101 	mla	r1, sl, r1, fp
 800b898:	4411      	add	r1, r2
 800b89a:	f8d9 2000 	ldr.w	r2, [r9]
 800b89e:	0c24      	lsrs	r4, r4, #16
 800b8a0:	0c12      	lsrs	r2, r2, #16
 800b8a2:	fb0a 2404 	mla	r4, sl, r4, r2
 800b8a6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b8aa:	b289      	uxth	r1, r1
 800b8ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b8b0:	45f4      	cmp	ip, lr
 800b8b2:	f849 1b04 	str.w	r1, [r9], #4
 800b8b6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b8ba:	d8e4      	bhi.n	800b886 <__multiply+0xaa>
 800b8bc:	9901      	ldr	r1, [sp, #4]
 800b8be:	5072      	str	r2, [r6, r1]
 800b8c0:	9a03      	ldr	r2, [sp, #12]
 800b8c2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b8c6:	3304      	adds	r3, #4
 800b8c8:	f1b9 0f00 	cmp.w	r9, #0
 800b8cc:	d01f      	beq.n	800b90e <__multiply+0x132>
 800b8ce:	6834      	ldr	r4, [r6, #0]
 800b8d0:	f105 0114 	add.w	r1, r5, #20
 800b8d4:	46b6      	mov	lr, r6
 800b8d6:	f04f 0a00 	mov.w	sl, #0
 800b8da:	880a      	ldrh	r2, [r1, #0]
 800b8dc:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b8e0:	fb09 b202 	mla	r2, r9, r2, fp
 800b8e4:	4492      	add	sl, r2
 800b8e6:	b2a4      	uxth	r4, r4
 800b8e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b8ec:	f84e 4b04 	str.w	r4, [lr], #4
 800b8f0:	f851 4b04 	ldr.w	r4, [r1], #4
 800b8f4:	f8be 2000 	ldrh.w	r2, [lr]
 800b8f8:	0c24      	lsrs	r4, r4, #16
 800b8fa:	fb09 2404 	mla	r4, r9, r4, r2
 800b8fe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b902:	458c      	cmp	ip, r1
 800b904:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b908:	d8e7      	bhi.n	800b8da <__multiply+0xfe>
 800b90a:	9a01      	ldr	r2, [sp, #4]
 800b90c:	50b4      	str	r4, [r6, r2]
 800b90e:	3604      	adds	r6, #4
 800b910:	e7a3      	b.n	800b85a <__multiply+0x7e>
 800b912:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b916:	2b00      	cmp	r3, #0
 800b918:	d1a5      	bne.n	800b866 <__multiply+0x8a>
 800b91a:	3f01      	subs	r7, #1
 800b91c:	e7a1      	b.n	800b862 <__multiply+0x86>
 800b91e:	bf00      	nop
 800b920:	0800c6cf 	.word	0x0800c6cf
 800b924:	0800c740 	.word	0x0800c740

0800b928 <__pow5mult>:
 800b928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b92c:	4615      	mov	r5, r2
 800b92e:	f012 0203 	ands.w	r2, r2, #3
 800b932:	4606      	mov	r6, r0
 800b934:	460f      	mov	r7, r1
 800b936:	d007      	beq.n	800b948 <__pow5mult+0x20>
 800b938:	4c25      	ldr	r4, [pc, #148]	; (800b9d0 <__pow5mult+0xa8>)
 800b93a:	3a01      	subs	r2, #1
 800b93c:	2300      	movs	r3, #0
 800b93e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b942:	f7ff fe9b 	bl	800b67c <__multadd>
 800b946:	4607      	mov	r7, r0
 800b948:	10ad      	asrs	r5, r5, #2
 800b94a:	d03d      	beq.n	800b9c8 <__pow5mult+0xa0>
 800b94c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b94e:	b97c      	cbnz	r4, 800b970 <__pow5mult+0x48>
 800b950:	2010      	movs	r0, #16
 800b952:	f7ff fe29 	bl	800b5a8 <malloc>
 800b956:	4602      	mov	r2, r0
 800b958:	6270      	str	r0, [r6, #36]	; 0x24
 800b95a:	b928      	cbnz	r0, 800b968 <__pow5mult+0x40>
 800b95c:	4b1d      	ldr	r3, [pc, #116]	; (800b9d4 <__pow5mult+0xac>)
 800b95e:	481e      	ldr	r0, [pc, #120]	; (800b9d8 <__pow5mult+0xb0>)
 800b960:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b964:	f000 fc68 	bl	800c238 <__assert_func>
 800b968:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b96c:	6004      	str	r4, [r0, #0]
 800b96e:	60c4      	str	r4, [r0, #12]
 800b970:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b974:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b978:	b94c      	cbnz	r4, 800b98e <__pow5mult+0x66>
 800b97a:	f240 2171 	movw	r1, #625	; 0x271
 800b97e:	4630      	mov	r0, r6
 800b980:	f7ff ff16 	bl	800b7b0 <__i2b>
 800b984:	2300      	movs	r3, #0
 800b986:	f8c8 0008 	str.w	r0, [r8, #8]
 800b98a:	4604      	mov	r4, r0
 800b98c:	6003      	str	r3, [r0, #0]
 800b98e:	f04f 0900 	mov.w	r9, #0
 800b992:	07eb      	lsls	r3, r5, #31
 800b994:	d50a      	bpl.n	800b9ac <__pow5mult+0x84>
 800b996:	4639      	mov	r1, r7
 800b998:	4622      	mov	r2, r4
 800b99a:	4630      	mov	r0, r6
 800b99c:	f7ff ff1e 	bl	800b7dc <__multiply>
 800b9a0:	4639      	mov	r1, r7
 800b9a2:	4680      	mov	r8, r0
 800b9a4:	4630      	mov	r0, r6
 800b9a6:	f7ff fe47 	bl	800b638 <_Bfree>
 800b9aa:	4647      	mov	r7, r8
 800b9ac:	106d      	asrs	r5, r5, #1
 800b9ae:	d00b      	beq.n	800b9c8 <__pow5mult+0xa0>
 800b9b0:	6820      	ldr	r0, [r4, #0]
 800b9b2:	b938      	cbnz	r0, 800b9c4 <__pow5mult+0x9c>
 800b9b4:	4622      	mov	r2, r4
 800b9b6:	4621      	mov	r1, r4
 800b9b8:	4630      	mov	r0, r6
 800b9ba:	f7ff ff0f 	bl	800b7dc <__multiply>
 800b9be:	6020      	str	r0, [r4, #0]
 800b9c0:	f8c0 9000 	str.w	r9, [r0]
 800b9c4:	4604      	mov	r4, r0
 800b9c6:	e7e4      	b.n	800b992 <__pow5mult+0x6a>
 800b9c8:	4638      	mov	r0, r7
 800b9ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9ce:	bf00      	nop
 800b9d0:	0800c890 	.word	0x0800c890
 800b9d4:	0800c659 	.word	0x0800c659
 800b9d8:	0800c740 	.word	0x0800c740

0800b9dc <__lshift>:
 800b9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9e0:	460c      	mov	r4, r1
 800b9e2:	6849      	ldr	r1, [r1, #4]
 800b9e4:	6923      	ldr	r3, [r4, #16]
 800b9e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b9ea:	68a3      	ldr	r3, [r4, #8]
 800b9ec:	4607      	mov	r7, r0
 800b9ee:	4691      	mov	r9, r2
 800b9f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b9f4:	f108 0601 	add.w	r6, r8, #1
 800b9f8:	42b3      	cmp	r3, r6
 800b9fa:	db0b      	blt.n	800ba14 <__lshift+0x38>
 800b9fc:	4638      	mov	r0, r7
 800b9fe:	f7ff fddb 	bl	800b5b8 <_Balloc>
 800ba02:	4605      	mov	r5, r0
 800ba04:	b948      	cbnz	r0, 800ba1a <__lshift+0x3e>
 800ba06:	4602      	mov	r2, r0
 800ba08:	4b28      	ldr	r3, [pc, #160]	; (800baac <__lshift+0xd0>)
 800ba0a:	4829      	ldr	r0, [pc, #164]	; (800bab0 <__lshift+0xd4>)
 800ba0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ba10:	f000 fc12 	bl	800c238 <__assert_func>
 800ba14:	3101      	adds	r1, #1
 800ba16:	005b      	lsls	r3, r3, #1
 800ba18:	e7ee      	b.n	800b9f8 <__lshift+0x1c>
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	f100 0114 	add.w	r1, r0, #20
 800ba20:	f100 0210 	add.w	r2, r0, #16
 800ba24:	4618      	mov	r0, r3
 800ba26:	4553      	cmp	r3, sl
 800ba28:	db33      	blt.n	800ba92 <__lshift+0xb6>
 800ba2a:	6920      	ldr	r0, [r4, #16]
 800ba2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba30:	f104 0314 	add.w	r3, r4, #20
 800ba34:	f019 091f 	ands.w	r9, r9, #31
 800ba38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ba40:	d02b      	beq.n	800ba9a <__lshift+0xbe>
 800ba42:	f1c9 0e20 	rsb	lr, r9, #32
 800ba46:	468a      	mov	sl, r1
 800ba48:	2200      	movs	r2, #0
 800ba4a:	6818      	ldr	r0, [r3, #0]
 800ba4c:	fa00 f009 	lsl.w	r0, r0, r9
 800ba50:	4302      	orrs	r2, r0
 800ba52:	f84a 2b04 	str.w	r2, [sl], #4
 800ba56:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba5a:	459c      	cmp	ip, r3
 800ba5c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ba60:	d8f3      	bhi.n	800ba4a <__lshift+0x6e>
 800ba62:	ebac 0304 	sub.w	r3, ip, r4
 800ba66:	3b15      	subs	r3, #21
 800ba68:	f023 0303 	bic.w	r3, r3, #3
 800ba6c:	3304      	adds	r3, #4
 800ba6e:	f104 0015 	add.w	r0, r4, #21
 800ba72:	4584      	cmp	ip, r0
 800ba74:	bf38      	it	cc
 800ba76:	2304      	movcc	r3, #4
 800ba78:	50ca      	str	r2, [r1, r3]
 800ba7a:	b10a      	cbz	r2, 800ba80 <__lshift+0xa4>
 800ba7c:	f108 0602 	add.w	r6, r8, #2
 800ba80:	3e01      	subs	r6, #1
 800ba82:	4638      	mov	r0, r7
 800ba84:	612e      	str	r6, [r5, #16]
 800ba86:	4621      	mov	r1, r4
 800ba88:	f7ff fdd6 	bl	800b638 <_Bfree>
 800ba8c:	4628      	mov	r0, r5
 800ba8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba92:	f842 0f04 	str.w	r0, [r2, #4]!
 800ba96:	3301      	adds	r3, #1
 800ba98:	e7c5      	b.n	800ba26 <__lshift+0x4a>
 800ba9a:	3904      	subs	r1, #4
 800ba9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800baa0:	f841 2f04 	str.w	r2, [r1, #4]!
 800baa4:	459c      	cmp	ip, r3
 800baa6:	d8f9      	bhi.n	800ba9c <__lshift+0xc0>
 800baa8:	e7ea      	b.n	800ba80 <__lshift+0xa4>
 800baaa:	bf00      	nop
 800baac:	0800c6cf 	.word	0x0800c6cf
 800bab0:	0800c740 	.word	0x0800c740

0800bab4 <__mcmp>:
 800bab4:	b530      	push	{r4, r5, lr}
 800bab6:	6902      	ldr	r2, [r0, #16]
 800bab8:	690c      	ldr	r4, [r1, #16]
 800baba:	1b12      	subs	r2, r2, r4
 800babc:	d10e      	bne.n	800badc <__mcmp+0x28>
 800babe:	f100 0314 	add.w	r3, r0, #20
 800bac2:	3114      	adds	r1, #20
 800bac4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bac8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bacc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bad0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bad4:	42a5      	cmp	r5, r4
 800bad6:	d003      	beq.n	800bae0 <__mcmp+0x2c>
 800bad8:	d305      	bcc.n	800bae6 <__mcmp+0x32>
 800bada:	2201      	movs	r2, #1
 800badc:	4610      	mov	r0, r2
 800bade:	bd30      	pop	{r4, r5, pc}
 800bae0:	4283      	cmp	r3, r0
 800bae2:	d3f3      	bcc.n	800bacc <__mcmp+0x18>
 800bae4:	e7fa      	b.n	800badc <__mcmp+0x28>
 800bae6:	f04f 32ff 	mov.w	r2, #4294967295
 800baea:	e7f7      	b.n	800badc <__mcmp+0x28>

0800baec <__mdiff>:
 800baec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf0:	460c      	mov	r4, r1
 800baf2:	4606      	mov	r6, r0
 800baf4:	4611      	mov	r1, r2
 800baf6:	4620      	mov	r0, r4
 800baf8:	4617      	mov	r7, r2
 800bafa:	f7ff ffdb 	bl	800bab4 <__mcmp>
 800bafe:	1e05      	subs	r5, r0, #0
 800bb00:	d110      	bne.n	800bb24 <__mdiff+0x38>
 800bb02:	4629      	mov	r1, r5
 800bb04:	4630      	mov	r0, r6
 800bb06:	f7ff fd57 	bl	800b5b8 <_Balloc>
 800bb0a:	b930      	cbnz	r0, 800bb1a <__mdiff+0x2e>
 800bb0c:	4b39      	ldr	r3, [pc, #228]	; (800bbf4 <__mdiff+0x108>)
 800bb0e:	4602      	mov	r2, r0
 800bb10:	f240 2132 	movw	r1, #562	; 0x232
 800bb14:	4838      	ldr	r0, [pc, #224]	; (800bbf8 <__mdiff+0x10c>)
 800bb16:	f000 fb8f 	bl	800c238 <__assert_func>
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb24:	bfa4      	itt	ge
 800bb26:	463b      	movge	r3, r7
 800bb28:	4627      	movge	r7, r4
 800bb2a:	4630      	mov	r0, r6
 800bb2c:	6879      	ldr	r1, [r7, #4]
 800bb2e:	bfa6      	itte	ge
 800bb30:	461c      	movge	r4, r3
 800bb32:	2500      	movge	r5, #0
 800bb34:	2501      	movlt	r5, #1
 800bb36:	f7ff fd3f 	bl	800b5b8 <_Balloc>
 800bb3a:	b920      	cbnz	r0, 800bb46 <__mdiff+0x5a>
 800bb3c:	4b2d      	ldr	r3, [pc, #180]	; (800bbf4 <__mdiff+0x108>)
 800bb3e:	4602      	mov	r2, r0
 800bb40:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bb44:	e7e6      	b.n	800bb14 <__mdiff+0x28>
 800bb46:	693e      	ldr	r6, [r7, #16]
 800bb48:	60c5      	str	r5, [r0, #12]
 800bb4a:	6925      	ldr	r5, [r4, #16]
 800bb4c:	f107 0114 	add.w	r1, r7, #20
 800bb50:	f104 0914 	add.w	r9, r4, #20
 800bb54:	f100 0e14 	add.w	lr, r0, #20
 800bb58:	f107 0210 	add.w	r2, r7, #16
 800bb5c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800bb60:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800bb64:	46f2      	mov	sl, lr
 800bb66:	2700      	movs	r7, #0
 800bb68:	f859 3b04 	ldr.w	r3, [r9], #4
 800bb6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bb70:	fa1f f883 	uxth.w	r8, r3
 800bb74:	fa17 f78b 	uxtah	r7, r7, fp
 800bb78:	0c1b      	lsrs	r3, r3, #16
 800bb7a:	eba7 0808 	sub.w	r8, r7, r8
 800bb7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bb82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bb86:	fa1f f888 	uxth.w	r8, r8
 800bb8a:	141f      	asrs	r7, r3, #16
 800bb8c:	454d      	cmp	r5, r9
 800bb8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bb92:	f84a 3b04 	str.w	r3, [sl], #4
 800bb96:	d8e7      	bhi.n	800bb68 <__mdiff+0x7c>
 800bb98:	1b2b      	subs	r3, r5, r4
 800bb9a:	3b15      	subs	r3, #21
 800bb9c:	f023 0303 	bic.w	r3, r3, #3
 800bba0:	3304      	adds	r3, #4
 800bba2:	3415      	adds	r4, #21
 800bba4:	42a5      	cmp	r5, r4
 800bba6:	bf38      	it	cc
 800bba8:	2304      	movcc	r3, #4
 800bbaa:	4419      	add	r1, r3
 800bbac:	4473      	add	r3, lr
 800bbae:	469e      	mov	lr, r3
 800bbb0:	460d      	mov	r5, r1
 800bbb2:	4565      	cmp	r5, ip
 800bbb4:	d30e      	bcc.n	800bbd4 <__mdiff+0xe8>
 800bbb6:	f10c 0203 	add.w	r2, ip, #3
 800bbba:	1a52      	subs	r2, r2, r1
 800bbbc:	f022 0203 	bic.w	r2, r2, #3
 800bbc0:	3903      	subs	r1, #3
 800bbc2:	458c      	cmp	ip, r1
 800bbc4:	bf38      	it	cc
 800bbc6:	2200      	movcc	r2, #0
 800bbc8:	441a      	add	r2, r3
 800bbca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bbce:	b17b      	cbz	r3, 800bbf0 <__mdiff+0x104>
 800bbd0:	6106      	str	r6, [r0, #16]
 800bbd2:	e7a5      	b.n	800bb20 <__mdiff+0x34>
 800bbd4:	f855 8b04 	ldr.w	r8, [r5], #4
 800bbd8:	fa17 f488 	uxtah	r4, r7, r8
 800bbdc:	1422      	asrs	r2, r4, #16
 800bbde:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800bbe2:	b2a4      	uxth	r4, r4
 800bbe4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800bbe8:	f84e 4b04 	str.w	r4, [lr], #4
 800bbec:	1417      	asrs	r7, r2, #16
 800bbee:	e7e0      	b.n	800bbb2 <__mdiff+0xc6>
 800bbf0:	3e01      	subs	r6, #1
 800bbf2:	e7ea      	b.n	800bbca <__mdiff+0xde>
 800bbf4:	0800c6cf 	.word	0x0800c6cf
 800bbf8:	0800c740 	.word	0x0800c740

0800bbfc <__d2b>:
 800bbfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc00:	4689      	mov	r9, r1
 800bc02:	2101      	movs	r1, #1
 800bc04:	ec57 6b10 	vmov	r6, r7, d0
 800bc08:	4690      	mov	r8, r2
 800bc0a:	f7ff fcd5 	bl	800b5b8 <_Balloc>
 800bc0e:	4604      	mov	r4, r0
 800bc10:	b930      	cbnz	r0, 800bc20 <__d2b+0x24>
 800bc12:	4602      	mov	r2, r0
 800bc14:	4b25      	ldr	r3, [pc, #148]	; (800bcac <__d2b+0xb0>)
 800bc16:	4826      	ldr	r0, [pc, #152]	; (800bcb0 <__d2b+0xb4>)
 800bc18:	f240 310a 	movw	r1, #778	; 0x30a
 800bc1c:	f000 fb0c 	bl	800c238 <__assert_func>
 800bc20:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bc24:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bc28:	bb35      	cbnz	r5, 800bc78 <__d2b+0x7c>
 800bc2a:	2e00      	cmp	r6, #0
 800bc2c:	9301      	str	r3, [sp, #4]
 800bc2e:	d028      	beq.n	800bc82 <__d2b+0x86>
 800bc30:	4668      	mov	r0, sp
 800bc32:	9600      	str	r6, [sp, #0]
 800bc34:	f7ff fd8c 	bl	800b750 <__lo0bits>
 800bc38:	9900      	ldr	r1, [sp, #0]
 800bc3a:	b300      	cbz	r0, 800bc7e <__d2b+0x82>
 800bc3c:	9a01      	ldr	r2, [sp, #4]
 800bc3e:	f1c0 0320 	rsb	r3, r0, #32
 800bc42:	fa02 f303 	lsl.w	r3, r2, r3
 800bc46:	430b      	orrs	r3, r1
 800bc48:	40c2      	lsrs	r2, r0
 800bc4a:	6163      	str	r3, [r4, #20]
 800bc4c:	9201      	str	r2, [sp, #4]
 800bc4e:	9b01      	ldr	r3, [sp, #4]
 800bc50:	61a3      	str	r3, [r4, #24]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	bf14      	ite	ne
 800bc56:	2202      	movne	r2, #2
 800bc58:	2201      	moveq	r2, #1
 800bc5a:	6122      	str	r2, [r4, #16]
 800bc5c:	b1d5      	cbz	r5, 800bc94 <__d2b+0x98>
 800bc5e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bc62:	4405      	add	r5, r0
 800bc64:	f8c9 5000 	str.w	r5, [r9]
 800bc68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bc6c:	f8c8 0000 	str.w	r0, [r8]
 800bc70:	4620      	mov	r0, r4
 800bc72:	b003      	add	sp, #12
 800bc74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc7c:	e7d5      	b.n	800bc2a <__d2b+0x2e>
 800bc7e:	6161      	str	r1, [r4, #20]
 800bc80:	e7e5      	b.n	800bc4e <__d2b+0x52>
 800bc82:	a801      	add	r0, sp, #4
 800bc84:	f7ff fd64 	bl	800b750 <__lo0bits>
 800bc88:	9b01      	ldr	r3, [sp, #4]
 800bc8a:	6163      	str	r3, [r4, #20]
 800bc8c:	2201      	movs	r2, #1
 800bc8e:	6122      	str	r2, [r4, #16]
 800bc90:	3020      	adds	r0, #32
 800bc92:	e7e3      	b.n	800bc5c <__d2b+0x60>
 800bc94:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bc98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bc9c:	f8c9 0000 	str.w	r0, [r9]
 800bca0:	6918      	ldr	r0, [r3, #16]
 800bca2:	f7ff fd35 	bl	800b710 <__hi0bits>
 800bca6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bcaa:	e7df      	b.n	800bc6c <__d2b+0x70>
 800bcac:	0800c6cf 	.word	0x0800c6cf
 800bcb0:	0800c740 	.word	0x0800c740

0800bcb4 <_calloc_r>:
 800bcb4:	b513      	push	{r0, r1, r4, lr}
 800bcb6:	434a      	muls	r2, r1
 800bcb8:	4611      	mov	r1, r2
 800bcba:	9201      	str	r2, [sp, #4]
 800bcbc:	f000 f85a 	bl	800bd74 <_malloc_r>
 800bcc0:	4604      	mov	r4, r0
 800bcc2:	b118      	cbz	r0, 800bccc <_calloc_r+0x18>
 800bcc4:	9a01      	ldr	r2, [sp, #4]
 800bcc6:	2100      	movs	r1, #0
 800bcc8:	f7fd fde6 	bl	8009898 <memset>
 800bccc:	4620      	mov	r0, r4
 800bcce:	b002      	add	sp, #8
 800bcd0:	bd10      	pop	{r4, pc}
	...

0800bcd4 <_free_r>:
 800bcd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bcd6:	2900      	cmp	r1, #0
 800bcd8:	d048      	beq.n	800bd6c <_free_r+0x98>
 800bcda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcde:	9001      	str	r0, [sp, #4]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	f1a1 0404 	sub.w	r4, r1, #4
 800bce6:	bfb8      	it	lt
 800bce8:	18e4      	addlt	r4, r4, r3
 800bcea:	f000 fb2b 	bl	800c344 <__malloc_lock>
 800bcee:	4a20      	ldr	r2, [pc, #128]	; (800bd70 <_free_r+0x9c>)
 800bcf0:	9801      	ldr	r0, [sp, #4]
 800bcf2:	6813      	ldr	r3, [r2, #0]
 800bcf4:	4615      	mov	r5, r2
 800bcf6:	b933      	cbnz	r3, 800bd06 <_free_r+0x32>
 800bcf8:	6063      	str	r3, [r4, #4]
 800bcfa:	6014      	str	r4, [r2, #0]
 800bcfc:	b003      	add	sp, #12
 800bcfe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd02:	f000 bb25 	b.w	800c350 <__malloc_unlock>
 800bd06:	42a3      	cmp	r3, r4
 800bd08:	d90b      	bls.n	800bd22 <_free_r+0x4e>
 800bd0a:	6821      	ldr	r1, [r4, #0]
 800bd0c:	1862      	adds	r2, r4, r1
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	bf04      	itt	eq
 800bd12:	681a      	ldreq	r2, [r3, #0]
 800bd14:	685b      	ldreq	r3, [r3, #4]
 800bd16:	6063      	str	r3, [r4, #4]
 800bd18:	bf04      	itt	eq
 800bd1a:	1852      	addeq	r2, r2, r1
 800bd1c:	6022      	streq	r2, [r4, #0]
 800bd1e:	602c      	str	r4, [r5, #0]
 800bd20:	e7ec      	b.n	800bcfc <_free_r+0x28>
 800bd22:	461a      	mov	r2, r3
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	b10b      	cbz	r3, 800bd2c <_free_r+0x58>
 800bd28:	42a3      	cmp	r3, r4
 800bd2a:	d9fa      	bls.n	800bd22 <_free_r+0x4e>
 800bd2c:	6811      	ldr	r1, [r2, #0]
 800bd2e:	1855      	adds	r5, r2, r1
 800bd30:	42a5      	cmp	r5, r4
 800bd32:	d10b      	bne.n	800bd4c <_free_r+0x78>
 800bd34:	6824      	ldr	r4, [r4, #0]
 800bd36:	4421      	add	r1, r4
 800bd38:	1854      	adds	r4, r2, r1
 800bd3a:	42a3      	cmp	r3, r4
 800bd3c:	6011      	str	r1, [r2, #0]
 800bd3e:	d1dd      	bne.n	800bcfc <_free_r+0x28>
 800bd40:	681c      	ldr	r4, [r3, #0]
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	6053      	str	r3, [r2, #4]
 800bd46:	4421      	add	r1, r4
 800bd48:	6011      	str	r1, [r2, #0]
 800bd4a:	e7d7      	b.n	800bcfc <_free_r+0x28>
 800bd4c:	d902      	bls.n	800bd54 <_free_r+0x80>
 800bd4e:	230c      	movs	r3, #12
 800bd50:	6003      	str	r3, [r0, #0]
 800bd52:	e7d3      	b.n	800bcfc <_free_r+0x28>
 800bd54:	6825      	ldr	r5, [r4, #0]
 800bd56:	1961      	adds	r1, r4, r5
 800bd58:	428b      	cmp	r3, r1
 800bd5a:	bf04      	itt	eq
 800bd5c:	6819      	ldreq	r1, [r3, #0]
 800bd5e:	685b      	ldreq	r3, [r3, #4]
 800bd60:	6063      	str	r3, [r4, #4]
 800bd62:	bf04      	itt	eq
 800bd64:	1949      	addeq	r1, r1, r5
 800bd66:	6021      	streq	r1, [r4, #0]
 800bd68:	6054      	str	r4, [r2, #4]
 800bd6a:	e7c7      	b.n	800bcfc <_free_r+0x28>
 800bd6c:	b003      	add	sp, #12
 800bd6e:	bd30      	pop	{r4, r5, pc}
 800bd70:	20000238 	.word	0x20000238

0800bd74 <_malloc_r>:
 800bd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd76:	1ccd      	adds	r5, r1, #3
 800bd78:	f025 0503 	bic.w	r5, r5, #3
 800bd7c:	3508      	adds	r5, #8
 800bd7e:	2d0c      	cmp	r5, #12
 800bd80:	bf38      	it	cc
 800bd82:	250c      	movcc	r5, #12
 800bd84:	2d00      	cmp	r5, #0
 800bd86:	4606      	mov	r6, r0
 800bd88:	db01      	blt.n	800bd8e <_malloc_r+0x1a>
 800bd8a:	42a9      	cmp	r1, r5
 800bd8c:	d903      	bls.n	800bd96 <_malloc_r+0x22>
 800bd8e:	230c      	movs	r3, #12
 800bd90:	6033      	str	r3, [r6, #0]
 800bd92:	2000      	movs	r0, #0
 800bd94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd96:	f000 fad5 	bl	800c344 <__malloc_lock>
 800bd9a:	4921      	ldr	r1, [pc, #132]	; (800be20 <_malloc_r+0xac>)
 800bd9c:	680a      	ldr	r2, [r1, #0]
 800bd9e:	4614      	mov	r4, r2
 800bda0:	b99c      	cbnz	r4, 800bdca <_malloc_r+0x56>
 800bda2:	4f20      	ldr	r7, [pc, #128]	; (800be24 <_malloc_r+0xb0>)
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	b923      	cbnz	r3, 800bdb2 <_malloc_r+0x3e>
 800bda8:	4621      	mov	r1, r4
 800bdaa:	4630      	mov	r0, r6
 800bdac:	f000 f9de 	bl	800c16c <_sbrk_r>
 800bdb0:	6038      	str	r0, [r7, #0]
 800bdb2:	4629      	mov	r1, r5
 800bdb4:	4630      	mov	r0, r6
 800bdb6:	f000 f9d9 	bl	800c16c <_sbrk_r>
 800bdba:	1c43      	adds	r3, r0, #1
 800bdbc:	d123      	bne.n	800be06 <_malloc_r+0x92>
 800bdbe:	230c      	movs	r3, #12
 800bdc0:	6033      	str	r3, [r6, #0]
 800bdc2:	4630      	mov	r0, r6
 800bdc4:	f000 fac4 	bl	800c350 <__malloc_unlock>
 800bdc8:	e7e3      	b.n	800bd92 <_malloc_r+0x1e>
 800bdca:	6823      	ldr	r3, [r4, #0]
 800bdcc:	1b5b      	subs	r3, r3, r5
 800bdce:	d417      	bmi.n	800be00 <_malloc_r+0x8c>
 800bdd0:	2b0b      	cmp	r3, #11
 800bdd2:	d903      	bls.n	800bddc <_malloc_r+0x68>
 800bdd4:	6023      	str	r3, [r4, #0]
 800bdd6:	441c      	add	r4, r3
 800bdd8:	6025      	str	r5, [r4, #0]
 800bdda:	e004      	b.n	800bde6 <_malloc_r+0x72>
 800bddc:	6863      	ldr	r3, [r4, #4]
 800bdde:	42a2      	cmp	r2, r4
 800bde0:	bf0c      	ite	eq
 800bde2:	600b      	streq	r3, [r1, #0]
 800bde4:	6053      	strne	r3, [r2, #4]
 800bde6:	4630      	mov	r0, r6
 800bde8:	f000 fab2 	bl	800c350 <__malloc_unlock>
 800bdec:	f104 000b 	add.w	r0, r4, #11
 800bdf0:	1d23      	adds	r3, r4, #4
 800bdf2:	f020 0007 	bic.w	r0, r0, #7
 800bdf6:	1ac2      	subs	r2, r0, r3
 800bdf8:	d0cc      	beq.n	800bd94 <_malloc_r+0x20>
 800bdfa:	1a1b      	subs	r3, r3, r0
 800bdfc:	50a3      	str	r3, [r4, r2]
 800bdfe:	e7c9      	b.n	800bd94 <_malloc_r+0x20>
 800be00:	4622      	mov	r2, r4
 800be02:	6864      	ldr	r4, [r4, #4]
 800be04:	e7cc      	b.n	800bda0 <_malloc_r+0x2c>
 800be06:	1cc4      	adds	r4, r0, #3
 800be08:	f024 0403 	bic.w	r4, r4, #3
 800be0c:	42a0      	cmp	r0, r4
 800be0e:	d0e3      	beq.n	800bdd8 <_malloc_r+0x64>
 800be10:	1a21      	subs	r1, r4, r0
 800be12:	4630      	mov	r0, r6
 800be14:	f000 f9aa 	bl	800c16c <_sbrk_r>
 800be18:	3001      	adds	r0, #1
 800be1a:	d1dd      	bne.n	800bdd8 <_malloc_r+0x64>
 800be1c:	e7cf      	b.n	800bdbe <_malloc_r+0x4a>
 800be1e:	bf00      	nop
 800be20:	20000238 	.word	0x20000238
 800be24:	2000023c 	.word	0x2000023c

0800be28 <__sfputc_r>:
 800be28:	6893      	ldr	r3, [r2, #8]
 800be2a:	3b01      	subs	r3, #1
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	b410      	push	{r4}
 800be30:	6093      	str	r3, [r2, #8]
 800be32:	da08      	bge.n	800be46 <__sfputc_r+0x1e>
 800be34:	6994      	ldr	r4, [r2, #24]
 800be36:	42a3      	cmp	r3, r4
 800be38:	db01      	blt.n	800be3e <__sfputc_r+0x16>
 800be3a:	290a      	cmp	r1, #10
 800be3c:	d103      	bne.n	800be46 <__sfputc_r+0x1e>
 800be3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be42:	f7fe ba53 	b.w	800a2ec <__swbuf_r>
 800be46:	6813      	ldr	r3, [r2, #0]
 800be48:	1c58      	adds	r0, r3, #1
 800be4a:	6010      	str	r0, [r2, #0]
 800be4c:	7019      	strb	r1, [r3, #0]
 800be4e:	4608      	mov	r0, r1
 800be50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be54:	4770      	bx	lr

0800be56 <__sfputs_r>:
 800be56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be58:	4606      	mov	r6, r0
 800be5a:	460f      	mov	r7, r1
 800be5c:	4614      	mov	r4, r2
 800be5e:	18d5      	adds	r5, r2, r3
 800be60:	42ac      	cmp	r4, r5
 800be62:	d101      	bne.n	800be68 <__sfputs_r+0x12>
 800be64:	2000      	movs	r0, #0
 800be66:	e007      	b.n	800be78 <__sfputs_r+0x22>
 800be68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be6c:	463a      	mov	r2, r7
 800be6e:	4630      	mov	r0, r6
 800be70:	f7ff ffda 	bl	800be28 <__sfputc_r>
 800be74:	1c43      	adds	r3, r0, #1
 800be76:	d1f3      	bne.n	800be60 <__sfputs_r+0xa>
 800be78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800be7c <_vfiprintf_r>:
 800be7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be80:	460d      	mov	r5, r1
 800be82:	b09d      	sub	sp, #116	; 0x74
 800be84:	4614      	mov	r4, r2
 800be86:	4698      	mov	r8, r3
 800be88:	4606      	mov	r6, r0
 800be8a:	b118      	cbz	r0, 800be94 <_vfiprintf_r+0x18>
 800be8c:	6983      	ldr	r3, [r0, #24]
 800be8e:	b90b      	cbnz	r3, 800be94 <_vfiprintf_r+0x18>
 800be90:	f7ff fa80 	bl	800b394 <__sinit>
 800be94:	4b89      	ldr	r3, [pc, #548]	; (800c0bc <_vfiprintf_r+0x240>)
 800be96:	429d      	cmp	r5, r3
 800be98:	d11b      	bne.n	800bed2 <_vfiprintf_r+0x56>
 800be9a:	6875      	ldr	r5, [r6, #4]
 800be9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be9e:	07d9      	lsls	r1, r3, #31
 800bea0:	d405      	bmi.n	800beae <_vfiprintf_r+0x32>
 800bea2:	89ab      	ldrh	r3, [r5, #12]
 800bea4:	059a      	lsls	r2, r3, #22
 800bea6:	d402      	bmi.n	800beae <_vfiprintf_r+0x32>
 800bea8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800beaa:	f7ff fb16 	bl	800b4da <__retarget_lock_acquire_recursive>
 800beae:	89ab      	ldrh	r3, [r5, #12]
 800beb0:	071b      	lsls	r3, r3, #28
 800beb2:	d501      	bpl.n	800beb8 <_vfiprintf_r+0x3c>
 800beb4:	692b      	ldr	r3, [r5, #16]
 800beb6:	b9eb      	cbnz	r3, 800bef4 <_vfiprintf_r+0x78>
 800beb8:	4629      	mov	r1, r5
 800beba:	4630      	mov	r0, r6
 800bebc:	f7fe fa68 	bl	800a390 <__swsetup_r>
 800bec0:	b1c0      	cbz	r0, 800bef4 <_vfiprintf_r+0x78>
 800bec2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bec4:	07dc      	lsls	r4, r3, #31
 800bec6:	d50e      	bpl.n	800bee6 <_vfiprintf_r+0x6a>
 800bec8:	f04f 30ff 	mov.w	r0, #4294967295
 800becc:	b01d      	add	sp, #116	; 0x74
 800bece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bed2:	4b7b      	ldr	r3, [pc, #492]	; (800c0c0 <_vfiprintf_r+0x244>)
 800bed4:	429d      	cmp	r5, r3
 800bed6:	d101      	bne.n	800bedc <_vfiprintf_r+0x60>
 800bed8:	68b5      	ldr	r5, [r6, #8]
 800beda:	e7df      	b.n	800be9c <_vfiprintf_r+0x20>
 800bedc:	4b79      	ldr	r3, [pc, #484]	; (800c0c4 <_vfiprintf_r+0x248>)
 800bede:	429d      	cmp	r5, r3
 800bee0:	bf08      	it	eq
 800bee2:	68f5      	ldreq	r5, [r6, #12]
 800bee4:	e7da      	b.n	800be9c <_vfiprintf_r+0x20>
 800bee6:	89ab      	ldrh	r3, [r5, #12]
 800bee8:	0598      	lsls	r0, r3, #22
 800beea:	d4ed      	bmi.n	800bec8 <_vfiprintf_r+0x4c>
 800beec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800beee:	f7ff faf5 	bl	800b4dc <__retarget_lock_release_recursive>
 800bef2:	e7e9      	b.n	800bec8 <_vfiprintf_r+0x4c>
 800bef4:	2300      	movs	r3, #0
 800bef6:	9309      	str	r3, [sp, #36]	; 0x24
 800bef8:	2320      	movs	r3, #32
 800befa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800befe:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf02:	2330      	movs	r3, #48	; 0x30
 800bf04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c0c8 <_vfiprintf_r+0x24c>
 800bf08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf0c:	f04f 0901 	mov.w	r9, #1
 800bf10:	4623      	mov	r3, r4
 800bf12:	469a      	mov	sl, r3
 800bf14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf18:	b10a      	cbz	r2, 800bf1e <_vfiprintf_r+0xa2>
 800bf1a:	2a25      	cmp	r2, #37	; 0x25
 800bf1c:	d1f9      	bne.n	800bf12 <_vfiprintf_r+0x96>
 800bf1e:	ebba 0b04 	subs.w	fp, sl, r4
 800bf22:	d00b      	beq.n	800bf3c <_vfiprintf_r+0xc0>
 800bf24:	465b      	mov	r3, fp
 800bf26:	4622      	mov	r2, r4
 800bf28:	4629      	mov	r1, r5
 800bf2a:	4630      	mov	r0, r6
 800bf2c:	f7ff ff93 	bl	800be56 <__sfputs_r>
 800bf30:	3001      	adds	r0, #1
 800bf32:	f000 80aa 	beq.w	800c08a <_vfiprintf_r+0x20e>
 800bf36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf38:	445a      	add	r2, fp
 800bf3a:	9209      	str	r2, [sp, #36]	; 0x24
 800bf3c:	f89a 3000 	ldrb.w	r3, [sl]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	f000 80a2 	beq.w	800c08a <_vfiprintf_r+0x20e>
 800bf46:	2300      	movs	r3, #0
 800bf48:	f04f 32ff 	mov.w	r2, #4294967295
 800bf4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf50:	f10a 0a01 	add.w	sl, sl, #1
 800bf54:	9304      	str	r3, [sp, #16]
 800bf56:	9307      	str	r3, [sp, #28]
 800bf58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf5c:	931a      	str	r3, [sp, #104]	; 0x68
 800bf5e:	4654      	mov	r4, sl
 800bf60:	2205      	movs	r2, #5
 800bf62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf66:	4858      	ldr	r0, [pc, #352]	; (800c0c8 <_vfiprintf_r+0x24c>)
 800bf68:	f7f4 f942 	bl	80001f0 <memchr>
 800bf6c:	9a04      	ldr	r2, [sp, #16]
 800bf6e:	b9d8      	cbnz	r0, 800bfa8 <_vfiprintf_r+0x12c>
 800bf70:	06d1      	lsls	r1, r2, #27
 800bf72:	bf44      	itt	mi
 800bf74:	2320      	movmi	r3, #32
 800bf76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf7a:	0713      	lsls	r3, r2, #28
 800bf7c:	bf44      	itt	mi
 800bf7e:	232b      	movmi	r3, #43	; 0x2b
 800bf80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf84:	f89a 3000 	ldrb.w	r3, [sl]
 800bf88:	2b2a      	cmp	r3, #42	; 0x2a
 800bf8a:	d015      	beq.n	800bfb8 <_vfiprintf_r+0x13c>
 800bf8c:	9a07      	ldr	r2, [sp, #28]
 800bf8e:	4654      	mov	r4, sl
 800bf90:	2000      	movs	r0, #0
 800bf92:	f04f 0c0a 	mov.w	ip, #10
 800bf96:	4621      	mov	r1, r4
 800bf98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf9c:	3b30      	subs	r3, #48	; 0x30
 800bf9e:	2b09      	cmp	r3, #9
 800bfa0:	d94e      	bls.n	800c040 <_vfiprintf_r+0x1c4>
 800bfa2:	b1b0      	cbz	r0, 800bfd2 <_vfiprintf_r+0x156>
 800bfa4:	9207      	str	r2, [sp, #28]
 800bfa6:	e014      	b.n	800bfd2 <_vfiprintf_r+0x156>
 800bfa8:	eba0 0308 	sub.w	r3, r0, r8
 800bfac:	fa09 f303 	lsl.w	r3, r9, r3
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	9304      	str	r3, [sp, #16]
 800bfb4:	46a2      	mov	sl, r4
 800bfb6:	e7d2      	b.n	800bf5e <_vfiprintf_r+0xe2>
 800bfb8:	9b03      	ldr	r3, [sp, #12]
 800bfba:	1d19      	adds	r1, r3, #4
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	9103      	str	r1, [sp, #12]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	bfbb      	ittet	lt
 800bfc4:	425b      	neglt	r3, r3
 800bfc6:	f042 0202 	orrlt.w	r2, r2, #2
 800bfca:	9307      	strge	r3, [sp, #28]
 800bfcc:	9307      	strlt	r3, [sp, #28]
 800bfce:	bfb8      	it	lt
 800bfd0:	9204      	strlt	r2, [sp, #16]
 800bfd2:	7823      	ldrb	r3, [r4, #0]
 800bfd4:	2b2e      	cmp	r3, #46	; 0x2e
 800bfd6:	d10c      	bne.n	800bff2 <_vfiprintf_r+0x176>
 800bfd8:	7863      	ldrb	r3, [r4, #1]
 800bfda:	2b2a      	cmp	r3, #42	; 0x2a
 800bfdc:	d135      	bne.n	800c04a <_vfiprintf_r+0x1ce>
 800bfde:	9b03      	ldr	r3, [sp, #12]
 800bfe0:	1d1a      	adds	r2, r3, #4
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	9203      	str	r2, [sp, #12]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	bfb8      	it	lt
 800bfea:	f04f 33ff 	movlt.w	r3, #4294967295
 800bfee:	3402      	adds	r4, #2
 800bff0:	9305      	str	r3, [sp, #20]
 800bff2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c0d8 <_vfiprintf_r+0x25c>
 800bff6:	7821      	ldrb	r1, [r4, #0]
 800bff8:	2203      	movs	r2, #3
 800bffa:	4650      	mov	r0, sl
 800bffc:	f7f4 f8f8 	bl	80001f0 <memchr>
 800c000:	b140      	cbz	r0, 800c014 <_vfiprintf_r+0x198>
 800c002:	2340      	movs	r3, #64	; 0x40
 800c004:	eba0 000a 	sub.w	r0, r0, sl
 800c008:	fa03 f000 	lsl.w	r0, r3, r0
 800c00c:	9b04      	ldr	r3, [sp, #16]
 800c00e:	4303      	orrs	r3, r0
 800c010:	3401      	adds	r4, #1
 800c012:	9304      	str	r3, [sp, #16]
 800c014:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c018:	482c      	ldr	r0, [pc, #176]	; (800c0cc <_vfiprintf_r+0x250>)
 800c01a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c01e:	2206      	movs	r2, #6
 800c020:	f7f4 f8e6 	bl	80001f0 <memchr>
 800c024:	2800      	cmp	r0, #0
 800c026:	d03f      	beq.n	800c0a8 <_vfiprintf_r+0x22c>
 800c028:	4b29      	ldr	r3, [pc, #164]	; (800c0d0 <_vfiprintf_r+0x254>)
 800c02a:	bb1b      	cbnz	r3, 800c074 <_vfiprintf_r+0x1f8>
 800c02c:	9b03      	ldr	r3, [sp, #12]
 800c02e:	3307      	adds	r3, #7
 800c030:	f023 0307 	bic.w	r3, r3, #7
 800c034:	3308      	adds	r3, #8
 800c036:	9303      	str	r3, [sp, #12]
 800c038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c03a:	443b      	add	r3, r7
 800c03c:	9309      	str	r3, [sp, #36]	; 0x24
 800c03e:	e767      	b.n	800bf10 <_vfiprintf_r+0x94>
 800c040:	fb0c 3202 	mla	r2, ip, r2, r3
 800c044:	460c      	mov	r4, r1
 800c046:	2001      	movs	r0, #1
 800c048:	e7a5      	b.n	800bf96 <_vfiprintf_r+0x11a>
 800c04a:	2300      	movs	r3, #0
 800c04c:	3401      	adds	r4, #1
 800c04e:	9305      	str	r3, [sp, #20]
 800c050:	4619      	mov	r1, r3
 800c052:	f04f 0c0a 	mov.w	ip, #10
 800c056:	4620      	mov	r0, r4
 800c058:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c05c:	3a30      	subs	r2, #48	; 0x30
 800c05e:	2a09      	cmp	r2, #9
 800c060:	d903      	bls.n	800c06a <_vfiprintf_r+0x1ee>
 800c062:	2b00      	cmp	r3, #0
 800c064:	d0c5      	beq.n	800bff2 <_vfiprintf_r+0x176>
 800c066:	9105      	str	r1, [sp, #20]
 800c068:	e7c3      	b.n	800bff2 <_vfiprintf_r+0x176>
 800c06a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c06e:	4604      	mov	r4, r0
 800c070:	2301      	movs	r3, #1
 800c072:	e7f0      	b.n	800c056 <_vfiprintf_r+0x1da>
 800c074:	ab03      	add	r3, sp, #12
 800c076:	9300      	str	r3, [sp, #0]
 800c078:	462a      	mov	r2, r5
 800c07a:	4b16      	ldr	r3, [pc, #88]	; (800c0d4 <_vfiprintf_r+0x258>)
 800c07c:	a904      	add	r1, sp, #16
 800c07e:	4630      	mov	r0, r6
 800c080:	f7fd fcb2 	bl	80099e8 <_printf_float>
 800c084:	4607      	mov	r7, r0
 800c086:	1c78      	adds	r0, r7, #1
 800c088:	d1d6      	bne.n	800c038 <_vfiprintf_r+0x1bc>
 800c08a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c08c:	07d9      	lsls	r1, r3, #31
 800c08e:	d405      	bmi.n	800c09c <_vfiprintf_r+0x220>
 800c090:	89ab      	ldrh	r3, [r5, #12]
 800c092:	059a      	lsls	r2, r3, #22
 800c094:	d402      	bmi.n	800c09c <_vfiprintf_r+0x220>
 800c096:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c098:	f7ff fa20 	bl	800b4dc <__retarget_lock_release_recursive>
 800c09c:	89ab      	ldrh	r3, [r5, #12]
 800c09e:	065b      	lsls	r3, r3, #25
 800c0a0:	f53f af12 	bmi.w	800bec8 <_vfiprintf_r+0x4c>
 800c0a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0a6:	e711      	b.n	800becc <_vfiprintf_r+0x50>
 800c0a8:	ab03      	add	r3, sp, #12
 800c0aa:	9300      	str	r3, [sp, #0]
 800c0ac:	462a      	mov	r2, r5
 800c0ae:	4b09      	ldr	r3, [pc, #36]	; (800c0d4 <_vfiprintf_r+0x258>)
 800c0b0:	a904      	add	r1, sp, #16
 800c0b2:	4630      	mov	r0, r6
 800c0b4:	f7fd ff3c 	bl	8009f30 <_printf_i>
 800c0b8:	e7e4      	b.n	800c084 <_vfiprintf_r+0x208>
 800c0ba:	bf00      	nop
 800c0bc:	0800c700 	.word	0x0800c700
 800c0c0:	0800c720 	.word	0x0800c720
 800c0c4:	0800c6e0 	.word	0x0800c6e0
 800c0c8:	0800c89c 	.word	0x0800c89c
 800c0cc:	0800c8a6 	.word	0x0800c8a6
 800c0d0:	080099e9 	.word	0x080099e9
 800c0d4:	0800be57 	.word	0x0800be57
 800c0d8:	0800c8a2 	.word	0x0800c8a2

0800c0dc <_putc_r>:
 800c0dc:	b570      	push	{r4, r5, r6, lr}
 800c0de:	460d      	mov	r5, r1
 800c0e0:	4614      	mov	r4, r2
 800c0e2:	4606      	mov	r6, r0
 800c0e4:	b118      	cbz	r0, 800c0ee <_putc_r+0x12>
 800c0e6:	6983      	ldr	r3, [r0, #24]
 800c0e8:	b90b      	cbnz	r3, 800c0ee <_putc_r+0x12>
 800c0ea:	f7ff f953 	bl	800b394 <__sinit>
 800c0ee:	4b1c      	ldr	r3, [pc, #112]	; (800c160 <_putc_r+0x84>)
 800c0f0:	429c      	cmp	r4, r3
 800c0f2:	d124      	bne.n	800c13e <_putc_r+0x62>
 800c0f4:	6874      	ldr	r4, [r6, #4]
 800c0f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0f8:	07d8      	lsls	r0, r3, #31
 800c0fa:	d405      	bmi.n	800c108 <_putc_r+0x2c>
 800c0fc:	89a3      	ldrh	r3, [r4, #12]
 800c0fe:	0599      	lsls	r1, r3, #22
 800c100:	d402      	bmi.n	800c108 <_putc_r+0x2c>
 800c102:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c104:	f7ff f9e9 	bl	800b4da <__retarget_lock_acquire_recursive>
 800c108:	68a3      	ldr	r3, [r4, #8]
 800c10a:	3b01      	subs	r3, #1
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	60a3      	str	r3, [r4, #8]
 800c110:	da05      	bge.n	800c11e <_putc_r+0x42>
 800c112:	69a2      	ldr	r2, [r4, #24]
 800c114:	4293      	cmp	r3, r2
 800c116:	db1c      	blt.n	800c152 <_putc_r+0x76>
 800c118:	b2eb      	uxtb	r3, r5
 800c11a:	2b0a      	cmp	r3, #10
 800c11c:	d019      	beq.n	800c152 <_putc_r+0x76>
 800c11e:	6823      	ldr	r3, [r4, #0]
 800c120:	1c5a      	adds	r2, r3, #1
 800c122:	6022      	str	r2, [r4, #0]
 800c124:	701d      	strb	r5, [r3, #0]
 800c126:	b2ed      	uxtb	r5, r5
 800c128:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c12a:	07da      	lsls	r2, r3, #31
 800c12c:	d405      	bmi.n	800c13a <_putc_r+0x5e>
 800c12e:	89a3      	ldrh	r3, [r4, #12]
 800c130:	059b      	lsls	r3, r3, #22
 800c132:	d402      	bmi.n	800c13a <_putc_r+0x5e>
 800c134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c136:	f7ff f9d1 	bl	800b4dc <__retarget_lock_release_recursive>
 800c13a:	4628      	mov	r0, r5
 800c13c:	bd70      	pop	{r4, r5, r6, pc}
 800c13e:	4b09      	ldr	r3, [pc, #36]	; (800c164 <_putc_r+0x88>)
 800c140:	429c      	cmp	r4, r3
 800c142:	d101      	bne.n	800c148 <_putc_r+0x6c>
 800c144:	68b4      	ldr	r4, [r6, #8]
 800c146:	e7d6      	b.n	800c0f6 <_putc_r+0x1a>
 800c148:	4b07      	ldr	r3, [pc, #28]	; (800c168 <_putc_r+0x8c>)
 800c14a:	429c      	cmp	r4, r3
 800c14c:	bf08      	it	eq
 800c14e:	68f4      	ldreq	r4, [r6, #12]
 800c150:	e7d1      	b.n	800c0f6 <_putc_r+0x1a>
 800c152:	4629      	mov	r1, r5
 800c154:	4622      	mov	r2, r4
 800c156:	4630      	mov	r0, r6
 800c158:	f7fe f8c8 	bl	800a2ec <__swbuf_r>
 800c15c:	4605      	mov	r5, r0
 800c15e:	e7e3      	b.n	800c128 <_putc_r+0x4c>
 800c160:	0800c700 	.word	0x0800c700
 800c164:	0800c720 	.word	0x0800c720
 800c168:	0800c6e0 	.word	0x0800c6e0

0800c16c <_sbrk_r>:
 800c16c:	b538      	push	{r3, r4, r5, lr}
 800c16e:	4d06      	ldr	r5, [pc, #24]	; (800c188 <_sbrk_r+0x1c>)
 800c170:	2300      	movs	r3, #0
 800c172:	4604      	mov	r4, r0
 800c174:	4608      	mov	r0, r1
 800c176:	602b      	str	r3, [r5, #0]
 800c178:	f000 f992 	bl	800c4a0 <_sbrk>
 800c17c:	1c43      	adds	r3, r0, #1
 800c17e:	d102      	bne.n	800c186 <_sbrk_r+0x1a>
 800c180:	682b      	ldr	r3, [r5, #0]
 800c182:	b103      	cbz	r3, 800c186 <_sbrk_r+0x1a>
 800c184:	6023      	str	r3, [r4, #0]
 800c186:	bd38      	pop	{r3, r4, r5, pc}
 800c188:	20002fc0 	.word	0x20002fc0

0800c18c <__sread>:
 800c18c:	b510      	push	{r4, lr}
 800c18e:	460c      	mov	r4, r1
 800c190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c194:	f000 f8e2 	bl	800c35c <_read_r>
 800c198:	2800      	cmp	r0, #0
 800c19a:	bfab      	itete	ge
 800c19c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c19e:	89a3      	ldrhlt	r3, [r4, #12]
 800c1a0:	181b      	addge	r3, r3, r0
 800c1a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c1a6:	bfac      	ite	ge
 800c1a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c1aa:	81a3      	strhlt	r3, [r4, #12]
 800c1ac:	bd10      	pop	{r4, pc}

0800c1ae <__swrite>:
 800c1ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1b2:	461f      	mov	r7, r3
 800c1b4:	898b      	ldrh	r3, [r1, #12]
 800c1b6:	05db      	lsls	r3, r3, #23
 800c1b8:	4605      	mov	r5, r0
 800c1ba:	460c      	mov	r4, r1
 800c1bc:	4616      	mov	r6, r2
 800c1be:	d505      	bpl.n	800c1cc <__swrite+0x1e>
 800c1c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1c4:	2302      	movs	r3, #2
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	f000 f898 	bl	800c2fc <_lseek_r>
 800c1cc:	89a3      	ldrh	r3, [r4, #12]
 800c1ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c1d6:	81a3      	strh	r3, [r4, #12]
 800c1d8:	4632      	mov	r2, r6
 800c1da:	463b      	mov	r3, r7
 800c1dc:	4628      	mov	r0, r5
 800c1de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1e2:	f000 b817 	b.w	800c214 <_write_r>

0800c1e6 <__sseek>:
 800c1e6:	b510      	push	{r4, lr}
 800c1e8:	460c      	mov	r4, r1
 800c1ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1ee:	f000 f885 	bl	800c2fc <_lseek_r>
 800c1f2:	1c43      	adds	r3, r0, #1
 800c1f4:	89a3      	ldrh	r3, [r4, #12]
 800c1f6:	bf15      	itete	ne
 800c1f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c1fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c1fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c202:	81a3      	strheq	r3, [r4, #12]
 800c204:	bf18      	it	ne
 800c206:	81a3      	strhne	r3, [r4, #12]
 800c208:	bd10      	pop	{r4, pc}

0800c20a <__sclose>:
 800c20a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c20e:	f000 b831 	b.w	800c274 <_close_r>
	...

0800c214 <_write_r>:
 800c214:	b538      	push	{r3, r4, r5, lr}
 800c216:	4d07      	ldr	r5, [pc, #28]	; (800c234 <_write_r+0x20>)
 800c218:	4604      	mov	r4, r0
 800c21a:	4608      	mov	r0, r1
 800c21c:	4611      	mov	r1, r2
 800c21e:	2200      	movs	r2, #0
 800c220:	602a      	str	r2, [r5, #0]
 800c222:	461a      	mov	r2, r3
 800c224:	f7f5 f910 	bl	8001448 <_write>
 800c228:	1c43      	adds	r3, r0, #1
 800c22a:	d102      	bne.n	800c232 <_write_r+0x1e>
 800c22c:	682b      	ldr	r3, [r5, #0]
 800c22e:	b103      	cbz	r3, 800c232 <_write_r+0x1e>
 800c230:	6023      	str	r3, [r4, #0]
 800c232:	bd38      	pop	{r3, r4, r5, pc}
 800c234:	20002fc0 	.word	0x20002fc0

0800c238 <__assert_func>:
 800c238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c23a:	4614      	mov	r4, r2
 800c23c:	461a      	mov	r2, r3
 800c23e:	4b09      	ldr	r3, [pc, #36]	; (800c264 <__assert_func+0x2c>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	4605      	mov	r5, r0
 800c244:	68d8      	ldr	r0, [r3, #12]
 800c246:	b14c      	cbz	r4, 800c25c <__assert_func+0x24>
 800c248:	4b07      	ldr	r3, [pc, #28]	; (800c268 <__assert_func+0x30>)
 800c24a:	9100      	str	r1, [sp, #0]
 800c24c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c250:	4906      	ldr	r1, [pc, #24]	; (800c26c <__assert_func+0x34>)
 800c252:	462b      	mov	r3, r5
 800c254:	f000 f81e 	bl	800c294 <fiprintf>
 800c258:	f000 f89f 	bl	800c39a <abort>
 800c25c:	4b04      	ldr	r3, [pc, #16]	; (800c270 <__assert_func+0x38>)
 800c25e:	461c      	mov	r4, r3
 800c260:	e7f3      	b.n	800c24a <__assert_func+0x12>
 800c262:	bf00      	nop
 800c264:	2000003c 	.word	0x2000003c
 800c268:	0800c8ad 	.word	0x0800c8ad
 800c26c:	0800c8ba 	.word	0x0800c8ba
 800c270:	0800c612 	.word	0x0800c612

0800c274 <_close_r>:
 800c274:	b538      	push	{r3, r4, r5, lr}
 800c276:	4d06      	ldr	r5, [pc, #24]	; (800c290 <_close_r+0x1c>)
 800c278:	2300      	movs	r3, #0
 800c27a:	4604      	mov	r4, r0
 800c27c:	4608      	mov	r0, r1
 800c27e:	602b      	str	r3, [r5, #0]
 800c280:	f000 f8d6 	bl	800c430 <_close>
 800c284:	1c43      	adds	r3, r0, #1
 800c286:	d102      	bne.n	800c28e <_close_r+0x1a>
 800c288:	682b      	ldr	r3, [r5, #0]
 800c28a:	b103      	cbz	r3, 800c28e <_close_r+0x1a>
 800c28c:	6023      	str	r3, [r4, #0]
 800c28e:	bd38      	pop	{r3, r4, r5, pc}
 800c290:	20002fc0 	.word	0x20002fc0

0800c294 <fiprintf>:
 800c294:	b40e      	push	{r1, r2, r3}
 800c296:	b503      	push	{r0, r1, lr}
 800c298:	4601      	mov	r1, r0
 800c29a:	ab03      	add	r3, sp, #12
 800c29c:	4805      	ldr	r0, [pc, #20]	; (800c2b4 <fiprintf+0x20>)
 800c29e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2a2:	6800      	ldr	r0, [r0, #0]
 800c2a4:	9301      	str	r3, [sp, #4]
 800c2a6:	f7ff fde9 	bl	800be7c <_vfiprintf_r>
 800c2aa:	b002      	add	sp, #8
 800c2ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2b0:	b003      	add	sp, #12
 800c2b2:	4770      	bx	lr
 800c2b4:	2000003c 	.word	0x2000003c

0800c2b8 <_fstat_r>:
 800c2b8:	b538      	push	{r3, r4, r5, lr}
 800c2ba:	4d07      	ldr	r5, [pc, #28]	; (800c2d8 <_fstat_r+0x20>)
 800c2bc:	2300      	movs	r3, #0
 800c2be:	4604      	mov	r4, r0
 800c2c0:	4608      	mov	r0, r1
 800c2c2:	4611      	mov	r1, r2
 800c2c4:	602b      	str	r3, [r5, #0]
 800c2c6:	f000 f8bb 	bl	800c440 <_fstat>
 800c2ca:	1c43      	adds	r3, r0, #1
 800c2cc:	d102      	bne.n	800c2d4 <_fstat_r+0x1c>
 800c2ce:	682b      	ldr	r3, [r5, #0]
 800c2d0:	b103      	cbz	r3, 800c2d4 <_fstat_r+0x1c>
 800c2d2:	6023      	str	r3, [r4, #0]
 800c2d4:	bd38      	pop	{r3, r4, r5, pc}
 800c2d6:	bf00      	nop
 800c2d8:	20002fc0 	.word	0x20002fc0

0800c2dc <_isatty_r>:
 800c2dc:	b538      	push	{r3, r4, r5, lr}
 800c2de:	4d06      	ldr	r5, [pc, #24]	; (800c2f8 <_isatty_r+0x1c>)
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	4604      	mov	r4, r0
 800c2e4:	4608      	mov	r0, r1
 800c2e6:	602b      	str	r3, [r5, #0]
 800c2e8:	f000 f8ba 	bl	800c460 <_isatty>
 800c2ec:	1c43      	adds	r3, r0, #1
 800c2ee:	d102      	bne.n	800c2f6 <_isatty_r+0x1a>
 800c2f0:	682b      	ldr	r3, [r5, #0]
 800c2f2:	b103      	cbz	r3, 800c2f6 <_isatty_r+0x1a>
 800c2f4:	6023      	str	r3, [r4, #0]
 800c2f6:	bd38      	pop	{r3, r4, r5, pc}
 800c2f8:	20002fc0 	.word	0x20002fc0

0800c2fc <_lseek_r>:
 800c2fc:	b538      	push	{r3, r4, r5, lr}
 800c2fe:	4d07      	ldr	r5, [pc, #28]	; (800c31c <_lseek_r+0x20>)
 800c300:	4604      	mov	r4, r0
 800c302:	4608      	mov	r0, r1
 800c304:	4611      	mov	r1, r2
 800c306:	2200      	movs	r2, #0
 800c308:	602a      	str	r2, [r5, #0]
 800c30a:	461a      	mov	r2, r3
 800c30c:	f000 f8b8 	bl	800c480 <_lseek>
 800c310:	1c43      	adds	r3, r0, #1
 800c312:	d102      	bne.n	800c31a <_lseek_r+0x1e>
 800c314:	682b      	ldr	r3, [r5, #0]
 800c316:	b103      	cbz	r3, 800c31a <_lseek_r+0x1e>
 800c318:	6023      	str	r3, [r4, #0]
 800c31a:	bd38      	pop	{r3, r4, r5, pc}
 800c31c:	20002fc0 	.word	0x20002fc0

0800c320 <__ascii_mbtowc>:
 800c320:	b082      	sub	sp, #8
 800c322:	b901      	cbnz	r1, 800c326 <__ascii_mbtowc+0x6>
 800c324:	a901      	add	r1, sp, #4
 800c326:	b142      	cbz	r2, 800c33a <__ascii_mbtowc+0x1a>
 800c328:	b14b      	cbz	r3, 800c33e <__ascii_mbtowc+0x1e>
 800c32a:	7813      	ldrb	r3, [r2, #0]
 800c32c:	600b      	str	r3, [r1, #0]
 800c32e:	7812      	ldrb	r2, [r2, #0]
 800c330:	1e10      	subs	r0, r2, #0
 800c332:	bf18      	it	ne
 800c334:	2001      	movne	r0, #1
 800c336:	b002      	add	sp, #8
 800c338:	4770      	bx	lr
 800c33a:	4610      	mov	r0, r2
 800c33c:	e7fb      	b.n	800c336 <__ascii_mbtowc+0x16>
 800c33e:	f06f 0001 	mvn.w	r0, #1
 800c342:	e7f8      	b.n	800c336 <__ascii_mbtowc+0x16>

0800c344 <__malloc_lock>:
 800c344:	4801      	ldr	r0, [pc, #4]	; (800c34c <__malloc_lock+0x8>)
 800c346:	f7ff b8c8 	b.w	800b4da <__retarget_lock_acquire_recursive>
 800c34a:	bf00      	nop
 800c34c:	20002fb8 	.word	0x20002fb8

0800c350 <__malloc_unlock>:
 800c350:	4801      	ldr	r0, [pc, #4]	; (800c358 <__malloc_unlock+0x8>)
 800c352:	f7ff b8c3 	b.w	800b4dc <__retarget_lock_release_recursive>
 800c356:	bf00      	nop
 800c358:	20002fb8 	.word	0x20002fb8

0800c35c <_read_r>:
 800c35c:	b538      	push	{r3, r4, r5, lr}
 800c35e:	4d07      	ldr	r5, [pc, #28]	; (800c37c <_read_r+0x20>)
 800c360:	4604      	mov	r4, r0
 800c362:	4608      	mov	r0, r1
 800c364:	4611      	mov	r1, r2
 800c366:	2200      	movs	r2, #0
 800c368:	602a      	str	r2, [r5, #0]
 800c36a:	461a      	mov	r2, r3
 800c36c:	f000 f890 	bl	800c490 <_read>
 800c370:	1c43      	adds	r3, r0, #1
 800c372:	d102      	bne.n	800c37a <_read_r+0x1e>
 800c374:	682b      	ldr	r3, [r5, #0]
 800c376:	b103      	cbz	r3, 800c37a <_read_r+0x1e>
 800c378:	6023      	str	r3, [r4, #0]
 800c37a:	bd38      	pop	{r3, r4, r5, pc}
 800c37c:	20002fc0 	.word	0x20002fc0

0800c380 <__ascii_wctomb>:
 800c380:	b149      	cbz	r1, 800c396 <__ascii_wctomb+0x16>
 800c382:	2aff      	cmp	r2, #255	; 0xff
 800c384:	bf85      	ittet	hi
 800c386:	238a      	movhi	r3, #138	; 0x8a
 800c388:	6003      	strhi	r3, [r0, #0]
 800c38a:	700a      	strbls	r2, [r1, #0]
 800c38c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c390:	bf98      	it	ls
 800c392:	2001      	movls	r0, #1
 800c394:	4770      	bx	lr
 800c396:	4608      	mov	r0, r1
 800c398:	4770      	bx	lr

0800c39a <abort>:
 800c39a:	b508      	push	{r3, lr}
 800c39c:	2006      	movs	r0, #6
 800c39e:	f000 f82b 	bl	800c3f8 <raise>
 800c3a2:	2001      	movs	r0, #1
 800c3a4:	f000 f88a 	bl	800c4bc <_exit>

0800c3a8 <_raise_r>:
 800c3a8:	291f      	cmp	r1, #31
 800c3aa:	b538      	push	{r3, r4, r5, lr}
 800c3ac:	4604      	mov	r4, r0
 800c3ae:	460d      	mov	r5, r1
 800c3b0:	d904      	bls.n	800c3bc <_raise_r+0x14>
 800c3b2:	2316      	movs	r3, #22
 800c3b4:	6003      	str	r3, [r0, #0]
 800c3b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ba:	bd38      	pop	{r3, r4, r5, pc}
 800c3bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c3be:	b112      	cbz	r2, 800c3c6 <_raise_r+0x1e>
 800c3c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c3c4:	b94b      	cbnz	r3, 800c3da <_raise_r+0x32>
 800c3c6:	4620      	mov	r0, r4
 800c3c8:	f000 f830 	bl	800c42c <_getpid_r>
 800c3cc:	462a      	mov	r2, r5
 800c3ce:	4601      	mov	r1, r0
 800c3d0:	4620      	mov	r0, r4
 800c3d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3d6:	f000 b817 	b.w	800c408 <_kill_r>
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d00a      	beq.n	800c3f4 <_raise_r+0x4c>
 800c3de:	1c59      	adds	r1, r3, #1
 800c3e0:	d103      	bne.n	800c3ea <_raise_r+0x42>
 800c3e2:	2316      	movs	r3, #22
 800c3e4:	6003      	str	r3, [r0, #0]
 800c3e6:	2001      	movs	r0, #1
 800c3e8:	e7e7      	b.n	800c3ba <_raise_r+0x12>
 800c3ea:	2400      	movs	r4, #0
 800c3ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	4798      	blx	r3
 800c3f4:	2000      	movs	r0, #0
 800c3f6:	e7e0      	b.n	800c3ba <_raise_r+0x12>

0800c3f8 <raise>:
 800c3f8:	4b02      	ldr	r3, [pc, #8]	; (800c404 <raise+0xc>)
 800c3fa:	4601      	mov	r1, r0
 800c3fc:	6818      	ldr	r0, [r3, #0]
 800c3fe:	f7ff bfd3 	b.w	800c3a8 <_raise_r>
 800c402:	bf00      	nop
 800c404:	2000003c 	.word	0x2000003c

0800c408 <_kill_r>:
 800c408:	b538      	push	{r3, r4, r5, lr}
 800c40a:	4d07      	ldr	r5, [pc, #28]	; (800c428 <_kill_r+0x20>)
 800c40c:	2300      	movs	r3, #0
 800c40e:	4604      	mov	r4, r0
 800c410:	4608      	mov	r0, r1
 800c412:	4611      	mov	r1, r2
 800c414:	602b      	str	r3, [r5, #0]
 800c416:	f000 f82b 	bl	800c470 <_kill>
 800c41a:	1c43      	adds	r3, r0, #1
 800c41c:	d102      	bne.n	800c424 <_kill_r+0x1c>
 800c41e:	682b      	ldr	r3, [r5, #0]
 800c420:	b103      	cbz	r3, 800c424 <_kill_r+0x1c>
 800c422:	6023      	str	r3, [r4, #0]
 800c424:	bd38      	pop	{r3, r4, r5, pc}
 800c426:	bf00      	nop
 800c428:	20002fc0 	.word	0x20002fc0

0800c42c <_getpid_r>:
 800c42c:	f000 b810 	b.w	800c450 <_getpid>

0800c430 <_close>:
 800c430:	4b02      	ldr	r3, [pc, #8]	; (800c43c <_close+0xc>)
 800c432:	2258      	movs	r2, #88	; 0x58
 800c434:	601a      	str	r2, [r3, #0]
 800c436:	f04f 30ff 	mov.w	r0, #4294967295
 800c43a:	4770      	bx	lr
 800c43c:	20002fc0 	.word	0x20002fc0

0800c440 <_fstat>:
 800c440:	4b02      	ldr	r3, [pc, #8]	; (800c44c <_fstat+0xc>)
 800c442:	2258      	movs	r2, #88	; 0x58
 800c444:	601a      	str	r2, [r3, #0]
 800c446:	f04f 30ff 	mov.w	r0, #4294967295
 800c44a:	4770      	bx	lr
 800c44c:	20002fc0 	.word	0x20002fc0

0800c450 <_getpid>:
 800c450:	4b02      	ldr	r3, [pc, #8]	; (800c45c <_getpid+0xc>)
 800c452:	2258      	movs	r2, #88	; 0x58
 800c454:	601a      	str	r2, [r3, #0]
 800c456:	f04f 30ff 	mov.w	r0, #4294967295
 800c45a:	4770      	bx	lr
 800c45c:	20002fc0 	.word	0x20002fc0

0800c460 <_isatty>:
 800c460:	4b02      	ldr	r3, [pc, #8]	; (800c46c <_isatty+0xc>)
 800c462:	2258      	movs	r2, #88	; 0x58
 800c464:	601a      	str	r2, [r3, #0]
 800c466:	2000      	movs	r0, #0
 800c468:	4770      	bx	lr
 800c46a:	bf00      	nop
 800c46c:	20002fc0 	.word	0x20002fc0

0800c470 <_kill>:
 800c470:	4b02      	ldr	r3, [pc, #8]	; (800c47c <_kill+0xc>)
 800c472:	2258      	movs	r2, #88	; 0x58
 800c474:	601a      	str	r2, [r3, #0]
 800c476:	f04f 30ff 	mov.w	r0, #4294967295
 800c47a:	4770      	bx	lr
 800c47c:	20002fc0 	.word	0x20002fc0

0800c480 <_lseek>:
 800c480:	4b02      	ldr	r3, [pc, #8]	; (800c48c <_lseek+0xc>)
 800c482:	2258      	movs	r2, #88	; 0x58
 800c484:	601a      	str	r2, [r3, #0]
 800c486:	f04f 30ff 	mov.w	r0, #4294967295
 800c48a:	4770      	bx	lr
 800c48c:	20002fc0 	.word	0x20002fc0

0800c490 <_read>:
 800c490:	4b02      	ldr	r3, [pc, #8]	; (800c49c <_read+0xc>)
 800c492:	2258      	movs	r2, #88	; 0x58
 800c494:	601a      	str	r2, [r3, #0]
 800c496:	f04f 30ff 	mov.w	r0, #4294967295
 800c49a:	4770      	bx	lr
 800c49c:	20002fc0 	.word	0x20002fc0

0800c4a0 <_sbrk>:
 800c4a0:	4b04      	ldr	r3, [pc, #16]	; (800c4b4 <_sbrk+0x14>)
 800c4a2:	6819      	ldr	r1, [r3, #0]
 800c4a4:	4602      	mov	r2, r0
 800c4a6:	b909      	cbnz	r1, 800c4ac <_sbrk+0xc>
 800c4a8:	4903      	ldr	r1, [pc, #12]	; (800c4b8 <_sbrk+0x18>)
 800c4aa:	6019      	str	r1, [r3, #0]
 800c4ac:	6818      	ldr	r0, [r3, #0]
 800c4ae:	4402      	add	r2, r0
 800c4b0:	601a      	str	r2, [r3, #0]
 800c4b2:	4770      	bx	lr
 800c4b4:	20000240 	.word	0x20000240
 800c4b8:	20002fc8 	.word	0x20002fc8

0800c4bc <_exit>:
 800c4bc:	e7fe      	b.n	800c4bc <_exit>
	...

0800c4c0 <_init>:
 800c4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4c2:	bf00      	nop
 800c4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4c6:	bc08      	pop	{r3}
 800c4c8:	469e      	mov	lr, r3
 800c4ca:	4770      	bx	lr

0800c4cc <_fini>:
 800c4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ce:	bf00      	nop
 800c4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4d2:	bc08      	pop	{r3}
 800c4d4:	469e      	mov	lr, r3
 800c4d6:	4770      	bx	lr
